{
    "0.1": {
        "info": {
            "author": "Kalvar",
            "author_email": "ilovekalvar@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "## About\n\nGrey Theory System that means uncertain relationships between the various factors within the system, this system in which part of information is known and another part is unknown. This theory has 3 methods are : GM0N, GM1N, GM11.\n\n[Grey Relational Analysis](https://en.wikipedia.org/wiki/Grey_relational_analysis) <br />\n[\u7070\u8272\u7cfb\u7d71\u7406\u8ad6](http://wiki.mbalib.com/zh-tw/%E7%81%B0%E8%89%B2%E7%B3%BB%E7%BB%9F%E7%90%86%E8%AE%BA) <br />\n[\u7070\u8272\u95dc\u806f\u5206\u6790](http://wiki.mbalib.com/zh-tw/%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90) <br />\n[\u7070\u8272\u9810\u6e2c\u6cd5](http://wiki.mbalib.com/zh-tw/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%B3%95) <br />\n[\u300aGrey system theory-based models in time series prediction\u300b2009.](http://www.mecha.ee.boun.edu.tr/Prof.%20Dr.%20Okyay%20Kaynak%20Publications/c%20Journal%20Papers(appearing%20in%20SCI%20or%20SCIE%20or%20CompuMath)/62.pdf) <br />\n[\u6539\uf97c\u5f0f GM(1,1)\u7070\u9810\u6e2c\u6a21\u578b\u65bc\u53f0\u96fb\u96fb\uf97e\u9700\u6c42\u9810\u6e2c\u4e4b\u7814\u7a76](http://www.engh.kuas.edu.tw/files/ne/pnz67gteh2.pdf)\n\n## How To Get Started\n\n#### Import\n``` python\nfrom grey_theory import GreyTheory\ngrey = GreyTheory()\n```\n\n#### GM0N\n``` python\n\ngm0n = grey.gm0n\n\ngm0n.add_outputs([1., 1., 1., 1., 1., 1.], \"x1\")\ngm0n.add_patterns([.75, 1.22, .2, 1., 1., 1.], \"x2\")\ngm0n.add_patterns([.5, 1., .7, .66, 1., .5], \"x3\")\ngm0n.add_patterns([1., 1.09, .4, .33, .66, .25], \"x4\")\ngm0n.add_patterns([.25, .99, 1., .66, .33, .25], \"x5\")\n\ngm0n.analyze()\n\n# Looks GM0N the results as below:\ngm0n.print_analyzed_results()\n\"\"\"\nPattern key: 'x3', grey value: 0.745169986457907, ranking: 1\nPattern key: 'x4', grey value: 0.5714064714568454, ranking: 2\nPattern key: 'x2', grey value: 0.501334367966725, ranking: 3\nPattern key: 'x5', grey value: 0.49555636151070015, ranking: 4\n\"\"\"\n\ngm0n.print_influence_degrees()\n\"\"\"\nThe keys of parameters their influence degrees (ordering): 'x3 > x4 > x2 > x5'\n\"\"\"\n```\n\n#### GM1N\n``` python\ngm1n = grey.gm1n\n\ngm1n.add_outputs([2., 11., 1.5, 2., 2.2, 3.], \"x1\")\ngm1n.add_patterns([3., 13.5, 1., 3., 3., 4.], \"x2\")\ngm1n.add_patterns([2., 11., 3.5, 2., 3., 2.], \"x3\")\ngm1n.add_patterns([4., 12., 2., 1., 2., 1.], \"x4\")\ngm1n.add_patterns([1., 10., 5., 2., 1., 1.], \"x5\")\n\ngm1n.analyze()\n\n# Looks GM1N the results as below:\ngm1n.print_analyzed_results()\n\"\"\"\nPattern key: 'x1', grey value: 1.4385641363407546, ranking: 0\nPattern key: 'x2', grey value: 1.3300049398977922, ranking: 1\nPattern key: 'x4', grey value: 0.6084241725675539, ranking: 2\nPattern key: 'x3', grey value: 0.5977013008400084, ranking: 3\nPattern key: 'x5', grey value: 0.19277457599259723, ranking: 4\n\"\"\"\n\ngm1n.print_influence_degrees()\n\"\"\"\nThe keys of parameters their influence degrees (ordering): 'x2 > x4 > x3 > x5'\n\"\"\"\n```\n\n#### GM11\n``` python\ngm11 = grey.gm11\n\ngm11.add_pattern(223.3, \"a1\")\ngm11.add_pattern(227.3, \"a2\")\ngm11.add_pattern(230.5, \"a3\")\ngm11.add_pattern(238.1, \"a4\")\ngm11.add_pattern(242.9, \"a5\")\ngm11.add_pattern(251.1, \"a6\")\n\ngm11.forecast(2) # Default is 1, the parameter means how many next moments need to forcast continually.\n\n# Looks GM11 the results for example as below:\ngm11.print_forecasted_results()\n\"\"\"\nK = 1\nFrom original value 227.3 to forecasted value is 226.08736263692822\nThe error rate is 0.005334964201811667\nK = 2\nFrom original value 230.5 to forecasted value is 231.87637984134398\nThe error rate is 0.005971279138151739\nK = 3\nFrom original value 238.1 to forecasted value is 237.81362611881437\nThe error rate is 0.0012027462460547044\nK = 4\nFrom original value 242.9 to forecasted value is 243.9028969077225\nThe error rate is 0.00412884688234865\nK = 5\nFrom original value 251.1 to forecasted value is 250.14808482949547\nThe error rate is 0.003790980368397134\nK = 6\nForcated next moment value is 256.55318217699795\nK = 7\nForcated next moment value is 263.1222834666411\nForcated next moment value is 283.85614494317775\nThe average error rate 0.0040857633673527785\n\"\"\"\n```\n\n#### GM11 Convolutional Forecasting\n``` python\n# Convolutional forecasting of GM11, forecast_convolution(stride, length)\ngm11.forecast_convolution(1, 4) \n\n# To record last forecasted result.\nlast_forecasted_results = gm11.forecasted_outputs\n\n# To clean all forecasted results. \ngm11.clean_forecasted()\n\n# In next iteration of forecasting, we wanna continue use last forecasted results to do next forecasting, \n# but if we removed gm11.forecasted_outputs list before,  \n# we can use continue_forecasting() to extend / recall the last forecasted result come back to be convolutional features. \ngm11.continue_forecasting(last_forecasted_results)\n```\n\n#### Alpha for Z\n``` python\n# For example, if you wanna customize alpha value to reduce error-rate of prediction before calculate AGO, \n# Directly try to setup the alpha value before start .analyze() and .forecast().\ngm11.alpha = 0.8\ngm11.add_pattern() \ngm11.forecast()\n```\n\n#### Multi-Processing\n1. Put objects of gm0n, gm1n or gm11 into their own arrays. <br />\n2. Run specific functions are: grey.run.gm0n(array), grey.run.gm1n(array) or grey.run.gm11(array). <br />\n3. Enumerate the arrays, or enumerate .run.gm0n(), .run.gm1n() and .run.gm11() they returned arrays.\n``` python\n# multiprocessing examples:\n# for GM0N, GM1N\nqueue = []\nqueue.append(gm0n.deepcopy())\nqueue.append(gm0n.deepcopy())\nqueue.append(gm0n.deepcopy())\nqueue.append(gm0n.deepcopy())\nqueue.append(gm0n.deepcopy())\nqueue.append(gm0n.deepcopy())\nqueue.append(gm0n.deepcopy())\n\ngrey.run.gm0n(queue)\n\nfor gm in queue:\n    gm.print_influence_degrees()\n```\n\n``` python\n# for GM11\ngm11_queue = []\ngm11_queue.append(gm11.deepcopy())\ngm11_queue.append(gm11.deepcopy())\ngm11_queue.append(gm11.deepcopy())\ngm11_queue.append(gm11.deepcopy())\ngm11_queue.append(gm11.deepcopy())\ngm11_queue.append(gm11.deepcopy())\ngm11_queue.append(gm11.deepcopy())\n\ngrey.run.gm11(gm11_queue)\n\nfor gm in gm11_queue:\n    gm.print_forecasted_results()\n```\n\n## Version\n\nV1.3\n\n## LICENSE\n\nMIT.\n\n## Note\n\n\u5377\u7a4d\u7684\u90e8\u4efd\uff0c\u662f\u8dd1 2 \u5c64\u7684 GM11: <br />\n<ol>1 -> 2 -> 3, \u9810\u6e2c 4 </ol>\n<ol>2 -> 3 -> 4, \u9810\u6e2c 5 </ol>\n<ol>3 -> 4 -> 5, \u9810\u6e2c 6 </ol>\n<ol>... \u5176\u9918\u985e\u63a8 </ol>\n<br />\n\u4e4b\u5f8c\u6703\u628a\u9810\u6e2c 4\uff0c5\uff0c6 \u518d\u4e1f\u9032\u53bb GM11 \u8dd1\u6700\u7d42\u7d50\u679c\u3002\u7b49\u65bc\u662f\u5148\u505a\u4e00\u6b21\u7279\u5fb5\u63d0\u53d6\uff0c\u7b2c 1 \u5c64\u63d0\u53d6\u6bcf\u4e00\u500b\u5340\u9593\u7684\u9810\u6e2c\u8f38\u51fa\uff0c\u518d\u5c0d\u9019\u9810\u6e2c\u8f38\u51fa\u505a\u5e73\u5747\u8aa4\u5dee\u7684\u4fee\u6b63\uff0c\u800c\u5f8c\u518d\u4e1f\u5165\u7b2c 2 \u5c64\u7684 GM11 \u53bb\u505a\u7e3d\u8f38\u51fa\u3002\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kalvar/python-GreyTheory.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "greytheory",
            "package_url": "https://pypi.org/project/greytheory/",
            "platform": "",
            "project_url": "https://pypi.org/project/greytheory/",
            "project_urls": {
                "Homepage": "https://github.com/Kalvar/python-GreyTheory.git"
            },
            "release_url": "https://pypi.org/project/greytheory/0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Grey theory, implemented by python.",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 5916805,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "11d2cd5cb6790d5a57a3fb2eb586bb3e",
                    "sha256": "541d25876deea62ff8b6f3f647110d5107258d85e2d1d614cbefa7d0c18d59d4"
                },
                "downloads": -1,
                "filename": "greytheory-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "11d2cd5cb6790d5a57a3fb2eb586bb3e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 13114,
                "upload_time": "2019-10-02T08:38:34",
                "upload_time_iso_8601": "2019-10-02T08:38:34.547550Z",
                "url": "https://files.pythonhosted.org/packages/ad/9e/7f3dbf8f7c0eca936e4b2a9bec14733d7ec1eb6393eb4169df45f654db67/greytheory-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f7f12c62ac8a6f043e61a02b832d78a4",
                    "sha256": "c958749e6bf91f791ad3d1c615ce232193fe7b06896bf668b8c531623b4e8732"
                },
                "downloads": -1,
                "filename": "greytheory-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "f7f12c62ac8a6f043e61a02b832d78a4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8778,
                "upload_time": "2019-10-02T08:38:37",
                "upload_time_iso_8601": "2019-10-02T08:38:37.879360Z",
                "url": "https://files.pythonhosted.org/packages/6e/8c/e6d961f4c63687c447ba921a97d9beefcc08cc43eceb50a96725b3bf4c77/greytheory-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}