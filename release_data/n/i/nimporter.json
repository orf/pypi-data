{
    "0.1.1": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/nimporter/0.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6a84d256f95e056557d5b66d6f73b91e",
                    "sha256": "99ab173f709d22c092bd6d7868f3d4eddfd6d7b389acfabb5ce26bfe35442d36"
                },
                "downloads": -1,
                "filename": "nimporter-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "6a84d256f95e056557d5b66d6f73b91e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4699,
                "upload_time": "2019-12-13T19:19:08",
                "upload_time_iso_8601": "2019-12-13T19:19:08.284158Z",
                "url": "https://files.pythonhosted.org/packages/4a/10/bb406e3b5ee46ccfb4c19b0f911f3e57fc5ff73e3632d3c237b0bfce203f/nimporter-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/0.1.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9ff5618d8bddb29cf85946aeff680ae7",
                    "sha256": "74b31b1145049a7cf4ac4bec57d1870b24442d5b92110c821a0249a2bd62f487"
                },
                "downloads": -1,
                "filename": "nimporter-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "9ff5618d8bddb29cf85946aeff680ae7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4948,
                "upload_time": "2019-12-13T19:35:53",
                "upload_time_iso_8601": "2019-12-13T19:35:53.726439Z",
                "url": "https://files.pythonhosted.org/packages/5a/2e/183cdc808fc270f3810b48c0514025253ab66abb78acc8c2266d1b8fefb5/nimporter-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/0.1.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "29a2260e99bf20b0cd77a55e0dfbf708",
                    "sha256": "b4c6a3f6194198db7f236034d7a4c3c2397760ed00a8db3907dfdc3e0226ea10"
                },
                "downloads": -1,
                "filename": "nimporter-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "29a2260e99bf20b0cd77a55e0dfbf708",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5318,
                "upload_time": "2019-12-18T02:44:15",
                "upload_time_iso_8601": "2019-12-18T02:44:15.343380Z",
                "url": "https://files.pythonhosted.org/packages/59/13/ccdd423254da10e88e883e92101e59b18dfc3bf6df8ad3540882ec5f2ab6/nimporter-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/0.1.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "23a40e55e2147759c57ef546079a75bb",
                    "sha256": "b46d42976f02b5c248cdf8edca37990d442af5ec86f3fa14961596285fc55f0a"
                },
                "downloads": -1,
                "filename": "nimporter-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "23a40e55e2147759c57ef546079a75bb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5417,
                "upload_time": "2019-12-21T00:17:22",
                "upload_time_iso_8601": "2019-12-21T00:17:22.950363Z",
                "url": "https://files.pythonhosted.org/packages/bb/e4/7e8144757d4c88d2a2106b15fb1f8d063949b7348b49f2f335a220454bd1/nimporter-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.5": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/0.1.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "0.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "00749808c1c57ac3ecee902fd43518f8",
                    "sha256": "f0fa687d4ba1f54df538389a143b545bc8ce3e5c0a9ef7e92ebc27266b56c6e4"
                },
                "downloads": -1,
                "filename": "nimporter-0.1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "00749808c1c57ac3ecee902fd43518f8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5558,
                "upload_time": "2019-12-26T15:21:22",
                "upload_time_iso_8601": "2019-12-26T15:21:22.989020Z",
                "url": "https://files.pythonhosted.org/packages/12/c0/c25a2d28dd717e7482f001ec7cf8d74d2d65a87509d83faf6be1185e281c/nimporter-0.1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "63d63b07d3e43c9b864c43cfa4dd1343",
                    "sha256": "cf7dd5d00b6dd6275657df26a398b6d436e385ee1539c558c0bf80ced64636a7"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "63d63b07d3e43c9b864c43cfa4dd1343",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 19720,
                "upload_time": "2020-04-11T15:43:34",
                "upload_time_iso_8601": "2020-04-11T15:43:34.404996Z",
                "url": "https://files.pythonhosted.org/packages/21/99/8d27e6d7b8a872aeef4b806f0a888116f985e40e0edc18b142e2c93b4926/nimporter-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "289f0584c18e83ce9ec9ec4ed265614b",
                    "sha256": "b51d534fcf369009f96441837469dcdc512f06838082ce150a1cccd62427244c"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.post1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "289f0584c18e83ce9ec9ec4ed265614b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18922,
                "upload_time": "2020-04-11T15:42:32",
                "upload_time_iso_8601": "2020-04-11T15:42:32.788067Z",
                "url": "https://files.pythonhosted.org/packages/c6/b8/f1d46925e1bbfb3a3e260059a34ba38d9d1f2559f892eeb88ae525096aa0/nimporter-1.0.post1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/1.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f93cd1591ab3b39bbbdee2cdd870bc53",
                    "sha256": "de02f2f26dcd02c0f25e1d61ca95fb1be0a35c3c13344ad59b6bf0520fbe7483"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.1.post1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f93cd1591ab3b39bbbdee2cdd870bc53",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21494,
                "upload_time": "2020-05-27T16:28:46",
                "upload_time_iso_8601": "2020-05-27T16:28:46.003493Z",
                "url": "https://files.pythonhosted.org/packages/5d/85/e6f9c815dc7f6e5dbdb6832715262b425c5630a5df878e824ad4b54a9fcf/nimporter-1.0.1.post1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e76e394f8995b25946eb53858ef265d",
                    "sha256": "997bdacb498722fc64bdd990d67e2d096426a5901a875bec185d7bc2e37091a9"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.1.post1.tar.gz",
                "has_sig": false,
                "md5_digest": "4e76e394f8995b25946eb53858ef265d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 22784,
                "upload_time": "2020-05-27T16:27:48",
                "upload_time_iso_8601": "2020-05-27T16:27:48.254481Z",
                "url": "https://files.pythonhosted.org/packages/18/d3/1b6b5bf95acedcf9f29161cc47f4491e9fc6d6525e2eff1b1eb8878a6fe4/nimporter-1.0.1.post1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2a21baa3375dba941460253257f831cd",
                    "sha256": "ad7b58ec02e691855669c79e069552ad1f860523a6986c997d2b39a925a91fd7"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2a21baa3375dba941460253257f831cd",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 20834,
                "upload_time": "2020-04-19T18:22:47",
                "upload_time_iso_8601": "2020-04-19T18:22:47.474904Z",
                "url": "https://files.pythonhosted.org/packages/d2/81/25fae83fe6c28d9b2e0830cdbdb957cce69096ce35bc05db0b0906152e0c/nimporter-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/1.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "1.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a098b26c3ab4a3c91a7eff2f423ffc09",
                    "sha256": "21430c71a06d683cbfb1831c9957528dd47eab91416d368eb37362103b89869e"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a098b26c3ab4a3c91a7eff2f423ffc09",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 22493,
                "upload_time": "2020-07-23T15:39:44",
                "upload_time_iso_8601": "2020-07-23T15:39:44.427409Z",
                "url": "https://files.pythonhosted.org/packages/ba/5a/ad684d7428eec23523901e1d5e487b88685ab86c2376ed9be1ce2e700fe6/nimporter-1.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c434f5529fbe470129cf51db9bd38d75",
                    "sha256": "5beb534ce4563b61a2fe9278575a99c85480439828206dbbbbe242982dfb9db8"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "c434f5529fbe470129cf51db9bd38d75",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 23883,
                "upload_time": "2020-07-23T15:39:45",
                "upload_time_iso_8601": "2020-07-23T15:39:45.731728Z",
                "url": "https://files.pythonhosted.org/packages/5b/e8/14745aec3399c882e025042e2a7255b27eaae25b35432bd8c55514c4731d/nimporter-1.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.3": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/1.0.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "1.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "61bec39be2a13da8282f92080154c725",
                    "sha256": "d24731b844b0d5ea88e4c126d8772f897fa4de3c7cbb3a8b93fa79c1194c83a6"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "61bec39be2a13da8282f92080154c725",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24088,
                "upload_time": "2021-02-14T18:16:24",
                "upload_time_iso_8601": "2021-02-14T18:16:24.716393Z",
                "url": "https://files.pythonhosted.org/packages/cd/66/bc0aab99b5ee916b928da7addc29b98823dbe62891e2632ef513a34e4658/nimporter-1.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.4": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/1.0.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3feaab930319f669137241eeedbb3da3",
                    "sha256": "6e75261df9f352f4e71f498cd49be49674516ecafee393972235e2014521a168"
                },
                "downloads": -1,
                "filename": "nimporter-1.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "3feaab930319f669137241eeedbb3da3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24287,
                "upload_time": "2021-02-14T20:48:01",
                "upload_time_iso_8601": "2021-02-14T20:48:01.194770Z",
                "url": "https://files.pythonhosted.org/packages/78/3d/bfce561d21dbbd95b5e6f488dd54560da9861758a41045dc0538b3dcfa3a/nimporter-1.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.0": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": "",
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/1.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1af9496e0f3dd0a0c82c7e397663251c",
                    "sha256": "d119d6eb35eb713cd483324ec919f3bf8269eef48c770e6d6549f6e34b4689c8"
                },
                "downloads": -1,
                "filename": "nimporter-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "1af9496e0f3dd0a0c82c7e397663251c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24349,
                "upload_time": "2021-11-05T22:16:42",
                "upload_time_iso_8601": "2021-11-05T22:16:42.210450Z",
                "url": "https://files.pythonhosted.org/packages/96/3c/ded65fcf69a8a487be84f96ab3072bfd4133ec40617ab60421f87c9684f5/nimporter-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.0": {
        "info": {
            "author": "http://github.com/Pebaz",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "\n<p align=\"center\">\n    <img src=misc/nimporter-logo.svg>\n</p>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;![License](https://img.shields.io/github/license/Pebaz/nimporter?color=F6B5A4)\n![Latest Release](https://img.shields.io/github/v/release/Pebaz/nimporter?sort=semver&color=EB7590)\n![Lines of Code](https://img.shields.io/tokei/lines/github/Pebaz/Nimporter?label=lines%20of%20code&color=C8488A)\n![Downloads each Month](https://img.shields.io/pypi/dm/Nimporter?label=pypi%20downloads&color=872E93)\n![GitHub Repository Star Count](https://img.shields.io/github/stars/Pebaz/Nimporter?label=github%20stars&color=581D7F)\n![GitHub Sponsor Count](https://img.shields.io/github/sponsors/Pebaz?label=github%20sponsors&color=3A1353)\n\n# Nimporter\n\n> *Directly import [Nim](<https://nim-lang.org/>) extensions for Python and\nseamlessly package them for distribution in **1 line of code.***\n\n<p align=\"center\">\n    <img src=misc/Nimporter-Functionality.png>\n</p>\n\n<p align=\"center\">\n    <img src=misc/Nimporter-Setup.py.png>\n</p>\n\n## \ud83c\udf71 Benefits\n\n* **\ud83d\udc06 Performance**: Nim compiles to C\n\n* **\ud83d\ude9a Distribution**: Packaging Nimporter libraries is the primary use case\n\n* **\ud83d\udce6 Invisible**: End users do not need to install Nim for source or binary\n    distributions\n\n* **\u267b\ufe0f Ecosystem**: Leverage [Python](https://pypi.org/) libraries for breadth\n    and [Nim](https://nimble.directory/) libraries for performance.\n\n* **\ud83e\udde3 Seamless**: Integration with existing Nim code uses the\n    [Nimpy](https://github.com/yglukhov/nimpy) library.\n\n* **\ud83e\udea8 Simple**: Nimporter barely has a user interface at all\n\n## \ud83d\udc23 Installation\n\n```bash\n# \ud83d\udc0d From Pypi:\n$ pip install nimporter\n\n# \u2699\ufe0f From GitHub:\n$ pip install git+https://github.com/Pebaz/Nimporter\n```\n\n**Library Author Dependencies:**\n\n 1. [Nim Compiler](<https://nim-lang.org/install.html>) (for compiling Nim\n    source files)\n 2. [Nimpy library](https://github.com/yglukhov/nimpy) (installed automatically\n    if `nimporter init lib` is used)\n 3. [Nimporter library](https://github.com/Pebaz/nimporter) (distributed\n    libraries will need access to Nimporter).\n\nNimporter can work seamlessly when Nim is installed via\n[Choosenim](https://nim-lang.org/install_unix.html#installation-using-choosenim)\nor manually. No additional configuration is necessary once installed since\nNimporter can find the Nim standard library and install\n[Nimpy library](https://github.com/yglukhov/nimpy) if Nimble is on your path.\n\n**End User Dependencies:**\n\nUsers of Nimporter libraries only need Nimporter! \ud83c\udf89\n\n## \ud83d\udcda Documentation\n\nTo get started, first look at the [Nimpy](https://github.com/yglukhov/nimpy)\nproject as that is how Nim libraries are created that can be imported into\nPython. During development, Python can directly import the Nim file and build\nthe public user-facing Python API in tandem with the Nim library extension. For\nassistance with the Nim language, look at\n[Nim For Python Programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers#table-of-contents)\nas it is a great resource for getting up to speed quickly with Nim. Finally,\nNimporter's unit tests all make use of a\n[reference project](https://github.com/Pebaz/nimporter/tree/master/tests/data)\nthat was designed to use each of Nimporter's features.\n\n* \ud83e\udd94 [Nim For Python Programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers#table-of-contents)\n* \ud83e\udd8a [Nimpy](https://github.com/yglukhov/nimpy)\n* \ud83d\udd05 [Reference Project](https://github.com/Pebaz/nimporter/tree/master/tests/data)\n\nAdditionally, the\n[Nimpy tests folder](https://github.com/yglukhov/nimpy/tree/master/tests)\ncontains code examples on these topics:\n\n* Passing/Returning None, booleans, integers, floats, strings, lists, tuples, dictionaries, JSON, and objects.\n* Defining/Raising Python exceptions from Nim.\n* Yielding values back to Python using iterators in Nim.\n* Exposing Nim functions with custom names.\n* Exposing Nim extension modules with customized names and docstrings.\n* Using Python builtin functions in Nim.\n* Using passed Python objects and accessing methods and fields.\n* Passing keyword arguments to a Python function.\n\n## \ud83d\udccb Features\n\n* Directly import Nim Extension Modules & Extension Libraries using Nimpy\n* Cache build artifacts for quicker subsequent runs\n* Invalidate cache using hash files\n* Stores artifacts and hash files in `__pycache__` to not clutter project\n* Build Source & Binary Distributions using Nimporer with 1 line of code\n* Command Line Interface for introspecting, initializing, and compiling\n    projects\n* Nimporter does not require that library end-users install a Nim compiler\n\n## \ud83d\udee0\ufe0f Usage\n\nNimporter is a library that allows the seamless import & packaging of Nim\nextensions for Python built with [Nimpy](https://github.com/yglukhov/nimpy).\nNimpy is a library that is used on the Nim side for iteroperability with\nPython. All Nimporter libraries rely on Nimpy in order to expose Nim functions\nto Python. Nimporter's role in this is to formalize a method of distributing\nNimpy libraries to ease the burden on library maintainers and end users so that\nthey do not have to even have knowledge of Nim in order to use the library.\n\nNimpy is a complete library by itself. For information on how to integrate Nim\nand Python, look at the\n[Nimpy documentation](https://github.com/yglukhov/nimpy) as it will be the Nim\nday-to-day development experience. Nimporter's role comes into play when a\nlibrary is ready to be distributed. **Nimporter handles the entire packaging\nfor source and binary distributions in 1 line of code.**\n\n**Important Considerations**\n\nNimporter was designed to help bridge the ecosystem gap between Python and Nim\nwhile utilizing Nimpy so that library authors could seamlessly develop and\ndistribute their libraries. Due to this fact, there are important limitations\nto consider when using Nimporter. They are described below:\n\n1. Importing: Nimporter uses the C compiler that was used to build Python when\n    importing a Nim module/library. This can be overridden in a\n    `<lib name>.nim.cfg` but doing so means that the library will most likely\n    not work on other platforms.\n\n2. Distributing Sources: Nimporter sets the C compiler automatically by\n    iterating through MSVC and GCC for each platform and architecture combo.\n    This means that there will likely be several copies of the generated C\n    source code for each supported platform (given in `get_nim_extensions()`).\n\n3. Distributing Binaries: Nimporter uses the same process described for direct\n    import of Nim code and will use the same C compiler that was used to build\n    Python itself.\n\n### \ud83c\udfbb Instrumentation\n\nTo enable Nimporter debug traces, define `NIMPORTER_INSTRUMENT` in the\nenvironment and Nimporter will use\n[IceCream](https://github.com/gruns/icecream) to show output from Nim and other\ninteresting bits necessary for debugging any issues that could arise.\n\n### \ud83e\udd93 Extension Modules & Extension Libraries\n\nExtension Modules are distinct from Extension Libraries. Nimporter (not Nimpy)\nmakes a distinction here. However, it is of special note that distribution of\neither extension type is the same (`nimporter.get_nim_extensions()`).\n\n**\ud83e\udd84 Extension Libraries**\n\nExtension Libraries are entire Nim projects exposed as a single module from the\nperspective of Python. They are comprised of a single folder containing all\ncode and configuration for the extension. *It is important to note that they\nare a concept formalized by the Nimporter project and must accept some\nlimitations.*\n\nThese limitations (and capabilities) are listed below:\n\n* \u2714\ufe0f Can have external Nim dependencies: inside the Extension Library folder,\n    use a `<library name>.nimble` in order to depend upon other Nim libraries.\n\n* \u2714\ufe0f Can be split up into any number of Nim modules: the Extension Library\n    folder can contain any desired inner folder structure.\n\n* \u2714\ufe0f CLI switches used by Nim & the C compiler can be customized: this can be\n    useful but be cognizant about cross-platform compatibility. Remember, if\n    the C compiler used by Python is different than the one used by Nim, there\n    *will definitely without a doubt* be strange issues arising from this. Note\n    that choosing a different C compiler may result in the `setup.py` not being\n    able to compile the extension. Use a `<library name>.nim.cfg` for this use\n    case.\n\n* \u274c Must use folder structure known to Nimporter: the below folder structure\n    is generated when `nimporter init lib` is used:\n\n    ```\n    the_library_name/\n        the_library_name.nim  # Must be present\n        the_library_name.nim.cfg  # Must be present even if empty\n        the_library_name.nimble  # Must contain `requires \"nimpy\"`\n    ```\n**\ud83d\udc34 Extension Modules**\n\nExtension Modules are the simplest form of using Nimpy libraries with existing\nPython code. Once Nimporter is imported, Nimpy libraries can be directly\nimported like normal Python modules. However, there are a few restrictions on\nwhat is supported when importing a Nim module in this way. It is important to\nremember that Nim compiles to C and therefore could theoretically integrate\nwith a build system that is extremely brittle. To completely solve this,\nNimporter disallows certain use cases that are technically possible but would\notherwise prevent widespread use of the resulting technology.\n\nBelow are the restrictions present when importing a Nim Extension Module:\n\n* \u274c Cannot have any dependencies other than `Nimpy`: this is due to the fact\n    that Nimporter disallows multiple `*.nimble` files strewn about in a Python\n    project. Use an Extension Library for this use case.\n\n* \u274c Cannot import other Nim modules in same directory: this is because there\n    is no way to tell which files pertain to each extension and knowing this is\n    a prerequisite to packaging the extension up for distribution.\n    Additionally, Nimporter moves extensions to temporary directories during\n    compilation in order to control where the Nim compiler places the resultant\n    C sources.\n\n* \u274c Cannot customize Nim or C compiler switches: proliferating a Python\n    package with these extra files would be unsightly and it is possible to\n    have two different Nim modules with custom configurations collide in\n    awkward ways. If CLI configuration is required, use an Extension Library.\n\n* \u274c Cannot override the C compiler used to build the extension: Although this\n    practice is certainly and technically possible, it is unequivocally a bad\n    decision when integrating software originating from a different compilers.\n    If an expert user is in need of this capability, use an Extension Library.\n\nAlthough these restrictions limit the number of possible use cases for the\nintegration of Nim & Python, portability, compatibility, and stability were\nchosen as the guiding principles for Nimporter.\n\n## \ud83d\udce6 Distribution\n\nThere are a few ways to use Nimporter to integrate Nim & Python code:\n\n1. \ud83e\udd47 Library uses Nim code internally but exposes a Python API: this is the\n    reason why Nimporter was built. It was built to allow Python library\n    authors to use Nim to speed up their library.\n\n2. \ud83e\udd48 Application uses Nim code: this is very possible but it is recommended to\n    pull out the Nim code into a Python library that imports that Nim code in\n    order to take advantage of the amazing distribution features of Nimporter.\n    Having a separately-updatable library that the application imports greatly\n    streamlines development and reduces packaging difficulty (the Python\n    library dependency that imports Nim code behaves exactly like a pure-Python\n    dependency).\n\n3. \ud83e\udd49 Docker: this is a possible application of Nimporter, but it requires the\n    use of `nimporter compile` in order to let the Docker container not have to\n    contain a Nim & C compiler and to ensure that the builds are cached.\n\nAmazingly, Nimporter allows the end user installing a library built with\nNimporter to not have to install Nim! \ud83e\udd73 This is incredible and is accomplished\nby recompiling the same Nim extension to every desired platform, architecture,\nand C compiler that the library is supported on. Specifically, Nimporter tells\nthe Nim compiler to compile the extension to C once for Windows, MacOS, and\nLinux and and then bundles all of the resulting C source files into the source\ndistribution. At the time of the installation on the end user's machine, the\nappropriate set of C source files is selected that matches the user's\nenvironment! \ud83d\ude42\n\nFor binary distributions, this process just skips to the one set of C source\nfiles that matches the host's environment. One binary distribution per\nsupported platform must then be built.\n\nThis might sound complicated but Nimporter accomplishes this by requesting that\nthe `setup.py` contain 1 line of code to find, compile, and bundle all of the C\nfiles necessary to be portable across platform, architecture, and C compilers.\n\n### \ud83d\udce7 Source Distributions\n\nTo create a source distribution, it is assumed that the `setup.py` contains a\ndependency on Nimporter as well as a call to `get_nim_extensions()`.\n\n```python\n# Example setup.py\n\nimport setuptools\nfrom nimporter import get_nim_extensions, WINDOWS, MACOS, LINUX\n\nsetuptools.setup(\n    name='calculatorlib',\n    install_requires=['nimporter']\n    py_modules=['calculatorlib.py'],\n    ext_modules=get_nim_extensions(platforms=[WINDOWS, LINUX, MACOS])\n)\n```\n\nThe below command will create a source distribution in the `dist/` directory\nand can be easily uploaded to PyPI.\n\n```bash\n$ python setup.py sdist  # Contains entire matrix of supported platforms, etc.\n```\n\n> Note: when an end-user tries to install a Nimporter library from GitHub\n    directly, it is required that the Nim compiler and a compatible C compiler\n    is installed because `setup.py install` is invoked which is equivalent to a\n    binary distribution but does require the Nim & C compilers to be installed.\n\n### \ud83d\udcbf Binary Distributions\n\nBinary distributions use the same `setup.py` structure mentioned above.\n\nThe below command will create a Python Wheel in the `dist/` directory that can\nbe easily uploaded to PyPI.\n\n```bash\n$ python setup.py bdist_wheel  # Contains a single supported platform, etc.\n```\n\n> Note: A Nim compiler and C compiler is required when creating a binary\n    distribution.\n\n> Special note for Linux users: Unfortunately, PyPi will not allow you to\n    upload just any Linux wheel. There is a special compilation process that\n    can be explained [here](https://github.com/pypa/manylinux). Interestingly\n    enough, I got around this by simply renaming the resulting Linux build\n    according to the **manylinux1** naming convention. You can see my solution\n    in the `examples/github_actions_template.yml` file for the `build-linux`\n    job. I expect that there could be many downsides of using this hack but it\n    worked for me on 2 different Linux platforms.\n\n### \u2b55 Publish Build Artifacts to PyPi Automatically\n\nFor a dead-simple way to publish Windows, MacOS, and Linux packages to PyPi\nautomatically, use the `github_actions_template.yml` template found in the\n`examples/` directory. This template integrates with your repository's GitHub\nActions runner to build, package, and deploy your library on Windows, MacOS,\nand Linux automatically when you create a new \"Release\" is created.\n\n## \ud83d\udcbd Computer Hardware Actually Exists\n\nDynamic, safe programming languages are great, but naturally, when integrating\nwith native code, there are limitations to what is possible to accomplish in\ncertain situations. On Windows, a DLL that has been loaded into a process\ncannot be deleted while it is in use. Additionally, Windows has a path length\nlimit of 260 characters by default (and therefore relying on the user having\ndisabled this limit in the system registry is not possible). This severely\nlimits how deep a Nim extension can be placed into a Python package hierarchy.\nFurthermore, generously-named Nim extensions may fail to compile with a message\nthat resembles:\n\n```\nfailed to open compiler generated file: ''\n```\n\n> If this message occurs, it is due to the path length limit of 260 characters.\n    Shorten the name of the Nim extension and make the package hierarchy\n    shallower. More information about the 260 character path limit can be found\n    [here](https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd).\n\nNimporter comes with a defense against this behavior by automatically renaming\nthe generated C sources to not contain the `@m` and `@s` symbols that\nproliferate the filename and soak up most of the 260 character budget. For\ninstance, the filename:\n\n```\n@m..@s..@s..@s..@s..@s..@sUsers@s<USERNAME>@s.nimble@spkgs@snimpy-0.2.0@snimpy@spy_utils.nim.c\n```\n\nGets turned into:\n\n```\nNIMPORTER@nimpy-0.2.0@nimpy@py_utils.nim.c\n```\n\nMuch shorter! \ud83d\ude80\n\n## \ud83e\uddd1\u200d\ud83d\udcbb Nimporter Command Line Interface\n\nNimporter provides a CLI that you can use to easily clean all cached build and\nhash files from your project recursively. This can be very useful for debugging\nsituations arising from stale builds.\n\nUsage example:\n\n```bash\n# Removes all __pycache__ directories with .hash, .pyd/.so, and .pyc files\n$ nimporter clean\n```\n\nThe Nimporter CLI can also precompile all extensions within a project without\nneeding to run the project. This is useful in situations where you do not want\nto package your application using a `setup.py` (such as a zip file) or for use\nwithin Docker containers.\n\n```bash\n# Recursively compile all Nim extension modules and libraries:\n$ nimporter compile\n```\n\nFinally, the CLI has provisions for listing out the extensions that it can\nauto-detect. This is useful to identify if an extension folder structure is\nproperly setup.\n\n```bash\n# List all extensions that Nimporter will find when handling imports\n$ nimporter list\n```\n\n## \u2693 Usage with Docker\n\nNimporter can easily be used within a Docker container. To prevent the need for\na Nim compiler toolchain to be installed into the container to run Nim code,\nthe extensions can be precompiled and copied into the container. This process\nis roughly as follows:\n\n1. Create a project that uses Python and Nim\n2. Run `nimporter compile` to recursively-compile all extensions in the project\n3. Ensure that in your Dockerfile that the `__pycache__` directories are\n   included as they will contain the Nim shared objects as well as the\n   Nimporter hash files to prevent a recompilation (which would fail without a\n   Nim & C compiler installed in the container).\n\n## \ud83e\uddea Running The Tests\n\nTo run Nimporter's test suite on your local machine, you will need to install a\nNim compiler. This example will assume you are cloning the GitHub repository.\n\n```bash\n$ git clone https://github.com/Pebaz/Nimporter\n$ cd Nimporter\n$ pip install -r requirements_dev.txt\n$ pip install .  # Nimporter is needed for the integration tests\n$ pytest --cov=. --cov-report=html tests\n```\n\n## \u2753 How Does Nimporter Work?\n\nNimporter provides essentially two capabilities:\n\n* The ability to directly import Nim code\n* The ability to bundle Python-compatible extensions for any supported platform\n\nThe way it accomplishes the ability to import Nim code is by adding two custom\nimporters to the Python import machinery. This is why it is required to import\nNimporter before importing any Nim code because the Python import machinery\nmust be amended with the custom importers.\n\nThe first one is for the ability to search and import Nim modules. When a Nim\nmodule is found, Nimporter first looks in the `__pycache__` directory to see if\nthere is already a built version of the module. If there is not, it builds a\nnew one and stores it in the `__pycache__` directory.\n\nIf one is found, it could be stale, meaning the Nim file could have been\nmodified since it was built. To keep track of this, a hash of the source file\nis also kept in the `__pycache__` directory and is consulted whenever there is\na possibility that a stale build could be imported.\n\nWhen a Nim module and a Python module have the same name and reside in the same\nfolder, the Python module is given precedence. *Please don't do this.*\n\nThe second custom importer has the exact same purpose of the first one except\nit is used to import Nim extension libraries. A library is any folder within a\nPython project that contains a `<lib name>.nim`, a `<lib name>.nimble`, and a\n`<lib name>.nim.cfg`.\n\nThese files mark that the folder should be treated as one unit. It also makes\nit so that Nimble dependencies can be installed.\n\nAs for the second capability, Nimporter helps you bundle and distribute Nim\ncode as part of a source or binary distribution extremely easily.\n\nThe way it works is by iterating through your entire project and identifying\nany Nim module and Nim library that it finds and compiling them to C using a\nfeature of Nim that specifically supports this.\n\nWhy compile to C? Because Python already has extensive infrastructure to\nsupport the compilation and distribution of C extensions.\n\nOnce each Nim module and library is compiled to C, Python deals with them the\nexact same way as a typical C extension. These extensions are then bundled into\nthe resulting binary distribution and can be uploaded to PyPi or similar.\n\nFor source distributions, Nimporter instructs the Nim compiler to output a copy\nof the generated C code for each platform, architecture, and C compiler that is\nsupported by the library author (some libraries only make sense to work on\nWindows for example like DirectX). It then bundles all of these as individual C\nextensions into the source distribution. At installation time, Nimporter then\nselects the C extension that matches the end-user's host machine target triple.\n\n## \ud83d\udc77 Contributing\n\n[Pull requests](https://github.com/Pebaz/nimporter/pulls) are welcome,\nespecially for fixing bugs! \ud83d\ude01\n\nFeel free to [open an issue](https://github.com/Pebaz/nimporter/issues) if\nsomething seems to be broken but please look through the README first if time\nallows.\n\n## \ud83d\udc4f Special Thanks\n\nNimporter would not be possible without\n[Nimpy](https://github.com/yglukhov/nimpy). Thank you\n[Yuriy Glukhov](https://github.com/yglukhov) for making this project possible!\n\n## \ud83c\udf20 Stargazers Over Time\n\n[![Stargazers Over Time](https://starchart.cc/Pebaz/nimporter.svg)](https://starchart.cc/Pebaz/nimporter)\n\n> Made using <https://starchart.cc/>\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/Pebaz/Nimporter",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nimporter",
            "package_url": "https://pypi.org/project/nimporter/",
            "platform": null,
            "project_url": "https://pypi.org/project/nimporter/",
            "project_urls": {
                "Homepage": "http://github.com/Pebaz/Nimporter"
            },
            "release_url": "https://pypi.org/project/nimporter/2.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compile Nim extensions for Python when imported!",
            "version": "2.0.0",
            "yanked": true,
            "yanked_reason": "This is a Release Candidate, not the final release. It got accidentally uploaded."
        },
        "last_serial": 13822655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8a092b601e9b3714fe08319253d96821",
                    "sha256": "dbb992cf4b6d4c5b423402c969e53657d936e1452eefb16da255f78e2a1a9f8f"
                },
                "downloads": -1,
                "filename": "nimporter-2.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8a092b601e9b3714fe08319253d96821",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 29349,
                "upload_time": "2022-03-26T08:37:25",
                "upload_time_iso_8601": "2022-03-26T08:37:25.708674Z",
                "url": "https://files.pythonhosted.org/packages/83/5d/661007945051dcb6d1b5005d02b847f246ef0cd1eb78c433fba85c95ce47/nimporter-2.0.0.tar.gz",
                "yanked": true,
                "yanked_reason": "This is a Release Candidate, not the final release. It got accidentally uploaded."
            }
        ],
        "vulnerabilities": []
    }
}