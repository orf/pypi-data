{
    "0.1.0": {
        "info": {
            "author": "Minuy",
            "author_email": "y17mmz@live.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitee.com/minuy/Flask-APIAuth",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Flask-APIAuth",
            "package_url": "https://pypi.org/project/Flask-APIAuth/",
            "platform": "",
            "project_url": "https://pypi.org/project/Flask-APIAuth/",
            "project_urls": {
                "Homepage": "https://gitee.com/minuy/Flask-APIAuth"
            },
            "release_url": "https://pypi.org/project/Flask-APIAuth/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.8.1",
            "summary": "flask api auth modules.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10304771,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7e3295629a63acf3d0862d9127912d9b",
                    "sha256": "f6be505e4fc0deeca5edb0f5b129b2a7f96768b9e75bce4f0db0b1265a9b3d33"
                },
                "downloads": -1,
                "filename": "Flask_APIAuth-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7e3295629a63acf3d0862d9127912d9b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8.1",
                "size": 5731,
                "upload_time": "2021-05-10T04:57:51",
                "upload_time_iso_8601": "2021-05-10T04:57:51.714848Z",
                "url": "https://files.pythonhosted.org/packages/52/9d/268cc6b17a524c4fe0c128c8a46582b6bf0677b88d2390b8c51790aeb359/Flask_APIAuth-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "555a0fe3120619d8201d7645708af78b",
                    "sha256": "e8ead4d071db029d467041843e2e6955e0accce5af95097139de8406d133bdd8"
                },
                "downloads": -1,
                "filename": "Flask-APIAuth-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "555a0fe3120619d8201d7645708af78b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8.1",
                "size": 6480,
                "upload_time": "2021-05-10T04:57:54",
                "upload_time_iso_8601": "2021-05-10T04:57:54.014947Z",
                "url": "https://files.pythonhosted.org/packages/12/04/17d601db8d1d6194928b415396358458f6fabf4cc947faf9241fee3d53ec/Flask-APIAuth-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Minuy",
            "author_email": "y17mmz@live.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "\nFlask-APIAuth\n==============\n\n\u63d0\u4f9b\u6700\u57fa\u7840\u7684API\u767b\u5f55\u8ba4\u8bc1\u529f\u80fd\n\n\u5b89\u88c5\n------------\n\uff08\u8fd8\u4e0d\u4f1a\u4e0a\u4f20\u5230pip\uff09\u4e0b\u8f7d\u6587\u4ef6\uff0c\u590d\u5236\u5230\u7a0b\u5e8f\u76ee\u5f55\u597d\u4e86\u2026\u2026\n\n# \u57fa\u672c\u793a\u4f8b\n----------------------------\n```python\nfrom flask import Flask, request  \nfrom werkzeug.security import generate_password_hash, check_password_hash  \n\nfrom flask_apiauth import ApiAuth  \n\napp = Flask(__name__)  \nauth = ApiAuth()  \n\nusers = {  \n    \"john\": generate_password_hash(\"hello\"),  \n    \"susan\": generate_password_hash(\"bye\")  \n}  \n\n\n@app.route('/api/login', methods=['POST'])  \ndef get_auth():  \n    username = request.args.get('username')  \n    print(username)  \n    password = request.args.get('password')  \n    print(password)  \n    if username and password:  \n        if username in users and check_password_hash(users.get(username), password):  \n            token = auth.get_token(username, users.get(username))  \n            return {  \n                    'code': '200',  \n                    'data': {  \n                        'token': token  \n                    },  \n                    'message': '\u767b\u5f55\u6210\u529f'  \n  }  \n        else:  \n            return {  \n                    'code': '403',  \n                    'data': {},  \n                    'message': '\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef'  \n  }  \n    else:  \n        return {  \n                'code': '403',  \n                'data': {},  \n                'message': '\u53c2\u6570\u4e0d\u5b8c\u6574'  \n  }  \n\n\n@auth.error_content  \ndef error_content():  \n    return {  \n        'code': '403',  \n        'data': {},  \n        'message': '\u8bf7\u5148\u767b\u5f55'  \n  }  \n\n\n@auth.verify_password  \ndef verify_password(username, password):  \n    if username in users and users.get(username) == password:  \n        print('\u5bc6\u7801\u6b63\u786e')  \n        # \u8fd4\u56de\u7684\u6570\u636e\u662f\u4e0b\u9762auth.current_user\u62ff\u5230\u7684  \n  return {'username': username, 'sex': '\u7537'}  \n\n\n@app.route('/')  \n@auth.login_required  \ndef index():  \n    return {  \n        'code': '200',  \n        'data': {  \n            'name': auth.current_user.get('username'),  \n            'sex': auth.current_user.get('sex')  \n        },  \n        'message': '\u6210\u529f'  \n  }  \n\n\nif __name__ == '__main__':  \n    app.run()\n```\n\u53ef\u4ee5\u4f7f\u7528ApiPost\u6216\u8005PostMan\u6d4b\u8bd5\u63a5\u53e3\u3002\n\u9996\u5148\u8981\u767b\u5f55\uff0c\u53c2\u6570\u5199\u5728Query\u91cc\uff0c\u6709username\u548cpassword\u4e24\u4e2a\n\u3010POST\u3011http://127.0.0.1:5000/api/login?username=john&password=hello\n\u7136\u540e\u4f7f\u7528\u8fd4\u56de\u7684token\uff0c\u53c2\u6570\u5199\u5728Header\u91cc\uff0c\u540d\u79f0\u4e3atoken\uff0c\u503c\u4e3a\u4e0a\u4e00\u4e2a\u8bf7\u6c42\u8fd4\u56de\u7684\u503c\n\u3010GET\u3011http://127.0.0.1:5000\n\u6210\u529f\u5f97\u5230\u7528\u6237\u4fe1\u606f\u3002\n\u9000\u51fa\u767b\u5f55\u5373\u5ba2\u6237\u7aef\u5220\u9664token\u3002\n\n\u5176\u4ed6\n---------\n\n- [\u6e05\u98ce\u6765\u53d9 - \u535a\u5ba2\u56ed (cnblogs.com)](https://www.cnblogs.com/minuy)\n\n\n\n\n----\nFlask-APIAuth\n==============\n\nProvides the most basic API login authentication function\n\nInstall\n------------\nDownload the file and copy it to the program directory\n\n# Examples\n----------------------------\n```python\nfrom flask import Flask, request  \nfrom werkzeug.security import generate_password_hash, check_password_hash  \n\nfrom flask_apiauth import ApiAuth  \n\napp = Flask(__name__)  \nauth = ApiAuth()  \n\nusers = {  \n    \"john\": generate_password_hash(\"hello\"),  \n    \"susan\": generate_password_hash(\"bye\")  \n}  \n\n\n@app.route('/api/login', methods=['POST'])  \ndef get_auth():  \n    username = request.args.get('username')  \n    print(username)  \n    password = request.args.get('password')  \n    print(password)  \n    if username and password:  \n        if username in users and check_password_hash(users.get(username), password):  \n            token = auth.get_token(username, users.get(username))  \n            return {  \n                    'code': '200',  \n                    'data': {  \n                        'token': token  \n                    },  \n                    'message': 'login success'  \n  }  \n        else:  \n            return {  \n                    'code': '403',  \n                    'data': {},  \n                    'message': 'login error'  \n  }  \n    else:  \n        return {  \n                'code': '403',  \n                'data': {},  \n                'message': 'parameters error'  \n  }  \n\n\n@auth.error_content  \ndef error_content():  \n    return {  \n        'code': '403',  \n        'data': {},  \n        'message': 'please login'  \n  }  \n\n\n@auth.verify_password  \ndef verify_password(username, password):  \n    if username in users and users.get(username) == password:  \n        print('password ok')  \n        # \u8fd4\u56de\u7684\u6570\u636e\u662f\u4e0b\u9762auth.current_user\u62ff\u5230\u7684  \n  return {'username': username, 'sex': 'man'}  \n\n\n@app.route('/')  \n@auth.login_required  \ndef index():  \n    return {  \n        'code': '200',  \n        'data': {  \n            'name': auth.current_user.get('username'),  \n            'sex': auth.current_user.get('sex')  \n        },  \n        'message': 'success'  \n  }  \n\n\nif __name__ == '__main__':  \n    app.run()\n```\nYou can use apipost or postman to test the interface.\nFirst of all, you need to log in. The parameters are written in query. There are two parameters: username and password\n\u3010POST\u3011http://127.0.0.1:5000/api/login?username=john&password=hello\nThen the returned token is used, and the parameters are written in the header. The name is token and the value is the value returned by the previous request\n\u3010GET\u3011http://127.0.0.1:5000\nGet the user information successfully.\nLog out means that the client will delete the token.\n\nOther\n---------\n\n- [blog (cnblogs.com)](https://www.cnblogs.com/minuy)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitee.com/minuy/Flask-APIAuth",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Flask-APIAuth",
            "package_url": "https://pypi.org/project/Flask-APIAuth/",
            "platform": "",
            "project_url": "https://pypi.org/project/Flask-APIAuth/",
            "project_urls": {
                "Homepage": "https://gitee.com/minuy/Flask-APIAuth"
            },
            "release_url": "https://pypi.org/project/Flask-APIAuth/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.8.1",
            "summary": "flask api auth modules.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10304771,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0c0fa4123c36d96558b5eaa8b2e6c3a6",
                    "sha256": "8c3180ef9e104a81b0b9d6b1e47a9f0635a71cdc40ce9dcac57b5a3008a422c4"
                },
                "downloads": -1,
                "filename": "Flask_APIAuth-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0c0fa4123c36d96558b5eaa8b2e6c3a6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8.1",
                "size": 6317,
                "upload_time": "2021-05-10T05:21:57",
                "upload_time_iso_8601": "2021-05-10T05:21:57.212689Z",
                "url": "https://files.pythonhosted.org/packages/31/ab/fb24aa24b66fecabf0bd03d141aabc44c88d95f4a2473d527dfe09975163/Flask_APIAuth-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "89a2447a8e674924d8f3c1b642ca4490",
                    "sha256": "0a22731444121a4f18c421b96edb0404351f879d444a3f681ea3734efbcce711"
                },
                "downloads": -1,
                "filename": "Flask-APIAuth-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "89a2447a8e674924d8f3c1b642ca4490",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8.1",
                "size": 6804,
                "upload_time": "2021-05-10T05:21:58",
                "upload_time_iso_8601": "2021-05-10T05:21:58.807240Z",
                "url": "https://files.pythonhosted.org/packages/3f/8a/60c586c926a1fdfba3d7f3de99e073c3da4d04081a022dab8ab7828046f6/Flask-APIAuth-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}