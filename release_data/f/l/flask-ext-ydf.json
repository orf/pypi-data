{
    "1.0": {
        "info": {
            "author": "bfzs",
            "author_email": "m13148804508@163.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: Implementation",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "flask,cerberus",
            "license": "BSD License",
            "maintainer": "ydf",
            "maintainer_email": "m13148804508@163.com",
            "name": "flask-ext-ydf",
            "package_url": "https://pypi.org/project/flask-ext-ydf/",
            "platform": "all",
            "project_url": "https://pypi.org/project/flask-ext-ydf/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/flask-ext-ydf/1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "flask decorators check with cerberus,flask return result auto convet",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7222642,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3c08073aca3c90a9d5d4f97e7c82561a",
                    "sha256": "b0f284d117f5852007eb246c85ce28ef869a3ec43f455aef077e3dfb9d6ac155"
                },
                "downloads": -1,
                "filename": "flask_ext_ydf-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3c08073aca3c90a9d5d4f97e7c82561a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5932,
                "upload_time": "2020-05-12T09:55:04",
                "upload_time_iso_8601": "2020-05-12T09:55:04.450693Z",
                "url": "https://files.pythonhosted.org/packages/5c/91/327a0773975d093ddf7013b4aa2dca2be5b0991d2813d7240ce3386177fe/flask_ext_ydf-1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1": {
        "info": {
            "author": "bfzs",
            "author_email": "m13148804508@163.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: Implementation",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "flask,cerberus",
            "license": "BSD License",
            "maintainer": "ydf",
            "maintainer_email": "m13148804508@163.com",
            "name": "flask-ext-ydf",
            "package_url": "https://pypi.org/project/flask-ext-ydf/",
            "platform": "all",
            "project_url": "https://pypi.org/project/flask-ext-ydf/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/flask-ext-ydf/1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "flask decorators check with cerberus,flask return result auto convet",
            "version": "1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7222642,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "608563f497cdc4de1899cbe0594ae962",
                    "sha256": "3a4c45ef73316fbeb91a62de791ee6180b26b71fa6b13625c02f38fde9d6870b"
                },
                "downloads": -1,
                "filename": "flask_ext_ydf-1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "608563f497cdc4de1899cbe0594ae962",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 6732,
                "upload_time": "2020-05-12T09:57:34",
                "upload_time_iso_8601": "2020-05-12T09:57:34.408476Z",
                "url": "https://files.pythonhosted.org/packages/48/fa/30a74d7385317f2d612c097082d69d26c21db25e9aafc85a19c6d8dff71d/flask_ext_ydf-1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2": {
        "info": {
            "author": "bfzs",
            "author_email": "m13148804508@163.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: Implementation",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "## 1. pip install flask_ext_ydf\n\n1.\u81ea\u52a8\u4f7f\u7528redis\u7edf\u8ba1\u6bcf\u4e2aip\u548c\u6bcf\u4e2a\u63a5\u53e3\u7684\u8bbf\u95ee\u6b21\u6570\n\n2.\u81ea\u52a8\u8fd4\u56decode  data message \u4e09\u4e2a\u5b57\u6bb5\u683c\u5f0f\u7684json\u3002\n\u517c\u5bb9flask\u63a5\u53e3\u5df2\u7ecf\u8fd4\u56de\u4e86\u5b8c\u6574json\u548c\u8fd4\u56de \u5217\u8868 \u6570\u7ec4\n\n3. \u4f7f\u7528\u88c5\u9970\u5668\u505a\u53c2\u6570\u6821\u9a8c\uff0c\u6821\u9a8c\u683c\u5f0f\u4f7f\u7528cerberus\u5305\u7684\u8bed\u6cd5\u3002\n\n```python\n\"\"\"\n\u5404\u79cdflask \u6269\u5c55\n\"\"\"\nimport os\nimport traceback\nimport random\nimport base64\nimport functools\nfrom bson import json_util\nimport json\n\nimport redis\nfrom flask import current_app, request, Flask\nfrom flask.globals import _request_ctx_stack\nfrom cerberus import Validator\nfrom nb_log import LogManager, LoggerMixin\n\nflask_error_logger = LogManager('flask_error').get_logger_and_add_handlers(log_filename='flask_error.log')\nflask_record_logger = LogManager('flask_record').get_logger_and_add_handlers(log_filename='flask_record.log')\n\n\nclass FlaskIpStatistics():\n    \"\"\"\n    \u81ea\u52a8\u7edf\u8ba1\u6bcf\u4e2a\u63a5\u53e3\u7684\u8bbf\u95ee\u60c5\u51b5\n    \"\"\"\n\n    def __init__(self, app=None):\n        self.app = app\n        if app is not None:\n            self.init_app(app, )\n\n    def init_app(self, app: Flask):\n        if 'REDSI_URL' not in app.config:\n            raise LookupError('\u8bf7\u5728flask\u7684config \u914d\u7f6e\u4e2d\u6307\u660e REDSI_URL \u7684\u8fde\u63a5\u914d\u7f6e')\n        if 'SHOW_IP_STATISTIC_PATH' not in app.config:\n            raise LookupError('\u8bf7\u5728flask\u7684config \u914d\u7f6e\u4e2d\u6307\u660e SHOW_IP_STATISTIC_PATH \u7684\u914d\u7f6e,\u7528\u6765\u8fd4\u56deip\u8bbf\u95ee\u60c5\u51b5')\n        if 'REDSI_KEY_PREFIX_FOR_STATISTICS' not in app.config:\n            raise LookupError('\u8bf7\u5728flask\u7684config \u914d\u7f6e\u4e2d\u6307\u660e REDSI_KEY_PREFIX_FOR_STATISTICS \u7684\u914d\u7f6e')\n        if 'SHOW_IP_STATISTIC_PATH' not in app.config:\n            raise LookupError('\u8bf7\u5728flask\u7684config \u914d\u7f6e\u4e2d\u6307\u660e SHOW_IP_STATISTIC_PATH \u7684\u914d\u7f6e,\u7528\u6765\u8fd4\u56deip\u8bbf\u95ee\u60c5\u51b5')\n        self._redsi_key_prefix_of_app = app.config['REDSI_KEY_PREFIX_FOR_STATISTICS']\n        self._redis_db_for_ip_statistic = redis.Redis.from_url(app.config['REDSI_URL'])\n\n        app.before_request_funcs.setdefault(None, []).append(self._inrc_ip)\n        app.add_url_rule(app.config['SHOW_IP_STATISTIC_PATH'], '', self._show_count, methods=['GET', ])\n\n    @staticmethod\n    def _get_user_ip():\n        if request.headers.get('X-Forwarded-For'):\n            user_ip = request.headers['X-Forwarded-For']\n        elif request.headers.get('X-Real-IP'):\n            user_ip = request.headers.get('X-Real-IP')\n        else:\n            user_ip = request.remote_addr\n        return user_ip.split(',')[0]\n\n    def _inrc_ip(self):\n        print(request.path)\n        ip_key_name = f'''{self._redsi_key_prefix_of_app}:{request.path}:{self._get_user_ip()}'''\n        print(f'\u6267\u884cinrc    {ip_key_name}')\n        if self._redis_db_for_ip_statistic.exists(ip_key_name):\n            self._redis_db_for_ip_statistic.incr(ip_key_name, 1)\n        else:\n            with self._redis_db_for_ip_statistic.pipeline() as p:\n                p.incr(ip_key_name, 1)\n                p.expire(ip_key_name, 3600)\n                p.execute()\n\n    def _show_count(self):\n        # \u663e\u793a\u6bcf\u4e2aip\u7684\u8bbf\u95ee\u6b21\u6570\n        # return 'aaaaa'\n\n        key_iters = self._redis_db_for_ip_statistic.scan_iter(f'{self._redsi_key_prefix_of_app}:*')\n        ip__count_map = {key.decode(): self._redis_db_for_ip_statistic.get(key).decode() for key in key_iters}\n        return {'count': len(ip__count_map), 'ip__count_map': ip__count_map}\n\n\ndef api_return_deco(v):\n    \"\"\"\n    \u5bf9flask\u7684\u8fd4\u56de \u52a0\u4e00\u4e2a\u56fa\u5b9a\u7684\u72b6\u6001\u7801\u3002\u5728\u6d4b\u8bd5\u73af\u5883\u5373\u4f7f\u662f\u975edebug\uff0c\u76f4\u63a5\u5728\u9519\u8bef\u4fe1\u606f\u4e2d\u8fd4\u56de\u9519\u8bef\u5806\u6808\u3002\u5728\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u968f\u673a\u56db\u4f4d\u5b57\u6bcd \u52a0 \u9519\u8bef\u4fe1\u606f\u7684base64\u4f5c\u4e3a\u9519\u8bef\u4fe1\u606f\u3002\n    :param v:\u89c6\u56fe\u51fd\u6570\n    :return:\n    \"\"\"\n    flask_request = request\n\n    @functools.wraps(v)\n    def _api_return_deco(*args, **kwargs):\n        # noinspection PyBroadException\n        try:\n            data = v(*args, **kwargs)\n            if isinstance(data, str):\n                result = data\n            else:\n                if 'code' in data and 'data' in data:\n                    result = json_util.dumps(data)\n                else:\n                    result = json_util.dumps({\n                        \"code\": 200,\n                        \"data\": data,\n                        \"message\": \"SUCCESS\"}, ensure_ascii=False)\n            flask_record_logger.debug(\n                f'\u8bf7\u6c42\u8def\u5f84\uff1a{flask_request.path}  \u8bf7\u6c42\u53c2\u6570\uff1a{json.dumps(flask_request.values.to_dict())},\u8fd4\u56de\u6b63\u5e38,\u7ed3\u679c\u957f\u5ea6\u662f{len(result)}')\n            return result\n        except Exception as e:\n            except_str0 = f'\u8bf7\u6c42\u8def\u5f84\uff1a{flask_request.path}  \u8bf7\u6c42\u53c2\u6570\uff1a{json.dumps(flask_request.values.to_dict())} ,\u51fa\u9519\u4e86 {type(e)} {e} {traceback.format_exc()}'.replace(\n                '\\n', '<br>')\n            flask_error_logger.exception(except_str0)\n            exception_str_encode = base64.b64encode(except_str0.encode()).decode().replace('=', '').strip()\n            message = except_str0 if os.environ.get(\n                'IS_RETURN_PYTHON_TRACEBACK_PLAINTEXT_FROM_FLASK_INTERFACE') == '1' else f'''\n            {\"\".join(random.sample(\"abcdefghijklmnopqrstABCDEFGHIJKLMNOPQRST\", 4))}{exception_str_encode}'''\n            return json.dumps({\n                \"code\": 500,\n                \"data\": None,\n                \"message\": message}, ensure_ascii=False)\n\n    return _api_return_deco\n\n\nflask_api_result_deco = api_return_deco\n\n\ndef _dispatch_request_with_flask_api_result_deco(self):\n    \"\"\"Does the request dispatching.  Matches the URL and returns the\n    return value of the view or error handler.  This does not have to\n    be a response object.  In order to convert the return value to a\n    proper response object, call :func:`make_response`.\n\n    .. versionchanged:: 0.7\n       This no longer does the exception handling, this code was\n       moved to the new :meth:`full_dispatch_request`.\n    \"\"\"\n    req = _request_ctx_stack.top.request\n    if req.routing_exception is not None:\n        self.raise_routing_exception(req)\n    rule = req.url_rule\n    # if we provide automatic options for this URL and the\n    # request came with the OPTIONS method, reply automatically\n    if getattr(rule, 'provide_automatic_options', False) \\\n            and req.method == 'OPTIONS':\n        return self.make_default_options_response()\n    # otherwise dispatch to the handler for that endpoint\n    # return self.view_functions[rule.endpoint](**req.view_args)\n    v = self.view_functions[rule.endpoint]\n    v2 = flask_api_result_deco(v)\n    return v2(**req.view_args)\n\n\nclass CustomFlaskApiConversion(LoggerMixin):\n    \"\"\"\n    \u81ea\u52a8\u8f6c\u5316\u6bcf\u4e2a\u63a5\u53e3\u7684\u8fd4\u56de\uff0c\u81ea\u52a8\u5c06\u5404\u79cd\u7c7b\u578b\u8f6c\u6210code data message\u683c\u5f0f\u7684json\n    \"\"\"\n\n    def __init__(self, app=None):\n        self.app = app\n        if app is not None:\n            self.init_app(app, )\n\n    def monkey_patch_dispatch_request(self):\n        self.logger.warn('\u6539\u53d8\u4e86flask\u7684dispatch_request \u65b9\u6cd5')\n        Flask.dispatch_request = _dispatch_request_with_flask_api_result_deco\n\n    def init_app(self, app: Flask):\n        if 'IS_RETURN_PYTHON_TRACEBACK_PLAINTEXT_FROM_FLASK_INTERFACE' not in app.config:\n            self.logger.warning(\n                'flask\u7684config\u6ca1\u6709\u914d\u7f6e IS_RETURN_PYTHON_TRACEBACK_PLAINTEXT_FROM_FLASK_INTERFACE\uff0c\u5219\u9ed8\u8ba4\u4e3a\"0\"\uff0c\u4f7f\u7528\u5bc6\u6587')\n            os.environ.setdefault('IS_RETURN_PYTHON_TRACEBACK_PLAINTEXT_FROM_FLASK_INTERFACE', '0')\n        app.before_first_request_funcs.append(self.monkey_patch_dispatch_request)  # \u76f4\u63a5\u628a\u8fd4\u56de\u88c5\u9970\u5668\u52a0\u5230app\u4e0a\uff0c\u514d\u5f97\u6bcf\u4e2a\u63a5\u53e3\u52a0\u4e00\u6b21\u88c5\u9970\u5668\u9ebb\u70e6\u3002\n\n\ndef flask_check_param_deco(schema, ):\n    \"\"\"\n    \u81ea\u52a8\u68c0\u67e5\u53c2\u6570\uff0c\u8fd4\u56de400 code\n    :param schema:\n    :return:\n    \"\"\"\n\n    def _check_param_deco(v):\n        @functools.wraps(v)\n        def ___check_param_deco(*ags, **kwargs):\n            request_values = {}\n            print(request.values)\n            if request.values:\n                request_values = request.values.to_dict()\n            if request.json:\n                request_values.update(request.json)\n            # print(request_values)\n            # print(schema)\n            vd = Validator()\n            vd.allow_unknown = True\n            # document, schema=None\n            is_ok = vd.validate(request_values, schema)\n            check_errors = None\n            if is_ok is False:\n                check_errors = vd.errors\n            if is_ok:\n                return v(*ags, **kwargs)\n            else:\n                return {'code': 400,\n                        'message': check_errors,\n                        'data': None}\n\n        return ___check_param_deco\n\n    return _check_param_deco\n\n\nif __name__ == '__main__':\n    schemax = {\"x\": {'type': 'string', 'empty': False, 'nullable': False, 'required': True}}\n\n    app = Flask(__name__)\n    app.config['REDSI_URL'] = 'redis://127.0.0.1/0'\n    app.config['REDSI_KEY_PREFIX_FOR_STATISTICS'] = 'flask_test1'\n    app.config['SHOW_IP_STATISTIC_PATH'] = '/proj/ip_st'\n    FlaskIpStatistics(app)\n    CustomFlaskApiConversion(app)\n\n\n    @app.route('/', methods=['get'])\n    def index():\n        return 'hello'\n\n\n    @app.route('/list', methods=['get', 'post'])\n    @flask_check_param_deco(schemax, )\n    def listx():\n        \"\"\"\n        {\"code\": 200, \"data\": [\"dsd\"], \"message\": \"SUCCESS\"}\n        :return:\n        \"\"\"\n        return ['dsd', 'lalala']  # \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u5b57\u5178 \u548c\u5217\u8868\u7c7b\u578b\uff0c\u4e0d\u9700\u8981json dumps\u3002\n\n\n    app.run()\n\n\n```",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "flask,cerberus",
            "license": "BSD License",
            "maintainer": "ydf",
            "maintainer_email": "m13148804508@163.com",
            "name": "flask-ext-ydf",
            "package_url": "https://pypi.org/project/flask-ext-ydf/",
            "platform": "all",
            "project_url": "https://pypi.org/project/flask-ext-ydf/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/flask-ext-ydf/1.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "flask decorators check with cerberus,flask return result auto convet",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7222642,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "52b503c30fc12cde3badbbbe4b4f02fc",
                    "sha256": "f9b8d54e5301d82dfe7f63bfbf9782f81ede99380edcd53ed3ef82c3fdd783b1"
                },
                "downloads": -1,
                "filename": "flask_ext_ydf-1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "52b503c30fc12cde3badbbbe4b4f02fc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 6686,
                "upload_time": "2020-05-12T09:59:55",
                "upload_time_iso_8601": "2020-05-12T09:59:55.904074Z",
                "url": "https://files.pythonhosted.org/packages/0f/db/ac85a7c6057203a77c704da4b635f594f23c25bcd5146750fb0f9a28f531/flask_ext_ydf-1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}