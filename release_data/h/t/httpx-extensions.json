{
    "0.0.1": {
        "info": {
            "author": "Chris Newville",
            "author_email": "chrisnewville1396@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Internet :: WWW/HTTP"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/newvicx/httpx_extensions",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "httpx-extensions",
            "package_url": "https://pypi.org/project/httpx-extensions/",
            "platform": "",
            "project_url": "https://pypi.org/project/httpx-extensions/",
            "project_urls": {
                "Changelog": "https://github.com/newvicx/httpx_extensions/blob/master/CHANGELOG.md",
                "Homepage": "https://github.com/newvicx/httpx_extensions",
                "Source": "https://github.com/newvicx/httpx_extensions"
            },
            "release_url": "https://pypi.org/project/httpx-extensions/0.0.1/",
            "requires_dist": [
                "httpx (==0.22.0)",
                "pywin32 (==303)"
            ],
            "requires_python": ">=3.6",
            "summary": "Client extension of HTTPX AsyncClient with support for Negotiate/NTLM auth via SSPI",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12807780,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "64c5b41239d22951bbea73ba1daf1ad9",
                    "sha256": "c4d35d707758293765072f9ca80914cd17a43bbdd42aa96aad087d29673bd864"
                },
                "downloads": -1,
                "filename": "httpx_extensions-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "64c5b41239d22951bbea73ba1daf1ad9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 21966,
                "upload_time": "2022-02-03T02:57:03",
                "upload_time_iso_8601": "2022-02-03T02:57:03.664821Z",
                "url": "https://files.pythonhosted.org/packages/34/04/679c0a1e9437d8723e2cb8e48b2b2399811fd49620471ef3da5ab306874a/httpx_extensions-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a2e1513412b17b2362abab1cb2f37e51",
                    "sha256": "1955ee818b169275fa55a4e19c75f19fb436fed67e229e6dae7fcae2de60b7ae"
                },
                "downloads": -1,
                "filename": "httpx_extensions-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a2e1513412b17b2362abab1cb2f37e51",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 23478,
                "upload_time": "2022-02-03T02:57:05",
                "upload_time_iso_8601": "2022-02-03T02:57:05.736722Z",
                "url": "https://files.pythonhosted.org/packages/91/e6/a796ac51e5cdd724a1c1f8edd7a564a6856a332aeeab3158c7097e8c1cf4/httpx_extensions-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Chris Newville",
            "author_email": "chrisnewville1396@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Internet :: WWW/HTTP"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/newvicx/httpx_extensions",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "httpx-extensions",
            "package_url": "https://pypi.org/project/httpx-extensions/",
            "platform": "",
            "project_url": "https://pypi.org/project/httpx-extensions/",
            "project_urls": {
                "Changelog": "https://github.com/newvicx/httpx_extensions/blob/master/CHANGELOG.md",
                "Homepage": "https://github.com/newvicx/httpx_extensions",
                "Source": "https://github.com/newvicx/httpx_extensions"
            },
            "release_url": "https://pypi.org/project/httpx-extensions/0.1.0/",
            "requires_dist": [
                "httpx (==0.22.0)"
            ],
            "requires_python": ">=3.6",
            "summary": "Client extension of HTTPX AsyncClient with support for Negotiate/NTLM auth via SSPI",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12807780,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6d30b90fd2146539d3155f34c0a1aad5",
                    "sha256": "86e40ee50fbad9b00d24fe4d9b3b6d1174a9d8e112cd555f7acd4bed93b6c9f8"
                },
                "downloads": -1,
                "filename": "httpx_extensions-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6d30b90fd2146539d3155f34c0a1aad5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 19973,
                "upload_time": "2022-02-07T03:35:04",
                "upload_time_iso_8601": "2022-02-07T03:35:04.475303Z",
                "url": "https://files.pythonhosted.org/packages/eb/6e/c4f42c6a7e044c2c1b02cf48a705c0b5e10611c016e0d269db67f06aff20/httpx_extensions-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "54ee64efc04535a23b1533e2ef81a39a",
                    "sha256": "6a5bc99c7d9f67b63de6fac9f04b4d279e368f9b642929e8ef0ebbb94efe4173"
                },
                "downloads": -1,
                "filename": "httpx_extensions-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "54ee64efc04535a23b1533e2ef81a39a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 21856,
                "upload_time": "2022-02-07T03:35:06",
                "upload_time_iso_8601": "2022-02-07T03:35:06.187395Z",
                "url": "https://files.pythonhosted.org/packages/3f/95/1d9df26687f073a1aff82b0e2fa70ae18798f0faecdd38fa4c6ca6f975df/httpx_extensions-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Chris Newville",
            "author_email": "chrisnewville1396@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: AsyncIO",
                "Framework :: Trio",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Internet :: WWW/HTTP"
            ],
            "description": "\ufeff# HTTPX_Extensions\nA client extension of HTTPX AsyncClient with connection pool management features\n## Background\nhttpx_extensions is an extension of the AsyncClient from [HTTPX](https://www.python-httpx.org/). It modifies the way the connection pooling works so users can control exactly which open connection a request is sent on. This comes in handy for connection based authentication methods such as NTLM. When using HTTP 1.1 with connection pooling, the stock AsyncClient (and other clients from of other async frameworks such as aiohttp) implicitely release a connection back to the pool as soon as the request/response cycle is complete. When doing something like NTLM which takes 3 request/response cycles, there is no guarantee that the next 2 requests will go out on the same connection as the first. httpx_extensions attempts to solve this problem by introducing introducing the concept of \"reserved connections\" and not releasing connections back to the pool until the final response (regardless of the number of request/response cycles) is served up to the user. In 99% of cases, this feature is not required and in those cases you should use the AsyncClient from HTTPX or any other async client of your choosing. But, if you are doing something like NTLM or some other workflow that requires you to control which requests are sent on which connection, httpx_extensions fits the bill\n\n## Installation\nYou can install httpx_extensions via pip\n\n    pip install httpx-extensions\n## Docs\nRefer to the HTTPX [AsyncClient](https://www.python-httpx.org/async/) documentation as the API is identical. Read the rest of this document to understand the minor differences\n## Compatability\n - httpx_extensions is an extension of HTTPX (duh) thus the API is identical to the HTTPX AsyncClient and nearly all of the code snippets from HTTPX can be used with httpx_extensions by simply swapping the AsyncClient for the ExClient\n - All HTTPX models such as Headers, Limits, Request are compatible and should be used as httpx_extensions does not ship with these models. The lone exception to this is the Response object. httpx_extensions returns instances of the ResponseMixin class. For all intents and purposes, from a user perspective, the ResponseMixin object is identical to the HTTPX Response object and should be treated as such\n - All other HTTPX features are supported as well with only a couple of caveats. See Unsupported Features below\n## Unsupported Features\n - http2: When using http2, only one connection is used so there is no need to add additional logic for connection management with http2. In this case you should just use the AsyncClient. Attempting to make a request with http2=True will raise a RuntimeError\n - Custom Transports: You can pass an instance of AsyncHTTPTransportMixin to the constructor call for the ExClient but it must be an instance of AsyncHTTPTransportMixin. You can also create transports which inherit from AsyncHTTPTransportMixin but this is not recommended\n - app: Calling into python web apps through the app parameter is not supported. These transports dont use httpcore which is where all the connection management happens\n## Usage\n### Making a Request\n\n    import asyncio\n    from httpx import Headers\n    from httpx_extensions import ExClient\n\t\n\tasync def main():\n\t\turl = \"http://example.com\"\n\t\theaders = Headers(\n\t\t\tdict(\n\t\t\t\taccept=\"application/json\",\n\t\t\t\tconnection=\"Keep Alive\"\n\t\t\t)\n\t\t)\n\t\tasync with ExClient(headers=headers) as client:\n\t\t\tresponse = await client.get(url)\n\t\n\tif __name__ == \"__main__\":\n\t\tloop = asyncio.get_event_loop()\n\t\tloop.run_until_complete(main())\nCompare that to making a request through HTTPX\n\n    import asyncio\n    from httpx import AsyncClient, Headers\n \n    async def main():\n\t    url = \"http://example.com\"\n\t    headers = Headers(\n    \t\tdict(\n    \t\t\taccept=\"application/json\",\n    \t\t\tconnection=\"Keep Alive\"\n    \t\t)\n    \t)\n    \tasync with AsyncClient(headers=headers) as client:\n    \t\tresponse = await client.get(url)\n### Connection Management\nhttpx_extensions provides a \"conn_id\" key on the \"extensions\" attribute of the response. The most common place to access this is in an authentication workflow but you can see how to access it following the example above.\n\n    import asyncio\n    from httpx import Headers\n    from httpx_extensions import ExClient\n    \n    async def main():\n    \turl = \"http://example.com\"\n    \theaders = Headers(\n    \t\tdict(\n    \t\t\taccept=\"application/json\",\n    \t\t\tconnection=\"Keep Alive\"\n    \t\t)\n    \t)\n    \tasync with ExClient(headers=headers) as client:\n    \t\tresponse = await client.get(url)\n    \tprint(response.extensions[\"conn_id\"])\n\t\n\tif __name__ == \"__main__\":\n\t\tloop = asyncio.get_event_loop()\n\t\tloop.run_until_complete(main())\n\nSo how do you leverage this an authentication workflow? Lets consider a simple auth flow...\n\n    from httpx import Auth\n\t\n\tclass SimpleAuthFlow(Auth):\n\t\tdef auth_flow(request: Request):\n\t\t\tresponse = yield request\n\t\t\t# Do something here\n\t\t\tyield request\n\nThe second time you yield request there is no guarantee that request will use the same underlying connection to fulfill the request. But, if we change this flow slightly...\n\n    from httpx import Auth\n\t\n\tclass SimpleAuthFlowWithConnManagement(Auth):\n\t\tdef auth_flow(request: Request):\n\t\t\tresponse = yield request\n\t\t\t# Do something here\n\t\t\trequest.extensions[\"conn_id\"] = response.extensions[\"conn_id\"]\n\t\t\tyield request\nBy assigning a \"conn_id\" to the request, the underlying connection pool will attempt to use that same connection to fulfill the request. The only time this wont happen is if...\n\n - The connection was forced to close after a previous response either by some error or the Connection Close header was issued by the server\n - The connection has expired\n - The connection has already been released back to the pool. This can happen with redirects (see special considerations below)\n\nUsers will receive a warning in the first case where the connection has closed. To avoid case 2, it might be best to not set a keepalive expiry but you are not restricted from doing so\n## Special Considerations\n - Redirects: If follow_redirects=True, the conn_id will be automatically appended to the redirect request and the connection pool will reuse that connection. However, if follow_redirects=False, sending the next_request from the resulting response object is not guarenteed to use the same connection even if the conn_id from the response is attached to next_request. If conn_id is appended to next_request a warning log will be issued saying \"Connection id {conn_id} was given in request extensions but the connection is not reserved. {Request} is not guarenteed to use the desired connection\"\n - You can set the keepalive_expiry and max_keepalive_connections limits to anything but 0. Having connections that automatically close when the request/response cycle is done defeats the purpose of what this package was built for. Setting either property to 0 will raise a ValueError\n## How it Works\nFor the curious such...\nHTTPX is built on top of [httpcore](https://github.com/encode/httpcore) which handles the actual connection pooling, sending requests, and receiving responses. The default connection pool implicitly releases connections back to the pool once the request-response cycle has completed. In HTTPX reading the response content to completion completes the cycle and releases the connection. The biggest change httpx_extensions makes is the how the httpcore AsyncConnectionPool works. Rather than connections being implicitly released they need to be explicitly released by calling the \"release\" method on the byte stream returned from  httpcore. This all happens automatically without any need for the user to manage the release of connections. Requiring an explicit release of the connection back to the pool ensures that connection is still available to be used again by subsequent requests in an auth flow should the user who wrote the auth flow choose to do so. The connection is then released once the auth flow completes. For streaming responses, the connection is released when the response is closed.\n\nTo achieve this, the concept of \"reserved connections\" are introduced into the connection pool interface. Connections in the pool are assigned a unique connection id when they are opened. When a request-response cycle is completed, instead of releasing the connection back to the pool it is categorized as \"reserved\". The reserved connection is released back to the pool by explicitly calling a release method with a reference to the connection id. Adding this concept of reserved connections has the side effect (could be good or bad) of ensuring auth flows are completed before additional requests begin processing if the connection pool limit is reached. \n\nLets consider an example below to illustrate how the connection management works and show how auth flows are followed to completion before subsequent requests are processed.\n\n                                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                   \u2502Available Connections\u2502  \u2502Reserved  Connections\u2502\n                                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502           \u2502\n       \u2502 Request 1  \u2502                   \u2502  Conn 1   \u2502\n       \u2502            \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524           \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       401         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\t   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\t   |            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502           \u2502\n\t   \u2502 Request 2                      \u2502  Conn 2   \u2502\n\t   \u2502            \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524           \u2502\n\t   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       401         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502            \u2502\n       \u2502 Request 3  \u2502Enqueued\n       \u2502            \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500Next\u2500\u2500\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500-\u25ba\u2502           \u2502\n       \u2502 Request 1  \u2502                                           \u2502  Conn 1   \u2502\n       \u2502 ID: Conn 1 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524           \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                200(Complete)              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500-\u25ba\u2502           \u2502\n       \u2502 Request 2  \u2502                                           \u2502  Conn 2   \u2502\n       \u2502 ID: Conn 2 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524           \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                200(Complete)              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502            \u2502\n       \u2502 Request 3  \u2502Enqueued\n       \u2502            \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500Next\u2500\u2500\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502           \u2502\n       \u2502 Request 3  \u2502                   \u2502  Conn 1   \u2502\n       \u2502            \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524           \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   200(Complete)   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\t                                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\t                                    \u2502           \u2502\n\t                                    \u2502  Conn 2   \u2502\n\t                                    |           \u2502\n\t                                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nIn the above example we have a connection pool with 2 available connections and we want to make 3 requests. The first 2 requests are handled in order by the 2 connections in the pool. We receive a 401 response for both requests. The request/response cycle is complete but we are not done so the connections are flagged as reserved. The auth flow for each request adds an authorization header and submits the requests back to the pool. The requests reference the connections they were first sent on so the pool assigns the appropriate connection to the 2 requests. We receive 200 responses on the next cycle and the auth flow completes. Those 2 connections are now considered available again so request 3 can now be processed\n## Supports\n\n - Python 3.6+\n - httpx 0.22.0\n\n\n\n\ufeff# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.1.0 (February 6, 2022)\n\nThe first beta release of http_extensions\n\n### Added\n* Tests! - Fully tested for integration with HTTPX (0.22.0). See \"Unsupported Features\" sections of the README for unsupported features\n* You can now create instances of AsnycHTTPTransportMixin and pass those to the client. However, only AsyncHTTPTransportMixin instances are supported. Passing an unsupported transport instance will raise a ValueError\n* MockTransport class\n\n### Fixed\n* Setting 'follow_redirects=True' would break the response relationship to a connection and it wasnt guaranteed that a redirect request would use the same connection. This has been changed so now the client appends the conn_id to the redirect request. This behavior can be changed by implementing a \"request\" event hook which could check for and remove conn_id from the request extensions\n\n### Removed\n* Negotiate SSPI auth flow - Will create a separate repo for this flow\n* Sync methods on ResponseMixin no longer raise NotImplementedError\n\n### Changed\n* Using http2=True raises a RuntimeError\n* Neither of the limits 'keepalive_expiry' and 'max_keepalive_connections' can be 0, it defeats the purpose of what httpx_extensions was built for. Passing either of these parameters with a value of 0 will raise a ValueError\n\n## 0.1.1 (February 6, 2022)\n\n* Minor changes to setup.py\n* Update some comments and log messages\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/newvicx/httpx_extensions",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "httpx-extensions",
            "package_url": "https://pypi.org/project/httpx-extensions/",
            "platform": "",
            "project_url": "https://pypi.org/project/httpx-extensions/",
            "project_urls": {
                "Changelog": "https://github.com/newvicx/httpx_extensions/blob/master/CHANGELOG.md",
                "Homepage": "https://github.com/newvicx/httpx_extensions",
                "Source": "https://github.com/newvicx/httpx_extensions"
            },
            "release_url": "https://pypi.org/project/httpx-extensions/0.1.1/",
            "requires_dist": [
                "httpx (==0.22.0)"
            ],
            "requires_python": ">=3.6",
            "summary": "A client extension of HTTPX AsyncClient with connection pool management features",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12807780,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "789b78eb821bb1fd258f117c9b422fd6",
                    "sha256": "e677e172cbe937b7e42c1b13c9d30b340e3597bc98c235a1c000af6da8fd5e05"
                },
                "downloads": -1,
                "filename": "httpx_extensions-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "789b78eb821bb1fd258f117c9b422fd6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 19969,
                "upload_time": "2022-02-07T03:56:22",
                "upload_time_iso_8601": "2022-02-07T03:56:22.434138Z",
                "url": "https://files.pythonhosted.org/packages/b3/68/78a747936d493409393e502957c56770d667ceac2884c4efa3eccbe2df6a/httpx_extensions-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "14c4a0caff69589f085a21bd9a6e95cf",
                    "sha256": "d976c33e712a2b7fb778841ff53c0089e0d0ebee7b83a9c7d505f648c2c8f53c"
                },
                "downloads": -1,
                "filename": "httpx_extensions-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "14c4a0caff69589f085a21bd9a6e95cf",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 21852,
                "upload_time": "2022-02-07T03:56:24",
                "upload_time_iso_8601": "2022-02-07T03:56:24.094520Z",
                "url": "https://files.pythonhosted.org/packages/5a/e9/eb16eb22d75fdc20e6856f8788ac726c134104f18aca3721085692b291f8/httpx_extensions-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}