{
    "1.0.0": {
        "info": {
            "author": "StevanFreeborn",
            "author_email": "stevan.freeborn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/StevanFreeborn/onspring-api-sdk-python",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "OnspringApiSdk",
            "package_url": "https://pypi.org/project/OnspringApiSdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/OnspringApiSdk/",
            "project_urls": {
                "Bug Tracker": "https://github.com/StevanFreeborn/onspring-api-sdk-python/issues",
                "Homepage": "https://github.com/StevanFreeborn/onspring-api-sdk-python"
            },
            "release_url": "https://pypi.org/project/OnspringApiSdk/1.0.0/",
            "requires_dist": [
                "Requests"
            ],
            "requires_python": ">=3.6",
            "summary": "A package for interacting with version 2 of the Onspring API.",
            "version": "1.0.0",
            "yanked": true,
            "yanked_reason": "Deprecated"
        },
        "last_serial": 13712208,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f41eb0167a276daca62766e5b9357792",
                    "sha256": "8a6301002f5e157600fd9e9c079c2962aaa32864c5a7962a97ce8fa5864a4a67"
                },
                "downloads": -1,
                "filename": "OnspringApiSdk-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f41eb0167a276daca62766e5b9357792",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 19703,
                "upload_time": "2022-05-04T16:52:49",
                "upload_time_iso_8601": "2022-05-04T16:52:49.520070Z",
                "url": "https://files.pythonhosted.org/packages/d8/65/1f0b29512e749b956a76834ad30b9be5e29e1daecaad9f5ba3931b4d4fc1/OnspringApiSdk-1.0.0-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": "Deprecated"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8c6589bb16b743b8489d16432395c7af",
                    "sha256": "ba5427d8a2394daff4247d51877a949130963c85545a9365f72a2c70c3fa3793"
                },
                "downloads": -1,
                "filename": "OnspringApiSdk-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8c6589bb16b743b8489d16432395c7af",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 23293,
                "upload_time": "2022-05-04T16:52:52",
                "upload_time_iso_8601": "2022-05-04T16:52:52.459217Z",
                "url": "https://files.pythonhosted.org/packages/b8/ca/6687d899a80e51e5b28e6eb863abf5f3f78c71b850f2589ca8bf57465543/OnspringApiSdk-1.0.0.tar.gz",
                "yanked": true,
                "yanked_reason": "Deprecated"
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "StevanFreeborn",
            "author_email": "stevan.freeborn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Onspring API Python SDK\n\nThe python SDK for **version 2** of the Onspring API is meant to simplify development in Python for Onspring customers who want to build integrations with their Onspring instance.\n\n**Note:**\nThis is an unofficial SDK for the Onspring API. It was not built in consultation with Onspring Technologies LLC or a member of their development team.\n\nThis SDK was developed independently using their existing C# SDK, their swagger page, and api documentation with the intention of making development of integrations done in Python with an Onspring instance quicker and more convenient.\n\n## Dependencies\n\n### Python\n\nRequires use of Python 3.6.0 or later.\n\n### Requests\n\nAll methods for the `OnspringClient` make use of the [Requests](https://docs.python-requests.org/en/latest/) library to interact with the endpoints of version 2 of the Onspring API.\n\n## Installation\n\nInstall the SDK using pip:\n\n`pip install OnspringApiSdk`\n\n## API Key\n\nIn order to successfully interact with the Onspring Api you will need an API key. API keys are obtained by an Onspring user with permissions to at least **Read** API Keys for your instance via the following steps:\n\n1. Login to the Onspring instance.\n2. Navigate to **Administration** > **Security** > **API Keys**\n3. On the list page, add a new API Key - this will require **Create** permissions - or click an existing API key to view its details.\n4. Click on the **Developer Information** tab.\n5. Copy the **X-ApiKey Header** value from this tab.\n\n## Start Coding\n\n### `OnspringClient`\n\nThe most common way to use the SDK is to create an `OnspringClient` instance and call its methods. Its constructor requires two parameters:\n\n- `baseUrl` - currently this should always be: `https://api.onspring.com`\n- `apiKey` - the value obtained by following the steps in the **API Key** section\n\nIt is best practice to read these values in from a configuration file for both flexibility and security purposes.\n\nExample `config.ini` file:\n\n```ini\n[prod]\nkey = 000000ffffff000000ffffff/00000000-ffff-0000-ffff-000000000000\nurl = https://api.onspring.com\n```\n\nExample constructing `OnspringClient`:\n\n```python\nfrom OnspringApiSdk.OnspringClient import OnspringClient\nfrom configparser import ConfigParser\n\ncfg = ConfigParser()\ncfg.read('config.ini')\n\nkey = cfg['prod']['key']\nurl = cfg['prod']['url']\n\nclient = OnspringClient(url, key)\n```\n\n### `ApiResponse`\n\nEach `OnspringClient` method - aside from `CanConnect` - returns an `ApiResponse` object which will have the following properties:\n\n- `statusCode` - The http status code of the response.\n- `data` - If the request was successful will contain the response data deserialized to custom python objects.\n- `message` - A message that may provide more detail about the requests success or failure.\n- `raw` - Exposes the raw response object of the request if you'd like to handle it directly.\n\nThe goal with this `ApiResponse` object is to provide the flexibility to do with the response what you'd like as well as already having the raw JSON response deserialized to python objects.\n\nIf you do want to handle and/or manipulate the response object yourself you will want to use the value of the `ApiResponse`'s `raw` property which will be a [`Response`](https://docs.python-requests.org/en/latest/user/advanced/#request-and-response-objects) object from the [Requests](https://docs.python-requests.org/en/latest/) library.\n\n## Full API Documentation\n\nYou may wish to refer to the full [Onspring API documentation](https://software.onspring.com/hubfs/Training/Admin%20Guide%20-%20v2%20API.pdf) when determining which values to pass as parameters to some of the `OnspringClient` methods. There is also a [swagger page](https://api.onspring.com/swagger/index.html) that you can use for making exploratory requests.\n\n## Example Code\n\nThe examples that follow assume you have created an `OnspringClient` as described in the **Start Coding** section.\n\n### Connectivity\n\n#### Verify connectivity\n\n```python\ncanConnect = client.CanConnect()\n\nif canConnect:\n    print('Connected successfully')\nelse:\n    print('Attempt to connect failed')\n```\n\n### Apps\n\n#### Get Apps\n\nReturns a paged collection of apps and/or surveys that can be paged through. By default the page size is 50 and page number is 1.\n\n```python\nresponse = client.GetApps()\n  \nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Size: {response.data.pageSize}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Total Pages: {response.data.totalPages}')\nprint(f'Total Records: {response.data.totalRecords}')\n\nfor app in response.data.apps:\n    print(f'Id: {app.id}')\n    print(f'Name: {app.name}')\n    print(f'href: {app.href}')\n```\n\nYou can set your own page size and page number (max is 1,000) as well.\n\n```python\nfrom OnspringApiSdk.Models import PagingRequest\n\npagingRequest = PagingRequest(1, 100)\nresponse = client.GetApps(pagingRequest)\n  \nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Size: {response.data.pageSize}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Total Pages: {response.data.totalPages}')\nprint(f'Total Records: {response.data.totalRecords}')\n\nfor app in response.data.apps:\n    print(f'Id: {app.id}')\n    print(f'Name: {app.name}')\n    print(f'href: {app.href}')\n```\n\n#### Get App By Id\n\nReturns an Onspring app or survey according to provided id.\n\n```python\nresponse = client.GetAppById(appId=195)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'id: {response.data.app.id}')\nprint(f'Name: {response.data.app.name}')\nprint(f'href: {response.data.app.href}')\n```\n\n#### Get Apps By Ids\n\nReturns a collection of Onspring apps and/or surveys according to provided ids.\n\n```python\nresponse = client.GetAppsByIds(appIds=[195, 240])\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Count: {response.data.count}')\n\nfor app in response.data.apps:\n    print(f'Id: {app.id}')\n    print(f'Name: {app.name}')\n    print(f'href: {app.href}')\n```\n\n### Fields\n\n#### Helpers\n\nExample `PrintField` method referenced in following examples.\n\n```python\ndef PrintField(field: Field):\n    \n    print('Field:')\n    print(f' Id: {field.id}')\n    print(f' App Id: {field.appId}')\n    print(f' Name: {field.name}')\n    print(f' Type: {field.type}')\n    print(f' Status: {field.status}')\n    print(f' IsRequired: {field.isRequired}')\n    print(f' IsUnique: {field.isUnique}')\n\n    if field.type == 'Formula':\n\n        print(f' Output Type: {field.outputType}')\n\n        if field.outputType == 'ListValue':\n\n            print(f' Multiplicity: {field.multiplicity}')\n            print(' Values:')\n\n            for value in field.values:\n\n                print(f'  {value.AsString()}')\n\n    if field.type == 'List':\n\n        print(f' Multiplicity: {field.multiplicity}')\n        print(' Values:')\n\n        for value in field.values:\n\n            print(f'  {value.AsString()}')\n```\n\n#### Get Field By Id\n\nReturns an Onspring field according to provided id.\n\n```python\nresponse = client.GetFieldById(fieldId=9686)\n\nprint(f'Status Code: {response.statusCode}')\nPrintField(response.data.field)\n```\n\n#### Get Fields By Ids\n\nReturns a collection of Onspring fields according to provided ids.\n\n```python\nresponse = client.GetFieldsByIds(fieldIds=[9686, 9687])\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Count: {response.data.count}')\n\nfor field in response.data.fields:\n    PrintField(field)\n```\n\n#### Get Fields By App Id\n\nReturns a paged collection of fields that can be paged through. By default the page size is 50 and page number is 1.\n\n```python\nresponse = client.GetFieldsByAppId(appId=195)\n    \n    print(f'Status Code: {response.statusCode}')\n    print(f'Page Size: {response.data.pageSize}')\n    print(f'Page Number: {response.data.pageNumber}')\n    print(f'Total Pages: {response.data.totalPages}')\n    print(f'Total Records: {response.data.totalRecords}')\n\n    for field in response.data.fields:\n        PrintField(field)\n```\n\nYou can set your own page size and page number (max is 1,000) as well.\n\n```python\nfrom OnspringApiSdk.Models import PagingRequest\n\npagingRequest = PagingRequest(1, 100)\n\nresponse = client.GetFieldsByAppId(appId=195, pagingRequest)\n    \n    print(f'Status Code: {response.statusCode}')\n    print(f'Page Size: {response.data.pageSize}')\n    print(f'Page Number: {response.data.pageNumber}')\n    print(f'Total Pages: {response.data.totalPages}')\n    print(f'Total Records: {response.data.totalRecords}')\n\n    for field in response.data.fields:\n        PrintField(field)\n```\n\n### Files\n\n#### Get File Info By Id\n\nReturns the Onspring file's metadata.\n\n```python\nresponse = client.GetFileInfoById(recordId=1, fieldId=6990, fileId=274)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Name: {response.data.fileInfo.name}')\nprint(f'Type: {response.data.fileInfo.type}')\nprint(f'Owner: {response.data.fileInfo.owner}')\nprint(f'Content Type: {response.data.fileInfo.contentType}')\nprint(f'Created Date: {response.data.fileInfo.createdDate}')\nprint(f'Modified Date: {response.data.fileInfo.modifiedDate}')\nprint(f'File Href: {response.data.fileInfo.fileHref}')\n```\n\n#### Get File By Id\n\nReturns the file itself.\n\n```python\nresponse = client.GetFileById(recordId=1, fieldId=6990, fileId=274)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Name: {response.data.file.name}')\nprint(f'Content Type: {response.data.file.contentType}')\nprint(f'Content Length: {response.data.file.contentLength}')\n\nfilePath = f'C:\\\\Users\\\\sfree\\\\Documents\\\\Temp\\\\{response.data.file.name}'\n\nwith open(filePath, \"wb\") as file:\n    \n    file.write(response.data.file.content)\n\nprint(f'File Location: {filePath}')\n```\n\n#### Save File\n\n```python\nfrom OnspringApiSdk.Models import SaveFileRequest\nimport os\nimport mimetypes\n\nfilePath = 'C:\\\\Users\\\\sfree\\\\Documents\\\\Temp\\\\Test Attachment.txt'\nfileName = os.path.basename(filePath)\ncontentType = mimetypes.guess_type(filePath)\n\nrequest = SaveFileRequest(\n    recordId=60, \n    fieldId=6989, \n    fileName,\n    filePath, \n    contentType, \n    notes='Initial revision',\n    modifiedDate=datetime.now())\n\nresponse = client.SaveFile(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'File Id: {response.data.id}')\n```\n\n#### Delete File By Id\n\n```python\nresponse = client.DeleteFileById(recordId=60, fieldId=6989, fileId=231)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Message: {response.message}')\n```\n\n### Lists\n\n#### Add Or Update List Value\n\nTo add a list value don't provide an id value.\n\n```python\nfrom OnspringApiSdk.Models import ListItemRequest\n\nrequest = ListItemRequest(\n        listId=906, \n        name='Not Started', \n        id='', \n        numericValue=0, \n        color='#ffffff')\n\nresponse = client.AddOrUpdateListItem(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Id: {response.data.id}')\n```\n\nTo update a list value provide an id value.\n\n```python\nfrom OnspringApiSdk.Models import ListItemRequest\n\nrequest = ListItemRequest(\n        listId=906, \n        name='Pending', \n        id='4118d53a-9121-4345-8682-07f23d606daa', \n        numericValue=0, \n        color='#ffffff')\n\nresponse = client.AddOrUpdateListItem(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Id: {response.data.id}')\n```\n\n#### Delete List Value\n\n```python\nresponse = client.DeleteListItem(listId=906, itemId='36f94d8c-2b9d-465e-9ad1-ede04109efc9')\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Message: {response.message}')\n```\n\n### Records\n\n#### Get Records By App Id\n\nReturns a paged colletion of records that can be paged through. By default the page size is 50 and page number is 1.\n\n```python\nrequest = GetRecordsByAppRequest(appId=195)\n\nresponse = client.GetRecordsByAppId(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Size: {response.data.pageSize}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Total Pages: {response.data.totalPages}')\nprint(f'Total Records: {response.data.totalRecords}')\n\nfor record in response.data.records:\n    print(f'AppId: {record.appId}')\n    print(f'RecordId: {record.recordId}')\n\n    for field in record.fields:\n        print(f'Type: {field.type}')\n        print(f'FieldId: {field.fieldId}')\n        print(f'Value: {field.GetResultValueString()}')\n```\n\nYou can set your own page size and page number (max is 1,000) as well. In addition to specifying what field values to return and in what format (Raw vs. Formatted) to return them.\n\n```python\nfrom OnspringApiSdk.Models import PagingRequest, GetRecordsByAppRequest\nfrom OnspringApiSdk.Enums import DataFormat \n\npagingRequest = PagingRequest(1,10)\n\nrequest = GetRecordsByAppRequest(\n    appId=195,\n    fieldIds=[9686],\n    dataFormat=DataFormat.Formatted.name,\n    pagingRequest)\n\nresponse = client.GetRecordsByAppId(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Size: {response.data.pageSize}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Total Pages: {response.data.totalPages}')\nprint(f'Total Records: {response.data.totalRecords}')\n\nfor record in response.data.records:\n    print(f'AppId: {record.appId}')\n    print(f'RecordId: {record.recordId}')\n\n    for field in record.fields:\n        print(f'Type: {field.type}')\n        print(f'FieldId: {field.fieldId}')\n        print(f'Value: {field.GetResultValueString()}')\n```\n\n#### Get Record By Id\n\nReturns an onspring record based on the provided app and record ids.\n\n```python\nfrom OnspringApiSdk.Models import GetRecordByIdRequest\n\nrequest = GetRecordByIdRequest(appId=195, recordId=60)\n\nresponse = client.GetRecordById(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'AppId: {response.data.appId}')\nprint(f'RecordId: {response.data.recordId}')\n\nfor field in response.data.fields:\n    print(f'Type: {field.type}')\n    print(f'FieldId: {field.fieldId}')\n    print(f'Value: {field.GetResultValueString()}')\n```\n\nYou can also specify what field values to return and in what format (Raw vs. Formatted) to return them.\n\n```python\nfrom OnspringApiSdk.Models import GetRecordByIdRequest\nfrom OnspringApiSdk.Enums import DataFormat\n\nrequest = GetRecordByIdRequest(\n    appId=195, \n    recordId=60,\n    fieldIds=[9686],\n    dataFormat=DataFormat.Formatted.name)\n\nresponse = client.GetRecordById(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'AppId: {response.data.appId}')\nprint(f'RecordId: {response.data.recordId}')\n\nfor field in response.data.fields:\n    print(f'Type: {field.type}')\n    print(f'FieldId: {field.fieldId}')\n    print(f'Value: {field.GetResultValueString()}')\n```\n\n#### Delete Record By Id\n\n```python\nresponse = client.DeleteRecordById(appId=195, recordId=60)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Message: {response.message}')\n```\n\n#### Get Records By Ids\n\nReturns a collection of Onspring records based on the provided appId and recordIds.\n\n```python\nfrom OnspringApiSdk.Models import GetBatchRecordsRequest\n\nrequest = GetBatchRecordsRequest(appId=195, recordIds=[1, 2, 3])\n\nresponse = client.GetRecordsByIds(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Count: {response.data.count}')\n\nfor record in response.data.records:\n    print(f'AppId: {record.appId}')\n    print(f'RecordId: {record.recordId}')\n\n    for field in record.fields:\n        print(f'Type: {field.type}')\n        print(f'FieldId: {field.fieldId}')\n        print(f'Value: {field.GetResultValueString()}')\n```\n\nYou can also specify what field values to return and in what format (Raw vs. Formatted) to return them.\n\n```python\nfrom OnspringApiSdk.Models import GetBatchRecordsRequest\nfrom OnspringApiSdk.Enums import DataFormat\n\nrequest = GetBatchRecordsRequest(\n    appId=195, \n    recordIds=[1, 2, 3],\n    fieldIds=[9686],\n    dataFormat=DataFormat.Formatted.name)\n\nresponse = client.GetRecordsByIds(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Count: {response.data.count}')\n\nfor record in response.data.records:\n    print(f'AppId: {record.appId}')\n    print(f'RecordId: {record.recordId}')\n\n    for field in record.fields:\n        print(f'Type: {field.type}')\n        print(f'FieldId: {field.fieldId}')\n        print(f'Value: {field.GetResultValueString()}')\n```\n\n#### Query Records\n\nReturns a paged colletion of records based on a criteria that can be paged through. By default the page size is 50 and page number is 1.\n\n```python\nfrom OnspringApiSdk.Models import QueryRecordsRequest\n\nfieldId = 6983\noperator = 'eq'\nvalue = '\\'Test Task 5\\''\n\nrequest = QueryRecordsRequest(appId=195, filter=f'{fieldId} {operator} {value}')\n\nresponse = client.QueryRecords(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Size: {response.data.pageSize}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Total Pages: {response.data.totalPages}')\nprint(f'Total Records: {response.data.totalRecords}')\n\nfor record in response.data.records:\n    print(f'AppId: {record.appId}')\n    print(f'RecordId: {record.recordId}')\n\n    for field in record.fields:\n        print(f'Type: {field.type}')\n        print(f'FieldId: {field.fieldId}')\n        print(f'Value: {field.GetResultValueString()}')\n```\n\nYou can set your own page size and page number (max is 1,000) as well. In addition to specifying what field values to return and in what format (Raw vs. Formatted) to return them.\n\n```python\nfrom OnspringApiSdk.Models import PagingRequest, QueryRecordsRequest\nfrom OnspringApiSdk.Enums import DataFormat\n\npagingRequest = PagingRequest(1, 10)\nfieldId = 6983\noperator = 'eq'\nvalue = '\\'Test Task 5\\''\n\nrequest = QueryRecordsRequest(\n    appId=195, \n    filter=f'{fieldId} {operator} {value}',\n    fieldIds=[9686],\n    dataFormat=DataFormat.Formatted.name,\n    pagingRequest)\n\nresponse = client.QueryRecords(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Size: {response.data.pageSize}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Total Pages: {response.data.totalPages}')\nprint(f'Total Records: {response.data.totalRecords}')\n\nfor record in response.data.records:\n    print(f'AppId: {record.appId}')\n    print(f'RecordId: {record.recordId}')\n\n    for field in record.fields:\n        print(f'Type: {field.type}')\n        print(f'FieldId: {field.fieldId}')\n        print(f'Value: {field.GetResultValueString()}')\n```\n\nFor further details on constructing the `filter` parameter please refer to the [documentation](https://software.onspring.com/hubfs/Training/Admin%20Guide%20-%20v2%20API.pdf) for v2 of the Onspring API.\n\n#### Add or Update A Record\n\nYou can add a record by not providing a record id value. If successful will return the id of the added record.\n\n```python\nfrom OnspringApiSdk.Models import StringFieldValue, GuidFieldValue, DateFieldValue, IntegerListValue, Record\n\nfields = []\n\nstatus = uuid.UUID('4118d53a-9121-4345-8682-07f23d606daa')\ndueDate = datetime.utcnow()\n\nfields.append(StringFieldValue(6983, 'Test Task via API'))\nfields.append(StringFieldValue(6984, 'This is a task.'))\nfields.append(GuidFieldValue(6986, status))\nfields.append(DateFieldValue(6985, dueDate))\nfields.append(IntegerListValue(6987, [4]))\n\nrecord = Record(\n    appId=195, \n    fields)\n\nresponse = client.AddOrUpdateRecord(record)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Id: {response.data.id}')\nfor warning in response.data.warnings:\n    print(f'Warning: {warning}')\n```\n\nYou can update a record by providing its id. If successful will return the id of record updated.\n\n```python\nfrom OnspringApiSdk.Models import StringFieldValue, GuidFieldValue, DateFieldValue, IntegerListValue, Record\n\nfields = []\n\nstatus = uuid.UUID('1c1c5f7e-cd03-4b70-9790-0f83b24b5863')\ndueDate = datetime.utcnow()\n\nfields.append(StringFieldValue(6983, 'Test Task via API'))\nfields.append(StringFieldValue(6984, 'This is a task.'))\nfields.append(GuidFieldValue(6986, status))\nfields.append(DateFieldValue(6985, dueDate))\nfields.append(IntegerListValue(6987, [4]))\n\nrecord = Record(\n    appId=195, \n    fields, \n    recordId=103)\n\nresponse = client.AddOrUpdateRecord(record)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Id: {response.data.id}')\nfor warning in response.data.warnings:\n    print(f'Warning: {warning}')\n```\n\n#### Delete Records By Ids\n\n```python\nfrom OnspringApiSdk.Models import DeleteBatchRecordsRequest\n\nrequest = DeleteBatchRecordsRequest(appId=195, recordIds=[1, 2, 3])\n\nresponse = client.DeleteRecordsByIds(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Message: {response.message}')\n```\n\n### Reports\n\n#### Get Report By Id\n\nReturns the report for the provided id.\n\n```python\nfrom OnspringApiSdk.Models import GetReportByIdRequest\n\nrequest = GetReportByIdRequest(reportId=53)\n\nresponse = client.GetReportById(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint('Columns:')\nprint(f'{\", \".join(response.data.columns)}')\nprint('Rows:')\nfor row in response.data.rows:\n    print(f'Record Id {row.recordId}: {\", \".join([str(cell) for cell in row.cells])}')\n```\n\nYou can also specify the format of the data in the report as well as whether you are requesting the report's data or its chart data.\n\n```python\nfrom OnspringApiSdk.Models import GetReportByIdRequest\nfrom OnspringApiSdk.Enums import DataFormat, ReportDataType\n\nrequest = GetReportByIdRequest(\n    reportId=53,\n    apiDataFormat=DataFormat.Formatted.name,\n    dataFormat=ReportDataType.ChartData.name)\n\nresponse = client.GetReportById(request)\n\nprint(f'Status Code: {response.statusCode}')\nprint('Columns:')\nprint(f'{\", \".join(response.data.columns)}')\nprint('Rows:')\nfor row in response.data.rows:\n    print(f'Record Id {row.recordId}: {\", \".join([str(cell) for cell in row.cells])}')\n```\n\n#### Get Reports By App Id\n\nReturns a paged collection of reports that can be paged through. By default the page size is 50 and page number is 1.\n\n```python\nresponse = client.GetReportsByAppId(appId=195)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'App Id: {appId}')\nprint('Reports:')\n\nfor report in response.data.reports:\n    print(f' Id: {report.id}')\n    print(f' Name: {report.name}')\n    print(f' Description: {report.description}')\n```\n\nYou can set your own page size and page number (max is 1,000) as well.\n\n```python\nfrom OnspringApiSdk.Models import PagingRequest\n\npagingRequest = PagingRequest(1,10)\n\nresponse = client.GetReportsByAppId(appId=195, pagingRequest)\n\nprint(f'Status Code: {response.statusCode}')\nprint(f'Page Number: {response.data.pageNumber}')\nprint(f'Page Number: {response.data.pageSize}')\nprint(f'Page Number: {response.data.totalPages}')\nprint(f'Page Number: {response.data.totalRecords}')\nprint(f'App Id: {appId}')\nprint('Reports:')\n\nfor report in response.data.reports:\n    print(f' Id: {report.id}')\n    print(f' Name: {report.name}')\n    print(f' Description: {report.description}')\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/StevanFreeborn/onspring-api-sdk-python",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "OnspringApiSdk",
            "package_url": "https://pypi.org/project/OnspringApiSdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/OnspringApiSdk/",
            "project_urls": {
                "Bug Tracker": "https://github.com/StevanFreeborn/onspring-api-sdk-python/issues",
                "Homepage": "https://github.com/StevanFreeborn/onspring-api-sdk-python"
            },
            "release_url": "https://pypi.org/project/OnspringApiSdk/1.0.1/",
            "requires_dist": [
                "Requests"
            ],
            "requires_python": ">=3.6",
            "summary": "A package for interacting with version 2 of the Onspring API.",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13712208,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6ba39fda86dfd6f713921c2ee38a323d",
                    "sha256": "800651282420ee750f3ed41bafc8be5c0852f6f9df7bec3ff97d51f1f7826d86"
                },
                "downloads": -1,
                "filename": "OnspringApiSdk-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6ba39fda86dfd6f713921c2ee38a323d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 19700,
                "upload_time": "2022-05-04T16:57:24",
                "upload_time_iso_8601": "2022-05-04T16:57:24.300390Z",
                "url": "https://files.pythonhosted.org/packages/30/d3/e91c1d2b8775d6f5cde31a2575a9d4ab28d4f168a085b776bc2beed49f42/OnspringApiSdk-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "01cf8346f4f1b4c86a6ea7ce32fc2cde",
                    "sha256": "5115d0be709c16d7cf1620448b28e572d890de9d04d905d47f93b737497b61b4"
                },
                "downloads": -1,
                "filename": "OnspringApiSdk-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "01cf8346f4f1b4c86a6ea7ce32fc2cde",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 23304,
                "upload_time": "2022-05-04T16:57:27",
                "upload_time_iso_8601": "2022-05-04T16:57:27.143452Z",
                "url": "https://files.pythonhosted.org/packages/81/a9/5bf571f48ed4c2606b745047a44b4bbd20393ca18f3d62a88d2a150642f1/OnspringApiSdk-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}