{
    "0.0.1": {
        "info": {
            "author": "Michael G. Taylor et al.",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Science/Research",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Chemistry"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "BSD 3-Clause License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "architector",
            "package_url": "https://pypi.org/project/architector/",
            "platform": null,
            "project_url": "https://pypi.org/project/architector/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/architector/0.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "The architector python package - for 3D inorganometallic complex design.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15948569,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "082d1a93b58fdd7461235a71dd016fb2",
                    "sha256": "d4aa7e72a923d5d921c4b7ff634f42c2aa6b0b032f9d81c25bf152acb1801e42"
                },
                "downloads": -1,
                "filename": "architector-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "082d1a93b58fdd7461235a71dd016fb2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 101630,
                "upload_time": "2022-11-30T19:56:58",
                "upload_time_iso_8601": "2022-11-30T19:56:58.268179Z",
                "url": "https://files.pythonhosted.org/packages/55/71/1f5578b7331eebefea7202c90ed27321d55c204029388d6e9da6a59c952e/architector-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Michael G. Taylor et al.",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Science/Research",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Chemistry"
            ],
            "description": "# Architector\n\nArchitector is a 3D chemical structure generation software package designed to take minimal 2D information about ligands and metal centers and generates chemically sensible 3D conformers and stereochemistry of the organometallic compounds.\nIt is capable of high-throughput in-silico construction of s-, p-, d-, and f-block organometallic complexes. Architector represents a transformative step towards cross-periodic table computational design of metal complex chemistry.\n\n## Installation\n\nConda installation recommended.\n\n* In root directory of architector run:\n\n```bash\nconda env create -f environment.yml\nconda activate architector\npip install -e .\n```\n\nVerified on latest Ubuntu Linux , MAC OS X, and on Win 10 powershell computer cluster as of 7/14/2022.\n\n## Useful Tools/Examples:\n\n1. See tutorials for basic introduction to capabilties and code examples: `documentation/tutorials/`\n2. Reference for core and ligand geometry labels see: `documentation/view_default_core_ligand_types.ipynb`\n3. Utility for aiding in determining ligand coordination sites see: `utils/ligand_viewing_coordinating_atom_selecting.ipynb`\n\n* Note that ligands used in (3) can even be drawn in [Avogadro](https://avogadro.cc/) and copied as SMILES strings into this analysis.\n* If other analyses are used to determine the coordinating atom indices we can't guarantee the generated structure will match what was input. If generating complexes with new ligands we HIGHLY recommend using the utility in (3)\n\n## XTB (backend) Potentially Useful References:\n* [Available Solvents](https://xtb-docs.readthedocs.io/en/latest/gbsa.html)\n* [Available Methods](https://xtb-python.readthedocs.io/en/latest/general-api.html)\n* [ASE Calculator](https://xtb-python.readthedocs.io/en/latest/ase-calculator.html)\n* [XTB Documentation](https://xtb-docs.readthedocs.io/en/latest/contents.html)\n\n## Basic Use of complex construction functionality:\n\n```python\nfrom architector import build_complex\nout = build_complex(inputDict)\n```\n\n## Input dictionary structure and recommendations:\n```python\ninputDict = {\n################ Core (metal) structure and optional definitions #####################\n# Requires imput for what metal and what type of coordination environments to sample #\n\n\"core\": {\n    \"metal\":'Fe', \n    # \"coordList\" OR \"coreType\" OR \"coreCN\" (Suggested!)\n    'coordList': None, \n    # Handles user-defined list of core coordination vectors e.g.\n    # [\n    #     [2., 0.0, 0.0],\n    #     [0.0, 2., 0.0],\n    #     [0.0, 0.0, 2.],\n    #     [-2., 0.0, 0.0],\n    #     [0.0, -2., 0.0],\n    #     [0.0, 0.0, -2.] \n    # ] -> gets defined as 'user_geometry'\n    \"coreType\": None, \n    # e.g. 'octahedral' ....\n    # or list of coreTypes - e.g. ['octahedral','trigonal_prismatic','tetrahedral']\n    \"coreCN\": 6 (SUGGETED!)\n    # Core coordination number (CN) (int)\n    # Will calculate all possible geometries with the given coreCN \n    # Tends to sample the metal space better than other options.\n    # OR list of CNs [4,6] -> Will calculate all possible geometries with these CNs.\n    }, \n############## Ligands  list and optional definitions ####################\n# Requires either smiles and metal-coordinating site definitions or default ligand names  #\n\n\"ligands\": [\n    {\"smiles\":\"n1ccccc1-c2ccccn2\",\n    # Smiles required. Can also be generated and drawn using avogadro molecular editor.\n    \"coordList\":[0, 11], \n    # Coordination sites corresponding to the SMILES atom connecting to the metal\n    # Can be determined/assigned manually using utils/ligand_viewing_coordinating_atom_selecting.ipynb\n    # Alternatively [[0,1],[11,2]], In this case it forces it to be map to the user-defined core coordinating sites.\n    'ligType':'bi_cis'\n    # Optional, but desirable - if not-specified will will assign the best ligType guess using a brute force assignment that can be slow. \n    }, \n    ],\n    # NOTE - multiple ligands should be added to fill out structure if desired.\n\n############## Additional Parameters for the structural generation  ####################\n# Here, metal oxdiation state and spin state, methods for evaluating complexes during construction, #\n# And many other options are defined, but are often handled automatically by Architector in the background #\n\n\"parameters\" = {\n    ######## Electronic parameters #########\n    \"metal_ox\": None, # Oxidation State\n    \"metal_spin\": None, # Spin State\n        \n    # Method parameters.\n    \"solvent\": 'none', # Add any named XTB solvent! (will not do anything if \"UFF\" used)\n    \"full_spin\": None, # Assign spin to the full complex (overrides metal_spin)\n    \"full_charge\": None, # Assign charge to the complex (overrides ligand charges and metal_ox)!\n    \"full_method\":\"GFN2-xTB\", # Which  method to use for final cleaning/evaulating conformers. \n    \"assemble_method\":\"GFN2-xTB\", # Which method to use for assembling conformers. \n    # For very large speedup - use \"GFN-FF\", though this is much less stable (especially for Lanthanides)\n    # Additionaly, it is possible to use \"UFF\" - which is extremely fast. Though it is recommend to perform an XTB-level optimization\n    # for the \"full_method\", or turn \"relaxation\" off.\n    \"skip_duplicate_tests\":False, # Skip the duplicate tests (return all generated/relaxed configurations)\n\n    # Covalent radii and vdw radii of the metal if nonstandard radii requested.\n    \"vdwrad_metal\":vdwrad_metal,\n    \"covrad_metal\":covrad_metal,\n\n    ####### Conformer parameters and information stored ########\n    \"n_conformers\":1, # Number of metal-core symmetries at each core to save / relax\n    \"return_only_1\":False, # Only return single relaxed conformer (do not test multiple conformations)\n    \"n_symmetries\":10, # Total metal-center symmetrys to build, NSymmetries should be >= n_conformers\n    \"relax\": True, # Perform final geomtetry relaxation of assembled complexes\n    \"save_init_geos\": False, # Save initial geometries before relaxations.\n    \"crest_sampling\":False, # Perform CREST sampling on lowest-energy conformer before returning.\n    \"return_timings\":True, # Return all intermediate and final timings.\n    \"return_full_complex_class\":False, # Return the complex class containing all ligand geometry and core information.\n    \"uid\":u_id, # Unique ID (generated by default, but can be assigned)\n\n    # Dump all possible intermediate xtb calculations to separate ASE database\n    \"dump_ase_atoms\": False, # or True\n    \"ase_atoms_db_name\": 'architector_{}_ase_db_'.format(newinpDict['core']['metal']) + u_id + '.json', # Possibly to name the databse filename\n    \"dump_intermediate_mol2s\": False, # Dump intermediate mol2 (relaxed) files when testing multiple symmetries. Backup in case calc fails/crashes.\n    \"temp_prefix\":\"/tmp/\", # Default here - for MPI running on HPC suggested /scratch/$USER/\n\n    ####### Ligand parameters #########\n    # Ligand to finish filling out coordination environment if underspecified.\n    \"fill_ligand\": \"water\", \n    # Secondary fill ligand will be a monodentate ligand to fill out coordination environment\n    # in case the fill_ligand and specified ligands list cannot fully map to the coordination environment.\n    \"secondary_fill_ligand\": \"water\",\n    # or integer index in reference to the ligand list!!\n    \"force_trans_oxos\":False, # Force trans configurations for oxos (Useful for actinyls)\n    \"lig_assignment\":'bruteforce', # or \"similarity\" - How to automatically assign ligand types.\n\n    ######### Sanity check parameters ########\n    \"assemble_sanity_checks\":True, # Turn on/off assembly sanity checks.\n    \"assemble_graph_sanity_cutoff\":1.8, \n    # Graph Sanity cutoff for imposed molecular graph represents the maximum elongation of bonds\n    # rcov1*full_graph_sanity_cutoff is the maximum value for the bond lengths.\n    \"assemble_smallest_dist_cutoff\":0.3,\n    # Smallest dist cutoff screens if any bonds are less than smallest_dist_cutoff*sum of cov radii\n    # Will not be evaluated by XTB if they are lower.\n    \"assemble_min_dist_cutoff\":4,\n    # Smallest min dist cutoff screens if any atoms are at minimum min_dist_cutoff*sum of cov radii\n    # away from ANY other atom (indicating blown-up structure) \n    # - will not be evaluated by XTB if they are lower.\n    \"full_sanity_checks\":True, # Turn on/off final sanity checks.\n    \"full_graph_sanity_cutoff\":1.7,\n    # full_graph_sanity_cutoff can be tightened to weed out distorted geometries (e.g. 1.5 for non-group1-metals) \n    \"full_smallest_dist_cutoff\":0.55,\n    \"full_min_dist_cutoff\":3.5,\n    } \n}\n```\n\n## Output dictionary structure and recommendations:\n```python\nout = {\n    'core_geometry_i_nunpairedes_X_charge_Y': \n    # Key labels indicates metal center geometry, total unpaired electrons (X, spin), \n    # and charge (Y) of the complex\n    {'ase_atoms':ase.atoms.Atoms, # Structure (with attached used ASE calculator!) for the output complex.\n    'total_charge': int, # Same as (Y)\n    'xtb_n_unpaired_electrons' : int, # Unpaired electrons used for xTB (different for f-block elements!)\n    'calc_n_unpaired_electrons': int, # Same as (X),\n    'metal_ox': int, # Metal oxidation state assigned to the complex\n    'init_energy': float, # Initial (unrelaxed) xTB energy (eV)\n    'energy': float, # Relaxed xTB energy (eV)\n    'mol2string': str, # Final relaxed structure in TRIPOS mol2 format.\n    'init_mol2string': str, # Initial unrelaxed structure in TRIPOS mol2 format.\n    'energy_sorted_index': int, # Index of the complex from pseudo-energy ranking,\n    'inputDict': dict, # Full input dictionary copy (including assigned parameters) for replication!\n    ..... Timing information ....},\n    ** More structures **\n}\n```\n\n* Note that output dictionary is an OrderDict sorted by energy (first entry is the lowest in energy.)\n\nWithin the jupyter notebook framework it is quite easy to visualize all of the generated structures directly from the dictionary:\n```python\nfrom architector import view_structures\n\nview_structures(out)\n```\n\nWith the following example line it is quite easy to export to xyz for use in any other electronic structure code:\n```python\nout['core_geometry_i_nunpairedes_X_charge_Y']['ase_atoms'].write('core_geometry_i_nunpairedes_X_charge_Y.xyz')\n```\n\nAlternatively, a file format converter is included with Architector which can read the formatted mol2 filetypes,\nwhich can be quite useful for maintaining the defined molecular graph and bond orders:\n\n```python\nfrom architector import convert_io_molecule\n\nmol = convert_io_molecule(out['core_geometry_i_nunpairedes_X_charge_Y']['mol2string'])\nprint(mol.uhf) # n_unpaired electrons for electronic structure evaluation\nprint(mol.charge) # total charge\nmol.write_xyz('core_geometry_i_nunpairedes_X_charge_Y.xyz')\n```\n\nIncluded in the Architector Molecule python object (mol, above) is also the molecular graph (mol.graph) and SYBYL type bond orders (mol.BO_dict),\nxTB unpaired electrons (mol.xtb_uhf), and a full ASE Atoms object (mol.ase_atoms) with the assigned charge (mol.charge) and magnetic moments (mol.uhf)\nfrom the output mol2string.\n\n## Authors:\n\n* Michael G. Taylor\n* Daniel J. Burrill\n* Jan Janssen \n* Danny Perez\n* Enrique R. Batista\n* Ping Yang\n\n## Licensing and Copyright: \n\nSee LICENSE.txt for licensing information. Architector is licensed under the BSD-3 license.\nThe Los Alamos National Laboratory C Number for Architector is C22085.\n\n\u00a9 2022. Triad National Security, LLC. All rights reserved.\nThis program was produced under U.S. Government contract 89233218CNA000001 for Los Alamos\nNational Laboratory (LANL), which is operated by Triad National Security, LLC for the U.S.\nDepartment of Energy/National Nuclear Security Administration. All rights in the program are\nreserved by Triad National Security, LLC, and the U.S. Department of Energy/National Nuclear\nSecurity Administration. The Government is granted for itself and others acting on its behalf a\nnonexclusive, paid-up, irrevocable worldwide license in this material to reproduce, prepare\nderivative works, distribute copies to the public, perform publicly and display publicly, and to permit\nothers to do so.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "BSD 3-Clause License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "architector",
            "package_url": "https://pypi.org/project/architector/",
            "platform": null,
            "project_url": "https://pypi.org/project/architector/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/architector/0.0.2/",
            "requires_dist": [
                "ase",
                "numpy",
                "py3Dmol",
                "pynauty",
                "scipy",
                "pandas",
                "xtb-python"
            ],
            "requires_python": "",
            "summary": "The architector python package - for 3D inorganometallic complex design.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15948569,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "52354cddfc965279c3a495611805467f",
                    "sha256": "aa038852a978b864657a9082c6e0981431d8a6be0bb742754e86ee9ea31c60a9"
                },
                "downloads": -1,
                "filename": "architector-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "52354cddfc965279c3a495611805467f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 109502,
                "upload_time": "2022-11-30T23:46:18",
                "upload_time_iso_8601": "2022-11-30T23:46:18.802504Z",
                "url": "https://files.pythonhosted.org/packages/14/f4/60892085710555850172153393f1bc7898a07ffebf169a00eb863cfae637/architector-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6107b03169b34fa8799de4302d0750bb",
                    "sha256": "aa92f4a44aa9aeaae16334fe6d501d5b8fead9cae24eb31020b346491144740c"
                },
                "downloads": -1,
                "filename": "architector-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "6107b03169b34fa8799de4302d0750bb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 117533,
                "upload_time": "2022-11-30T23:46:20",
                "upload_time_iso_8601": "2022-11-30T23:46:20.405096Z",
                "url": "https://files.pythonhosted.org/packages/5e/57/dd53c09a6621ef03ba154aa87bb37484c268452fed744830e6b55fa48d4e/architector-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}