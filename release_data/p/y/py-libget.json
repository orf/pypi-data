{
    "0.0.0": {
        "info": {
            "author": "",
            "author_email": "Lyfe <Lyfe@brewtools.dev>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.11"
            ],
            "description": "# py_libget 0.0.0<a name=\"mark0\"></a>\r\n\r\n- [About](#mark1)\r\n- [Requirements](#mark2)\r\n- [Objects](#mark3)\r\n\t- [repository](#mark4)\r\n\t- [package_manager](#mark5)\r\n\t- [parser](#mark6)\r\n\t- [webhandler](#mark7)\r\n- [Changelog](#mark8)\r\n\t- [0.0.0](#mark9)\r\n\r\n---\r\n\r\n# About<a name=\"mark1\"></a>[^](#mark0)\r\n\r\nModule for handling libget packages.\r\n\r\n# Requirements<a name=\"mark2\"></a>[^](#mark0)\r\n\r\n['py_simple_ttk']\r\n\r\n# Objects<a name=\"mark3\"></a>[^](#mark0)\r\n\r\n### repository<a name=\"mark4\"></a>[^](#mark3)\r\n**An object for interaction with all parts of a libget repository.**\r\n\r\n```py\r\nclass repository(package_manager, parser, webhandler):\r\n\tdef __init__(self, name: str, domain: str, defer_load: bool = True, force_cached: bool = False):\r\n\t\t...\r\n\tdef check_if_get_init(self) -> bool:\r\n\t\t\"\"\"Check if the libget packages folder has been inited at target location.         `Returns True if libget dir exists.\"\"\"\r\n\tdef clean_version(self, ver: str, name: str) -> str:\r\n\t\t\"\"\"Clean a version. `Returns a String`\"\"\"\r\n\tdef clear(self) -> dict:\r\n\t\t\"\"\"Alias for parser.init `Returns a Dict mapping package names as Strings to package entries as Dicts`\"\"\"\r\n\tdef download(self, url: str, file: str) -> str:\r\n\t\t\"\"\"Downloads a file at a given url to a given location.\r\n        `Returns the file name as a String`\"\"\"\r\n\tdef edit_info(self, name: str, key: str, value) -> None:\r\n\t\t\"\"\"Edit a value in an installed package's info values. `Returns None`\"\"\"\r\n\tdef get_cached_json(self, name: str):\r\n\t\t...\r\n\tdef get_icon(self, name: str, force: bool = False) -> str:\r\n\t\t\"\"\"Downloads icon for a given package if needed.         The force keyword argument forces a redownload of the file.\r\n        `Returns the icon file's path as a String`\"\"\"\r\n\tdef get_json(self, name: str, url: str):\r\n\t\t...\r\n\tdef get_package(self, name: str) -> str:\r\n\t\t\"\"\"Downloads the current zip for a given package.         `Returns the downloaded file's path as a String`\"\"\"\r\n\tdef get_package_dict(self, name: str) -> dict:\r\n\t\t\"\"\"Get entry for a given package name. `Returns a Dict, empty on failure.`\"\"\"\r\n\tdef get_package_entry(self, name: str) -> dict:\r\n\t\t\"\"\"Get the contents of a package's info file. `Returns a Dict, empty on failure.`\"\"\"\r\n\tdef get_package_manifest(self, name: str) -> list:\r\n\t\t\"\"\"Returns a package's manifest. `Returns a List of the real file paths as Strings`\"\"\"\r\n\tdef get_package_value(self, name: str, key: str) -> str | None:\r\n\t\t\"\"\"Get a package's json file value. `Returns the value (usually a String) or None on failure.\"\"\"\r\n\tdef get_package_version(self, name: str) -> str:\r\n\t\t\"\"\"Get the currently installed version of a package. `Returns a String`\"\"\"\r\n\tdef get_packages(self) -> list:\r\n\t\t\"\"\"Get a list of currently installed packages. `Returns a List`\"\"\"\r\n\tdef get_screenshot(self, name: str, force: bool = False) -> str:\r\n\t\t\"\"\"Downloads screenshot for a given package if needed.         The force keyword argument forces a redownload of the file.\r\n        `Returns the screenshot file's path as a String`\"\"\"\r\n\tdef init(self) -> None:\r\n\t\t\"\"\"Reinitialize parser. `Returns a Dict mapping package names as Strings to package entries as Dicts`\"\"\"\r\n\tdef init_get(self) -> None:\r\n\t\t\"\"\"Initializes the libget dir at the current install path. `Returns None.`\"\"\"\r\n\tdef install_package(self, package: dict, handler: Callable = None):\r\n\t\t\"\"\"Installs a libget package, supply a callable handler to take a tuple         containing a status and a message. A negative status is an error. Status is         in the form of an integer from 0 to 100 during normal install progression.\"\"\"\r\n\tdef load_cached_repo(self) -> list:\r\n\t\t\"\"\"Loads / reloads repo from cached file. `Returns the loaded repo as a List.`\"\"\"\r\n\tdef load_repo(self) -> str:\r\n\t\t\"\"\"Loads / reloads repo from file. `Returns the loaded repo as a List.`\"\"\"\r\n\tdef load_repo_file(self, repo_file: str) -> list:\r\n\t\t\"\"\"Loads appstore json. `Returns a List of Dicts`\"\"\"\r\n\tdef reload(self) -> list:\r\n\t\t\"\"\"Reloads the list of installed packages. `Returns a List of packages installed.`\"\"\"\r\n\tdef remove_store_entry(self, name: str):\r\n\t\t\"\"\"THIS DOES NOT REMOVE THE PACKAGE FILES         Removes a package entry by deleting the package         folder containing the manifest and info.json\"\"\"\r\n\tdef set_path(self, path: str) -> list:\r\n\t\t\"\"\"Set this to a root of an sd card if building an application or in a dir to         test. `Returns a List of packages installed at the given path.`\"\"\"\r\n\tdef uninstall_package(self, package: dict, handler: Callable = None):\r\n\t\t\"\"\"Uninstalls a libget package, supply a callable handler to take a tuple         containing a status and a message. A negative status is an error. Status is         in the form of an integer from 0 to 100 during normal install progression.\"\"\"\r\n```\r\n### package_manager<a name=\"mark5\"></a>[^](#mark3)\r\n**Object for managing package libget package installation**\r\n\r\n```py\r\nclass package_manager(object):\r\n\tdef __init__(self, webhandler, libget_dir: str = '.libget'):\r\n\t\t...\r\n\tdef check_if_get_init(self) -> bool:\r\n\t\t\"\"\"Check if the libget packages folder has been inited at target location.         `Returns True if libget dir exists.\"\"\"\r\n\tdef edit_info(self, name: str, key: str, value) -> None:\r\n\t\t\"\"\"Edit a value in an installed package's info values. `Returns None`\"\"\"\r\n\tdef get_package_entry(self, name: str) -> dict:\r\n\t\t\"\"\"Get the contents of a package's info file. `Returns a Dict, empty on failure.`\"\"\"\r\n\tdef get_package_manifest(self, name: str) -> list:\r\n\t\t\"\"\"Returns a package's manifest. `Returns a List of the real file paths as Strings`\"\"\"\r\n\tdef get_package_value(self, name: str, key: str) -> str | None:\r\n\t\t\"\"\"Get a package's json file value. `Returns the value (usually a String) or None on failure.\"\"\"\r\n\tdef get_package_version(self, name: str) -> str:\r\n\t\t\"\"\"Get the currently installed version of a package. `Returns a String`\"\"\"\r\n\tdef get_packages(self) -> list:\r\n\t\t\"\"\"Get a list of currently installed packages. `Returns a List`\"\"\"\r\n\tdef init_get(self) -> None:\r\n\t\t\"\"\"Initializes the libget dir at the current install path. `Returns None.`\"\"\"\r\n\tdef install_package(self, package: dict, handler: Callable = None):\r\n\t\t\"\"\"Installs a libget package, supply a callable handler to take a tuple         containing a status and a message. A negative status is an error. Status is         in the form of an integer from 0 to 100 during normal install progression.\"\"\"\r\n\tdef reload(self) -> list:\r\n\t\t\"\"\"Reloads the list of installed packages. `Returns a List of packages installed.`\"\"\"\r\n\tdef remove_store_entry(self, name: str):\r\n\t\t\"\"\"THIS DOES NOT REMOVE THE PACKAGE FILES         Removes a package entry by deleting the package         folder containing the manifest and info.json\"\"\"\r\n\tdef set_path(self, path: str) -> list:\r\n\t\t\"\"\"Set this to a root of an sd card if building an application or in a dir to         test. `Returns a List of packages installed at the given path.`\"\"\"\r\n\tdef uninstall_package(self, package: dict, handler: Callable = None):\r\n\t\t\"\"\"Uninstalls a libget package, supply a callable handler to take a tuple         containing a status and a message. A negative status is an error. Status is         in the form of an integer from 0 to 100 during normal install progression.\"\"\"\r\n```\r\n### parser<a name=\"mark6\"></a>[^](#mark3)\r\n**Object to hold and parse ligbet repo**\r\n\r\n```py\r\nclass parser(object):\r\n\tdef __init__(self, ):\r\n\t\t...\r\n\tdef clean_version(self, ver: str, name: str) -> str:\r\n\t\t\"\"\"Clean a version. `Returns a String`\"\"\"\r\n\tdef clear(self) -> dict:\r\n\t\t\"\"\"Alias for parser.init `Returns a Dict mapping package names as Strings to package entries as Dicts`\"\"\"\r\n\tdef get_package_dict(self, name: str) -> dict:\r\n\t\t\"\"\"Get entry for a given package name. `Returns a Dict, empty on failure.`\"\"\"\r\n\tdef init(self) -> None:\r\n\t\t\"\"\"Reinitialize parser. `Returns a Dict mapping package names as Strings to package entries as Dicts`\"\"\"\r\n\tdef load_repo_file(self, repo_file: str) -> list:\r\n\t\t\"\"\"Loads appstore json. `Returns a List of Dicts`\"\"\"\r\n```\r\n### webhandler<a name=\"mark7\"></a>[^](#mark3)\r\n**Object to handle libget icon, screenshot, and package downloads.**\r\n\r\n```py\r\nclass webhandler(object):\r\n\tdef __init__(self, domain: str):\r\n\t\t...\r\n\tdef download(self, url: str, file: str) -> str:\r\n\t\t\"\"\"Downloads a file at a given url to a given location.\r\n        `Returns the file name as a String`\"\"\"\r\n\tdef get_cached_json(self, name: str):\r\n\t\t...\r\n\tdef get_icon(self, name: str, force: bool = False) -> str:\r\n\t\t\"\"\"Downloads icon for a given package if needed.         The force keyword argument forces a redownload of the file.\r\n        `Returns the icon file's path as a String`\"\"\"\r\n\tdef get_json(self, name: str, url: str):\r\n\t\t...\r\n\tdef get_package(self, name: str) -> str:\r\n\t\t\"\"\"Downloads the current zip for a given package.         `Returns the downloaded file's path as a String`\"\"\"\r\n\tdef get_screenshot(self, name: str, force: bool = False) -> str:\r\n\t\t\"\"\"Downloads screenshot for a given package if needed.         The force keyword argument forces a redownload of the file.\r\n        `Returns the screenshot file's path as a String`\"\"\"\r\n```\r\n# Changelog<a name=\"mark8\"></a>[^](#mark0)\r\n\r\n## 0.0.0<a name=\"mark9\"></a>[^](#mark8)\r\n\r\nCreate Project\r\n\r\n\r\n\r\nGenerated with [py_simple_readme](https://github.com/AndrewSpangler/py_simple_readme)\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "LICENSE",
            "maintainer": "",
            "maintainer_email": "",
            "name": "py-libget",
            "package_url": "https://pypi.org/project/py-libget/",
            "platform": null,
            "project_url": "https://pypi.org/project/py-libget/",
            "project_urls": {
                "bug tracker": "https://GitHub.com/py_libget/issues",
                "documentation": "https://GitHub.com/py_libget/",
                "homepage": "https://GitHub.com/py_libget/",
                "repository": "https://GitHub.com/py_libget/"
            },
            "release_url": "https://pypi.org/project/py-libget/0.0.0/",
            "requires_dist": [
                "py-simple-ttk"
            ],
            "requires_python": ">=3.11",
            "summary": "Module for handling libget packages.",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15900445,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "27f2a562b164002d03fbe85a50f4b024",
                    "sha256": "cd16d5ea589912b6d08927db51e991acbb88c08ec961c8ef71b7ef5ec0479cee"
                },
                "downloads": -1,
                "filename": "py_libget-0.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "27f2a562b164002d03fbe85a50f4b024",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.11",
                "size": 22681,
                "upload_time": "2022-11-26T22:53:02",
                "upload_time_iso_8601": "2022-11-26T22:53:02.618753Z",
                "url": "https://files.pythonhosted.org/packages/2a/d0/d069f089cb60cc3158e3ec0b4b145265130b73c26358786bda67132f373c/py_libget-0.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "120e4ab61e13de65a80aadcd94651f02",
                    "sha256": "0c87ac7fccea3b10802b3add5dafe594d828ee2c0d0e56680390474d9f996e77"
                },
                "downloads": -1,
                "filename": "py_libget-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "120e4ab61e13de65a80aadcd94651f02",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.11",
                "size": 22203,
                "upload_time": "2022-11-26T22:53:04",
                "upload_time_iso_8601": "2022-11-26T22:53:04.947726Z",
                "url": "https://files.pythonhosted.org/packages/07/53/6112b7cb85498287cdb2d6e7a2459c9ab3b43ace4760d8dda719ed6615b5/py_libget-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}