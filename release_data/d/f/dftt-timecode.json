{
    "0.0.1": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "60881a8b12d23c4d509ece4be6f0d47f",
                    "sha256": "c77791fdf03f58d74dea150ccf72eddafe28161e5fbf1b3aaf7c5568499b41f7"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "60881a8b12d23c4d509ece4be6f0d47f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 17555,
                "upload_time": "2022-01-16T17:55:16",
                "upload_time_iso_8601": "2022-01-16T17:55:16.283141Z",
                "url": "https://files.pythonhosted.org/packages/5e/9e/e5aeb7f19dde813b3874728f20b1065d57d55738681a8db2c6399104a46b/dftt_timecode-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e99efe8d89290fbc79d928add9b8a81a",
                    "sha256": "3defd97e0d8098f791da552e50e300365ea82451f30efbddf0d0c57283209a09"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "e99efe8d89290fbc79d928add9b8a81a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17258,
                "upload_time": "2022-01-16T17:55:17",
                "upload_time_iso_8601": "2022-01-16T17:55:17.725136Z",
                "url": "https://files.pythonhosted.org/packages/a3/3b/ca16bb706ed4756d41993710525718bdcb0c70f364e3bf67efc61e5efb78/dftt_timecode-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "174fcb68a05073a4a06a76dc0be01c9d",
                    "sha256": "ef714066db76f1668dc66f1e518f315b67204e513b4f089c879de579b1454383"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "174fcb68a05073a4a06a76dc0be01c9d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 17584,
                "upload_time": "2022-01-16T18:00:40",
                "upload_time_iso_8601": "2022-01-16T18:00:40.153723Z",
                "url": "https://files.pythonhosted.org/packages/67/06/468399e4bee38e6f64ad20f996f1b6cfeada155d7614dae691dfdfdfa0d5/dftt_timecode-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b51ce68c19420d4d4a7ff707e42a4ed",
                    "sha256": "c01300763c7990f7edc7bed0bd42521c96fd6073779ff42d3b93f6450da2ebad"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "9b51ce68c19420d4d4a7ff707e42a4ed",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17258,
                "upload_time": "2022-01-16T18:00:41",
                "upload_time_iso_8601": "2022-01-16T18:00:41.862251Z",
                "url": "https://files.pythonhosted.org/packages/36/4b/86c1effbc06c304f1eecf3674cb35069e8b000d8b729f39b29075ef3b1dc/dftt_timecode-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "faec570c366400f291ec47111aac1555",
                    "sha256": "1219aa5bb2f9124097db89ed36a9fb1f39d1db70f4e5cc790a902f2d19cc3588"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "faec570c366400f291ec47111aac1555",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18067,
                "upload_time": "2022-01-16T18:08:04",
                "upload_time_iso_8601": "2022-01-16T18:08:04.176418Z",
                "url": "https://files.pythonhosted.org/packages/c9/6c/44332cbd65dcb057992a3498e88a383a142f784c7f0923a9856cc40067da/dftt_timecode-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4b48722a172964aaabe34693c1b76ece",
                    "sha256": "1bfe5da234620925ad10248167a6b1572a82fa1a7a40d2a080b480802e0e6742"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "4b48722a172964aaabe34693c1b76ece",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17238,
                "upload_time": "2022-01-16T18:08:05",
                "upload_time_iso_8601": "2022-01-16T18:08:05.945303Z",
                "url": "https://files.pythonhosted.org/packages/2e/a7/ef42e974a459d5d2cd0d93bae67a7f287deb1622e19fa460459cb29cbbed/dftt_timecode-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b802296d34f17b1ea7ce5701f059070e",
                    "sha256": "51913802290519d2275a6dd4b27ecb8c4c46597bb341e2a07bace31a8bbeb2f9"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b802296d34f17b1ea7ce5701f059070e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18081,
                "upload_time": "2022-01-16T18:17:52",
                "upload_time_iso_8601": "2022-01-16T18:17:52.613666Z",
                "url": "https://files.pythonhosted.org/packages/60/94/6c52f229c32b73abbb9f3881bda1ec978aafca756d19d5ceed5a490a365f/dftt_timecode-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b40daa6c770184ad8187c9c66e71d9b0",
                    "sha256": "abcfd61a7950d27812aec06c247941ab672910119ec6b5a8dd059a9c0ef2951c"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "b40daa6c770184ad8187c9c66e71d9b0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17255,
                "upload_time": "2022-01-16T18:17:54",
                "upload_time_iso_8601": "2022-01-16T18:17:54.351343Z",
                "url": "https://files.pythonhosted.org/packages/2d/3e/d47072aeb306c7725131251efa69689d06fdbae36e0f4af0b0e2d5015278/dftt_timecode-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.5": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2180dbd208496c5ebd0cc1e15e637957",
                    "sha256": "d8389233bc3cfb1e03fcb3bf25325a792ea99d69786f66b140844c2500fa68a0"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2180dbd208496c5ebd0cc1e15e637957",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18077,
                "upload_time": "2022-01-16T18:21:21",
                "upload_time_iso_8601": "2022-01-16T18:21:21.869665Z",
                "url": "https://files.pythonhosted.org/packages/f1/e0/fb7b1b485382c71c960af3ef007afb39b39fab7a8b2a83eb73d7417d9809/dftt_timecode-0.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c6a6edc245997fd90d3dc460a4a9b4a8",
                    "sha256": "004bbeca011b28ce5ada358fc072bb75eadb1ca2ecac169460c399b9c55850b7"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "c6a6edc245997fd90d3dc460a4a9b4a8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17252,
                "upload_time": "2022-01-16T18:21:24",
                "upload_time_iso_8601": "2022-01-16T18:21:24.250413Z",
                "url": "https://files.pythonhosted.org/packages/05/4c/b98db8c7c384bf06e5710dbf13ea06d4a7402b50b867fc8459d3348f87b3/dftt_timecode-0.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.6": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.6/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7915cc028ad72def7248088e7da900ff",
                    "sha256": "5a3fb764462ae8566d08983c8c3036d12d0e71a25848449cd00b7aadb8f92f4a"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7915cc028ad72def7248088e7da900ff",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18079,
                "upload_time": "2022-01-17T07:56:38",
                "upload_time_iso_8601": "2022-01-17T07:56:38.487907Z",
                "url": "https://files.pythonhosted.org/packages/c6/e0/0e5c58d5d18587a94f7a1096c38cbc8654443aef97902883fa6856fd050b/dftt_timecode-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0f53c5515a8851c3bfdd3ad32f8c5d97",
                    "sha256": "b1e630924bd2b11315431df168243cc8b42ebc401092b65304013bcade09633a"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "0f53c5515a8851c3bfdd3ad32f8c5d97",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17263,
                "upload_time": "2022-01-17T07:56:39",
                "upload_time_iso_8601": "2022-01-17T07:56:39.783547Z",
                "url": "https://files.pythonhosted.org/packages/59/8a/81175e0da5ff6f486b7bff14bcdf59f4b4493c6798bd11da377cc4ddbc7b/dftt_timecode-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.7/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4cdb35a147e519ba13490a7361eae092",
                    "sha256": "9bd259b9bf160af12e4880f1dbb1e70b83f381bba82a435283a681142221f5af"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4cdb35a147e519ba13490a7361eae092",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18626,
                "upload_time": "2022-01-17T16:11:33",
                "upload_time_iso_8601": "2022-01-17T16:11:33.399168Z",
                "url": "https://files.pythonhosted.org/packages/0d/cb/4c93242088ef3470556ce9d4121365573a9511ddb43fb371fbdac80f052d/dftt_timecode-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b9ae9fc7a6873f17d9f502e07d37e443",
                    "sha256": "cdb44a51a8367748851fa4af7b4ca51832ba8fcd17b755f691afbaf6f8266700"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "b9ae9fc7a6873f17d9f502e07d37e443",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 18259,
                "upload_time": "2022-01-17T16:11:35",
                "upload_time_iso_8601": "2022-01-17T16:11:35.258225Z",
                "url": "https://files.pythonhosted.org/packages/c2/d4/37820e6c503919f96747b0b85591a582dea30df53a446c01bb8211cf633b/dftt_timecode-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.8": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.8/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "226e643114d92ba2f94c8fac224525df",
                    "sha256": "c2c0f5a2c9b4311ed15e661fff1dfdcb59fd654abdbd7b7df89cb54d6e6b5bf2"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "226e643114d92ba2f94c8fac224525df",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21198,
                "upload_time": "2022-01-18T15:28:34",
                "upload_time_iso_8601": "2022-01-18T15:28:34.251683Z",
                "url": "https://files.pythonhosted.org/packages/0d/74/a563002b15edb2f7ca728e810a79133e9625e61d5bbed506113748612539/dftt_timecode-0.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b7f97c6c1d3c626ce47b9140478e99e5",
                    "sha256": "749baa4db0c1a3a5341b188c79ed3c67f29c8cb739553da101f3e13eb5b4000c"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "b7f97c6c1d3c626ce47b9140478e99e5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 23018,
                "upload_time": "2022-01-18T15:28:35",
                "upload_time_iso_8601": "2022-01-18T15:28:35.620332Z",
                "url": "https://files.pythonhosted.org/packages/0e/7c/ecf9351d4a678807e3ffb2941bebc14043ba5cf3081b6d404ef614f053e8/dftt_timecode-0.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.9": {
        "info": {
            "author": "You Ziyuan",
            "author_email": "hikaridragon0216@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Natural Language :: Chinese (Simplified)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# dftt_timecode\n\n[![pypi](https://img.shields.io/badge/pypi-0.0.9-brightgreen)](https://pypi.org/project/dftt-timecode/)\n[![python](https://img.shields.io/badge/python-3-blue)]()\n[![GitHub license](https://img.shields.io/badge/license-LGPL2.1-green)](https://github.com/OwenYou/dftt_timecode/blob/main/LICENSE)\n\n\n## 1. \u7b80\u4ecb Introduction\n\n\u4e3a\u5f71\u89c6\u884c\u4e1a\u8bbe\u8ba1\u7684Python\u65f6\u7801\u5e93\uff0c\u652f\u6301HFR\u9ad8\u5e27\u7387\u4ee5\u53ca\u5176\u4ed6\u4e30\u5bcc\u7684\u529f\u80fd\u3002\n\nPython timecode library for film and TV industry supports HFR and a bunch of cool features.\n\nDFTT\u662fDepartment of Film and TV Technology of Beijing Film Academy\u7684\u7b80\u79f0\u3002\n\nDFTT stands for the short of Department of Film and Tv Technology of Beijing Film Academy.\n\n### 1.1 \u4e3b\u8981\u529f\u80fd Main Features\n\n- \u652f\u6301\u591a\u79cd\u65f6\u7801\u683c\u5f0f\u8f93\u5165\uff0c\u5982SMPTE\u3001SRT\u3001DLP\uff08Cine Canvas\uff09\u3001FFMPEG\u3001FCPX\u3001\u5e27\u53f7\u3001\u73b0\u5b9e\u65f6\u95f4\u7b49\u3002\n\n  Multiple timecode format support, including SMPTE, SRT, DLP(Cine Canvas), FFMPEG, FCPX, frame count, time, etc.\n\n- \u652f\u6301\u9ad8\u5e27\u7387\uff0c\u76ee\u524d\u652f\u63010.01-999.99fps\u8303\u56f4\u5185\u7684\u5e27\u7387\u3002\n\n  High frame rate support, currently supports frame range from 0.01 to 999.99fps.\n\n- \u652f\u6301\u4e25\u683c\u7684\u4e22\u5e27/\u975e\u4e22\u5e27SMPTE\u683c\u5f0f\u3002\n\n  Strictly support SMPTE DF/NDF format.\n\n- \u76ee\u524d\u652f\u6301-99\u523099\u5c0f\u65f6\u65f6\u95f4\u8303\u56f4\u3002\n\n  Currently support time range from -99 to 99 hours.\n\n- \u652f\u6301**\u4e25\u683c**\u6a21\u5f0f\uff0c\u5728\u8be5\u6a21\u5f0f\u4e0b\u65f6\u7801\u4f1a\u57280-24\u5c0f\u65f6\u8303\u56f4\u5185\u5faa\u73af\uff0c\u4efb\u610f\u8d85\u51fa\u8be5\u8303\u56f4\u7684\u65f6\u7801\u4f1a\u81ea\u52a8\u8f6c\u6362\u81f3\u8303\u56f4\u5185\u3002\n\n  **Strict** Mode support, the timecode will circulate from 0 to 24 hours, any timecode outside this range will be automatically converted to a timecode inside it.\n\n- \u5185\u90e8\u4ee5\u9ad8\u7cbe\u5ea6\u65f6\u95f4\u6233\u8fdb\u884c\u5b58\u50a8\u548c\u8ba1\u7b97\uff0c\u5404\u7c7bFPS\u8f6c\u6362\u3001\u65f6\u7801\u683c\u5f0f\u8f6c\u6362\u8f93\u51fa\u90fd\u80fd\u4fdd\u6301\u6700\u9ad8\u7cbe\u5ea6\u3002\n\n  Uses high precision timestamp inside for storage and calculation, any FPS conversion or format conversion output can maintain their highest precision.\n\n- \u5e38\u7528\u8fd0\u7b97\u7b26\u652f\u6301\uff0c\u5305\u62ec\u65f6\u7801\u4e0e\u65f6\u7801\u3001\u65f6\u7801\u4e0e\u6570\u5b57\u7684\u5404\u7c7b\u52a0\u51cf\u4e58\u9664\u3001\u6bd4\u8f83\u8fd0\u7b97\u3002\n\n  Common operator support, including addition, subtraction, multiplication, division, and comparison operator between two timecode objects or a timecode object and a number.\n\n## 2. \u5982\u4f55\u5b89\u88c5 How to install\n\n```python\npython pip install dftt_timecode\n```\n\n### 2.1 \u5305\u4f9d\u8d56 Package dependency\n\n- fractions\n- logging\n- math\n- functools\n- re\n\n## 3. \u4f7f\u7528\u65b9\u6cd5\u8bf4\u660e How to use \n\n### 3.1 \u5bfc\u5165 Import\n\n```python\nfrom dftt_timecode import DfttTimecode\n```\n\n### 3.2 \u65b0\u5efa\u65f6\u7801\u7c7b\u5bf9\u8c61 Create timecode objects\n\n```Python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\n#\u4ee5SMPTE\u975e\u4e22\u5e27\u65f6\u7801\u65b0\u5efa\u5bf9\u8c61 Create object using SMPTE NDF\na = DfttTimecode('1000f', 'auto', fps=119.88, drop_frame=True, strict=True)\n#\u4ee5\u5e27\u6570\u65b0\u5efa\u5bf9\u8c61 Create object using frame count\na = DfttTimecode('3600.0s', 'auto', fps=Fraction(60000,1001), drop_frame=True, strict=True)\n#\u4ee5\u65f6\u95f4\u79d2\u65b0\u5efa\u5bf9\u8c61 Create object using time\na = DfttTimecode(-1200, 'auto', fps=23.976, drop_frame=False, strict=False)\n#\u4ee5int\u5e27\u6570\u65b0\u5efa\u5bf9\u8c61 Create object using int frame count\n```\n\n\u5bf9DfttTimecode()\u76f8\u5173\u53c2\u6570\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u67e5\u9605`4.1 DfttTimecode()\u53c2\u6570\u8bf4\u660e`\u3002\n\nFor detailed parameters descriptions of DfttTimecode(), please refer to chapter `4.1 Parameters Descriptions of DfttTimecode()`.\n\n### 3.3 \u64cd\u4f5c\u65f6\u7801\u7c7b\u5bf9\u8c61 Operate DfttTimecode objects\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.type == 'smpte'\nassert a.fps == 24\nassert a.framecount == 86400\nassert a.timestamp == 3600.0\nassert a.is_drop_frame == False\nassert a.is_strict == True\nassert a.timecode_output('smpte',output_part=0) == '01:00:00:00'\nassert a.timecode_output('srt',output_part=1) == '01'\n\na = DfttTimecode('25:00:01:103', 'auto', fps=120, drop_frame=False, strict=False)\na.set_fps(24)\nassert a.fps == 24\nassert a.timecode_output('smpte') == '25:00:01:21'\na.set_strict(strict=True)\nassert a.timecode_output('smpte') == '01:00:01:21'\na.set_strict(strict=False)\nassert a.is_strict == False\n```\n\u5bf9\u65f6\u7801\u7c7b\u5bf9\u8c61\u64cd\u4f5c\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u67e5\u9605`4.2 \u65f6\u7801\u7c7b\u5bf9\u8c61\u64cd\u4f5c\u8bf4\u660e`\u3002\n\nFor detailed descriptions of DfttTimecode objects' operations, please refer to chapter `4.2 Descriptions of DfttTimecode class operations`.\n\n### 3.4 \u65f6\u7801\u7c7b\u8fd0\u7b97\u7b26 Operators of DfttTimecode class\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nb = DfttTimecode('01:12:34:12', 'auto', fps=24, drop_frame=False, strict=True)\nprint(a)  # <DfttTimecode>(Timecode:01:00:00:00, Type:smpte, FPS:24.00 NDF, Strict)\nprint(-a)  # <DfttTimecode>(Timecode:23:00:00:00, Type:smpte, FPS:24.00 NDF, Strict)\nprint(a + b)  # <DfttTimecode>(Timecode:02:12:34:12, Type:smpte, FPS:24.00 NDF, Strict)\nprint(a - b)  # <DfttTimecode>(Timecode:23:47:25:12, Type:smpte, FPS:24.00 NDF, Strict)\nprint(a * 2)  # <DfttTimecode>(Timecode:02:00:00:00, Type:smpte, FPS:24.00 NDF, Strict)\nprint(a / 2)  # <DfttTimecode>(Timecode:00:30:00:00, Type:smpte, FPS:24.00 NDF, Strict)\nprint(a == b)  # False\nprint(a != b)  # True\nprint(a > b)  # False\nprint(a >= b)  # False\nprint(a < b)  # True\nprint(a <= b)  # True\n```\n\n\u5bf9\u65f6\u7801\u7c7b\u8fd0\u7b97\u7b26\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u8bf7\u67e5\u9605`4.3 \u65f6\u7801\u7c7b\u8fd0\u7b97\u7b26\u8bf4\u660e`\n\nFor detailed descriptions of DfttTimecode's operators, please refer to chapter `4.3 Descriptions of DfttTimecode class operators`.\n\n## 4 \u53c2\u6570\u8be6\u7ec6\u8bf4\u660e Detailed Parameters Descriptions\n\n### 4.1 DfttTimecode()\u53c2\u6570\u8bf4\u660e Parameters Descriptions of DfttTimecode()\n\n#### 4.1.1 \u53c2\u6570\u4e00\u89c8 General Descriptions\n\n```python\na = DfttTimecode(timecode_value, timecode_type, fps, drop_frame, strict)\n```\n\n- **`timecode_value`** \u662f\u65f6\u7801\u5bf9\u8c61\u7684\u65f6\u7801\u503c\uff0c\u53ef\u4ee5\u662f`str`\u3001`int`\u3001`float`\u3001`tuple`\u3001`list`\u3001`Fraction`\u7c7b\u578b\u3002\n\n  **`timecode_value`** is the value of a timecode, it can be a `str`, `int`, `float`, `tuple`, `list,` or a `Fraction`.\n\n- **`timecode_type`** \u662f\u65f6\u7801\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u662f`str`\u7c7b\u578b\uff0c\u76ee\u524d\u652f\u6301\u7684\u65f6\u7801\u7c7b\u578b\u5305\u62ec`auto`\u3001 `smpte`\u3001 `srt`\u3001 `ffmpeg`\u3001 `fcpx`\u3001 `frame`\u3001 `time`\u3002\n\n  **`timecode_type`** must be a `str`, currently supported timecode types include `auto`, `smpte`, `srt`, `ffmpeg`, `fcpx`, `frame`, `time`.\n\n- **`fps`** \u662f\u65f6\u7801\u5bf9\u8c61\u7684\u5e27\u7387\uff0c\u53ef\u4ee5\u662f`int`\u3001`float`\u3001`Fraction`\u7c7b\u578b\u3002\n\n  **`fps`** is the frame rate of the timecode object, can be an `int`, `float`, or a `Fraction`.\n\n- **`drop_frame`** \u662f\u65f6\u7801\u5bf9\u8c61\u7684\u4e22\u5e27\u8bbe\u7f6e\uff0c\u662f`bool`\u7c7b\u578b\uff0c\u53ea\u6709\u5f53\u5e27\u7387\u5b58\u5728\u4e22\u5e27\u683c\u5f0f\u65f6\uff0c\u8fd9\u4e00\u8bbe\u7f6e\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219\u4f1a\u5f3a\u5236\u5c06\u4e22\u5e27\u8bbe\u4e3a`False`\u3002**`drop_frame `** \u7684\u9ed8\u8ba4\u503c\u662f`False`\u3002\n\n  **`drop_frame`** must be a `bool`, a timecode object can only be drop-frameable under specific frame rate settings, if not so, **`drop_frame`** will be forced to `False`. The default value of **`drop_frame`** is `False`.\n\n- **`strict`** \u4e3a\u65f6\u7801\u5bf9\u8c61\u8bbe\u7f6e\u4e25\u683c\u6a21\u5f0f\uff0c\u662f`bool`\u7c7b\u578b\u3002\u8bbe\u4e3a`True`\u540e\uff0c\u8d1f\u503c\u548c\u8d85\u8fc724\u5c0f\u65f6\u7684\u65f6\u7801\u90fd\u5c06\u88ab\u8f6c\u6362\u4e3a0-24\u5c0f\u65f6\u8303\u56f4\u5185\u7684\u503c\uff0c\u4f8b\u5982`25:00:00:00`\u5c06\u88ab\u8f6c\u6362\u4e3a`01:00:00:00`, `-01:00:00:00`\u5c06\u88ab\u8f6c\u6362\u4e3a`23:00:00:00`\u3002 **`strict`** \u7684\u9ed8\u8ba4\u503c\u662f`True`\u3002\n\n  **`strict`** will set the strict mode for a timecode object, it must be a `bool`. When set to `True`, negative timecode value and timecode value over 24 hours will be converted to a value inside the range 0 to 24 hours. For example, 25:00:00:00 will be converted to 01:00:00:00, -01:00:00:00 will be converted to 23:00:00:00. The default value of **`strict`** is `True`.\n#### 4.1.2 timecode_value\n\n**`timecode_value`** \u51b3\u5b9a\u4e86\u65f6\u7801\u5bf9\u8c61\u7684\u65f6\u95f4\u503c\uff0cDfttTimecode\u652f\u6301\u4ee5\u591a\u79cd\u7c7b\u578b\u7684\u6570\u636e\u521d\u59cb\u5316\u65f6\u95f4\u503c\uff0c\u4e14\u90fd\u652f\u6301\u8d1f\u6570\u3002\u4e0b\u9762\u8be6\u7ec6\u5217\u51fa\u4e86\u5404\u4e2a\u6570\u636e\u7c7b\u578b\u5bf9\u5e94\u7684\uff08\u53ef\u9009\uff09\u521d\u59cb\u5316\u65b9\u5f0f\uff1a\n\n**`timecode_value`** determines the actual time of a timecode object. DfttTimecode supports initialize time by different data types, including negative numbers. The following table lists different data types and their supported initialization methods.\n\n| \u6570\u636e\u7c7b\u578b<br />Data type |  \u652f\u6301\u7684\u521d\u59cb\u5316\u65b9\u5f0f<br />Supported initialization methods   |\n| :---------------------: | :-------------------------------------------------------: |\n|          `str`          | `auto`, `smpte`, `srt`, `ffmpeg`, `fcpx`, `frame`, `time` |\n|          `int`          |                  `auto`, `frame`, `time`                  |\n|         `float`         |                      `auto`, `time`                       |\n|         `tuple`         |                      `auto`, `time`                       |\n|         `list`          |                      `auto`, `time`                       |\n|       `fraction`        |                      `auto`, `time`                       |\n\n\u76ee\u524d\uff0cDfttTimecode\u4e0d\u652f\u6301\u4ee5\u5c0f\u6570\u4e3a\u5355\u4f4d\u7684\u5e27\u8ba1\u6570\u65b9\u5f0f\u3002\n\nCurrently, DfttTimecode does not support frame count value in decimals.\n\n#### 4.1.3 timecode_type\n\n**`timecode_type`** \u51b3\u5b9a\u4e86\u65f6\u7801\u5bf9\u8c61\u7684\u7c7b\u578b\u3002DfttTimecode\u652f\u6301\u81ea\u52a8\u5224\u65ad\u7c7b\u578b\uff0c\u4e5f\u652f\u6301\u624b\u52a8\u6307\u5b9a\u7c7b\u578b\u3002\u5728\u90e8\u5206\u573a\u666f\uff0c\u5982\u8f93\u5165\u503c\u662f`int`\u7c7b\u65f6\uff0c\u624b\u52a8\u6307\u5b9a\u7c7b\u578b\u53ef\u4ee5\u6709\u6548\u5730\u533a\u5206\u4ee5\u5e27\u8ba1\u6570\u521d\u59cb\u5316\u65f6\u7801\u548c\u4ee5\u65f6\u95f4\u521d\u59cb\u5316\u65f6\u7801\u8fd9\u4e24\u79cd\u884c\u4e3a\u3002\n\n**`timecode_type`** determines the timecode type of a timecode object. DfttTimecode supports auto-configure timecode type as well as manual assign a timecode type. Under some circumstances, for example, the input data is `int`, manual assign a timecode type is a sufficient way to clarify whether the input is intended to be a frame or a time value.\n\n\u4e0b\u8868\u5217\u51fa\u4e86\u4e00\u7cfb\u5217\u6837\u4f8b**`timecode_value`** \u8f93\u5165\u548c\u4ed6\u4eec\u5728`'auto'`\u6a21\u5f0f\u4e0b\u5bf9\u5e94\u7684\u65f6\u7801\u7c7b\u578b\uff1a\n\nThe following sheet gives a list of example **`timecode_value`** input and their corresponding timecode type under `'auto'` mode.\n\n|          timecode_value           | auto\u6a21\u5f0f\u4e0b\u7684type<br />Type under auto mode |                      \u5907\u6ce8<br />Comment                       |\n| :-------------------------------: | :----------------------------------------: | :----------------------------------------------------------: |\n|          `'01:00:00:00'`          |                  `smpte`                   | **`drop_frame`** \u5c06\u81ea\u52a8\u8bbe\u4e3a`False `<br />**`drop_frame`** will be set to `False` |\n| `'01:00:00;00'`, `'01:00:00;000'` |                  `smpte`                   | **`drop_frame`** \u5c06\u81ea\u52a8\u8bbe\u4e3a`True`<br />**`drop_frame`** will be set to `True` |\n|         `'01:00:00:000'`          |                  `smpte`                   | \u9ad8\u5e27\u7387`smpte`\u65f6\u7801\uff0c\u5f62\u5f0f\u4e0e`dlp`\u76f8\u8fd1\uff0c\u5982\u679c\u8f93\u5165\u503c\u4e3a`dlp`\u8bf7\u5f3a\u5236\u6307\u8ba4**`timecode_type`** \u4e3a`dlp`<br />High frame rate timecode, this format is similar to `dlp` timecode, so if your input timecode is actually in `dlp` format, please force **`timecode_type`** to `dlp` |\n|         `'01:00:00,000'`          |                   `srt`                    | \u6700\u540e\u4e09\u4f4d\u8868\u793a\u6beb\u79d2<br />The last three digits represent milliseconds |\n|          `'01:00:00.00'`          |                  `ffmpeg`                  | \u6700\u540e\u4e24\u4f4d\u8868\u793a\u79d2\u7684\u5c0f\u6570\u90e8\u5206<br />The last two digits represent the decimal part of a second |\n|        `'1/24s'`, `'1/24'`        |                   `fcpx`                   |             \u53ef\u4ee5\u7701\u7565\u201cs\u201d<br />*s* can be omitted              |\n|        `'1000f`, `'1000'`         |                  `frame`                   |             \u53ef\u4ee5\u7701\u7565\u201cf\u201d<br />*f* can be omitted              |\n| `\u20191000s'`,`'1000.0'`,`'1000.0s'`  |                   `time`                   |             \u53ef\u4ee5\u7701\u7565\u201cs\u201d<br />*s* can be omitted              |\n|              `1000`               |                  `frame`                   | `int` \u6570\u636e\u4f1a\u81ea\u52a8\u88ab\u8ba4\u5b9a\u4e3a`frame`\u7c7b<br />`int` data will be considered as a `frame` type |\n|             `1000.0`              |                   `time`                   | `float` \u6570\u636e\u4f1a\u81ea\u52a8\u88ab\u8ba4\u5b9a\u4e3a`time`\u7c7b<br />`float` data will be considered as a `time` type |\n|          `[1000, 2000]`           |                   `time`                   | \u524d\u8005\u4f1a\u6210\u4e3a`Fraction`\u7684\u5206\u5b50\uff0c\u540e\u8005\u6210\u4e3a\u5206\u6bcd<br />the former part will become the numerator of a `Fraction`, and the latter will become the dominator |\n|          `(1000, 2000)`           |                   `time`                   | \u524d\u8005\u4f1a\u6210\u4e3a`Fraction`\u7684\u5206\u5b50\uff0c\u540e\u8005\u6210\u4e3a\u5206\u6bcd<br />the former part will become the numerator of a `Fraction`, and the latter will become the dominator |\n|      `Fraction(1000, 2000)`       |                   `time`                   | \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u4e00\u4e2a`Fraction`\u5bf9\u8c61<br />Just passing a `Fraction` object is also acceptable |\n\n\u5982\u679c\u8f93\u5165\u7684\u65f6\u7801\u503c\u4e0e\u6240\u9009\u62e9\u7684\u65f6\u7801\u7c7b\u578b\u4e0d\u5339\u914d\uff0c\u4f1a\u629b\u51fa\u9519\u8bef\u3002\n\nIf the input timecode value does not match the given timecode type, an error will be raised.\n\n#### 4.1.4 fps\n\n**`fps`** \u662f\u65f6\u7801\u5bf9\u8c61\u7684\u5e27\u7387\uff0c\u53ef\u4ee5\u662f`int`\u3001`float`\u3001`Fraction`\u7c7b\u578b\u3002\n\n**`fps`** is the frame rate of the timecode object, can be an `int`, `float` or a `Fraction`.\n\n#### 4.1.5 drop_frame\n\n**`drop_frame`** \u662f\u65f6\u7801\u5bf9\u8c61\u7684\u4e22\u5e27\u8bbe\u7f6e\uff0c\u662f`bool`\u7c7b\u578b\uff0c\u53ea\u6709\u5f53\u5e27\u7387\u5b58\u5728\u4e22\u5e27\u683c\u5f0f\u65f6\uff0c\u8fd9\u4e00\u8bbe\u7f6e\u624d\u4f1a\u751f\u6548\uff0c\u5426\u5219\u4f1a\u5f3a\u5236\u5c06\u4e22\u5e27\u8bbe\u4e3a`False`\u3002**`drop_frame `** \u7684\u9ed8\u8ba4\u503c\u662f`False`\u3002\n\n**`drop_frame`** must be a `bool`, a timecode object can only be drop-frameable under specific frame rate settings, if not so, **`drop_frame`** will be forced to `False`. The default value of **`drop_frame`** is `False`.\n\n\u5f53**`timecode_type`** \u4e3a`auto`\u65f6\uff0c\u4f1a\u6839\u636e\u8f93\u5165\u6570\u636e\u7684\u5206\u9694\u7b26\u81ea\u52a8\u8bbe\u7f6e**`drop_frame`** \u3002\n\nWhen  **`timecode_type`** is set to `auto`, **`drop_frame`** will be auto-set according to the separator of the input data.\n\n\u5f53**`timecode_value`** \u5728\u5f53\u524d**`drop_frame`** \u8bbe\u7f6e\u4e0b\u4e0d\u5408\u6cd5\u65f6\uff08\u4ec5\u5f53**`timecode_type`** \u4e3a`smpte`\u65f6\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u5c06\u4f1a\u62a5\u9519\u3002\n\nWhen **`timecode_value`** is illegal under the current **`drop_frame`** setting (this should only happen when **`timecode_type`** is `smpte`), there will be an error.\n\n#### 4.1.6 strict\n\n**`strict`** \u4e3a\u65f6\u7801\u5bf9\u8c61\u8bbe\u7f6e\u4e25\u683c\u6a21\u5f0f\uff0c\u662f`bool`\u7c7b\u578b\u3002\u8bbe\u4e3a`True`\u540e\uff0c\u8d1f\u503c\u548c\u8d85\u8fc724\u5c0f\u65f6\u7684\u65f6\u7801\u90fd\u5c06\u88ab\u8f6c\u6362\u4e3a0-24\u5c0f\u65f6\u8303\u56f4\u5185\u7684\u503c\uff0c\u4f8b\u5982`25:00:00:00`\u5c06\u88ab\u8f6c\u6362\u4e3a`01:00:00:00`, `-01:00:00:00`\u5c06\u88ab\u8f6c\u6362\u4e3a`23:00:00:00`\u3002**`strict`** \u7684\u9ed8\u8ba4\u503c\u662f`True`\u3002\n\n**`strict`** will set the strict mode for a timecode object, it must be a `bool`. When set to `True`, negative timecode value and timecode value over 24 hours will be converted to a value inside the range 0 to 24 hours. For example, 25:00:00:00 will be converted to 01:00:00:00, -01:00:00:00 will be converted to 23:00:00:00.The default value of **`strict`** is `True`.\n\n\u7279\u522b\u5730\uff0c\u5bf9\u4e8e\u4e22\u5e27\u65f6\u7801\uff0c\u7531\u4e8e\u4e25\u683c\u6a21\u5f0f\u7684\u89c4\u5219\u662f\u4e0d\u51fa\u73b0\u8d85\u8fc724:00:00:00\u7684\u65f6\u7801\uff08\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u503c\u4f1a\u88ab\u8f6c\u4e3a00:00:00:00\uff09\u3002\u56e0\u6b64\uff0c\u5728\u8be5\u6a21\u5f0f\u4e0b\u53ef\u5bb9\u7eb3\u7684\u603b\u5e27\u6570\u4f1a\u5c0f\u4e8e\u76f8\u540c\u5e27\u7387\u7684\u975e\u4e22\u5e27\u65f6\u7801\u3002\n\nIn particular, as for a drop-frame timecode, the rule of strict mode does not allow a timecode value greater than 24:00:00:00 (actually, this value will be converted to 00:00:00:00). So, the maximum frame count number a drop-frame timecode can reach under strict mode will be less than a timecode with the same framerate but set to non-drop-frame mode.\n\n#### 4.1.7 \u8865\u5145\u8bf4\u660e Additional info\n\n\u6682\u65e0\u3002\n\nCurrently, this part intentionally remains blank.\n\n### 4.2 \u65f6\u7801\u7c7b\u5bf9\u8c61\u64cd\u4f5c\u8bf4\u660e Descriptions of DfttTimecode class operations\n\n#### 4.2.1 self.type\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.type == 'smpte'\n```\n\n\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u7684**`timecode_type`** \u5c5e\u6027\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a`str`\u3002\n\nReturns the **`timecode_type`** attribute of a DfttTimecode object, returned data type is `str`.\n\n#### 4.2.2 self.fps\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.fps == 24\n```\n\n\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u7684**`fps`** \u5c5e\u6027\uff0c\u8fd4\u56de\u7c7b\u578b\u53d6\u51b3\u4e8e\u8bbe\u7f6efps\u6240\u7528\u7684\u53d8\u91cf\u7c7b\u578b\u3002\n\nReturns the **`fps`** attribute of a DfttTimecode object, returned data type is determined by the data type used to set the **`fps`** attribute.\n\n#### 4.2.3 self.framecount\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.framecount == 86400\n```\n\n\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u4ece0\u65f6\u95f4\u8d77\u7ecf\u8fc7\u7684\u603b\u5e27\u6570\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a`int`\u3002\n\nReturns the total frame count from 0 of a DfttTimecode, returned data type is `int`.\n\n#### 4.2.4 self.timestamp\n\n```python\na = DfttTimecode('01:00:00:01', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.timestamp == 3600.04167\n```\n\n\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u4ece0\u65f6\u95f4\u8d77\u7ecf\u8fc7\u7684\u603b\u65f6\u957f\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a`float`\uff0c\u7cbe\u5ea6\u4e3a5\u4f4d\u5c0f\u6570\u3002\n\nReturns the total time elapsed from 0 of a DfttTimecode, returned data type is `float`, the precision of the returned value is 5 decimal places.\n\n#### 4.2.5 self.is_drop_frame\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.is_drop_frame == False\n```\n\n\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u7684**`drop_frame`** \u5c5e\u6027\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a`bool`.\n\nReturns the **`drop_frame`** attribute of a DfttTimecode object, returned data type is `bool`.\n\n#### 4.2.6 self.is_strict\n\n```python\na = DfttTimecode('01:00:00:00', 'auto', fps=24, drop_frame=False, strict=True)\nassert a.is_strict == True\n```\n\n\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u7684**`strict`** \u5c5e\u6027\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a`bool`.\n\nReturns the **`strict`** attribute of a DfttTimecode object, returned data type is `bool`.\n\n#### 4.2.7 self.set_fps()\n\n```python\na = DfttTimecode('01:00:00:101', 'auto', fps=120, drop_frame=False, strict=True)\na.set_fps(24, rounding = True)\na.set_fps(120)\nassert a.timecode_output('smpte') == '01:00:00:100'\n```\n\n\u8be5\u51fd\u6570\u4f1a\u66f4\u6539DfttTimecode\u5bf9\u8c61\u7684\u5e27\u7387\uff0c\u5e76\u53ef\u4ee5\u9009\u62e9\u5728\u66f4\u6539\u5e27\u7387\u65f6\u662f\u5426\u53d6\u6574\u3002\n\nThis function will change the frame rate of a DfttTimecode object, you can choose whether or not to round the timecode value while changing the frame rate.\n\n`self.set_fps()`\u51fd\u6570\u5171\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f**`dest_fps`** \u548c**`rounding`**\u3002\n\nThere are two parameters of `self.set_fps()`, they are **`dest_fps`** and **`rounding`**.\n\n**`dest_fps`** \u662f\u5e27\u7387\u8f6c\u6362\u7684\u76ee\u6807\u5e27\u7387\uff0c\u53ef\u4ee5\u662f`int`\u3001`float`\u3001`Fraction`\u7c7b\u578b\u3002\n\n**`dest_fps`** is the target frame rate of this transform, it can be a,n `int`,  `float`, or a `Fraction`.\n\n**`rounding`** \u51b3\u5b9a\u4e86\u5e27\u7387\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u662f\u5426\u820d\u5165\u65f6\u95f4\u6233\u4ee5\u5bf9\u9f50\u5e27\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u3002\n\n**`rounding`** determines whether to round the time stamp to align to the exact frame while converting the frame rate, you can refer to the following example code to see how it works.\n\n```python\na = DfttTimecode('01:00:00:101', 'auto', fps=120, drop_frame=False, strict=True)\na.set_fps(24, rounding = False)\na.set_fps(120)\nassert a.timecode_output('smpte') == '01:00:00:101'\na.set_fps(24, rounding = True)\na.set_fps(120)\nassert a.timecode_output('smpte') == '01:00:00:100'\n```\n\n#### 4.2.8 self.set_type()\n\n```python\na = DfttTimecode('01:00:00,123', 'auto', fps=24)\na.set_type('smpte', rounding=True)\nassert a.type == 'smpte'\na.set_type('srt')\nassert a.timecode_output('srt') == '01:00:00,125'\n```\n\n\u8be5\u51fd\u6570\u4f1a\u66f4\u6539DfttTimecode\u5bf9\u8c61\u7684\u65f6\u7801\u7c7b\u578b\uff0c\u5e76\u53ef\u4ee5\u9009\u62e9\u5728\u66f4\u6539\u7c7b\u578b\u65f6\u662f\u5426\u53d6\u6574\u3002\n\nThis function will change the timecode type of a DfttTimecode object, you can choose whether or not to round the timecode value while changing the timecode type.\n\n`self.set_type()`\u51fd\u6570\u5171\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f**`dest_type`** \u548c**`rounding`**\u3002\n\n`self.set_type()` has two parameters, they are **`dest_type`** and **`rounding`**  .\n\n**`dest_type`** \u662f\u65f6\u7801\u7c7b\u578b\u8f6c\u6362\u7684\u76ee\u6807\u65f6\u7801\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u9664`'auto'`\u4ee5\u5916\u7684\u4efb\u4f55\u4e00\u4e2a\u652f\u6301\u7684\u65f6\u7801\u7c7b\u578b\u3002\n\n**`dest_type`** is the target timecode type of this transform, it can be any supported timecode type except `'auto'`.\n\n**`rounding`** \u51b3\u5b9a\u4e86\u65f6\u7801\u7c7b\u578b\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u662f\u5426\u820d\u5165\u65f6\u95f4\u6233\u4ee5\u5bf9\u9f50\u5e27\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u3002\n\n**`rounding`** determines whether to round the time stamp to align to the exact frame while converting the timecode type, you can refer to the following example code to see how it works.\n\n```python\na = DfttTimecode('01:00:00,123', 'auto', fps=24)\nassert a.type == 'srt'\na.set_type('smpte', rounding=True)\nassert a.type == 'smpte'\nassert a.timecode_output('srt') == '01:00:00,125'\n```\n\n#### 4.2.9 self.set_strict()\n\n```python\na = DfttTimecode('25:01:02:05', 'auto', fps=24, strict=False)\na.set_strict()\nassert a.is_strict == True\nassert a.timecode_output('smpte') == '01:01:02:05'\na.set_strict(strict=False)\nassert a.is_strict == False\n```\n\n\u8be5\u51fd\u6570\u4f1a\u66f4\u6539DfttTimecode\u5bf9\u8c61\u7684strict\u6a21\u5f0f\u5e03\u5c14\u503c\u3002\n\nThis function will change the strict mode bool value of a DfttTimecode object.\n\n`self.set_strict()` \u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5373**`strict`** \u3002**`strict`** \u7684\u7c7b\u578b\u662f`bool`\uff0c\u9ed8\u8ba4\u503c\u4e3a`True`\u3002\n\n`self.set_strict()` has one parameter, which is **`strict`**. The data type of **`strict`** is `bool`, the default value of **`strict`** is `Ture`. \n\n#### 4.2.10 self.timecode_output()\n\n```python\na = DfttTimecode('01:02:03:05', 'auto', fps=24)\nassert a.timecode_output() == '01:02:03:05'\nassert a.timecode_output('srt') == '01:02:03,208'\nassert a.timecode_output('srt', output_part=1) == '01'\nassert a.timecode_output('srt', output_part=2) == '02'\nassert a.timecode_output('srt', output_part=3) == '03'\nassert a.timecode_output('srt', output_part=4) == '208'\n```\n\n\u8be5\u51fd\u6570\u4f1a\u4ee5\u6307\u5b9a\u7c7b\u578b\u548c\u90e8\u5206\u8fd4\u56deDfttTimecode\u5bf9\u8c61\u7684\u65f6\u7801\u503c\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a`str`\u3002\n\nThis function will return the timecode value of a DfttTimecode object in the given timecode type and partition number format, the returned data type is `str`.\n\n`self.timecode_output()` \u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f**`dest_type`** \u548c**`output_part`** \u3002\n\n`self.timecode_output()` has two parameters, they are **`dest_type`** and **`output_part`** .\n\n**`dest_type`** \u662f\u8f93\u51fa\u65f6\u7801\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u4efb\u4f55\u4e00\u4e2a\u652f\u6301\u7684\u65f6\u7801\u7c7b\u578b\uff0c\u5b83\u7684\u9ed8\u8ba4\u503c\u662f`'auto'`\uff0c\u6b64\u65f6\u4f1a\u6839\u636eDfttTimecode\u5bf9\u8c61\u81ea\u8eab\u7684\u65f6\u7801\u7c7b\u578b\u51b3\u5b9a\u8f93\u51fa\u7c7b\u578b\u3002\n\n**`dest_type`** is the type of the output timecode value, it can be any supported timecode type, the default value of it is `'auto'`, which means the function will determine the output timecode type according to the timecode type of the DfttTimecode object itself.\n\n**`output_part`** \u662f\u8f93\u51fa\u7684\u90e8\u5206\uff0c\u5b83\u5e94\u662f\u4e00\u4e2a`int`\u503c\u3002\u5b83\u7684\u9ed8\u8ba4\u503c\u662f`0`\uff0c\u5373\u5b8c\u6574\u8f93\u51fa\u3002`1`\u5230`4`\u4f9d\u6b21\u4ee3\u8868\u8f93\u51fa\u4ece\u5de6\u81f3\u53f3\u7684\u6bcf\u4e2a\u65f6\u7801\u90e8\u5206\u3002\n\n**`output_part`** is the partition of the output timecode value, it is an `int`. The default value of it is 0, which means a complete output. Each of 1 to 4 represents an output timecode part from left to right.\n\n### 4.3 \u65f6\u7801\u7c7b\u8fd0\u7b97\u7b26\u8bf4\u660e Descriptions of DfttTimecode class operators\n\n#### 4.3.1 print(self)\n\n\u8be5\u8fd0\u7b97\u7b26\u4f1a\u6253\u5370DfttTimecode\u5bf9\u8c61\u76f8\u5173\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\nThis operator will print basic information of a DfttTimecode object, as the following codes show.\n\n```python\na = DfttTimecode('01:00:00,123', 'srt', fps=24, drop_frame=False, strict=True)\nprint(a)  # <DfttTimecode>(Timecode:01:00:00,123, Type:srt, FPS:24.00 NDF, Strict)\n```\n\n#### 4.3.2 -self\n\n\u8be5\u8fd0\u7b97\u7b26\u4f1a\u5c06DfttTimecode\u5bf9\u8c61\u7684\u65f6\u7801\u503c\u53d6\u8d1f\uff0c\u4e14\u4e0d\u6539\u53d8\u5176\u4ed6\u5c5e\u6027\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\nThis operator will yield the negation of the timecode value of a DfttTimecode object, and won't affect any of the rest attributes, as the following codes show.\n\n```python\na = DfttTimecode('01:00:00,123', 'srt', fps=24, drop_frame=False, strict=True)\nprint(-a)  # <DfttTimecode>(Timecode:22:59:59,877, Type:srt, FPS:24.00 NDF, Strict)\n```\n\n#### 4.3.3 +\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u76f8\u52a0\uff0c\u6216\u5c06DfttTimecode\u5bf9\u8c61\u4e0e`int`\uff0c`float`\u6216`Fraction`\u76f8\u52a0\u3002\n\nThis operator can add two DfttTimecode objects together, or add a DfttTimecode object with an `int`, `float`, or a `Fraction`.\n\n\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u76f8\u52a0\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u76f8\u52a0\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen adding a DfttTimecode object with an `int`, the `int` will be considered as a frame number. When adding a DfttTimecode object with a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n\u76f8\u52a0\u7684DfttTimecode\u5bf9\u8c61\u5fc5\u987b\u62e5\u6709\u76f8\u540c\u7684\u5e27\u7387\u3002\n\nThe two DfttTimecode objects to perform the addition must have the same frame rate.\n\n#### 4.3.4 -\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u76f8\u51cf\uff0c\u6216\u5c06DfttTimecode\u5bf9\u8c61\u4e0e`int`\uff0c`float`\u6216`Fraction`\u76f8\u51cf\u3002\n\nThis operator can perform a subtraction between two DfttTimecode objects, or perform a subtraction between a DfttTimecode object and an `int`, `float`, or a `Fraction`.\n\n\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u76f8\u51cf\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u76f8\u52a0\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a subtraction between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a subtraction between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n\u76f8\u51cf\u7684DfttTimecode\u5bf9\u8c61\u5fc5\u987b\u62e5\u6709\u76f8\u540c\u7684\u5e27\u7387\u3002\n\nThe two DfttTimecode objects to perform the subtraction must have the same frame rate.\n\n#### 4.3.5 \\*\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e00\u4e2aDfttTimecode\u5bf9\u8c61\u4e0e\u4e00\u4e2a`int`\uff0c`float`\u6216`Fraction`\u76f8\u4e58\uff0c\u540e\u8005\u7684\u6570\u5b66\u610f\u4e49\u662f\u500d\u6570\u3002\n\nThis operator can perform a multiplication between a DfttTimecode object and an `int`, `float`, or a `Fraction`, the mathematical meaning of the latter is a factor.\n\n#### 4.3.6 /\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5c06\u4e00\u4e2aDfttTimecode\u5bf9\u8c61\u4e0e\u4e00\u4e2a`int`\uff0c`float`\u6216`Fraction`\u76f8\u9664\uff0c\u540e\u8005\u7684\u6570\u5b66\u610f\u4e49\u662f\u500d\u6570\u3002\n\nThis operator can perform a division between a DfttTimecode object and an `int`, `float`, or a `Fraction`, the mathematical meaning of the latter is a factor.\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u53ea\u6709\u5f53DfttTimecode\u5bf9\u8c61\u4f5c\u4e3a\u88ab\u9664\u6570\u65f6\uff0c\u9664\u6cd5\u8fd0\u7b97\u624d\u662f\u6709\u610f\u4e49\u7684\uff0cDfttTimecode\u5bf9\u8c61\u4e0d\u80fd\u4f5c\u9664\u6570\u3002\n\nPlease be noted, the division operation only makes sense when the DfttTimecode object is used as the dividend, the DfttTimecode object cannot be used as a divisor.\n\n#### 4.3.7 ==\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u662f\u5426\u76f8\u7b49\uff0c\u6216\u6bd4\u8f83DfttTimecode\u5bf9\u8c61\u548c`int`\uff0c`float`\u6216`Fraction`\u662f\u5426\u76f8\u7b49\u3002\n\nThis operator can perform a comparison between two DfttTimecode objects, or perform a comparison between a DfttTimecode object and an `int`, `float`, or a `Fraction`, to tell whether they are equal to each other.\n\n\u5f53\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u4f5c\u6bd4\u8f83\u65f6\uff0c\u5c06\u6bd4\u8f83\u4e8c\u8005\u7684\u65f6\u95f4\u6233\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u4f5c\u6bd4\u8f83\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u4f5c\u6bd4\u8f83\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a comparison between two DfttTimecode objects, a comparison of their timestamp will be performed. When performing a comparison between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a comparison between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n#### 4.3.8 \\!=\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u662f\u5426\u76f8\u7b49\uff0c\u6216\u6bd4\u8f83DfttTimecode\u5bf9\u8c61\u548c`int`\uff0c`float`\u6216`Fraction`\u662f\u5426\u76f8\u7b49\u3002\n\nThis operator can perform a comparison between two DfttTimecode objects, or perform a comparison between a DfttTimecode object and an `int`, `float`, or a `Fraction`, to tell whether they are equal to each other.\n\n\u5f53\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u4f5c\u6bd4\u8f83\u65f6\uff0c\u5c06\u6bd4\u8f83\u4e8c\u8005\u7684\u65f6\u95f4\u6233\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u4f5c\u6bd4\u8f83\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u4f5c\u6bd4\u8f83\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a comparison between two DfttTimecode objects, a comparison of their timestamp will be performed. When performing a comparison between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a comparison between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n#### 4.3.9 >\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u6216\u6bd4\u8f83DfttTimecode\u5bf9\u8c61\u548c`int`\uff0c`float`\u6216`Fraction`\u7684\u5927\u5c0f\u3002\n\nThis operator can perform a comparison between two DfttTimecode objects, or perform a comparison between a DfttTimecode object and an `int`, `float`, or a `Fraction`, to tell which one is the greater one.\n\n\u5f53\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u4f5c\u6bd4\u8f83\u65f6\uff0c\u5c06\u6bd4\u8f83\u4e8c\u8005\u7684\u65f6\u95f4\u6233\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u4f5c\u6bd4\u8f83\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u4f5c\u6bd4\u8f83\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a comparison between two DfttTimecode objects, a comparison of their timestamp will be performed. When performing a comparison between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a comparison between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n#### 4.3.10 >=\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u6216\u6bd4\u8f83DfttTimecode\u5bf9\u8c61\u548c`int`\uff0c`float`\u6216`Fraction`\u7684\u5927\u5c0f\u3002\n\nThis operator can perform a comparison between two DfttTimecode objects, or perform a comparison between a DfttTimecode object and an `int`, `float`, or a `Fraction`, to tell which one is the greater one.\n\n\u5f53\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u4f5c\u6bd4\u8f83\u65f6\uff0c\u5c06\u6bd4\u8f83\u4e8c\u8005\u7684\u65f6\u95f4\u6233\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u4f5c\u6bd4\u8f83\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u4f5c\u6bd4\u8f83\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a comparison between two DfttTimecode objects, a comparison of their timestamp will be performed. When performing a comparison between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a comparison between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n#### 4.3.11 <\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u6216\u6bd4\u8f83DfttTimecode\u5bf9\u8c61\u548c`int`\uff0c`float`\u6216`Fraction`\u7684\u5927\u5c0f\u3002\n\nThis operator can perform a comparison between two DfttTimecode objects, or perform a comparison between a DfttTimecode object and an `int`, `float`, or a `Fraction`, to tell which one is the greater one.\n\n\u5f53\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u4f5c\u6bd4\u8f83\u65f6\uff0c\u5c06\u6bd4\u8f83\u4e8c\u8005\u7684\u65f6\u95f4\u6233\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u4f5c\u6bd4\u8f83\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u4f5c\u6bd4\u8f83\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a comparison between two DfttTimecode objects, a comparison of their timestamp will be performed. When performing a comparison between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a comparison between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n#### 4.3.12 <=\n\n\u8be5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6bd4\u8f83\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u7684\u5927\u5c0f\uff0c\u6216\u6bd4\u8f83DfttTimecode\u5bf9\u8c61\u548c`int`\uff0c`float`\u6216`Fraction`\u7684\u5927\u5c0f\u3002\n\nThis operator can perform a comparison between two DfttTimecode objects, or perform a comparison between a DfttTimecode object and an `int`, `float`, or a `Fraction`, to tell which one is the greater one.\n\n\u5f53\u4e24\u4e2aDfttTimecode\u5bf9\u8c61\u4f5c\u6bd4\u8f83\u65f6\uff0c\u5c06\u6bd4\u8f83\u4e8c\u8005\u7684\u65f6\u95f4\u6233\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`int`\u4f5c\u6bd4\u8f83\u65f6\uff0c`int`\u503c\u5c06\u88ab\u5f53\u4f5c\u5e27\u8ba1\u6570\u5904\u7406\u3002\u5f53DfttTimecode\u5bf9\u8c61\u4e0e`float`\u6216`Fraction`\u4f5c\u6bd4\u8f83\u65f6\uff0c\u540e\u8005\u7684\u503c\u5c06\u88ab\u5f53\u4f5c\u65f6\u95f4\u6233\u5904\u7406\u3002\n\nWhen performing a comparison between two DfttTimecode objects, a comparison of their timestamp will be performed. When performing a comparison between a DfttTimecode object and an `int`, the `int` will be considered as a frame number. When performing a comparison between a DfttTimecode object and a `float` or a `Fraction`, the latter will be considered as a time stamp.\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OwenYou/dftt_timecode",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dftt-timecode",
            "package_url": "https://pypi.org/project/dftt-timecode/",
            "platform": "",
            "project_url": "https://pypi.org/project/dftt-timecode/",
            "project_urls": {
                "Homepage": "https://github.com/OwenYou/dftt_timecode"
            },
            "release_url": "https://pypi.org/project/dftt-timecode/0.0.9/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Timecode library for film and TV industry, supports HFR and a bunch of cool features",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12766605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2220c4c91e3d24b4afe18f2ae356759c",
                    "sha256": "f589e93ec1dec64d040dc7f538c083f6e452021c1624a65085ff186ee35b7c26"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2220c4c91e3d24b4afe18f2ae356759c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 25967,
                "upload_time": "2022-02-02T15:29:47",
                "upload_time_iso_8601": "2022-02-02T15:29:47.769277Z",
                "url": "https://files.pythonhosted.org/packages/5d/53/1d18ab857f6cce8082cf51b40c0486b00b92bfffa0d26306eecd0c003e3f/dftt_timecode-0.0.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b57fc84f29151b1f9e2cfd5a190402cd",
                    "sha256": "477489cfc9225c52aa7c86e387bda8bb51362377b0fa8000eee15b4f481b40a2"
                },
                "downloads": -1,
                "filename": "dftt_timecode-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "b57fc84f29151b1f9e2cfd5a190402cd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 38673,
                "upload_time": "2022-02-02T15:29:50",
                "upload_time_iso_8601": "2022-02-02T15:29:50.077569Z",
                "url": "https://files.pythonhosted.org/packages/c6/fb/5406eaf78493f579c5197a534bcd13d431d72dd8a6bf143ca9b1305bb833/dftt_timecode-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}