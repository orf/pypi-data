{
    "0.0.1": {
        "info": {
            "author": "TxGNN Team",
            "author_email": "kexinh@stanford.edu",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# TxGNN: Repurposing therapeutics for neglected diseases using geometric deep learning\n\nThis repository hosts the official implementation of TxGNN, a method that can predict drug efficacy to disease with limited molecular underpinnings and few treatments by applying geomtric learning on multi-scale disease knowledge graph. \n\n### Installation \n\nCreate your virtual environment using `virtualenv` or `conda` and then do `pip install TxGNN`\n\n### Core API Interface\nUsing the API, you can (1) reproduce the results in our paper and (2) train TxGNN on your own drug repurposing dataset using a few lines of code, and also generate graph explanations. \n\n```python\nfrom TxGNN import TxData, TxGNN, TxEval\n\n# Download/load knowledge graph dataset\nTxData = TxData(data_folder_path = './data')\nTxData.prepare_split(split = 'complex_disease', seed = 42)\nTxGNN = TxGNN(data = TxData, \n              weight_bias_track = False,\n              proj_name = 'TxGNN',\n              exp_name = 'TxGNN'\n              )\n\n# Initialize a new model\nTxGNN.model_initialize(n_hid = 100, \n                      n_inp = 100, \n                      n_out = 100, \n                      proto = True,\n                      proto_num = 3,\n                      attention = False,\n                      sim_measure = 'all_nodes_profile',\n                      bert_measure = 'disease_name',\n                      agg_measure = 'rarity',\n                      num_walks = 200,\n                      walk_mode = 'bit',\n                      path_length = 2)\n\n```\n\nInstead of initializing a new model, you can also load a saved model:\n\n```python\nTxGNN.load_pretrained('./model_ckpt')\n```\n\nTo do pre-training using link prediction for all edge types, you can type:\n\n```python\nTxGNN.pretrain(n_epoch = 2, \n               learning_rate = 1e-3,\n               batch_size = 1024, \n               train_print_per_n = 20)\n```\n\nLastly, to do finetuning on drug-disease relation with metric learning, you can type:\n\n```python\nTxGNN.finetune(n_epoch = 500, \n               learning_rate = 5e-4,\n               train_print_per_n = 5,\n               valid_per_n = 20,\n               save_name = finetune_result_path)\n```\n\nTo save the trained model, you can type:\n\n```python\nTxGNN.save_model('./model_ckpt')\n```\n\nTo evaluate the model on the entire test set using disease-centric evaluation, you can type:\n\n```python\nresult = TxEval.eval_disease_centric(disease_idxs = 'test_set', \n                                     show_plot = False, \n                                     verbose = True, \n                                     save_result = True,\n                                     return_raw = False,\n                                     save_name = 'SAVE_PATH')\n\n```\n\nIf you want to look at specific disease, you can also do:\n\n```python\nresult = TxEval.eval_disease_centric(disease_idxs = [9907.0, 12787.0], \n                                     relation = 'indication', \n                                     save_result = False)\n```\n\n\nAfter training a satisfying link prediction model, we can also train graph XAI model by:\n\n```python\nTxGNN.train_graphmask(relation = 'indication',\n                      learning_rate = 3e-4,\n                      allowance = 0.005,\n                      epochs_per_layer = 3,\n                      penalty_scaling = 1,\n                      valid_per_n = 20)\n```\n\nYou can retrieve and save the graph XAI gates (whether or not an edge is important) into a pkl file located as `SAVED_PATH/'graphmask_output_RELATION.pkl'`:\n\n```python\ngates = TxGNN.retrieve_save_gates('SAVED_PATH')\n```\n\nOf course, you can save and load graphmask model as well via:\n\n```python\nTxGNN.save_graphmask_model('./graphmask_model_ckpt')\nTxGNN.load_pretrained_graphmask('./graphmask_model_ckpt')\n\n```\n\n\n### Cite Us\n\n```\n```",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mims-harvard/TxGNN",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "TxGNN",
            "package_url": "https://pypi.org/project/TxGNN/",
            "platform": null,
            "project_url": "https://pypi.org/project/TxGNN/",
            "project_urls": {
                "Homepage": "https://github.com/mims-harvard/TxGNN"
            },
            "release_url": "https://pypi.org/project/TxGNN/0.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "TxGNN",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14859734,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1536864cd4088c05a8d73d55c5b4342b",
                    "sha256": "5dcd7458fb129fbd5e057f0f76212ac589c59adb73d0331bc5ce1923c956e090"
                },
                "downloads": -1,
                "filename": "TxGNN-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "1536864cd4088c05a8d73d55c5b4342b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 37180,
                "upload_time": "2022-08-24T05:39:31",
                "upload_time_iso_8601": "2022-08-24T05:39:31.019276Z",
                "url": "https://files.pythonhosted.org/packages/de/9a/a198077a78a3cd7a618a77a8b17020242309f404296647c83bbccf145a13/TxGNN-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}