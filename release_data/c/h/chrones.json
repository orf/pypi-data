{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Chrones",
            "package_url": "https://pypi.org/project/Chrones/",
            "platform": null,
            "project_url": "https://pypi.org/project/Chrones/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/Chrones/0.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953358,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3778407df95efbaec6297b38aef3bf45",
                    "sha256": "c0c2a8eec87c1738b4ad91deeeab08d92e0ed7825674adb59c72195f55d84b6c"
                },
                "downloads": -1,
                "filename": "Chrones-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3778407df95efbaec6297b38aef3bf45",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 5145,
                "upload_time": "2022-12-01T09:02:55",
                "upload_time_iso_8601": "2022-12-01T09:02:55.695766Z",
                "url": "https://files.pythonhosted.org/packages/a3/60/6609626a4fe71b3071a4dcbe22b1f252aee50b7e6a0aaf7db7a1718ed52e/Chrones-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "574a69e4bf5fd382faa0f89592221d15",
                    "sha256": "5fa2791f0c5b83f28a74fbaf4d22e2db16bf566e454f2f36c294c101bbc2935c"
                },
                "downloads": -1,
                "filename": "Chrones-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "574a69e4bf5fd382faa0f89592221d15",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 8069,
                "upload_time": "2022-12-01T09:02:57",
                "upload_time_iso_8601": "2022-12-01T09:02:57.474666Z",
                "url": "https://files.pythonhosted.org/packages/a9/70/8b234209614c5968fa363c78faecf1c2d77ba55c651884b7a189fa92d63b/Chrones-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Vincent Jacques",
            "author_email": "vincent@vincent-jacuqes.net",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "<!--\nCopyright 2020-2022 Laurent Cabaret\nCopyright 2020-2022 Vincent Jacques\n-->\n\n*Chrones* is a software development tool to visualize runtime statistics (CPU percentage, GPU percentage, memory usage, *etc.*) about your program and correlate them with the phases of your program.\n\nIt aims at being very simple to use and provide useful information out-of-the box *and* at being customizable to your specific use cases.\n\nHere is an example of graph produced by *Chrones* about a shell script launching a few executables (single-threaded, custom multi-threaded, OpenMP multi-threaded, and CUDA):\n\n@todo Insert example image\n\n*Chrones* was sponsored by [Laurent Cabaret](https://cabaretl.pages.centralesupelec.fr/cv/) from the [MICS](http://www.mics.centralesupelec.fr/) and written by [Vincent Jacques](https://vincent-jacques.net).\n\n@todo (Laurent) Review the paragraph about sponsoring above\n\nIt's licensed under the [MIT license](http://choosealicense.com/licenses/mit/).\nIts [documentation and source code](https://github.com/jacquev6/Chrones) are on GitHub.\n\n@todo (Laurent) Is MIT license above OK?\n\nQuestions? Remarks? Bugs? Want to contribute? [Open an issue](https://github.com/jacquev6/Chrones/issues)!\n\n<!-- @todo Insert paragraph about Chrones' clients? -->\n\n# Conceptual overview\n\n*Chrones* consist of three parts: instrumentation (optional), monitoring and reporting.\n\nThe instrumentation part of *Chrones* runs inside your program after you've modified it.\nIt's used as a library for your programming language.\nTo use it, you add one-liners to the functions you want to know about.\nAfter that, your program logs insider timing information about these functions.\n\nThe monitoring part is a wrapper around your program.\nIt runs your program as you instruct it to, preserving its access to the standard input and outputs, the environment, and its command-line.\nWhile doing so, it monitors your program's whole process tree and logs resource usage metrics.\n\nThe reporting part of *Chrones* reads the logs produced by the instrumentation and monitoring, and produces human-readable reports including graphs.\n\nThe instrumentation part of *Chrones* is completely optional.\nYou can use the monitoring part on non-instrumented programs,\nor even on partially instrumented programs like a shell script calling an instrumented executable and a non-instrumented executable.\nThe graphs produced by *Chrones*' reporting will just miss information about your program's phases.\n\nWe've chosen the command-line as the main user interface for *Chrones*' to allow easy integration into your automated workflows.\nIt can also be used as a Python library for advanced use-cases.\n\nPlease note that *Chrones* currently only works on Linux.\nFurthermore, the C++ instrumentation requires g++.\nWe would gladly accept contributions that extend *Chrones*' usability.\n\n*Chrones*' instrumentation libraries are available for Python, C++ and the shell language.\n\n# Expected performance\n\nThe instrumentation part of *Chrones* accurately measures and reports durations down to the millisecond.\nIts monitoring part takes samples a few times per second.\nNo nanoseconds in this project; *Chrones* is well suited for programs that run for longer than a dozen seconds.\n\nOverhead introduced by *Chrones* in C++ programs is less than a second per million instrumented blocks.\nDon't use it for functions called billions of times.\n\n# Get started\n\n## Install *Chrones*\n\nThe monitoring and reporting parts of *Chrones* are distributed as a [Python package on PyPI](https://pypi.org/project/Chrones/).\nInstall them with `pip install Chrones`.\n\n<details>\n<summary>And at the moment that's all you need.</summary>\n\nThe instrumentation parts are distributed in language-specific ways.\n\nThe Python version comes with the `Chrones` Python packages you've just installed.\n\nThe C++ and shell languages don't really have package managers, so the C++ and shell versions happen to also be distributed within the Python package.\n\nVersions for other languages will be distributed using the appropriate packages managers.\n</details>\n\n## (Optional) Instrument your code\n\n### Concepts\n\nThe instrumentation libraries are based on the following concepts:\n\n#### Coordinator\n\nThe *coordinator* is a single object that centralizes measurements and writes them into a log file.\n\nIt also takes care of enabling or disabling instrumentation: the log will be created if and only if it detects it's being run inside *Chrones*' monitoring.\nThis lets you run your programm outside *Chrones*' monitoring as if it was not instrumented.\n\n#### Chrone\n\nA *chrone* is the main instrumentation tool.\nYou can think of it as a stopwatch that logs an event when it's started and another event when it's stoped.\n\nMultiple chrones can be nested.\nThis makes them particularly suitable to instrument [structured code](https://en.wikipedia.org/wiki/Structured_programming) with blocks and functions (*i.e.* the vast majority of modern programs).\nFrom the log of the nested chrones, *Chrones*' reporting is able to reconstruct the evolution of the call stack(s) of the program.\n\n@todo Talk about name, label, and index\n\n#### Mini-chrone\n\n@todo Define, explain the added value\n\n### Language-specific instructions\n\nThe *Chrones* instrumentation library is currently available for the following languages:\n\n#### Shell\n\nFirst, import *Chrones* and initialize the coordinator with:\n\n    eval $(chrones shell activate program-name)\n\nwhere `program-name` is... the name of your program.\n\nYou can then use the two functions `chrones_start` and `chrones_stop` to instrument your shell functions:\n\n    function foo {\n        chrones_start foo\n\n        # Do something\n\n        chrones_stop\n    }\n\n@todo Name, label, and index\n\n#### C++\n\nFirst, `#include <chrones.hpp>`.\nThe header is distributed within *Chrones*' Python package.\nYou can get is location with `chrones config c++ header-location`, that you can pass to the `-I` option of you compiler.\nFor example, `g++ foo.cpp -I$(chrones config c++ header-location) -o foo`.\n\nCreate the coordinator at global scope, before your `main` function:\n\n    CHRONABLE(\"program-name\")\n\n    int main() {\n        // Do something\n    }\n\nwhere `program-name` is... the name of your program.\n\nThen you can instrument functions and blocks using the `CHRONE` macro:\n\n    void foo() {\n        CHRONE();\n\n        // Do something\n    }\n\n    void bar() {\n        // Do something\n\n        {\n            CHRONE(\"block label\");\n        }\n    }\n\n*Chrones*' instrumentation can be statically disabled by passing `-DCHRONES_DISABLED` to the compiler.\nIn that case, all macros provided by the header will be empty and your code will compile exactly as if it was not using *Chrones*.\n\n@todo Name, label, and index\n\n#### Python\n\nFirst, import *Chrones*' decorator: `from chrones.instumentation import chrone`.\n\nThen, decorate your functions:\n\n    @chrone\n    def foo():\n        # Do something\n\nYou can also instrument blocks that are not functions:\n\n    with chrone(\"bar\"):\n        # Do something\n\n@todo Name, label, and index\n\n## Run using `chrones run`\n\nCompile your executable(s) if required.\nThen launch them using `chrones run -- your_program --with --its --options`.\n\nEverything before the `--` is interpreted as options for `chrones run`.\nEverything after is passed as-is to your program.\nThe standard input and output are passed unchanged to your program.\n\nHave a look at `chrones run --help` for its detailed usage.\n\n## Generate report\n\nRun `chrones report` to generate a report in the current directory.\n\nHave a look at `chrones report --help` for its detailed usage.\n\n## Use *Chrones* as a library\n\nOut of the box, *Chrones* produces generic reports and graphs, but you can customize them by using *Chrones* as a Python library.\n\n@todo Describe\n\n# Code of the example image\n\nAs a complete example, here is the code of the shell script that was used to generate the example image at the top of this file:\n\n@todo Create shell script\n\nAnd the various executables called by the script:\n\n@todo Create code for each executable\n\nThis code is compiled using these commands:\n\n@todo Create shell script for compiling\n\nAnd executed like this:\n\n@todo Create shell script for running\n\n@todo Generate the example image using codes and commands above (literraly, by automating extracting them from this very file during `./run-development-cycle.sh`)\n\n# Developing Chrones itself\n\nDependencies:\n- a reasonably recent version of Docker\n- a reasonably recent version of Bash\n\nTo build everything and run all tests:\n\n    ./run-development-cycle.sh --long\n\nTo skip particularly long tests:\n\n    ./run-development-cycle.sh\n\nOr even:\n\n    ./run-development-cycle.sh --quick\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/jacquev6/Chrones",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Chrones",
            "package_url": "https://pypi.org/project/Chrones/",
            "platform": null,
            "project_url": "https://pypi.org/project/Chrones/",
            "project_urls": {
                "Homepage": "https://github.com/jacquev6/Chrones"
            },
            "release_url": "https://pypi.org/project/Chrones/0.0.2/",
            "requires_dist": [
                "click"
            ],
            "requires_python": "",
            "summary": "Software development tool to visualize runtime statistics about your program and correlate them with its phases",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953358,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "637981590af3351ff9a313b406e7f662",
                    "sha256": "b4628db83ff6ccd20bc0e2d0ce7d19de2658339a9755454e994d828a47e3df15"
                },
                "downloads": -1,
                "filename": "Chrones-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "637981590af3351ff9a313b406e7f662",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 9187,
                "upload_time": "2022-12-01T10:18:42",
                "upload_time_iso_8601": "2022-12-01T10:18:42.265129Z",
                "url": "https://files.pythonhosted.org/packages/73/36/82322a2e208d5c12b0fbdf4132bf7ecdcd59a2b82fb52aa7e4a16e9dcc3d/Chrones-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d5110f487fe0ab183906d93c00417554",
                    "sha256": "31544f295be80b6a79f62200f754bdcb1da48cd457087c1248cfa7fb2105fe6d"
                },
                "downloads": -1,
                "filename": "Chrones-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "d5110f487fe0ab183906d93c00417554",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 14375,
                "upload_time": "2022-12-01T10:18:44",
                "upload_time_iso_8601": "2022-12-01T10:18:44.028394Z",
                "url": "https://files.pythonhosted.org/packages/a3/69/fca9ec843e2767f54c7155d4370127238d997b2a69dc54b24b01b94f6cf3/Chrones-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}