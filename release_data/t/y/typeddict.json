{
    "0.1.0": {
        "info": {
            "author": "abersheeran",
            "author_email": "me@abersheeran.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# TypedDict\n\nUse `TypedDict` replace pydantic definitions.\n\n## Why?\n\n```python\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    name: str\n    age: int = Field(default=0, ge=0)\n    email: Optional[str]\n\n\nuser: User = {\"name\": \"John\", \"age\": 30}  # Type check, error!\nprint(repr(user))\n```\n\nIn index.py or other framework, maybe you write the following code. And then got an type check error in `Annotated[Message, ...]`, because the type of `{\"message\": \"...\"}` is not `Message`.\n\n```python\nclass Message(BaseModel):\n    message: str\n\n\n@routes.http.get(\"/user\")\nasync def create_user(\n    ...\n) -> Annotated[Message, JSONResponse[200, {}, Message]]:\n    ...\n    return {\"message\": \"Created successfully!\"}\n```\n\n## Usage\n\nUse `Annotated` to provide extra information to `pydantic.Field`. Other than that, everything conforms to the general usage of `TypedDict`. Using `to_pydantic` will create a semantically equivalent pydantic model. You can use it in frameworks like [index.py](https://github.com/index-py/index.py) / [fastapi](https://fastapi.tiangolo.com/) / [xpresso](https://github.com/adriangb/xpresso).\n\n```python\nfrom typing_extensions import TypedDict, NotRequired, Annotated\n\nimport typeddict\nfrom typeddict import Metadata, Extra\n\n\nclass User(TypedDict):\n    name: str\n    age: Annotated[int, Metadata(default=0), Extra(ge=0)]\n    email: NotRequired[str]\n\n\nuser: User = {\"name\": \"John\", \"age\": 30}  # Type check, pass!\nprint(repr(user))\n\n# Then use it in index.py / fastapi or other frameworks\nUserModel = typeddict.to_pydantic(User)\nprint(repr(UserModel.parse_obj(user)))\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/abersheeran/typeddict",
            "keywords": "",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "typeddict",
            "package_url": "https://pypi.org/project/typeddict/",
            "platform": null,
            "project_url": "https://pypi.org/project/typeddict/",
            "project_urls": {
                "Homepage": "https://github.com/abersheeran/typeddict",
                "Repository": "https://github.com/abersheeran/typeddict"
            },
            "release_url": "https://pypi.org/project/typeddict/0.1.0/",
            "requires_dist": [
                "typing-extensions (>=4.3.0)",
                "pydantic (>=1.9.1,<2.0.0)"
            ],
            "requires_python": ">=3.7,<4.0",
            "summary": "Use `TypedDict` replace pydantic definitions.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14568015,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "47c2a25c9c580f8f4c17ac5090b05623",
                    "sha256": "037c37e17022893dcb9ced3ced7572250991c7084e886822fe24cabfcc640b0c"
                },
                "downloads": -1,
                "filename": "typeddict-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "47c2a25c9c580f8f4c17ac5090b05623",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<4.0",
                "size": 7747,
                "upload_time": "2022-07-27T16:54:30",
                "upload_time_iso_8601": "2022-07-27T16:54:30.273200Z",
                "url": "https://files.pythonhosted.org/packages/8e/20/8617916376cd442f5ddb0afbfac68c1a7abc0bd512b4f0a21ea8ae3a5628/typeddict-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a228c4f54e638568569d26f7f77bbbf7",
                    "sha256": "52733cb2d37bcfd4ee7bfe616447b88e814630522904a678c3d833733d5deb3f"
                },
                "downloads": -1,
                "filename": "typeddict-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a228c4f54e638568569d26f7f77bbbf7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<4.0",
                "size": 7286,
                "upload_time": "2022-07-27T16:54:32",
                "upload_time_iso_8601": "2022-07-27T16:54:32.800337Z",
                "url": "https://files.pythonhosted.org/packages/62/85/b5dac0ab79cdf11b3050e7c57f4d10cf7f03cf0f0c51bdda6cf51d3c0002/typeddict-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}