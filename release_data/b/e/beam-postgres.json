{
    "0.1.0": {
        "info": {
            "author": "Adam Medzi\u0144ski",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9",
                "Topic :: Software Development :: Libraries",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# beam-postgres\n\nLight IO transforms for Postgres read/write in Apache Beam pipelines.\n\n## Goal\n\nThe project aims to provide highly performant and customizable transforms and is\nnot intended to support many different SQL database engines.\n\n## Features\n\n- `ReadFromPostgres` and `WriteToPostgres` transforms\n- Records can be mapped to tuples, dictionaries or dataclasses\n- Writes are in configurable batches\n\n## Usage\n\nPrinting data from the database table:\n\n```python\nimport apache_beam as beam\nfrom psycopg.rows import dict_row\n\nfrom beam_postgres.io import ReadFromPostgres\n\nwith beam.Pipeline() as p:\n    data = p | \"Reading example records from database\" >> ReadFromPostgres(\n        \"host=localhost dbname=examples user=postgres password=postgres\",\n        \"select id, data from source\",\n        dict_row,\n    )\n    data | \"Writing to stdout\" >> beam.Map(print)\n\n```\n\nWriting data to the database table:\n\n```python\nfrom dataclasses import dataclass\n\nimport apache_beam as beam\nfrom apache_beam.options.pipeline_options import PipelineOptions\n\nfrom beam_postgres.io import WriteToPostgres\n\n\n@dataclass\nclass Example:\n    data: str\n\n\nwith beam.Pipeline(options=PipelineOptions()) as p:\n    data = p | \"Reading example records\" >> beam.Create(\n        [\n            Example(\"example1\"),\n            Example(\"example2\"),\n        ]\n    )\n    data | \"Writing example records to database\" >> WriteToPostgres(\n        \"host=localhost dbname=examples user=postgres password=postgres\",\n        \"insert into sink (data) values (%s)\",\n    )\n\n```\n\nSee [here][examples] for more examples.\n\n[examples]: https://github.com/medzin/beam-postgres/tree/main/examples\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "apache beam,beam,postgres,postgresql",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beam-postgres",
            "package_url": "https://pypi.org/project/beam-postgres/",
            "platform": null,
            "project_url": "https://pypi.org/project/beam-postgres/",
            "project_urls": {
                "Homepage": "https://github.com/medzin/beam-postgres"
            },
            "release_url": "https://pypi.org/project/beam-postgres/0.1.0/",
            "requires_dist": [
                "apache-beam (<3,>=2.42.0)",
                "psycopg[binary] (<4,>=3.1.4)",
                "bumpver ; extra == 'dev'",
                "pip-tools ; extra == 'dev'",
                "tox ; extra == 'dev'",
                "black ; extra == 'tests'",
                "flake8 ; extra == 'tests'",
                "isort ; extra == 'tests'",
                "mypy ; extra == 'tests'",
                "pytest (>=7) ; extra == 'tests'"
            ],
            "requires_python": ">=3.9",
            "summary": "Light IO transforms for Postgres read/write in Apache Beam pipelines.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15766701,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e4698df80088a1946d927790195c81f1",
                    "sha256": "534a2a79996ee284922b3783857711d4316e15886ce1368ce4aea0bfbf6703d1"
                },
                "downloads": -1,
                "filename": "beam_postgres-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e4698df80088a1946d927790195c81f1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 7783,
                "upload_time": "2022-11-14T20:21:37",
                "upload_time_iso_8601": "2022-11-14T20:21:37.866643Z",
                "url": "https://files.pythonhosted.org/packages/36/b9/12f90104f450bfee0e5c4e3e32ae4c2787a62482bd705a13560e4d8cdbdf/beam_postgres-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "028b9dfb9aefdbc423eb7b512b9b64d0",
                    "sha256": "57413a66e2dfcb90486d181136b1be9669a8a871c9bd7c771fd98c4c8def0e26"
                },
                "downloads": -1,
                "filename": "beam-postgres-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "028b9dfb9aefdbc423eb7b512b9b64d0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 7601,
                "upload_time": "2022-11-14T20:21:40",
                "upload_time_iso_8601": "2022-11-14T20:21:40.172228Z",
                "url": "https://files.pythonhosted.org/packages/6e/3e/37a1224dc6cb09f828d994818ade9fc7305408cbb8eaf0f48c9ed2b9ebe6/beam-postgres-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}