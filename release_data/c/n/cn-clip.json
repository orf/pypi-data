{
    "1.0": {
        "info": {
            "author": "OFA-Sys",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OFA-Sys",
            "keywords": "clip",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cn-clip",
            "package_url": "https://pypi.org/project/cn-clip/",
            "platform": null,
            "project_url": "https://pypi.org/project/cn-clip/",
            "project_urls": {
                "Homepage": "https://github.com/OFA-Sys"
            },
            "release_url": "https://pypi.org/project/cn-clip/1.0/",
            "requires_dist": [
                "numpy",
                "tqdm",
                "six",
                "timm",
                "lmdb (==1.3.0)",
                "torch (>=1.7.1)",
                "torchvision"
            ],
            "requires_python": "",
            "summary": "the Chinese version of CLIP.",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15708880,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1ca588a3258f249bcf331fc453d94542",
                    "sha256": "8bbeca347babbdcbea740e809becb35cf344aac992830007c4547da058a0a862"
                },
                "downloads": -1,
                "filename": "cn_clip-1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1ca588a3258f249bcf331fc453d94542",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 64294,
                "upload_time": "2022-07-14T11:54:53",
                "upload_time_iso_8601": "2022-07-14T11:54:53.039781Z",
                "url": "https://files.pythonhosted.org/packages/6e/9f/953adb3027601d771c4ccbea3a4fcf76ecdf589e0abebc6039a731f53dd7/cn_clip-1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "14cdaa8a93a2b4c82590b0f928921643",
                    "sha256": "a2a97d22b01b7a29788cf4611949d31c2b2bbfa36bb4a628f22b7800fb1b3a60"
                },
                "downloads": -1,
                "filename": "cn_clip-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "14cdaa8a93a2b4c82590b0f928921643",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 77349,
                "upload_time": "2022-07-14T11:54:55",
                "upload_time_iso_8601": "2022-07-14T11:54:55.247251Z",
                "url": "https://files.pythonhosted.org/packages/04/da/b2c91e1d8425dc53675573b7694986489642546e219ea4d5bfc28c05f5f9/cn_clip-1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2": {
        "info": {
            "author": "OFA-Sys",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OFA-Sys",
            "keywords": "clip",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cn-clip",
            "package_url": "https://pypi.org/project/cn-clip/",
            "platform": null,
            "project_url": "https://pypi.org/project/cn-clip/",
            "project_urls": {
                "Homepage": "https://github.com/OFA-Sys"
            },
            "release_url": "https://pypi.org/project/cn-clip/1.2/",
            "requires_dist": [
                "numpy",
                "tqdm",
                "six",
                "timm",
                "lmdb (==1.3.0)",
                "torch (>=1.7.1)",
                "torchvision"
            ],
            "requires_python": "",
            "summary": "the Chinese version of CLIP.",
            "version": "1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15708880,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1d6c2c4b605d591b934ca4774090e8e9",
                    "sha256": "fbe360e4c8a871efa90f5c3839b2faefd27ab49d4bcad23f00efc0daff3d6d44"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1d6c2c4b605d591b934ca4774090e8e9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 179584,
                "upload_time": "2022-11-03T05:58:10",
                "upload_time_iso_8601": "2022-11-03T05:58:10.575875Z",
                "url": "https://files.pythonhosted.org/packages/3e/ec/e58c00d10f5a6b3d82465591f93bc8ff5b5b6531f85e31dbf0cad31719a3/cn_clip-1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a01cb75b1e7e69dbad1094f5e65a8d30",
                    "sha256": "c6cdef3138297b7a53caae5f3c0419770c0a15b6c1e94af8a27f04ab9c908195"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "a01cb75b1e7e69dbad1094f5e65a8d30",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 123079,
                "upload_time": "2022-11-03T05:58:12",
                "upload_time_iso_8601": "2022-11-03T05:58:12.680904Z",
                "url": "https://files.pythonhosted.org/packages/f1/a7/3946daa7708702fb793d54fb1dd8e25312cc787fab076da1e77c7e8e8a96/cn_clip-1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2.1": {
        "info": {
            "author": "OFA-Sys",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OFA-Sys",
            "keywords": "clip",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cn-clip",
            "package_url": "https://pypi.org/project/cn-clip/",
            "platform": null,
            "project_url": "https://pypi.org/project/cn-clip/",
            "project_urls": {
                "Homepage": "https://github.com/OFA-Sys"
            },
            "release_url": "https://pypi.org/project/cn-clip/1.2.1/",
            "requires_dist": [
                "numpy",
                "tqdm",
                "six",
                "timm",
                "lmdb (==1.3.0)",
                "torch (>=1.7.1)",
                "torchvision"
            ],
            "requires_python": "",
            "summary": "the Chinese version of CLIP.",
            "version": "1.2.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15708880,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b99eee55f46cf7c57e498b38e3d60fdb",
                    "sha256": "572ce855609ffad14215b6b6c289fa34b84c100545d9e9832c90cc6a7d8ba478"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b99eee55f46cf7c57e498b38e3d60fdb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 180124,
                "upload_time": "2022-11-03T11:51:25",
                "upload_time_iso_8601": "2022-11-03T11:51:25.053824Z",
                "url": "https://files.pythonhosted.org/packages/fc/5e/37761e142a1e1cfa4732f06d02e42c458c18de8885e32f5a38deb4811075/cn_clip-1.2.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0a9bf3393f72720fe1f8f2fe6094d2d0",
                    "sha256": "7e3518bcdbc73a97903c70f4b8fea9187741e167fac02d34a3fdae4090724b71"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.1.tar.gz",
                "has_sig": false,
                "md5_digest": "0a9bf3393f72720fe1f8f2fe6094d2d0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 124844,
                "upload_time": "2022-11-03T11:51:26",
                "upload_time_iso_8601": "2022-11-03T11:51:26.795441Z",
                "url": "https://files.pythonhosted.org/packages/b3/0a/f0f7c6769f559c3d7e3b326e8fbde4d1bfe923b801e74b6e93c01d182a7d/cn_clip-1.2.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2.2": {
        "info": {
            "author": "OFA-Sys",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OFA-Sys",
            "keywords": "clip",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cn-clip",
            "package_url": "https://pypi.org/project/cn-clip/",
            "platform": null,
            "project_url": "https://pypi.org/project/cn-clip/",
            "project_urls": {
                "Homepage": "https://github.com/OFA-Sys"
            },
            "release_url": "https://pypi.org/project/cn-clip/1.2.2/",
            "requires_dist": [
                "numpy",
                "tqdm",
                "six",
                "timm",
                "lmdb (==1.3.0)",
                "torch (>=1.7.1)",
                "torchvision"
            ],
            "requires_python": "",
            "summary": "the Chinese version of CLIP.",
            "version": "1.2.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15708880,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "907c5a345d223dc88df2e079ecea4611",
                    "sha256": "a5ade3adb4049a08e48637ea5663609d7a37e488db0d19ce18b2a7d95e2285f9"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "907c5a345d223dc88df2e079ecea4611",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 180119,
                "upload_time": "2022-11-03T11:55:29",
                "upload_time_iso_8601": "2022-11-03T11:55:29.034909Z",
                "url": "https://files.pythonhosted.org/packages/df/b6/83adccb7ed3b6eb8b48faa59d94137d82cf73eb4633930a4928292d21117/cn_clip-1.2.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "49719f6387729ed3b0ecfdd8beb3e748",
                    "sha256": "4f54b2492566545197b2dc45149fdb44765d987433fef4fd77debcc813949fca"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.2.tar.gz",
                "has_sig": false,
                "md5_digest": "49719f6387729ed3b0ecfdd8beb3e748",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 124848,
                "upload_time": "2022-11-03T11:55:31",
                "upload_time_iso_8601": "2022-11-03T11:55:31.193559Z",
                "url": "https://files.pythonhosted.org/packages/a3/db/478d0021c37d918b8d2d937e02e68175b6eda60930ffdb419f4b0a37e3b8/cn_clip-1.2.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2.3": {
        "info": {
            "author": "OFA-Sys",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "[**\u4e2d\u6587\u8bf4\u660e**](README.md) | [**English**](README_En.md)\n\n<p align=\"center\">\n    <br>\n    <img src=\"assets/Chinese_CLIP_logo_tp_path.svg\" width=\"400\" />\n    <br>\n<p>\n<br>\n\n<p align=\"center\">\n        <a href=\"https://www.modelscope.cn/models?name=clip&tasks=multi-modal-embedding\">ModelScope</a>&nbsp \uff5c &nbsp<a href=\"https://www.modelscope.cn/studios/damo/chinese_clip_applications/summary\">Demo</a>&nbsp \uff5c &nbsp<a href=\"https://arxiv.org/abs/2211.01335\">Paper </a>&nbsp \uff5c &nbspBlog\n</p>\n<br><br>\n\nThis is the Chinese version of CLIP. We use a large-scale internal Chinese image-text pair dataset (~200M) to train the model, and we hope that it can help users to achieve cross-modal retrieval and image representation generation for Chinese data. This repo is based on <b>[open_clip project](https://github.com/mlfoundations/open_clip)</b>. We have made some optimization for better performance on Chinese data, and we provide the details in the following. \n<br><br>\n\n## News\n* 2022.11.3 **Reopened**. Released RN50, ViT-H-14.\n* 2022.9.22 Finished ViT-L-14, ViT-L-14-336 pretraining.\n* 2022.7.15 **Temporarily closed opensource.**\n* 2022.7.13 Released API for Chinese-CLIP, which facitilates usage of our CLIP models.\n* 2022.7.8 Released the project Chinese-CLIP!\n<br><br>\n\n<span id=\"model_card\"></span>\n## Model Card\nCurrently, we release 5 different sizes of Chinese-CLIP models. Detailed information and download link of each Chinese-CLIP model are provided below:\n\n<table border=\"1\" width=\"100%\">\n    <tr align=\"center\">\n        <th>Model</th><th>Ckpt</th><th>#Params (All)</th><th>Backbone (I)</th><th>#Params (I)</th><th>Backbone (T)</th><th>#Params (T)</th><th>Resolution</th>\n    </tr>\n    <tr align=\"center\">\n        <td>CN-CLIP<sub>RN50</sub></td><td><a href=\"https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/checkpoints/clip_cn_rn50.pt\">Download</a></td><td>77M</td><td>ResNet50</td><td>38M</td><td>RBT3</td><td>39M</td><td>224</td>\n    </tr>\n    <tr align=\"center\">\n        <td>CN-CLIP<sub>ViT-B/16</sub></td><td><a href=\"https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/checkpoints/clip_cn_vit-b-16.pt\">Download</a></td><td>188M</td><td>ViT-B/16</td><td>86M</td><td>RoBERTa-wwm-Base</td><td>102M</td><td>224</td>\n    </tr>\n    <tr align=\"center\">\n        <td>CN-CLIP<sub>ViT-L/14</sub></td><td><a href=\"https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/checkpoints/clip_cn_vit-l-14.pt\">Download</a></td><td>406M</td><td>ViT-L/14</td><td>304M</td><td>RoBERTa-wwm-Base</td><td>102M</td><td>224</td>\n    </tr>\n    <tr align=\"center\">\n        <td>CN-CLIP<sub>ViT-L/14@336px</sub></td><td><a href=\"https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/checkpoints/clip_cn_vit-l-14-336.pt\">Download</a></td><td>407M</td><td>ViT-L/14</td><td>304M</td><td>RoBERTa-wwm-Base</td><td>102M</td><td>336</td>\n    </tr>\n    <tr align=\"center\">\n        <td>CN-CLIP<sub>ViT-H/14</sub></td><td><a href=\"https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/checkpoints/clip_cn_vit-h-14.pt\">Download</a></td><td>958M</td><td>ViT-H/14</td><td>632M</td><td>RoBERTa-wwm-Large</td><td>326M</td><td>224</td>\n    </tr>\n</table>\n<br></br>\n\n## Results\nWe conducted zero-shot inference and finetuning experiments on MUGE Retrieval, Flickr30K-CN and COCO-CN for the evaluation of cross-modal retrieval, and conducted experiments on 10 image classification datasets of the ELEVATER benchmark for the evaluation of zero-shot image classification. Results are shown below. Due to space limitation, here we only list the performance of the largest Chinese-CLIP and baseline models. For detailed performance of each Chinese-CLIP model size, please refer to [Results.md](Results.md).\n\n**MUGE Text-to-Image Retrieval**:\n<table border=\"1\" width=\"100%\">\n    <tr align=\"center\">\n        <th>Setup</th><th colspan=\"4\">Zero-shot</th><th colspan=\"4\">Finetune</th>\n    </tr>\n    <tr align=\"center\">\n        <td>Metric</td><td>R@1</td><td>R@5</td><td>R@10</td><td>MR</td><td>R@1</td><td>R@5</td><td>R@10</td><td>MR</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">Wukong</td><td>42.7</td><td>69.0</td><td>78.0</td><td>63.2</td><td>52.7</td><td>77.9</td><td>85.6</td><td>72.1</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">R2D2</td><td>49.5</td><td>75.7</td><td>83.2</td><td>69.5</td><td>60.1</td><td>82.9</td><td>89.4</td><td>77.5</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">CN-CLIP</td><td>63.0</td><td>84.1</td><td>89.2</td><td>78.8</td><td>68.9</td><td>88.7</td><td>93.1</td><td>83.6</td>\n    </tr>\n</table>\n<br>\n\n**Flickr30K-CN Retrieval**:\n<table border=\"1\" width=\"120%\">\n\t<tr align=\"center\">\n        <th>Task</th><th colspan=\"6\">Text-to-Image</th><th colspan=\"6\">Image-to-Text</th>\n    </tr>\n    <tr align=\"center\">\n        <th>Setup</th><th colspan=\"3\">Zero-shot</th><th colspan=\"3\">Finetune</th><th colspan=\"3\">Zero-shot</th><th colspan=\"3\">Finetune</th>\n    </tr>\n    <tr align=\"center\">\n        <td>Metric</td><td>R@1</td><td>R@5</td><td>R@10</td><td>R@1</td><td>R@5</td><td>R@10</td><td>R@1</td><td>R@5</td><td>R@10</td><td>R@1</td><td>R@5</td><td>R@10</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">Wukong</td><td>51.7</td><td>78.9</td><td>86.3</td><td>77.4</td><td>94.5</td><td>97.0</td><td>76.1</td><td>94.8</td><td>97.5</td><td>92.7</td><td>99.1</td><td>99.6</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">R2D2</td><td>60.9</td><td>86.8</td><td>92.7</td><td>84.4</td><td>96.7</td><td>98.4</td><td>77.6</td><td>96.7</td><td>98.9</td><td>95.6</td><td>99.8</td><td>100.0</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">CN-CLIP</td><td>71.2</td><td>91.4</td><td>95.5</td><td>83.8</td><td>96.9</td><td>98.6</td><td>81.6</td><td>97.5</td><td>98.8</td><td>95.3</td><td>99.7</td><td>100.0</td>\n    </tr>\n</table>\n<br>\n\n**COCO-CN Retrieval**:\n<table border=\"1\" width=\"100%\">\n\t<tr align=\"center\">\n        <th>Task</th><th colspan=\"6\">Text-to-Image</th><th colspan=\"6\">Image-to-Text</th>\n    </tr>\n    <tr align=\"center\">\n        <th>Setup</th><th colspan=\"3\">Zero-shot</th><th colspan=\"3\">Finetune</th><th colspan=\"3\">Zero-shot</th><th colspan=\"3\">Finetune</th>\n    </tr>\n    <tr align=\"center\">\n        <td>Metric</td><td>R@1</td><td>R@5</td><td>R@10</td><td>R@1</td><td>R@5</td><td>R@10</td><td>R@1</td><td>R@5</td><td>R@10</td><td>R@1</td><td>R@5</td><td>R@10</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">Wukong</td><td>53.4</td><td>80.2</td><td>90.1</td><td>74.0</td><td>94.4</td><td>98.1</td><td>55.2</td><td>81.0</td><td>90.6</td><td>73.3</td><td>94.0</td><td>98.0</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">R2D2</td><td>56.4</td><td>85.0</td><td>93.1</td><td>79.1</td><td>96.5</td><td>98.9</td><td>63.3</td><td>89.3</td><td>95.7</td><td>79.3</td><td>97.1</td><td>98.7</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"120%\">CN-CLIP</td><td>69.2</td><td>89.9</td><td>96.1</td><td>81.5</td><td>96.9</td><td>99.1</td><td>63.0</td><td>86.6</td><td>92.9</td><td>83.5</td><td>97.3</td><td>99.2</td>\n    </tr>\n</table>\n<br>\n\n**Zero-shot Image Classification**:\n<table border=\"1\" width=\"100%\">\n\t<tr align=\"center\">\n        <th>Task</th><th>CIFAR10</th><th>CIFAR100</th><th>DTD</th><th>EuroSAT</th><th>FER</th><th>FGVC</th><th>KITTI</th><th>MNIST</th><th>PC</th><th>VOC</th>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"150%\">GIT</td><td>88.5</td><td>61.1</td><td>42.9</td><td>43.4</td><td>41.4</td><td>6.7</td><td>22.1</td><td>68.9</td><td>50.0</td><td>80.2</td>\n    </tr>\n    \t<tr align=\"center\">\n        <td width=\"150%\">ALIGN</td><td>94.9</td><td>76.8</td><td>66.1</td><td>52.1</td><td>50.8</td><td>25.0</td><td>41.2</td><td>74.0</td><td>55.2</td><td>83.0</td>\n    </tr>\n\t<tr align=\"center\">\n        <td width=\"150%\">CLIP</td><td>94.9</td><td>77.0</td><td>56.0</td><td>63.0</td><td>48.3</td><td>33.3</td><td>11.5</td><td>79.0</td><td>62.3</td><td>84.0</td>\n    </tr>\n    \t<tr align=\"center\">\n        <td width=\"150%\">Wukong</td><td>95.4</td><td>77.1</td><td>40.9</td><td>50.3</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td>\n    </tr>\n    \t<tr align=\"center\">\n        <td width=\"150%\">CN-CLIP</td><td>96.0</td><td>79.7</td><td>51.2</td><td>52.0</td><td>55.1</td><td>26.2</td><td>49.9</td><td>79.4</td><td>63.5</td><td>84.9</td>\n    </tr>\n</table>\n<br><br>\n\n\n## Installation Requirements\nTo start with this project, make sure that your environment meets the requirements below:\n\n* python >= 3.6.4\n* pytorch >= 1.7.1 (with torchvision)\n* CUDA Version >= 10.1\n\nRun the following command to install required packages.\n\n```bash\npip install -r requirements.txt\n```\n<br><br>\n\n## API Use Case\nWe provide a simple code snippet to show how to use the API for Chinese-CLIP. For starters, please install cn_clip:\n```bash\n# to install the latest stable release\npip install cn_clip\n\n# or install from source code\ncd Chinese-CLIP/\npip install -e .\n```\nAfter installation, use Chinese CLIP as shown below:\n```python\nimport torch \nfrom PIL import Image\n\nimport cn_clip.clip as clip\nfrom cn_clip.clip import load_from_name, available_models\nprint(\"Available models:\", available_models())  \n# Available models: ['ViT-B-16', 'ViT-L-14', 'ViT-L-14-336', 'ViT-H-14', 'RN50']\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nmodel, preprocess = load_from_name(\"ViT-B-16\", device=device, download_root='./')\nmodel.eval()\nimage = preprocess(Image.open(\"examples/pokemon.jpeg\")).unsqueeze(0).to(device)\ntext = clip.tokenize([\"\u6770\u5c3c\u9f9f\", \"\u5999\u86d9\u79cd\u5b50\", \"\u5c0f\u706b\u9f99\", \"\u76ae\u5361\u4e18\"]).to(device)\n\nwith torch.no_grad():\n    image_features = model.encode_image(image)\n    text_features = model.encode_text(text)\n    # Normalize the features. Please use the normalized features for downstream tasks.\n    image_features /= image_features.norm(dim=-1, keepdim=True) \n    text_features /= text_features.norm(dim=-1, keepdim=True)      \n\n    logits_per_image, logits_per_text = model.get_similarity(image, text)\n    probs = logits_per_image.softmax(dim=-1).cpu().numpy()\n\nprint(\"Label probs:\", probs)  # [[1.268734e-03 5.436878e-02 6.795761e-04 9.436829e-01]]\n```\n\nHowever, if you are not satisfied with only using the API, move on for more details about training and inference. \n<br><br>\n\n\n## Getting Started\n\n### Code Organization\n\nAfter cloning this project, please create a new directory ```${DATAPATH}``` for datasets, checkpoints and logs\u3002A recommended workspace structure is demonstrated below\uff1a\n\n```\nChinese-CLIP/\n\u251c\u2500\u2500 run_scripts/\n\u2502   \u251c\u2500\u2500 muge_finetune_vit-b-16_rbt-base.sh\n\u2502   \u251c\u2500\u2500 flickr30k_finetune_vit-b-16_rbt-base.sh\n\u2502   \u2514\u2500\u2500 ...           # more scripts for finetuning and evaluation...\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 clip/\n    \u251c\u2500\u2500 eval/\n    \u251c\u2500\u2500 preprocess/\n    \u2514\u2500\u2500 training/\n\n${DATAPATH}\n\u251c\u2500\u2500 pretrained_weights/\n\u251c\u2500\u2500 experiments/\n\u2514\u2500\u2500 datasets/\n    \u251c\u2500\u2500 MUGE/\n    \u251c\u2500\u2500 flickr30k-cn/\n    \u2514\u2500\u2500 .../          # more datasets...\n```\n\n### Preparation\nWe provide links for the downloading of pretrained checkpoints, as well as the data preprocessing procedures for finetuning. \n\n#### Pretrained Checkpoints\n\nPlease refer to [model card section](#model_card) above and download the model checkpoint. We recommend putting the checkpoint in `${DATAPATH}/pretrained_weights/`. \n\n#### Data Preprocessing\n\nWe advise to organize the data in the following way to ensure the efficiency of accessing and processing data:\n\n```\n${DATAPATH}\n\u2514\u2500\u2500 datasets/\n    \u2514\u2500\u2500 ${dataset_name}/\n        \u251c\u2500\u2500 train_imgs.tsv      # image id & image content\n        \u251c\u2500\u2500 train_texts.jsonl   # text id & text content, with list of paired image ids\n        \u251c\u2500\u2500 valid_imgs.tsv\n        \u251c\u2500\u2500 valid_texts.jsonl\n        \u251c\u2500\u2500 test_imgs.tsv\n        \u2514\u2500\u2500 test_texts.jsonl\n```\nwhere `${dataset_name}` refers to the name of dataset (e.g., MUGE).\n\nTo ensure the efficiency of processing data, we did not store images with small files, but instead we encode them to base64 strings and store them in `${split}_imgs.tsv`. Each line represents an image, where there are id (int) and base64 string, split by `\\t`, as shown below:  \n```\n1000002\t/9j/4AAQSkZJ...YQj7314oA//2Q==\n```\n\nTransforming image files to base64 strings is simple. Run the following code:\n```python\nfrom PIL import Image\nfrom io import BytesIO\nimport base64\n\nimg = Image.open(file_name) # path to file\nimg_buffer = BytesIO()\nimg.save(img_buffer, format=img.format)\nbyte_data = img_buffer.getvalue()\nbase64_str = base64.b64encode(byte_data) # bytes\nbase64_str = base64_str.decode(\"utf-8\") # str\n```\n\nTexts and image-text pairing relations are stored in `${split}_texts.jsonl`, where each line is a json as shown below:\n\n```\n{\"text_id\": 8428, \"text\": \"\u9ad8\u7ea7\u611f\u6258\u7279\u5305\u659c\u630e\", \"image_ids\": [1076345, 517602]}\n```\n\nFinally, we need to serialize tsv and jsonl and transform them to LMDB files, which is easy for random access during training.\n```\npython src/preprocess/build_lmdb_dataset.py \\\n    --data_dir ${DATAPATH}/datasets/${dataset_name}\n    --splits train,valid,test\n```\nFor example, for the MUGE dataset, we name `${dataset_name}` to MUGE. `--splits` refers to dataset splits\uff0csplit by commas without space. After that, there will be LMDB files in the directory.\n```\n${DATAPATH}\n\u2514\u2500\u2500 datasets/\n    \u2514\u2500\u2500 ${dataset_name}/\n        \u2514\u2500\u2500 lmdb/\n            \u251c\u2500\u2500 train\n            \u2502   \u251c\u2500\u2500 imgs\n            \u2502   \u2514\u2500\u2500 pairs\n            \u251c\u2500\u2500 valid\n            \u2514\u2500\u2500 test\n```\n\nFor easier use, we have provided preprocessed MUGE ([download link](https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/datasets/MUGE.zip)) and Flickr30K-CN ([download link](https://clip-cn-beijing.oss-cn-beijing.aliyuncs.com/datasets/Flickr30k-CN.zip)) datasets in zip format. To use them, just download and unzip it under `${DATAPATH}/datasets/`.\n\n### Finetuning\n\nWe introduce the procedures of training for users to learn about the details of the model. We finetune with the pretrained Chinese CLIP. For MUGE and Flickr30K-CN, we provide scripts `run_scripts/muge_finetune_vit-b-16_rbt-base.sh` and `run_scripts/flickr30k_finetune_vit-b-16_rbt-base.sh`. The scripts support single-worker and distributed training. Before running, follow the instructions at the beggining of the scripts and fill in your configuration for distributed training. Then run the scripts to start your training. Logs and checkpoints will be saved at your specified paths. \n\n```bash\ncd Chinese-CLIP/\nbash run_scripts/muge_finetune_vit-b-16_rbt-base.sh ${DATAPATH}\n```\n\nThe configuration for training includes:\n\n+ Distributed training\n  + `WORKER_CNT`: the number of machines.\n  + `GPUS_PER_NODE`: the number of GPUS on each machine.\n+ Data for training/validation\n  + `train-data`: directory of training data. Follow the procedures above the create LMDB files.\n  + `val-data`: directory of validation data.\n  + `num-workers`: the number of workers for dataloader.\n+ Training hyper-params\n  + `vision-model`: specified visual backbones. Select from `[\"ViT-B-16\", \"ViT-L-14\", \"ViT-L-14-336\", \"ViT-H-14\", \"RN50\"]`.\n  + `text-model`: specified language backbones. Select from `[\"RoBERTa-wwm-ext-base-chinese\", \"RoBERTa-wwm-ext-large-chinese\", \"RBT3-chinese\"]`.\n  + `context-length`: sequence length for text inputs.\n  + `warmup`: steps for warmup.\n  + `batch-size`: batch size for a worker (make sure that the number of training samples larger than `batch-size * GPUs`).\n  + `lr`: learning rate.\n  + `wd`: weight decay.\n  + `max-steps`: training steps. Also you can set `max-epochs` to set the number of training epochs.\n  + `freeze-vision`: whether to freeze the visual backbone. \n  + `use-augment`: whether to use [AutoAugment](https://arxiv.org/abs/1805.09501) for data augmentation. \n  + `valid-batch-size`: validation batch size for a worker (make sure that the number of validation samples larger than `valid-batch-size * GPUs`).\n  + `valid-step-interval` and `valid-epoch-interval`: validation step / epoch frequency, if set to -1 then validation will be disabled during finetuning.\n  + `grad-checkpointing`: use [gradient checkpointing]((https://pytorch.org/docs/stable/checkpoint.html)) which does not keep the activations during forward computation, this strategy trades more computation and iteration time for less GPU memory cost.\uff08requires Pytorch>1.8.0\uff09\n+ Ouputs\n  + `name`: specified output path. Hyperparameter logs, training logs, and checkpoints will be saved at `${DATAPATH}/experiments/${name}/`.\n  + `save-step-frequency` and `save-epoch-frequency`: the intervals for saving checkpoints.\n  + `report-training-batch-acc`: whether to report the in-batch image-to-text and text-to-image retrieval accuracy. \n+ Checkpoints\n  + `resume`: the checkpoint path for weights to restore. In the provided example script, the path refers to the pretrained checkpoint path. Users can change to your own checkpoint path.\n  + `reset-data-offset`: whether to restore training at the data breakpoint.\n  + `reset-optimizer`: whether to restore the optimizer state\u3002\n\nAfter training, the log will be saved at `${DATAPATH}/experiments/${name}/out_${timestamp}.log`. Example of log is shown below:\n```\n2022-06-16,10:58:27 | INFO | Rank 0 | Global Steps: 1/735 | Train Epoch: 1 [1024/250880 (0%)] | Loss: 2.171807 | Image2Text Acc: 49.41 | Text2Image Acc: 52.54 | Data Time: 5.167s | Batch Time: 15.647s | LR: 0.000000 | logit_scale: 4.605 | Global Batch Size: 1024\n```\nThe example of validation log is shown below:\n```\n2022-06-16,11:06:00 | INFO | Rank 0 | Validation Result (epoch 1 @ 150 steps) | Valid Loss: 0.503617 | Image2Text Acc: 84.76 | Text2Image Acc: 84.37 | logit_scale: 4.605 | Valid Batch Size: 128\n```\n\n**Attention**: The convergence and stability of contrastive learning is highly relevant to the total batch size. If you use a smaller batch size, (in comparison with the default 128 per-GPU \\* 8 GPU), we advise you to use a smaller learning rat. We recommend using more GPUs and larger batch size for better performance. \n\n### Inference and Evaluation\n\nWe provide procedures for representation generation and cross-modal retrieval, as demonstrated below:\n\n#### Image/Text Representation Generation\n\nBy now the code supports representation generation with a single worker. Follow the commands below:\n```bash\ncd Chinese-CLIP/\nexport CUDA_VISIBLE_DEVICES=0\nexport PYTHONPATH=${PYTHONPATH}:`pwd`/src\n\nsplit=valid # validation / test set\nresume=${DATAPATH}/pretrained_weights/clip_cn_vit-b-16.pt\n\npython -u src/eval/extract_features.py \\\n    --extract-image-feats \\\n    --extract-text-feats \\\n    --image-data=\"${DATAPATH}/datasets/${dataset_name}/lmdb/${split}/imgs\" \\\n    --text-data=\"${DATAPATH}/datasets/${dataset_name}/${split}_texts.jsonl\" \\\n    --img-batch-size=32 \\\n    --text-batch-size=32 \\\n    --context-length=24 \\\n    --resume=${resume} \\\n    --vision-model=ViT-B-16 \\\n    --text-model=RoBERTa-wwm-ext-base-chinese\n```\n\nBy default, the representations are stored at `${DATAPATH}/datasets/${dataset_name}`. Specifically, the image representations are stored at `${split}_imgs.img_feat.jsonl`. Each line stores a json of image representation, as shown below:\n```\n{\"image_id\": 1000002, \"feature\": [0.0198, ..., -0.017, 0.0248]}\n```\nText representations are stored at `${split}_texts.txt_feat.jsonl`\uff0cas shown below:\n```\n{\"text_id\": 248816, \"feature\": [0.1314, ..., 0.0018, -0.0002]}\n```\n\n#### KNN Retrieval\n\nFor small-scale retrieval datasets, we provide a simple implementation of KNN retrieval, to facilitate the retrieval of top-k results in cross-modal retrieval. \n\nFor text-to-image retrieval, run the commands below:\n```bash\ncd Chinese-CLIP/\nsplit=valid # validation / test splits\npython -u src/eval/make_topk_predictions.py \\\n    --image-feats=\"${DATAPATH}/datasets/${dataset_name}/${split}_imgs.img_feat.jsonl\" \\\n    --text-feats=\"${DATAPATH}/datasets/${dataset_name}/${split}_texts.txt_feat.jsonl\" \\\n    --top-k=10 \\\n    --eval-batch-size=32768 \\\n    --output=\"${DATAPATH}/datasets/${dataset_name}/${split}_predictions.jsonl\"\n```\nResults are stored at specified jsonl files. Each line consists of top-k image ids for a text query, as shown below:\n```json\n{\"text_id\": 153915, \"image_ids\": [5791244, 1009692167, 7454547004, 3564007203, 38130571, 2525270674, 2195419145, 2503091968, 4966265765, 3690431163]}\n```\n\nFor image-to-text retrieval, run the commands below\uff1a\n```bash\nsplit=valid # validation / test splits\npython -u src/eval/make_topk_predictions_tr.py \\\n    --image-feats=\"${DATAPATH}/datasets/${dataset_name}/${split}_imgs.img_feat.jsonl\" \\\n    --text-feats=\"${DATAPATH}/datasets/${dataset_name}/${split}_texts.txt_feat.jsonl\" \\\n    --top-k=10 \\\n    --eval-batch-size=32768 \\\n    --output=\"${DATAPATH}/datasets/${dataset_name}/${split}_tr_predictions.jsonl\"\n```\nResults are stored at specified jsonl files. Each line consists of top-k text ids for an image query, as shown below:\n```json\n{\"image_id\": 977856234, \"text_ids\": [156914, 157914, 158914, 155914, 156179, 158907, 157179, 154179, 154914, 154723]}\n```\n\n#### Recall Metric\n\nWe provide scripts for computing the Recall@1/5/10 and mean recall (the mean of Recall@1/5/10). Run the commands to get the scores:\n\nFor text-to-image retrieval, run the commands below:\n```bash\nsplit=valid # validation / test splits\npython src/eval/evaluation.py \\\n        ${DATAPATH}/datasets/${dataset_name}/${split}_texts.jsonl \\\n        ${DATAPATH}/datasets/${dataset_name}/${split}_predictions.jsonl \\\n        output.json\ncat output.json\n```\n\n\nFor image-to-text retrieval, run the commands first to transform text-to-image jsonls to image-to-text ones:\n```bash\npython src/eval/transform_ir_annotation_to_tr.py \\\n        --input ${DATAPATH}/datasets/${dataset_name}/${split}_texts.jsonl\n```\nAfter that\uff0crun the following commands\n```bash\nsplit=valid # validation / test splits\npython src/eval/evaluation_tr.py \\\n        ${DATAPATH}/datasets/${dataset_name}/${split}_texts.tr.jsonl \\\n        ${DATAPATH}/datasets/${dataset_name}/${split}_tr_predictions.jsonl \\\n        output.json\ncat output.json\n```\n\nThe printed results are shown below:\n```json\n{\"success\": true, \"score\": 85.67, \"scoreJson\": {\"score\": 85.67, \"mean_recall\": 85.67, \"r1\": 71.2, \"r5\": 90.5, \"r10\": 95.3}}\n```\n<br><br>\n\n\n## Citation\nIf you find the project helpful, please star this project and cite the related articles. Thanks for your support!\n\n```\n@article{chinese-clip,\n  title={Chinese CLIP: Contrastive Vision-Language Pretraining in Chinese},\n  author={Yang, An and Pan, Junshu and Lin, Junyang and Men, Rui and Zhang, Yichang and Zhou, Jingren and Zhou, Chang},\n  journal={arXiv preprint arXiv:2211.01335},\n  year={2022}\n}\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/OFA-Sys",
            "keywords": "clip",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cn-clip",
            "package_url": "https://pypi.org/project/cn-clip/",
            "platform": null,
            "project_url": "https://pypi.org/project/cn-clip/",
            "project_urls": {
                "Homepage": "https://github.com/OFA-Sys"
            },
            "release_url": "https://pypi.org/project/cn-clip/1.2.3/",
            "requires_dist": [
                "numpy",
                "tqdm",
                "six",
                "timm",
                "lmdb (==1.3.0)",
                "torch (>=1.7.1)",
                "torchvision"
            ],
            "requires_python": "",
            "summary": "the Chinese version of CLIP.",
            "version": "1.2.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15708880,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "95bcb73e73b02dddd79e2a2586d366da",
                    "sha256": "9d0a3406c21f876279b3e433731e588194aef932c40ed22fa1a9b87bd83aa56f"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "95bcb73e73b02dddd79e2a2586d366da",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 180263,
                "upload_time": "2022-11-09T08:24:09",
                "upload_time_iso_8601": "2022-11-09T08:24:09.375643Z",
                "url": "https://files.pythonhosted.org/packages/9e/19/decede765f713aebdee6b0d04c6b609f05a737d73cc9151112e19e277d15/cn_clip-1.2.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c8cb4a309b6379f738eee1630e7f8436",
                    "sha256": "9adb15f4021059c2055133ace5c363eba9951638650a888fb42927a3750f5f17"
                },
                "downloads": -1,
                "filename": "cn_clip-1.2.3.tar.gz",
                "has_sig": false,
                "md5_digest": "c8cb4a309b6379f738eee1630e7f8436",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 125051,
                "upload_time": "2022-11-09T08:24:11",
                "upload_time_iso_8601": "2022-11-09T08:24:11.420653Z",
                "url": "https://files.pythonhosted.org/packages/18/13/f0d9567337a1c863b35597ff281cd1ad123585eccc957fb731efcc89568a/cn_clip-1.2.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}