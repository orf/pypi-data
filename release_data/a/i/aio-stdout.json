{
    "0.0.1": {
        "info": {
            "author": "Jack Nguyen",
            "author_email": "jackyeenguyen@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# aio_stdout\n Asynchronous Input Output - Stdout\n\nThe purpose of this package is to provide asynchronous variants of the builtin `input` and `print` functions. `print` is known to be relatively slow compared to other operations. `input` is even slower because it has to wait for user input. While these slow IO operations are being ran, code using `asyncio` should be able to continuously run.\n\nPIP Installing\n---------------\n\nFor Unix/macOS:\n```\npython3 -m pip install aio-stdout\n```\n\nFor Windows:\n```\npy -m pip install aio-stdout\n```\n\nainput and aprint\n------------------\n\nWith `aio_stdout`, the `aio_stdout.ainput` and `aio_stdout.aprint` functions provide easy to use functionality with organized behaviour.\n\n```python\nimport asyncio\nfrom aio_stdout import ainput, aprint\n\nasync def countdown(n: int) -> None:\n    \"\"\"Count down from `n`, taking `n` seconds to run.\"\"\"\n    for i in range(n, 0, -1):\n        await aprint(i)\n        await asyncio.sleep(1)\n\nasync def get_name() -> str:\n    \"\"\"Ask the user for their name.\"\"\"\n    name = await ainput(\"What is your name? \")\n    await aprint(f\"Your name is {name}.\")\n    return name\n\nasync def main() -> None:\n    await asyncio.gather(countdown(15), get_name())\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nExample output:\n\n```\n15\nWhat is your name? Jane\n14\n13\n12\n11\n10\n9\n8\nYour name is Jane.\n7\n6\n5\n4\n3\n2\n1\n```\n\nNotice that while the prompt `\"What is your name? \"` is being waited for, the `countdown` continues to `aprint` in the background, without becoming blocked. The `countdown` does not, however, display its results until the `ainput` is completed. Instead it waits for the `ainput` to finish before flushing out all of the queued messages.\n\nIt is worth noting that with naive threading, a normal attempt to use `print` while waiting on an `input` leads to overlapping messages. Fixing this behavior requires a lot more work than should be needed to use a simple `print` or `input` function, which is why this package exists. To remedy this problem, queues are used to store messages until they are ready to be printed. \n\nIO Locks\n---------\n\nAlthough the asynchronization behaviors of `ainput` and `aprint` are nice, sometimes we want to be able to synchronize our messages even more. IO locks provide a way to group messages together, locking the global `aio_stdout` queues until it finishes or yields access.\n\n```python\nimport asyncio\nfrom aio_stdout import IOLock, ainput, aprint\n\nasync def countdown(n: int) -> None:\n    \"\"\"Count down from `n`, taking `n` seconds to run.\"\"\"\n    async with IOLock(n=5) as io_lock:\n        for i in range(n, 0, -1):\n            await io_lock.aprint(i)\n            await asyncio.sleep(1)\n\nasync def get_name() -> str:\n    \"\"\"Ask the user for their name.\"\"\"\n    async with IOLock() as io_lock:\n        name = await io_lock.ainput(\"What is your name? \")\n        await io_lock.aprint(f\"Your name is {name}.\")\n    return name\n\nasync def main() -> None:\n    await asyncio.gather(countdown(15), get_name())\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nLet's try the example again now using the new locks:\n\n```\n15\n14\n13\n12\n11\nWhat is your name? Jane\nYour name is Jane.\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n```\n\nNotice that this time the `countdown` does not immediately yield to the `get_name`. Instead, it runs 5 messages before yielding control over to `get_name`. Now, after the `ainput` finishes, it does not yield to `countdown`. Instead, it runs its own `aprint` first. In the meantime, `countdown` continues to run in the background and flushes all of its buffered messages afterwards.\n\nFlushing\n---------\n\nSince messages may be delayed, it is possible for your asynchronous code to finish running before all messages are displayed, producing confusing results. As such, the best recommended practice is to flush from `main` before terminating.\n\n```python\nfrom aio_stdout import flush\n\nasync def main() -> None:\n    async with flush:\n        pass\n```\n\nCommon Gotchas\n---------------\n\n- Using `input` or `print` instead of `ainput` and `aprint` will push a message immediately to the console, potentially conflicting with `ainput` or `aprint`.\n- Using `ainput` or `aprint` instead of `io_lock.ainput` and `io_lock.aprint` may produce **deadlock** due to having to wait for the lock to release. As such, the `io_lock` is equipped with a default `timeout` limit of 10 seconds to avoid deadlock and explain to users this potential problem.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SimpleArt/aio-stdout",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aio-stdout",
            "package_url": "https://pypi.org/project/aio-stdout/",
            "platform": "",
            "project_url": "https://pypi.org/project/aio-stdout/",
            "project_urls": {
                "Homepage": "https://github.com/SimpleArt/aio-stdout"
            },
            "release_url": "https://pypi.org/project/aio-stdout/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "The purpose of this package is to provide asynchronous variants of the builtin `input` and `print` functions.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12731626,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f6f5a149a30ef20faa09d130eb2fd0f0",
                    "sha256": "e90319ae63489bf401c4f9f6ca18d731216d5c3a4bd1f0532ed5c89a809f3706"
                },
                "downloads": -1,
                "filename": "aio_stdout-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f6f5a149a30ef20faa09d130eb2fd0f0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 12828,
                "upload_time": "2022-01-29T19:13:29",
                "upload_time_iso_8601": "2022-01-29T19:13:29.318180Z",
                "url": "https://files.pythonhosted.org/packages/f2/10/459770935c6a8374b12cb09f8a232281a3871a59ef2a03b4d762d6d0e76d/aio_stdout-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6d2a17846ec2686a2284e591f30664fb",
                    "sha256": "d93ed7d96b8733ca937219120d6064f4e1d64686d78692526b1376395644bdd8"
                },
                "downloads": -1,
                "filename": "aio-stdout-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "6d2a17846ec2686a2284e591f30664fb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 10219,
                "upload_time": "2022-01-29T19:13:30",
                "upload_time_iso_8601": "2022-01-29T19:13:30.874330Z",
                "url": "https://files.pythonhosted.org/packages/23/4a/48935fa8e85ff310d1b315e0e8513a70836f0156368db611dfed0197dd4c/aio-stdout-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}