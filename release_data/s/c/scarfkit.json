{
    "1.0.0": {
        "info": {
            "author": "Qc",
            "author_email": "qcsdfsdvdac@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/KeepRepeatLoop/Scarf",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ScarfKit",
            "package_url": "https://pypi.org/project/ScarfKit/",
            "platform": "",
            "project_url": "https://pypi.org/project/ScarfKit/",
            "project_urls": {
                "Bug Tracker": "https://github.com/KeepRepeatLoop/Scarf/issues",
                "Homepage": "https://github.com/KeepRepeatLoop/Scarf"
            },
            "release_url": "https://pypi.org/project/ScarfKit/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "A Simple Way To Create Web Server",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12618440,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fc311922a81114f881a87ca7ee208872",
                    "sha256": "ed2e3c7a403b00feb3c74af04aeb4a75f04493c19465f9e3043a8d3848657c40"
                },
                "downloads": -1,
                "filename": "ScarfKit-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fc311922a81114f881a87ca7ee208872",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 20129,
                "upload_time": "2022-01-18T11:56:32",
                "upload_time_iso_8601": "2022-01-18T11:56:32.541547Z",
                "url": "https://files.pythonhosted.org/packages/9a/3d/f24b079d2284f98cc8896199a5219fc904c1927118cb61aca766d5b525c2/ScarfKit-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "996a91823b472486b23277332656dce7",
                    "sha256": "7f8e3dc36e712fb59e568777aab2515059be66342e09551abb0edea2084693a3"
                },
                "downloads": -1,
                "filename": "ScarfKit-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "996a91823b472486b23277332656dce7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 69856,
                "upload_time": "2022-01-18T11:56:37",
                "upload_time_iso_8601": "2022-01-18T11:56:37.850308Z",
                "url": "https://files.pythonhosted.org/packages/4e/a8/05ef98558e01061b1e457e594642117790ddaf6458d94c6e91551cac148c/ScarfKit-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2": {
        "info": {
            "author": "Qc",
            "author_email": "qcsdfsdvdac@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "## Scarf\n\n\n\n**Scarf\u662f\u4e00\u4e2a\u7b80\u6613\u7684python\uff08python3.5\u53ca\u4ee5\u4e0a\uff09 Web\u6846\u67b6\u3002**\n\n**\u6ca1\u6709\u66f4\u591a\u7684\u63cf\u8ff0\u4e86\uff0c\u5e0c\u671b\u7684\u5c31\u662f\u8ffd\u6c42\u5feb\u901f\u66f4\u597d\u7684\u96c6\u6210Web\u6846\u67b6**\n\n## \u5b89\u88c5\n```bash\npip install ScarfKit\n```\n\n## **1.1 \u9879\u76ee\u7ed3\u6784**\n\n```\n|-- project name  // \u9879\u76ee\u6839\u76ee\u5f55\n\t|-- application.yml // \u914d\u7f6e\u6587\u4ef6\n\t|-- main.py // \u5165\u53e3\u6587\u4ef6\n\t|-- logs // \u65e5\u5fd7\u5b58\u653e\u6587\u4ef6\u5939\n\t\t|-- WebServer.log\n\t|-- models // \u6570\u636e\u5e93\u5b9e\u4f53\u7c7b\n\t\t|-- User.py\n\t\t|-- SQLConnectionManager.py // \u6570\u636e\u5e93\u7ba1\u7406\u7c7b\n\t|-- routers // \u8def\u7531\n        |-- RequestProcessor.py // \u8bf7\u6c42\u62e6\u622a\u5668|\u54cd\u5e94\u8fc7\u6ee4\u5668\n\t\t|-- User.py // \u8def\u7531\u6a21\u677f\n\t|-- ssl // ssl \u8bc1\u4e66\u6587\u4ef6\u5939\n\t\t|-- 1_fqqcalltime.cn_bundle.crt\n\t\t|-- 2_fqqcalltime.cn.key\n    |-- config // \u9879\u76ee\u6240\u4f7f\u7528\u6a21\u5757\u5404\u4e2a\u914d\u7f6e\n    \t|-- routers.User.Auth.yml // User\u6a21\u5757\u7684\u914d\u7f6e\u6587\u4ef6\n\t|-- static // \u9759\u6001\u6587\u4ef6\u76ee\u5f55\n```\n\n\n\n## **1.2 \u8d77\u6b65**\n\n\n\n\u5c31\u7740\u4e0a\u9762\u7684\u76ee\u5f55\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u5c0f\u7684\u63a5\u53e3\u8303\u4f8b\u4ee3\u7801\uff0c\u5f53\u7136\u4e00\u4e2a\u7b80\u7b80\u5355\u5355\u7684Hello World\u8fd8\u662f\u8981\u6709\u7684\n\n``` python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods\n\nclass Auth:\n    def __init__(self):\n        self.username = \"admin\"\n        self.password = \"admin\"\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n```\n\n\u63a5\u4e0b\u6765\u5165\u53e3\u6587\u4ef6\u4e2d\u5c31\u9700\u8981\u5c06\u6a21\u5757\u6ce8\u518c\u5230Scarf\n\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\n\nserver = Scarf()\nserver.scan_module(Auth())\nserver.start_server()\n```\n\n\u6b64\u65f6\u5f53\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u8bbf\u95eehttp://localhost:81/hello\uff0c \u5c06\u80fd\u770b\u5230\u9875\u9762\u4e0a\u7684\u5b57\u7b26\u4e32\"hello world\"\u3002\u5176\u4e2dscan_module\u7528\u4e8e\u626b\u63cf\u6a21\u5757\u4e2d\u88ab\u4fee\u9970\u7684\u51fd\u6570\uff0c@RequestReslove.route\u7528\u4e8e\u4fee\u9970\u6807\u6ce8\u8fd9\u4e2a\u51fd\u6570\u4e3a\u8def\u7531\u6ce8\u518c\u51fd\u6570\uff0c\u6700\u540estart_server\u5219\u5f53\u7136\u662f\u542f\u52a8\u670d\u52a1\u5e76\u76d1\u542c\u8bf7\u6c42\u3002\n\n\u5f53\u7136\u4e00\u4e2a\u7b80\u5355\u7684hello world\u662f\u4e0d\u80fd\u89e3\u51b3\u6240\u6709\u95ee\u9898\u7684\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u7528\u4e00\u4e2a\u7528\u6237\u767b\u5f55\u7684\u4f8b\u5b50\u6765\u4ecb\u7ecd\u5176\u4ed6\u7684\u7528\u6cd5\u3002\u5047\u8bbe\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u767b\u5f55\u6a21\u5757\uff0c\u8def\u5f84\u662f/api/login,\u53c2\u6570\u6709username\u548cpassword\u8fd4\u56de\u503c\u662f\u4e00\u4e2aJSON\u5bf9\u8c61\u5305\u542b\u64cd\u4f5c\u7684\u72b6\u6001\u503c\u548c\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\u3002\u6211\u4eec\u6765\u4e3a\u8fd9\u4e2a\u7c7b\u65b0\u589e\u4e00\u4e2a\u65b9\u6cd5\u53ebuser_login\u51fd\u6570\n\n\n\n``` python\n# routers/User.py\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods\n\nclass Auth:\n    def __init__(self):\n        self.username = \"admin\"\n        self.password = \"admin\"\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n        @RequestReslove.route(\n            \"/api/login\",\n            (Methods.GET, ),\n            ((\"username\",\"password\"),(),(),())\n        )\n        def user_login(self, username: str, password: str):\n\n            print(\"username : %s , password: %s\" % (username, password))\n\n```\n\n\n\n\u6b64\u65f6\u5f53\u6d4f\u89c8\u5668\u8bbf\u95eehttp://locahost:81\u65f6\uff0c \u5c06\u4f1a\u770b\u5230\u6253\u5370\uff1a\n\n```\nusername : admin , password: admin\n```\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5b8c\u6210\u8fd9\u4e2a\u767b\u5f55\u7684\u63a5\u53e3\uff0c\u73b0\u5728\u9700\u8981\u9a8c\u8bc1\u7528\u6237\u540d\u548c\u5bc6\u7801\u662f\u5426\u6b63\u786e\uff0c\u5e76\u8fd4\u56de\u76f8\u5bf9\u7684\u63d0\u793a\u7801\u548c\u4e00\u4e2atoken\u6765\u901a\u77e5\u7528\u6237\u662f\u5426\u767b\u5f55\u6210\u529f\n\n``` python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods\nimport hashlib\n\nclass Auth:\n    def __init__(self):\n        self.username = \"admin\"\n        self.password = \"admin\"\n        # \u7528\u4e8e\u5b58\u653e\u7528\u6237\u7684token\u4fe1\u606f\n        self.user_list = []\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n        @RequestReslove.route(\n            \"/api/login\",\n            (Methods.GET, ),\n            ((\"username\",\"password\"),(),(),())\n        )\n        def user_login(self, username: str, password: str):\n            print(\"username : %s , password: %s\" % (username, password))\n            if self.username == username and self.password == password:\n                # \u751f\u6210MD5\u7684Token,\u5c06\u7528\u6237\u540d\u4f5c\u4e3a\u53c2\u6570\n                md5_ = hashlib.md5()\n                md5_.update(self.username.encode())\n                token = md5_.hexdigest()\n                return {\"code\": 200, \"msg\": \"Login Success\", \"data\": token}\n            else:\n                return {\"code\": 500, \"msg\": \"Login Fail\", \"data\": None}\n```\n\n\u6b64\u65f6\u5f53\u8bbf\u95eehttp://localhost:81/api/login?username=admin&password=admin \u5c06\u770b\u5230\u8fd4\u56de\u503c\uff1a\n\n```json\n{\"code\": 200, \"msg\": \"Login Success\", \"data\": \"21232f297a57a5a743894a0e4a801fc3\"}\n```\n\n\u5f53\u7136\u5982\u679c\u5c06\u5bc6\u7801\u6216\u7528\u6237\u540d\u6539\u6210\u522b\u7684\u4e5f\u4f1a\u770b\u5230\uff1a\n\n```json\n{\"code\": 500, \"msg\": \"Login Fail\", \"data\": null}\n```\n\n\u8fd9\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7b80\u5355\u4f8b\u5b50\n\n\n\n## **1.3 \u8def\u7531\u6ce8\u518c**\n\n\n\n\u4e00\u4e2a\u8def\u7531\u9700\u7531\u4e00\u4e2a\u7c7b\u548c\u8fd9\u4e2a\u7c7b\u7684\u6210\u5458\u5171\u540c\u7ec4\u6210\uff0c\u5176\u4e2d\u6210\u5458\u51fd\u6570\u901a\u8fc7\u4fee\u9970\u5b9e\u4f8b\u5316\u540e\u901a\u8fc7Scarf\u7684scan_module\u51fd\u6570\u5373\u53ef\u5b8c\u6210\u6ce8\u518c\uff0c\u800c\u88ab\u4fee\u9970\u7684\u51fd\u6570\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u3002\u5b8c\u6574\u7684@RequestReslove.route\u7684\u53c2\u6570\u5982\u4e0b\n\n``` python\n\"\"\"\n\u8def\u7531\u6ce8\u518c\u4fee\u9970\u5668\n:param path(str): \u8def\u5f84\u89c4\u5219 /api/:username/:password \u8def\u5f84\u53c2\u6570 || /api/login/* \u540e\u7f00\u901a\u914d\u7b26\u5339\u914d\n:param methods(tuple): \u652f\u6301\u7684\u8bf7\u6c42\u65b9\u6cd5\uff08\u652f\u6301\u7684\u8bf7\u6c42\u65b9\u6cd5\u53ef\u5728Scarf.Tip.Methods\u4e2d\u67e5\u770b\uff09\n:param arg_source(tuple(tuple)): \u4e8c\u7ef4tuple,((\u901a\u8fc7\u8def\u5f84query\u83b7\u53d6), (\u901a\u8fc7\u8bf7\u6c42\u4f53\u83b7\u53d6), (\u8bf7\u6c42\u5934\u83b7\u53d6), (\u8def\u5f84\u53c2\u6570\u83b7\u53d6))\n\u6bcf\u4e00\u4e2a\u88ab\u4fee\u9970\u7684\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u540d\u9700\u8981\u4e0earg_source\u4e2d\u7684\u53c2\u6570\u540d\u5bf9\u5e94\uff0c\u5728\u8bf7\u6c42\u8fc7\u7a0b\u4e2dScarf\u53ef\u901a\u8fc7\u7c7b\u578b\u6807\u6ce8\u53cd\u5c04\u5bf9\u5e94\u7c7b\u578b\n\"\"\"\n@RequestReslove.route(path, methods = (Methods.GET), arg_source=((),(),(),()))\n```\n\n\n\n\u6211\u4eec\u63a5\u7740\u4e0a\u9762\u767b\u5f55\u63a5\u53e3\u7684\u4f8b\u5b50\u4ecb\u7ecd\u4ee5\u4e0b\u51e0\u79cd\u7528\u6cd5\n\n\n\n```python\n# \u8bf7\u6c42\u65b9\u5f0f: http://localhost:81/api/login?username=admin&password=admin\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.GET, ),\n    ((\"username\",\"password\"),(),(),())\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n#------------------------------------------SplitLine-----------------------------------------------\n\n# \u8bf7\u6c42\u65b9\u5f0f: http://localhost:81/api/login \u8bf7\u6c42\u5934(request header)\u4e2d\uff1ausername: admin & passowrd: admin\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.GET, ),\n    ((),(),(\"username\",\"password\"),())\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n#------------------------------------------SplitLine-----------------------------------------------\n\n# \u8bf7\u6c42\u65b9\u5f0f: http://localhost:81/api/login/admin/admin\n@RequestReslove.route(\n    \"/api/login/:username/:password\",\n    (Methods.GET, ),\n    ((),(),(),(\"username\",\"password\"))\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n#------------------------------------------SplitLine-----------------------------------------------\n\n\n# \u6700\u540e\u4e00\u79cd\u65b9\u5f0f\u4f7f\u8bf7\u6c42\u4f53\u4e2d\u83b7\u53d6\u8fd9\u79cd\u65b9\u5f0f\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7684\u65b9\u5f0f\u8f83\u4e3a\u7075\u6d3b,\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u6839\u636e\u8bf7\u6c42\u4f53(Request Body)\u4e2d\u7684\u8bf7\u6c42\u5185\u5bb9\u4ee5\u53ca\u53c2\u6570\u5185\u5bb9\u8fdb\u884c\u63a8\u65ad\u8be5\u5982\u4f55\u89e3\u6790\u5e76\u4e14\u68c0\u67e5\u8fd9\u4e9b\u89e3\u6790\u65b9\u5f0f\u662f\u5426\u88ab\u5141\u8bb8\u3002\n# \u76ee\u524d\u8bf7\u6c42\u4f53\u4e2d\u7684\u6570\u636e\u652f\u6301 form-data, form-urlencoded, json\u3002\u9700\u8981\u6ce8\u610f\u7684\u662farg_source\u53c2\u6570\u4e2d\u7684\u7b2c\u4e8c\u4e2atuple\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u88ab\u5360\u7528\u7684\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\u7528\u6765\u5224\u65ad\u90a3\u4e9b\u683c\u5f0f\u53ef\u4ee5\u88ab\u652f\u6301\n\nfrom Scarf.Tip import Methods, ClassSource\n\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.GET, Methods.POST),\n    ((),(ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'),(),())\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n# \u8bf7\u6c42\u65b9\u5f0f: http://localhost:81/api/login \u8bf7\u6c42\u4f53(Request Body): username=admin&password=admin\n# \u8bf7\u6c42\u65b9\u5f0f: http://localhost:81/api/login \u8bf7\u6c42\u4f53(Request Body): {\"username\": \"admin\", \"password\": \"admin\"}\n# \u8bf7\u6c42\u65b9\u5f0f: http://localhost:81/api/login \u8bf7\u6c42\u4f53(Request Body):\n# (JavaScript\u4ee3\u7801)\n# const form = new FormData(); form.append(\"username\", \"admin\"); form.append(\"password\",\"admin\")\n\n# \u6b63\u5e38\u60c5\u51b5\u4e0b\u53ea\u4f1a\u7528\u4e00\u79cd\u65b9\u5f0f\u8fdb\u884c\u89e3\u6790\uff0cJSON\u6216\u8005FORM_DATA\u6216\u8005FORM_URLENCODE\u3002\u5982\u679c\u5ba2\u6237\u7aef\u53d1\u9001\u4e86\u4e00\u4e2a\u65e0\u6cd5\u89e3\u6790\u7684\u53c2\u6570\u65f6\uff0c\u90a3\u4e48\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u5c06\u63a5\u6536\u5230\u53c2\u6570\u5bf9\u5e94\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c(\u5b9e\u4f53\u51fd\u6570\u7684\u53c2\u6570\u90fd\u5e94\u6539\u6709\u4e00\u4e2a\u7c7b\u578b\u6807\u6ce8)\n```\n\n## **1.4 \u914d\u7f6e\u6587\u4ef6**\n\n\n\n\u6709\u4e9b\u4f7f\u7528\u8005\u80af\u5b9a\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u6211\u51fa\u73b0\u7aef\u53e3\u5360\u7528\uff0c\u90a3\u6211\u8be5\u600e\u4e48\u529e\u3002\u6211\u8fd8\u60f3\u542f\u7528https\u7b49\u7b49\u95ee\u9898\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bd5\u7740\u5bfb\u627e\u7b54\u6848\uff0c\u6211\u4eec\u5148\u7528\u4e00\u4e9b\u7b80\u5355\u7684\u914d\u7f6e\uff0c\u5b8c\u6574\u7684\u914d\u7f6e\u9879\u4f1a\u653e\u5728\u6587\u6863\u672b\u5c3e\u3002\n\nScarf\u7684\u6838\u5fc3\u914d\u7f6e\u6587\u4ef6\u4e3a**1.1\u6240\u793a\u76ee\u5f55\u7ed3\u6784\u4e2d\u7684application.yml**\u3002\u914d\u7f6e\u6587\u4ef6\u53ef\u901a\u8fc7**load_config_from_file**\u8fdb\u884c\u5bfc\u5165\u548c\u751f\u6548\u3002\n\n\n\n```yml\nserver:\n\trelease: false # \u6807\u6ce8\u662f\u5426\u662f\u53d1\u884c\u6a21\u5f0f\n\tports:\n \t\thttp: 8085 # http\u7aef\u53e3\ndatasource: # \u6570\u636e\u6e90\n\t- { name: main, host: 127.0.0.1, port: 3306, user: root, password: admin, max_connections: 10, database: test_database, autoconnect: false, autocommit: 1 }\n\t# name: \u6570\u636e\u6e90\u540d\u79f0(\u6807\u8bc6\u6570\u636e\u6e90)\uff0c\u5269\u4f59\u7684\u5219\u662f\u6570\u636e\u5e93\u9a71\u52a8\u521d\u59cb\u5316\u53c2\u6570\n```\n\n\n\n## **1.5 \u6570\u636e\u5e93**\n\n\n\n\u6709\u4eba\u4f1a\u8bf4\u4f60\u8fd9\u90fd\u662f\u6b7b\u6570\u636e\u6709\u4ec0\u4e48\u597d\u591a\u8bf4\u7684\u3002\u6211\u8981\u7528\u81ea\u5df1\u7684\u6570\u636e\u5e93\u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\u3002OK\uff0c\u6211\u4eec\u5c31\u4ee5Mysql\u7684\u6570\u636e\u5e93\u4e3a\u4f8b\uff0c\u5728\u8fd9\u91cc\u6570\u636e\u5e93\u9a71\u52a8\u6211\u4eec\u4f7f\u7528[peewee](http://docs.peewee-orm.com/en/latest/peewee/installation.html \"peewee\")\u3002\n\n\u9996\u5148\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8fde\u63a5\u7ba1\u7406\u7c7b\n\n\n\n```python\n# models/SQLConnectionManager.py\n\nfrom Scarf.Tip import SQLModel\n\ntry:\n    from peewee import *\n    from playhouse.pool import PooledMySQLDatabase, PooledSqliteExtDatabase, PooledPostgresqlExtDatabase\n    except ModuleNotFoundError:\n        print(\"error : peewee is not installed please 'pip install peewee' \")\n\n        class SQLFactory(SQLModel):\n            def __init__(self, **config):\n                # \u8fd9\u91cc\u7684config\u53c2\u6570\u5219\u662fapplication.yml\u4e2ddatasource\u914d\u7f6e\u9664\u4e86name\u5b57\u6bb5\u7684\u53c2\u6570\n                self.__sql = PooledMySQLDatabase(**config)\n\n                def get_con(self):\n                    if self.__sql.is_closed():\n                        self.__sql.connect()\n                        return self.__sql\n\n                    # con \u4e3aget_con\u7533\u8bf7\u5230\u7684\u6570\u636e\u5e93\u8fde\u63a5(SQL Connection)\n                    def destory_con(self,con):\n                        con.close()\n```\n\n\n\n\u6570\u636e\u5e93\u8fde\u63a5\u7ba1\u7406\u7c7b\u9700\u8981\u7ee7\u627f\u4e8eSQLModel\uff0c\u4e14\u9700\u8981\u5b9e\u73b0get_con\u51fd\u6570\u548cdestory_con\u51fd\u6570\u3002get_con\u5728\u8bf7\u6c42\u89e3\u6790\u5b8c\u6210\u540e\u7533\u8bf7\u53ef\u7528\u8fde\u63a5\u800cdestory_con\u5219\u662f\u8bf7\u6c42\u5b8c\u6210\u540e\u9500\u6bc1\u8fde\u63a5\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u4f1a\u5728\u7279\u5b9a\u65f6\u673a\u88abScarf\u8c03\u7528\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6539\u9020\u4e00\u4e0bmain.py\uff0c\u65e2\u7136\u6709\u7ba1\u7406\u7c7b\u4f46\u8fd8\u662f\u9700\u8981\u6ce8\u518c\u5230Scarf\u4e2d\u8ba9\u5176\u751f\u6548\n\n\n\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\n\nserver = Scarf()\n\n# \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6\nserver.load_config_from_file(\"./application.yml\")\n# \u6ce8\u518cSQL\u8fde\u63a5\u7ba1\u7406\u7c7b\nserver.register_sql_model(\"main\", SQLFactory)\n# \u6ce8\u518c\u5b9e\u4f53\u7c7b\u51fd\u6570\nserver.scan_module(Auth())\n\n# \u542f\u52a8\u670d\u52a1\nserver.start_server()\n```\n\n\n\n\u73b0\u5728SQL\u6a21\u5757\u5df2\u7ecf\u88ab\u6ce8\u518c\u5230\u4e86\u5168\u5c40\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u5b9e\u4f53\u7c7b\u3002\n\n\n\n```python\n# models/User.py\nfrom peewee import *\n\n\"\"\"\n\u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u5e93\u6a21\u578b\u548c\u6ce8\u91ca\u5982\u4e0b:\n\"\"\"\nclass USER(Model):\n    userId = IntegerField(null=False, primary_key=True) # \u7528\u6237ID(\u4e3b\u952e,\u81ea\u589e)\n    createTime = DateTimeField(null=False) # \u521b\u5efa\u65f6\u95f4\n    username = CharField(null=False, max_length=32) # \u7528\u6237\u540d\n    password = CharField(null=False, max_length=32) # \u5bc6\u7801\n    email = TextField(null=False) # \u7535\u5b50\u90ae\u4ef6\n    phone = CharField(null=False, max_length=11) # \u624b\u673a\u53f7\u7801\n```\n\n\u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u8def\u7531\u4e2d\u76f4\u63a5\u4f7f\u7528\u4e86\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel\n\nfrom models.User import USER\n\nclass Auth:\n    def __init__(self):\n        pass\n\n    @RequestReslove.route(\"/hello\")\n    def hello(self):\n        return \"hello world\"\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (), ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n        # SQLModel.DataBaseConnection \u7c7b\u578b\u6807\u6ce8\u4e86\u8be5\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u9700\u8981\u6570\u636e\u5e93\u8fde\u63a5\u6ce8\u5165\n        # SQLModel.DataBaseConnection(\"main\") \u5982\u679c\u6ca1\u6709\u8c03\u7528\u5219\u9ed8\u8ba4\u662f\u7b2c\u4e00\u4e2a\u6570\u636e\u6e90\uff0c\u5982\u679c\u5e26\u6709\u540d\u5b57\u5219\u6307\u5411\u5bf9\u5e94\u540d\u5b57\u7684\u6570\u636e\u6e90\u8fde\u63a5\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result is None:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n        else:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Success\"}\n```\n\n\u50cf\u8fd9\u6837\u3002\u6709\u4e86\u6570\u636e\u5e93\u7684\u5e2e\u52a9\u4e0b\uff0c\u6570\u636e\u7684\u64cd\u4f5c\u548c\u5b58\u50a8\u5c06\u4f1a\u66f4\u52a0\u65b9\u4fbf\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u518d\u5b9e\u73b0\u4e00\u4e2a\u6ce8\u518c\u7528\u6237\u7684\u63a5\u53e3,\u6211\u4eec\u5148\u63d0\u524d\u60f3\u4e00\u4e0b\u5982\u679c\u7528\u6237\u6ce8\u518c\u9700\u8981\u6309\u7167\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u6784\u5efa\u51fd\u6570\n\n```python\n# \u7528\u6237\u6ce8\u518c\u51fd\u6570(\u4f2a\u51fd\u6570)\ndef user_register(self,username:str, password:str, create_time: datetime, email: str, phone: str):\n \tpass\n# \u90a3\u5982\u679c\u53c2\u6570\u6bd4\u8f83\u591a\u5c31\u663e\u5f97\u975e\u5e38\u9ebb\u70e6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\u4f53\u53c2\u6570\u770b\u505a\u4e00\u4e2a\u6574\u4f53\u7136\u540e\u8fdb\u884c\u6574\u4f53\u53cd\u5c04\n```\n\n\u6570\u636e\u6574\u4f53\u53cd\u5c04:\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel\n\nfrom models.User import USER\n\nclass Auth:\n    def __init__(self):\n        pass\n\n    @RequestReslove.route(\"/hello\")\n    def hello(self):\n        return \"hello world\"\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (), ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n        # SQLModel.DataBaseConnection \u7c7b\u578b\u6807\u6ce8\u4e86\u8be5\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u9700\u8981\u6570\u636e\u5e93\u8fde\u63a5\u6ce8\u5165\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # \u83b7\u53d6Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n        else:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Success\"}\n\n        @RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                              ((), (ClassSource.JSON, '_user'), (), ())\n                             )\n        def user_register(self, _user: USER):\n            print(_user.phone)\n            print(_user.createTime)\n            print(isinstance(_user.phone, int)) # True\n            print(isinstance(_user.createTime, str)) # True\n```\n\n\u8fd9\u6837\u901a\u8fc7POST\u6216\u8005PUT\u65b9\u5f0f\u8bbf\u95ee http://localhost:8085/api/register \u5e76\u643a\u5e26\u4ee5\u4e0b\u53c2\u6570\u5373\u53ef\u770b\u5230\u63a7\u5236\u53f0\u7684\u6253\u5370\u3002\n\n\n\n```json\n{\n    \"createTime\": \"2021-12-01 19:00:00\",\n    \"username\": \"user123\",\n    \"password\": \"user123\",\n    \"email\": \"sdfsdvdac@google.com\",\n    \"phone\": 12345678912\n}\n```\n\n\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\u9996\u5148\u7c7b\u578b\u5fc5\u987b\u662f\u4e00\u4e2a\u5b9e\u4f53\u7c7b\u578b\uff0c\u5176\u6b21\u53d8\u91cf\u540d\u524d\u9700\u8981\u52a0\u4e00\u4e2a\u4e0b\u5212\u7ebf '_' \u7528\u4ee5\u544a\u77e5Scarf\u8be5\u53c2\u6570\u9700\u8981\u6574\u4f53\u83b7\u53d6\u800c\u4e0d\u662f\u5728\u8bf7\u6c42\u4f53\u4e2d\u5bfb\u627euser\u8fd9\u4e2a\u5b57\u6bb5\u3002\u4f46\u662f\u8fd9\u6837\u8fd8\u662f\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898 \uff1a\u7c7b\u578b\u4e0d\u4e00\u81f4\u3002\u5f53\u6253\u5370\u5230\u6700\u540e\u4e24\u884c\u6253\u5370\u7684\u65f6\u5019\u8fd4\u56de\u503c\u90fd\u4e3aTrue\uff0c\u4f46\u662f\u5e0c\u671b\u7684\u662fcreateTime\u662fdatetime\u7c7b\u578b\uff0c\u800cphone\u5e94\u8be5\u8981\u548c\u6570\u636e\u5e93\u4fdd\u6301\u4e00\u81f4\u4e3astr\u7c7b\u578b\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u5bf9\u5b9e\u4f53\u7c7b\u7684\u5b57\u6bb5\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\u3002\u7c7b\u578b\u6807\u6ce8\u65f6\u9700\u8981\u6ce8\u610f\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362\u4f1a\u901a\u8fc7\u7c7b\u578b\u672c\u8eab\u7684\u6784\u9020\u51fd\u6570\u8fdb\u884c\u5b9e\u73b0\uff0c\u4f46\u4e5f\u6709\u4e9b\u60c5\u51b5\u6bd4\u5982\u65f6\u95f4\uff0c\u5bf9\u4e8e\u5b57\u7b26\u4e32\u65f6\u95f4\u7684\u8f6c\u6362\u662f\u65e0\u6548\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u4e3a\u5176\u5b9e\u73b0\u4e00\u4e2a\u53ef\u8c03\u7528(callable)\u7684\u51fd\u6570\u8fdb\u884c\u83b7\u53d6:\n\n\n\n```python\n# models/User.py\n\nfrom peewee import *\nfrom datetime import datetime\n\ndef translate_str_to_datetime(date_str):\n    try: # \u6ce8\u610f\u5f02\u5e38\u6355\u6349,\u5426\u5219\u4e3aNone\u5904\u7406\n        return datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\n    except:\n        return datetime.min\n\n    class USER(Model):\n        userId: int = IntegerField(null=False, primary_key=True)\n            createTime: translate_str_to_datetime = DateTimeField(null=False) # \u65e0\u6cd5\u83b7\u53d6\u5b9e\u73b0\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570\n                username: str = CharField(null=False, max_length=32)\n                    password: str = CharField(null=False, max_length=32)\n                        email: str = TextField(null=False)\n                            phone: str = CharField(null=False, max_length=11)\n```\n\n\n\n\u8fd9\u6837\u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u578b\u5206\u914d\u51fd\u6570\u5c31\u5b8c\u6210\u4e86\uff0c\u8ba9\u6211\u4eec\u628a\u6574\u4e2a\u6ce8\u518c\u51fd\u6570\u5b9e\u73b0\uff08\u53ea\u6539\u52a8\u6ce8\u518c\u51fd\u6570\u540c\u6587\u4ef6\u5176\u4ed6\u5185\u5bb9\u4e0d\u53d8\uff09\n\n\n\n```python\n\n# routers/User.py\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),((), (ClassSource.JSON, '_user'), (), ()))\n\ndef user_register(self, _user: USER, sql: SQLModel.DataBaseConnection):\n    code = 200\n    msg = \"\u6ce8\u518c\u6210\u529f\"\n    if len(_user.username.strip()) == 0:\n        msg = \"\u8bf7\u586b\u5199\u7528\u6237\u540d\"\n        elif len(_user.password.strip()) == 0:\n            msg = \"\u8bf7\u586b\u5199\u5bc6\u7801\"\n            elif len(_user.email.strip()) == 0:\n                msg = \"\u8bf7\u586b\u5199\u90ae\u7bb1\"\n                elif len(_user.phone.strip()) == 0:\n                    msg = \"\u8bf7\u586b\u5199\u624b\u673a\u53f7\"\n                    elif _user.createTime == datetime.min:\n                        msg = \"\u8bf7\u9009\u62e9\u6b63\u786e\u7684\u65f6\u95f4\"\n\n                        if msg != \"\u6ce8\u518c\u6210\u529f\":\n                            code = 500\n                            else:\n                                _user.bind(sql)\n                                _user.save()\n                                return {\"code\": code, \"msg\": msg, \"data\": _user.userId}\n\n```\n\n\n\n\u53ef\u80fd\u53c8\u6709\u7591\u95ee\u4e86\uff0c\u90a3\u5982\u679c\u6211\u9700\u8981\u6279\u91cf\u6dfb\u52a0\u5462\uff0c\u8fd9\u4e00\u4e2a\u4e00\u4e2a\u6dfb\u52a0\u592a\u8d39\u4e8b\u513f\u4e86\u3002\u63a5\u4e0b\u5c31\u9700\u8981\u7528\u5230Scarf\u7684Vector\u7c7b\u578b\u5bf9\u6570\u7ec4\u5f62\u5f0f\uff0c\u6279\u91cf\u6570\u636e\u7684\u5f62\u5f0f\u7684\u6570\u636e\u8fdb\u884c\u6807\u6ce8\u4e86\uff0c\u6211\u4eec\u5c06\u63a5\u53e3\u6539\u4e3a\u652f\u6301\u6279\u91cf\u83b7\u53d6\u7684\u65b9\u5f0f\u3002\n\n```python\n# routers/User.py\n\n# \u8fd8\u662f\u9700\u8981\u4e0b\u5212\u7ebf\u7684\u53d8\u91cf\uff0c\u6bd5\u7adf\u8981\u5c06\u6574\u4f53\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),((), (ClassSource.JSON, '_users'), (), ()))\n\ndef user_register(self, _users: Vector(USER), sql: SQLModel.DataBaseConnection):\n    USER.bind(sql)\n    for item in _user:\n        item.save()\n        return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n\n```\n\n\u6216\u8005\u4f7f\u7528**bulk_create**\uff0c\u5bf9\u5b9e\u4f53\u5bf9\u8c61\u63d2\u5165\n\n```python\n\n# routers/User.py - bulk_create\n\n# \u8fd8\u662f\u9700\u8981\u4e0b\u5212\u7ebf\u7684\u53d8\u91cf\uff0c\u6bd5\u7adf\u8981\u5c06\u6574\u4f53\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\n\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\n\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),((), (ClassSource.JSON, '_users'), (), ()))\n\ndef user_register(self, _users: Vector(USER), sql: SQLModel.DataBaseConnection):\n\n    USER.bind(sql)\n\n    USER.bulk_create(_user)\n\n    return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n\n```\n\n\u518d\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u539f\u751f\u7684**insert_many**,\u9700\u8981\u6ce8\u610f\u7684\u662f\u7c7b\u578b\u8be5\u53d8\u4e3a**dict**\n\n```python\n# routers/User.py - insert_many\n\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                      ((), (ClassSource.JSON, '_users'), (), ())\n                     )\ndef user_register(self, _users: Vector(dict), sql: SQLModel.DataBaseConnection(\"main\")):\n    print(_users)\n    USER.bind(sql)\n    USER.insert_many(_users).execute()\n    return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n\n```\n\n**\u5173\u4e8e\u6587\u4ef6**\n\n\u6587\u4ef6\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7form_data\u8fdb\u884c\u53c2\u6570\u4f20\u9012\uff0c\u6211\u4eec\u8fd8\u662f\u5c06\u6ce8\u518c\u63a5\u53e3\u53d8\u4e3a\u5355\u4e2a\u6ce8\u518c\uff0c\u4f46\u9700\u8981\u65b0\u589e\u4e2a\u4eba\u7167\u7247\u7684\u4e00\u4e2a\u5b57\u6bb5\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u5b57\u6bb5\u4e3aicon\u3002\u63d0\u524d\u9700\u8981\u77e5\u9053\u7684\u662f\u6587\u4ef6\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528Scarf.Tip.FileDeliver\u7c7b\u578b\u8fdb\u884c\u66ff\u4ee3\u3002\n\n```python\n# models/User.py\n\nfrom peewee import *\nfrom Scarf.Tip import FileDeliver\nfrom datetime import datetime\n\ndef translate_str_to_datetime(date_str):\n    try:\n        return datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\n    except:\n        return datetime.min\n\nclass USER(Model):\n    userId: int = IntegerField(null=False, primary_key=True)\n    createTime: translate_str_to_datetime = DateTimeField(null=False)\n    username: str = CharField(null=False, max_length=32)\n    password: str = CharField(null=False, max_length=32)\n    email: str = TextField(null=False)\n    phone: str = CharField(null=False, max_length=11)\n    icon: FileDeliver = TextField(null=False) # \u65b0\u589eicon\u5b57\u6bb5\n```\n\n\u6b64\u65f6User.py\u9700\u8981\u505a\u51fa\u4ee5\u4e0b\u6539\u52a8\n\n```python\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\nfrom models.User import USER\n\nimport hashlib, time\nfrom datetime import datetime\n\nclass Auth:\n   def __init__(self):\n       pass\n\n   @RequestReslove.route(\"/hello\")\n   def hello(self):\n       return \"hello world\"\n\n   @RequestReslove.route(\n       \"/api/login\",\n       (Methods.POST, Methods.HEAD),\n       ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),())\n   \t)\n   def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n       user = USER(username=username, password=password)\n       user.bind(sql)\n       result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n       if result:\n           # \u83b7\u53d6Token\n           md5_ = hashlib.md5()\n           md5_.update(str(result.userId).encode())\n           return {\"code\": 200, \"data\": md5_.hexdigest(), \"msg\": \"Login Success\"}\n       else:\n           return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n\n   @RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                         ((), (ClassSource.JSON | ClassSource.FORM_DATA, '_user'), (), ())\n                         )\n   def user_register(self, _user: USER, sql: SQLModel.DataBaseConnection):\n       if not _user.icon.invaild():\n           _md5 = hashlib.md5()\n           filename = _user.icon.filename + str(time.time())\n           _md5.update(filename.encode())\n           # \u751f\u6210\u4e0d\u91cd\u540d\u6587\u4ef6\n           filename = _md5.hexdigest() + _user.icon.ext_name\n           # \u4fdd\u5b58\u6587\u4ef6\u81f3\u6307\u5b9a\u76ee\u5f55\n            _user.icon.save(\"./static/icons/\" + filename)\n           _user.icon = \"http://localhost:8085/icons/\" + filename\n           _user.bind(sql)\n           _user.save()\n           return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n       else:\n           return {\"code\": 500, \"msg\": \"Photo File Error\", \"data\": None}\n```\n\n## **\u63a5\u53e3\u8fd4\u56de\u503c**\n\n\n\n\u4e0a\u9762\u5df2\u7ecf\u8bf4\u660e\u4e86\u63a5\u53e3\u53c2\u6570\u7684\u63a5\u6536\u548c\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u63a5\u53e3\u7684\u8fd4\u56de\u503c\u4e86\u3002\u8fd4\u56de\u503c\u901a\u8fc7return\u5c06\u53c2\u6570\u53cd\u5c04\u7ed9Scarf\u3002\u56de\u5230hello world\u7684\u4f8b\u5b50\uff0c\u90a3\u7684\u786e\u662f\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u8fd4\u56de\u503c\u4e00\u4e2astr\u3002\u8fd4\u56de\u503c\u7684\u54cd\u5e94\u5934(respone header)\u5219\u4e3a**Content-Type: text/plain**\u3002\u7b2c\u4e8c\u79cd\u8fd4\u56de\u503c\u65b9\u5f0f\u53ef\u4ee5\u50cf\u4e0a\u9762\u6211\u4eec\u767b\u5f55\u548c\u6ce8\u518c\u63a5\u53e3\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\u63a5\u53e3\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a**dict**\uff0c\u4ee5\u6b64\u5e94\u8be5\u5927\u81f4\u80fd\u63a8\u65ad\u51fa\u8fd4\u56de\u503c\u662f\u4e00\u4e2a**JSON**\u5e76\u4e14**Content-Type: application/json**\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u57fa\u672c\u4e0a\u662f\u9047\u5230\u6bd4\u8f83\u6a21\u677f\u5316\u7684\u63a5\u53e3\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u662f\u5982\u679c\u6211\u9700\u8981\u4fee\u6539\u54cd\u5e94\u4e2d\u7684\u72b6\u6001\u7801\u6216\u8005\u589e\u52a0\u81ea\u5df1\u7684\u54cd\u5e94\u5934\u8be5\u600e\u4e48\u529e\u5462\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u53e6\u4e00\u79cd\u7075\u6d3b\u7684\u65b9\u5f0f\uff0cScarf\u5141\u8bb8\u7684\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2atuple,tuple\u6700\u5c11\u9700\u8981\u4e09\u4e2a\u5143\u7d20\uff0c\u4ece\u524d\u5f80\u540e\u5206\u522b\u662f**(\u72b6\u6001\u7801:int, \u54cd\u5e94\u5934\u5185\u5bb9: dict, \u54cd\u5e94\u4f53: bytes, \u72b6\u6001\u63cf\u8ff0: str(\u9009\u586b-\u82e5\u4e0d\u586b\u5219\u901a\u8fc7\u5f53\u524d\u72b6\u6001\u7801\u8fdb\u884c\u63a8\u65ad))**\u3002\u5c31\u4e0a\u9762\u4e09\u4e2a\u4f8b\u5b50\u6211\u4eec\u65b0\u589e\u4e00\u4e2a\u63a5\u53e3\uff0c\u8def\u5f84\u4e3a:/api/test/:choice,\u901a\u8fc7choice\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u5bf9\u5e94\u7684\u5185\u5bb9\u770b\u4e00\u4e0b\u6548\u679c\n\n```python\n@RequestReslove.route(\"/api/test/:choice\", (Methods.GET,), ((), (), (), ('choice',)))\ndef test_result(self, choice: int):\n       if choice == 0:\n           return \"text\"\n       elif choice == 1:\n           return {\"code\": 200, \"data\": \"json\", \"msg\": \"success\"}\n       elif choice == 2:\n           return (200, {\"Content-Type\": \"application/octet-stream\"}, b\"{'code': 200, 'data': 'json', 'msg': 'success'}\")\n       else:\n       \t\treturn None # \u5982\u679c\u8fd4\u56deNone\u5219\u4e3a\u7a7a\u54cd\u5e94\u4f53(Respone Body)\u8fd4\u56de\u503c204\n```\n\n\u901a\u8fc7\u8bbf\u95eehttp://localhost:8085/api/test/0 | 1 | 2\u5c06\u4f1a\u770b\u5230\u4e0d\u540c\u7684\u8fd4\u56de\u503c\n\n\u8fd9\u4e9b\u8fd4\u56de\u503c\u53ef\u80fd\u8fd8\u662f\u4e0d\u591f\u7528\u7684\uff0c\u5728\u9047\u5230\u5927\u578b\u6570\u636e\u6216\u8005\u6d41\u6570\u636e\u65f6\u5c31\u4f1a\u9047\u5230\u4e9b\u8bb8\u9ebb\u70e6\uff0c\u90a3\u4e48\u53ef\u4ee5\u8bd5\u8bd5\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u8fd4\u56de\u3002\u6211\u4eec\u65b0\u589e\u4e00\u4e2a\u83b7\u53d6\u6587\u4ef6\u63a5\u53e3\n\n```python\n@RequestReslove.route(\"/get/file\", (Methods.GET,))\n    def get_file(self):\n        fd = open(\"./test.exe\", \"rb+\")\n        file_size = os.path.getsize(\"./test.exe\")\n        yield bytes # \u544a\u77e5Scarf\u672c\u6b21\u4f20\u8f93\u6570\u636e\u7684\u7c7b\u578b\uff0c\u652f\u6301\u7684\u6709:str(text/plain) | dict(application/json) | bytes(application/octet-stream) | \"Custom type\"(\u76f4\u63a5\u66f4\u6539Content-Type)\n        while file_size > 0:\n            yield fd.read(1024 if file_size > 1024 else file_size) # \u6bcf\u6b21\u8bfb\u53d61024B\n            file_size -= 1024\n        yield None # \u53d1\u9001\u7ed3\u675f\n        fd.close() # \u5173\u95ed\u6587\u4ef6\n        print(\"send complate\")\n        yield None\n```\n\n\u901a\u8fc7\u4e0a\u8ff0\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u5bf9\u6d41\u5f0f\u6570\u636e\u8fdb\u884c\u5904\u7406\u548c\u53d1\u9001\uff0c\u53e6\u5916\u5728\u6700\u540e\u4e00\u6b21\u53d1\u9001\u540e\u53ef\u8fdb\u884c\u4e00\u4e9b\u9500\u6bc1\u7684\u64cd\u4f5c\u3002\u4f46\u662f\u9664\u4e86\u4e0a\u8ff0\u60c5\u51b5\u8fd8\u4f1a\u9047\u5230\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u6211\u4ece\u6570\u636e\u5e93\u67e5\u503c\u4f46\u8fd4\u56de\u7684\u662f\u5b9e\u4f53\u7c7b\uff0c\u73b0\u5728\u5e0c\u671b\u7684\u662f\u5c06\u5b9e\u4f53\u7c7b\u5e8f\u5217\u5316\u4e3aJSON\u7ed9\u524d\u7aef\u89e3\u6790\u3002\u90a3\u4e48\u5c31\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u65b9\u5f0f\u6765\u5904\u7406,\u9996\u5148\u9700\u8981\u544a\u77e5Scarf\u9700\u8981\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\uff0c\u6539\u9020\u4e00\u4e0bUSER\u7c7b:\n\n```python\n# models/User.py\n\n@SQLModel.model_factory(Model)\nclass USER:\n    userId: int = IntegerField(null=False, primary_key=True)\n    createTime: translate_str_to_datetime = DateTimeField(null=False)\n    username: str = CharField(null=False, max_length=32)\n    password: str = CharField(null=False, max_length=32)\n    email: str = TextField(null=False)\n    phone: str = CharField(null=False, max_length=11)\n    icon: FileDeliver = TextField(null=False) # \u65b0\u589eicon\u5b57\u6bb5\n```\n\n\u7136\u540e\u6211\u4eec\u518d\u65b0\u589e\u4e00\u4e2a\u63a5\u53e3\u901a\u8fc7\u7528\u6237\u540d\u5bc6\u7801\u67e5\u8be2\u7528\u6237\u4fe1\u606f(get_user)\u7684\u63a5\u53e3\u3002\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\nfrom models.User import USER\n\nimport hashlib, time, os\nfrom datetime import datetime\n\nclass Auth:\n    def __init__(self):\n        pass\n\n    @RequestReslove.route(\"/hello\")\n    def hello(self):\n        return \"hello world\"\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        (\n            (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n            ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # \u83b7\u53d6Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            return {\"code\": 200, \"data\": md5_.hexdigest(), \"msg\": \"Login Success\"}\n        else:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n\n        @RequestReslove.route(\"/api/getuser\", (Methods.GET,), (('username', 'password'), (), (), ()))\n        def get_user(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n            # \u901a\u8fc7\u7528\u6237\u540d\u5bc6\u7801\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n            USER.bind(sql)\n            return USER.select().where(USER.password == password and USER.password == password)\n\n        @RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                              ((), (ClassSource.JSON | ClassSource.FORM_DATA, '_user'), (), ())\n                             )\n        def user_register(self, _user: USER, sql: SQLModel.DataBaseConnection):\n            if not _user.icon.invaild():\n                _md5 = hashlib.md5()\n                filename = _user.icon.filename + str(time.time())\n                _md5.update(filename.encode())\n                filename = _md5.hexdigest() + _user.icon.ext_name\n                _user.icon.save(\"./static/icons/\" + filename)\n                _user.icon = \"http://localhost:81/icons/\" + filename\n                _user.bind(sql)\n                _user.save()\n                return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n            else:\n                return {\"code\": 500, \"msg\": \"Photo File Error\", \"data\": None}\n\n            @RequestReslove.route(\"/api/test/:choice\", (Methods.GET,), ((), (), (), ('choice',)))\n            def test_result(self, choice: int):\n                if choice == 0:\n                    return \"text\"\n                elif choice == 1:\n                    return {\"code\": 200, \"data\": \"json\", \"msg\": \"success\"}\n                elif choice == 2:\n                    return (\n                        200, {\"Content-Type\": \"application/octet-stream\"}, b\"{'code': 200, 'data': 'json', 'msg': 'success'}\")\n                else:\n                    return None\n\n                @RequestReslove.route(\"/get/file\", (Methods.GET,))\n                def get_file(self):\n                    fd = open(\"./test.exe\", \"rb+\")\n                    file_size = os.path.getsize(\"./test.exe\")\n                    yield bytes\n                    while file_size > 0:\n                        yield fd.read(1024 if file_size > 1024 else file_size)\n                        file_size -= 1024\n                        yield None\n                        fd.read()\n                        print(\"send complate\")\n                        yield None\n```\n\n\u6b64\u65f6\u5f53\u6211\u4eec\u8bbf\u95ee http://localhost:8085/api/getuser?username=admin&password=admin \u901a\u8fc7\u5b9e\u73b0\u7684get_user\u51fd\u6570\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u89c2\u5bdf\u5230\u8fd4\u56de\u503c\u5373\u4e3aUSER\u7c7b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u7ec4\u6210\u7684JSON\u5e8f\u5217\u5316\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u8fd9\u4e9b\u5b57\u6bb5\u6709\u4e9b\u662f\u5e94\u8be5\u9690\u853d\u6216\u8005\u4e0d\u9700\u8981\u7684\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5728USER\u7c7b\u4e0a\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a **fields**\u6307\u5b9a\u5e8f\u5217\u5316\uff0c\u800c\u4f7f\u7528\u4fee\u9970\u5668\u5219\u662f\u5c06\u6240\u6709\u5b57\u6bb5\u8fdb\u884c\u8fd4\u56de\u3002\n\n```python\n# models/User.py\n\nclass USER(Model):\n    __fields__ = ('userId', 'createTime', 'username', 'phone', 'email', 'icon')\n    userId: int = IntegerField(null=False, primary_key=True)\n    createTime: translate_str_to_datetime = DateTimeField(null=False)\n    username: str = CharField(null=False, max_length=32)\n    password: str = CharField(null=False, max_length=32)\n    email: str = TextField(null=False)\n    phone: str = CharField(null=False, max_length=11)\n    icon: FileDeliver = TextField(null=False)\n```\n\n\n\n\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u662f\u5d4c\u5957\u578b\uff0c\u53ea\u8981\u662fScarf\u652f\u6301\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u5c31\u53ef\u4ee5\u4e86\n\n```json\n\n{\"code\":200, \"data\":[USER,USER,USER], \"msg\": \"Success\"}\n// \u5e8f\u5217\u5316\u540e\n{\"code\":200, \"data\":[{\n        \"userId\": 62,\n        \"createTime\": \"2021-12-01 18:27:15\",\n        \"username\": \"admin\",\n        \"phone\": \"12345678912\",\n        \"email\": \"test@email.com\",\n        \"icon\": null\n    },{\n        \"userId\": 62,\n        \"createTime\": \"2021-12-01 18:27:15\",\n        \"username\": \"admin\",\n        \"phone\": \"12345678912\",\n        \"email\": \"test@email.com\",\n        \"icon\": null\n    },{\n        \"userId\": 62,\n        \"createTime\": \"2021-12-01 18:27:15\",\n        \"username\": \"admin\",\n        \"phone\": \"12345678912\",\n        \"email\": \"test@email.com\",\n        \"icon\": null\n    }], \"msg\": \"Success\"}\n```\n\n\n\n\u6700\u540e\u4e00\u79cd\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a**\u5f02\u5e38(Exception),\u5f02\u5e38\u901a\u5e38\u4f1a\u88ab\u683c\u5f0f\u5316\u9519\u8bef\u5b57\u7b26\u5e76\u5c06\u8fd4\u56de\u503c\u72b6\u6001\u7801\u53d8\u4e3a500\u3002**\n\n\n\n## **Cookie**\n\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u518d\u589e\u52a0\u4e00\u4e2a\u9700\u6c42\uff0c\u5728\u8bbf\u95ee\u83b7\u53d6\u7528\u6237\u4fe1\u606f\uff08get_user\uff09\u63a5\u53e3\u4e4b\u524d\u9700\u8981\u77e5\u9053\u7528\u6237\u662f\u5426\u5df2\u7ecf\u767b\u5f55\u8fc7\uff0c\u5982\u679c\u6ca1\u6709\u767b\u5f55\u5219\u5e94\u8be5\u963b\u6b62\u7528\u6237\u8bbf\u95ee\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u3002\u90a3\u4e48Cookie\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u5728\u83b7\u53d6Cookie\u94b1\u6211\u4eec\u5148\u4e86\u89e3\u4e24\u4e2a\u91cd\u8981\u7684\u5b9e\u4f8b\u5bf9\u8c61**HTTPRequest**\u548c**HTTPResponse**,\u8fd9\u4e24\u4e2a\u5b9e\u4f8b\u524d\u8005\u662f\u7528\u6765\u83b7\u53d6\u7528\u6237\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u800c\u540e\u8005\u5219\u662f\u8bbe\u7f6e\u548c\u5206\u914d\u54cd\u5e94\u4e2d\u7684\u6570\u636e\u4fe1\u606f\u3002\u83b7\u53d6Cookie\u524d\u5f97\u5148\u5bf9\u5ba2\u6237\u7aef\u8bbe\u7f6eCookie\uff0c\u6211\u4eec\u5728\u767b\u5f55\u63a5\u53e3\u5148\u505a\u4e00\u4e2a\u4f8b\u5b50,\u540c\u6837\u6211\u4eec\u5728\u767b\u5f55\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u7684\u5f62\u53c2\u4e2d\u76f4\u63a5\u52a0\u5165**HTTPResponse**\u83b7\u53d6\u5f53\u524d\u54cd\u5e94\u5b9e\u4f8b\uff0c\u5728\u8fd4\u56deCookie\u7684\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u6d3b\u8dc3\u7684\u7528\u6237\u7684Cookie\u4fe1\u606f\uff08\u53ef\u4f7f\u7528Redis\uff09\u3002\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\nfrom Scarf.Protocol.HTTP import HTTPResponse, HTTPRequest\n\nfrom models.User import USER\n\nimport hashlib, time, os\nfrom datetime import datetime\n\nclass Auth:\n    def __init__(self):\n        # \u7528\u6237\u4fe1\u606f\u4fdd\u5b58 token : username\n        self.__tokens = {}\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n        @RequestReslove.route(\n            \"/api/login\",\n            (Methods.POST, Methods.HEAD),\n            (\n                (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n                ())\n        )\n        def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection, res: HTTPResponse):\n            user = USER(username=username, password=password)\n            user.bind(sql)\n            result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n            if result:\n                # \u83b7\u53d6Token\n                md5_ = hashlib.md5()\n                md5_.update(str(result.userId).encode())\n                res.cookies = ('token', md5_.hexdigest())\n                res.cookies = ('HttpOnly',)\n                res.cookies = ('Path', '/')\n                self.__tokens[md5_.hexdigest()] = username\n                return {\"code\": 200, \"data\": None, \"msg\": \"Login Success\"}\n            else:\n                return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n\n            @RequestReslove.route(\"/api/getuser\", (Methods.GET,), ((), (), (), ()))\n            def get_user(self, sql: SQLModel.DataBaseConnection, req: HTTPRequest):\n                username = self.__tokens.get(req.cookies.get(\"token\"))\n                if username:\n                    user = USER(useranem=username)\n                    user.bind(sql)\n                    return user.select().where(USER.username == username)\n                else:\n                    return (400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\")\n```\n\nCookie\u5728HTTPRequest\u4e2d\u7684\u7528\u6cd5\u5373HTTPRequest.cookies(dict)\u3002\n\nCookie\u5728HTTPResponse\u4e2d\u7684\u7528\u6cd5\u82e5\u76f4\u63a5\u6253\u5370(print)\u5219\u663e\u793a\u5e8f\u5217\u5316\u540e\u7684Cookie\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u4f7f\u7528get_cookie_by_name(name,default=None)\u83b7\u53d6\uff0c\u82e5\u9700\u8981\u5220\u9664Cookie\u5219\u53ef\u4ee5\u4f7f\u7528del_cookie(name)\uff0c\u53e6\u5916\u6dfb\u52a0Cookie\u65f6\u9700\u8981\u4e00\u4e2a\u4e24\u4e2a\u5143\u7d20\u6216\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7956\u3002\n\n\u73b0\u5728\u901a\u8fc7Cookie\u67e5\u8be2\u540e\u5c31\u4e0d\u9700\u8981username\u548cpassword\u4e86\uff0c\u8fd9\u6837\u4e5f\u53ef\u4ee5\u6821\u9a8c\u7528\u6237\u7684\u72b6\u6001\u548c\u5b89\u5168\u6027\u7684\u63d0\u5347\uff0c\u4f46\u662f\u8fd9\u53ea\u80fd\u9488\u5bf9\u4e8e\u5355\u72ec\u7684\u63a5\u53e3\u3002\u5728\u5927\u90e8\u5206\u573a\u666f\u4e0b\u66f4\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u5168\u5c40\u7684\u4e00\u79cd\u65b9\u5f0f\u8fdb\u884c\u628a\u63a7\uff0c\u53ea\u653e\u5f00\u767b\u5f55\uff08user_login\uff09\u63a5\u53e3\u7684\u8c03\u7528\uff0c\u9650\u5236\u5176\u4ed6\u63a5\u53e3\u9700\u8981\u6838\u5bf9Cookie\u540e\u624d\u80fd\u653e\u884c\u3002\n\n\n\n## **\u62e6\u622a\u5668\u548c\u8fc7\u6ee4\u5668**\n\n\n\n\u9488\u5bf9\u4e8e\u4ee5\u4e0a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fc7\u6ee4\u5668\u8fdb\u884c\u5bf9\u63a5\u53e3\u7684\u5ba1\u67e5\u548c\u8fdb\u5165\u5bf9\u5e94\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u524d\u7684\u4fee\u6539\u3002\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u62e6\u622a\u5668,\u5e76\u5b9e\u73b0Cookie\u62e6\u622a\u3002\n\n```python\n# routers/RequestProcessor.py\n\nfrom Scarf.Context.RequestReslove import FilterRegister\n\n# \u9700\u8981\u7ee7\u627f\u4e8e FilterRegister\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n     \t# \u7236\u7c7b\u521d\u59cb\u5316 \u53c2\u65701\uff1a\u662f\u5426\u5b9e\u73b0\u8bf7\u6c42\u62e6\u622a\u5668\uff0c\u53c2\u65702\uff1a\u662f\u5426\u5b9e\u73b0\u8bf7\u6c42\u8fd4\u56de\u8fc7\u6ee4\u5668\n        super().__init__(True, False)\n\n    def enter_intercept(self, req:HTTPRequest,res:HTTPResponse ): # \u82e5\u544a\u77e5\u7236\u7c7b\u6253\u5f00\u4e86\u8bf7\u6c42\u62e6\u622a\u9009\u9879\uff0c\u8be5\u62bd\u8c61\u65b9\u6cd5\u9700\u8981\u5b9e\u73b0\uff0c\u524d\u4e24\u4e2a\u53c2\u6570\u56fa\u5b9a\u5206\u522b\u662f:HTTPRequest\u548cHTTPResponse\n\t\tif req.path == \"/api/login\":  # \u767b\u5f55\u63a5\u53e3\u4e0d\u505a\u6821\u9a8c\n            return RequestsState.NEXT\n        elif req.cookies.get(\"token\"):  # \u5176\u4ed6\u63a5\u53e3Cookie\u4e2d\u662f\u5426\u6709Token\n            return RequestsState.NEXT\n        else:\t# \u5426\u5219\u62d2\u7edd\u670d\u52a1\n            # return RequestsState.CLOSE\n            res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n            return RequestsState.PUSHNOW\n```\n\n\u53e6\u5916\u8fd8\u9700\u8981\u5728 main.py\u5165\u53e3\u6587\u4ef6\u4e2d\u6ce8\u518c\u8fc7\u6ee4\u5668\u548c\u62e6\u622a\u5668\n\n```python\n# main.py\n\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\nfrom routers.RequestProcessor import RequestProcessor\n\nfrom models.SQLConnectionManager import SQLFactory\n\nserver = Scarf()\n\nserver.load_config_from_file(\"./application.yml\")\n\nserver.register_sql_model(\"main\", SQLFactory)\n\n# \u6ce8\u518c\u62e6\u622a\u5668\u548c\u8fc7\u6ee4\u5668\nserver.register_hook(RequestProcessor())\n\nserver.scan_module(Auth())\n\nserver.start_server()\n```\n\n\u901a\u8fc7\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\u6309\u7167\u7279\u5b9a\u89c4\u5219\u8fdb\u884c\u5ba1\u67e5\uff0c\u5f53\u7136\u4e5f\u770b\u5230\u4e86return\u7684\u4e00\u4e9b\u8fd4\u56de\u503c\uff0c**RequestsState\u53ef\u4ee5\u7406\u89e3\u4e3a\u679a\u4e3e\uff0cNEXT-\u8fdb\u5165\u4e0b\u4e00\u4e2a\u62e6\u622a\u5668\uff0cPUSHNOW-\u7acb\u523b\u53d1\u9001\u524d\u8bbe\u7f6e\u7684Reponse\u6570\u636e\uff0cCLOSE-\u5173\u95ed\u4e0e\u5ba2\u6237\u7aef\u7684\u8fde\u63a5(\u65ad\u5f00\u5f0f\u62d2\u7edd\u670d\u52a1)**\u4f46\u662f\u6709\u4e9b\u63a5\u53e3\u7684\u8fd4\u56de\u503c\u6bd4\u5982\u5b57\u5178(dict)\u90fd\u5c06\u5212\u5f52\u4e3aJSON\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u63a5\u53e3\u505a\u4ee5\u4e0b\u6539\u52a8\uff0c\u62ff\u7528\u6237\u767b\u5f55(user_login)\u548c\u7528\u6237\u4fe1\u606f\u67e5\u8be2(get_user)\u4e24\u4e2a\u63a5\u53e3\u4e3a\u4f8b\u3002\u56e0\u4e3a\u8fd4\u56de\u503c\u56fa\u5b9a\u662f{\"code\": 200, \"msg\": \"msg\", \"data\": None}\u82e5\u8def\u7531\u5b9e\u4f53\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u5178(dict)\u6216None\u5219\u76f4\u63a5\u5c06\u6570\u636e\u653e\u5165data\u5b57\u6bb5\u4e2d\uff1a\n\n\n\n```python\n# routers/User.py\n\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.POST, Methods.HEAD),\n    ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (), ())\n)\ndef user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection(\"main\"), res: HTTPResponse):\n    user = USER(username=username, password=password)\n    user.bind(sql)\n    result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n    if result:\n        # \u83b7\u53d6Token\n        md5_ = hashlib.md5()\n        md5_.update(str(result.userId).encode())\n        res.cookies = ('token', md5_.hexdigest())\n        res.cookies = ('HttpOnly',)\n        res.cookies = ('Path', '/')\n        self.__tokens[md5_.hexdigest()] = username\n        return None\n    else:\n        return None\n\n    @RequestReslove.route(\"/api/getuser\", (Methods.GET,), ((), (), (), ()))\n    def get_user(self, sql: SQLModel.DataBaseConnection, req: HTTPRequest):\n        username = self.__tokens.get(req.cookies.get(\"token\"))\n        if username:\n            user = USER(useranem=username)\n            user.bind(sql)\n            return user.select().where(USER.username == username)\n        else:\n            # return (400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\")\n            return (400, {}, \"User Not Login\") # \u6309\u7167\u6b63\u5e38\u7684\u8fd4\u56de\u89c4\u8303,tuple\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u5e94\u8be5\u662fbytes\uff0c\u4f46\u662f\u7ecf\u8fc7\u8fc7\u6ee4\u5668\u4fee\u6539\u540e\u53ef\u81ea\u5b9a\u4e49\u8fd4\u56de\u7c7b\u578b\n```\n\n```python\n# routers/RequestProcessor.py\n\nfrom Scarf.Context.RequestReslove import FilterRegister\nfrom Scarf.Protocol.HTTP import HTTPRequest, HTTPResponse\nfrom Scarf.Tip import RequestsState, SQLModel\nfrom peewee import Model\n\nimport json\n\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n        super().__init__(True, True)\n\n        def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main2\")):\n            if req.path == \"/api/login\":  # \u767b\u5f55\u63a5\u53e3\u4e0d\u505a\u6821\u9a8c\n                return RequestsState.NEXT\n\n            elif req.cookies.get(\"token\"):  # \u5176\u4ed6\u63a5\u53e3Cookie\u4e2d\u662f\u5426\u6709Token\n                return RequestsState.NEXT\n            else:\n                # return RequestsState.CLOSE\n                res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n                return RequestsState.PUSHNOW\n\n            def outer_filter(self, req: HTTPRequest, res: HTTPResponse):\n                result = res.get_data()\n                data = {\"code\": 200, \"msg\": \"Success\", \"data\": None}\n                if result is None:\n                    res.set_data(data)\n                    elif isinstance(result, dict) or isinstance(result, Model) or isinstance(result, list):\n                        data[\"data\"] = result\n                        res.set_data(data)\n                        elif isinstance(result, Exception):\n                            data[\"code\"] = 500\n                            data[\"msg\"] = \"Fail\"\n                            data[\"data\"] = str(result)\n                            res.set_data(data)\n                            elif isinstance(result, tuple):\n                                result = list(result)\n                                data[\"code\"] = result[0]\n                                result[0] = 200\n                                result[1][\"Content-Type\"] = \"application/json\"\n                                if len(result) > 3:\n                                    data[\"msg\"] = result[3]\n                                    data[\"data\"] = result[2]\n                                    result[2] = json.dumps(data).encode()\n                                    res.set_data(tuple(result))\n                                    return RequestsState.NEXT\n```\n\n\n\n\u6b64\u65f6\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u53ef\u4ee5\u8fdb\u884c\u8fc7\u6ee4\u548c\u62e6\u622a\u5904\u7406\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5149\u6709\u63a5\u53e3\u53ef\u4e0d\u884c\u8fd8\u9700\u8981\u63d0\u4f9b\u9759\u6001\u6587\u4ef6\u7684\u670d\u52a1\u548c\u4e00\u4e9b\u914d\u7f6e\u4e0a\u7684\u5176\u4ed6\u53c2\u6570\u3002\n\n\n\n## **\u9759\u6001\u6587\u4ef6\u670d\u52a1**\n\n\n\n\u9759\u6001\u6587\u4ef6\u5927\u90e8\u5206\u90fd\u662f\u914d\u7f6e\u6027\u7684\uff0c\u6211\u4eec\u518d\u56de\u5230application.yml\uff0c\u6211\u4eec\u7684\u9759\u6001\u6587\u4ef6\u5e94\u5b58\u653e\u5728\u4e00\u4e2a\u4e13\u95e8\u7684\u6587\u4ef6\u5939\uff0c\u5c31\u4ee5\u6b64\u9879\u76ee\u4e3a\u4f8b\uff0cstatic\u6587\u4ef6\u5939\u5b58\u653e\u5404\u79cd\u9759\u6001\u6587\u4ef6\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u914d\u7f6e\u9759\u6001\u6587\u4ef6\u5939\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\n\n```yml\nserver:\n release: false\n ports:\n   http: 8085\n static:\n   visitpath: ./static # \u9759\u6001\u6587\u4ef6\u8def\u5f84\n   entryfile: index.html # \u6587\u4ef6\u5939\u9ed8\u8ba4\u5165\u53e3\u6587\u4ef6\n```\n\n\u5728\u6211\u4eec\u4e4b\u524d\u6ce8\u518c\u63a5\u53e3\u4e2d\u6709\u4e00\u4e2a\u56fe\u7247\u5176\u672c\u5730\u8def\u5f84\u4e3a\\Project Flodder\\static\\icons\\a86711817f33fb16a701a74d925965fc.jpg\u3002\u6211\u4eec\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee http://localhost:8085/icons/a86711817f33fb16a701a74d925965fc.jpg \u4f46\u662f\u8fd9\u6837\u8bbf\u95ee\u7684\u7ed3\u679c\u4e3aUser Not Login,\u663e\u7136\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u5bf9\u4e8e\u63a5\u53e3\u7684\u8bbf\u95ee\u6211\u4eec\u5e94\u4e88\u4ee5\u62e6\u622a\uff0c\u4f46\u5bf9\u4e8e\u9759\u6001\u6587\u4ef6\u751a\u81f3\u540e\u9762\u7684WebSocket\u7684\u8bf7\u6c42\u6211\u4eec\u5219\u5e94\u4e88\u4ee5\u653e\u884c\uff0c\u5219\u9700\u8981\u4fee\u6539\u62e6\u622a\u5668\u548c\u8fc7\u6ee4\u5668\n\n```python\n# routers/RequestProcessor.py\n\nfrom Scarf.Context.RequestReslove import FilterRegister\nfrom Scarf.Protocol.HTTP import HTTPRequest, HTTPResponse\nfrom Scarf.Tip import RequestsState, SQLModel\nfrom peewee import Model\n\nimport json,os\n\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n        super().__init__(True, True)\n\n        def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main2\")):\n            if req.path == \"/api/login\" or req.is_file or req.is_not_found:  # \u767b\u5f55\u63a5\u53e3\uff0c\u9759\u6001\u6587\u4ef6\uff0c404\uff0c\u4e0d\u505a\u6821\u9a8c\n                return RequestsState.NEXT\n            elif req.cookies.get(\"token\"):  # \u5176\u4ed6\u63a5\u53e3Cookie\u4e2d\u662f\u5426\u6709Token\n                return RequestsState.NEXT\n            else:\n                # return RequestsState.CLOSE\n                res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n                return RequestsState.PUSHNOW\n\n            def outer_filter(self, req: HTTPRequest, res: HTTPResponse):\n                result = res.get_data()\n                data = {\"code\": 200, \"msg\": \"Success\", \"data\": None}\n                if req.is_file or req.is_not_found and res.code != 200 and res.code != 500 and res.code != 400:\n                    # \u5f53\u8fd4\u56de\u7684\u662f\u6587\u4ef6\u7c7b\u578b\u6216\u8005\u72b6\u6001\u7801404\u4ee5\u53ca200\uff0c500\uff0c400\u4e0d\u505a\u8fc7\u6ee4\n                    return RequestsState.NEXT\n                elif result is None:\n                    res.set_data(data)\n                    elif isinstance(result, dict) or isinstance(result, Model) or isinstance(result, list):\n                        data[\"data\"] = result\n                        res.set_data(data)\n                        elif isinstance(result, Exception):\n                            data[\"code\"] = 500\n                            data[\"msg\"] = \"Fail\"\n                            data[\"data\"] = str(result)\n                            res.set_data(data)\n                            elif isinstance(result, tuple):\n                                result = list(result)\n                                data[\"code\"] = result[0]\n                                result[0] = 200\n                                result[1][\"Content-Type\"] = \"application/json\"\n                                if len(result) > 3:\n                                    data[\"msg\"] = result[3]\n                                    data[\"data\"] = result[2]\n                                    result[2] = json.dumps(data).encode()\n                                    res.set_data(tuple(result))\n                                    return RequestsState.NEXT\n```\n\n\u73b0\u5728\u518d\u6b21\u8bbf\u95ee\u6211\u4eec\u5c31\u53ef\u4ee5\u770b\u5230\u56fe\u7247\u4e86\u3002\u800c\u5bf9\u4e8eapplication.yml\u4e2dstatic\u4e0bentryfile\u5219\u662f\u5f53\u8bbf\u95ee\u4e00\u4e2a\u6587\u4ef6\u5939\u8def\u5f84\u65f6\u4e3b\u52a8\u5bfb\u627e\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684\u9ed8\u8ba4\u6587\u4ef6\uff0c\u6211\u4eec\u5728static\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939home\uff0c\u7136\u540e\u5728home\u4e2d\u65b0\u589e\u4e00\u4e2aindex.html\u6587\u4ef6\uff0c\u5e76\u7f16\u8f91\u5185\u5bb9\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <h1>Hello World</h1>\n    </body>\n</html>\n```\n\n\u6b64\u65f6\u5f53\u6211\u4eec\u8bbf\u95ee http://localhost:8085/home \u65f6\u5219\u53ef\u76f4\u63a5\u8bbf\u95eeindex.html\u6587\u4ef6\u3002\n\u6211\u4eec\u73b0\u5728\u8bbe\u7f6e\u591a\u4e2a\u9879\u76ee\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2ahome\u6587\u4ef6\u5939\uff0c\u5728\u6587\u4ef6\u5939\u4e2d\u653e\u5165\u4e00\u4e2a[Vue](https://cn.vuejs.org/index.html \"Vue\")\u7ecf\u8fc7\u6253\u5305\u7684\u9879\u76ee\u5305\u3002\u9879\u76ee\u5305\u7ed3\u6784\u5982\u4e0b\uff1a\n```\n|-- home\n    |-- favicon.ico\n    |-- index.html\n    |-- manifest.json\n    |-- precache-manifest.b5ea767956a04e1a46fbdab2a8eca0dc.js\n    |-- robots.txt\n    |-- service-worker.js\n    |-- css\n    |   |-- app.ed2a99d6.css\n    |   |-- chunk-vendors.5cbbb097.css\n    |-- fonts\n    |   |-- ionicons.143146fa.woff2\n    |   |-- ionicons.99ac3308.woff\n    |   |-- ionicons.d535a25a.ttf\n    |-- img\n    |   |-- ionicons.a2c4a261.svg\n    |   |-- icons\n    |       |-- android-chrome-192x192.png\n    |       |-- android-chrome-512x512.png\n    |       |-- android-chrome-maskable-192x192.png\n    |       |-- android-chrome-maskable-512x512.png\n    |       |-- apple-touch-icon-120x120.png\n    |       |-- apple-touch-icon-152x152.png\n    |       |-- apple-touch-icon-180x180.png\n    |       |-- apple-touch-icon-60x60.png\n    |       |-- apple-touch-icon-76x76.png\n    |       |-- apple-touch-icon.png\n    |       |-- favicon-16x16.png\n    |       |-- favicon-32x32.png\n    |       |-- msapplication-icon-144x144.png\n    |       |-- mstile-150x150.png\n    |       |-- safari-pinned-tab.svg\n    |-- js\n        |-- app.7a63ada9.js\n        |-- app.7a63ada9.js.map\n        |-- chunk-vendors.b1c772aa.js\n        |-- chunk-vendors.b1c772aa.js.map\n```\n\u5f53\u524d\u9879\u76ee\u5305\u8bbe\u7f6e\u7684\u8def\u7531\u6a21\u5f0f\u4e3ahistory\u6a21\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8def\u7531\u6620\u5c04\u5c06\u8def\u5f84\u5b9a\u5411\u5230home\u6587\u4ef6\u5939\uff0c\u4ec5\u9700\u5728yml\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\u5373\u53ef\u5b9e\u73b0:\n```yml\nserver:\n release: false\n ports:\n   http: 8085\n static:\n   visitpath: ./static # \u9759\u6001\u6587\u4ef6\u8def\u5f84\n   entryfile: index.html # \u6587\u4ef6\u5939\u9ed8\u8ba4\u5165\u53e3\u6587\u4ef6\n   map: # \u8def\u7531\u6620\u5c04\u914d\u7f6e\n     - {router: /home/*, path: /home/index.html} # \u5f53\u8bbf\u95ee/home\u65f6\u670d\u52a1\u4f1a\u81ea\u52a8\u5c06\u8bf7\u6c42\u5b9a\u5411\u5230/home/index.html(\u82e5\u6ca1\u6709\u4efb\u4f55\u5339\u914d\u7684\u8def\u5f84)\n     - {router: /test/*, path: /main/*} # \u5f53\u8bbf\u95ee/test/*\u65f6\u6240\u6709\u7684\u6587\u4ef6\u5c06\u4f1a\u88ab\u6620\u5c04\u5230/home\u7684\u5b50\u76ee\u5f55\u4e0b\n```\n## \u4e8b\u4ef6\n\n\u73b0\u5728\u6211\u4eec\u5c06\u5bf9Cookie\u505a\u66f4\u8fdb\u4e00\u6b65\u7684\u4fee\u6539\uff0c\u6211\u4eec\u73b0\u5728\u4e0d\u4ec5\u4ec5\u662f\u8981\u9a8c\u8bc1\u8bf7\u6c42\u662f\u5426\u542b\u6709Cookie\u8fd8\u8981\u5bf9Cookie\u8fdb\u884c\u6821\u9a8c\uff0c\u67e5\u770b\u6765\u81ea\u5ba2\u6237\u7aef\u7684Cookie\u662f\u5426\u662f\u6570\u636e\u5e93\u6216\u8005\u66fe\u7ecf\u767b\u5f55\u8fc7\u7684\u7528\u6237\u3002\u6211\u4eec\u53ef\u80fd\u76f4\u63a5\u53ef\u4ee5\u60f3\u5230\u7684\u662f\uff0c\u5728\u8bf7\u6c42\u62e6\u622a\u5668\u4e2d\u5d4c\u5165Cookie\u62e6\u622a\u3002\u4f46\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u7f16\u7801\u4e00\u4e2a\u67e5\u8be2Cookie\u7684\u65b9\u6cd5\uff0c\u6709\u65f6\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u53ef\u80fd\u8fd8\u9700\u8981\u8c03\u7528\u522b\u7684\u6a21\u5757\u7684\u63a5\u53e3\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e8b\u4ef6\u6765\u66ff\u4ee3\u6211\u4eec\u5b8c\u6210\u8fd9\u4e2a\u4e8b\u60c5\u3002\n\u6211\u4eec\u7684\u6d41\u7a0b\u5e94\u8be5\u662f\u8fd9\u6837\uff1a\u5f53\u8bf7\u6c42\u5230\u8fbe\u62e6\u622a\u5668\u65f6\uff0c\u5c06\u67e5\u8be2\u8bf7\u6c42\u9012\u4ea4\u7ed9Auth\u6a21\u5757\u8fdb\u884c\u5904\u7406\uff0cAuth\u6a21\u5757\u5e94\u73b0\u5728\u672c\u5730\u67e5\u8be2\u662f\u5426\u7528\u6237\u66fe\u7ecf\u767b\u5f55\uff0c\u82e5\u6ca1\u6709\u8bb0\u5f55\u5219\u518d\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u7136\u540e\u518d\u5728\u62e6\u622a\u5668\u4e2d\u5bf9Cookie\u9a8c\u8bc1\u7684\u8fd4\u56de\u503c\u8fdb\u884c\u9a8c\u8bc1\u3002\n\u6211\u4eec\u9996\u5148\u9700\u8981\u6ce8\u518c\u4e8b\u4ef6\uff1a\u5728\u7528\u6237\u8def\u7531\u6a21\u5757\u4e2d\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7528\u6237Cookie\u67e5\u8be2\u4ee5\u53ca\u4e8b\u4ef6\u7684\u6ce8\u518c\u3002\u5f53\u9700\u8981\u6ce8\u518c\u4e00\u4e2a\u4e8b\u4ef6\u65f6\u5e94\u8be5\u5148\u5728\u4e8b\u4ef6\u63a5\u6536\u6a21\u5757\u4e2d\u7f16\u5199\u597d\u5bf9\u5e94\u7684\u65b9\u6cd5\n```python\n# routers/User.py\n\n# \u6ce8\u518c\u4e8b\u4ef6\u9700\u8981\u4f7f\u7528\u4fee\u9970\u51fd\u6570\n# @RequestReslove.event(\"event_name\")\n\n#\u8be5\u4fee\u9970\u51fd\u6570\u4f7f\u7528\u4e24\u79cd\u65b9\u5f0f\u8fdb\u884c\u6ce8\u518c\u4e8b\u4ef6\n#\u76f4\u63a5\u5728\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e0a\u76f4\u63a5\nclass Auth:\n\t@RequestReslove.event(\"verfity_cookie\")\n    def verfity(self,cookie,sql):\n    \tUSER.bind(sql)\n        return self.__tokens.get(cookie) or USER.select().where(USER.token == cookie).count() > 0\n\n#======================================================= or =======================================================\n\n#\u76f4\u63a5\u5bf9\u7c7b\u8fdb\u884c\u4fee\u9970\n@RequestReslove.event(\"verfity_cookie\", \"verfity\", modules=True)\nclass Auth:\n\tdef verfity(self, cookie, sql)\n\t\tUSER.bind(sql)\n        return self.__tokens.get(cookie) or USER.select().where(USER.token == cookie).count() > 0\n\n#\u5982\u679c\u5bf9\u51fd\u6570\u8fdb\u884c\u4fee\u9970\uff0c\u90a3\u4e48RequestReslove.event\u7684\u53c2\u6570\u5373\u4e3a\u4e00\u4e2a\u4e8b\u4ef6\u540d\u79f0\n#\u5982\u679c\u5bf9\u7c7b\u8fdb\u884c\u4fee\u9970\uff0c\u90a3\u4e48Request.event\u7684\u53c2\u6570\u5e94\u8be5\u662f\u5076\u6570\u4e2a\uff0c\u5947\u6570\u53c2\u6570\u4e3a\u4e8b\u4ef6\u540d\u79f0\uff0c\u5076\u6570\u4e3a\u4e8b\u4ef6\u540d\u79f0\u5bf9\u5e94\u7c7b\u4e2d\u6240\u8981\u63a5\u53d7\u7684\u56de\u8c03\u51fd\u6570\u3002\u53e6\u5916\u5f53\u5bf9\u7c7b\u8fdb\u884c\u4fee\u9970\u65f6\u53ef\u4ee5\u4f7f\u7528modules\u53c2\u6570(default: False)\uff0c\u5f53modules=True\u65f6\u5219\u4e8b\u4ef6\u7684\u540d\u79f0\u524d\u8fd8\u4f1a\u52a0\u4e0a\u6a21\u5757\u7684__module__\u3002\n#\u540e\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u4f7f\u7528\u7b2c\u4e8c\u79cd\u4e8b\u4ef6\u6ce8\u518c\u7684\u65b9\u5f0f\n```\n\u53e6\u5916\u6211\u4eec\u8fd8\u9700\u8981\u5728main.py\u4e2d\u901a\u77e5Scarf\u54ea\u4e9b\u6a21\u5757\u88ab\u6ce8\u518c\u4e8b\u4ef6\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\nfrom routers.RequestProcessor import RequestProcessor\n\n\nfrom models.SQLConnectionManager import SQLFactory\n\nif __name__ == \"__main__\":\n    server = Scarf()\n\n    auth = Auth()\n\n    server.load_config_from_file(\"./application.yml\")\n\n    server.register_sql_model(\"main\", SQLFactory)\n    server.register_hook(RequestProcessor())\n\t# \u901a\u77e5Scarf\u4e8b\u4ef6\u5b8c\u6210\u6ce8\u518c\u7684\u6a21\u5757\n    server.register_events(auth)\n    server.scan_module(auth)\n\n    server.start_server()\n```\n\u73b0\u5728\u5df2\u7ecf\u5b8c\u6210\u4e86\u4e8b\u4ef6\u7684\u6ce8\u518c\uff0c\u63a5\u4e0b\u6765\u53ea\u8981\u5728\u9700\u8981\u7684\u5730\u65b9\u8fdb\u884c\u4e8b\u4ef6\u89e6\u53d1\u5373\u53ef\u3002\n```python\n# routers/RequestProcessor.py\n\n# \u82e5\u6a21\u5757\u6216\u7c7b\u88abScarf\u5728\u5165\u53e3\u6587\u4ef6\u4e2d\u6ce8\u518c\u8fc7\uff0c\u5219\u9ed8\u8ba4\u4f1a\u6ce8\u5165_emit(\"event_name\", *args, **kwargs)\u51fd\u6570\uff0c\u8c03\u7528\u8be5\u51fd\u6570\u5373\u53ef\u89e6\u53d1\u5bf9\u5e94\u7684\u4e8b\u4ef6\u56de\u8c03\u5e76\u901a\u8fc7_emit\u8fd4\u56de\u56de\u8c03\u7684\u8fd4\u56de\u503c\u3002\nclass RequestProcessor(FilterRegister):\n    def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main\")):\n        if req.path == \"/api/login\" or req.path == \"/api/upload\" or req.path == \"/get/file\" or req.is_file or req.is_not_found:\n        \t# \u767b\u5f55\u63a5\u53e3\u4e0d\u505a\u6821\u9a8c\n            return RequestsState.NEXT\n        elif req.cookies.get(\"token\") and self._emit(\"verfity_cookie\", req.cookies.get(\"token\"), sql):\n        \t# \u5176\u4ed6\u63a5\u53e3Cookie\u4e2d\u662f\u5426\u6709Token,\u5e76\u4e14\u9a8c\u8bc1Cookie\u4e2d\u7684token\u662f\u5426\u6709\u6548\n            return RequestsState.NEXT\n        else:\n            # return RequestsState.CLOSE\n            res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n            return RequestsState.PUSHNOW\n```\n\n\u5728_emit\u89e6\u53d1\u4e8b\u4ef6\u7684\u4e8b\u4ef6\u540d\u79f0\u53c2\u6570\u4e2d\uff0c\u4e8b\u4ef6\u7684\u5339\u914d\u89c4\u5219\u82e5\u5168\u5c40\u4e8b\u4ef6\u540d\u6ca1\u6709\u51b2\u7a81\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e8b\u4ef6\u540d\uff0c\u82e5\u4e8b\u4ef6\u540d\u6709\u91cd\u590d\u5219\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u63d0\u5230\u7684modules=Treu\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\"routers.User.Auth.verfity_cookie\"\n\n\u6211\u4eec\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u63a5\u53e3\u5373\u5c06\u7ed3\u675f\u7684\u65f6\u5019\u5bf9\u5176\u8fdb\u884c\u8bb0\u5f55\uff0c\u5e76\u6253\u5370\u8f93\u51fa\u3002\n\u5047\u8bbe\u518d\u5728Auth\u6a21\u5757\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65e5\u5fd7\u8bb0\u5f55\u4e8b\u4ef6\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5373\u5c06\u63a5\u53e3\u65f6\u8bb0\u5f55\u63a5\u53e3\u7684\u8bf7\u6c42\u8def\u5f84\u548c\u54cd\u5e94\u7ed3\u679c\u5e76\u6253\u5370\u8f93\u51fa\u3002\n\n```python\n# routers/User.py\n\n# \u6dfb\u52a0\u65e5\u5fd7\u65e5\u5fd7\u63a5\u6536\u4e8b\u4ef6\n@RequestReslove.event(\"verfity_cookie\", \"verfity\", \"log_record\", \"main_log\", modules=True)\nclass Auth:\n    def main_log(self, path, code, plain):\n        print(\"%s %i %s\" % (path, code, plain))\n\n    def verfity(self, cookie, sql):\n        print(cookie)\n        USER.bind(sql)\n        return self.__tokens.get(cookie) or USER.select().where(USER.token == cookie).count() > 0\n```\n\u5728\u62e6\u622a\u5668\u548c\u8fc7\u6ee4\u5668\u4e2d\u52a0\u5165\u4e8b\u4ef6\u89e6\u53d1\n```python\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n        super().__init__(True, True)\n\n    def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main\")):\n        if req.path == \"/api/login\" or req.path == \"/api/upload\" or req.path == \"/get/file\" or req.is_file or req.is_not_found:  # \u767b\u5f55\u63a5\u53e3\u4e0d\u505a\u6821\u9a8c\n            return RequestsState.NEXT\n        elif req.cookies.get(\"token\") and self._emit(\"routers.User.Auth.verfity_cookie\", req.cookies.get(\"token\"), sql):  # \u5176\u4ed6\u63a5\u53e3Cookie\u4e2d\u662f\u5426\u6709Token\n            return RequestsState.NEXT\n        else:\n            # return RequestsState.CLOSE\n            res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n            self._emit(\"routers.User.Auth.log_record\", req.path, 400, \"User Not Login\")\n            return RequestsState.PUSHNOW\n\n    def outer_filter(self, req: HTTPRequest, res: HTTPResponse):\n        result = res.get_data()\n        data = {\"code\": 200, \"msg\": \"Success\", \"data\": None}\n        if req.is_file or req.is_not_found:\n            self._emit(\"routers.User.Auth.log_record\", req.path, res.code, data[\"msg\"])\n            return RequestsState.NEXT\n        elif result is None:\n            res.set_data(data)\n        elif isinstance(result, dict) or isinstance(result, Model) or isinstance(result, list) or isinstance(result,\n                                                                                                             ModelSelect):\n            data[\"data\"] = result\n            res.set_data(data)\n        elif isinstance(result, Exception):\n            data[\"code\"] = 500\n            data[\"msg\"] = \"Server Error\"\n            data[\"data\"] = str(result)\n            res.set_data(data)\n        elif isinstance(result, tuple):\n            result = list(result)\n            data[\"code\"] = result[0]\n            result[0] = 200\n            result[1][\"Content-Type\"] = \"application/json\"\n            if len(result) > 3:\n                data[\"msg\"] = result[3]\n            data[\"data\"] = result[2]\n            result[2] = json.dumps(data).encode()\n            res.set_data(tuple(result))\n        # \u8bf7\u6c42\u5373\u5c06\u7ed3\u675f\u65f6\u89e6\u53d1\u4e8b\u4ef6\n        self._emit(\"routers.User.Auth.log_record\", req.path, data[\"code\"], data[\"msg\"])\n        return RequestsState.NEXT\n```\n\u6b64\u65f6\u5f53\u8bf7\u6c42\u5904\u7406\u5b8c\u6210\u65f6\u53ef\u5728\u63a7\u5236\u53f0\u4e2d\u5373\u53ef\u89c2\u5bdf\u5230\u6253\u5370\u3002\n\n## \u6a21\u5757\u521d\u59cb\u5316\n\n\u6709\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728\u6a21\u5757\u88ab\u8f7d\u5165\u524d\u63d0\u524d\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u6bd4\u5982\u67e5\u8be2\u63d0\u524d\u5c06\u4e00\u4e9b\u975e\u5e38\u9ad8\u9891\u7387\u8bbf\u95ee\u7684\u9759\u6001\u6570\u636e\u63d0\u524d\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5f85\u5230\u7528\u6237\u8bbf\u95ee\u65f6\u5c06\u8fd9\u4e9b\u6570\u636e\u8fd4\u56de\uff0c\u5047\u8bbe\u4ee5\u6211\u4eec\u76ee\u524d\u7684\u9879\u76ee\u4e3a\u4f8b\uff0c\u5728\u6bcf\u6b21\u767b\u5f55\u524d\u5c06\u6240\u6709\u7528\u6237\u7684Cookie\u4fe1\u606f\u8f7d\u5165\u5230\u5185\u5b58\u4e2d\uff0c\u8fd9\u6837\u5728\u8bbf\u95ee\u9700\u8981Cookie\u9274\u6743\u7684\u4e00\u4e9b\u63a5\u53e3\u5c31\u4e0d\u518d\u9700\u8981\u6bcf\u6b21\u90fd\u67e5\u8be2\u4e00\u904d\u6570\u636e\u5e93\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u8f7b\u5bf9\u6570\u636e\u5e93\u7684\u8d1f\u62c5\u5e76\u63d0\u9ad8\u54cd\u5e94\u901f\u5ea6\u3002\u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u7684\u662f\u9879\u76ee\u6a21\u5757\u7684\u5c40\u90e8\u914d\u7f6e\uff0cScarf\u5728\u521d\u59cb\u5316\u65f6\u4f1a\u68c0\u67e5\u76ee\u5f55\u4e0b\u662f\u5426\u6709config\u6587\u4ef6\u5939\uff0c\u8be5\u6587\u4ef6\u5939\u4e2d\u5b58\u653e\u7684\u662f\u6240\u6709\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\uff0c\u6bcf\u4e00\u4e2a\u6a21\u5757\u5bf9\u5e94\u4e00\u4e2a\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6(__module__ + \".\" + __name__ \u548c \u4e8b\u4ef6\u540d\u4e00\u6837),\u56e0\u6b64\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6routers.User.Auth.yml\u3002\u914d\u7f6e\u53ef\u4ee5\u4f7f\u7528yml\u6587\u4ef6\u6216json\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\uff0c\u5176\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b(\u4ee5yml\u6587\u4ef6\u4e3a\u4f8b)\uff1a\n```yml\ninit_handle: _init # \u6a21\u5757\u7684\u521d\u59cb\u5316\u5165\u53e3\u51fd\u6570\n# config/routers.User.Auth.yml\nlog_format: '%(asctime)s - $filename[line:%(lineno)d | %(funcName)s] - %(levelname)s: %(message)s' # \u65e5\u5fd7\u7ffb\u8bd1\u683c\u5f0f\u5316\u65b9\u5f0f\u6587\u672c(\u53c2\u89c1 logging)\nconfig: # \u6a21\u5757\u6240\u4f7f\u7528\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\n    module_name: Auth\n```\n\u6211\u4eec\u73b0\u5728\u518d\u5b9e\u73b0\u5165\u53e3\u51fd\u6570\u7684\u51fd\u6570\uff0c\u5e76\u5b8c\u6210\u5728\u6a21\u5757\u521d\u59cb\u5316\u65f6\u67e5\u8be2\u5230\u6240\u6709\u7528\u6237Cookie\u7684\u83b7\u53d6\u3002\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector, LogHandle\n\nclass Auth:\n\tdef __init__(self):\n        # \u7528\u6237\u4fe1\u606f\u4fdd\u5b58 token : username\n        self.__tokens = {}\n        # \u6a21\u5757\u65e5\u5fd7\n        self.__logger = None\n        # Scarf\u6838\u5fc3\u65e5\u5fd7\n        self.__log_server = None\n\n    def _init(self, sql: SQLModel.DataBaseConnection, log: LogHandle(\"routers.User.Auth\"),\n              log_server: LogHandle(\"WebServer\"), config: dict):\n        print(config)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            log.info(\"Auth Module Init Complate\")\n```\n\u5f53Scarf\u8bfb\u53d6\u5230\u8be5\u914d\u7f6e\u65f6\uff0c\u901a\u8fc7init_handle\u786e\u5b9a\u4e86\u6a21\u5757\u5165\u53e3\u7684\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5728\u626b\u63cf\u6a21\u5757\u540e\u5c31\u4f1a\u8c03\u7528\u521d\u59cb\u5316\u51fd\u6570\uff0c\u901a\u8fc7\u521d\u59cb\u5316\u51fd\u6570\u7684\u5f62\u53c2\u7c7b\u578b\uff0c\u6ce8\u5165\u76f8\u5bf9\u5e94\u7684\u5b9e\u53c2\uff0c\u5b8c\u6210\u6a21\u5757\u7684\u521d\u59cb\u5316\u3002\u5176\u4e2d\u7684\u53c2\u6570sql\u5c06\u4e0d\u518d\u89e3\u91ca\u89c1\u4e0a\u6587\u3002LogHandle(\"module_name\")\u8fd9\u4e2d\u7c7b\u578b\u6807\u6ce8\u5c06\u901a\u8fc7modulename\u83b7\u53d6\u5230\u6307\u5b9a\u7684\u65e5\u5fd7\u5bf9\u8c61\uff0c\u83b7\u53d6\u7684\u65b9\u5f0f\u548c\u4e8b\u4ef6\u89e6\u53d1\u7684\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u800c\u9664\u6b64\u4e4b\u5916\u8fd8\u6709\"WebServer\"\u8fd9\u79cd\u65b9\u5f0f\u662f\u7528\u4ee5\u83b7\u53d6webserver\u6838\u5fc3\u65e5\u5fd7\u6240\u4f7f\u7528\u3002config:dict\u5219\u662f\u83b7\u53d6\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684config\u53c2\u6570\uff0c\u662f\u5bf9\u5e94\u6a21\u5757\u7684\u81ea\u5b9a\u4e49\u53c2\u6570\u3002**\u65e5\u5fd7\u5bf9\u8c61**\u76ee\u524d\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a\n```python\nimport logging\n# \u8c03\u8bd5 - application\u4e3arelease\u65f6\u5ffd\u7565\nlogger.debug - logging.debug\n# \u666e\u901a\nlogger.info - logging.info\n# \u8b66\u544a\nlogger.warn - logging.warn\n# \u4e25\u91cd\u8b66\u544a\nlogger.critical - logging.critical\n# \u51fa\u9519\nlogger.error - logging.error\n\ndef log_callback(record: logging.LogRecord):\n\tpass\n\n# \u6ce8\u518c\u65e5\u5fd7\u56de\u8c03\nlogger.add_handle(log_callback)\n```\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u4e9b\u5168\u5c40\u6a21\u5757\u505a\u51fa\u914d\u7f6e,\u4f8b\u5982\u5047\u8bbe\u5f88\u591a\u63a5\u53e3\u9700\u8981\u4f9d\u8d56\u5230Core\u6a21\u5757\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5bf9\u5176\u5728Scarf\u5165\u53e3\u4e2d\u8fdb\u884c\u5168\u5c40\u6ce8\u518c:\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\nfrom routers.RequestProcessor import RequestProcessor\n\n\nfrom models.SQLConnectionManager import SQLFactory\n\nclass Core:\n    def __init__(self):\n        pass\n\nif __name__ == \"__main__\":\n    server = Scarf()\n\n    auth = Auth()\n\n    server.load_config_from_file(\"./application.yml\")\n\n    # Core\u662f\u5168\u5c40\u9700\u8981\u4f9d\u8d56\u7684\u6a21\u5757\n    server.register_global(\"Core\", Core())\n\n    server.register_sql_model(\"main\", SQLFactory)\n    server.register_hook(RequestProcessor())\n\n    server.register_events(auth)\n    server.scan_module(auth)\n\n    server.start_server()\n```\n\u6b64\u65f6\u6211\u4eec\u5728User.Auth\u4e2d\u5c1d\u8bd5\u5bfc\u5165\uff1a\n```python\n# routers/User.py\n\nclass Auth:\n\t    def __init__(self):\n        # \u7528\u6237\u4fe1\u606f\u4fdd\u5b58 token : username\n        self.__tokens = {}\n        # \u6a21\u5757\u65e5\u5fd7\n        self.__logger = None\n        # Scarf\u6838\u5fc3\u65e5\u5fd7\n        self.__log_server = None\n\n    def _init(self, sql: SQLModel.DataBaseConnection, log: LogHandle(\"routers.User.Auth\"),\n              log_server: LogHandle(\"WebServer\"), core: str(\"Core\"), config: dict):\n \t\t# \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528: core: Core\n        print(config)\n        print(core)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            log.info(\"Auth Module Init Complate\")\n```\n\n## \u5b9a\u65f6\u4efb\u52a1\u548c\u5f02\u6b65\u4efb\u52a1\n\u5927\u90e8\u5206\u60c5\u51b5\u4e0bCookie\u4e0d\u53ef\u80fd\u6c38\u4e45\u4fdd\u5b58\uff0c\u5f53\u8fbe\u5230\u67d0\u4e2a\u5468\u671f\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5220\u9664\u4e00\u4e9b\u8fc7\u671f\u7684Cookie\uff0c\u4f7f\u7528\u6237\u6062\u590d\u672a\u767b\u5f55\u72b6\u6001\u91cd\u65b0\u767b\u5f55\u6216\u9274\u6743\uff1b\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u4e1c\u897f\u53bb\u5728\u4e00\u4e2a\u5468\u671f\u5185\u7ba1\u7406\u8fd9\u4e9b\u4efb\u52a1\uff0c\u5f53\u7136\u6211\u4eec\u8fd8\u9700\u8981\u6539\u9020\u4e00\u4e0b,\u6dfb\u52a0\u4e00\u4e2a\u5b58\u653eCookie\u65f6\u95f4\u7684\u53d8\u91cf\u7528\u4ee5\u8bb0\u5f55\u7528\u6237Cookie\u7684\u5931\u6548\u65f6\u95f4\u3002\u5b9a\u65f6\u4efb\u52a1\u7684\u6dfb\u52a0\u65b9\u6cd5\u5982\u4e0b\uff1a\n```python\n#routers/User.py\n\n#\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u4fee\u9970\u5668\uff0cRequestReslove.timer(interval, times=-1, user_arg=None)\n# \u5176\u4e2dinterval\u662f\u6267\u884c\u5468\u671f\uff08\u5355\u4f4dms\uff09\uff0ctimes\u4e3a\u6267\u884c\u6b21\u6570,\u9ed8\u8ba4\u503c\u4e3a-1(\u6c38\u4e45\u6267\u884c)\uff0cuser_arg:\u81ea\u5b9a\u4e49\u53c2\u6570(\u9ed8\u8ba4:None)\n# \u88ab\u4fee\u9970\u7684\u51fd\u6570\u4e2demit_time\u662f\u5b9a\u65f6\u5668\u88ab\u89e6\u53d1\u7684\u5f53\u524d\u65f6\u95f4\uff0c\u4ee5\u53ca\u81ea\u5b9a\u4e49\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2aBool\uff0cTrue\u5219\u662f\u7ee7\u7eed\u4e0b\u6b21\u5b9a\u65f6\u5668\u4efb\u52a1\uff0c\u5426\u5219\u7ec8\u6b62\u3002\n# \u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e0bCookie\u7684\u8fc7\u671f\u65f6\u95f4\u4e3a30\u5206\u949f\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector, LogHandle, async_taker\nfrom Scarf.Protocol.HTTP import HTTPResponse, HTTPRequest, FileDeliver\n\nimport time\n\nclass Auth:\n\tdef __init__(self):\n    \t# \u7528\u6237\u4fe1\u606f\u4fdd\u5b58 token : username\n        self.__tokens = {}\n        # \u7528\u6237Cookie\u6709\u6548\u65f6\u95f4\u4fdd\u5b58\n        self.__vaild_cookie = {}\n        # \u6a21\u5757\u65e5\u5fd7\n        self.__logger = None\n        # Scarf\u6838\u5fc3\u65e5\u5fd7\n        self.__log_server = None\n\n   def _init(self, sql: SQLModel.DataBaseConnection, log: LogHandle(\"routers.User.Auth\"),\n        log_server: LogHandle(\"WebServer\"), config: dict):\n        print(config)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n                # \u6dfb\u52a0Cookie\u5931\u6548\u65f6\u95f4\uff0c\u5e76\u8bbe\u7f6e\u5931\u6548\u65f6\u95f4\u4e3a30\u5206\u949f\n                self.__vaild_cookie[item.token] = time.time() * 1000 + 30 * 60 * 1000\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            log.info(\"Auth Module Init Complate\")\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        (\n                (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n                ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection(\"main\"), res: HTTPResponse):\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # \u83b7\u53d6Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            res.cookies = ('token', md5_.hexdigest())\n            res.cookies = ('HttpOnly',)\n            res.cookies = ('Path', '/')\n            user.token = md5_.hexdigest()\n            user.update({USER.token: user.token}).where(USER.userId == result.userId).execute()\n            self.__tokens[user.token] = username\n            # \u767b\u5f55\u63a5\u53e3\u540c\u7406\n            self.__vaild_cookie[user.token] = time.time() * 1000 + 30 * 60 * 1000\n            return None\n        else:\n            return (500, {}, \"Username or password error\", \"Login Error\")\n\n    @RequestReslove.timer(1000, times=-1, user_arg=None)\n    def check_cookie(self, emit_time, user_arg):\n    \tfor item in self.__vaild_cookie.copy().items():\n            k, v = item\n            # \u8d85\u65f6\u7528\u6237\u6ce8\u9500\u767b\u5f55\n            if v <= emit_time:\n            \tself.__logger.info(\"%s need relogin\" % (self.__tokens[k],))\n                del self.__tokens[k]\n                del self.__vaild_cookie[k]\n        return True\n```\n\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u5c06\u672c\u5730\u7684Cookie\u5728\u89c4\u5b9a\u5468\u671f\u5185\u8fdb\u884c\u4e86\u89c4\u6574\uff0c\u82e5\u6211\u4eec\u5728\u5b8c\u6210\u672c\u5730\u66f4\u65b0\u7684\u540c\u65f6\u53ef\u80fd\u8fd8\u9700\u8981\u901a\u8fc7HTTP\u53bb\u901a\u77e5\u5176\u4ed6\u670d\u52a1\u5668Cookie\u7684\u66f4\u65b0\uff0c\u4f46\u662fHTTP\u7684\u8bf7\u6c42\u7b97\u5f97\u4e0a\u662f\u6bd4\u8f83\u8017\u65f6\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u8fd9\u4e9b\u8bf7\u6c42\u5728\u540e\u53f0\u6267\u884c\uff0c\u4e0d\u9700\u8981\u7b49\u5f85\u5176\u5b8c\u6210\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Scarf\u7684\u5f02\u6b65\u4efb\u52a1\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f15\u5165\u5f02\u6b65\u4efb\u52a1\u63a7\u5236\u5668\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a\n```python\n\n# \u5176\u4e2dasync_taker\u4e3a\u5f02\u6b65\u4efb\u52a1\u8c03\u5ea6\u8fc7\u7a0b\n# @parma:fn_callback \u9700\u8981\u5f02\u6b65\u8c03\u7528\u7684\u51fd\u6570\n# @param:*args \u8c03\u7528\u65f6\u6240\u9700\u8981\u7684\u81ea\u5b9a\u4e49\u53c2\u6570\n# async_taker(fn_callback, *args)\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector, LogHandle, async_taker\nfrom Scarf.Protocol.HTTP import HTTPResponse, HTTPRequest, FileDeliver\n\n# \u7b2c\u4e09\u65b9\u5e93requests\nimport time, requests\n\nclass Auth:\n\tdef __init__(self):\n    \t# \u7528\u6237\u4fe1\u606f\u4fdd\u5b58 token : username\n        self.__tokens = {}\n        # \u7528\u6237Cookie\u6709\u6548\u65f6\u95f4\u4fdd\u5b58\n        self.__vaild_cookie = {}\n        # \u6a21\u5757\u65e5\u5fd7\n        self.__logger = None\n        # Scarf\u6838\u5fc3\u65e5\u5fd7\n        self.__log_server = None\n        # Scarf\u5f02\u6b65\u4efb\u52a1\u8c03\u5ea6\u8fc7\u7a0b\n        self.__async_taker = None\n\n   def _init(self, sql: SQLModel.DataBaseConnection,async_controller: async_taker, log: LogHandle(\"routers.User.Auth\"),\n        log_server: LogHandle(\"WebServer\"), config: dict):\n        print(config)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n                # \u6dfb\u52a0Cookie\u5931\u6548\u65f6\u95f4\uff0c\u5e76\u8bbe\u7f6e\u5931\u6548\u65f6\u95f4\u4e3a30\u5206\u949f\n                self.__vaild_cookie[item.token] = time.time() * 1000 + 30 * 60 * 1000\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            # \u83b7\u53d6\u5f02\u6b65\u4efb\u52a1\u8c03\u5ea6\u8fc7\u7a0b\n            self.__async_taker = async_taker\n            log.info(\"Auth Module Init Complate\")\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        (\n                (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n                ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection(\"main\"), res: HTTPResponse):\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # \u83b7\u53d6Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            res.cookies = ('token', md5_.hexdigest())\n            res.cookies = ('HttpOnly',)\n            res.cookies = ('Path', '/')\n            user.token = md5_.hexdigest()\n            user.update({USER.token: user.token}).where(USER.userId == result.userId).execute()\n            self.__tokens[user.token] = username\n            # \u767b\u5f55\u63a5\u53e3\u540c\u7406\n            self.__vaild_cookie[user.token] = time.time() * 1000 + 30 * 60 * 1000\n            return None\n        else:\n            return (500, {}, \"Username or password error\", \"Login Error\")\n\n    def notify_other_server(self, token):\n    \trequests.post(url,token)... # \u8017\u65f6\u64cd\u4f5c\n\n    @RequestReslove.timer(1000, times=-1, user_arg=None)\n    def check_cookie(self, emit_time, user_arg):\n    \tfor item in self.__vaild_cookie.copy().items():\n            k, v = item\n            # \u8d85\u65f6\u7528\u6237\u6ce8\u9500\u767b\u5f55\n            if v <= emit_time:\n            \tself.__logger.info(\"%s need relogin\" % (self.__tokens[k],))\n                # \u82e5\u6709\u7528\u6237Cookie\u8fc7\u671f\u8c03\u7528notify_other_server\n                if self.__async_taker:\n                    self.__async_taker(self.notify_other_server, self.__tokens[k])\n                del self.__tokens[k]\n                del self.__vaild_cookie[k]\n        return True\n```\n## \u914d\u7f6e\u6587\u4ef6\n```yml\nserver:\n release: false # \u670d\u52a1\u662f\u5426\u662f\u751f\u4ea7\u73af\u5883\n workers: # \u7ebf\u7a0b\u6c60\u914d\u7f6e\uff0c\u82e5\u4e0d\u914d\u7f6e\u9ed8\u8ba4\u4f1a\u901a\u8fc7CPU\u6838\u5fc3\u6570\u91cf\u81ea\u9002\u914d\n \tmin: 3 # \u7ebf\u7a0b\u6c60\u6700\u5c0f\u7ebf\u7a0b\u6570\n    max: 6 # \u7ebf\u7a0b\u6c60\u6700\u5927\u7ebf\u7a0b\u6570\n    max_work_task: 10 # \u7ebf\u7a0b\u6c60\u7ebf\u7a0b\u4efb\u52a1\u961f\u5217\u6700\u5927\u957f\u5ea6\n    single: False # \u5173\u95ed\u7ebf\u7a0b\u6c60\u542f\u7528\u5355\u7ebf\u7a0b\n ports: # \u7aef\u53e3\n   http: 80 # HTTP \u7aef\u53e3\n   https: 443 # HTTPS \u7aef\u53e3\n ssl_options: # \u82e5\u914d\u7f6e\u4e86https\uff0c\u5219\u9700\u8981\u914d\u7f6essl\u8bc1\u4e66\u7b49\u4fe1\u606f\n   crt: ./ssl/server.crt # \u6839\u8bc1\u4e66\u8def\u5f84\n   key: ./ssl/server.key # \u6839\u8bc1\u4e66\u79c1\u94a5\u4f4d\u7f6e\n   pwd: '123456' # \u8bc1\u4e66\u5bc6\u7801\n   ssl_handshake_timeout: 15 # ssl\u63e1\u624b\u9650\u65f6\n keep_alive: # HTTP\u4fdd\u6301\u957f\u8fde\u63a5\u914d\u7f6e(\u4ee5\u4e0b\u82e5\u65e0\u914d\u7f6e\u5219\u4f7f\u7528\u4e0b\u5217\u503c\u4f5c\u4e3a\u9ed8\u8ba4\u503c)\n \thttp_handshake_timeout: 15 # HTTP\u8bf7\u6c42\u63e1\u624b\u9650\u5236\u65f6\u95f4\n    http_data_readtimeout: 3 # HTTP\u8bf7\u6c42\u4f53\u6570\u636e\u8bfb\u53d6\u5355\u4f4d\u8bfb\u53d6\u9650\u5236\u65f6\u95f4\n    alive_timeout: 3 # HTTP\u5141\u8bb8\u5b58\u6d3b\u65f6\u95f4\n static: # \u9759\u6001\u6587\u4ef6\u670d\u52a1\u914d\u7f6e\n   visitpath: ./static # \u9759\u6001\u6587\u4ef6\u670d\u52a1\u6587\u4ef6\u5939\u4f4d\u7f6e\n   entryfile: index.html # \u5165\u53e3\u6587\u4ef6\u6216\u9ed8\u8ba4\u8bbf\u95ee\u641c\u5bfb\u6587\u4ef6\u540d\n   map: # \u6587\u4ef6\u6620\u5c04\n     - {router: /main/*, path: /home/} # router\u4e3a\u8bbf\u95ee\u8def\u5f84\uff0cpath\u4e3a\u672c\u5730\u7269\u7406\u8def\u5f84\n     - {router: /test/*, path: /test/index.html}\n webcached: # \u9759\u6001\u8d44\u6e90\u7f13\u5b58\u7b56\u7565\n \trange_size: 3145728 # \u82e5\u5ba2\u6237\u7aef\u8981\u6c42\u4ee5bytes\u8bbf\u95ee\uff0c\u90a3\u4e48\u8be5\u53c2\u6570\u8868\u793a\u6bcf\u6b21\u83b7\u53d6\u7684\u5b57\u8282\u6570\uff08\u9ed8\u8ba4:3MB\uff09\n    expires: 0 # Cache-Control:max-age\n    exter_name: # \u652f\u6301\u7f13\u5b58\u7684\u6587\u4ef6\u6269\u5c55\u540d\n    \t- .html\n    \t- .css\n    \t- .js\n    \t- .jpeg\n    \t- .png\n gzip: # \u652f\u6301gzip\u538b\u7f29\u7684\u6587\u4ef6\u6269\u5c55\u540d\n \t- .html\n    - .css\n    - .js\n cros: # \u914d\u7f6e\u8de8\u57df\u6309\u7167\u987a\u5e8f[Access-Control-Allow-Origin, Access-Control-Allow-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials]\n \t - * # Access-Control-Allow-Origin\n \t - Content-Type, Token # Access-Control-Allow-Headers\n \t - 3600 # Access-Control-Max-Age\n \t - true # Access-Control-Allow-Credentials\n http2: # http2\u914d\u7f6e\u9879\n   enable: true # \u662f\u5426\u542f\u7528http2\n   settings: # http2\u914d\u7f6e \u4e0d\u586b\u5199\u5219\u4f7f\u7528\u4ee5\u4e0b\u9ed8\u8ba4\u503c\n     init_window_size: 65536\n     header_size: 4096\n     allow_push: 0\n     max_stream: 100\n     max_frame_size: 16384\n     header_list_size: None\ndatasource:\n  - { name: main,host: 127.0.0.1, port: 3306, user: root, password: fuqian199611,max_connections: 10, database: networkbridge, autoconnect: false, autocommit: 1 }\n```\n\n# \u6269\u5c55\u7bc7\n## WebSockets\n\nwebsocket\u548c\u8def\u7531\u4e00\u6837\uff0c\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684\u4fee\u9970\u5668**@RequestReslove.websocket**\u3002\u5fc5\u987b\u8981\u5b9e\u73b0\u4e09\u4e2a\u4e8b\u4ef6\u56de\u8c03\u51fd\u6570\u3002\n```python\n\nfrom Scarf.Tip import WebSocketHOOK\n\n\"\"\"\n  :param path: \u8bbf\u95ee\n  :param hook: \u4e8b\u4ef6\u56de\u8c03\u7c7b\u578b\n  * \u6240\u6709\u7684\u6570\u636e\u5e93\u8fde\u63a5\u53c2\u6570\u90fd\u9700\u8981\u653e\u5728\u6700\u540e\u4e00\u4e2a\u5f62\u53c2\n\"\"\"\n#\u9700\u8981\u5f3a\u5236\u5b9e\u73b0\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.HANDSHAKE)\ndef on_handshake(req: HTTPRequest, ws: WebSocket, sql: SQLModel.DataBaseConnection(\"main\")):\n\t\"\"\"\n     \u5f53\u6709\u8bf7\u6c42\u6b63\u5728\u5c1d\u8bd5\u5347\u7ea7\u534f\u8bae\u65f6\u89e6\u53d1\u8be5\u4e8b\u4ef6\n     :param req: \u5347\u7ea7\u5230WebSocket\u7684HTTP\u8bf7\u6c42\n     :param ws: WebSocket\u5ba2\u6237\u7aef\n     :param sql: SQL Connection \u82e5\u5bf9\u6570\u636e\u5e93\u6709\u4f9d\u8d56\u53ef\u4f7f\u7528\u6b64\u53c2\u6570\uff08\u975e\u56fa\u5b9a\u53c2\u6570\uff0c\u6b64\u53c2\u6570\u53ef\u5220\u9664\uff09\n     :return Bool: True\u5219\u662f\u5141\u8bb8\u5347\u7ea7\u5426\u5219\u62d2\u7edd\u670d\u52a1\n    \"\"\"\n\tws.send(\"Hello World\")\n    ws.user_arg = random.randint(0,1000)\n    ws.ping()\n    return True\n\n#\u9700\u8981\u5f3a\u5236\u5b9e\u73b0\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.MESSAGE)\ndef on_message(ws: WebSocket, data: bytes|str, fin:int, sql: SQLModel.DataBaseConnection(\"main\")):\n\t\"\"\"\n     \u5f53\u6709\u63a5\u6536\u6d88\u606f\u65f6\u89e6\u53d1\u8be5\u4e8b\u4ef6\n     :param ws: WebSocket\u5ba2\u6237\u7aef\n     :param data: \u82e5\u534f\u5546WebSocket\u4e3a\u4e8c\u8fdb\u5236\u5219\u662fbytes\u5426\u5219\u4e3astr\n     :param fin: \u6307\u793a\u8be5\u6570\u636e\u662f\u5426\u5df2\u5168\u90e8\u53d1\u9001\u5b8c\u6210\uff0c1\uff1a\u5168\u90e8\u5b8c\u6210 0\uff1a\u672a\u5b8c\u6210\n     :param sql: SQL Connection \u82e5\u5bf9\u6570\u636e\u5e93\u6709\u4f9d\u8d56\u53ef\u4f7f\u7528\u6b64\u53c2\u6570\uff08\u975e\u56fa\u5b9a\u53c2\u6570\uff0c\u6b64\u53c2\u6570\u53ef\u5220\u9664\uff09\n    \"\"\"\n\tprint(data)\n    ws.send(data)\n\n#\u9700\u8981\u5f3a\u5236\u5b9e\u73b0\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.CLOSE)\ndef on_close(ws:WebSocket, code:int = 0, reason:str = \"\", sql: SQLModel.DataBaseConnection(\"main\")=None):\n\t\"\"\"\n     \u5f53\u6709\u5ba2\u6237\u7aef\u88ab\u5173\u95ed\u65f6\u89e6\u53d1\u8be5\u4e8b\u4ef6\n     :param ws: WebSocket\u5ba2\u6237\u7aef\n     :param code: \u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5\u4ee3\u7801\n     :param reason: \u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5\u7b80\u8ff0\n     :param sql: SQL Connection \u82e5\u5bf9\u6570\u636e\u5e93\u6709\u4f9d\u8d56\u53ef\u4f7f\u7528\u6b64\u53c2\u6570\uff08\u975e\u56fa\u5b9a\u53c2\u6570\uff0c\u6b64\u53c2\u6570\u53ef\u5220\u9664\uff09\n     \u56e0\u4e3acode\u548creason\u6709\u53ef\u80fd\u4e3a\u7a7a\uff0c\u6240\u6709\u52a1\u5fc5\u9700\u8981\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u9ed8\u8ba4\u503c\n    \"\"\"\n\tprint(\"%i %s\" % (code, reason))\n\n\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.PING)\ndef on_ping(ws:WebSocket, code:int = 0, reason:str = \"\", sql: SQLModel.DataBaseConnection(\"main\")=None):\n\t\"\"\"\n     \u5f53\u5ba2\u6237\u7aef\u54cd\u5e94ping\u6307\u4ee4\u65f6\u89e6\u53d1\u8be5\u4e8b\u4ef6\n     :param ws: WebSocket\u5ba2\u6237\u7aef\n     :param code: \u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5\u4ee3\u7801\n     :param reason: \u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5\u7b80\u8ff0\n     :param sql: SQL Connection \u82e5\u5bf9\u6570\u636e\u5e93\u6709\u4f9d\u8d56\u53ef\u4f7f\u7528\u6b64\u53c2\u6570\uff08\u975e\u56fa\u5b9a\u53c2\u6570\uff0c\u6b64\u53c2\u6570\u53ef\u5220\u9664\uff09\n     \u56e0\u4e3acode\u548creason\u6709\u53ef\u80fd\u4e3a\u7a7a\uff0c\u6240\u6709\u52a1\u5fc5\u9700\u8981\u7ed9\u4ed6\u4eec\u4e00\u4e2a\u9ed8\u8ba4\u503c\n    \"\"\"\n\tprint(\"%i %s %i\" % (code, reason, ws.user_arg))\n\n# \u53e6\u5916\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7WebSocket\u5bf9\u8c61\u8fdb\u884c\u4e00\u4e9b\u4e3b\u52a8\u64cd\u4f5c\n\"\"\"\n\u53d1\u9001\u6570\u636e\u7ed9WebSocket\u5ba2\u6237\u7aef\n:param data(bytes|str): \u9700\u8981\u53d1\u9001\u7ed9WebSocket\u5ba2\u6237\u7aef\u7684\u6570\u636e\n\"\"\"\nWebSocket.send(data)\n\n\"\"\"\n\u5173\u95edWebSocket\u5ba2\u6237\u7aef\u8fde\u63a5\n:param code(int): \u5173\u95ed\u4ee3\u7801\n:param reason(str): \u5173\u95ed\u63cf\u8ff0\n\"\"\"\nWebSocket.close(code,reason)\n\n\"\"\"\n\u5411WebSocket\u5ba2\u6237\u7aef\u53d1\u9001ping\u6307\u4ee4\u4ee5\u786e\u5b9a\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u7684\u8fde\u63a5\u662f\u5426\u5b58\u6d3b\n\u4e0eWebSocketHOOK.PING\u4e8b\u4ef6\u76f8\u5bf9\u5e94\n\"\"\"\nWebSocket.ping()\n\n\"\"\"\n\u7528\u4e8e\u4e3a\u5404\u4e2a\u5ba2\u6237\u7aef\u5b58\u653e\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3aNone\n\"\"\"\nWebSocket.user_arg = None\n```\n\n## HTTP/2\n\n\u76ee\u524dHTTP/2\u53ea\u9002\u914d\u7528\u4e8eHTTPS\u4e4b\u4e0b\uff0cHTTP\u7684\u60c5\u51b5\u4e0b\u5e76\u4e0d\u652f\u6301HTTP/2\u8fde\u63a5\uff1b\u5f53HTTP2\u88ab\u8bbf\u95ee\u65f6\uff0cHTTPRequest.http_version\u7248\u672c\u53f7\u5c06\u88ab\u8bbe\u7f6e2.0\uff0c\u76ee\u524d\u4e5f\u5e76\u4e0d\u652f\u6301 **PUSH_PROMISE**\u3002\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/KeepRepeatLoop/Scarf",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ScarfKit",
            "package_url": "https://pypi.org/project/ScarfKit/",
            "platform": "",
            "project_url": "https://pypi.org/project/ScarfKit/",
            "project_urls": {
                "Bug Tracker": "https://github.com/KeepRepeatLoop/Scarf/issues",
                "Homepage": "https://github.com/KeepRepeatLoop/Scarf"
            },
            "release_url": "https://pypi.org/project/ScarfKit/1.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "A Simple Way To Create Web Server",
            "version": "1.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12618440,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "98e3b94b351a724bfc14f1800de437c4",
                    "sha256": "6051c33281a18df2199ff196f18c8c473a5d72cc369e8fdb2ba0be0220bdf39f"
                },
                "downloads": -1,
                "filename": "ScarfKit-1.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "98e3b94b351a724bfc14f1800de437c4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 56285,
                "upload_time": "2022-01-19T12:03:46",
                "upload_time_iso_8601": "2022-01-19T12:03:46.059699Z",
                "url": "https://files.pythonhosted.org/packages/3e/e6/a6fd775fd92ff4c9c6b09af3917fdbdf3f9cdedf3873ebdae1621c3641ec/ScarfKit-1.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7c45a5d897538c5a669f681c28d63d1c",
                    "sha256": "8bde86ea6c8264f1a96cfe4933922b76c8261680b20c238e4cab75319a8322e3"
                },
                "downloads": -1,
                "filename": "ScarfKit-1.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "7c45a5d897538c5a669f681c28d63d1c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 69984,
                "upload_time": "2022-01-19T12:03:49",
                "upload_time_iso_8601": "2022-01-19T12:03:49.391338Z",
                "url": "https://files.pythonhosted.org/packages/5e/47/69dac0d9583c76739358d42db5b6fc66e84d222144d3a56e012c326a82ff/ScarfKit-1.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}