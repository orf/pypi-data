{
    "1.1.0": {
        "info": {
            "author": "Carl Bai",
            "author_email": "carlbai66@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7"
            ],
            "description": "# \u6d45\u5c42\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u7528\u6237\u6307\u5357\t\n\n\u200b\t\u9488\u5bf9\u4e2d\u6587\u6587\u672c\u7684\u9884\u5904\u7406\u65b9\u6cd5\uff0c\u5305\u62ec\u6587\u672c\u6e05\u6d17\u3001\u5206\u8bcd\u3001\u5206\u53e5\u3001\u540c\u4e49\u8bcd\u5339\u914d\u7b49\u529f\u80fd\n\n### \u73af\u5883\n\nnumpy<br>\njieba<br>\ntextrank4zh<br>\npandas<br>\ntqdm<br>\n\n\n\n### \u5b89\u88c5\u65b9\u6cd5\n\n```\ngit clone git@git.huimeimt.com:carl.bai/shallow_machine_learning_platform.git\ncd shallow_machine_learning_platform/\npython3 setup.py install\n```\n\n\n\n### \u529f\u80fd\u53ca\u4f7f\u7528\u8bf4\u660e\n\n#### \u6587\u672c\u9884\u5904\u7406\n\n- \u5168\u89d2\u8f6c\u534a\u89d2\n\n  - ```python\n    def strQ2B(self, ustring)\n    ```\n\n  - \u7531\u4e8e\u6240\u83b7\u53d6\u7684\u4e2d\u6587\u6587\u672c\u6709\u90e8\u5206\u662f\u5168\u89d2\uff0c\u5bf9\u4e8e\u6570\u636e\u6e05\u7406\u4e0d\u592a\u65b9\u4fbf\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06\u6587\u672c\u5168\u90e8\u8f6c\u6362\u4e3a\u534a\u89d2\n\n  - \u8be5\u65b9\u6cd5\u5199\u5728PreProcessing \u7c7b\u91cc\u9762\uff0c\u88abclean_up \u6587\u672c\u6e05\u7406\u65b9\u6cd5\u6240\u8c03\u7528\n\n\n\n- \u5206\u53e5\n\n  - ```python\n    def cut_sent(self, para)\n    ```\n\n  - \u4e3a\u6bcf\u4e2a\u6587\u672c\u6839\u636e\u65ad\u53e5\u7b26\u3001\u4e2d\u82f1\u6587\u7701\u7565\u53f7\u3001\u6362\u884c\u7b26\u7b49\u505a\u5206\u53e5\u5904\u7406\n\n\n\n- \u6587\u672c\u6e05\u7406\n\n  - ```python\n    def cleanup(self, filepath: str)\n    def cleanup_txt(self, text: str)\n    ```\n\n  - \u5305\u62ec\u5168\u89d2\u8f6c\u534a\u89d2\uff0c\u6e05\u6d17()\u5916\u7684\u5185\u5bb9\uff0c\u5206\u53e5\uff0c\u53bb\u9664\u7a7a\u683c\u7b49\n\n  - \u5c06\u62ec\u53f7\u5916\u7684\u6240\u6709\u5b57\u8bcd\u90fd\u53bb\u9664\u7a7a\u683c\u548c\u5f02\u5e38\u7b26\u53f7\uff0c\u4ee5\u65b9\u4fbf\u5904\u7406\u5206\u8bcd\n\n  - \u5904\u7406\u5b8c\u6210\u540e\u6839\u636e\u5206\u53e5\u65b9\u6cd5\u8fdb\u884c\u5206\u8bcd\n\n\n\n- \u5206\u8bcd\n\n  - ```python\n    def seg(self, contents: list, dictpath='default')\n    ```\n\n  - \u4e3a\u6bcf\u4e2a\u5206\u53e5\u505a\u5206\u8bcd\u5904\u7406\n\n  - \u6587\u672c\u91c7\u7528\u7684\u662fjieba\u5206\u8bcd\u5de5\u5177\uff0c\u9ed8\u8ba4\u4e3a\u81ea\u5e26\u7684\u8bcd\u5178\uff0c\u5982\u679c\u9700\u8981\u65b0\u7684\u8bcd\u5178\u9700\u8981\u8f93\u5165\u8def\u5f84\uff0c\u6839\u636e\u6bcf\u4e2a\u5206\u53e5\u6765\u8fdb\u884c\u5206\u8bcd\n\n\n\n- \u6587\u672c\u9884\u5904\u7406\u4f7f\u7528\u65b9\u6cd5\n\n  ```python\n  from smlp.PreProcessing import PreProcessing\n\n  pp = PreProcessing()\t# \u58f0\u660ePreProcessing\u7c7b\u5b9e\u4f8b\n  #content = pp.cleanup('test.txt')\t\u53ef\u4ee5\u76f4\u63a5\u6e05\u7406\u6587\u672c\u6587\u4ef6\n  content = pp.cleanup_txt(text: str)  # \u76f4\u63a5\u6e05\u7406string\u6587\u672c\uff0c \u8fd4\u56de\u5206\u53e5\u5217\u8868\n  segs = pp.seg(content, dictpath=sm)\t# \u5bf9\u5df2\u6e05\u7406\u7684\u5206\u53e5\u8fdb\u884c\u5206\u8bcd\uff0c\u8fd4\u56de\u5df2\u5206\u597d\u8bcd\u7684\u5206\u53e5\u7684\u4e8c\u7ef4\u6570\u7ec4\n  # \u6ce8\u610f\uff1a\u6b64\u5904\u6dfb\u52a0\u4e86\u81ea\u5b9a\u4e49\u8bcd\u5178\u8def\u5f84\n\n  ```\n\n\n\n#### \u5355\u4f4d\u7edf\u4e00\n\n- \u5c06\u6240\u6709\u5355\u4f4d\u8f6c\u6362\u4e3a\u514b\u5e76\u5c06\u767e\u5206\u6570\u8f6c\u6362\u4e3a\u5c0f\u6570\n\n  - ```python\n    def unit_cov_g(self, segments: list) # \u9700\u8981\u4e0a\u9762\u5206\u597d\u8bcd\u7684\u5206\u53e5\u6570\u7ec4\u8fdb\u884c\u8f6c\u6362\n    ```\n\n  - \u4f7f\u7528\u65b9\u6cd5\n\n    ```python\n    from smlp.unicov import unicov\n\n    uc = unicov()\t# \u58f0\u660eunicov\u7c7b\u5b9e\u4f8b\n    for s in segs:\t#\u5bf9\u6bcf\u4e2a\u5206\u53e5\u91cc\u7684\u5206\u8bcd\u5217\u8868\u8fdb\u884c\u5904\u7406\n        uc.unit_cov_g(s)\t\n\n    ```\n\n- \u5c06\u6240\u6709\u5355\u4f4d\u8f6c\u6362\u4e3akg\u5e76\u5c06\u767e\u5206\u6570\u8f6c\u6362\u4e3a\u5c0f\u6570\n\n  - ```python\n    def unit_cov_kg(self, segments: list) # \u9700\u8981\u4e0a\u9762\u5206\u597d\u8bcd\u7684\u5206\u53e5\u6570\u7ec4\u8fdb\u884c\u8f6c\u6362\n    ```\n\n  - \u4f7f\u7528\u65b9\u6cd5\u540c\u4e0a\n\n- \u5c06\u6240\u6709\u5355\u4f4d\u8f6c\u6362\u4e3amg\u5e76\u5c06\u767e\u5206\u6570\u8f6c\u6362\u4e3a\u5c0f\u6570\n\n  - ```python\n    def unit_cov_mg(self, segments: list) # \u9700\u8981\u4e0a\u9762\u5206\u597d\u8bcd\u7684\u5206\u53e5\u6570\u7ec4\u8fdb\u884c\u8f6c\u6362\n    ```\n\n  - \u4f7f\u7528\u65b9\u6cd5\u540c\u4e0a\n\n\n\n#### \u540c\u4e49\u8bcd\u8bcd\u5178\n\n- \u7c7b\u521d\u59cb\u5316\n\n  ```python\n  class Thesaurus():\n      def __init__(self, contents: list): \t# \u9700\u8981\u4e0a\u9762\u5206\u597d\u8bcd\u7684\u5206\u53e5\u6570\u7ec4\u8fdb\u884c\u8f6c\u6362\n          self.contents = contents\t# \u6587\u672c\u5c5e\u6027\u8d4b\u503c\n          self.synonym = {}\t\t# \u521d\u59cb\u5316\u540c\u4e49\u8bcd\u8bcd\u5178\n          return\n  ```\n\n\n\n- \u627e\u51fa\u540c\u4e49\u8bcd\n\n  - ```python\n    def synonymy(self, min_len=2, max_len=12)\n    ```\n\n  - \u5b9a\u4e49\u540c\u4e49\u8bcd\u7684\u6700\u5c0f\u957f\u5ea6\u548c\u6700\u5927\u957f\u5ea6\uff0c\u4ee5\u6b64\u6765\u907f\u514d\u975e\u6cd5\u8bcd\u8bed\u7684\u5199\u5165\n\n  - \u8fd4\u56de\u7c7b\u5c5e\u6027 synonym, \u53ef\u901a\u8fc7\u7c7b\u5b9e\u4f8b\u6765\u8c03\u7528\n\n\n\n- \u540c\u4e49\u8bcd\u8bcd\u5178\u6e05\u6d17\n\n  - ```python\n    def cleanup(self)\n    ```\n\n  - \u82e5\u8bcd\u5178\u4e2dkey\u5bf9\u5e94\u7684list\u91cc\u6709\u4e0d\u7b26\u5408\u89c4\u8303\u7684value\u8bcd\uff0c\u5c06\u4f1a\u79fb\u9664\u8be5\u5143\u7d20\n\n  - \u82e5\u6e05\u6d17\u540e\u8bcd\u5178\u4e2dkey\u5bf9\u5e94\u4e3a\u7a7a\uff0c\u5219\u5220\u9664\u8be5key\n\n  - \u6e05\u6d17\u7684\u8bcd\u5178\u4e3a\u7c7b\u5c5e\u6027synonym\uff0c\u4e0d\u8fd4\u56de\u6570\u503c\n\n\n\n- \u63a8\u8350\u8bcd\u6392\u5e8f\n\n  - ```python\n        # \u5927\u5199\u7387\n        @staticmethod\n        def upper_rate(word):\n    \t\t\u2026\u2026\n\n        # \u63a8\u8350\u8bcd\u6392\u5e8f\n        def sug_words(self, array):\n            return sorted(set(array), key=lambda x: self.upper_rate(x), reverse=True)\n    ```\n\n  - \u6839\u636e\u5bf9\u5e94key\u7684list\u4e2d\u5927\u5199\u7387\u8d8a\u5927\u7684\u8bcd\u653e\u5728\u524d\u9762\uff0c\u8868\u793a\u7b80\u5199\uff08\u5f53\u7136\u540e\u7eed\u8fd8\u53ef\u4ee5\u6309\u7167\u5176\u4ed6\u7684\u65b9\u6cd5\u6392\u5e8f\uff09\n\n\n\n- \u540c\u4e49\u8bcd\u8bcd\u5178\u4f7f\u7528\u65b9\u6cd5\n\n  ```python\n  from smlp.Thesaurus import Thesaurus\n\n  ts = Thesaurus(segs)\n  ts.synonymy()\n  ts.cleanup()\n  ```\n\n\n\n- \u6548\u679c\u5c55\u793a\uff1a\n\n  ```\n  {\n  ...\n   '\u7f8e\u56fd\u764c\u75c7\u5b66\u4f1a': ['ACCP',\n              'AATS',\n              'ACS',\n              'AL A',\n              'ACCP American Cancer Society',\n              'AATS A m er i c an Lu ng Association',\n              'AL A American College of Chest Physicians',\n              'American Association for Thoracic Surgery'],\n   '\u7f8e\u56fd\u80f8\u5916\u79d1\u5b66\u4f1a': ['AATS', 'American Association for Thoracic Surgery'],\n   '\u805a\u4e59\u4e8c\u9187': ['PEG'],\n   '\u805a\u5408\u9176\u94fe\u53cd\u5e94': ['FISH',\n              'RT-PCR',\n              'FISH real time polymerase chain reaction',\n              'fluorescence in situ hybridization'],\n   '\u805a\u82ef\u80fa': ['PANI'],\n   ...\n   }\n  ```\n\n\n\n- \u5f85\u5904\u7406\u7684\u95ee\u9898\uff1a\n\n  - (\u5df2\u89e3\u51b3)\u7531\u4e8e\u5206\u8bcd\u7684\u539f\u56e0\uff0c\u6709\u4e00\u4e9b\u5355\u8bcd\u4f1a\u628a ',' \u5305\u542b\u8fdb\u53bb\uff0c\u5bfc\u81f4\u65e0\u6cd5\u5c06\u5355\u8bcd\u5206\u5272\u5f00\u6765\uff0c\u4f8b\u5982:\n\n    ```\n     '\u751f\u5b58\u671f': ['overall survival, OS'],\n    ```\n\n    \u672c\u6765\u5e94\u8be5\u662f\u4e24\u4e2a\u540c\u4e49\u8bcd\u5374\u5305\u542b\u5728\u4e86\u4e00\u8d77\n\n  - \u8fd8\u662f\u7531\u4e8e\u5206\u8bcd\u7684\u539f\u56e0\uff0c\u5bfc\u81f4\u4e00\u4e9b\u672c\u6765\u4e0d\u662f\u8be5\u8bcd\u7684\u540c\u4e49\u8bcd\u53d8\u6210\u4e86\u8be5\u8bcd\u7684\u540c\u4e49\u8bcd\uff0c\u540c\u65f6\u9009\u53d6\u7684\u4e13\u4e1a\u8bcd\u6c47\u9519\u8bef\uff0c\u4f8b\u5982\uff1a\n\n    ```\n     '\u6750\u6599': ['MOFS',\n            'Zeolitic Imidazolate Framework - 8, ZIF-8',\n            'Metal - Organic Frameworks'],\n    ```\n\n\n\n  - \u540c\u65f6\u5bf9\u4e8e\u540c\u4e49\u8bcd\u7684\u5206\u6790\u8fd8\u662f\u4e0d\u591f\u5b8c\u5584\uff0c\u76ee\u524d\u53ea\u80fd\u8bc6\u522b\uff08\uff09\u5185\u7684\u540c\u4e49\u8bcd\uff0c\u800c\u4e14\u4e00\u4e9b\uff08\uff09\u5185\u7684\u8bcd\u4e0d\u5c5e\u4e8e\u540c\u4e49\u8bcd\uff0c\u4f8b\u5982\uff1a\n\n    ```\n    '\u7ed3\u679c': ['SEER', 'and End Results', 'Surveillance', 'Epidemiology'],\n    ```\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cbai066",
            "keywords": "shallow_machine_learning_platform nlp machine_learning jieba segment segments encoding serving",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smlp",
            "package_url": "https://pypi.org/project/smlp/",
            "platform": "",
            "project_url": "https://pypi.org/project/smlp/",
            "project_urls": {
                "Homepage": "https://github.com/cbai066"
            },
            "release_url": "https://pypi.org/project/smlp/1.1.0/",
            "requires_dist": [
                "numpy",
                "jieba",
                "textrank4zh",
                "pandas",
                "tqdm",
                "pytest",
                "flask ; extra == 'http'",
                "flask-compress ; extra == 'http'",
                "flask-cors ; extra == 'http'",
                "flask-json ; extra == 'http'"
            ],
            "requires_python": "",
            "summary": "a shallow machine learning toolkit for text PreProcessing",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7671644,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "62059ec3f901476170921ba847de6c67",
                    "sha256": "233f24e76268cef92465aa80e32dd065f9623935f1cc3639e27c8f7925330ffe"
                },
                "downloads": -1,
                "filename": "smlp-1.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "62059ec3f901476170921ba847de6c67",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 1835893,
                "upload_time": "2020-07-10T02:18:12",
                "upload_time_iso_8601": "2020-07-10T02:18:12.318790Z",
                "url": "https://files.pythonhosted.org/packages/a8/cd/7ff8a20bd0139dff90fabbc501cffa23b0b77353c8e44db07d758aa96bf2/smlp-1.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e847a141b20243c5dce2826e87bb4c2b",
                    "sha256": "ff8311cb50a6aa2103ba04d8eaf0a48645952e37ff179642da77955ecccc3538"
                },
                "downloads": -1,
                "filename": "smlp-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e847a141b20243c5dce2826e87bb4c2b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12627,
                "upload_time": "2020-07-10T02:18:15",
                "upload_time_iso_8601": "2020-07-10T02:18:15.072830Z",
                "url": "https://files.pythonhosted.org/packages/37/e6/4029df600af4d238fcdf54bab1944c7850ec44e5f2cd0c91754ad3fd25a0/smlp-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}