{
    "0.0.1.dev1": {
        "info": {
            "author": "Eric Geldmacher",
            "author_email": "egeldmacher@wustl.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ericgeldmacher/hwaddress",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "hwaddress",
            "package_url": "https://pypi.org/project/hwaddress/",
            "platform": "",
            "project_url": "https://pypi.org/project/hwaddress/",
            "project_urls": {
                "Homepage": "https://github.com/ericgeldmacher/hwaddress"
            },
            "release_url": "https://pypi.org/project/hwaddress/0.0.1.dev1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Lightweight EUI-48/64 based hardware (MAC) address library.",
            "version": "0.0.1.dev1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8581990,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f069cfb7d3688c8b72029b5045229e5d",
                    "sha256": "983bcee0c885bb64cfaea188dda4715958a2ed50866102ec2361141f34bbf4ed"
                },
                "downloads": -1,
                "filename": "hwaddress-0.0.1.dev1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f069cfb7d3688c8b72029b5045229e5d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7250,
                "upload_time": "2020-11-04T21:22:49",
                "upload_time_iso_8601": "2020-11-04T21:22:49.468802Z",
                "url": "https://files.pythonhosted.org/packages/c1/f8/b679d8e89c7567575bdf82c4762b2c0aa55ca2f25c8e1b1306a2c5fe7fb9/hwaddress-0.0.1.dev1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b704c66649558ea0f127a38880066e25",
                    "sha256": "5c628a58720e775f42ee9d00399d0cf453e45bd6917f1ba4e37697c7a7f73a75"
                },
                "downloads": -1,
                "filename": "hwaddress-0.0.1.dev1.tar.gz",
                "has_sig": false,
                "md5_digest": "b704c66649558ea0f127a38880066e25",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 7460,
                "upload_time": "2020-11-04T21:22:51",
                "upload_time_iso_8601": "2020-11-04T21:22:51.988952Z",
                "url": "https://files.pythonhosted.org/packages/03/a8/bc66435bad16394b9e87ba50e7f0e444684f9af396db4d0785bf5c34eed6/hwaddress-0.0.1.dev1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.1.dev2": {
        "info": {
            "author": "Eric Geldmacher",
            "author_email": "egeldmacher@wustl.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "=========\nhwaddress\n=========\n\nLightweight python library for EUI-48, EUI-64 based hardware (MAC) addresses. \n\n.. contents::\n    :local:\n\n\nQuick start & Example usage\n---------------------------\n\n* Installing with pip\n\n    .. code:: bash\n\n        $ pip install hwaddress\n\n* Import Generic hwaddress objects\n\n    .. code:: python\n\n        >>> from hwaddress import MAC, MAC_64, GUID\n\n.. code:: python\n\n    >>> MAC.verify('12:34:56:78:90:ab')\n    True\n    >>> MAC.verify('12-34-56-78-90-ab')\n    False\n    >>> mac = MAC('12:34:56:78:90:ab')\n    >>> mac\n    MAC(12:34:56:78:90:ab)\n    >>> str(mac)\n    '12:34:56:78:90:ab'\n    >>> mac.format(delimiter='-')\n    '12-34-56-78-90-ab'\n    >>> mac.int\n    20015998341291\n    >>> mac.hex\n    '0x1234567890ab'\n    >>> mac.binary\n    '0001 0010 0011 0100 0101 0110 0111 1000 1001 0000 1010 1011'\n\n.. code:: python\n\n    >>> MAC_64.verify('12:34:56:78:90:ab')\n    False\n    >>> MAC_64.verify('12:34:56:78:90:ab:cd:ef')\n    True\n    >>> MAC_64('0x1234567890abcdef').format(group=4, upper=True)\n    '1234:5678:90AB:CDEF'\n\n.. code:: python\n\n    >>> GUID.verify('12345678-90ab-cdef-1234-567890abcdef')\n    True\n    >>> GUID.verify('1234-5678-90ab-cdef-1234-5678-90ab-cdef')\n    False\n    >>> guid = GUID('123-45678-90ab-cdef-1234-5678:90ab.cdef')\n    >>> guid\n    GUID(12345678-90ab-cdef-1234-567890abcdef)\n    >>> guid.format(':', 4)\n    '1234:5678:90ab:cdef:1234:5678:90ab:cdef'\n\n\nIncluded Hardware Address Classes\n---------------------------------\n\n+---------+-------------------------------------------------+-----------------+\n| Name    | Format                                          | Properties      |\n+=========+=================================================+=================+\n| MAC     | ff:ff:ff:ff:ff:ff                               |                 |\n+---------+-------------------------------------------------+-----------------+\n| MAC_64  | ff:ff:ff:ff:ff:ff:ff:ff                         |                 |\n+---------+-------------------------------------------------+-----------------+\n| GUID    | ffffffff-ffff-ffff-ffff-ffffffffffff            |                 |\n+---------+-------------------------------------------------+-----------------+\n| EUI_48  | ff-ff-ff-ff-ff-ff                               | oui, oui36, cid |\n+---------+-------------------------------------------------+-----------------+\n| EUI_64  | ff-ff-ff-ff-ff-ff-ff-ff                         | oui, oui36, cid |\n+---------+-------------------------------------------------+-----------------+\n| WWN     | ff:ff:ff:ff:ff:ff:ff:ff                         | naa, oui        |\n+---------+-------------------------------------------------+-----------------+\n| WWNx    | ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff | naa, oui        |\n+---------+-------------------------------------------------+-----------------+\n| IB_LID  | 0xffff                                          |                 |\n+---------+-------------------------------------------------+-----------------+\n| IB_GUID | ffff:ffff:ffff:ffff                             |                 |\n+---------+-------------------------------------------------+-----------------+\n| IB_GID  | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff         | prefix, guid    |\n+---------+-------------------------------------------------+-----------------+\n\n\nCommon Classmethods/Methods/Properties\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**All classes inheriting from MAC will have the following methods, classmethos, and properties.**\n\n+--------------------------+-------------+---------+--------------------------------------------------------------+\n| Name                     | Type        | Returns | Description                                                  |\n+==========================+=============+=========+==============================================================+\n| `verify`_                | classmethod | bool    | Verify that address conforms to formatting defined by class. |\n+--------------------------+-------------+---------+--------------------------------------------------------------+\n| `format`_                | method      | str     | Format address with given formatting options.                |\n+--------------------------+-------------+---------+--------------------------------------------------------------+\n| `int`_                   | property    | int     | Integer representation of address.                           |\n+--------------------------+-------------+---------+--------------------------------------------------------------+\n| `hex`_                   | property    | str     | Hexadecimal representation of address.                       |\n+--------------------------+-------------+---------+--------------------------------------------------------------+\n| `binary`_                | property    | str     | Padded binary representation of each hex digit in address.   |\n+--------------------------+-------------+---------+--------------------------------------------------------------+\n\n.. _verify:\n\n| **verify(address)**\n|   Verify that address conforms to formatting defined by class.\n\n.. code:: python\n\n    >>> hwaddress.MAC.verify('12:34:56:78:90:ab')\n    True\n    >>> hwaddress.MAC.verify('1234.5678.90ab')\n    False\n\n.. _format:\n\n| **format(self, delimiter=None, group=None, upper=None)**\n|   Format address with given formatting options.\n| \n|   If an option is not specified,\n|   the option defined by the class will be used\n| \n|   Args:\n|     delimiter (str): character separating hex digits.\n|     group (int): how many hex digits in each group.\n|     upper (bool): True for uppercase, False for lowercase.\n\n.. code:: python\n\n    >>> mac = hwaddress.MAC('12:34:56:78:90:ab')\n    >>> mac\n    MAC(12:34:56:78:90:ab)\n    >>> str(mac)\n    '12:34:56:78:90:ab'\n    >>> mac.format('-')\n    '12-34-56-78-90-ab'\n    >>> mac.format('.', 4)\n    '1234.5678.90ab'\n    >>> mac.format(group=4, upper=True)\n    '1234:5678:90AB'\n\n.. _int:\n\n**int**\n\n.. code:: python\n\n    >>> mac.int\n    20015998341291\n\n.. _hex:\n\n**hex**\n\n.. code:: python\n\n    >>> mac.hex\n    '0x1234567890ab'\n\n.. _binary:\n\n**binary**\n\n.. code:: python\n\n    >>> mac.binary\n    '0001 0010 0011 0100 0101 0110 0111 1000 1001 0000 1010 1011'\n\n\nEUI Properties\n~~~~~~~~~~~~~~\n\n+-------+---------+--------------------------------------------+\n| Name  | Returns | Description                                |\n+=======+=========+============================================+\n| oui   | OIU     | 24-bit Organizationally Unique Identifier. |\n+-------+---------+--------------------------------------------+\n| cid   | CID     | 24-bit Company ID.                         |\n+-------+---------+--------------------------------------------+\n| oui36 | OUI36   | 36-bit Organizationally Unique Identifier. |\n+-------+---------+--------------------------------------------+\n\n\nWWN Properties\n~~~~~~~~~~~~~~\n\n+------+---------+--------------------------------------------+\n| Name | Returns | Description                                |\n+======+=========+============================================+\n| naa  | str     | Network Address Authority.                 |\n+------+---------+--------------------------------------------+\n| oui  | OUI     | 24-bit Organizationally Unique Identifier. |\n+------+---------+--------------------------------------------+\n\n\nIB_GID Properties\n~~~~~~~~~~~~~~~~~\n\n+--------+---------------+--------------------------+\n| Name   | Returns       | Description              |\n+========+===============+==========================+\n| prefix | IB_GID_prefix | 64-bit IB_GID_prefix.    |\n+--------+---------------+--------------------------+\n| guid   | IB_GUID       | Embedded 64-bit IB_GUID. |\n+--------+---------------+--------------------------+\n\n\nFactory Functions\n-----------------\n\nnew_hwaddress_class\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from hwaddress import new_hwaddress_class\n\nget_address_factory\n~~~~~~~~~~~~~~~~~~~\n\nReturn a hwaddress object from objs tuple\ndepending on the address passed as an argument.\n\n.. code:: python\n\n    >>> from hwaddress import get_address_factory, EUI_48, EUI_64\n    >>>\n    >>> hw_address = get_address_factory()\n    >>>\n    >>> hw_address('12:34:56:78:90:ab')\n    MAC(12:34:56:78:90:ab)\n    >>> hw_address('12:34:56:78:90:ab:cd:ef')\n    MAC_64(12:34:56:78:90:ab:cd:ef)\n    >>>\n    >>> eui_address = get_address_factory(EUI_48, EUI_64)\n\n\nget_verifier\n~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from hwaddress import MAC, EUI_48, get_verifier\n    >>>\n    >>> class MyMAC(MAC):\n    ...     _len_ = 48\n    ...     _del_ = '.'\n    ...     _grp_ = 4\n    ...\n    >>>\n    >>> my_verifier = get_verifier(MAC, EUI_48, MyMAC)\n    >>>\n    >>> my_verifier('12:34:56:78:90:ab')\n    True\n    >>> my_verifier('12-34-56-78-90-ab')\n    True\n    >>> my_verifier('1234.5678.90ab')\n    True\n    >>> my_verifier('12.34.56.78.90.ab')\n    False\n    >>> my_verifier('1234-5678-90ab')\n    False\n\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ericgeldmacher/hwaddress",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "hwaddress",
            "package_url": "https://pypi.org/project/hwaddress/",
            "platform": "",
            "project_url": "https://pypi.org/project/hwaddress/",
            "project_urls": {
                "Homepage": "https://github.com/ericgeldmacher/hwaddress"
            },
            "release_url": "https://pypi.org/project/hwaddress/0.0.1.dev2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Lightweight EUI-48/64 based hardware (MAC) address library.",
            "version": "0.0.1.dev2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8581990,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bd94e554603d1a1e6b0cdb785e25c1b0",
                    "sha256": "dbccc22656f7683865a84df650dbefe8784f45dc3c429d689095433b756a902e"
                },
                "downloads": -1,
                "filename": "hwaddress-0.0.1.dev2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "bd94e554603d1a1e6b0cdb785e25c1b0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7251,
                "upload_time": "2020-11-04T22:08:33",
                "upload_time_iso_8601": "2020-11-04T22:08:33.529895Z",
                "url": "https://files.pythonhosted.org/packages/29/9b/d2068100376b45774bef2381f4f8a2bf1d62d30a7e5c26e24478f03a637e/hwaddress-0.0.1.dev2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "dc51c70ae171f72d329d9c4dab17dc2f",
                    "sha256": "46d29c3055df6fd3b60212a0069f78ca67172850d994fa67f615dbc8c42b763e"
                },
                "downloads": -1,
                "filename": "hwaddress-0.0.1.dev2.tar.gz",
                "has_sig": false,
                "md5_digest": "dc51c70ae171f72d329d9c4dab17dc2f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 7427,
                "upload_time": "2020-11-04T22:08:34",
                "upload_time_iso_8601": "2020-11-04T22:08:34.931781Z",
                "url": "https://files.pythonhosted.org/packages/02/24/9b65d8dc30e37a25e8104951efdc16d2a80833417523bf903e0439e60cd9/hwaddress-0.0.1.dev2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}