{
    "0.1.1": {
        "info": {
            "author": "",
            "author_email": "GoodCam <dev@goodcam.io>",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3"
            ],
            "description": "# GoodCam Device Proxy\n\n[![Documentation Status](https://readthedocs.org/projects/gcdevproxy-py/badge/?version=latest)](https://gcdevproxy-py.readthedocs.io/en/latest/?badge=latest)\n\nThis library simplifies creating HTTP proxies that can be used to communicate\nwith GoodCam devices in various networks. GoodCam devices contain a\n[built-in client](https://goodcam.github.io/goodcam-api/#tag/cloud) that\ncan be configured to connect automatically to a given proxy. Once\nconnected, the devices will wait for incoming HTTP requests. The proxy\nsimply forwards incoming HTTP requests to the connected devices.\n\n## Installation\n\nThis library is just a wrapper over\n[the Rust version](https://github.com/GoodCam/device-proxy-lib) of the same\nlibrary. You can install this library using pip:\n\n```bash\npip install gcdevproxy\n```\n\nIf there is no binary wheel available, pip will try to build also the\nunderlying Rust library. You will need the Rust compiler installed on your\nsystem to do this. You can install it easily using:\n\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\nSee https://www.rust-lang.org/tools/install for more information.\n\nEven though the Rust version of this library can be built for any platform\nsupported by Rust, this Python wrapper is currently available only for Linux\nsystems.\n\nThe Rust version of this library also requires OpenSSL (version 1.0.1 or newer)\nor LibreSSL (version 2.5 or newer). Ubuntu/Debian users can install OpenSSL\ndevelopment files using:\n\n```bash\nsudo apt-get install libssl-dev\n```\n\nFedora users can install them using:\n\n```bash\nsudo dnf install openssl-devel\n```\n\n## Usage example\n\nThe library supports both blocking and asynchronous API, though the\nasynchronous API should be preferred due to a better performance. To use the\nasynchronous API, simply use the `create_proxy` and `RequestHandler`\nequivalents from the `gcdevproxy.aio` module.\n\nPlease keep in mind that **when using the blocking API, your request handler\nMUST be thread-safe!** The proxy runtime may call your handler from multiple\nthreads at the same time. You don't have to worry about this when using the\nasynchronous API because your handler will be called only from the thread\nrunning the Python's asyncio event loop (usually the main thread).\n\n### Asynchronous API\n\n```python\nfrom gcdevproxy.aio import RequestHandler\n\n...\n\nclass MyRequestHandler(RequestHandler):\n    async def handle_device_request(self, authorization: Authorization) -> 'DeviceHandlerResult':\n        ...\n\n    async def handle_client_request(self, request: Request) -> 'ClientHandlerResult':\n        ...\n\nasync def main():\n    config = ProxyConfig()\n    config.http_bindings = [('0.0.0.0', 8080)]\n    config.request_handler = MyRequestHandler()\n\n    proxy = await gcdevproxy.aio.create_proxy(config)\n\n    await proxy.run()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n### Blocking API\n\n```python\nfrom gcdevproxy import RequestHandler\n\n...\n\nclass MyRequestHandler(RequestHandler):\n    def handle_device_request(self, authorization: Authorization) -> 'DeviceHandlerResult':\n        ...\n\n    def handle_client_request(self, request: Request) -> 'ClientHandlerResult':\n        ...\n\ndef main():\n    config = ProxyConfig()\n    config.http_bindings = [('0.0.0.0', 8080)]\n    config.request_handler = MyRequestHandler()\n\n    proxy = gcdevproxy.create_proxy(config)\n\n    proxy.run()\n\nif __name__ == '__main__':\n    main()\n```\n\n### More examples\n\nSee the `examples` directory in the root of this repository for ready-to-use\nexamples.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "gcdevproxy",
            "package_url": "https://pypi.org/project/gcdevproxy/",
            "platform": null,
            "project_url": "https://pypi.org/project/gcdevproxy/",
            "project_urls": {
                "Homepage": "https://github.com/GoodCam/device-proxy-lib-python"
            },
            "release_url": "https://pypi.org/project/gcdevproxy/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "GoodCam Device Proxy lib",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15869731,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e94b91ae905cf791d9efe41110a0e079",
                    "sha256": "462c370689f2a02597e3d9f03419d0d00134fe348db3369e43d38fff30f6be13"
                },
                "downloads": -1,
                "filename": "gcdevproxy-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "e94b91ae905cf791d9efe41110a0e079",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 55271,
                "upload_time": "2022-11-23T17:24:45",
                "upload_time_iso_8601": "2022-11-23T17:24:45.573684Z",
                "url": "https://files.pythonhosted.org/packages/3b/01/cea53dae78da4de6f263517eee2bb3d23ea14ac1b90ff351af4f7461b6b5/gcdevproxy-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}