{
    "0.1.16": {
        "info": {
            "author": "varioustoxins",
            "author_email": "g.s.thompson@kent.ac.uk",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python"
            ],
            "description": "<!-- These are examples of badges you might want to add to your README:\n     please update the URLs accordingly\n\n[![Built Status](https://api.cirrus-ci.com/github/<USER>/nef_pipelines.svg?branch=main)](https://cirrus-ci.com/github/<USER>/nef_pipelines)\n[![ReadTheDocs](https://readthedocs.org/projects/nef_pipelines/badge/?version=latest)](https://nef_pipelines.readthedocs.io/en/stable/)\n[![Coveralls](https://img.shields.io/coveralls/github/<USER>/nef_pipelines/main.svg)](https://coveralls.io/r/<USER>/nef_pipelines)\n[![PyPI-Server](https://img.shields.io/pypi/v/nef_pipelines.svg)](https://pypi.org/project/nef_pipelines/)\n[![Conda-Forge](https://img.shields.io/conda/vn/conda-forge/nef_pipelines.svg)](https://anaconda.org/conda-forge/nef_pipelines)\n[![Monthly Downloads](https://pepy.tech/badge/nef_pipelines/month)](https://pepy.tech/project/nef_pipelines)\n[![Twitter](https://img.shields.io/twitter/url/http/shields.io.svg?style=social&label=Twitter)](https://twitter.com/nef_pipelines)\n-->\n\n[![Project generated with PyScaffold](https://img.shields.io/badge/-PyScaffold-005CA0?logo=pyscaffold)](https://pyscaffold.org/)\n\n# NEF-Pipelines\n\n__*Tools for Manipulating NEF [NMR Exchange Format] Files and Foreign File Access*__\n\nNEF-Pipelines is a set of command line (currently... there maybe a gui later!) tools for maniulating [NEF] or NMR\nExchange Format files which can be used to move NMR meta data [peaks, shifts, sequences etc] between NMR data processing\nprograms.The progrmas provide basic tools for manipulating nef files:\n\n> Please note NEF-Pipelines is beta software and is quite new so if you do find problems put in an issue on the\n  [issue tracker]. Even better if you can help improve the software do get in touch, there is much to do!\n\n* __molecular chains__: listing, renaming and cloning molecular chains\n* __save-frames [tables]__: deleting, inserting, listing and pretty printing (tabulate)\n* __headers__ creation / updating NEF headers with correct UUIDs and history\n* __streaming__: NEF files into a pipeline\n* __testing__: self testing of NEF pipelines\n\nIt also provides tools for importing and exporing non NEF files from the following programs [transcoding / translators]\n\n- __fasta__\n  - sequence [read and write]\n- __mars__\n  - shifts [write]\n- __nmrpipe__\n  - sequences [read]\n  - shifts [read]\n  - peaks [read]\n- __nmrview__ / __nmrfx__\n  - peaks [read and write]\n  - sequence [read]\n  - shifts [read]\n- __pales__\n  - rdc restraints [write]\n  - rdc restraints template [write]\n- __pdb__\n  - sequence [read]\n\n## Installation\n\nNEF-Pipelines can be installed using pip, just type\n\n```bash\npip install nef-pipelines\n```\n\nafter the install has completed you can type\n\n```bash\nnef\n```\n\nand should see output that starts\n\n```\nUsage: nef [OPTIONS] COMMAND [ARGS]...                                                                                                                                                                                       \ue0b6 \u2714 \u2571 took 14s \uf252 \u2571 nef_pipelines \ue73c \u2571 at 23:29:36 \uf017\n\nOptions:\n...\n```\n## Pipelines and Standalone Use\n All commands also have a\nhelp options triggered using `--help` or when no input is detected. So for example the `nef` command on its own produces\n\n```\nUsage: nef [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n\n  --help                          Show this message and exit.\n\nCommands:\n  chains   - carry out operations on chains\n  fasta    - read and write fasta sequences\n  frames   - carry out operations on frames in nef frames\n  header   - add a header to the stream\n  mars     - export mars [shifts and sequences]\n  nmrpipe  - read nmrpipe [peaks shifts & sequencess]\n  nmrview  - read and write nmrview [peaks, sequences & shifts]\n  pales    - read and write pales/dc [rdcs]\n  pdb      - read pdb [sequences]\n  stream   - stream a nef file\n  test     - run the test suite\n\n```\n\nIndividual nef pipeline componenets can be used standalone by using the `--in` or `--pipe` parameter which will either\nread a foreign file for translators or read a NEF file for commands that manipulate NEF files. So for example to lists\nthe frames in NEF frame you can type\n\n```bash\nnef frames list --in test_data/pales_test_1.nef\n```\n\nthis will produce\n\n```bash\nentry pales_test\n\nnef_molecular_system  nef_rdc_restraint_list_test_1\n```\n\nwhich shows  the entry name followed by the frames in the file `test_data/pales_test_1.nef`. However,  the real\npower in NEF-Pipelines comes from combining pipeline commands together or with command line tools. For example\n\n```bash\nnef header                                   \\\n| nef fasta import sequence tailin1.fasta    \\\n| src/nef nmrview import shifts tailin1.out  \\\n| src/nef nmrview import peaks tailin1.out   \\\n> tailin1.nef\n```\n\nwill create a valid NEF header followed by the tailin1 sequence as a molecular system and then import shifts and peaks\nfor talin1 before writing a new NEF file `tailin1.nef`\n\nThe commands provided by NEF-Pipelines are hierarchical in nature. All commands are call by the NEF command but there\nare sub commands so for example to import a sequence froma pdb file tou would type  `nef psb import sequence` followed\nby the name of the PDB file and relevant options. This can look lomng winded bu NEF-Pipelines support command completion\nso typing a double tab will list all availabe sub commands.\n\nFor example\n``` bash\nnef<tab><tab>\n```\nshows\n\n```\nchains   fasta    frames   header   mars     nmrpipe  nmrview  pales    pdb      stream   test\n```\n\nand\n\n```bash\nnef nmrview import<tab<tab>\n```\n\nshows\n\n```\npeaks sequence shifts\n```\n\n## More information on NEF\n\nThe origional [NEF paper] is not a good description of the format more an outline of ideals and needs. The [CCPN]\nwebsite has a good [guide to nef] and development takes place on [github] via the [NEF consortium repository] which\nincludes an [annotated NEF example] and a [dictionary defining the format]. NEF is a [STAR format] which means it has\nsimilarities to [NMRStar] files used by the [BMRB] and [PDBx / mmCIF] used by the [RCSB / PDB] because its uses the same\nunderling format. However, its is not directly interchangeable with these file formats as it has a different syntax and\nintention / underlying use easy and accurate NMR data interchange] as opposed to archiving for example.\n\n<!-- pyscaffold-notes -->\n\n## Note\n\nThis project has been set up using PyScaffold 4.3.1. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n\n[NEF paper]: https://www.nature.com/articles/nsmb.3041\n[guide to nef]: https://www.ccpn.ac.uk/manual/v3/NEF.html\n[CCPN]: https://ccpn.ac.uk\n[github]: https://github.com\n[NEF consortium repository]: https://github.com/NMRExchangeFormat/NEF\n[annotated NEF example]: https://github.com/NMRExchangeFormat/NEF/blob/master/specification/Commented_Example_v1_1.nef\n[dictionary defining the format]: https://github.com/NMRExchangeFormat/NEF/blob/master/specification/mmcif_nef_v1_1.dic\n[STAR format]: https://en.wikipedia.org/wiki/Self-defining_Text_Archive_and_Retrieval\n[NMRStar]: https://bmrb.io/standards/\n[PDBx / mmCIF]: https://pdb101.rcsb.org/learn/guide-to-understanding-pdb-data/beginner\u2019s-guide-to-pdb-structures-and-the-pdbx-mmcif-format\n[RCSB / PDB]: https://www.rcsb.org\n[BMRB]: https://bmrb.io\n[issue tracker]: https://github.com/varioustoxins/NEF-Pipelines/issues\n",
            "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/varioustoxins/NEF-Pipelines",
            "keywords": "",
            "license": "LGPL-2.1",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nef-pipelines",
            "package_url": "https://pypi.org/project/nef-pipelines/",
            "platform": "any",
            "project_url": "https://pypi.org/project/nef-pipelines/",
            "project_urls": {
                "Documentation": "https://pyscaffold.org/",
                "Homepage": "https://github.com/varioustoxins/NEF-Pipelines"
            },
            "release_url": "https://pypi.org/project/nef-pipelines/0.1.16/",
            "requires_dist": [
                "cacheable-iterators (==0.1.1)",
                "cachetools (==5.0.0)",
                "click (==7.1.2)",
                "freezegun (==1.1.0)",
                "pydantic (==1.9.1)",
                "pynmrstar (==3.3.1)",
                "pyparsing (==3.0.9)",
                "pytest (==7.1.3)",
                "StrEnum (==0.4.8)",
                "tabulate (==0.8.9)",
                "typer (==0.6.1)",
                "xmltodict (==0.13.0)",
                "ordered-set (==4.1.0)",
                "biopython (==1.79)",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "pytest ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "Tools for Manipulating NEF [NMR Exchange Format] Files and Foreign File Access",
            "version": "0.1.16",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15911346,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "29293dff2e04ba03423af2b32f490704",
                    "sha256": "a537230085ab2fd492e273033b30f1cf5bd068048cd55e556f2661adc07c3cb3"
                },
                "downloads": -1,
                "filename": "nef_pipelines-0.1.16-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "29293dff2e04ba03423af2b32f490704",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 91873,
                "upload_time": "2022-11-28T08:25:37",
                "upload_time_iso_8601": "2022-11-28T08:25:37.915909Z",
                "url": "https://files.pythonhosted.org/packages/b0/e6/6b0b3e6d43cf3e7b2cc6214c8b6f58d2d3275c195ef2bcd5115a26ab032f/nef_pipelines-0.1.16-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c47447af00d314055cd300cbfe1c085c",
                    "sha256": "dc9828ea0407185a648a1ec5363a4f561c48bc20a042554a694533c1410510ab"
                },
                "downloads": -1,
                "filename": "nef_pipelines-0.1.16.tar.gz",
                "has_sig": false,
                "md5_digest": "c47447af00d314055cd300cbfe1c085c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 330846,
                "upload_time": "2022-11-28T08:25:39",
                "upload_time_iso_8601": "2022-11-28T08:25:39.680861Z",
                "url": "https://files.pythonhosted.org/packages/b9/5a/4a90093ac45cd01c62500363eaeefb983563113a29cd0cde124abdee1ad7/nef_pipelines-0.1.16.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}