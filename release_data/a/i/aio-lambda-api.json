{
    "0.1.6": {
        "info": {
            "author": "JGoutin",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: BSD License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9",
                "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
                "Typing :: Typed"
            ],
            "description": "![Tests](https://github.com/JGoutin/aio_lambda_api/workflows/tests/badge.svg)\n[![codecov](https://codecov.io/gh/JGoutin/aio_lambda_api/branch/master/graph/badge.svg)](https://codecov.io/gh/JGoutin/aio_lambda_api)\n[![PyPI](https://img.shields.io/pypi/v/aio_lambda_api.svg)](https://pypi.org/project/aio_lambda_api)\n\nA lightweight AsyncIO HTTP API for AWS lambda.\n\nFeatures:\n* Asyncio in AWS lambda.\n* FastAPI inspired routing and exception handling.\n* Compatible with AWS API gateway request/responses format.\n* Detailed JSON formatted access log (Works well with AWS Cloudwatch Insight).\n* X-Request-ID header support (Including in logs).\n* Configurable request timeout.\n* Optional input validation using Pydantic.\n* Optional JSON serialization/deserialization speedup with Orjson.\n* optional AsyncIO loop speed up with Uvloop.\n\nNot supported yet:\n* Customizing response headers.\n* Full query details access from routes functions.\n* Routes with variables (Like `\"/items/{item_id}\"`).\n* Query strings.\n* AWS SSM parameter store helper.\n\n## Usage\n\n### Usage with AWS lambda\n\nLambda function code example (`app.py`):\n```python\nfrom aio_lambda_api import Handler\n\nhandler = Handler()\n\n@handler.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n```\nAWS lambda function handler must be configured to `app.handler`.\n\n### Routing\n\nThe `aio_lambda_api.Handler` class provides decorators to configure routes for each \nHTTP method:\n* `Handler.get()`: GET.\n* `Handler.head()`: HEAD.\n* `Handler.post()`: POST.\n* `Handler.put()`: PUT.\n* `Handler.patch()`: PATCH.\n* `Handler.delete()`: DELETE.\n* `Handler.options()`: OPTIONS.\n\nFor all decorators, the first arguments is the HTTP path and is required.\n\nIt is also possible to select the return code (when no exception occurs) using the\n`status_code` argument. If not specified `200` is used.\n\n```python\nfrom aio_lambda_api import Handler\n\nhandler = Handler()\n\n@handler.get(\"/\", status_code=201)\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n@handler.get(\"/item\")\nasync def read_item(item_id: str):\n    return {\"item\": item_id}\n```\n\nThe decorated function is executed when the defined HTTP path and method matches.\n\nThe body of the request is parsed as JSON and injected in the function as arguments.\nIf Pydantic is installed, parameters are validated against arguments types annotations.\n\nThe decorated function must return a JSON serializable object or `None`. If the function\nreturns `None`, the returned status code is automatically set to `204`.\n\n### Exception handling\n\nIt is possible to trigger a response using the `aio_lambda_api.HTTPException` as follow:\n\n```python\nfrom aio_lambda_api import Handler, HTTPException\n\nhandler = Handler()\n\nitems = {\"foo\": \"The Foo Wrestlers\"}\n\n@handler.get(\"/item\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}\n```\n\nIf an exception is risen in routes functions, the behavior is the following:\n* `aio_lambda_api.HTTPException`: Converted to HTTP response with the \n  specified body and returns code.\n* `pydantic.ValidationError`: Converted to 422 HTTP error response with Pydantic error \n  details as body.\n* Other exceptions: Reraised. Callers using the Lambda API will\n  be able to analyse the error like any other Python lambda error \n  (With `errorType`, `errorMessage` and `stackTrace`)\n  Callers using an HTTP endpoint/API gateway will receive a simple 500 error with no\n  details.\n\n### Logging\n\nAn access log is automatically generated. This access log is in JSON format (`dict` in \nthe code). With AWS lambda, the logs will appear with other lambda logs in Cloudwatch \nlogs. The JSON format make them very easy to query in Cloudwatch Insight.\n\nAll request and all exceptions from routes functions are logged in the access log \n(Including reraised 500 errors.)\n\nWhen raising `aio_lambda_api.HTTPException`, it is possible to show extra information\non the logs using the `error_detail` arguments (This will be shown in logs but will not\nbe visible by the client in the response).\n\nThe logger dict can be accessed from any routes functions using the\n`aio_lambda_api.get_logger` function. This can be used to add custom logs entries. All\nlog entries must be JSON serializable.\n\nDefaults log fields:\n* `error_detail`: `error_detail` argument value of `aio_lambda_api.HTTPException`.\n* `execution_time_ms`: Execution time in ms of the route function.\n* `level`: Logging level (`info`, `warning`, `error`, `critical`).\n* `method`: HTTP method of the request.\n* `path`: HTTP path of the request.\n* `request_id`: `X-Request-Id` header is present else AWS lambda `requestId`.\n* `server`: Server running the lambda. This is the ID of the first lambda function call,\n  so this value will not change if lambda reuse the same context in another function \n  call.\n* `status_code`: HTTP status code of the response.\n\n### Async initialization\n\nIn AWS lambda the asyncio context is limited to the routes functions.\n\nBut, the `aio_lambda_api.Handler` class provides methods to run async function outside \nroutes functions:\n* `Handler.run_async`: Runs an async function and returns the result.\n* `Handler.enter_async_context`: Initialize an async contextmanager and returns the\n  initialized object. The Context manager is also attached to the \n `aio_lambda_api.Handler` exit stack (And will be exited with the handler; note that \n  there is no guarantee that this is executed with AWS lambda).\n\n```python\nfrom aio_lambda_api import Handler\nfrom database import Database\n\nhandler = Handler()\n\n# Initialize a database connection outside routes functions\n# AWS lambda will keep this value cached between runs\n\nasync def init_database():\n  db = Database()\n  await db.connect()\n  return db\n\nDB = handler.run_async(init_database())\n\n# Variable can then be used normally from routes functions\n\n@handler.get(\"/user\")\ndef get_fron_db():\n  return await DB.select(\"*\")\n\n```\n\n### Configuration \n\n#### Settings\n\nThese settings are passed to the handle with environment variables.\n\n* `FUNCTION_TIMEOUT`: The route function call timeout in seconds. \n  Available as `aio_lambda_api.settings.FUNCTION_TIMEOUT`. Default to 30s.\n* `CONNECTION_TIMEOUT`: Global connection timeout in seconds.\n  Available as `aio_lambda_api.settings.CONNECTION_TIMEOUT`.\n  Also used in `aio_lambda_api.aws.BOTO_CLIENT_CONFIG`. Default to 5s.\n* `READ_TIMEOUT`: Global read timeout in seconds.\n  Available as `aio_lambda_api.settings.READ_TIMEOUT`.\n  Also used in `aio_lambda_api.aws.BOTO_CLIENT_CONFIG`. Default to 15s.\n* `BOTO_PARAMETER_VALIDATION`: If set enable `boto3` input validation in \n  `aio_lambda_api.aws.BOTO_CLIENT_CONFIG`. Disabled by default to improve \n  performance.\n* `BOTO_MAX_POOL_CONNECTIONS`: `boto3` `max_pool_connections` in \n  `aio_lambda_api.aws.BOTO_CLIENT_CONFIG`. Default to 100.\n\n#### AWS utilities\n\n##### Botocore default config.\n\nA `botocore.client.Config` is provided as \n`aio_lambda_api.aws.BOTO_CLIENT_CONFIG` and can be used with `aioboto3` \nclients and resources.\n\n```python\nimport aioboto3\nfrom aio_lambda_api.aws import BOTO_CLIENT_CONFIG\n\nsession = aioboto3.Session()\nasync with session.resource(\"s3\", config=BOTO_CLIENT_CONFIG) as s3:\n    pass\n```\n\n##### aiobotocore & aioboto3 performance speed up\n\nbotocore/aiobotocore is configured to use orjson is available to speed up JSON \nserialization/deserialization.\n\nIf the `speedups` extra is installed, aiohttp is installed with its own speedups extra.\nSince aiobotocore and aioboto3 rely on aiohttp, this will also improve their \nperformance.\n\n## Installation\n\n### Minimal installation:\n```bash\npip install aio-lambda-api\n```\n\n### Installations with extras:\n\nMultiple extra are provided\n\n```bash\npip install aio-lambda-api[all]\n```\n\n* `all`: Install all extras.\n* `aws`: Install AWS SDK (`aioboto3`).\n* `validation`: Install input validation dependencies (`pydantic`).\n* `speedups`: Input performance speedups dependencies (`uvloop`, `orjson`).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aio-lambda-api",
            "package_url": "https://pypi.org/project/aio-lambda-api/",
            "platform": null,
            "project_url": "https://pypi.org/project/aio-lambda-api/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/aio-lambda-api/0.1.6/",
            "requires_dist": [
                "aioboto3; extra == \"all\" or extra == \"aws\"",
                "uvloop; extra == \"all\" or extra == \"speedups\"",
                "orjson; extra == \"all\" or extra == \"speedups\"",
                "pydantic; extra == \"all\" or extra == \"validation\"",
                "aiohttp[speedups]; extra == \"all\" or extra == \"speedups\""
            ],
            "requires_python": ">=3.9,<4.0",
            "summary": "Simple AsyncIO AWS lambda HTTP API",
            "version": "0.1.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15890884,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6bc41c9121b715c1b2772a91523c976b",
                    "sha256": "457804fa6d889f3a80a63f68104390d94ac5777f752e00260113d37a257f47ec"
                },
                "downloads": -1,
                "filename": "aio_lambda_api-0.1.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6bc41c9121b715c1b2772a91523c976b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<4.0",
                "size": 11788,
                "upload_time": "2022-11-25T13:52:15",
                "upload_time_iso_8601": "2022-11-25T13:52:15.765843Z",
                "url": "https://files.pythonhosted.org/packages/2c/5c/8a3f9a747cecd39884a15dda36802a4178232c2b7afe6851446dd4bea6f7/aio_lambda_api-0.1.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4cb7c20374908565c87ebd134d1a7753",
                    "sha256": "0d0a2d7c8a53a1c412a72208d9e80b9dd8c367c29c64dc58e6239770a76227d3"
                },
                "downloads": -1,
                "filename": "aio_lambda_api-0.1.6.tar.gz",
                "has_sig": false,
                "md5_digest": "4cb7c20374908565c87ebd134d1a7753",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9,<4.0",
                "size": 13216,
                "upload_time": "2022-11-25T13:52:17",
                "upload_time_iso_8601": "2022-11-25T13:52:17.199037Z",
                "url": "https://files.pythonhosted.org/packages/be/ae/6fc901e8e9466e369d3cf65b6e7be75b113c8ed79f56d4c6c2a7caa81131/aio_lambda_api-0.1.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}