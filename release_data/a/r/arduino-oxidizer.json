{
    "1.0.0": {
        "info": {
            "author": "loxygen",
            "author_email": "me@loxygen.dev",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Build Tools",
                "Topic :: Software Development :: Embedded Systems"
            ],
            "description": "# oxidizer (arduino-oxidizer)\n\n<a name=\"english-version\" />\n<a href=\"#japanese-version\"><b>\u65e5\u672c\u8a9e\u7248\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059 \uff0f Japanese version is avaialble</b></a>\n\nA python tool to build Rust project for Arduino and write it.\n\n## Installation\n\n### Requirements\n\n- `python3`\n- `pip`\n- `cargo`\n- A rust project configurated to build for Arduino, or an elf file to write\n  - If you need to make a project for it, a template [loxygenK/arduino-on-rust_template](https://github.com/loxygenK/arduino-on-rust_template) is available.\n- `avrdude`\n\n### Installation\n\nYou can install oxidizer with`pip`\n\n```bash\npip install arduino-oxidizer\n```\n\nNote: The package's name to install is **`arduino-oxidizer`**, not `oxidizer`. \n\n## How to use\n\n### Build and write a Cargo project configured for Arduino\n\nOxidizer builds the project using `cargo`, and write to Arduino. The target ELF file is searched based on `cargo.toml`.\n\n```bash\noxidizer <Serial port to write>\n```\n\n#### example\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0\n[i] Building 'some-nice-project' ...\n[i] >> cargo build\n    Updating crates.io index\n    Finished dev [unoptimized + debuginfo] target(s) in 2.30s\n[v] Building succeeded! Writing to Arduino...\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:target/avr-atmega\n328p/debug/some-nice-project.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\nReading | ################################################## | 100% 0.00s\n\n/* ...... */\n\navrdude: 4982 bytes of flash verified\n\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\n\navrdude done.  Thank you.\n\n[v] All works done!\n```\n\n### Build and write in release mode\n\nRun with the option `--release` (`-r`) , to build in release mode.\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0 -r\n[i] Building 'some-nice-project' in release mode...\n[i] >> cargo build --release\n    Updating crates.io index\n    Finished release [optimized] target(s) in 2.42s\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[\u2713] All works done!\n```\n\n### Write your own ELF file\n\nRun with the option `--skip-cargo` (`-s`) and `--elf-path` (`-e`) , to skip building a cargo project, and write your own ELF file to Arduino.\n\n```\n$ oxidizer --skip-cargo --elf-path my_own_elf_file.elf /dev/ttyUSB0\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:my_own_elf_file.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[\u2713] All works done!\n```\n\n## Other options\n\nVarious options is available:\n\n```\n$ oxidizer --help\nusage: oxidizer [-h] [--release] [--cargo-option [Option [Option ...]]]\n                [--avrdude-option [Option [Option ...]]] [--avrdude-override] [--avrdude-quite]\n                [--skip-cargo] [--elf-path ELF_PATH] [--no-color]\n                target\n\nA building helper for the Rust project for Arduino.\n\npositional arguments:\n  target                Specify the serial port to write.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --release, -r         Let cargo build in release mode\n  --cargo-option [Option [Option ...]], -c [Option [Option ...]]\n                        Pass options to cargo. Type without '-'!\n  --avrdude-option [Option [Option ...]], -a [Option [Option ...]]\n                        Pass options to avrdude. Type without '-'!\n  --avrdude-override, -A\n                        override avrdude's option. Use with '-a'\n  --avrdude-quite, -q   Use -q option when avrdude.\n  --skip-cargo, -s      Skip building using cargo.\n  --elf-path ELF_PATH, -e ELF_PATH\n                        Specify ELF file's path. Use target/avr-\n                        atmega328p/{debug,release}/{package_name}.elf as default.\n  --no-color            Disable color output.\n```\n\n| Option               | Abbreviation | Arguments                                               | Description                                                  |\n| -------------------- | ------------ | ------------------------------------------------------- | ------------------------------------------------------------ |\n| `--release`          | `-r`         | Nothing                                                 | Build the cargo project in release mode.<br />Cannot be used with `--skip-cargo`. |\n| `--cargo-option`     | `-c`         | Options to pass to cargo<br />(enumerate without`-`)    | Run cargo with additional options.                           |\n| `--avrdude-option`   | `-a`         | Options to pass to avrdude<br /> (enumerate without`-`) | Run avrdude with additional options.                         |\n| `--avrdude-override` | `-A`         | Nothing                                                 | Replace the default options to pass to avrdude with the options specified in `--avrdude-option`. |\n| `--skip-cargo`       | `-s`         | Nothing                                                 | Skip building a cargo project. Use with`--elf-path`.         |\n| `--elf-path`         | `-e`         | The ELF file to write                                   | Specify the ELF file's path to write.                        |\n| `--no-color`         | Nothing      | Nothing                                                 | Print logs without ASCII espace sequences.                   |\n\n---\n\n\n\n# oxidizer (arduino-oxidizer)\n\n<a name=\"japanese-version\" />\n<a href=\"#english-version\"><b>English version is available \uff0f \u82f1\u8a9e\u7248\u304c\u5229\u7528\u3067\u304d\u307e\u3059</b></a>\n\nPython\u3067\u4f5c\u6210\u3055\u308c\u305f\u3001Rust\u3067\u66f8\u304b\u308c\u305fArduino\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u30fb\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n### \u5fc5\u8981\u306a\u3082\u306e\n\n- `python3`\n- `pip`\n- `cargo`\n- Arduino\u7528\u306b\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u69cb\u6210\u3055\u308c\u305fRust\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n  \u307e\u305f\u306f\u66f8\u304d\u8fbc\u307f\u305f\u3044elf\u30d5\u30a1\u30a4\u30eb\n  - \u3088\u308d\u3057\u3051\u308c\u3070 [loxygenK/arduino-on-rust_template](https://github.com/loxygenK/arduino-on-rust_template) \u3092\u3069\u3046\u305e\uff08\u30c0\u30a4\u30de\uff09\n- `avrdude`\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n`pip`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059:\n\n```bash\npip install arduino-oxidizer\n```\n\n\u6ce8\u610f: \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306f`oxidizer`\u3067\u306f\u306a\u304f**`arduino-oxidizer`**\u3067\u3059\u3002 \n\n## \u4f7f\u3044\u65b9\n\n### Arduino\u7528\u306b\u69cb\u6210\u3055\u308c\u305fCargo\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u30fb\u66f8\u304d\u8fbc\u307f\n\noxidizer\u306f\u3001`cargo`\u3092\u7528\u3044\u3066\u30d3\u30eb\u30c9\u3092\u884c\u3044\u3001`avrdude`\u3092\u7528\u3044\u3066Arduino\u3078\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n\u66f8\u304d\u8fbc\u3080ELF\u30d5\u30a1\u30a4\u30eb\u306f`Cargo.toml`\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\u3092\u5143\u306b\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n```bash\noxidizer <\u66f8\u304d\u8fbc\u307f\u5148\u306e\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8>\n```\n\n#### \u4f8b\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0\n[i] Building 'some-nice-project' ...\n[i] >> cargo build\n    Updating crates.io index\n    Finished dev [unoptimized + debuginfo] target(s) in 2.30s\n[v] Building succeeded! Writing to Arduino...\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:target/avr-atmega\n328p/debug/some-nice-project.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\nReading | ################################################## | 100% 0.00s\n\n/* ...... */\n\navrdude: 4982 bytes of flash verified\n\navrdude: safemode: Fuses OK (E:00, H:00, L:00)\n\navrdude done.  Thank you.\n\n[v] All works done!\n```\n\n### Cargo\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30ea\u30ea\u30fc\u30b9\u30e2\u30fc\u30c9\u3067\u30d3\u30eb\u30c9\u30fb\u66f8\u304d\u8fbc\u307f\n\n`--release`\uff08`-r`\uff09\u3092\u3064\u3051\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u30ea\u30ea\u30fc\u30b9\u30e2\u30fc\u30c9\u3067\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u3002\n\n```\n$ cd /path/to/cargo/projects/root\n$ oxidizer /dev/ttyUSB0 -r\n[i] Building 'some-nice-project' in release mode...\n[i] >> cargo build --release\n    Updating crates.io index\n    Finished release [optimized] target(s) in 2.42s\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[\u2713] All works done!\n```\n\n### \u81ea\u4f5c\u306eELF\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\n\n`--skip-cargo`\uff08`-s`\uff09\u3068`--elf-path`\uff08`-e`\uff09\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001Cargo\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d3\u30eb\u30c9\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u3001\u81ea\u4f5c\u306eELF\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\n$ oxidizer --skip-cargo --elf-path my_own_elf_file.elf /dev/ttyUSB0\n[i] >> avrdude -C/etc/avrdude.conf -patmega328p -carduino -P/dev/ttyUSB0 -Uflash:w:my_own_elf_file.elf:e\n\navrdude: AVR device initialized and ready to accept instructions\n\n/* ...... */\n\navrdude done.  Thank you.\n\n[\u2713] All works done!\n```\n\n## \u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\n\n\u69d8\u3005\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3067\u304d\u307e\u3059:\n\n```\n$ oxidizer --help\nusage: oxidizer [-h] [--release] [--cargo-option [Option [Option ...]]]\n                [--avrdude-option [Option [Option ...]]] [--avrdude-override] [--avrdude-quite]\n                [--skip-cargo] [--elf-path ELF_PATH] [--no-color]\n                target\n\nA building helper for the Rust project for Arduino.\n\npositional arguments:\n  target                Specify the serial port to write.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --release, -r         Let cargo build in release mode\n  --cargo-option [Option [Option ...]], -c [Option [Option ...]]\n                        Pass options to cargo. Type without '-'!\n  --avrdude-option [Option [Option ...]], -a [Option [Option ...]]\n                        Pass options to avrdude. Type without '-'!\n  --avrdude-override, -A\n                        override avrdude's option. Use with '-a'\n  --avrdude-quite, -q   Use -q option when avrdude.\n  --skip-cargo, -s      Skip building using cargo.\n  --elf-path ELF_PATH, -e ELF_PATH\n                        Specify ELF file's path. Use target/avr-\n                        atmega328p/{debug,release}/{package_name}.elf as default.\n  --no-color            Disable color output.\n```\n\n| \u30aa\u30d7\u30b7\u30e7\u30f3           | \u7701\u7565\u5f62 | \u5f15\u6570                                   | \u8aac\u660e                                                         |\n| -------------------- | ------ | -------------------------------------- | ------------------------------------------------------------ |\n| `--release`          | `-r`   | \u306a\u3057                                   | Cargo\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30ea\u30ea\u30fc\u30b9\u30e2\u30fc\u30c9\u3067\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002<br />`--skip-cargo`\u3068\u540c\u6642\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 |\n| `--cargo-option`     | `-c`   | Cargo\u306b\u6e21\u3059\u30aa\u30d7\u30b7\u30e7\u30f3(`-`\u306a\u3057\u3067\u5217\u6319)   | Cargo\u3067\u30d3\u30eb\u30c9\u3059\u308b\u969b\u306b\u3001\u8ffd\u52a0\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002  |\n| `--avrdude-option`   | `-a`   | avrdude\u306b\u6e21\u3059\u30aa\u30d7\u30b7\u30e7\u30f3(`-`\u306a\u3057\u3067\u5217\u6319) | avrdude\u3067\u30d3\u30eb\u30c9\u3059\u308b\u969b\u306b\u3001\u8ffd\u52a0\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002 |\n| `--avrdude-override` | `-A`   | \u306a\u3057                                   | avrdude\u3067\u30d3\u30eb\u30c9\u3059\u308b\u969b\u3001\u898f\u5b9a\u306e\u30b3\u30de\u30f3\u30c9\u3092`--avrdude-option`\u3067\u6307\u5b9a\u3055\u308c\u305f\u3082\u306e\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002 |\n| `--skip-cargo`       | `-s`   | \u306a\u3057                                   | Cargo\u3067\u306e\u30d3\u30eb\u30c9\u3092\u30b9\u30ad\u30c3\u30d7\u3057\u307e\u3059\u3002<br />`--elf-path`\u3068\u4e00\u7dd2\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 |\n| `--elf-path`         | `-e`   | Arduino\u306b\u66f8\u304d\u8fbc\u3080ELF\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9   | \u66f8\u304d\u8fbc\u3080ELF\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002                      |\n| `--no-color`         | \u306a\u3057   | \u306a\u3057                                   | ASCII\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306a\u3057\u3067\u51fa\u529b\u3092\u884c\u3044\u307e\u3059\u3002              |\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/loxygenK/oxidizer",
            "keywords": "",
            "license": "MIT",
            "maintainer": "loxygen",
            "maintainer_email": "me@loxygen.dev",
            "name": "arduino-oxidizer",
            "package_url": "https://pypi.org/project/arduino-oxidizer/",
            "platform": "",
            "project_url": "https://pypi.org/project/arduino-oxidizer/",
            "project_urls": {
                "Homepage": "https://github.com/loxygenK/oxidizer"
            },
            "release_url": "https://pypi.org/project/arduino-oxidizer/1.0.0/",
            "requires_dist": [
                "toml (~=0.10)",
                "pyserial (~=3.5)"
            ],
            "requires_python": "",
            "summary": "A python tool to build Rust project for Arduino and write it.",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8773363,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ca9b56a1fda946e0b6072c4e2497b9f7",
                    "sha256": "99d729e9a6f9f64e898fa929d9f5bf9d95129f3613698984f9a6f345d4f4feb9"
                },
                "downloads": -1,
                "filename": "arduino_oxidizer-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ca9b56a1fda946e0b6072c4e2497b9f7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7641,
                "upload_time": "2020-11-29T14:18:41",
                "upload_time_iso_8601": "2020-11-29T14:18:41.371272Z",
                "url": "https://files.pythonhosted.org/packages/30/d9/e4d99986f4711b273341afe84b324b92b428d00e88fc5b8081e717024d1f/arduino_oxidizer-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "67cea87d988c389e2432cae856fd3df9",
                    "sha256": "280aecb78836b1b9649fc9501dee5ce9a73a4f819cc415dae8792436566134b7"
                },
                "downloads": -1,
                "filename": "arduino-oxidizer-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "67cea87d988c389e2432cae856fd3df9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 7635,
                "upload_time": "2020-11-29T14:18:42",
                "upload_time_iso_8601": "2020-11-29T14:18:42.921182Z",
                "url": "https://files.pythonhosted.org/packages/a5/a3/2215caa5187f228b744b84a258dae862097b01cee698160057d11808626d/arduino-oxidizer-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}