{
    "0.1.1": {
        "info": {
            "author": "James Stroud",
            "author_email": "James Stroud <stealthsend@stealth-coin.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Introduction\n\nThe **stealth-key-tool** package is a high level wrapper around some of\nthe most critical functionality for heirarchical deterministic (HD) wallets.\nThe primary goal of this package is to provide a secure means to derive\nprivate keys, addresses, and other essential information from HD mnemonics\n(typically 12, 18, or 24 word secret phrases).\n\nTowards this goal of security, all dependencies for this package are either\n(1) part of the Python 3 standard distribution or (2) fully contained within\nthe package itself, making this library easy to run on an air-gapped\nor otherwise isolated computer. This limitation of dependencies also helps\nthe user audit the code.\n\nThis README is divided into three parts. The first part covers the basics of\nHD wallets necessary to use this package. The second part describes the use\nof the **stealth-key-tool.py** utility. Finally, the third part explains\nthe **stealth_key_tool** API (notice dashes versus underscores in the names\nof the utility and package).\n\n\n# HD Wallet Basics\n\nIn general this README assumes that the reader is either\n(a) an expert in HD wallets, or (b) doesn't care how they work\nand is getting help from and expert. For the latter type of\nuser: please remember to **NEVER SHARE your mnemonic with anyone**.\n\nThat said, any user of the **stealth-key-tool.py** utility must have a\nrudimentary understanding of a couple of HD wallet basics.\nFirst, HD wallets are created from a mnemonic. This mnemonic can be used\nto derive practically unlimited addresses, each of which belongs an\naccount, and can either be a change address or a public address,\nwhich is known in HD wallet parlance as an \"external address\".\n\nAny address in the heirarchy of an HD wallet is expressed as a so-called\n\"path\" or \"chain\". The conceptually \"first\" address of an HD wallet has\nthe following path:\n\n```\nm/44'/125'/0'/0/0\n```\n\nIn this path, the primes (`'`) have meanings that are beyond the scope\nof this README. For our purposes, the user is advised to simply ignore\nthem, although they will be included in this discussion to ensure technical\nprecision. The leftmost `m` amounts to a visual cue that indicates the start\nof the path. The `44'` never changes. the `125'` indicates the coin is\nXST (this is the **stealth-key-tool.py**, after all). Each coin will have\na different number in this position. For example, instead of `125'`,\nBTC uses `0'` here.\n\nWhen limited to a single coin (like XST), the part of the path that changes\nfor the user are the last three elements, separated by forward slashes (`/`).\nHere this part of the path is:\n\n```\n0'/0/0\n```\n\nIn this part, the leftmost zero (`0'`) indicates the account. Numbering starts\nat 0, so this is the \"first\" account. The middle zero indicates that this\nis an external address intended to be shared with others, as when withdrawing\nfrom an exchange. This middle number is limited to `0` or `1`, the latter\nof which indecates it is a \"change\" address, termed an \"internal\" address.\nThe rightmost `0` is the address identifier, typically called the\n\"address index\".\n\nAny change to the path gives a new and completely unpredictable address.\n\nAlthough crude, the following ASCII-art hopes to illustrate the heirarchical\nnature of HD wallets by showing the relationship of several paths, each\nrepresented only by its last three identifiers (account/change/address).\n\n```\n -> 0'/0/0 -> 0'/0/1 -> 0'/0/2\n|   \\\n|    -> 0'/1/0 -> 0'/1/1 -> 0'/1/2\n|\n -> 1'/0/0 -> 1'/0/1 -> 1'/0/2\n    \\\n     -> 1'/1/0 -> 1'/1/1 -> 1'/1/2\n```\n\nIt is important to highlight that each path in this heirarchy corresponds to a\nunique address, completely unpredictable from knowledge of the other\naddresses in the heirarchy.\n\nFor further understanding of HD wallets, a good place to start is with\nLedger's excellent\n[writeup](https://www.ledger.com/academy/crypto/what-are-hierarchical-deterministic-hd-wallets).\nFor even deeper inquiry, the user is encouraged to read and understand\n[BIP-0032](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki),\n[BIP-0039](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki), and\n[BIP-0044](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki).\n\n# stealth-key-tool.py\n\nThe **stealth-key-tool.py** utility is a command line (CLI) driven application\nthat takes a mnemonic as user input and derives cryptographic keypairs\nthat are then used to generate information, using simple commands.\n\n## Preliminary Advice\n\n**WARNING**: Never share any of the follwing:\n\n* Your mnemonic (aka \"secret phrase\", aka \"seed phrase\")\n* The extended private key (from the `xprv` command )\n* The hex private key (from the `prv` command)\n* The WIF private key (from the `wif` command)\n\nFurthermore, one should be exceedingly careful about sharing an account's\nextended public key (from the `xpub` command).\n\n*If you have any doubts whether you should share the\nextended public key, then don't share it.*\n\n## Startup\n\nWhen starting up, you will be prompted for the mnemonic (called the\n\"secret phrase\" in the utility). By default, this input will be hidden.\nTo see what you type when you enter the mnemonic, hit enter before typing\nthe mnemonic, and you will be prompted again, this time with the ability\nto see the text.\n\nPlease note that he mnemonic is not verified in any way. \n\n## Command Input\n\nAfter the user enters the mnemonic, the utility goes into the \"command loop\",\nwhich is just a basic user interface where the user types simple commands\nto alter the heirarchy (also called a \"path\", or \"chain\"),\nor to output desired information.\n\nThe commands are:\n\n* `h` : prints list of commands\n* `addr` : prints the address for the current HD path\n* `gp` : prints the current HD path\n* `sa` : sets the account identifier\n* `++a` : increments the account index by 1\n* `--a` : decrements the account index by 1\n* `ext` : un-sets the change identifier to external (non-change) addresses\n* `int` : sets the change identifier to internal (change) addresses\n* `si` : sets the address index\n* `++i` : increments the address index\n* `--i` : decrements the address index\n* `sp` : sets the path using the last three elements (account/change/address)\n* `xpub` : prints the account's extended public key\n* `xprv` : prints the account's extended private key (**NEVER SHARE**)\n* `pub` : prints the address's public key\n* `prv` : prints the address's private key (**NEVER SHARE**)\n* `wif` : prints the account's private key in WIF format (**NEVER SHARE**)\n* `q` : quits the utility\n\n### Arguments\n\nSeveral commands take arguments that may be entered on the same line as the command\nitself. These commands start with an \"s\": `sa`, `si`, and `sp`. The following\ninput shows an example of how to set the path with `sp`:\n\n```\nsp 5'/1/4\n```\n\nThis command sets the path to:\n\n```\nm/44'/125'/5'/1/4\n```\n\n### User requested output\n\nSeveral commands will produce user requested output. In these cases,\nthe output will be written to\n[standard out](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)),\nmeaning that if the output from the utility is re-directed to a file,\nfor example, highly sensitive information could be leaked. Sensitive\ncommands in this category are: `xprv`, `prv` and `wif`.\n**Please be careful with these commands.**\n\nOther commands that produce user requested output are\n`addr`, `gp`, `xpub`, and `pub`.\n\nFor further discussion of the importance of user requested output,\nplease see the section titled \"Scripting\".\n\n### Increment and Decrement\n\nSeveral commands simply increment and decrement identifiers.\nThese are included for convenience and ease to type. An example where\nthis might be useful is if a user wants to generate a handful of unique\naddresses but doesn't have the time or patience to write a script.\nThese commands are `++a`, `--a`, `++i`, and `--i`.\n\n## Scripting\n\nTo make the **stealth-key-tool.py** useful in a workflow, it features the `-N`\nflag that allows use in non-interactive mode. This mode allows for\nscripting of the utility using shell scripts. In this mode,\nno option is given to the user to hide the mnemonic upon entry and\nonly user requested output is produced.\n\nAs an example, here is a shell script that prints the\nfirst four change addresses of the fifth account (account number 4)\nfor the mnemonic `some random words`:\n\n```\n#! /usr/bin/env bash\nDONT_USE_THIS_MNEMONIC=\"some random words\"\nACCOUNT=4\nINPUT=${DONT_USE_THIS_MNEMONIC}$'\\nsa '${ACCOUNT}$'\\nint'\nfor i in {0..3}\ndo\n  INPUT=${INPUT}$'\\nsi '${i}$'\\naddr'\ndone\nstealth-key-tool.py -N <<< \"${INPUT}\"\n```\n \nNote that the output of this script would be\n \n```\nSBmb6Zm9DTrXMTfYTDou5g5c72YBVntp6M\nS6kyXjua5PsQRuTKmzJkuA3MVghba9gGrn\nRxqKUDm45CBmLDwF7cympTCDkfSedx4op6\nSKexTQxDywQi2FAxpo7tBtfWbZsWDhQwJo\n```\n\n# The API\n\nThe stealth_key_tool API exposes several high-level functions that\nsimplify the most common tasks related to working with HD wallets.\n\n**seed_from_mnemonic(...)**\n\n```\nseed_from_mnemonic(mnemonic, salt=\"\") -> bytes\n```\n\nTakes the mnemonic phrase as a `str` and optional salt as a `str` and\nreturns `bytes` representing the seed derived from the mnemonic.\n\n**key_from_mnemonic(...)**\n\n```\nkey_from_mnemonic(mnemonic, salt=\"\") -> BIP32Key\n```\n\nTakes the mnemonic phrase as a `str` and optional salt as a `str` and\nreturns a private `BIP32Key` derived from the mnemonic.\n\n**get_address(...)**\n\n```\nget__address(key, netbyte) -> str\n```\n\nTakes a `BIP32Key` and the network byte (62 for XST) to create\nan address, returned as a `str`.\n\n**get_child_key(...)**\n\n```\n get_child_key(key, purpose=PURPOSE,\n                    coin_type=None,\n                    account=None,\n                    change=None,\n                    address_index=None) -> BIP32Key\n```\n\nTakes a `BIP32Key` and optional `int` arguments for the purpose,\ncoin type, account, change, and address index, to produce a new\nchild key returned as a `BIP32Key`. This function simplifies calculating\nkeys in the heirarchy by inferring from the argument list the heirarchical\nlevel of the child key. *IMPORTANT*: the resulting child key will always\nbe hardened for purpose, coin type, and account.\n\n**get_path(...)**\n\n```\nget_path(account, change, index) -> str\n```\n\nTakes the account, change, and address index as `int`s and returns\nthe full 6-part path (e.g. `m/44'/125'/0'/0/0`) as a `str`.\n\n**get_wif(...)**\n\n```\nget_wif(key) -> str\n```\n\nTakes a `BIP32Key` and returns the private key in wallet import\nformat (WIF) as a `str`.\n\n**parse_account_id(...)**\n\n```\nparse_account_id(p) -> int\n```\n\nTakes a `str` and attempts to interpret it as an account identifier.\nThrows an `AccountError` upon failure to interpret the input. The returned\nvalue is an `int`. *IMPORTANT*: this function ignores any apostrophe\nmeant to indicate hardening and returns the identifier modulo\nthe hardening constant (0x80000000).\n\n**parse_address_index(...)**\n\n```\nparse_address_index(p) -> int\n```\n\nTakes a value and attempts to interpret it as an address index.\nThrows an `AddressError` upon failure to interpret the input.\nThe returned value is an `int`.\n\n**parse_path(...)**\n\n```\nparse_path(pth) -> tuple\n```\n\nTakes a `str` and attempts to parse it as an HD path. The path must have\nthree parts (e.g. `0'/0/0`) and evaluate to a valid path. If it fails,\nit will throw one of `AccountError`, `ChangeError`, or `AddressError`\ndepending on the part of the path that is not valid. The returned `tuple`\nhas three `int` elements representing the account identifier, change\nspecifier, and address index. *IMPORTANT*: this function ignores any\napostrophe meant to indicate hardening and returns the account identifier\nmodulo the hardening constant (0x80000000).\n\n# Copyright Notice\n\n```\nCopyright (c) 2022, James Stroud\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Stealth-R-D-LLC/stealth-key-tool",
            "keywords": "bip32 bip39 bip44 cryptocurrencies",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "stealth-key-tool",
            "package_url": "https://pypi.org/project/stealth-key-tool/",
            "platform": null,
            "project_url": "https://pypi.org/project/stealth-key-tool/",
            "project_urls": {
                "Homepage": "https://github.com/Stealth-R-D-LLC/stealth-key-tool"
            },
            "release_url": "https://pypi.org/project/stealth-key-tool/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.4",
            "summary": "A simplified wrapper for working with HD wallets",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16084286,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cc9da945fe52466c4050421879541bdf",
                    "sha256": "f031efbcbd658f7d7a43629a658e184890bedd4cd0a48965e9aff4a4cfff5b5e"
                },
                "downloads": -1,
                "filename": "stealth_key_tool-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cc9da945fe52466c4050421879541bdf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.4",
                "size": 23570,
                "upload_time": "2022-12-13T09:48:55",
                "upload_time_iso_8601": "2022-12-13T09:48:55.319319Z",
                "url": "https://files.pythonhosted.org/packages/e8/0b/2b3a3187801bb6b5c219ada381d73263713f70527d205439b8358344d96e/stealth_key_tool-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cc9f896384c8641e22ac69763f27245e",
                    "sha256": "b28afbb11f4f465d2ef8e1f947f671d166d3b9d28518704ff462c9b7163dc458"
                },
                "downloads": -1,
                "filename": "stealth_key_tool-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "cc9f896384c8641e22ac69763f27245e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.4",
                "size": 24184,
                "upload_time": "2022-12-13T09:48:57",
                "upload_time_iso_8601": "2022-12-13T09:48:57.172179Z",
                "url": "https://files.pythonhosted.org/packages/68/74/d7727cdae80b9e4270026fd4030102e74e1e1d41c2bd66fb0e8463c4b882/stealth_key_tool-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}