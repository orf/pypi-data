{
    "1.0.0": {
        "info": {
            "author": "Arthur",
            "author_email": "s9339307190@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "## Flask-middlewares\r\nAllows you to use the benefits of middlwares in Flask\r\n\r\n### Installation\r\n`pip install flask_middlewares`\r\n\r\n### Example\r\n```python\r\nfrom typing import Callable\r\n\r\nfrom flask import Flask, Blueprint\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\nfrom flask_middlewares import Middleware, ProxyMiddlewareAppRegistrar\r\nfrom flask_middlewares.standard.error_handling import CustomHandlerErrorMiddleware, CustomJSONResponseErrorFormatter\r\nfrom flask_middlewares.standard.status_code import StatusCodeRedirectorMiddleware\r\nfrom flask_middlewares.standard.sql_alchemy import SQLAlchemySessionFinisherMiddleware\r\n\r\n\r\nclass StringMultiplierMiddleware(Middleware):\r\n    \"\"\"Custom middleware that multiplies strings.\"\"\"\r\n\r\n    def __init__(self, number_of_multiplies: int):\r\n        self.number_of_multiplies = number_of_multiplies\r\n\r\n    def call_route(self, route: Callable, *args, **kwargs) -> any:\r\n        result = route(*args, **kwargs)\r\n        return result * self.number_of_multiplies if isinstance(result, str) else result\r\n\r\n\r\nclass DomainError(Exception):\r\n    \"\"\"Error class dwelling in the depths of your domain.\"\"\"\r\n\r\n\r\napp = Flask(__name__)\r\napi_blueprint = Blueprint('api', __name__)\r\n\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db' # SQLAlchemy settings\r\n\r\ndb = SQLAlchemy()\r\ndb.init_app(app)\r\n\r\n# Config for creating a middleware registrar for your application\r\napp.config['GLOBAL_MIDDLEWARES'] = [CustomHandlerErrorMiddleware(CustomJSONResponseErrorFormatter((DomainError, ), 409, is_format_type=False))] # Middlewares for all views (See MiddlewareAppRegistrar.create_from_config documentation for exceptions)\r\napp.config['MIDDLEWARE_ENVIRONMENTS'] = {\r\n    'api': {\r\n        'USE_FOR_BLUEPRINT': True, # Will be applied to the views that the blueprint has with the name \"api\"\r\n        'MIDDLEWARES': (\r\n            SQLAlchemySessionFinisherMiddleware(db),\r\n            StringMultiplierMiddleware(1024)\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@app.route('/')\r\n@StatusCodeRedirectorMiddleware('true_index').decorate  # Using middleware bypassing the registrar\r\ndef index():\r\n    return \"Get out of here\", 302 # Middleware will automatically redirect to true_index endpoint\r\n\r\n\r\n@app.route('/home')\r\ndef true_index():\r\n    return \"This is true home page of the site!\"\r\n\r\n\r\n@app.route('/error-page')\r\ndef sick_endpoint():\r\n    # The global middleware will handle the error and return a JSON response with its the status code specified in it and the message field of this error\r\n    raise DomainError(\"Something went wrong\")\r\n\r\n\r\n@api_blueprint.route('/users')\r\ndef user_api_endpoint():\r\n    return \"User \" # Due to the api config middleware, the result will be \"User \" * 1024\r\n\r\n\r\napp.register_blueprint(api_blueprint, url_prefix='/api')\r\n\r\nProxyMiddlewareAppRegistrar.create_from_config(app.config).init_app(app)\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, port='8048')\r\n```\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/TheArtur128/Flask-middlewares/archive/refs/tags/v1.0.0.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/TheArtur128/Flask-middlewares",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Flask-Middlewares",
            "package_url": "https://pypi.org/project/Flask-Middlewares/",
            "platform": null,
            "project_url": "https://pypi.org/project/Flask-Middlewares/",
            "project_urls": {
                "Download": "https://github.com/TheArtur128/Flask-middlewares/archive/refs/tags/v1.0.0.zip",
                "Homepage": "https://github.com/TheArtur128/Flask-middlewares"
            },
            "release_url": "https://pypi.org/project/Flask-Middlewares/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.11",
            "summary": "Middlware library for your Flask application",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16036132,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "74ee3526f6dd8e37df45c5cd142cd407",
                    "sha256": "087507193b771f4be13cc0f7e96499907ef66a7333926a2fe6c5e9f1f4af297f"
                },
                "downloads": -1,
                "filename": "Flask-Middlewares-1.0.0.zip",
                "has_sig": false,
                "md5_digest": "74ee3526f6dd8e37df45c5cd142cd407",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.11",
                "size": 29226,
                "upload_time": "2022-12-08T14:45:14",
                "upload_time_iso_8601": "2022-12-08T14:45:14.000808Z",
                "url": "https://files.pythonhosted.org/packages/87/5b/8cfbbf8cbec29a9459e855fc3391704511d100efe555574da2586176819b/Flask-Middlewares-1.0.0.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}