{
    "0.1": {
        "info": {
            "author": "Taha Zerrouki",
            "author_email": "taha. zerrouki@gmail .com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "Natural Language :: Arabic",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/linuxscout/alyahmor/",
            "keywords": "",
            "license": "GPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "alyahmor",
            "package_url": "https://pypi.org/project/alyahmor/",
            "platform": "",
            "project_url": "https://pypi.org/project/alyahmor/",
            "project_urls": {
                "Homepage": "http://github.com/linuxscout/alyahmor/"
            },
            "release_url": "https://pypi.org/project/alyahmor/0.1/",
            "requires_dist": [
                "libqutrub (>=1.0)",
                "pyarabic (>=0.6.2)"
            ],
            "requires_python": "",
            "summary": "Alyahmor Arabic Morphological Genrator for Python",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13437860,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ec1b45153f0e41d2022aa0ed740419a5",
                    "sha256": "c3d4bccef2e2f3ce278f6a593722c4c19f3c988578d95e23a0f2b7fc674931d2"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1-py2-none-any.whl",
                "has_sig": false,
                "md5_digest": "ec1b45153f0e41d2022aa0ed740419a5",
                "packagetype": "bdist_wheel",
                "python_version": "py2",
                "requires_python": null,
                "size": 37796,
                "upload_time": "2020-04-02T17:37:26",
                "upload_time_iso_8601": "2020-04-02T17:37:26.985808Z",
                "url": "https://files.pythonhosted.org/packages/7e/30/8c30a74b353745da44110a471d3ee80ea491a0850eb52f6831c8d1a93f8f/alyahmor-0.1-py2-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a5ec3616096d9c12170f44a8a0e79161",
                    "sha256": "b88bd82e0119d2d1e791c9319ca10a53539db344748d7420c2a2d052450c0faf"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a5ec3616096d9c12170f44a8a0e79161",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 41180,
                "upload_time": "2020-04-02T17:37:37",
                "upload_time_iso_8601": "2020-04-02T17:37:37.576738Z",
                "url": "https://files.pythonhosted.org/packages/42/47/e8e683e09203604ac6afd85cb1ed4ec7ef2c59fd42aa6cd4c2c5b8bfc44f/alyahmor-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4361149998ba7ed6ab8455a39930927f",
                    "sha256": "a63d7d5934d2925becff3a71ddc918bf5a19beb175b11475b2ce80541d665f59"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "4361149998ba7ed6ab8455a39930927f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 36442,
                "upload_time": "2020-04-02T17:37:56",
                "upload_time_iso_8601": "2020-04-02T17:37:56.116138Z",
                "url": "https://files.pythonhosted.org/packages/2c/7d/fb5608dd69344d345987cb6d320979604d2c60ece6c65880ce88e063ec47/alyahmor-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Taha Zerrouki",
            "author_email": "taha. zerrouki@gmail .com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "Natural Language :: Arabic",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/linuxscout/alyahmor/",
            "keywords": "",
            "license": "GPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "alyahmor",
            "package_url": "https://pypi.org/project/alyahmor/",
            "platform": "",
            "project_url": "https://pypi.org/project/alyahmor/",
            "project_urls": {
                "Homepage": "http://github.com/linuxscout/alyahmor/"
            },
            "release_url": "https://pypi.org/project/alyahmor/0.1.1/",
            "requires_dist": [
                "libqutrub (>=1.0)",
                "pyarabic (>=0.6.2)"
            ],
            "requires_python": "",
            "summary": "Alyahmor Arabic Morphological Genrator for Python",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13437860,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "81e7ec5c5cf552a8bb8e016d4cfdbec0",
                    "sha256": "91a1b938cbc21819790e307a82eabeaa58f0cf278d0de62ecffdc09dad863528"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "81e7ec5c5cf552a8bb8e016d4cfdbec0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 41266,
                "upload_time": "2020-08-31T03:30:57",
                "upload_time_iso_8601": "2020-08-31T03:30:57.088832Z",
                "url": "https://files.pythonhosted.org/packages/54/a0/9ce7f24f20c03e8ed1fef0a738faa5abbc0fa259c7599b96856283240e7a/alyahmor-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b0d4df081bfd64ed29e0d17ca768434",
                    "sha256": "72f8562b9d407d32c45792f5c027a64e8eb74dbc202e3986f721f5ae19d4268b"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "9b0d4df081bfd64ed29e0d17ca768434",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 36512,
                "upload_time": "2020-08-31T04:00:37",
                "upload_time_iso_8601": "2020-08-31T04:00:37.245949Z",
                "url": "https://files.pythonhosted.org/packages/ec/6f/154e900daeb11fac2229aae9d9eb81d6bf88929b7920741b8bcbe4f9d5ea/alyahmor-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Taha Zerrouki",
            "author_email": "taha. zerrouki@gmail .com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "Natural Language :: Arabic",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/linuxscout/alyahmor/",
            "keywords": "",
            "license": "GPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "alyahmor",
            "package_url": "https://pypi.org/project/alyahmor/",
            "platform": "",
            "project_url": "https://pypi.org/project/alyahmor/",
            "project_urls": {
                "Homepage": "http://github.com/linuxscout/alyahmor/"
            },
            "release_url": "https://pypi.org/project/alyahmor/0.1.2/",
            "requires_dist": [
                "libqutrub (>=1.0)",
                "pyarabic (>=0.6.2)"
            ],
            "requires_python": "",
            "summary": "Alyahmor Arabic Morphological Genrator for Python",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13437860,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "827068c8b548cad27d3ae55b8a8fb1c1",
                    "sha256": "1ef92628dfc7a383f713b950977f5d0c5846fe1b3b9fa3dd4702fdafd0f94136"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "827068c8b548cad27d3ae55b8a8fb1c1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 50909,
                "upload_time": "2021-02-13T20:00:48",
                "upload_time_iso_8601": "2021-02-13T20:00:48.198594Z",
                "url": "https://files.pythonhosted.org/packages/ff/53/1d87515f7fb292818ea4c1d6c31e57bdd4c02459315d84fe9cf396e9322d/alyahmor-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "Taha Zerrouki",
            "author_email": "taha. zerrouki@gmail .com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "Natural Language :: Arabic",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/linuxscout/alyahmor/",
            "keywords": "",
            "license": "GPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "alyahmor",
            "package_url": "https://pypi.org/project/alyahmor/",
            "platform": null,
            "project_url": "https://pypi.org/project/alyahmor/",
            "project_urls": {
                "Homepage": "http://github.com/linuxscout/alyahmor/"
            },
            "release_url": "https://pypi.org/project/alyahmor/0.1.4/",
            "requires_dist": [
                "arramooz-pysqlite (>=0.1)",
                "libqutrub (>=1.0)",
                "pyarabic (>=0.6.2)"
            ],
            "requires_python": "",
            "summary": "Alyahmor Arabic Morphological Genrator for Python",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13437860,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7bad6f2193d1081072bd7d350df9fc84",
                    "sha256": "40f650cc7a5074fa3c7951b0b0b1789fdedaaa66a1bff4ea3fa2a9671d4129b3"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7bad6f2193d1081072bd7d350df9fc84",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 51677,
                "upload_time": "2022-04-06T18:11:48",
                "upload_time_iso_8601": "2022-04-06T18:11:48.808296Z",
                "url": "https://files.pythonhosted.org/packages/ed/83/32e1071b3ba6c9f73fdd81c1ed83748bec16dd9178b584dc0289ec16c224/alyahmor-0.1.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.5": {
        "info": {
            "author": "Taha Zerrouki",
            "author_email": "taha. zerrouki@gmail .com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "Natural Language :: Arabic",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description": "Alyahmor \u0627\u0644\u064a\u062d\u0645\u0648\u0631\n================\n\nArabic flexionnal morphology generator\n\nDescription\n-----------\n\nThe Alyahmor produce a word form from (prefix, lemma, suffix). It has\nmany functionalities: - Generate word forms from given word and affixes\n- Generate all word forms by adding verbal or nominal affixes according\nto word type - Generate all affixes combination for verbs or nouns which\ncan be used in morphology analysis.\n\nDeveloppers:\n~~~~~~~~~~~~\n\nTaha Zerrouki: http://tahadz.com taha dot zerrouki at gmail dot com\n\nFeatures \\| value\n---------\\|---------------------------------------------------------------------------------\nAuthors \\|\n`Authors.md <https://github.com/linuxscout/alyahmor/master/AUTHORS.md>`__\nRelease \\| 0.1 License\n\\|\\ `GPL <https://github.com/linuxscout/alyahmor/master/LICENSE>`__\nTracker\n\\|\\ `linuxscout/alyahmor/Issues <https://github.com/linuxscout/alyahmor/issues>`__\nAccounts \\|[@Twitter](https://twitter.com/linuxscout)\n\nCitation\n--------\n\nIf you would cite it in academic work, can you use this citation\n\n::\n\n    T. Zerrouki\u200f, Alyahmor, Arabic mophological  generator Library for python.,  https://pypi.python.org/pypi/alyahmor/, 2019\n\nor in bibtex format\n\n.. code:: bibtex\n\n    @misc{zerrouki2019alyahmor,\n      title={alyahmor, Arabic mophological generator Library for python.},\n      author={Zerrouki, Taha},\n      url={https://pypi.python.org/pypi/alyahmor},\n      year={2019}\n    }\n\nApplications\n------------\n\n-  Text Stemming\n-  Morphology analysis\n-  Text Classification and categorization\n-  Spellchecking\n\nFeatures \u0645\u0632\u0627\u064a\u0627\n--------------\n\n-  Arabic word Light Stemming.\n-  Features:\n\n   -  Generate word forms from given word and affixes\n   -  Generate all word forms by adding verbal or nominal affixes\n      according to word type\n   -  Generate all affixes combination for verbs or nouns which can be\n      used in morphology analysis.\n\nInstallation\n------------\n\n::\n\n    pip install alyahmor\n\nRequirements\n~~~~~~~~~~~~\n\n::\n\n    pip install -r requirements.txt \n\n-  libQutrub: Qutrub verb conjugation library:\n   http://pypi.pyton/LibQutrub\n-  PyArabic: Arabic language tools library : http://pypi.pyton/pyarabic\n-  Arramooz-pysqlite : Arabic dictionary\n\n\u0623\u0635\u0644 \u0627\u0644\u062a\u0633\u0645\u064a\u0629\n-----------\n\n**\u0627\u0644\u064a\u064e\u062d\u0652\u0645\u064f\u0648\u0631\u060c** \u0648\u0647\u0648 \u0627\u0644\u062d\u0633\u0646 \u0628\u0646 \u0627\u0644\u0645\u0639\u0627\u0644\u064a \u0627\u0644\u0628\u0627\u0642\u0644\u0627\u0646\u064a \u0623\u0628\u0648 \u0639\u0644\u064a \u0627\u0644\u0646\u062d\u0648\u064a \u0627\u0644\u062d\u0644\u064a \u0634\u064a\u062e\n\u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0641\u064a \u0632\u0645\u0627\u0646\u0647 \u0641\u064a \u0628\u063a\u062f\u0627\u062f \u0645\u0646 \u062a\u0644\u0627\u0645\u0630\u0629 \u0623\u0628\u064a \u0627\u0644\u0628\u0642\u0627\u0621 \u0627\u0644\u0639\u0643\u0628\u0631\u064a \u062a \u0666\u0663\u0667\u0647\u0640\n\n\u0648\u0643\u062a\u0628 \u0628\u062e\u0637\u0647 \u0643\u062b\u064a\u0631\u0627\u064b \u0645\u0646 \u0627\u0644\u0623\u062f\u0628 \u0648\u0627\u0644\u0644\u063a\u0629 \u0648\u0633\u0627\u0626\u0631 \u0627\u0644\u0641\u0646\u0648\u0646\u060c \u0648\u0643\u0627\u0646 \u0644\u0647 \u0647\u0645\u0629\u064c \u0639\u0627\u0644\u064a\u0629\u060c \u0648\u062d\u0631\u0635\u064c\n\u0634\u062f\u064a\u062f\u061b \u0648\u062a\u062d\u0635\u064a\u0644 \u0627\u0644\u0641\u0648\u0627\u0626\u062f \u0645\u0639 \u0639\u0644\u0648 \u0633\u0646\u0647\u060c \u0648\u0636\u0639\u0641 \u0628\u0635\u0631\u0647\u060c \u0648\u0643\u062b\u0631\u0629 \u0645\u062d\u0641\u0648\u0638\u0647\u060c \u0648\u0635\u062f\u0642\u0647\u060c \u0648\u062b\u0642\u062a\u0647\u060c\n\u0648\u062a\u0648\u0627\u0636\u0639\u0647\u060c \u0648\u0643\u0631\u0645 \u0623\u062e\u0644\u0627\u0642\u0647.\n\n\u0648\u0627\u0646\u062a\u0642\u0644 \u0622\u062e\u0631 \u0639\u0645\u0631\u0647 \u0625\u0644\u0649 \u0645\u0630\u0647\u0628 \u0627\u0644\u0634\u0627\u0641\u0639\u064a\u060c **\u0648\u0627\u0646\u062a\u0647\u062a \u0625\u0644\u064a\u0647 \u0631\u064a\u0627\u0633\u0629 \u0627\u0644\u0646\u062d\u0648.** \u0645\u0648\u0644\u062f\u0647 \u0633\u0646\u0629\n\u062b\u0645\u0627\u0646 \u0648\u0633\u062a\u064a\u0646 \u0648\u062e\u0645\u0633\u0645\u0627\u0626\u0629\u060c \u0648\u062a\u0648\u0641\u064a \u0633\u0646\u0629 \u0633\u0628\u0639 \u0648\u062b\u0644\u0627\u062b\u064a\u0646 \u0648\u0633\u062a\u0645\u0627\u0626\u0629. `\u0627\u0644\u0645\u0632\u064a\u062f \u0639\u0646\n\u0627\u0644\u064a\u062d\u0645\u0648\u0631 <doc/alyahmor.md>`__\n\nUsage\n=====\n\nExample\n-------\n\nGenerate words forms\n~~~~~~~~~~~~~~~~~~~~\n\nIt joins word with affixes with suitable correction for example\n\n\u0628\u0627\u0644+\u0643\u062a\u0627\u0628 +\u064a\u0646 => \u0628\u0627\u0644\u0643\u062a\u0627\u0628\u064a\u0646 \u0628+\u0623\u0628\u0646\u0627\u0621+\u0647 => \u0628\u0623\u0628\u0646\u0627\u0626\u0647\n\nNouns\n^^^^^\n\nTo generate all forms of the word \u0643\u062a\u0627\u0628 as noun use\n\n.. code:: python\n\n    >>> import alyahmor.genelex\n    >>> generator = alyahmor.genelex.genelex()\n    >>> word = u\"\u0643\u0650\u062a\u0650\u0627\u0628\"\n    >>> noun_forms = generator.generate_forms( word, word_type=\"noun\")\n    >>>noun_forms\n    [u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u0627', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u0627\u062a', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u0627\u0646', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u0629', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u062a\u0627\u0646', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u062a\u064a\u0646', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u0648\u0646', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u064a', u'\u0622\u0644\u0652\u0643\u0650\u062a\u064e\u0627\u0628\u064a\u0627\u062a'\n    ....]\n\nVerbs\n^^^^^\n\nTo generate all forms of the word \u0643\u062a\u0627\u0628 as verb, use\n\n.. code:: python\n\n    >>> import alyahmor.genelex\n    >>> generator = alyahmor.genelex.genelex()\n    >>> word = u\"\u0627\u0633\u062a\u0639\u0645\u0644\"\n    >>> verb_forms = generator.generate_forms( word, word_type=\"verb\")\n    >>>verb_forms\n    [u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0643\u064e', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0643\u064f\u0645\u064e\u0627', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0643\u064f\u0645\u0652', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0643\u064f\u0646\u0651\u064e', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0646\u064e\u0627', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0646\u0650\u064a', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0646\u0651\u064e', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0646\u0651\u064e\u0643\u064e', u'\u0623\u064e\u0623\u064e\u0633\u0652\u062a\u064e\u0639\u0652\u0645\u0650\u0644\u064e\u0646\u0651\u064e\u0643\u064f\u0645\u064e\u0627', \n\n    ....]\n\nGenerate non vocalized forms\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo generate all forms of the word \u0643\u062a\u0627\u0628 as noun without vocalization use\n\n.. code:: python\n\n    >>> import alyahmor.genelex\n    >>> generator = alyahmor.genelex.genelex()\n    >>> word = u\"\u0643\u0650\u062a\u0650\u0627\u0628\"\n    >>> noun_forms = generator.generate_forms( word, word_type=\"noun\", vocalized=False)\n    >>>noun_forms\n    [u'\u0622\u0644\u0643\u062a\u0627\u0628', u'\u0622\u0644\u0643\u062a\u0627\u0628\u0627', u'\u0622\u0644\u0643\u062a\u0627\u0628\u0627\u062a', u'\u0622\u0644\u0643\u062a\u0627\u0628\u0627\u0646', u'\u0622\u0644\u0643\u062a\u0627\u0628\u0629', u'\u0622\u0644\u0643\u062a\u0627\u0628\u062a\u0627\u0646', u'\u0622\u0644\u0643\u062a\u0627\u0628\u062a\u064a\u0646', u'\u0622\u0644\u0643\u062a\u0627\u0628\u0648\u0646', u'\u0622\u0644\u0643\u062a\u0627\u0628\u064a', u'\u0622\u0644\u0643\u062a\u0627\u0628\u064a\u0627\u062a',\n    ....]\n\nGenerate a dictionary of vocalized forms indexed by unvocalized form\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo generate all forms of the word \u0643\u062a\u0627\u0628 as noun as a dict of grouped all\nvocalized forms by unvocalized form use\n\n.. code:: python\n\n    >>> import alyahmor.genelex\n    >>> generator = alyahmor.genelex.genelex()\n    >>> word = u\"\u0643\u0650\u062a\u0650\u0627\u0628\"\n    >>> noun_forms = generator.generate_forms( word, word_type=\"noun\", indexed=True)\n    >>>noun_forms\n    {u'\u0623\u0643\u0643\u062a\u0627\u0628\u0629': [u'\u0623\u0643\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0629\u0650', u'\u0623\u0643\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0629\u064d'],\n     u'\u0623\u0648\u0643\u0643\u062a\u0627\u0628\u0629': [u'\u0623\u064e\u0648\u064e\u0643\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0629\u0650', u'\u0623\u064e\u0648\u064e\u0643\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0629\u064d'],\n     u'\u0648\u0643\u062a\u0627\u0628\u064a\u0627\u062a\u0647\u0645': [u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0647\u0650\u0645\u0652', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u064f\u0647\u064f\u0645\u0652', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u0650\u0647\u0650\u0645\u0652', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u064f\u0647\u0650\u0645\u0652', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0647\u064f\u0645\u0652'],\n     u'\u0648\u0643\u062a\u0627\u0628\u064a\u0627\u062a\u0647\u0646': [u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0647\u0650\u0646\u0651\u064e', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0647\u064f\u0646\u0651\u064e', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u0650\u0647\u0650\u0646\u0651\u064e', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u064f\u0647\u0650\u0646\u0651\u064e', u'\u0648\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u064f\u0647\u064f\u0646\u0651\u064e'],\n     u'\u0648\u0644\u0644\u0643\u062a\u0627\u0628\u0627\u062a': [u'\u0648\u064e\u0644\u0650\u0644\u0652\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0627\u062a\u0650', u'\u0648\u064e\u0644\u0650\u0644\u0652\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0627\u062a'],\n     u'\u0623\u0628\u0643\u062a\u0627\u0628\u062a\u0643\u0646': [u'\u0623\u064e\u0628\u0650\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u062a\u0650\u0643\u064f\u0646\u0651\u064e'],\n     u'\u0623\u0628\u0643\u062a\u0627\u0628\u062a\u0643\u0645': [u'\u0623\u064e\u0628\u0650\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u062a\u0650\u0643\u064f\u0645\u0652'],\n     u'\u0623\u0643\u062a\u0627\u0628\u064a\u0627\u062a\u0647\u0646': [u'\u0623\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0647\u0650\u0646\u0651\u064e', u'\u0623\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u0650\u0647\u0650\u0646\u0651\u064e', u'\u0623\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0647\u064f\u0646\u0651\u064e', u'\u0623\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u064f\u0647\u064f\u0646\u0651\u064e', u'\u0623\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u064f\u0647\u0650\u0646\u0651\u064e'],\n     u'\u0641\u0643\u062a\u0627\u0628\u0627\u062a\u0647\u0645': [u'\u0641\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0627\u062a\u0647\u0650\u0645\u0652', u'\u0641\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0627\u062a\u064f\u0647\u064f\u0645\u0652', u'\u0641\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0627\u062a\u064f\u0647\u0650\u0645\u0652', u'\u0641\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0627\u062a\u0647\u064f\u0645\u0652', u'\u0641\u064e\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064e\u0627\u062a\u0650\u0647\u0650\u0645\u0652'],\n     u'\u0628\u0643\u062a\u0627\u0628\u064a\u0627\u062a\u0643\u0646': [u'\u0628\u0650\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u0650\u064a\u064e\u0627\u062a\u0650\u0643\u064f\u0646\u0651\u064e', u'\u0628\u0650\u0643\u0650\u062a\u0650\u064e\u0627\u0628\u064a\u0627\u062a\u0643\u064f\u0646\u0651\u064e'],\n    ....\n    }\n\nGenerate affixes lists\n~~~~~~~~~~~~~~~~~~~~~~\n\nAlyahmor generate affixes listes for verbs and nouns\n\n.. code:: python\n\n    >>> verb_affix =generator.generate_affix_list(word_type=\"verb\", vocalized=True)\n    >>>verb_affix\n    [u'\u0623\u064e\u0641\u064e\u0633\u064e\u062a-\u064a\u0646\u0646\u0650\u064a', u'\u0623\u064e-\u0648\u0646\u064e\u0627', u'\u064a-\u0648\u0646\u0643\u064e', u'\u0641\u064e\u0644\u064e-\u062a\u0627\u0643\u064e', u'\u0648\u064e\u0644\u064e\u064e\u0646-\u0647\u064f\u0646\u0651\u064e', u'\u0623\u064e\u062a-\u0648\u0646\u0646\u064e\u0627', u'\u0648\u064e-\u0627\u0643\u064f\u0646\u0651\u064e', u'\u0646-\u0646\u0646\u064e\u0627', u'\u0648\u064e\u062a-\u0648\u0647\u064e\u0627', u'\u0623\u064e\u064a-\u0646\u0647\u064f\u0645\u064e\u0627', ....]\n\n    >>> noun_affix =generator.generate_affix_list(word_type=\"noun\", vocalized=True)\n    >>> noun_affix\n    [u'\u0623\u0643\u064e-\u064a\u0627\u062a\u0643\u064e', u'\u0641\u064e-\u0650\u064a\u064e\u0627\u062a\u0650\u0643\u064f\u0645\u064e\u0627', u'\u0623\u0643\u064e-\u064a\u0627\u062a\u0643\u0650', u'\u0623\u064e\u0648\u064e\u0643\u064e-\u0650\u064a\u0646\u064e\u0627', u'\u0623\u064e\u0644\u0650-\u0650\u064a\u0651\u0650\u0647\u0650\u0646\u0651\u064e', u'\u0623\u064e\u0641\u064e-\u064e\u0643\u064f\u0645\u064e\u0627', u'\u0623\u064e\u0641\u064e-\u0650\u064a\u0651\u064e\u062a\u0650\u0647\u0650\u0645\u0652', u'\u0623\u064e\u0641\u064e\u0643\u064e-\u064a\u0627\u062a\u0647\u064f\u0645\u0652', u'\u0641\u064e\u0628\u0650-\u0650\u064a\u0651\u0650\u0643\u064f\u0645\u0652', u'\u0648\u064e\u0644\u0650-\u0650\u064a\u0651\u064e\u062a\u0650\u0647\u064e\u0627', ....]\n\nGenerate Unvocalized affixes\n\n.. code:: python\n\n    >>> noun_affix =generator.generate_affix_list(word_type=\"noun\", vocalized=False)\n    >>> noun_affix\n    [u'-', u'-\u0627', u'-\u0627\u062a', u'-\u0627\u062a\u0643', u'-\u0627\u062a\u0643\u0645', u'-\u0627\u062a\u0643\u0645\u0627', u'-\u0627\u062a\u0643\u0646', u'-\u0627\u062a\u0646\u0627', u'-\u0627\u062a\u0647', u'-\u0627\u062a\u0647\u0627', ...]\n\nFiles\n~~~~~\n\n-  file/directory category description\n\ntests/samples/dataset.csv A list of verified affixes\n\nFeatured Posts\n--------------\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/linuxscout/alyahmor/",
            "keywords": "",
            "license": "GPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "alyahmor",
            "package_url": "https://pypi.org/project/alyahmor/",
            "platform": null,
            "project_url": "https://pypi.org/project/alyahmor/",
            "project_urls": {
                "Homepage": "http://github.com/linuxscout/alyahmor/"
            },
            "release_url": "https://pypi.org/project/alyahmor/0.1.5/",
            "requires_dist": [
                "arramooz-pysqlite (>=0.1)",
                "libqutrub (>=1.0)",
                "pyarabic (>=0.6.2)"
            ],
            "requires_python": "",
            "summary": "Alyahmor Arabic Morphological Genrator for Python",
            "version": "0.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13437860,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b2ccc1a77569b2603673b376128f1341",
                    "sha256": "d4c2083415a6af3fcd542418479456ba688272797c7b4bed764b780e372b46aa"
                },
                "downloads": -1,
                "filename": "alyahmor-0.1.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b2ccc1a77569b2603673b376128f1341",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 51724,
                "upload_time": "2022-04-07T08:31:55",
                "upload_time_iso_8601": "2022-04-07T08:31:55.971831Z",
                "url": "https://files.pythonhosted.org/packages/fd/22/8cdb4d57b14217aa8dc08aee76b433e23c34b4a388347b119452892d9990/alyahmor-0.1.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}