{
    "0.0.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "mpv",
            "license": "GNU General Public License v3 (GPLv3)",
            "maintainer": "",
            "maintainer_email": "",
            "name": "vmt",
            "package_url": "https://pypi.org/project/vmt/",
            "platform": null,
            "project_url": "https://pypi.org/project/vmt/",
            "project_urls": {
                "repository": "https://codeberg.org/johndovern/vmt"
            },
            "release_url": "https://pypi.org/project/vmt/0.0.0/",
            "requires_dist": [
                "python-magic",
                "loadconf",
                "promptx"
            ],
            "requires_python": "",
            "summary": "Video Media Tracker. Local, and simple method for watching and tracking a video media library.",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15348396,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3cc729cba83a24fb4d5ffdf8cb24994b",
                    "sha256": "80772e4e95562cdb3420c0a7f9828222079d83314c45cd364f879b541cf0289d"
                },
                "downloads": -1,
                "filename": "vmt-0.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3cc729cba83a24fb4d5ffdf8cb24994b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 33215,
                "upload_time": "2022-09-22T00:10:15",
                "upload_time_iso_8601": "2022-09-22T00:10:15.212039Z",
                "url": "https://files.pythonhosted.org/packages/76/0f/8296c6d15f137205d7e5ef43df6886b4f665c72c6f0717363c1295cf14f1/vmt-0.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b41e78cfb13d32623d690d47c8d435f9",
                    "sha256": "68b28e495055878550867274ab1edc89f17860d665f9152a2aa81e155102302a"
                },
                "downloads": -1,
                "filename": "vmt-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "b41e78cfb13d32623d690d47c8d435f9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 29426,
                "upload_time": "2022-09-22T00:10:16",
                "upload_time_iso_8601": "2022-09-22T00:10:16.418898Z",
                "url": "https://files.pythonhosted.org/packages/3f/e2/a3ed90e60450f8338504bd0bdee2119ec3f41da4d3c56db3d14d0ce08ffa/vmt-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.0b1": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "mpv",
            "license": "GNU General Public License v3 (GPLv3)",
            "maintainer": "",
            "maintainer_email": "",
            "name": "vmt",
            "package_url": "https://pypi.org/project/vmt/",
            "platform": null,
            "project_url": "https://pypi.org/project/vmt/",
            "project_urls": {
                "repository": "https://codeberg.org/johndovern/vmt"
            },
            "release_url": "https://pypi.org/project/vmt/0.0.0b1/",
            "requires_dist": [
                "python-magic",
                "loadconf",
                "promptx"
            ],
            "requires_python": "",
            "summary": "Video Media Tracker. Local, and simple method for watching and tracking a video media library.",
            "version": "0.0.0b1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15348396,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2a65e02c446b367e66d0e060ebb494af",
                    "sha256": "0fa9178fa7969121fae462a94556278b4791434ff319574b89352e4727d25f14"
                },
                "downloads": -1,
                "filename": "vmt-0.0.0b1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2a65e02c446b367e66d0e060ebb494af",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 27184,
                "upload_time": "2022-09-22T02:52:07",
                "upload_time_iso_8601": "2022-09-22T02:52:07.364202Z",
                "url": "https://files.pythonhosted.org/packages/e0/e0/f3941db47958d4444930faed4f172b2993ebcfce220a38483b5f564f1e81/vmt-0.0.0b1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d289f5b2c6e009d0fa0ab877da0d6ce2",
                    "sha256": "5440701c40408e2a64c01b56b1e2972e39a9821af4bfcd9d066c05431f1b4e39"
                },
                "downloads": -1,
                "filename": "vmt-0.0.0b1.tar.gz",
                "has_sig": false,
                "md5_digest": "d289f5b2c6e009d0fa0ab877da0d6ce2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24322,
                "upload_time": "2022-09-22T02:52:08",
                "upload_time_iso_8601": "2022-09-22T02:52:08.749367Z",
                "url": "https://files.pythonhosted.org/packages/9b/32/45d70ab2751eab57534c5f3f7830046c0158380634bdc9e79877b08c7ea9/vmt-0.0.0b1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.0b2": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# vmt\nTrack, play, and browse your locally accessible media.\n\n<!-- ## Video demonstration & tl;dr -->\n<!-- Don't like to read? Checkout  -->\n<!-- [this](https://vid.puffyan.us/watch?v=NeF56_JBagM) video where I go over -->\n<!-- installation, configuration, and use of vmt. -->\n\n## Why use vmt?\nGood question.\n\nYou've got plenty of ways to watch and track your media. Popular options are\njellyfin or plex. These are great both applications, but for me they are totally\noverkill.\n\nMy needs:\n\n  - [X] 100% offline functionality\n  - [X] 100% local tracking\n  - [X] Simple directory structure\n  - [X] Tracks last watched episodes\n  - [X] Tracks last watched shows\n  - [X] Full mpv support\n\nI made vmt to tick all of these boxes and it does just that in a simple way.\n\n## Only for local files?\nNot necessarily. You can mount a remote filesystem using NFS, sshfs, or SMB.\nI'm sure there are tons of other ways to mount remote file systems so that they\nare available on your local machine.\n\nThe only requirement is that you can cd into the directory that has the files\nyou want to add to your library. If you can do that you can use vmt to track and\nwatch these videos.\n\n## 100% local? 100% offline?\nYep. But it doesn't have to be.\n\nFeel free to setup `~/.config/vmt` as a syncthing share and keep your library\nand progress synced across your laptop(s) and desktop(s), maybe even your phone\nvia termux (untested but maybe).\n\n## Installation\nCan install the usual way:\n\n```bash\npip install vmt\n```\n\nThen run `vmt --build` and get taken through the setup process via a TUI interface.\n\n### Dependencies\n- dmenu, fzf, or rofi\n- mpv\n\n## Using vmt\nNow that you've built your library you can start watching and tracking your anime.\n\nAs you've just built your library you don't have a log yet. Because of that you\nare going to want to run this command, either through dmenu, a terminal, or via\nsome hot-key:\n\n```bash\nvmt -w\n```\n\nYou will get prompted with a list of all the titles in your library. Select one\nof the show titles and you will get another prompt displaying all the episodes\nfound for that show. Select an episode and watch some anime.\n\nPlease see [this](https://github.com/johndovern/vmt#Note-on-use-with-hot-keys)\nsection for more info on starting vmt via a hot-key or dmenu.\n\n### Watching your last watched shows\nAt this point vmt is tracking the shows you watch in your library and history log. You can now run following command through dmenu, a terminal, or via a hot-key:\n\n```bash\nvmt -l\n```\n\nWith this you will see a dmenu or fzf prompt showing you the titles of your last\nwatched shows. These shows are getting tracked which means once you select one mpv\nwill open and start playing your last watched episode.\n\nIt is advisable that you close mpv on the episode you wish to resume. You can\nalso use `Q` instead of `q` to save and quit (an mpv native feature which has\nnothing to do with vmt). Then you'll start off exactly where you left off.\n\n## vmt.lua\nThe secret sauce of vmt is the vmt.lua script. This script can work in two ways:\n\n  1. Enable it by default via `script-opts/vmt.conf` by setting\n\n      `enabled=yes`\n\n  2. Enable it when you run mpv like so\n\n      `mpv --script-opts=vmt-enabled=yes /path/to/file`\n\nThe full path to `script-opts/vmt.conf` is `~/.config/mpv/script-opts/vmt.conf`.\n\nIf you leave this file alone you must launch mpv with \n`mpv --script-opts=vmt-enabled=yes /path/to/file` to enable vmt.lua.\n\nThis is too long to type out. Instead you can use vmt as an mpv wrapper by\nrunning `vmt -o /path/to/file` which will enable vmt.lua. Both `vmt -w` and `-l`\nlaunch mpv in this way.\n\n### How vmt.lua works\nWhen enabled vmt.lua will get the currently playing file's path and set it to\nthe variable `trackPath`. After that it will run `vmt -s \"$trackPath\"`. The `-s,\n--search` flag takes a file path and searches the shows in your library for the\ngiven file. If the file gets found it will exit successfully. If it isn't found\nvmt will exit with an error code.\n\nIf the search was successful vmt.lua will then run `vmt -t \"$trackPath\"`. The\n`-t, --track` flag takes a file path. It repeats the same search as `-s` just to\nbe safe. If the search is successful your library and history log will be\nupdated appropriately.\n\n## Updating your library\nTo update your library just run `vmt -u`. This will backup your current library\nin case you don't like how the update went. You can use the `-c, --clean` flag\nif you don't want to keep a backup.\n\nWhen you update your library vmt will do it's best to detect any shows that\nalready exist in your library and still exist in your `base_dir`. If a show has\nnot changed locations then any episode progress will get carried over to the\nupdated library along with any title you may have set for the show.\n\nIf the shows directory has changed it will get treated as a new show and your\nshow progress will get lost. I do not have any simple way around this and I do\nnot consider this an issue.\n\nAny new shows will get added with an automatically generated title.\n\n### Updating interactively\nIf you wish to set the title yourself use the `-i, --interactive` flag. You should also use the `-d` flag and be sure to run vmt in a terminal.\n\nRunning `vmt -d -i -u` will give you a prompt asking you to set a title for the given show. It will also display either the previous title or an automatically generated title if the show is new. If you are using dmenu you can press ESC to accept the previous or automatic title. If you are using fzf this will be a read prompt in which case enter nothing to accept the previous or automatic title.\n\n## Wrapping up\n### Valid extensions\nI mentioned earlier that only directories with valid file extensions are considered shows and added to your library. So what is a valid file extension? Well, here is a list of all file extensions that vmt considers valid:\n\n  - mkv\n  - mp4\n  - mpg\n  - mp2\n  - mpeg\n  - mpe\n  - mpv\n  - ogg\n  - webm\n  - m4p\n  - m4v\n  - avi\n  - wmv\n  - mov\n  - qt\n  - flv\n  - swf\n  - avchd\n\nYou might be thinking \"Wow, that's a lot of extensions! The find command must be very long.\" Well, you're half right. That is a lot of extensions but the _find_ command is very short.\n\n#### How vmt build's your library\nThis is the command that vmt uses to build your library:\n\n```bash\n  while read -r DIR ; do\n    ...\n  done < <(find \"${BASE_DIR}\" -type f -printf '%P\\n' | \\\n    sed '/^.*\\.\\(mkv\\|mp4\\|mpg\\|mp2\\|mpeg\\|mpe\\|mpv\\|ogg\\|webm\\|m4p\\|m4v\\|avi\\|wmv\\|mov\\|qt\\|flv\\|swf\\|avchd\\)$/!d;s/\\(^.*\\)\\/.*$/\\1/g' | \\\n    sort -u)\n```\n\nMaybe it's just my system but when I give `find` a lot of flags it runs very slowly. For that reason I am using sed to filter find's results.\n\nIf a file path does not end in one of the given file extensions it is filtered from the results.\n\nAny path that does end in a valid extension is then striped of the file leaving only the directory.\n\nFinally we sort the directory results to ensure they are in alphabetical order and unique.\n\nPretty simple and most importantly fast. However, you want to make sure your `BASE_DIR` is as close to your videos as possible. Don't set it to `$HOME` if all your videos are in `~/Videos/Anime`.\n\n### Automatically generated titles\nI've mentioned these automatically generated titles a few times, but what the heck does that look like? Well, here is an example:\n\n```bash\n$ DIR=\"[Commie] Space Dandy - Volume 6 [BD 720p AAC]\"\n$ CLEAN_TITLE=\"$(printf '%s\\n' \"${DIR//\\// - }\" | sed 's/\\s\\+\\?\\[[^]]*\\]\\s\\+\\?//g')\"\n$ printf '%s\\n' \"${CLEAN_TITLE//[\\!\\\\@#$%^&*\\{\\}\\/<>?\\'\\\":+\\`|=]/-}\"\nSpace Dandy - Volume 6\n```\n\nAll the info that comes with a torrent is great but it doesn't look great. This it a pretty effective way of cleaning most directories and getting something that looks like a title.\n\nHere is another example. This is a larger torrent with a path that is two directories deep:\n\n```bash\n$ DIR=\"[Anime Time] Little Busters! (S1+S2+S3+OVA) [BD][HEVC 10bit x265][AAC][Eng Sub]/Little Busters! Season 1\"\n$ CLEAN_TITLE=\"$(printf '%s\\n' \"${DIR//\\// - }\" | sed 's/\\s\\+\\?\\[[^]]*\\]\\s\\+\\?//g')\"\n$ printf '%s\\n' \"${CLEAN_TITLE//[\\!\\\\@#$%^&*\\{\\}\\/<>?\\'\\\":+\\`|=]/-}\"\nLittle Busters- (S1-S2-S3-OVA) - Little Busters- Season 1\n```\n\nThe output isn't perfect, but boy does it happen fast and looks a whole lot better.\n\nWhen using vmt if you use the `-i` flag when updating or building your library you will get a chance to see a preview of what the title will look like if you enter nothing. So you can make the call on what you want your anime titles to be.\n\n### Note on use with hot-keys\nI use sxhkd to start vmt for most operations. I also use dmenu as my default prompt. If this is you then vmt will \"just work\".\n\nIf you use fzf you want to start vmt with a hot-key you will need to make sure you do this within a terminal. I use st which means I would put this in my sxhkdrc:\n\n```bash\nsuper + a\n  st -e vmt -w\n```\n\nThis ensures that vmt is running in a terminal and that you will be able to respond to the fzf or read prompts.\n\n### Browsing your BASE_DIR\nIf you've set a `FILE_MANAGER` then you can run vmt with the `-B, --browse` flag. This will open your `BASE_DIR` in your chosen FILE_MANAGER.\n\n## Disclaimer\nThis project is considered complete. The scope of features I set out to implement has been achieved. If you have a feature suggestion I will gladly hear and consider it. I may add new features but at present I can't think of anything I would add to this project. If anything I would like to strip it down more and make it more portable.\n\nI have done a limited amount of testing relative to the possible directory names and structures that vmt may encounter. If you run into an error (my guess is that it has to do with sed) then please open an issue with as much relevant information as needed. I will do my best to come up with a solution or review any proposed solutions.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "mpv",
            "license": "GNU General Public License v3 (GPLv3)",
            "maintainer": "",
            "maintainer_email": "",
            "name": "vmt",
            "package_url": "https://pypi.org/project/vmt/",
            "platform": null,
            "project_url": "https://pypi.org/project/vmt/",
            "project_urls": {
                "repository": "https://codeberg.org/johndovern/vmt"
            },
            "release_url": "https://pypi.org/project/vmt/0.0.0b2/",
            "requires_dist": [
                "python-magic",
                "loadconf",
                "promptx"
            ],
            "requires_python": "",
            "summary": "Video Media Tracker. Local, and simple method for watching and tracking a video media library.",
            "version": "0.0.0b2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15348396,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9d19f08af843d0011fb074f75fde8ef6",
                    "sha256": "7833ca1553cdbcd837fc6a815413cd99716e15d41306c04f515daf80405f2d80"
                },
                "downloads": -1,
                "filename": "vmt-0.0.0b2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9d19f08af843d0011fb074f75fde8ef6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 28843,
                "upload_time": "2022-10-09T04:36:45",
                "upload_time_iso_8601": "2022-10-09T04:36:45.107938Z",
                "url": "https://files.pythonhosted.org/packages/62/f4/4ce626ddb8fddb031cc71815d30d80c6ba5dc7e44be658faf96e6ad7d90f/vmt-0.0.0b2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "20d0a51ad2bd959a6ae4c3b3e29ad719",
                    "sha256": "d3c29c8a27c7a6e3397d3228cb9c2dd4f739abb6a0098b3cec2c2c9ee4eff12d"
                },
                "downloads": -1,
                "filename": "vmt-0.0.0b2.tar.gz",
                "has_sig": false,
                "md5_digest": "20d0a51ad2bd959a6ae4c3b3e29ad719",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 29852,
                "upload_time": "2022-10-09T04:36:46",
                "upload_time_iso_8601": "2022-10-09T04:36:46.678645Z",
                "url": "https://files.pythonhosted.org/packages/4f/9b/dd52473f41a648d86a40ac8d79bed311dc50b9817fa2f8401caafb580d4e/vmt-0.0.0b2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}