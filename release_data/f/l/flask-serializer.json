{
    "0.0.4": {
        "info": {
            "author": "ZinkLu",
            "author_email": "zinkworld@live.cn",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: Flask",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Internet :: WWW/HTTP :: WSGI",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
                "Topic :: Software Development :: Libraries :: Application Frameworks"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "https://github.com/ZinkLu/Flask-Serializer/archive/0.0.1.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZinkLu",
            "keywords": "Flask,extension,serializer,marshmallow,flask-sqlalchemy",
            "license": "MIT",
            "maintainer": "zinklu",
            "maintainer_email": "zinkworld@live.cn",
            "name": "flask-serializer",
            "package_url": "https://pypi.org/project/flask-serializer/",
            "platform": "",
            "project_url": "https://pypi.org/project/flask-serializer/",
            "project_urls": {
                "Code": "https://github.com/ZinkLu/Flask-Serializer",
                "Download": "https://github.com/ZinkLu/Flask-Serializer/archive/0.0.1.tar.gz",
                "Homepage": "https://github.com/ZinkLu"
            },
            "release_url": "https://pypi.org/project/flask-serializer/0.0.4/",
            "requires_dist": null,
            "requires_python": ">=2.7",
            "summary": "A Flask serializer built with marshmallow and flask-sqlalchemy",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7970878,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9c04c49eec8ee6e25115cc2e5a5c72cc",
                    "sha256": "68e6c24b6d1d7bf409274e1ddae0714eef956232a373c9cc079936f077861bd1"
                },
                "downloads": -1,
                "filename": "flask_serializer-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "9c04c49eec8ee6e25115cc2e5a5c72cc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=2.7",
                "size": 11026,
                "upload_time": "2020-07-28T13:51:48",
                "upload_time_iso_8601": "2020-07-28T13:51:48.962780Z",
                "url": "https://files.pythonhosted.org/packages/8e/08/756059f52913c1b82bbb6cecea07e198a826b2a7b7d7e32666c692c9169c/flask_serializer-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.5": {
        "info": {
            "author": "ZinkLu",
            "author_email": "zinkworld@live.cn",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: Flask",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Internet :: WWW/HTTP :: WSGI",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
                "Topic :: Software Development :: Libraries :: Application Frameworks"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/ZinkLu/Flask-Serializer/archive/v0.0.5.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZinkLu",
            "keywords": "Flask,extension,serializer,marshmallow,flask-sqlalchemy",
            "license": "MIT",
            "maintainer": "zinklu",
            "maintainer_email": "zinkworld@live.cn",
            "name": "flask-serializer",
            "package_url": "https://pypi.org/project/flask-serializer/",
            "platform": "",
            "project_url": "https://pypi.org/project/flask-serializer/",
            "project_urls": {
                "Code": "https://github.com/ZinkLu/Flask-Serializer",
                "Download": "https://github.com/ZinkLu/Flask-Serializer/archive/v0.0.5.tar.gz",
                "Homepage": "https://github.com/ZinkLu"
            },
            "release_url": "https://pypi.org/project/flask-serializer/0.0.5/",
            "requires_dist": null,
            "requires_python": ">=2.7",
            "summary": "A Flask serializer built with marshmallow and flask-sqlalchemy",
            "version": "0.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7970878,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7ce59ff0f5c8765c5858a500afb8be4c",
                    "sha256": "81768644858fa8b5f9bfb2f936514595f7ba9abe0026eba674d8b0372eea155b"
                },
                "downloads": -1,
                "filename": "flask_serializer-0.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "7ce59ff0f5c8765c5858a500afb8be4c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=2.7",
                "size": 16361,
                "upload_time": "2020-08-16T09:17:34",
                "upload_time_iso_8601": "2020-08-16T09:17:34.260835Z",
                "url": "https://files.pythonhosted.org/packages/bb/38/f197b08ae382aa3fc47801f7447c64569231d8f134d3d68b1781a68aacea/flask_serializer-0.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.5.1": {
        "info": {
            "author": "ZinkLu",
            "author_email": "zinkworld@live.cn",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: Flask",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Internet :: WWW/HTTP :: WSGI",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
                "Topic :: Software Development :: Libraries :: Application Frameworks"
            ],
            "description": "# Flask-Serializer\n\n\u4e00\u4e2a\u5e2e\u52a9\u4f60\u5feb\u901f\u4e66\u5199Restful\u7684\u5e8f\u5217\u5316\u5668\u5de5\u5177\n\n## 1. \u7b80\u4ecb\n\n\u540e\u7aef\u7a0b\u5e8f\u5458, \u6700\u57fa\u7840\u4e5f\u662f\u6700\u5e38\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5b9a\u4e49\u6570\u636e\u5e93\u6a21\u578b\u5e76\u8fdb\u884c\u589e\u5220\u6539\u67e5, \u800c\u5728\u4e00\u4e2aRestful\u63a5\u53e3\u96c6\u5408\u4e2d, \u5bf9\u8d44\u6e90\u8fdb\u884c\u589e\u5220\u6539\u67e5\u7684\u4e5f\u79bb\u4e0d\u5f00\u53c2\u6570\u7684\u6821\u9a8c.\n\n\u4eceJson\u6821\u9a8c\u5230\u6301\u4e45\u5316\u6210\u6570\u636e\u5e93\u8bb0\u5f55, \u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u6211\u4eec\u6210\u4e3a\u53cd\u5e8f\u5217\u5316(\u72ed\u4e49), \u800c\u4ece\u6570\u636e\u5e93\u8868\u5230Json\u5b57\u7b26\u4e32, \u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4eec\u6210\u4e3a\u5e8f\u5217\u5316(\u72ed\u4e49).\n\n\u672c\u8f6f\u4ef6\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u5e8f\u5217\u5316\u5de5\u5177, \u5b83\u65e8\u5728\u8ba9\u53cd\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u66f4\u52a0\u5feb\u6377\u548c\u65b9\u4fbf, \u8ba9\u6211\u4eec\u66f4\u5173\u6ce8\u4e1a\u52a1\u903b\u8f91(\u800c\u4e0d\u662f\u53c2\u6570\u6821\u9a8c\u548c\u589e\u5220\u6539\u67e5).\n\n## 2. \u5b89\u88c5\u8bf4\u660e\n\n\u9700\u6c42: \n\nflask-serializer \u652f\u6301Python >= 2.7\u7684\u7248\u672c.\n\n> python2.7: \u4f7f\u7528Marshmallow2\n>\n> python 3: \u4f7f\u7528Marshmallow3\n\n\u5b89\u88c5:\n\n```sh\npip install flask-serializer\n```\n\n## 3. \u4f7f\u7528\n\n\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u770b[\u8fd9\u91cc](\"examples/examples.py\")\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u5341\u5206\u719f\u6089\u4e86marshmallow\u7684\u4f7f\u7528, \u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc73.3\n\n### 3.1 \u521d\u59cb\u5316\n\n\u5982\u540c\u5176\u4ed6\u7684flask\u63d2\u4ef6, flask-serializer\u7684\u521d\u59cb\u5316\u4e5f\u5f88\u7b80\u5355; \n\n> \u6ce8\u610f: \u7531\u4e8e\u4f9d\u8d56flask-SQLAlchemy, flask-serializer\u5e94\u8be5\u5728\u5176\u4e4b\u540e\u8fdb\u884c\u521d\u59cb\u5316\n\n```python\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_serializer import FlaskSerializer\n\napp = Flask(__name__)\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = 'postgresql://postgres@localhost:5432/test'\n\ndb = SQLAlchemy(app)\nsession = db.session\n\nfs = FlaskSerializer(app, strict=False)\n```\n\nkeyword arguments \u5c06\u4f1a\u8f6c\u6362\u4e3aMarshmallow\u7684`class Meta`, \u8be6\u7ec6\u770b[\u8fd9\u91cc](https://marshmallow.readthedocs.io/en/stable/quickstart.html#handling-unknown-fields)\n\n\u7136\u540e, \u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2aschema:\n\n```python\nclass BaseSchema(fs.Schema):\n    pass\n```\n\n### 3.2. \u51c6\u5907\n\n\u6211\u4eec\u8bbe\u8ba1\u4e00\u7cfb\u5217\u6a21\u578b: \n\n1. \u6a21\u578b\u57fa\u7c7b, \u63d0\u4f9b\u6240\u6709\u6a21\u578b\u7684\u901a\u7528\u5b57\u6bb5\n\n    ```python\n    now = datetime.datetime.now\n\n    class Status:\n        VALID = True\n        INVALID = False\n\n    class BaseModel(db.Model):\n        __abstract__ = True\n\n        id = Column(INTEGER, primary_key=True, autoincrement=True, nullable=False, comment=u\"\u4e3b\u952e\")\n        is_active = Column(BOOLEAN, nullable=False, default=Status.VALID)\n        create_date = Column(DATE, nullable=False, default=now)\n        update_date = Column(DATE, nullable=False, default=now, onupdate=now)\n\n        def delete(self):\n            self.is_active = Status.INVALID\n            return self.id\n\n        def __repr__(self):\n            return f\"<{self.__class__.__name__}:{self.id}>\"\n    ```\n\n2. \u8ba2\u5355\u6a21\u578b\n\n    ```python\n    class Order(BaseModel):\n        __tablename__ = \"order\"\n        order_no = Column(VARCHAR(32), nullable=False, default=now, index=True)\n\n        order_lines = relationship(\"OrderLine\", back_populates=\"order\")\n    ```\n\n3. \u8ba2\u5355\u660e\u7ec6\u884c, \u4e0e\u8ba2\u5355\u6a21\u578b\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb, \u8bb0\u5f55\u4e86\u8be5\u8ba2\u5355\u5305\u542b\u7684\u5546\u54c1\u6570\u91cf\u4ef7\u683c\u7b49\u4fe1\u606f\n\n    ```python\n    class OrderLine(BaseModel):\n        __tablename__ = \"order_line\"\n        order_id = Column(ForeignKey(\"order.id\", ondelete=\"CASCADE\"), nullable=False)\n        product_id = Column(ForeignKey(\"product.id\", ondelete=\"RESTRICT\"), nullable=False)\n\n        price = Column(DECIMAL(scale=2))\n        quantities = Column(DECIMAL(scale=2))\n\n        order = relationship(\"Order\", back_populates=\"order_lines\")\n\n        @property\n        def total_price(self):\n            return self.price * self.quantities\n    ```\n\n4. \u5546\u54c1\u6a21\u578b, \u4e0e\u8ba2\u5355\u660e\u7ec6\u884c\u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb, \u8bb0\u5f55\u4e86\u5546\u54c1\u7684\u57fa\u672c\u5c5e\u6027\n\n    ```python\n    class Product(BaseModel):\n        __tablename__ = \"product\"\n\n        product_name = Column(VARCHAR(255), index=True, nullable=False)\n        sku_name = Column(VARCHAR(64), index=True, nullable=False)\n        standard_price = Column(DECIMAL(scale=2), default=0.0)\n    ```\n\n### 3.3. \u7b80\u5355\u7684Marshmallow\u6f14\u793a\n\n\u66f4\u52a0\u9ad8\u7ea7\u7684\u4f7f\u7528\u6280\u5de7, \u8bf7\u770b: [Marshmallow\u6587\u6863](https://marshmallow.readthedocs.io/en/stable/)\n\n#### 3.2.1. \u53cd\u5e8f\u5217\u5316\n\n1. \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u8981\u521b\u5efa\u4e00\u6761\u6570\u636e\u5e93\u8bb0\u5f55, \u521b\u5efa\u4e00\u4e2aschema\u6765\u9a8c\u8bc1\u6570\u636e\n\n    ```python\n    from marshmallow import Schema, fields\n\n    class ProductSchema(Schema):\n        product_name = fields.String(required=True)\n        sku_name = fields.String(required=True)\n        standard_price = fields.Float()\n    ```\n\n    \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\n\n    ```python\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"sku_name\": \"GP19930916\",\n        \"standard_price\": 100 ,\n    }\n\n    ps = ProductSchema()\n\n    instance_data = ps.validate(raw_data)  # marshmallow2 will return (data, error) tuple\n\n    product = Product(**instance_data)\n\n    session.add(product)\n    session.flush()\n    session.commit()\n    ```\n\n2. \u6216\u8005\u4f7f\u7528marshmallow\u81ea\u5e26\u7684post_load\u65b9\u6cd5\n\n    ```python\n    from marshmallow import Schema, fields, post_load\n\n    class ProductSchema(Schema):\n        product_name = fields.String(required=True)\n        sku_name = fields.String(required=True)\n        standard_price = fields.Float()\n\n        @post_load\n        def make_instance(data, *args, **kwargs):\n            # data\u662f\u901a\u8fc7\u9a8c\u8bc1\u7684\u6570\u636e\n            product = Product(**data)\n            session.add(product)\n            session.commit()\n            session.flush()\n            return product\n    ```\n\n    \u7136\u540e\n\n    ```python\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"sku_name\": \"GP19930916\",\n        \"standard_price\": 100 ,\n    }\n\n    ps = ProductSchema()\n\n    product_instance = ps.load(raw_data)\n    ```\n\n#### 3.1.2. \u5e8f\u5217\u5316\n\n\u81f3\u4e8e\u5e8f\u5217\u5316, \u4e5f\u53ef\u4ee5\u4f7f\u7528ProductSchema\u5b9e\u4f8b\u8fdb\u884c\u5904\u7406, \u5982:\n\n1. \u5e8f\u5217\u5316, \u53ea\u4f1a\u53d6\u975eload_only\u7684\u5b57\u6bb5\u8fdb\u884c\u5e8f\u5217\u5316\n\n    ```python\n    product_instance = session.query(Product).get(1)\n    data = ps.dump(product_instance)  # dumps will return json string; marshmallow2 will return (data, error) tuple\n    ```\n\n2. \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e9bdump_only\u7684filed\u7528\u4e8e\u5e8f\u5217\u5316\n\n    ```python\n    class ProductSchemaAddDumpOnly(ProductSchema):\n        id = fields.Integer(dump_only=True)\n        create_date = fields.DateTime(dump_only=True)\n        update_date = fields.DateTime(dump_only=True)\n        is_active = fields.Boolean(dump_only=True)\n    \n    ps_with_meta = ProductSchemaAddDumpOnly()\n    data = ps_with_meta.dump(product_instance)\n    ```\n\n\u5e8f\u5217\u5316\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528marshmallow\u65b9\u6cd5, \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u53cd\u5e8f\u5217\u5316\u65b9\u6cd5\n\n### 3.4 \u4f7f\u7528DetailMixin\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\n\n\u4e0a\u9762\u6211\u4eec\u770b\u5230, \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u8fd8\u662f\u6bd4\u8f83Nice\u7684(\u5b98\u7f51\u6587\u6863\u4e2d\u4e5f\u6709\u4e8b\u4f8b), \u4ed6\u76f4\u63a5\u4f7f\u7528\u4e86marshmallow post_load\u65b9\u6cd5, \u5bf9\u7ed3\u679c\u8fdb\u884c\u540e\u5904\u7406, \u5f97\u5230\u4e00\u4e2aProduct\u5bf9\u8c61, \u5b9e\u9645\u4e0aDetailMix\u5c31\u662f\u5b9e\u73b0\u4e86\u8fd9\u6837\u65b9\u6cd5\u7684\u4e00\u4e2a\u62d3\u5c55\u7c7b.\n\n1. \u4f7f\u7528DetailMixin\u8fdb\u884c\u6a21\u578b\u521b\u5efa:\n   \n    \u5f88\u7b80\u5355, \u5bfc\u5165DetailMixIN\u540e\u4f7f\u5f97\u521a\u624d\u7684ProductSchema\u7ee7\u627fDetailMixIN, \u7136\u540e\u4e3a\u6dfb\u52a0`__model__`\u5230\u7c7b\u4e2d, \u8bbe\u7f6e\u8fd9\u4e2aSchema\u9700\u8981\u7ed1\u5b9a\u7684\u5bf9\u8c61.\n   \n    ```python\n    from marshmallow import Schema, fields\n\n    from flask_serializer.mixins.details import DetailMixin \n\n    class BaseSchema(fs.Schema):\n        id = fields.Integer()\n        create_date = fields.DateTime(dump_only=True)\n        update_date = fields.DateTime(dump_only=True)\n        is_active = fields.Boolean(dump_only=True)\n    \n    class ProductSchema(DetailMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(required=True)\n        sku_name = fields.String(required=True)\n        standard_price = fields.Float()\n    \n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"sku_name\": \"GP19930916\",\n        \"standard_price\": 100,\n    }\n    \n    ps = ProductSchema()\n    product_instance = ps.load(raw_data)\n    session.commit()\n    ```\n\n    ```sh\n    <Product:1>\n    ```\n\n    > \u6ce8\u610f: DetailMixin \u4f1a\u8c03\u7528flush()\u65b9\u6cd5, \u9664\u975esession\u5f00\u542f\u4e86autocommit, \u5426\u5219\u4e0d\u4f1a\u63d0\u4ea4\u4f60\u7684\u4e8b\u52a1(autocommit\u4e5f\u662f\u65b0\u521b\u5efa\u4e86\u4e00\u4e2a\u5b50\u4e8b\u52a1, \u4e0d\u4f1a\u63d0\u4ea4\u5f53\u524d\u4e3b\u4e8b\u52a1), \u8bf7\u5f00\u542fflask_sqlalchemy\u7684\u81ea\u52a8\u63d0\u4ea4\u4e8b\u52a1\u529f\u80fd\u6216\u8005\u624b\u52a8\u63d0\u4ea4\n\n> `__model__`\u8bf4\u660e: \u5982\u679c\u6709\u5bfc\u5165\u95ee\u9898, `__model__`\u652f\u6301\u8bbe\u7f6e\u5b57\u7b26\u4e32\u5e76\u5728\u7a0d\u540e\u7684\u4ee3\u7801\u4e2d\u81ea\u52a8\u8bfb\u53d6SQLAlchemy\u7684metadata\u5e76\u4e14\u81ea\u52a8\u8bbe\u7f6e\u5bf9\u5e94\u7684Model\u7c7b\n>\n>    ```python\n>    class ProductSchema(DetailMixin, Schema):\n>        __model__ = \"Product\"\n>    ```\n\n2. \u4f7f\u7528DetailMixin\u8fdb\u884c\u6a21\u578b\u66f4\u65b0\n\n    \u65e2\u7136\u6709\u521b\u5efa\u5c31\u6709\u66f4\u65b0, DetailMixin\u80fd\u591f\u81ea\u52a8\u8bfb\u53d6`__model__`\u91cc\u9762\u7684\u4e3b\u952e(\u524d\u63d0\u662fmodel\u4e3b\u952e\u5fc5\u987b\u552f\u4e00), \u5f53\u5728\u8bfb\u53d6\u5230\u539f\u59cb\u6570\u636e\u4e2d\u7684\u4e3b\u952e\u65f6, load\u65b9\u6cd5\u4f1a\u81ea\u52a8\u66f4\u65b0\u800c\u4e0d\u662f\u521b\u5efa\u8fd9\u4e2a\u6a21\u578b. \u5f53\u7136, \u4e5f\u4e0d\u8981\u5fd8\u8bb0\u5728schema\u4e2d\u5b9a\u4e49\u4f60\u7684\u4e3b\u952e\u5b57\u6bb5.\n\n    ```python\n    raw_data = {\n        \"id\": 1,\n        \"standard_price\": 10000000,\n    }\n\n    ps = ProductSchema(partial=True)  # partial\u53c2\u6570\u53ef\u4ee5\u4f7f\u5f97required\u7684\u5b57\u6bb5\u4e0d\u8fdb\u884c\u9a8c\u8bc1, \u9002\u5408\u66f4\u65b0\u64cd\u4f5c\n\n    product_instance = ps.load(raw_data)\n    session.commit()\n    ```\n\n    ```sh\n    <Product:1>\n    ```\n\n    > \u5982\u679c\u53ea\u662f\u60f3\u8bfb\u53d6\u8fd9\u4e2a\u6a21\u578b, \u800c\u4e0d\u60f3\u66f4\u65b0, \u53ea\u9700\u8981\u4f20\u5165\u4e3b\u952e\u503c\u884c\u5c31\u884c\n    > \n    > TODO: \u4ee5\u540e\u53ef\u4ee5\u52a0\u5165`ReadOnlyDetailMixIN`\n\n\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u7279\u6027, \u6211\u4eec\u5728\u8fdb\u9636\u4e2d\u518d\u770b, \u914d\u5408\u4e0aSQLAlchemy\u7684relationship, \u8fd8\u53ef\u4ee5\u5b9e\u73b0\u66f4\u591a.\n\n### 3.5 \u4f7f\u7528ListMixin\u8fdb\u884c\u67e5\u8be2\n\nDetailMixin\u652f\u6301\u7684\u662f\u589e\u6539\u64cd\u4f5c(\u5b9e\u9645\u4e0a\u4e5f\u652f\u6301\u5220\u9664, \u4f46\u672a\u6765\u9700\u8981\u6dfb\u52a0\u4e13\u95e8\u7528\u6765\u5220\u9664\u7684Mixin), \u800cListMixin\u652f\u6301\u67e5\u8be2\u7684\u64cd\u4f5c.\n\n\u4e0b\u9762\u662f\u4e0d\u540c\u7684ListMixin\u7684\u4f7f\u7528\n\n#### 3.5.1 ListModelMixin\n\nListModelMixin \u987e\u540d\u601d\u4e49\u662f\u9488\u5bf9\u67d0\u4e2a\u6a21\u578b\u7684\u67e5\u8be2, \u5176\u53cd\u5e8f\u5217\u5316\u7684\u7ed3\u679c\u81ea\u7136\u662f\u6a21\u578b\u5b9e\u4f8b\u7684\u5217\u8868\n\n\u4e3a\u4e86\u8ba9\u7528\u6237\u7684\u8f93\u5165\u80fd\u591f\u8f6c\u5316\u6210\u6211\u4eec\u60f3\u8981\u7684\u67e5\u8be2, \u8fd9\u91cc\u4f7f\u7528`Filter`\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570`filter`\u4f20\u5165`Field`\u7684\u521d\u59cb\u5316\u4e2d\n\n1. \u57fa\u672c\u4f7f\u7528\n\n    ```python\n    from flask_serializer.mixins.lists import ListModelMixin\n    from sqlalchemy.sql.operators import eq as eq_op\n\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op))\n    ```\n\n    \u6b64\u65f6, \u6211\u4eec\u63a5\u53e3\u63a5\u6536\u5230\u8f93\u5165\u7684\u53c2\u6570, \u6211\u4eec\u8fd9\u6837: \n\n    ```python\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n    }\n\n    pls = ProductListSchema()\n\n    product_list = pls.load(raw_data)\n    ```\n\n    ```sh\n    Traceback (most recent call last):\n    ....\n    marshmallow.exceptions.ValidationError: {'_schema': ['\u5206\u9875\u4fe1\u606f\u9519\u8bef, \u5fc5\u987b\u63d0\u4f9blimit/offset\u6216\u8005page/size']}\n    ```\n\n    \u963f\u5076, \u62a5\u9519\u4e86, \u5b9e\u9645\u4e0a, ListModelMixin\u4e2d\u4f1a\u53bb\u81ea\u52a8\u68c0\u67e5Limit/Offset\u6216\u8005Page/Size\u8fd9\u6837\u7684\u53c2\u6570, \u5982\u679c\u4f60\u4e0d\u60f3\u8ba9\u6570\u636e\u5e93\u7206\u70b8, \u53ef\u522b\u5fd8\u8bb0\u4f20\u5165\u8fd9\u4e24\u4e2a\u53c2\u6570!\n\n    ```python\n    raw_data[\"page\"] = 1\n    raw_data[\"size\"] = 10\n    product_list = pls.load(raw_data)\n    ```\n\n    ```sh\n    [<Product:1>]\n    ```\n\n2. \u6392\u5e8f\\*\n   \n    \u5982\u679c\u60f3\u4f7f\u7528\u6392\u5e8f, \u53ef\u4ee5\u91cd\u5199\u8fd9\u4e00\u4e2a\u65b9\u6cd5\n    \n    ```python\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op))\n\n        def order_by(self, data):\n            return self.model.update_date.desc()\n    ```\n\n    \u6ce8\u610f\u4e86, `self.model`\u53ef\u4ee5\u5b89\u5168\u7684\u53d6\u5230\u8bbe\u7f6e\u7684`__model__`\u6307\u4ee3\u7684\u5bf9\u8c61, \u65e0\u8bba\u5b83\u88ab\u8bbe\u7f6e\u6210\u5b57\u7b26\u4e32\u8fd8\u662fModel\u7c7b.\n\n    > \\* \u8fd9\u65b9\u65b9\u6cd5\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u8bbe\u8ba1\u4e00\u4e0b, \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u53d8\u6210\u4e00\u4e2a\u5c5e\u6027\u800c\u4e0d\u662f\u63d0\u4f9b\u4e00\u4e2a\u53ef\u91cd\u5199\u7684\u65b9\u6cd5, \u9664\u975e\u6392\u5e8f\u975e\u5e38\u590d\u6742\n\n#### 3.5.2 Filter\u7c7b\u53c2\u6570\u8bf4\u660e\n\n 1. `operator`, \u8fd9\u4ee3\u8868\u7740\u5c06\u8981\u5bf9\u67d0\u4e00\u4e2a\u5b57\u6bb5\u505a\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c, \u8fd9\u4e2a\u53c2\u6570\u5e94\u8be5\u662f`sqlalchemy.sql.operators`\u4e0b\u63d0\u4f9b\u7684\u51fd\u6570, Filter\u4f1a\u81ea\u52a8\u5957\u7528\u8fd9\u4e9b\u51fd\u6570, \u5c06\u8f6c\u5316\u6210\u5bf9\u5e94\u7684WHERE\u8bed\u53e5, \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d, \u6211\u4eec\u6700\u7ec8\u5f97\u5230\u7684SQL\u5c31\u662f\u8fd9\u6837\u7684\n\n     ```sql\n     SELECT * FROM product WHERE product_name = 'A-GREAT-PRODUCT' ORDER BY product.update_date DESC\n     ```\n\n 2. `field`, \u5982\u679c\u4e0d\u8bbe\u7f6e, \u4ed6\u5c06\u9ed8\u8ba4\u4f7f\u7528`__model__`\u4e0b\u9762\u7684\u540c\u540dColumn\u8fdb\u884c\u8fc7\u6ee4, \u6240\u4ee5, \u5f53\u4f60\u7684Schema\u548cModel\u7684Filed\u5bf9\u4e0d\u4e0a\u65f6, \u4e5f\u53ef\u4ee5\u8fd9\u6837\u641e\n\n     ```python\n     class ProductListSchema(ListModelMixin, BaseSchema):\n         __model__ = Product\n\n         name = fields.String(filter=Filter(eq_op, Product.product_name))\n     ```\n\n     \u8fd9\u65f6, \u6211\u4eec\u7684\u63a5\u53e3\u6587\u6863\u4e2d\u8fd8\u5b9a\u4e49\u7684\u662f`product_name`, Schema\u5c06\u8bfb\u4e0d\u5230\u8be5\u503c, \u6240\u4ee5, \u63a5\u53e3\u6587\u6863, shecma, model\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\u540d\u5b57\u53ef\u80fd\u90fd\u4e0d\u4e00\u6837, \u4f46\u662f\u4ed6\u4eec\u6307\u4ee3\u7684\u540c\u4e00\u4e2a\u4e1c\u897f\u662f, \u4f60\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u505a: \n\n     ```python\n     class ProductListSchema(ListModelMixin, BaseSchema):\n         __model__ = Product\n\n         name = fields.String(data_key=\"product_name\", filter=Filter(eq_op, Product.product_name))\n     ```\n\n     `data_key`\u662fmarshmallow\u81ea\u5e26\u7684\u53c2\u6570, \u4ed6\u5c06\u544a\u8bc9Field\u5bf9\u8c61\u4ece\u54ea\u91cc\u53d6\u503c.\n\n     > \u5728Marshmallow2\u4e2d, \u8fd9\u4e2a\u53c2\u6570\u53eb`load_from`\u548c`dump_from`, \u73b0\u5728\u5408\u5e76\u4e86, \u4f46\u5b9e\u9645\u4e0a\u597d\u50cf\u9002\u7528\u8303\u56f4\u53d8\u5c0f\u4e86.\n\n     \u540c\u6837\u7684, `field`\u4e5f\u53ef\u4ee5\u88ab\u8bbe\u7f6e\u4e3a\u5b57\u7b26\u4e32, \u4e14\u53ef\u4ee5\u7701\u7565model\u7684\u540d\u79f0\n\n     ```python\n     class ProductListSchema(ListModelMixin, BaseSchema):\n         __model__ = Product\n\n         name = fields.String(data_key=\"product_name\", filter=Filter(eq_op, \"product_name\"))\n    ```\n\n    \u5bf9\u4e8e`field`\u53c2\u6570, \u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u5176\u4ed6\u6a21\u578b\u7684Column, \u6211\u4eec\u653e\u5230\u8fdb\u9636\u90e8\u5206\u53bb\u8bb2\u5427\n\n3. `value_process`\u5bf9\u5373\u5c06\u8fdb\u884c\u67e5\u8be2\u7684\u503c\u8fdb\u884c\u5904\u7406, \u4e00\u822c\u60c5\u51b5\u4e0b\u7528\u5728\u8bf8\u5982`like`\u7684\u64cd\u4f5c\u4e0a\n\n    `value_procee`\u652f\u6301\u4f20\u5165\u4e00\u4e2a`callable`\u5bf9\u8c61, \u5e76\u4e14\u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570, \u8fd4\u56de\u503c\u8be5\u53c2\u6570\u7684\u5904\u7406.\n   \n    ```python\n    from sqlalchemy.sql.operator import like_op\n\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op, value_process=lambda x: f\"%{x}%\"))\n    \n    raw_data = {\n        \"product_name\": \"PRODUCT\",\n        \"limit\": 10,\n        \"offset\": 0\n    }\n\n    pls = ProductListSchema()\n\n    product_list = pls.load(raw_data)\n    print(product_list)\n    ```\n\n    ```sql\n    SELECT * FROM product WHERE product_name LIKE '%PRODUCT%'\n    ```\n\n    ```sh\n    [<Product:1>]\n    ```\n\n    > \u4e8b\u5b9e\u4e0a, `value_process`\u4e5f\u6709\u9ed8\u8ba4\u503c, \u5982\u679c\u4f60\u4f7f\u7528`like_op`\u6216\u8005`ilike_op`\u5219\u4f1a\u81ea\u52a8\u5728value\u540e\u9762\u52a0\u4e0a`%`(\u53f3\u6a21\u7cca\u5339\u914d)\n\n    > \u5176\u5b9e`pre_load`\u88c5\u9970\u5668\u4e5f\u53ef\u4ee5\u9884\u5904\u7406\u503c, \u4f46\u662f\u6211\u8ba4\u4e3a\u4e0d\u9700\u8981\u5199\u592a\u591a\u4e86\u9884\u5904\u7406\u65b9\u6cd5\n\n4. `default`\u9ed8\u8ba4\u503c.\n\n    \u6709\u65f6\u53ef\u80fd\u4f1a\u6709\u4e0d\u4f20\u503c\u4f7f\u7528\u9ed8\u8ba4\u503c\u8fdb\u884c\u8fc7\u6ee4\u7684\u60c5\u51b5, \u53ef\u4ee5\u8bbe\u7f6e`default`\u65b9\u6cd5.\n\n    > \u8fd9\u4e2a\u573a\u666f\u4e0b\u4e0d\u80fd\u8bbe\u7f6emarshmallow\u7684Field\u5bf9\u8c61\u7684default\u53c2\u6570, \u56e0\u4e3a\u8fd9\u4e2adefault\u662f\u7ed9dump\u65b9\u6cd5\u7528\u7684, \u800c\u4e0d\u662fload\u65b9\u6cd5.\n\n    \u8ba9\u6211\u4eec\u5148\u6765\u5220\u9664\u521a\u624d\u521b\u5efa\u7684product\n\n    ```python\n    # delete a product\n    for product in product_list:\n        product.delete()\n    \n    session.flush()\n    session.commit()\n    ```\n\n    \u7136\u540e\u6211\u4eec\u521b\u5efa\u8fd9\u6837\u4e00\u4e2aSchema, \u5c06\u81ea\u52a8\u8fc7\u6ee4\u6389\u8f6f\u5220\u9664\u7684\u8bb0\u5f55\n    \n    ```python\n    class ProductListSchema(ListModelMixin, BaseSchema):\n        __model__ = Product\n\n        is_active = fields.Boolean(filter=Filter(eq_op, default=True))\n\n        product_name = fields.String(filter=Filter(eq_op))\n\n\n    raw_data = {\n        \"product_name\": \"A-GREAT-PRODUCT\",\n        \"limit\": 10,\n        \"offset\": 0\n    }\n\n    pls = ProductListSchema()\n\n    print(pls.load(raw_data))\n    ```\n\n    ```sh\n    []\n    ```\n\n#### 3.5.3 ListMixin\n\n\u548cListModelMixin\u7684\u5dee\u522b\u5c31\u662f\u8fd9\u4e2a\u65b9\u6cd5\u8fd9\u5bf9\u4e00\u4e2a`Model`\u8fdb\u884c\u5168\u90e8\u67e5\u8be2, \u800c\u662f\u4f1a\u5bf9\u6307\u5b9a\u7684\u4e00\u4e9b\u5b57\u6bb5\u8fdb\u884c\u67e5\u8be2, \u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u989d\u5916\u7684\u6027\u80fd\u5f00\u9500, \u53ea\u67e5\u8be2\u4f60\u611f\u5174\u8da3\u7684\u5b57\u6bb5. \u5e76\u4e14\u53ef\u4ee5\u5b8c\u6210\u8de8\u6a21\u578b\u7684\u5b57\u6bb5\u67e5\u8be2.\n\nListMixin\u9700\u8981\u4e00\u4e2a`Query`\u5bf9\u8c61\u6765\u544a\u8bc9\u4ed6\u9700\u8981\u67e5\u8be2\u7684\u5b57\u6bb5\n\n1. \u57fa\u672c\u4f7f\u7528:\n\n    ```python\n    from flask_serializer.func_field.filter import Filter\n    from flask_serializer.func_filed.query import Query\n    from flask_serializer.mixins.lists import ListMixin\n    from sqlalchemy.sql.operators import eq as eq_op\n\n    class ProductListSchema(ListMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op), query=Query())\n    ```\n\n    \u540c\u6837\u7684, \u8ba9\u6211\u4eec\u8f93\u5165\u53c2\u6570\n\n    ```python\n    raw_data = {\n        \"page\": 1,\n        \"size\": 10,\n        \"product_name\": \"A-GREAT-PRODUCT\",\n    }\n\n    pls = ProductListSchema()\n\n    product_list = pls.load(raw_data)\n    ```\n\n    \u8fd9\u662f\u65f6\u5019\u6211\u4eec\u5f97\u5230\u7684\u4e0d\u518d\u662f`Product`\u7684\u5b9e\u4f8b\u5217\u8868, \u800c\u662f`sqlalchemy.util._collections.result`\u5bf9\u8c61, \u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u6709\u4e00\u70b9\u50cf\u5177\u540d\u5143\u7ec4, \u53ef\u4ee5\u8fdb\u884c\u4e0b\u6807\u7d22\u5f15\u548c`.`\u64cd\u4f5c, \u4f46\u662f\u4ed6\u53ea\u5305\u542b\u4f60\u67e5\u8be2\u7684\u5b57\u6bb5, \u4e0d\u5305\u542b\u4efb\u4f55\u5176\u4ed6\u591a\u4f59\u7684\u5b57\u6bb5, \u56e0\u6b64:\n\n    ```python\n    product = product_list[0]  # \u5982\u679c\u6ca1\u6709\u7684\u8bdd\u8bb0\u5f97\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u54e6!\n\n    print(product.product_name)\n    print(product[0])\n    ```\n\n    ```sh\n    A-GREAT-PRODUCT\n    A-GREAT-PRODUCT\n    ```\n\n#### 3.5.4 Query\u7684\u53c2\u6570\u8bf4\u660e\n\n1. `field`\n   \n    \u53ef\u4ee5\u662f\u4e00\u4e2aSQLAlchemy\u7684Column\u5bf9\u8c61, \u4e5f\u53ef\u4ee5\u662f\u80fd\u591f\u88ab\u6b63\u786e\u6307\u5411Column\u7684\u5b57\u7b26\u4e32. \u8fd9\u4e2a\u53c2\u6570\u5c06\u4f1a\u544a\u8bc9Query\u67e5\u8be2\u7684\u5b57\u6bb5\u5230\u5e95\u662f\u4ec0\u4e48, \u5982\u679c\u4e0d\u586b\u5199\u5219\u76f4\u63a5\u4f7f\u7528\u5f53\u524d`field`\u7684\u540d\u79f0\u5bf9\u5e94`__model__`\u5b57\u6bb5\u8fdb\u884c\u67e5\u8be2.\n\n    \u5176\u5b9e`field`\u5b8c\u5168\u53ef\u4ee5\u8bbe\u7f6e\u53e6\u5916\u4e00\u4e2a\u6a21\u578b\u7684\u5b57\u6bb5, \u5982\u679c\u8fd9\u4e24\u4e2a\u6a21\u578b\u4e4b\u95f4\u6709\u5916\u952e\u7684\u5173\u8054, SQLAlchemy\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u62fc\u63a5\u4e0aJoin\u8bed\u53e5, \u5e76\u4e14\u52a0\u4e0a\u6b63\u786e\u7684On\u6761\u4ef6, \u5982\u679c\u8fd9\u4e24\u4e2a\u6a21\u578b\u6ca1\u6709\u76f4\u63a5\u5916\u952e\u7684\u5173\u8054, \u4e5f\u53ef\u4ee5\u91cd\u5199`def modify_before_query(self, query, data)`\u65b9\u6cd5\u6765\u589e\u52a0\u81ea\u5df1\u7684Join\u6761\u4ef6, \u6211\u4eec\u653e\u5230\u9ad8\u7ea7\u90e8\u5206\u53bb\u8bb2\u89e3.\n\n2. `label`\n\n    label\u53c2\u6570\u76f8\u5f53\u4e8eSQL\u8bed\u53e5\u4e2d\u7684`AS`\n\n    ```python\n    class ProductListSchema(ListMixin, BaseSchema):\n        __model__ = Product\n\n        product_name = fields.String(filter=Filter(eq_op), query=Query(label=\"name\"))\n    \n    pls = ProductListSchema()\n\n    product = pls.load(raw_data)[0]\n\n    print(product.name)\n\n    product.product_name # raise a AttributeError\n    ```\n\n    ```sh\n    A-GREAT-PRODUCT\n\n    Traceback (most recent call last):\n    File xxxxxx\n        print(product.product_name)\n    AttributeError: 'result' object has no attribute 'product_name'\n    ```\n\n## 4 \u8fdb\u9636\n\n### 3.6.1 \u7ed3\u5408Nest\u548crelationship\u5b8c\u6210\u9a9a\u64cd\u4f5c\n\n### 3.6.2 \u5916\u952e\u68c0\u67e5\n\n### 3.6.3 \u8054\u5408\u8fc7\u6ee4\n\n## \u5df2\u77e5\u95ee\u9898\n\n1. DetailMixin\u4e0d\u80fd\u517c\u5bb9sqlite, sqlite\u4e0d\u652f\u6301\u6279\u91cf\u66f4\u65b0\n\n## TODO\n\n1. \u53ef\u4ee5\u8bfb\u53d6Model\u4e2d\u7684Column, \u6839\u636eColumn\u81ea\u52a8\u751f\u6210Field.\n\n2. JsonSchema\u81ea\u52a8\u8f6c\u6362\u6210Marshallmallow-Schema.\n\n3. DeleteMixIN, \u652f\u6301\u6279\u91cf\u5220\u9664\u7684Serializer.\n\n4. ...",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/ZinkLu/Flask-Serializer/archive/v0.0.5.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZinkLu",
            "keywords": "Flask,extension,serializer,marshmallow,flask-sqlalchemy",
            "license": "MIT",
            "maintainer": "zinklu",
            "maintainer_email": "zinkworld@live.cn",
            "name": "flask-serializer",
            "package_url": "https://pypi.org/project/flask-serializer/",
            "platform": "",
            "project_url": "https://pypi.org/project/flask-serializer/",
            "project_urls": {
                "Code": "https://github.com/ZinkLu/Flask-Serializer",
                "Download": "https://github.com/ZinkLu/Flask-Serializer/archive/v0.0.5.tar.gz",
                "Homepage": "https://github.com/ZinkLu"
            },
            "release_url": "https://pypi.org/project/flask-serializer/0.0.5.1/",
            "requires_dist": null,
            "requires_python": ">=2.7",
            "summary": "A Flask serializer built with marshmallow and flask-sqlalchemy",
            "version": "0.0.5.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7970878,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f9f480b72e2847929f251ed0d06dd551",
                    "sha256": "7b25731a2986bd3d5fe1fda30a6c348d0caa8ab91334202307881572eae7e967"
                },
                "downloads": -1,
                "filename": "flask_serializer-0.0.5.1.tar.gz",
                "has_sig": false,
                "md5_digest": "f9f480b72e2847929f251ed0d06dd551",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=2.7",
                "size": 23618,
                "upload_time": "2020-08-16T09:20:51",
                "upload_time_iso_8601": "2020-08-16T09:20:51.957205Z",
                "url": "https://files.pythonhosted.org/packages/f5/c3/215d2f063ee2135eb6b699d93ad84733629455c284c86c86cc685f78527c/flask_serializer-0.0.5.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}