{
    "2.0.0": {
        "info": {
            "author": "Richard Terry",
            "author_email": "code@radiac.net",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: System :: System Shells"
            ],
            "description": "=======\nworkenv\n=======\n\nA bash shortcut for jumping between local work environments and carrying out tasks\nwithin them.\n\nRequires Python 3.7+ and bash.\n\n\nQuick example\n=============\n\nExample ``~/.workenv_config.yml``::\n\n    myproject:\n      path: /path/to/myproject\n      source: venv/bin/activate\n      run:\n      - nvm use\n      commands:\n        database:\n          run: docker-compose up database\n\nExample usage::\n\n    # Jump to /path/to/myproject with the local python virtual environment and nvm\n    we myproject\n\n    # Jump to /path/to/myproject and run the database container\n    we myproject database\n\n    # Bash completion support\n    we m<tab> d<tab>\n\nThere is also support for a ``_common`` project with values applied to all projects -\nsee docs below.\n\n\nInstallation\n============\n\nInstall to a virtual environment with::\n\n  cd path/to/installation\n  virtualenv --python=python3.8 venv\n  . venv/bin/activate\n  pip install workenv\n  workenv --install\n\nThis will add the command as ``we`` by adding a line to your ``.bashrc``.\n\nIf you would prefer a different command name, you can specify it when installing::\n\n  workenv --install workon\n\nRestart your shell session for your change to take effect.\n\nTo uninstall, remove the line from ``.bashrc`` and delete your virtual environment.\n\n\nConfiguration\n=============\n\nAdd the current path as a new project::\n\n    we --add projectname\n\nAdd the current path as a new command::\n\n    we --add projectname command\n\nOpen your ``.workenv_config.yml`` for customisation::\n\n    we --edit\n\n\nConfiguration file format\n-------------------------\n\nThe top level of the YAML file are the names of the projects.\n\nA project can have the following attributes:\n\n``path``\n  The path to set as the current working directory. This will be the first command run.\n\n  Example::\n\n      path: /path/to/foo\n\n  Bash equivalent::\n\n      cd /path/to/foo\n\n\n``source``\n  Path or paths to call using ``source``\n\n  Example::\n\n      source:\n      - venv/bin/activate\n      - .env\n\n  Bash equivalent::\n\n      source venv/bin/activate\n      source .env\n\n\n``env``\n  Dict of environment variables to set\n\n  Example::\n\n      env:\n        COMPOSE_PROJECT_NAME: my_project\n\n  Bash equivalent::\n\n      export COMPOSE_PROJECT_NAME=my_project\n\n\n``run``\n  Command or list of commands to run\n\n  Example::\n\n      run:\n      - nvm use\n      - yvm use\n\n  Bash equivalent::\n\n      nvm use\n      yvm use\n\n\n``commands``\n  Dict of Command objects\n\n  Example::\n\n    myproject:\n      commands:\n        database:\n          run: docker-compose up database\n\n  Usage::\n\n      we myproject database\n\n  Bash equivalent::\n\n      docker-compose up database\n\n  A command will inherit the ``path`` and ``env`` of its parent project, unless it\n  defines its own.\n\n  It will inherit the ``source`` of its parent project only if it does not specify its\n  own path or source.\n\n  A command can have the same attributes as a project, except it cannot define its own\n  ``commands``.\n\nValues can substitute the project name with ``{{project.name}}``.\n\nThere are two special top-level YAML objects:\n\n``_config``\n  Controls settings:\n\n  ``verbose``\n    If ``true``, show bash commands when running them\n\n  ``history``\n    If ``true``, add the commands to history\n\n``_common``\n  Common project which can define a common ``source``, ``env``, ``run`` and ``commands``\n  which will be added to all other projects, regardless of whether they define their\n  own.\n\n  The common project cannot specify a path.\n\n\nFull example\n============\n\nPutting together all the options above into a sample ``.workenv_config.yml``::\n\n    _config:\n      verbose: true\n      history: false\n    _common:\n      env:\n        COMPOSE_PROJECT_NAME: '{{project.name}}'\n      commands:\n        open:\n          run: xdg-open .\n    myproject:\n      path: /path/to/myproject\n      source:\n      - venv/bin/activate\n      - .env\n      run:\n      - ./manage.py migrate\n      - ./manage.py runserver 0:8000\n      commands:\n        database:\n          run: docker-compose up database\n    other:\n      path: /path/to/other\n\n\n``we myproject`` is equivalent to typing::\n\n    cd /path/to/myproject\n    source venv/bin/activate\n    source .env\n    export COMPOSE_PROJECT_NAME=myproject\n    ./manage.py migrate\n    ./manage.py runserver 0:8000\n\n``we myproject database`` is equivalent to typing::\n\n    cd /path/to/myproject\n    source venv/bin/activate\n    source .env\n    export COMPOSE_PROJECT_NAME=myproject\n    docker-compose up database\n\n``we other`` is equivalent to typing::\n\n    cd /path/to/other\n    export COMPOSE_PROJECT_NAME=other\n\n``we other open`` is equivalent to::\n\n    cd /path/to/myproject\n    export COMPOSE_PROJECT_NAME=other\n    xdg-open .\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://radiac.net/projects/workenv/",
            "keywords": "bash",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "workenv",
            "package_url": "https://pypi.org/project/workenv/",
            "platform": "",
            "project_url": "https://pypi.org/project/workenv/",
            "project_urls": {
                "Documentation": "http://radiac.net/projects/workenv/",
                "Homepage": "http://radiac.net/projects/workenv/",
                "Source": "https://github.com/radiac/workenv",
                "Tracker": "https://github.com/radiac/workenv/issues"
            },
            "release_url": "https://pypi.org/project/workenv/2.0.0/",
            "requires_dist": [
                "pyyaml",
                "pytest ; extra == 'testing'",
                "pytest-black ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-isort ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.8",
            "summary": "Manage local work environments",
            "version": "2.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7527947,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cd3d815c45553c55055b3870adea4872",
                    "sha256": "43c99139198a385a6e273b89cd824ea3182a3431064404017d679e1cf4d97efb"
                },
                "downloads": -1,
                "filename": "workenv-2.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cd3d815c45553c55055b3870adea4872",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 11008,
                "upload_time": "2020-06-21T13:59:27",
                "upload_time_iso_8601": "2020-06-21T13:59:27.319268Z",
                "url": "https://files.pythonhosted.org/packages/cb/10/49a5b1fb0e103c996979a66e1c96c27ad9cd6118787d154c35da846219d8/workenv-2.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2b33a688a1516e960aec1ad32aa5bddb",
                    "sha256": "efec7e399f9789c875ddede2b2d29b7aeef74aaaa029f6c1f5083d2c8e9ca9b4"
                },
                "downloads": -1,
                "filename": "workenv-2.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "2b33a688a1516e960aec1ad32aa5bddb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 13842,
                "upload_time": "2020-06-21T13:59:29",
                "upload_time_iso_8601": "2020-06-21T13:59:29.567559Z",
                "url": "https://files.pythonhosted.org/packages/45/4c/d33c95aa71c4ce4b038369aaf8b66ad1f9119cf997db1d3b4877b2dff7df/workenv-2.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}