{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "Yohnah <yohnah@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: MacOS",
                "Operating System :: Microsoft",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3",
                "Topic :: Security",
                "Topic :: System :: Shells",
                "Topic :: Utilities"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "secretsintheenv",
            "package_url": "https://pypi.org/project/secretsintheenv/",
            "platform": null,
            "project_url": "https://pypi.org/project/secretsintheenv/",
            "project_urls": {
                "Bug Tracker": "https://github.com/Yohnah/secretsenv/issues",
                "Homepage": "https://github.com/Yohnah/secretsenv"
            },
            "release_url": "https://pypi.org/project/secretsintheenv/0.0.1/",
            "requires_dist": [
                "pykeepass (==4.0.3)"
            ],
            "requires_python": ">=3.7",
            "summary": "Tool for raising a configured shell with all required secrets, retrieved from compatible vaults, for your project onto memory in user space",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15766576,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6d09596c761992a591316b9913d7e1eb",
                    "sha256": "6da1c0693871473a3d995fa32e04de3e5cad3435c099054d230c1497bd1dd8f6"
                },
                "downloads": -1,
                "filename": "secretsintheenv-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6d09596c761992a591316b9913d7e1eb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 24400,
                "upload_time": "2022-11-12T22:10:01",
                "upload_time_iso_8601": "2022-11-12T22:10:01.537517Z",
                "url": "https://files.pythonhosted.org/packages/f3/dd/e9caa3e298dc323f147b611187e0c8490a38642bad49081cbf4a5e8bf237/secretsintheenv-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0e7538d1d212bb48b9da5fd886720ce9",
                    "sha256": "fbbe87f317c11ea0f20aeac1404fd0717403eeff337a25d46bac9aee7fbe4a9d"
                },
                "downloads": -1,
                "filename": "secretsintheenv-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "0e7538d1d212bb48b9da5fd886720ce9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 25422,
                "upload_time": "2022-11-12T22:10:03",
                "upload_time_iso_8601": "2022-11-12T22:10:03.252997Z",
                "url": "https://files.pythonhosted.org/packages/6a/5b/a4979911695c736a35311356cd9749dcdaa714c0c2d5797e599cf3881c74/secretsintheenv-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "",
            "author_email": "Yohnah <yohnah@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: MacOS",
                "Operating System :: Microsoft",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3",
                "Topic :: Security",
                "Topic :: System :: Shells",
                "Topic :: Utilities"
            ],
            "description": "<div align=\"center\">\n\u266c\u266c\u266a Secret is in the env, everywhere I look around    \u266a\u266c\u266c <br/>\n\u266a\u266c\u266a Secret is in the env, every token and every vault \u266a\u266c\u266a <br/>\n\u266a\u266a\u266c And I don't know if I'm being foolish             \u266c\u266c\u266a <br/>\n\u266a\u266a\u266a Don't know if I'm being wise                      \u266c\u266a\u266c <br/>\n\u266c\u266a\u266a But it's something that I must have in            \u266c\u266c\u266c <br/>\n\u266c\u266c\u266a And it's there when I avoid in my file             \u266c\u266c\u266a <br/>\n</div>\n\n# Secrets in the env\n\nWelcome to this simple project, an application launcher to load your secrets in environment variables or SSH private keys into your system's SSH agent, stored in a compatible vault\n\n# To-Do\n\n* Add support for running on Windows\n* Add Hashicorp Vault as a vault compatible\n\n# Requirements\n\n## Compatible Operative Systems as host\n\n* MacOS (tested on BigSur x86_64 and higher)\n* GNU/Linux\n___\n***Note:***\nWindows is not already compatible because some pykeepass issues on Windows. I'm working on fixing it.\n___\n\n## Software\n\n* Python 3: <https://www.python.org/>\n  * Dependences:\n    * PyKeePass: https://github.com/libkeepass/pykeepass\n\n# Current compatible vaults\n\n* KeePaas 2: <https://keepass.info/>\n\n# How to use\n\n## Install\n\nInstall on Unix-Like and MacOS:\n\n~~~\n$ sudo pip install secretsintheenv\n~~~\n\n## Help\n\nJust run:\n\n~~~\n$ secretsintheenv -h\n~~~\n\nOr with any position arguments, ex:\n\n~~~\n$ secretsintheenv init -h\n$ secretsintheenv run -h\n$ secretsintheenv dump -h\n~~~\n\nTo get a list of arguments and options\n\n\n## Set-Up\n\nFirst of all, you have to initialize your profile configuration, such as:\n\n~~~\n$ secretsintheenv init\n~~~\n\nAnd, you will get a new created directory at $HOME/.secretsenv/ as follow:\n\n~~~\n$HOME/.secretsenv\n\u251c\u2500\u2500 config.ini  #File to setup your compatible vault\n\u2514\u2500\u2500 profiles/   #Directory to store different profile files to match variables with stored secrets in compatible vaults\n~~~\n\n## Step 1\n\nConfigure the vault types needed to be referenced by the different manifests (see next steps).\n___\n***Note:***\nAt the moment only KeePass is supported\n___\n\nTo configure the list of available vaults you must edit the file $HOME/.secretsenv/config.ini with content like the following:\n\n~~~\n[head_vault]\ntype=keepass\ndb_path=/path/of/keepass/file.kdbx\npassword=true\nkeyfile=/path/to/private/key/file.key \n\n[KEEPASS_1]\ntype=keepass\ndb_path=/path/of/keepass/file2.kdbx\npassword=head_vault;/path/to/record/to/retrieve/pass#field:field_name\n\n[KEEPASS_2]\ntype=keepass\ndb_path=/path/of/keepass/file3.kdbx\npassword=head_vault;/path/to/record/to/retrieve/pass#field:field_name\nkeyfile=/path/to/private/key/file3.key \n~~~\n\nEach vault configuration must be defined from a section of the type [backend_name_1], using the name of your choice (the name is case insensitive).\n\nNext, each section must necessarily have the type argument with one of the following values defined:\n\n * keepass\n___\n***Note:***\nAt the moment only vault KeePass is supported\n___\n\nFollowing the arguments needed by the vault itself to work\n\nFollowing the arguments needed by the vault itself to work. Below we list the arguments needed by vault compatible:\n\n### KeePaas\n\n* type=keepass (Mandatory)\n* db_path=/path/to/keepass/file.kdbx (Mandatory)\n* password (optional)\n  * Password can either have the value \"true\", which will cause you to be prompted for the password, or it can have a \"plain string\" that will be used as the password. Ex:\n    * password=true\n    * password=<<password>>\n* keyfile=/path/to/keepass/file.key (optional)\n\n***Look Out!***\nIf you write a password in the password attribute, the password is stored in clear, which is dangerous because anyone with access to the file will be able to retrieve all the secrets from the vault.\n\nTo avoid this, you can create another vault to be used as \"head vault\", for example, another keepass, which stores the passwords of the rest of the vaults and the password attribute is set to \"true\".\n\nIn the rest of the vaults you can reference the content of the password with the following format, ex:\n\n~~~\n[...]\npassword=backend_name;query_to_retrieve_the_secret\n[...]\n~~~\n___\n***Note:***\nFor futher informartion of the type of query to be used, see the step 3\n___\n\nIn this way, the \"head vault\" will prompt for a password to retrieve the secrets to unlock of rest of vaults.\n\n## Step 2\n\nCreate a manifest file in your work directory with the name \"secretstoenv.ini\". \n\nThis file will content the profile manifest to list the differents type of data to be load among different sections.\n\nAn example of file could be:\n\n~~~\n[Info]\nprofile=profile_name\n\n[PROD]\nGITHUB_TOKEN=variable\nAWS_ACCESS_KEY_ID=variable\nAWS_SECRET_ACCESS_KEY=variable\nSSH_KEY=ssh\n\n[QUA]\nGITHUB_TOKEN=variable\nAWS_ACCESS_KEY_ID=variable\nAWS_SECRET_ACCESS_KEY=variable\nANY_VARIABLE_NAME=ssh\nANY_VARIABLE_NAME_1=ssh\nANY_VARIABLE_NAME_2=variable\n\n[DEV]\nGITHUB_TOKEN=variable\nAWS_ACCESS_KEY_ID=variable\nAWS_SECRET_ACCESS_KEY=variable\nANY_VARIABLE_NAME=ssh\nVARIABLE_TO_BE_USED_ON_DEV=ssh\n~~~\n\nSections are defined as [section_name] and are case insensitive. They can be defined by any name you prefer.\n\nEach section contains a set of variables or ssh keys to be loaded.\n\nThe only mandatory section should be [Info], which indicates the name of the profile to be used, such as:\n\n**profile**=*profile_name*\n\nThe variables are defined as follows:\n\n**VARIABLE_NAME**=**type_of_variable** #It's case sensitive\n\n**VARIABLE_NAME** is the name of the variable that will be used as environment variable and **type_of_variable** can be set with the following values:\n\n* __variables__. Which indicates that this secret will be an environment variable\n* __ssh__. Which indicates that this secret is an SSH private key that must be inserted in the SSH-Agent service\n\n___\n***Note:***\nThe definition of variables is case sensitive because the variable name format requested by the application that needs to consume the secret must be respected\n___\n\n***Note:***\nThe idea of this manifest is to be stored in the working directory of the project you are developing. In this way, it is useful to load the secrets in memory in an ephemeral and easy way, in addition to having a declaration of the secrets that the project needs and the type of secret as part of the project documentation.\n\nFor example, as part of a project developed in a Git repository\n___\n\n## Step 3\n\nCreate a file in the following directory $HOME/.secretsenv/profiles/ (one file per profile).\n\nThe content of this file is exactly the same as the secretstoenv.ini manifest in your working directory, but instead of indicating the type of variable (whether environment variables or SSH keys), the backend to query must be defined and the query to be execute, such as:\n\n**VARIABLE_NAME**=*backend_name*;query\n\nExample:\n~~~\n[Info]\nprofile=profile_name\n\n[PROD]\nGITHUB_TOKEN=KEEPASS_2;/path/to/record#field:field_name\nAWS_ACCESS_KEY_ID=KEEPASS_2;/path/to/record2#field:field_name\nAWS_SECRET_ACCESS_KEY=KEEPASS_1;/path/to/record3#field:field_name\nSSH_KEY=KEEPASS_2;/path/to/record4#attach:attachment_name\n\n[QUA]\nGITHUB_TOKEN=KEEPASS_1;/path/to/record20#field:field_name\nAWS_ACCESS_KEY_ID=KEEPASS_2;/path/to/record12#field:field_name\nAWS_SECRET_ACCESS_KEY=KEEPASS_2;/path/to/record#field1:field_name\nANY_VARIABLE_NAME=KEEPASS_1;/path/to/record13#attach:attachment_name\nANY_VARIABLE_NAME_1=KEEPASS_2;;/path/to/record4#field:field_name\nANY_VARIABLE_NAME_2=KEEPASS_2;/path/to/record3#field:field_name\n\n[DEV]\nGITHUB_TOKEN=KEEPASS_1;/path/to/record53#field:field_name\nAWS_ACCESS_KEY_ID=KEEPASS_1;/path/to/record27#field:field_name\nAWS_SECRET_ACCESS_KEY=KEEPASS_2;/path/to/record33#field:field_name\nANY_VARIABLE_NAME=KEEPASS_1;/path/to/record45#field:field_name\nVARIABLE_TO_BE_USED_ON_DEV=KEEPASS_2;/path/to/record12#field:field_name\n~~~\n\n### Queries type\n\n#### keepass\n\nKeePass queries adhere to the following format:\n\n/path/to/record/to/retrieve#record_type:record_name\n\nWhere:\n\n* **/path/to/registry/to/retire** is the path to the registry where the secret is stored in the KeePass database\n\n* **record_type** can get the following values:\n  * **field**. To indicate to KeePass that the secret is stored in a field\n  * **attach**. To indicate to KeePass that the secret is stored as an attachment.\n* **record_name**. The name of field or attachment where is stored the secret\n\n## Step 4\n\nJust use it!\n\n### Dumping data\n\nIn order to dump data just run:\n\n~~~\n$ secretsintheenv dump <section>\n~~~\n\nWhere section are the defined sections in manifest files. In our example would be PROD, QUA and DEV\n\nEx for dumping secrets \n\n* table format\n~~~\n$ secretsintheenv dump prod\n~~~\n\nor\n\n~~~\nsecretsintheenv dump prod --format table\n~~~\n\n* powershell style\n  \n~~~\nsecretsintheenv dump prod --format powershell_shell\n~~~\n\n* cmd style\n\n~~~\nsecretsintheenv dump prod --format cmd_shell\n~~~\n\n* unix_shell style\n\n~~~\nsecretsintheenv dump prod --format unix_shell\n~~~\n\n* json\n\n~~~\nsecretsintheenv dump prod --format json\n~~~\n\n* ssh_keys\n\n~~~\nsecretsintheenv dump prod --format ssh_keys\n~~~\n\n### Running a command\n\nUse the format:\n\n~~~\n$ secretsintheenv run <section> <command>\n~~~\n\nWhere \\<section\\> are the defined sections in manifest files. In our example would be PROD, QUA and DEV, and \\<command\\> the command to execute and load the secrets\n\nFor example:\n\n~~~\n$ secretsintheenv run qua /bin/bash\n~~~\n\nIt will execute an interactive bash shell by loading the secrets defined in QUA section as environment variables and SSH keys into the SSH-Agent\n\nAll secrets are ephimerals, so, once the command ends, all secrets are removed from the memory.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "secretsintheenv",
            "package_url": "https://pypi.org/project/secretsintheenv/",
            "platform": null,
            "project_url": "https://pypi.org/project/secretsintheenv/",
            "project_urls": {
                "Bug Tracker": "https://github.com/Yohnah/secretsenv/issues",
                "Homepage": "https://github.com/Yohnah/secretsenv"
            },
            "release_url": "https://pypi.org/project/secretsintheenv/0.0.2/",
            "requires_dist": [
                "pykeepass (==4.0.3)"
            ],
            "requires_python": ">=3.7",
            "summary": "Tool for raising a configured shell with all required secrets, retrieved from compatible vaults, for your project onto memory in user space",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15766576,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b52422922699969c9c5e0a975fa96976",
                    "sha256": "25922ad3836bb687bac4f238b122dc2f57777f7751cb7126f08d53300e8cf722"
                },
                "downloads": -1,
                "filename": "secretsintheenv-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b52422922699969c9c5e0a975fa96976",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 24451,
                "upload_time": "2022-11-14T20:02:37",
                "upload_time_iso_8601": "2022-11-14T20:02:37.249754Z",
                "url": "https://files.pythonhosted.org/packages/f9/35/bb39a4549d5aa413de9710181235ed78cfc80c921e5f1a993d000d5f3822/secretsintheenv-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9652f87f2be9fa060135641ac6ce44e0",
                    "sha256": "90159799cfba3f77485c015493c23b298543bd7a06e1bc244fb3de37f9836e0d"
                },
                "downloads": -1,
                "filename": "secretsintheenv-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "9652f87f2be9fa060135641ac6ce44e0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 25475,
                "upload_time": "2022-11-14T20:02:39",
                "upload_time_iso_8601": "2022-11-14T20:02:39.145563Z",
                "url": "https://files.pythonhosted.org/packages/da/a5/91267e2ad439336c547be66a0dd4e05a2abbfc1928a8388a132fc0567dab/secretsintheenv-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}