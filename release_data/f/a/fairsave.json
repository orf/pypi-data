{
    "0.0.1": {
        "info": {
            "author": "Malte Flachmann, Floriane Bresser (Karlsruhe Institute of Technology)",
            "author_email": "malte.flachmann@student.kit.edu",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# FS-Utilities\r\n\r\n\r\n\r\nFS-Utilities stores a python module wheel which contains all function to run the FS-Toolbox.\r\n\r\n\r\n\r\n## Installation\r\n\r\n\r\n\r\nThe installation needs python version 3.10.\r\n\r\n\r\n\r\nFor the installation download the *.whl file and the following command in the command prompt with the path including the file name for the *.whl file: \r\n\r\n`pip3 install WHEEL_PATH`\r\n\r\n\r\n\r\n## App structure and functions\r\n\r\n- kadi_search  \r\n\r\n    - Search_Item_Titles \r\n\r\n    - Search_Item_ID  \r\n\r\n    - Search_Files \r\n\r\n    - Latest_Title  \r\n\r\n    - Suggest_Title  \r\n\r\n- kadi_download  \r\n\r\n    - Download_Files_from_Kadi \r\n\r\n    - Kadi_Metadata \r\n\r\n- kadi_record \r\n\r\n    - Record_Create \r\n\r\n    - Record_Add_Links_and_Edit \r\n\r\n    - Record_Add_Tags \r\n\r\n    - Record_Add_Metadata \r\n\r\n    - Record_Add_Files \r\n\r\n- kadi_instances \r\n\r\n    - Show_Kadi_Instances \r\n\r\n    - Create_Kadi_Instance \r\n\r\n- kadi_json_writer  \r\n\r\n    - create_list_from_dict  \r\n\r\n- kadi_template  \r\n\r\n    - Template_Create  \r\n\r\n- tools \r\n\r\n    - comparison\r\n\r\n    - difference\r\n\r\n    - json_reader  \r\n\r\n            - dict_to_list_all_keys\r\n\r\n    - key\r\n\r\n    - metadata\r\n\r\n    - validation\r\n\r\n    - suftheowl_json\r\n\r\n\r\n\r\n**Code-example**  \r\n\r\n`import fsu.tools.json_reader as fsu_jr`  \r\n\r\n`fsu_jr.dict_to_list_all_keys(metadata)`\r\n\r\n\r\n\r\n## FAQ\r\n\r\n\r\n\r\n### 1) List of records\r\n\r\nI have a doubt regarding the helpers doc, which function would you recommend to pull the list of Records the user has? E.g. I was thinking on Kadi_Metadata() but I would have to retrieve latter the keys from the .txt document. My other idea was to use Show_Kadi_Instances, but I'm not sure if that's what I'm looking for\r\n\r\n\r\n\r\n**A:** Instance is the wording taken from the kadi-apy python module meaning the access to Kadi4Mat which consists of an host and a PAT. These instances are saved in the .kadi config file\r\n\r\nKadi_Metadata returns all information related to a record like title, author, creation time,... and extras which are the metadata of the process described in the record.\r\n\r\nTo show the record the user has you can simply use the Search_Items function with no args except instance and item: \r\n\r\nSearch_Items(instance='YOUR_INSTANCE_NAME', item='record')\r\n\r\n\r\n\r\n### 2) Kadi4Mat config file\r\n\r\nHow do I get the config file? Because I got a token from Kadi4mat, but I didn't get any document downloaded. Also, for the Search_Items, the instance will be again the config file with the user's data?\r\n\r\n\r\n\r\n**A:** The creation of a config file is described here: https://kadi-apy.readthedocs.io/en/stable/setup/configuration.html\r\n\r\nYou use the commands in the command prompt.\r\n\r\nkadi-apy create config      #creates config file\r\n\r\nThe other solution would be to just run the function Create_Kadi_Instance from my functions. It will create config file if it doesn't exist already.\r\n\r\n\r\n\r\nThe instance from the config file will be used for every function accessing Kadi4Mat.\r\n\r\n\r\n\r\n\r\n\r\n## Authors and acknowledgment\r\n\r\nShow your appreciation to those who have contributed to the project.\r\n\r\n\r\n\r\n## License\r\n\r\nFor open source projects, say how it is licensed.\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.com/linked-tribological-data/fair-save/FAIR-Save_Utilities",
            "keywords": "Kadi4Mat,FAIR",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "FAIRSave",
            "package_url": "https://pypi.org/project/FAIRSave/",
            "platform": null,
            "project_url": "https://pypi.org/project/FAIRSave/",
            "project_urls": {
                "Homepage": "https://gitlab.com/linked-tribological-data/fair-save/FAIR-Save_Utilities"
            },
            "release_url": "https://pypi.org/project/FAIRSave/0.0.1/",
            "requires_dist": [
                "kadi-apy (>=0.25.0)",
                "uuid (>=1.30)",
                "xmltodict (>=0.13.0)",
                "nested-lookup (>=0.2.25)"
            ],
            "requires_python": ">=3.10",
            "summary": "Package to run the FAIR-Save toolbox",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15799945,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "035179c6ca48c073a9aa33aba5a14d2b",
                    "sha256": "583cefff2fdd84f4ef7f49ffe8e48c9dd2ce26109f989b154c0c86447a9ed704"
                },
                "downloads": -1,
                "filename": "FAIRSave-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "035179c6ca48c073a9aa33aba5a14d2b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 36193,
                "upload_time": "2022-11-17T10:53:47",
                "upload_time_iso_8601": "2022-11-17T10:53:47.462652Z",
                "url": "https://files.pythonhosted.org/packages/79/f5/0100e307141cedebb2683a9235a64c8ef720f69495c9da75e4e4877a96b2/FAIRSave-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}