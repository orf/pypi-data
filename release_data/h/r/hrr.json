{
    "0.0.1": {
        "info": {
            "author": "Mohammad Mahmudul Alam",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "## Holographic Reduced Representations \ud83d\udd25\n\n<p align=\"center\"><em>Supports</em></p>\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/37298971/169624977-b64f749d-01cf-4300-8e6f-9674bb1c56fc.png\" height=\"60\">\n&nbsp;\n  <img src=\"https://user-images.githubusercontent.com/37298971/169624973-a0d7e833-50ec-4e93-9a16-7701e975fe6e.png\" height=\"60\">\n&nbsp;\n  <img src=\"https://user-images.githubusercontent.com/37298971/169624976-ebf54b45-989f-4b70-af27-c75aee5060b5.png\" height=\"60\">\n&nbsp;\n  <img src=\"https://user-images.githubusercontent.com/37298971/169624975-d711dcc8-e590-491b-a3a5-055837487cf8.png\" height=\"60\">\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.tensorflow.org\">TensorFlow</a>&nbsp; &nbsp; &nbsp;<a href=\"https://pytorch.org\">PyTorch</a>&nbsp; &nbsp; &nbsp;<a href=\"https://github.com/google/jax\">JAX</a>&nbsp; &nbsp; &nbsp;<a href=\"https://github.com/google/flax\">Flax</a>\n</p>\n\n<p align=\"justify\">\nHolographic Reduced Representations (HRR) is a method of representing compositional structures using circular convolution in distributed representations. The HRR operations <em>binding</em> and <em>unbinding</em> allow assigning abstract concepts to arbitrary numerical vectors. Given vectors x and y in a d-dimensional space, both can be combined using binding operation. Likewise, one of the vectors can be retrieved knowing one of the two vectors using unbinding operation.\n</p>\n\nTo import the HRR library with the TensorFlow backend use ```HRR.with_tensorflow```, to import with the JAX backend use ```HRR.with_jax```, and so on. Vectors are sampled from a normal distribution with zero mean and the variance of the inverse of the dimension using ```normal``` function, with ```projection``` onto the ball of complex unit magnitude, to enforce that the inverse will be numerically stable during unbinding, proposed in [Learning with Holographic Reduced Representations](https://arxiv.org/pdf/2109.02157.pdf).\n\n```python \nfrom HRR.with_pytorch import normal, projection, binding, unbinding, cosine_similarity\n\n\nbatch = 32\nfeatures = 256\n\nx = projection(normal(shape=(batch, features), seed=0))\ny = projection(normal(shape=(batch, features), seed=1))\n\nb = binding(x, y)\ny_prime = unbinding(b, x)\n\nscore = cosine_similarity(y, y_prime, dim=-1, keepdim=False)\nprint('score:', score[0])\n# prints score: tensor(1.0000)\n```\n\nWhat makes HRR more interesting is that multiple vectors can be combined by element-wise addition of the vectors,\nhowever, retrieval accuracy will decrease.\n\n```python\nx = projection(normal(shape=(batch, features), seed=0))\ny = projection(normal(shape=(batch, features), seed=1))\nw = projection(normal(shape=(batch, features), seed=2))\nz = projection(normal(shape=(batch, features), seed=3))\n\nb = binding(x, y) + binding(w, z)\ny_prime = unbinding(b, x)\n\nscore = cosine_similarity(y, y_prime, dim=-1, keepdim=False)\nprint('score:', score[0])\n# prints score: tensor(0.7483)\n```\n\nMore interestingly, vectors can be combined and retrieved in hierarchical order. \ud83c\udf33 \n\n```\nx    y\n \\  /\n  \\/\nb=x#y  z \n   \\  /\n    \\/\n c=(x#y)#z\n```\n\n```python \nx = projection(normal(shape=(batch, features), seed=0))\ny = projection(normal(shape=(batch, features), seed=1))\nz = projection(normal(shape=(batch, features), seed=2))\n\nb = binding(x, y)\nc = binding(b, z)\n\nb_ = unbinding(c, z)\ny_ = unbinding(b_, x)\n\nscore = cosine_similarity(y, y_, dim=-1)\nprint('score:', score[0])\n# prints score: tensor(1.0000)\n```\n\n### Flax Module (Fastest) \u26a1 \nHRR library supports vector binding/unbinding as a Flax module. Like any other Flax module, this needs to be initialized first and then execute using the apply method.\n\n```python\nfrom HRR.with_flax import normal, Projection, Binding, Unbinding, CosineSimilarity\n\n\nx = normal(shape=(batch, features), seed=0)\ny = normal(shape=(batch, features), seed=1)\n\nprojection = Projection()\nbinding = Binding()\nunbinding = Unbinding()\nsimilarity = CosineSimilarity()\n\n# create empty frozen dict as parameter less variable\nvar = projection.init(jax.random.PRNGKey(0), np.ones((batch, features)))\n\nx = projection.apply(var, x)\ny = projection.apply(var, y)\n\nb = binding.apply(var, x, y)\ny_ = unbinding.apply(var, b, x)\n\nscore = similarity.apply(var, y, y_)\nprint(f'score: {score[0]:.2f}')\n# prints score: 1.00\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "hrr",
            "package_url": "https://pypi.org/project/hrr/",
            "platform": null,
            "project_url": "https://pypi.org/project/hrr/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/hrr/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Holographic Reduced Representations",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14147236,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "32b1d128ae5155c962d4595f5a5139cf",
                    "sha256": "3bd5c044803279fd06fcc2ba2f729b94b1a92d51f95322131d47c69092a8bc46"
                },
                "downloads": -1,
                "filename": "hrr-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "32b1d128ae5155c962d4595f5a5139cf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 5565,
                "upload_time": "2022-06-16T04:11:20",
                "upload_time_iso_8601": "2022-06-16T04:11:20.972884Z",
                "url": "https://files.pythonhosted.org/packages/30/8d/781c954b9e44085b2e33009dcc9b0dbbb6165ff7d4f0c745c9665998f68b/hrr-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3d9dde2185fe9c16218cd25c659e34f3",
                    "sha256": "b9a8ee740d14347d36fc7c9bacf231b184324eefe1dc7a016bd95a2f85be8c98"
                },
                "downloads": -1,
                "filename": "hrr-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3d9dde2185fe9c16218cd25c659e34f3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 4422,
                "upload_time": "2022-06-16T04:11:23",
                "upload_time_iso_8601": "2022-06-16T04:11:23.100245Z",
                "url": "https://files.pythonhosted.org/packages/fa/40/114a5f321272162e08e113d554b6e8609974575ec5b63d3c1d670b791009/hrr-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}