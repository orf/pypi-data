{
    "0.0.3.0": {
        "info": {
            "author": "Renan Gabriel Gon\u00e7alves Silva",
            "author_email": "renangabrielsilva150@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# tyype\n\nUm pacote com com objetivo de tratar dados de entrada.\n\n## Instala\u00e7\u00e3o\n\n### Instala\u00e7\u00e3o via pip:\n\n```sh\npython -m pip install -U Tyype\n```\n\n\n## Como Usar\n\nAt\u00e9 o momento o tyype trata dados do inteitos, flutuantes e datas.\n\n\n## inty() e floaty()\n\n### L\u00ea um valor da entrada padr\u00e3o e retorna o mesmo caso seja inteiro, caso contr\u00e1rio \"None\" \u00e9 retornado\n\n```python\nfrom tyype.inty import *\nprint(Inty.inty())\n```\n\nPara ler valores de ponto flutuante:\n\n```python\nfrom tyype.floaty import *\nprint(Floaty.floaty())\n```\n\n\n### L\u00ea um valor da entrada padr\u00e3o enquanto o mesmo n\u00e3o for inteiro, a cada tentativa e impresso a mensagem de erro passada como par\u00e2metro\n\n```python\nfrom tyype.inty import *\nprint(Inty.inty('\\nDigite um n\u00famero inteiro.'))\n```\n\nPara ler valores de ponto flutuante:\n\n```python\nfrom tyype.floaty import *\nprint(Floaty.floaty('\\nDigite um n\u00famero.'))\n```\n\n\n### Retorna uma lista contendo os valores inteiros passados como argumento na linha de comando\n\nTerminal:\n```txt\n$ python3 test.py w 3 w 5 6 8\n[3, 5, 6, 8]\n```\n\nC\u00f3digo:\n```python\nfrom tyype.inty import *\nprint(Inty.inty(1))\n```\n\nCaso queira passar mais de um valor por argumento basta passar o par\u00e2metro do \"split\", nesse caso o m\u00e9todo retorna uma lista de listas.\n\nC\u00f3digo:\n```python\nfrom tyype.inty import *\nprint(Inty.inty(1, ','))\n```\n\nTerminal:\n```txt\n$python3 test.py w 3,4,5,6,7 w 5,6.4,3 6 8\n[[3, 4, 5, 6, 7], [5, 3], [6], [8]]\n```\n\nPara valores de ponto flutuante\n\nC\u00f3digo:\n```python\nfrom tyype.floaty import *\nprint(Floaty.floaty(1))\nprint(Floaty.floaty(1, ','))\n```\n\n\n### Retorna uma lista de listas contendo os valores inteiros de todos os arquivos passados como argumento na linha de comando(uma lista para cada arquivo)\n\nArquivo(test.txt):\n```txt\n1 4 1 a a 1 qwqw\n2 5 2 2.3 2.7\n3 3.44 987 qwwq S3RL\n2323 wqwq qw mari234\n\n```\n\nTerminal:\n```txt\n$ python3 test.py test.txt\n[[1, 4, 1, 1, 2, 5, 2, 2, 3, 2, 7, 3, 3, 4, 4, 9, 8, 7, 3, 2, 3, 2, 3, 2, 3, 4]]\n```\n\nC\u00f3digo:\n```python\nfrom tyype.inty import *\nprint(Inty.inty(2))\n```\n\nE poss\u00edvel especificar como arquivo est\u00e1 dividido\n\nC\u00f3digo:\n```python\nfrom tyype.inty import *\nprint(Inty.inty(2, ' '))\n```\n\nTerminal(os testes sempre utilizam o mesmo arquivo):\n```txt\n$ python3 test.py test.txt\n[[1, 4, 1, 1, 2, 5, 2, 3, 987, 2323]]\n```\n\nPara valores de ponto flutuante\n\nC\u00f3digo:\n```python\nfrom tyype.floaty import *\nprint(Floaty.floaty(2))\nprint(Floaty.floaty(2, ' '))\n```\n\n\n## inty2() e floaty2()\n\n### Recebe um valor como par\u00e2metro e retorna o mesmo caso seja inteiro, caso contr\u00e1rio \"None\" \u00e9 retornado\n\nTerminal(python3):\n```txt\n>>> from tyype.inty import *\n>>> print(Inty.inty2(3))\n3\n>>> print(Inty.inty2('3'))\n3\n>>> print(Inty.inty2('3.5'))\nNone\n>>> print(Inty.inty2('dsd'))\nNone\n```\n\nPara valores de ponto flutuante:\n\n```txt\n>>> from tyype.floaty import *\n>>> print(Floaty.floaty2('3.5'))\n3.5\n```\n\n\n## intFile() e floatyFile()\n\n### Recebe um arquivo como par\u00e2metro e retorna uma lista com todos os n\u00fameros inteiros\n\nTerminal(python3):\n```txt\n>>> from tyype.inty import *\n>>> print(Inty.intyFile('test.txt'))\n[1, 4, 1, 1, 2, 5, 2, 2, 3, 2, 7, 3, 3, 4, 4, 9, 8, 7, 3, 2, 3, 2, 3, 2, 3, 4]\n```\n\nE poss\u00edvel especificar como arquivo est\u00e1 dividido\n\nTerminal(python3):\n```txt\n>>> from tyype.inty import *\n>>> print(Inty.intyFile('test.txt', ' '))\n[1, 4, 1, 1, 2, 5, 2, 3, 987, 2323]\n```\n\nPara valores de ponto flutuante:\n\n```txt\n>>> from tyype.floaty import *\n>>> print(Floaty.floatyFile('test.txt', ' '))\n[1.0, 4.0, 1.0, 1.0, 2.0, 5.0, 2.0, 2.3, 2.7, 3.0, 3.44, 987.0, 2323.0]\n```\n\n\n## datey() e datey2()\n\n### L\u00ea uma data(ano, m\u00eas e dia) da entrada padr\u00e3o enquanto a mesma n\u00e3o for v\u00e1lida, a cada tentativa e impresso a mensagem de erro passada como par\u00e2metro. Por fim a data e retornada.\n\n```python\nfrom tyype.datey import *\nprint(Datey.datey('\\nData inv\u00e1lida.'))\n```\n\n\u00c9 poss\u00edvel especificar a mensagem para o usu\u00e1rio e um formato diferente.\n\n```python\nfrom tyype.datey import *\nprint(Datey.datey('\\nData inv\u00e1lida.', '\\nDigite o ano:', '\\nDigite o m\u00eas:', '\\nDigite o dia:', '%d/%m/%Y'))\n```\n\n\n### Recebe uma data(ano, m\u00eas e dia) como par\u00e2metro e retorna a mesma no formato \"date\" caso seja v\u00e1lida, caso contr\u00e1rio \"None\" \u00e9 retornado\n\nTerminal(python3):\n```txt\n>>> from tyype.datey import *\n>>> print(Datey.datey2('2021', 11, 21))\n2021-11-21\n```\n\nCaso deseje um formato diferente:\n\n```txt\n>>> from tyype.datey import *\n>>> print(Datey.datey2('2021', 11, 21, '%d/%m/%Y'))\n21/11/2021\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/renansilva15/tyype",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "tyype",
            "package_url": "https://pypi.org/project/tyype/",
            "platform": "",
            "project_url": "https://pypi.org/project/tyype/",
            "project_urls": {
                "Bug Tracker": "https://github.com/renansilva15/tyype",
                "Homepage": "https://github.com/renansilva15/tyype"
            },
            "release_url": "https://pypi.org/project/tyype/0.0.3.0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Pacote utilizado para tratar a entrada padr\u00e3o",
            "version": "0.0.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12487979,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3a56ffc6f98ead83a542d7a7ca1914bc",
                    "sha256": "9ec30f0c9bcc42cfe91d57da9af6ce7ece1b9ce89a3ef5996bc8bc0e72706981"
                },
                "downloads": -1,
                "filename": "tyype-0.0.3.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3a56ffc6f98ead83a542d7a7ca1914bc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 5283,
                "upload_time": "2022-01-05T21:23:22",
                "upload_time_iso_8601": "2022-01-05T21:23:22.784170Z",
                "url": "https://files.pythonhosted.org/packages/85/fd/09675600aa3e6998342e2cfab07a1e8f096a2c5a4cda1eabcdb6a51741b1/tyype-0.0.3.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "58ec6118e3cf8da94b8a9bc1b29a885c",
                    "sha256": "33f5bfbc7925cade74579b237a967e59b99ae3477b732b4343a184ecfbcca7ed"
                },
                "downloads": -1,
                "filename": "tyype-0.0.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "58ec6118e3cf8da94b8a9bc1b29a885c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 4545,
                "upload_time": "2022-01-05T21:23:24",
                "upload_time_iso_8601": "2022-01-05T21:23:24.258177Z",
                "url": "https://files.pythonhosted.org/packages/90/18/e081af1ce003213556f978982399e31ee035b5202a68a176f0b131b96f32/tyype-0.0.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}