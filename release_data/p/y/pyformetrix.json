{
    "0.0.2": {
        "info": {
            "author": "",
            "author_email": "Lukas Winiwarter <lukas.pypi@winiwarter.dev>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyForMetrix",
            "package_url": "https://pypi.org/project/pyForMetrix/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyForMetrix/",
            "project_urls": {
                "Bug Tracker": "https://github.com/lwiniwar/pyForMetrix/issues",
                "Homepage": "https://github.com/lwiniwar/pyForMetrix"
            },
            "release_url": "https://pypi.org/project/pyForMetrix/0.0.2/",
            "requires_dist": [
                "laspy",
                "laxpy",
                "matplotlib",
                "numpy",
                "pandas",
                "pip>=19.3",
                "scipy",
                "shapely",
                "tqdm",
                "xarray"
            ],
            "requires_python": ">=3.8",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15805533,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e3c593d30efd8bd5651c53cd8d49ba9",
                    "sha256": "e9daf33a13a3891acb4a7b6161206cc9de68ce46b2298e937263e19e91269a30"
                },
                "downloads": -1,
                "filename": "pyformetrix-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4e3c593d30efd8bd5651c53cd8d49ba9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 18738,
                "upload_time": "2022-11-17T19:12:28",
                "upload_time_iso_8601": "2022-11-17T19:12:28.976910Z",
                "url": "https://files.pythonhosted.org/packages/b6/1f/37b84addce7e9496c8c54524317281635912f2ddf63cfb68b69a4f3825b9/pyformetrix-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c97a3d41409aa136362c2d06b06b89ed",
                    "sha256": "892a141f5d5c1735c7414be4e16b35321978e6bae7eaae6663340ea3e979086c"
                },
                "downloads": -1,
                "filename": "pyformetrix-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "c97a3d41409aa136362c2d06b06b89ed",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 334718,
                "upload_time": "2022-11-17T19:12:30",
                "upload_time_iso_8601": "2022-11-17T19:12:30.605487Z",
                "url": "https://files.pythonhosted.org/packages/67/93/ac60660b43d9719756aa6d2d92c7cf08f152be533a97047f3be24a53d53f/pyformetrix-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2a2": {
        "info": {
            "author": "",
            "author_email": "Lukas Winiwarter <lukas.pypi@winiwarter.dev>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# pyForMetrix\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/lwiniwar/pyForMetrix/HEAD?labpath=demo%2Fgetting_started.ipynb)\n[![ReadTheDocs](https://readthedocs.org/projects/pyformetrix/badge/?version=latest)](https://pyformetrix.readthedocs.io/en/latest/)\n[![FWF](https://img.shields.io/badge/Funding-FWF-green)](#acknowledgement)\n\n\n`pyForMetrix` is a Python package to extract metrics commonly used in forestry from laser scanning/LiDAR data. Main functionalities include a plot-based and a pixel-based calculation, and handling of large datasets.\n\n## Installation\n`pyForMetrix` is packaged and delivered via PyPi, and can be installed using **pip**:\n\n```bash\npython -m pip install pyForMetrix\n```\n\n## Getting started \n > Note: You can run this *Getting started* section on binder:\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/lwiniwar/pyForMetrix/HEAD?labpath=demo%2Fgetting_started.ipynb)\n\nFirst, we need a point cloud dataset. You can use your own or download a sample dataset, e.g. from the City of Vancouver:\nhttps://webtransfer.vancouver.ca/opendata/2018LiDAR/4830E_54560N.zip\n\nUnzip this file after download to find a `.las`-File, which we will use in the following.\n\nWe need to read in the point cloud into a numpy array. Depending on the metrics we will derive later, \ndifferent attributes also have to be loaded in. In this example, the 3D point cloud along with classification and\necho number information is required. For reading in the file, we use [`laspy`](https://laspy.readthedocs.io/).\n\n```python\nimport numpy as np\nimport laspy\n\ninFile = laspy.read(r\"4830E_54560N.las\")\ncoords = np.vstack([inFile.x,\n                    inFile.y,\n                    inFile.z]).transpose()\npoints = {\n    'points': coords,\n    'echo_number': inFile.return_number,\n    'classification': inFile.classification\n}\n```\n\nAfter importing the package `pyForMetrics`, we can create a `RasterMetrics` or a `PlotMetrics` object, depending on \nthe application. Let's first work with `RasterMetrics`, which will calculate the set of metrics for each cell of a\nraster overlaid on the point cloud data.\n\n```python\nfrom pyForMetrix.metrix import RasterMetrics\nrm = RasterMetrics(points, raster_size=25)\n```\nThe code above may take some time to run, as on the creation of the`RasterMetrics` object, the point cloud is rasterized\nto the final cells. The runtime will increase with more points and a smaller raster size.\n\nWe then select which metrics we want to calculate. `pyForMetrix` comes with a number of predefined metrics, convieniently grouped in two collections: `publications`, where metrics from different publications in the literature are taken, and `types`, which groups metrics by their type. Later, we will see how to create your own metric calculators. For now, we will use the ones presented by Woods et al. (2009):\n\n```python\nfrom pyForMetrix.metricCalculators.publications import MCalc_Woods_et_al_2009\nmc = MCalc_Woods_et_al_2009()\nmetrics = rm.calc_custom_metrics(metrics=mc)\n```\n\nWith the last line, we created an [`xarray`](https://docs.xarray.dev/en/stable/)`.DataArray` object containing the metrics for each pixel:\n```python\nprint(metrics)\n```\n```\n<xarray.DataArray (y: 115, x: 83, val: 26)>\narray([[[ 1.19169000e+03,  1.19212000e+03,  1.19236000e+03, ...,\n         -1.26632802e+00,  7.51640760e-01,  0.00000000e+00],\n        [ 1.19254700e+03,  1.19255400e+03,  1.19256100e+03, ...,\n         -2.00000000e+00,  1.00000000e+00,  0.00000000e+00],\n...\n```\n\nUsing [`rioxarray`](https://corteva.github.io/rioxarray/stable/), we can save the values (here: the `p90` metric, i.e., the 90th height percentile) to a raster file:\n\n```python\nimport rioxarray\nmetrics.sel(val='p90').rio.to_raster(f\"p90.tif\", \"COG\")\n```\n\n## More examples\n### Multiple metric sets at once\nInstead of passing a single `metricCalculator` class to `calc_custom_metrics`, you can call it with a list of `metricCalculator`s:\n````python\nfrom pyForMetrix.metricCalculators.types import MCalc_HeightMetrics, MCalc_DensityMetrics\nheightMetrics = MCalc_HeightMetrics()\ndensityMetrics = MCalc_DensityMetrics()\nmetrics = rm.calc_custom_metrics(metrics=[heightMetrics, densityMetrics])\n````\n### Override percentiles, custom options\nSome `metricCalculator`s can be customized, e.g. the `MCalc_HeightMetrics` accept an optional keyword `percentiles`, which\nreplaces the percentiles calculated by default:\n\n````python\nheightMetrics = MCalc_HeightMetrics(percentiles=np.array([15, 25, 50, 75, 85, 95, 99]))\n````\n\nSimilarly, the cell size for the rumple index (e.g. in `MCalc_White_et_al_2015`) or the DSM in `MCalc_Hollaus_et_al_2009`\ncan be set - these variables are set as parameter to the `__call__` function. `calc_custom_metrics` accepts them as a (list of)\nadditional dictionaries with the settings:\n\n````python\nfrom pyForMetrix.metricCalculators.publications import MCalc_White_et_al_2015, MCalc_Hollaus_et_al_2009 \nwhiteMetrics = MCalc_White_et_al_2015()\nmetrics = rm.calc_custom_metrics(metrics=whiteMetrics, metric_options={'rumple_pixel_size': 0.2})\n````\n````python\nhollausMetrics = MCalc_Hollaus_et_al_2009()\nmetrics = rm.calc_custom_metrics(metrics=[whiteMetrics, hollausMetrics], \n                                 metric_options=[\n                                     {'rumple_pixel_size': 5},\n                                     {'CHM_pixel_size': 7.5}\n                                 ])\n````\n### Parallelize metric computation\nOn computers with multiple cores, processing can be sped up significantly by multiprocessing. To this end,\nwe provide a function `calc_custom_metrics_parallel` which takes similar arguments to `calc_custom_metrics`,\nbut runs on multiple cores. Note that the parallelization is carried out over the raster cells, i.e., the multiple\nprocesses treat different subsets of the raster cells. As there is a certain overhead in starting the processes,\nspeedup is only expected if there is a large enough number of (a) valid raster cells and (b) metrics that are complex\nto compute. The parameter `multiprocessing_point_threshold` checks the input point cloud and either spawns multiple processes\n(in case the number of points is larger than the threshold) or passes the arguments on to `calc_custom_metrics`.\n\nThe other parameters are `n_chunks` (default: 16), which is the number of blocks the raster cells are divided into to be processed,\nand `n_processes` (default: 4), which is the number of concurrent processes. A higher number of `n_chunks` uses less memory, but takes\nlonger due to the overhead.\n\nOn systems with sufficient memory (RAM > (number of processes) x (max. size of a tile)), it is generally better to parallelize over\ninput tiles rather than pixels.\n\n## Full / API documentation\nThe full documentation can be found at [readthedocs](https://pyformetrix.readthedocs.io/en/latest/).\n\n\n## Dependencies\nThis package relies on the following packages (installed automatically when using pip). Thank you to all developers making this project possible!\n\n- [`laxpy`](https://github.com/brycefrank/laxpy)\n- [`numpy`](https://numpy.org/)\n- [`scipy`](https://scipy.org/)\n- [`pandas`](https://pandas.pydata.org/)\n- [`tqdm`](https://tqdm.github.io/)\n- [`xarray`](https://docs.xarray.dev/en/stable/)\n- [`matplotlib`](https://matplotlib.org/)\n- [`shapely`](https://shapely.readthedocs.io/en/stable/manual.html)\n\n## Acknowledgement\nThis package has been developed in the course of the *UncertainTree* project, funded by the Austrian Science Fund ([FWF](https://www.fwf.ac.at/)) [Grant number J 4672-N].",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyForMetrix",
            "package_url": "https://pypi.org/project/pyForMetrix/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyForMetrix/",
            "project_urls": {
                "Bug Tracker": "https://github.com/lwiniwar/pyForMetrix/issues",
                "Homepage": "https://github.com/lwiniwar/pyForMetrix"
            },
            "release_url": "https://pypi.org/project/pyForMetrix/0.0.2a2/",
            "requires_dist": [
                "laspy",
                "laxpy",
                "matplotlib",
                "numpy",
                "pandas",
                "pip>=19.3",
                "scipy",
                "shapely",
                "tqdm",
                "xarray"
            ],
            "requires_python": ">=3.8",
            "summary": "",
            "version": "0.0.2a2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15805533,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f1d594e6c27188cc22080145e5096d94",
                    "sha256": "a99e7db8289e89571d05c1552edce0561abbce2dcab98f307e810a914c6fddf6"
                },
                "downloads": -1,
                "filename": "pyformetrix-0.0.2a2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f1d594e6c27188cc22080145e5096d94",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 18756,
                "upload_time": "2022-11-17T19:08:33",
                "upload_time_iso_8601": "2022-11-17T19:08:33.635133Z",
                "url": "https://files.pythonhosted.org/packages/1e/d6/b9fd9116c914fd2c968076bee1143092adbffbf4a8c858be5505df16a0d5/pyformetrix-0.0.2a2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1ca755768d5e3df60e3d7941d991efbc",
                    "sha256": "e10e9a3f91352bfd78bf37fb923a056abd99f39ce9ad36a15ce090b8d87a5315"
                },
                "downloads": -1,
                "filename": "pyformetrix-0.0.2a2.tar.gz",
                "has_sig": false,
                "md5_digest": "1ca755768d5e3df60e3d7941d991efbc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 334716,
                "upload_time": "2022-11-17T19:08:36",
                "upload_time_iso_8601": "2022-11-17T19:08:36.125807Z",
                "url": "https://files.pythonhosted.org/packages/2a/c0/b7a07bc68a28f6a4d79ea90ae7316491e2d1d4f77030434f80408acd6ff8/pyformetrix-0.0.2a2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}