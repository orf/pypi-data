{
    "0.1": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c2a61d36bc0e2331de1a3e4e3758758a",
                    "sha256": "54d11138ac726af82f8d949c8cdb4c3bb7ea8c0d2b4cc5336ecff48d2e53b652"
                },
                "downloads": -1,
                "filename": "turnstile-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "c2a61d36bc0e2331de1a3e4e3758758a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 30626,
                "upload_time": "2012-03-01T00:11:39",
                "upload_time_iso_8601": "2012-03-01T00:11:39.196745Z",
                "url": "https://files.pythonhosted.org/packages/d7/60/d06fa771f9deac01cc17ffd47322059d67fcfae561dfaf3f4e6890b8d872/turnstile-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ac08dbfd8624e016fe02da1ff71303bd",
                    "sha256": "7134f60b4cd3bfb4888d754cbc82edd0635ffb980fd1d790bce807cda668de8c"
                },
                "downloads": -1,
                "filename": "turnstile-0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "ac08dbfd8624e016fe02da1ff71303bd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 30918,
                "upload_time": "2012-03-02T22:15:49",
                "upload_time_iso_8601": "2012-03-02T22:15:49.165947Z",
                "url": "https://files.pythonhosted.org/packages/de/f0/1b854af2b7b68886b6be7cc885fab6475ef7494e3ca1bc4727c7c722517c/turnstile-0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.5": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.5/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "07ced54c40648f4155a2561beef9d1cd",
                    "sha256": "3a6210c96726f4842bdb82789dbf5a89640df638fcc1826f730e08d5fa1069d6"
                },
                "downloads": -1,
                "filename": "turnstile-0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "07ced54c40648f4155a2561beef9d1cd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 44097,
                "upload_time": "2012-03-08T18:29:32",
                "upload_time_iso_8601": "2012-03-08T18:29:32.301359Z",
                "url": "https://files.pythonhosted.org/packages/15/34/b0edab083b93aae665b9f41d9fe88d3bba77c2150d45ddf0d19fb9e6af5a/turnstile-0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.5.1": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.5.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.5.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3cb88c840a12ae1188e053e3a3b800a2",
                    "sha256": "432b4a35fcb450ff631e123aeed970058e5db9c3a2f86a703e2bb7437601f8f9"
                },
                "downloads": -1,
                "filename": "turnstile-0.5.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3cb88c840a12ae1188e053e3a3b800a2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 44404,
                "upload_time": "2012-03-13T20:17:32",
                "upload_time_iso_8601": "2012-03-13T20:17:32.452194Z",
                "url": "https://files.pythonhosted.org/packages/2d/87/e142bcb2acfcc3adbd15d48e4ece322b17e876bf17041f753ad85b8933a8/turnstile-0.5.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.5.2": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.5.2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.5.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e74e4e180748f0666ff3c5d73a6fb830",
                    "sha256": "16986de4bd1bb9261dcd1d87b986e0e74937ea9a8a99c5829e72be518f788fe4"
                },
                "downloads": -1,
                "filename": "turnstile-0.5.2.tar.gz",
                "has_sig": false,
                "md5_digest": "e74e4e180748f0666ff3c5d73a6fb830",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 45193,
                "upload_time": "2012-03-16T20:47:06",
                "upload_time_iso_8601": "2012-03-16T20:47:06.422226Z",
                "url": "https://files.pythonhosted.org/packages/f0/65/69882ef18f317abc839006e86430dd6b064cd903a50b423fe4600aad0566/turnstile-0.5.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.6.0": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.6.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.6.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5c72cb6378f11d9409d73b11d184ff2f",
                    "sha256": "ea0aa8eb6435d7c94456cae74f4b113bb2b45e834deae1dc7ed249b556f59c4e"
                },
                "downloads": -1,
                "filename": "turnstile-0.6.0.tar.gz",
                "has_sig": false,
                "md5_digest": "5c72cb6378f11d9409d73b11d184ff2f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 65684,
                "upload_time": "2012-08-30T17:22:25",
                "upload_time_iso_8601": "2012-08-30T17:22:25.714279Z",
                "url": "https://files.pythonhosted.org/packages/28/b9/4cc385bfb4b3d024d6965ee8130c2a60bc578930c2896cb2254981f4be39/turnstile-0.6.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.6.1": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.6.1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.6.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1745f066b19dd38b7a9e28c546bf3b93",
                    "sha256": "508f1d5ceb834a3be5feaaaefe2036f47790719bd6bdf136c67c4cd5605b1449"
                },
                "downloads": -1,
                "filename": "turnstile-0.6.1.tar.gz",
                "has_sig": false,
                "md5_digest": "1745f066b19dd38b7a9e28c546bf3b93",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 66587,
                "upload_time": "2012-10-02T21:24:15",
                "upload_time_iso_8601": "2012-10-02T21:24:15.345485Z",
                "url": "https://files.pythonhosted.org/packages/4d/71/57f0eb271e49f47b73b67e376647e55a4ee84e0328c9afac068ec80e7d83/turnstile-0.6.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.7.0b1": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.7.0b1/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.7.0b1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4b2188d78f4c096099a4a4e042d97835",
                    "sha256": "1008fa5fc2a4f1f098d4636f7f7b841193a130d07f3cf21b09d8e9f9cb424277"
                },
                "downloads": -1,
                "filename": "turnstile-0.7.0b1.tar.gz",
                "has_sig": false,
                "md5_digest": "4b2188d78f4c096099a4a4e042d97835",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 80325,
                "upload_time": "2013-04-01T15:19:25",
                "upload_time_iso_8601": "2013-04-01T15:19:25.474792Z",
                "url": "https://files.pythonhosted.org/packages/48/7f/8b0fef3c928c8cb1b2af7c9ac02eab6063d55812acc622c0a3103a608c5b/turnstile-0.7.0b1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.7.0b2": {
        "info": {
            "author": "Kevin L. Mitchell",
            "author_email": "kevin.mitchell@rackspace.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: Paste",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python",
                "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"
            ],
            "description": "==============================================\nTurnstile Distributed Rate-Limiting Middleware\n==============================================\n\nTurnstile is a piece of WSGI middleware that performs true distributed\nrate-limiting.  System administrators can run an API on multiple\nnodes, then place this middleware in the pipeline prior to the\napplication.  Turnstile uses a Redis database to track the rate at\nwhich users are hitting the API, and can then apply configured rate\nlimits, even if each request was made against a different API node.\n\nInstalling Turnstile\n====================\n\nTurnstile can be easily installed like many Python packages, using\n`PIP`_::\n\n    pip install turnstile\n\nYou can install the dependencies required by Turnstile by issuing the\nfollowing command::\n\n    pip install -r .requires\n\nFrom within your Turnstile source directory.\n\nIf you would like to run the tests, you can install the additional\ntest dependencies in the same way::\n\n    pip install -r .test-requires\n\nThen, to run the test suite, use::\n\n    nosetests -v\n\nAlternatively, it is possible to run the full test suite using a\nvirtual environment using the tox tool; this is the recommended way\nfor developers to run the test suite.  Four environments are defined:\n\"py26\" and \"py27\" run the tests under Python 2.6 and Python 2.7,\nrespectively; \"pep8\" runs the pep8 style compliance tool (which should\nonly be done by developers); and \"cover\" runs the test suite under the\ndefault Python installation, but with coverage enabled.  The coverage\nreport generated by the \"cover\" environment is summarized in the HTML\nfiles present in the \"cov_html\" subdirectory.  An example tox\ninvocation::\n\n    tox -e py27,pep8\n\nAdding and Configuring Turnstile\n================================\n\nTurnstile is intended for use with PasteDeploy-style configuration\nfiles.  It is a filter, and should be placed in an appropriate place\nin the WSGI pipeline such that the limit classes used with Turnstile\ncan access the information necessary to make rate-limiting decisions.\n(With the ``turnstile.limits:Limit`` class provided by Turnstile, no\nadditional information is required, as that class does not\ndifferentiate between users of your application.)\n\nThe filter section of the PasteDeploy configuration file will also\nneed to contain enough information to allow Turnstile to access the\nRedis database.  Other options may be configured from here as well,\nsuch as the ``enable`` configuration variable.  The simplest example\nof a Turnstile configuration would be::\n\n    [filter:turnstile]\n    use = egg:turnstile#turnstile\n    redis.host = <your Redis database host name or IP>\n\nThe following are the recognized configuration options:\n\ncompactor.compactor_key\n  Specifies the sorted set that the compactor daemon uses for\n  communication of buckets that need to be compacted.  (See below for\n  more information about the purpose of the compactor daemon.)  This\n  option defaults to \"compactor\".\n\ncompactor.compactor_lock\n  When multiple compactor daemons are being run, it is necessary to\n  serialize their access to the sorted set specified by\n  ``compactor.compactor_key``.  This option specifies a Redis key\n  containing the lock, and it defaults to \"compactor_lock\".\n\ncompactor.compactor_timeout\n  If a compactor daemon (or its host) crashes while holding the lock,\n  the lock will eventually time out, to allow other compactor daemons\n  to run.  This option specifies the timeout in seconds, and defaults\n  to 30.\n\ncompactor.max_age\n  The bucket processing logic adds special \"summarize\" records to the\n  bucket representation, to signal to other Turnstile instances that a\n  request to summarize the bucket has been submitted.  These records\n  must age for a minimum amount of time, to ensure that all Turnstile\n  instances have seen them, before the compactor daemon can run on the\n  bucket.  However, if the summarize request to the compactor daemon\n  is lost, there must be a timeout, to ensure that a new request to\n  summarize a given bucket may be submitted.  This option specifies a\n  maximum age for a \"summarize\" record, in seconds, and defaults to\n  600.\n\ncompactor.max_updates\n  The bucket processing logic adds special \"summarize\" records to the\n  bucket representation, to signal to other Turnstile instances that a\n  request to summarize the bucket has been submitted.  These requests\n  are generated when the number of update records in the bucket\n  representation exceed the value specified by this configuration\n  value.  This option must be specified to enable the compaction\n  logic; a good value would be 30.\n\ncompactor.min_age\n  The bucket processing logic adds special \"summarize\" records to the\n  bucket representation, to signal to other Turnstile instances that a\n  request to summarize the bucket has been submitted.  These records\n  must age for a minimum amount of time, to ensure that all Turnstile\n  instances have seen them, before the compactor daemon can run on the\n  bucket.  This option specifies the minimum age for a \"summarize\"\n  record, in seconds, and defaults to 30.\n\ncompactor.sleep\n  The compactor daemon reads bucket keys from a sorted set in the\n  Redis database.  If no keys are present, it will read from the\n  sorted set again, in a loop.  To ensure that the compactor daemon\n  does not consume too much CPU time, after each read that returns no\n  bucket to compact, it will sleep for the number of seconds defined\n  by this option.  The default is 5.\n\nconfig\n  Allows specification of an alternate configuration file.  This can\n  be used to generate a single file which can be shared by WSGI\n  servers using the Turnstile middleware and the various provided\n  tools.  This can also allow for separation of code-related options,\n  such as the ``enable`` option, from pure configuration, such as the\n  ``redis.host`` option.  The configuration file is an INI-formatted\n  file, with section names corresponding to the first segment of the\n  configuration option name.  That is, the ``redis.host`` option would\n  be set as follows::\n\n      [redis]\n      host = <your Redis database host name or IP>\n\n  Configuration options which have no prefix are grouped under the\n  ``[turnstile]`` section of the file, as follows::\n\n      [turnstile]\n      status = 404 Not Found\n\n  Note that specifying the ``config`` option in the ``[turnstile]``\n  section will have no effect; it is not possible to cause another\n  configuration file to be included in this way.\n\ncontrol.channel\n  Specifies the channel that the control daemon listens on.  (See\n  below for more information about the purpose of the control daemon.)\n  This option defaults to \"control\".\n\ncontrol.errors_channel\n  Specifies the channel that the control daemon (see below) reports\n  errors to.  This option defaults to \"errors\".\n\ncontrol.errors_key\n  Specifies the key of a set in the Redis database to which errors\n  will be stored.  This option defaults to \"errors\".\n\ncontrol.limits_key\n  The key under which the limits are stored in the database.  See the\n  section on tools for more information on how to load and dump the\n  limits stored in the Redis database.  This option defaults to\n  \"limits\".\n\ncontrol.node_name\n  The name of the node.  If provided, this option allows the\n  specification of a recognizable name for the node.  Currently, this\n  node name is only reported when issuing a \"ping\" command to the\n  control daemon (see below), and may be used to verify that all hosts\n  responded to the ping.\n\ncontrol.reload_spread\n  When limits are changed in the database, a command is sent to the\n  control daemon (see below) to cause the limits to be reloaded.  As\n  having all nodes hit the Redis database simultaneously may overload\n  the database, this option, if set, allows the reload to be spread\n  out randomly within a configured interval.  This option should be\n  set to the size of the desired interval, in seconds.  If not set,\n  limits will be reloaded immediately by all nodes.\n\ncontrol.remote\n  If set to \"on\", \"yes\", \"true\", or \"1\", Turnstile will connect to a\n  remote control daemon (see the ``remote_daemon`` tool described\n  below).  This enables Turnstile to be compatible with WSGI servers\n  which use multiple worker processes.  Note that the configuration\n  values ``control.remote.authkey``, ``control.remote.host``, and\n  ``control.remote.port`` are required.\n\ncontrol.remote.authkey\n  Set to an authentication key, for use when ``control.remote`` is\n  enabled.  Must be the value used by the invocation of\n  ``remote_daemon``.\n\ncontrol.remote.host\n  Set to a host name or IP address, for use when ``control.remote`` is\n  enabled.  Must be the value used by the invocation of\n  ``remote_daemon``.\n\ncontrol.remote.port\n  Set to a port number, for use when ``control.remote`` is enabled.\n  Must be the value used by the invocation of ``remote_daemon``.\n\ncontrol.shard_hint\n  Can be used to set a sharding hint which will be provided to the\n  listening thread of the control daemon (see below).  This hint is\n  not used by the default Redis ``Connection`` class.\n\nenable\n  Contains a list of ``turnstile.preprocessor`` and\n  ``turnstile.postprocessor`` entrypoint names.  Each name is resolved\n  into a preprocessor and postprocessor function (missing entrypoints\n  are ignored) and installed, as with the ``preprocess`` and\n  ``postprocess`` configuration options.  Note that the postprocessors\n  will be in the reverse ordering of the list contained in this\n  option.  See the section on entrypoints for more information.\n\n  Note that, if ``enable`` is used, ``preprocess`` and ``postprocess``\n  will be ignored.\n\nformatter\n  In previous versions of Turnstile, the only way to change the way\n  the delay response was generated was to subclass\n  ``turnstile.middleware.TurnstileMiddleware`` and override the\n  ``format_delay()`` method; this subclass could then be used by\n  specifying it as the value of the ``turnstile`` option.  This\n  version now allows the formatter to be explicitly specified, using\n  this option.\n\n  Searches for the formatter in the ``turnstile.formatter`` entrypoint\n  group; see the section on entrypoints for more information.\n\npostprocess\n  Contains a list of postprocessor functions.  During each request,\n  each postprocessor will be called in turn, with the middleware\n  object (from which can be obtained the database handle, as well as\n  the configuration) and the request environment as arguments.  Note\n  that any exceptions thrown by the postprocessors will not be caught,\n  and request processing will be halted; this will likely result in a\n  500 error being returned to the user.  Postprocessors are only run\n  after processing all limits; most applications will not need to\n  install a postprocessor.\n\n  Searches for the postprocessor in the ``turnstile.postprocessor``\n  entrypoint group; see the section on entrypoints for more\n  information.\n\n  Note that, if ``enable`` is used, this option will be ignored.\n\npreprocess\n  Contains a list of preprocessor functions.  During each request,\n  each preprocessor will be called in turn, with the middleware object\n  (from which can be obtained the database handle, as well as the\n  configuration) and the request environment as arguments.  Note that\n  any exceptions thrown by the preprocessors will not be caught, and\n  request processing will be halted; this will likely result in a 500\n  error being returned to the user.  Preprocessors are run before\n  processing the limits.\n\n  Searches for the preprocessor in the ``turnstile.preprocessor``\n  entrypoint group; see the section on entrypoints for more\n  information.\n\n  Note that, if ``enable`` is used, this option will be ignored.\n\nredis.connection_pool\n  Identifies the connection pool class to use.  If not provided,\n  defaults to ``redis.ConnectionPool``.  This may be used to allow\n  client-side sharding of the Redis database.\n\n  Searches for the connection pool class in the\n  ``turnstile.connection_pool`` entrypoint group; see the section on\n  entrypoints for more information.\n\nredis.connection_pool.connection_class\n  Identifies the connection class to use.  If not provided, the\n  appropriate ``redis.Connection`` subclass for the configured\n  connection is used (``redis.Connection`` if ``redis.host`` is\n  specified, else ``redis.UnixDomainSocketConnection``).\n\n  Searches for the connection class in the\n  ``turnstile.connection_class`` entrypoint group; see the section on\n  entrypoints for more information.\n\nredis.connection_pool.max_connections\n  Allows specification of the maximum number of connections to the\n  Redis database.  Optional.\n\nredis.connection_pool.parser_class\n  Identifies the parser class to use.  Optional.  This is an advanced\n  feature of the ``redis`` package used by Turnstile.\n\n  Searches for the parser class in the ``turnstile.parser_class``\n  entrypoint group; see the section on entrypoints for more\n  information.\n\nredis.connection_pool.*\n  Any other configuration value provided in the\n  ``redis.connection_pool.`` hierarchy will be passed as keyword\n  arguments to the configured connection pool class.  Note that the\n  values will be passed as strings.\n\nredis.db\n  Identifies the specific sub-database of the Redis database to be\n  used by Turnstile.  If not provided, defaults to 0.\n\nredis.host\n  Identifies the host name or IP address of the Redis database to\n  connect to.  Either ``redis.host`` or ``redis.unix_socket_path``\n  must be provided.\n\nredis.password\n  If the Redis database has been configured to use a password, this\n  option allows that password to be specified.\n\nredis.port\n  Identifies the port the Redis database is listening on.  If not\n  provided, defaults to 6379.\n\nredis.redis_client\n  Identifies a ``redis.StrictRedis`` subclass or analog, which will be\n  used as the client library for communicating with the Redis\n  database.  This allows alternate clients which support clustering or\n  sharding to be used by Turnstile.\n\n  Searches for the client class in the ``turnstile.redis_client``\n  entrypoint group; see the section on entrypoints for more\n  information.\n\nredis.socket_timeout\n  If provided, specifies an integer socket timeout for the Redis\n  database connection.\n\nredis.unix_socket_path\n  Names the UNIX socket on the local host for the local Redis database\n  to connect to.  Either ``redis.host`` or ``redis.unix_socket_path``\n  must be provided.\n\nstatus\n  Contains the status code to return if rate limiting is tripped.\n  This defaults to \"413 Request Entity Too Large\".  Note that this\n  value must start with the 3-digit HTTP code, followed by a space and\n  the text corresponding to that status code.  Also note that,\n  regardless of the status code, Turnstile will include the\n  ``Retry-After`` header in the response.  (The value of the\n  ``Retry-After`` header will be the integer number of seconds until\n  the request can be retried.)\n\nturnstile\n  If set, identifies an alternate class to use for the Turnstile\n  middleware.  This can be used in conjunction with subclassing\n  ``turnstile.middleware:TurnstileMiddleware``, which may be done to\n  override how over-limit conditions are formatted.\n\n  Searches for the middleware class in the ``turnstile.middleware``\n  entrypoint group; see the section on entrypoints for more\n  information.\n\n  This option is deprecated.  To override the delay formatting\n  function, use the ``formatter`` option.\n\nOther configuration values are available to the preprocessors, the\npostprocessors, the delay formatters, and the\n``turnstile.limits:Limit`` subclasses, but extreme care should be\ntaken that such configurations remain in sync across the entire\ncluster.\n\nEntrypoints\n===========\n\nTurnstile takes many options which allow functions or classes to be\nspecified, as indicated above.  All of these options expect their\nvalues to be given in one of two forms.  The first form, which was the\nonly valid format for older versions of Turnstile, is the\n\"module:name\" format.  However, Turnstile now has support for the\n``pkg_resources`` \"entrypoint\" abstraction, which allows packages to\ndefine a set of entrypoints.  Entrypoints are organized into groups,\nall having a similar interface; and each entrypoint has a given name.\nTo use a function or class which has a declared entrypoint, simply use\nthe name of that entrypoint.  (Note that names are prohibited from\ncontaining colons, to distinguish between the two formats.)\n\nThe following entrypoint groups are recognized by Turnstile:\n\nturnstile.command\n  The control daemon accepts commands from remote callers.  One of\n  these commands is the \"reload\" command, which causes Turnstile to\n  reload the limits configuration from the Redis database.  A second\n  built-in command is the \"ping\" command, which can be used to ensure\n  all Turnstile instances are receiving command messages.  It is\n  possible to create additional commands by associating the command\n  string with a function under this entrypoint group.  The function\n  has the following signature::\n\n      def func(daemon, *args):\n          pass\n\n  The first argument will be the actual control daemon (which could be\n  either a ``turnstile.control.ControlDaemon`` or a\n  ``turnstile.remote.RemoteControlDaemon``); the remaining arguments\n  are the arguments passed to the command.  See the\n  ``turnstile-command`` tool for a way to submit arbitrary commands of\n  this form.\n\nturnstile.connection_class\n  The default Redis database client uses either a\n  ``redis.UnixDomainSocketConnection`` or a ``redis.Connection``\n  object to maintain the connection to the Redis database.  The\n  ``redis.connection_pool.connection_class`` configuration value\n  allows this default to be overridden.  Alternate classes will be\n  searched for in this entrypoint group, if there is no colon (\":\")\n  present in the configuration value.  See the documentation for\n  ``redis.Connection`` for details on this interface.\n\nturnstile.connection_pool\n  The default Redis database client maintains connections in a pool,\n  maintained as a ``redis.ConnectionPool`` object.  The\n  ``redis.connection_pool`` configuration value allows this default to\n  be overridden.  Alternate classes will be searched for in this\n  entrypoint group, if there is no colon (\":\") present in the\n  configuration value.  See the documentation for\n  ``redis.ConnectionPool`` for details on this interface.\n\nturnstile.formatter\n  When the rate limiting logic determines that the request is\n  rate-limited, Turnstile generates a response indicating that the\n  REST client should try again after a certain delay.  This response\n  can be formatted in any desired way by using the ``formatter``\n  configuration option to specify an alternate function, which will be\n  searched for under this entrypoint group.  The formatter function\n  has the following signature::\n\n      def formatter(status, delay, limit, bucket, environ, start_response):\n          pass\n\n  The ``status`` is the configured status code for this Turnstile\n  instance.  The ``delay`` is a float value, specifying the length of\n  the required delay in seconds.  The ``limit`` and ``bucket`` values\n  specify the actual underlying ``turnstile.limits.Limit`` and\n  ``turnstile.limits.Bucket`` subclasses associated with that delay;\n  alternate formatters can use the ``turnstile.limits.Limit.format()``\n  method to obtain a status and result entity specific for that limit.\n  Finally, ``environ`` and ``start_response`` come from the WSGI\n  pipeline; additional Turnstile configuration values can be retrieved\n  from the ``turnstile.conf`` key in ``environ``.\n\nturnstile.limit\n  The ``setup_limits`` tool reads the limits configuration from an XML\n  file.  In that file, each limit has an associated limit class,\n  specified by the \"class\" attribute of the ``<limit>`` element.  When\n  dumped using the ``dump_limits`` tool, this attribute will always be\n  a \"module:class\" pair, but ``setup_limits`` recognizes short names,\n  which will be searched for in this entrypoint group.  See the\n  documentation for ``turnstile.limits.Limit`` for details on this\n  interface.\n\nturnstile.middleware\n  Older versions of Turnstile allowed the formatter to be configured\n  by subclassing ``turnstile.middleware.TurnstileMiddleware`` and\n  overriding the ``format_delay()`` method.  Although this is now\n  deprecated, it is still possible, using the ``turnstile`` option in\n  the configuration, to specify a subclass of ``TurnstileMiddleware``\n  that ``turnstile.middleware.turnstile_filter()`` should use.  When\n  no colon (\":\") is present in the ``turnstile`` configuration value,\n  this is the entrypoint group that will be searched.  See the\n  documentation for ``TurnstileMiddleware`` for details on this\n  interface.\n\nturnstile.parser_class\n  The default Redis database client uses either a\n  ``redis.connection.PythonParser`` or a\n  ``redis.connection.HiredisParser`` object to parse the data stream\n  from the Redis database.  The ``redis.connection_pool.parser_class``\n  configuration value allows this default to be overridden.  Alternate\n  classes will be searched for in this entrypoint group, if there is\n  no colon (\":\") present in the configuration value.  See the\n  documentation for ``redis.connection.PythonParser`` for details on\n  this interface.\n\nturnstile.postprocessor\n  Postprocessors run immediately after searching all the limits and\n  verifying that the request should not be rate-limited.  (They will\n  not be run if the request is rate-limited.)  They can be specified\n  using either the ``postprocess`` or ``enable`` configuration\n  options.  The postprocessor function has the following signature::\n\n      def proc(middleware, environ)\n          pass\n\n  The first argument is the actual middleware object, from which the\n  configuration can be retrieved; the second argument is the WSGI\n  environment.\n\nturnstile.preprocessor\n  Preprocessors run immediately before searching all the limits.  They\n  can be specified using either the ``preprocess`` or ``enable``\n  configuration options.  The preprocessor function has the following\n  signature::\n\n      def proc(middleware, environ)\n          pass\n\n  The first argument is the actual middleware object, from which the\n  configuration can be retrieved; the second argument is the WSGI\n  environment.\n\nturnstile.redis_client\n  By default, Turnstile uses a ``redis.StrictRedis`` object to\n  communicate with the Redis database.  The ``redis.redis_client``\n  configuration value allows this default to be overridden.  Alternate\n  classes will be searched for in this entrypoint group, if there is\n  no colon (\":\") present in the configuration value.  See the\n  documentation for ``redis.StrictRedis`` for details on this\n  interface.\n\nThe Control Daemon\n==================\n\nTurnstile stores the limits configuration in the Redis database, in\naddition to the ephemeral information used to check and enforce the\nrate limits.  This makes it possible to change the limits dynamically\nfrom a single, central location.  In order to facilitate such changes,\neach Turnstile instance uses an eventlet thread to run a \"control\ndaemon.\"  The control daemon uses the publish/subscribe support\nprovided by Redis to listen for commands, of which two are currently\nrecognized: ping and reload.\n\nSome WSGI servers cannot use Turnstile in this mode, due to using\nmultiple processes (typically through use of the \"multiprocessing\"\nPython module).  In these circumstances, the control daemon may be\nstarted in its own process (see the ``remote_daemon`` tool).  Enabling\nthis requires that the ``control.remote`` configuration option be\nturned on, and values provided for ``control.remote.authkey``,\n``control.remote.host``, and ``control.remote.port``.  See the\ndocumentation for these options for more information.\n\nIt is possible to configure the listening thread of the control daemon\nto use alternate configuration for connecting to the Redis database.\nThe defaults will be drawn from the ``[redis]`` section of the\nconfiguration, but by specifying ``redis.*`` options in the\n``[control]`` section of the configuration, specific values may be\noverridden.\n\nThe Ping Command\n----------------\n\nThe \"ping\" command is the simplest of the control daemon commands.  In\nits simplest form, the message \"ping:<channel>\" is written to the control\nchannel, which will cause all running Turnstile instances to return\nthe message \"pong\" to the specified channel.  If the\n``control.node_name`` configuration option has been set, this node\nname will be included in the response, as \"pong:<node name>\".\nFinally, additional data (such as a timestamp) can be included in the\n\"ping\" command, as in the message \"ping:<channel>:<timestamp>\"; this\ndata will be appended to the response, i.e., \"pong:<node\nname>:<timestamp>\".  This could be used to verify that all nodes are\nresponding and not too heavily loaded.\n\n(Note that if ``control.node_name`` is not specified, the response to\na \"ping\" command containing additional data such as a timestamp will\nbe \"pong::<timestamp>\".)\n\nNote that, at present, no tool exists for sending pings or receiving\npongs.\n\nThe Reload Command\n------------------\n\nThe \"reload\" command is the real reason for the existence of the\ncontrol daemon.  This command causes the current set of limits to be\nreloaded from the database and presented to the middleware for\nenforcement.\n\nThe simplest form of the reload command is simply, \"reload\".  If the\n``control.reload_spread`` configuration option was set, the reload\nwill be scheduled for some time within the configured time interval;\notherwise, it will be performed immediately.\n\nThe next simplest form of the reload command is \"reload:immediate\".\nThis causes an immediate reload of the limits, overriding any\nconfigured time spread.\n\nThe final form of the reload command is \"reload:spread:<interval>\",\nwhere the \"<interval>\" specifies a time interval, in seconds, over\nwhich to spread reloading of the limits.  This specified interval is\nused in preference to that specified by ``control.reload_spread``, if\nset.\n\nNote that the ``setup_limits`` tool automatically initiates a reload\nonce the limits are updated in the database.  See the section on tools\nfor more information.\n\nThe Compactor Daemon\n====================\n\nThis version of Turnstile includes scalability enhancements which\nchange how bucket data is stored in the Redis database.  This\neliminates the need for transactions--enabling various Redis\nclustering tools to be used--but at the cost of increased storage for\nthe bucket data.  Buckets are now stored as lists of records; each\nrequest processed by Turnstile results in the addition of an \"update\"\nrecord to the bucket representation.  Then, to determine whether the\nrequest should be rate-limited, the bucket is reconstructed by\napplying all of the updates.\n\nTo prevent this list of records from growing without bound, the rate\nlimiting logic includes a mechanism for triggering the compaction of a\nbucket--many of these update records are compacted into a single\n\"bucket\" record.  This is triggered by setting a non-zero value for\nthe ``compactor.max_updates`` configuration option.  When the number\nof update records exceeds this threshold, a signal will be sent to the\ncompactor daemon, which performs the actual compaction algorithm.\n\nThe compaction logic works by adding special \"summarize\" records to\nthe bucket representation and placing the bucket's key into a special\nsorted set.  The compactor daemon allows these entries in the sorted\nset to age for a given period of time (under control of\n``compactor.min_age``). Although no new summarize records will be\nadded to the bucket representation if one is already present, there is\nthe potential for multiple Turnstile instances to add one\nsimultaneously; this aging allows all Turnstile instances to see that\na summarize request is in progress.\n\nOnce a summarize request has aged sufficiently, the compactor daemon\nwill perform the compaction and insert the resulting bucket back into\nthe list representation.  It then eliminates the now-extraneous update\nrecords.\n\nIf a summarize request is lost, due to a compactor daemon (or its\nhost) crashing, the summarize records in the bucket representation\nhave a maximum age as well; once the record exceeds its maximum age, a\nnew summarize request will be generated.\n\nTurnstile Tools\n===============\n\nThe limits are stored in the Redis database using a sorted set, and\nthey are encoded using Msgpack.  (Although the Msgpack format is not\nhuman-readable, it is very space and time efficient, which is why it\nwas chosen for this application.)  This makes manual management of the\nlimits configuration more difficult, and so Turnstile ships with two\ntools to make management of the rate limiting configuration easier.  A\nthird tool starts up a remote control daemon, for use when Turnstile\nis used with applications that run multiple processes, such as the\n``nova-api`` component of OpenStack.\n\nThe ``compactor_daemon`` Tool\n-----------------------------\n\nThe ``compactor_daemon`` tool may be used to start a compactor daemon\nprocess.  This tool requires the name of an INI-style configuration\nfile; see the section on configuring the tools below for more\ninformation.\n\nA usage summary for ``compactor_daemon``::\n\n    usage: compactor_daemon [-h] [--log-config LOGGING] [--debug] config\n\n    Run the compactor daemon.\n\n    positional arguments:\n      config                Name of the configuration file.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --log-config LOGGING, -l LOGGING\n                            Specify a logging configuration file.\n      --debug, -d           Run the tool in debug mode.\n\nThe ``dump_limits`` Tool\n------------------------\n\nThe ``dump_limits`` tool may be used to dump the current limits in the\ndatabase into an XML representation.  This tool requires the name of\nan INI-style configuration file; see the section on configuring the\ntools below for more information.\n\nA usage summary for ``dump_limits``::\n\n    usage: dump_limits [-h] [--debug] config limits_file\n\n    Dump the current limits from the Redis database.\n\n    positional arguments:\n      config       Name of the configuration file, for connecting to the Redis\n                   database.\n      limits_file  Name of the XML file that the limits will be dumped to.\n\n    optional arguments:\n      -h, --help   show this help message and exit\n      --debug, -d  Run the tool in debug mode.\n\nThe ``remote_daemon`` Tool\n--------------------------\n\nThe ``remote_daemon`` tool may be used to start a separate control\ndaemon process.  This tool requires the name of an INI-style\nconfiguration file; see the section on configuring the tools below for\nmore information.  Note that, in addition to the required Redis\nconfiguration values, configuration values for the\n``control.remote.authkey``, ``control.remote.host``, and\n``control.remotes.port`` options must be provided.\n\nA usage summary for ``remote_daemon``::\n\n    usage: remote_daemon [-h] [--log-config LOGGING] [--debug] config\n\n    Run the external control daemon.\n\n    positional arguments:\n      config                Name of the configuration file.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --log-config LOGGING, -l LOGGING\n                            Specify a logging configuration file.\n      --debug, -d           Run the tool in debug mode.\n\nThe ``setup_limits`` Tool\n-------------------------\n\nThe ``setup_limits`` tool may be used to read an XML file (such as\nthat produced by ``dump_limits``) and load the rate limiting\nconfiguration into the Redis database.  This tool requires the name of\nan INI-style configuration file; see the section on configuring the\ntools below for more information.\n\nA usage summary for ``setup_limits``::\n\n    usage: setup_limits [-h] [--debug] [--dryrun] [--noreload]\n                        [--reload-immediate] [--reload-spread SECS]\n                        config limits_file\n\n    Set up or update limits in the Redis database.\n\n    positional arguments:\n      config                Name of the configuration file, for connecting to the\n                            Redis database.\n      limits_file           Name of the XML file describing the limits to\n                            configure.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --debug, -d           Run the tool in debug mode.\n      --dryrun, --dry_run, --dry-run, -n\n                            Perform a dry run; inhibits loading data into the\n                            database.\n      --noreload, -R        Inhibit issuing a reload command.\n      --reload-immediate, -r\n                            Cause all nodes to immediately reload the limits\n                            configuration.\n      --reload-spread SECS, -s SECS\n                            Cause all nodes to reload the limits configuration\n                            over the specified number of seconds.\n\nThe ``turnstile_command`` Tool\n------------------------------\n\nThe ``turnstile_command`` tool may be used to send arbitrary commands\nto all running control daemons.  This tool requires the name of an\nINI-style configuration file; see the section on configuring the tools\nbelow for more information.\n\nA usage summary for ``turnstile_command``::\n\n    usage: turnstile_command [-h] [--listen CHANNEL] [--debug]\n                             config command [arguments [arguments ...]]\n\n    Issue a command to all running control daemons.\n\n    positional arguments:\n      config                Name of the configuration file.\n      command               The command to execute. Note that 'ping' is handled\n                            specially; in particular, the --listen parameter is\n                            implied.\n      arguments             The arguments to pass for the command. Note that the\n                            colon character (':') cannot be used.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --listen CHANNEL, -l CHANNEL\n                            A channel to listen on for the command responses. Use\n                            C-c (or your systems keyboard interrupt sequence) to\n                            stop waiting for responses.\n      --debug, -d           Run the tool in debug mode.\n\nConfiguring the Tools\n---------------------\n\nAll of the tools require an INI-style configuration file, which\nspecifies how to connect to the Redis database.  This file should\ncontain the section \"[redis]\" and should be populated with the same\n\"redis.*\" options as the PasteDeploy configuration file, minus the\n\"redis.\" prefix.  For example::\n\n    [redis]\n    host = <your Redis database host name or IP>\n\nEach \"redis.*\" option recognized by the Turnstile middleware is\nunderstood by the tools.\n\nAdditional options may be provided, such as the control channel,\nlimits key, and the ``compactor_daemon`` and ``remote_daemon``\noptions.  The configuration file should be compatible with the\nalternate configuration file described under the ``config``\nconfiguration option for the Turnstile middleware.\n\nRate Limit XML\n--------------\n\nThe XML file used for expressing rate limit configuration is\nrelatively straightforward, or at least as straightforward as XML can\nbe.  The top-level element is ``<limits>``; this should contain a\nsequence of ``<limit>`` elements, each containing a number of\n``<attr>`` elements.  The specific attributes available for any given\nlimit class depend on the exact class, but that information is\ndocumented in the ``attrs`` attribute of the limit class.  (This\ninformation is suitable for introspection.)\n\nThe ``<limit>`` element has one XML attribute which must be specified:\nthe ``class`` attribute, which must identify the desired limit class.\nThis value must be specified either as a \"module:class\" string, or a\nsingle name corresponding to a \"turnstile.limit\" entrypoint group.\nThe ``<attr>`` element also has a single XML attribute which must be\nset: ``name``, which identifies the name of the Limit attribute.  The\ncontents of the ``<attr>`` element identify the value for the named\nattribute.\n\nSome limit attributes are lists; for these attributes, the ``<attr>``\nelement must contain one or more ``<value>`` elements, whose contents\nidentify a single item in the attribute list.  Other limit attributes\nare dictionaries; for these attributes, again the ``<attr>`` element\nmust contain one or more ``<value>`` elements, but now those\n``<value>`` elements must have the XML attribute ``key`` set to the\ndictionary key corresponding to that value.\n\nAs an example, consider the following limits configuration::\n\n    <?xml version='1.0' encoding='UTF-8'?>\n    <limits>\n      <limit class=\"turnstile.limits:Limit\">\n        <attr name=\"requirements\">\n\t  <value key=\"pageid\">[0-9]+</value>\n\t</attr>\n        <attr name=\"unit\">second</attr>\n\t<attr name=\"uri\">/page/{pageid}</attr>\n\t<attr name=\"value\">10</attr>\n\t<attr name=\"verbs\">\n\t  <value>GET</value>\n\t</attr>\n      </limit>\n    </limits>\n\nIn this example, GET access to ``/page/{pageid}`` is rate-limited to\n10 per second.  The ``requirements`` attribute may be used to specify\nregular expressions to tune the matching of URI components; in this\ncase, the ``{pageid}`` value must be composed of 1 or more digits.\nThe limit class used is the basic ``turnstile.limits:Limit`` limit\nclass.\n\nCustom Limit Classes\n====================\n\nAll limit classes must descend from ``turnstile.limits:Limit``.  This\nadmittedly un-Pythonic requirement has a number of advantages,\nincluding the specific machinery which allows limits to be stored into\nthe Redis database.  Most limit classes only need to worry about the\n``attrs`` class attribute and the ``filter()`` method, although the\n``route()`` and ``format()`` methods may also be hooked.  For more\ninformation about these methods, see the docstrings provided for their\ndefault implementations in ``turnstile.limits:Limit``.\n\nAccessing the Turnstile Configuration\n=====================================\n\nThe Turnstile configuration is available to preprocessors and to the\nLimit classes.  For preprocessors, it is available directly from the\nmiddleware object (the first passed parameter) via the ``config``\nattribute.  (The database handle is also available via the ``db``\nattribute, should access to the database be required.)  For the\n``filter()`` method of the Limit classes, the configuration is\navailable in the request environment under the ``turnstile.conf`` key.\n\nThe Turnstile configuration is represented as a\n``turnstile.config:Config`` object.  Configuration keys that do not\ncontain a \".\" are available as attributes of this object; for example,\nto obtain the configured status value, assuming the Turnstile\nconfiguration is available in the ``conf`` variable, the correct code\nwould be::\n\n    status = conf.status\n\nFor those configuration keys which do contain a \".\", the part of the\nname to the left of the first \".\" becomes a dictionary key, and the\nremainder of the name will be a second key.  For example, to access\nthe value of the ``redis.connection_pool.connection_class`` variable,\nthe correct code would be::\n\n    connection_class = config['redis']['connection_pool.connection_class']\n\nAll values in the configuration are stored as strings.  Configuration\nvalues do not need to be pre-declared in any way; Turnstile ignores\n(but maintains) configuration values that it does not use, making\nthese values available for use by preprocessors and Limit subclasses.\n\nFor convenience, the ``turnstile.config:Config`` class offers a static\nmethod ``to_bool()`` which can convert a string value to a boolean\nvalue.  The strings \"t\", \"true\", \"on\", \"y\", and \"yes\" are all\nrecognized as a boolean ``True`` value, as are numeric strings which\nevaluate to non-zero values.  The strings \"f\", \"false\", \"off\", \"n\",\nand \"no\" are all recognized as a boolean ``False`` value, as are\nnumeric strings which evaluate to zero values.  Any other string value\nwill cause ``to_bool()`` to raise a ``ValueError``, unless the\n``do_raise`` argument is given as ``False``, in which case\n``to_bool()`` will return a boolean ``False`` value.\n\nDetermining User Buckets\n========================\n\nSome applications need to be able to inform the user of the next time\nthey are able to make a call against a given URI, often as a part of\nlisting the limits applying to that user.  This entails access to the\nbucket data for that user.  Under previous versions of Turnstile, this\ncould only be accomplished by using the Redis \"KEYS\" command, which is\nmost definitely not scalable.  A new feature in Turnstile allows\npreprocessors to add the name of a sorted set in the WSGI environment\nvariable ``turnstile.bucket_set``; if this environment variable is set\nwhen a limit is processed, it will store the bucket key that was used\ninto the named sorted set.  The score used for this will be the\nexpiration time for the bucket, which can be used to eliminate entries\nfor buckets that have expired from the database.\n\nApplications that have this requirement should implement both a\npreprocessor and a postprocessor; the preprocessor should set\n``turnstile.bucket_set`` to an appropriate value, and the\npostprocessor should trim off the outdated entries from the named\nsorted set and load the buckets, performing whatever processing is\nnecessary to make the data available to the application.\n\nBackwards Compatibility and Interoperability\n============================================\n\nThis version of Turnstile includes several enhancements, such as the\naddition of postprocessors and the ``enable`` configuration value.\nFor the vast majority of these enhancements, backwards compatibility\nhas been preserved; if you see an issue caused by lack of backwards\ncompatibility, please log it as a bug.\n\nThere are, however, several features that have been deprecated in\nprevious versions of Turnstile which are now removed; these are listed\nbelow:\n\n* The special treatment of the ``[connection]`` section of the\n  configuration is removed; users should use the options in the\n  ``[redis]`` and ``[control]`` sections.\n* The ``turnstile.config`` variable in the WSGI environment is\n  removed; users should use the ``turnstile.conf`` variable instead.\n* The ``config`` property of the middleware object is removed; users\n  should use the ``conf`` attribute instead.\n* The ``import_class()`` function of ``turnstile.utils`` is removed;\n  users should use the ``find_entrypoint()`` function instead.\n* The ``TurnstileRedis`` class of ``turnstile.database`` is removed,\n  along with its ``safe_update()``, ``limit_update()``, and\n  ``command()`` methods.  The latter two have been replaced by\n  ``limit_update()`` and ``command()`` functions declared in the\n  ``turnstile.database`` module.  There is no replacement for\n  ``safe_update()``.\n\nThe following features have been deprecated and will be removed in\nfuture versions of Turnstile:\n\n* Overriding the ``TurnstileMiddleware`` class with the ``turnstile``\n  configuration option is deprecated; users should use the\n  ``formatter`` option to override delay formatting.\n* The ``decode()`` method of ``Limit`` classes is deprecated.  Use the\n  ``BucketKey`` class in ``turnstile.limits`` to decode bucket keys.\n* Except for the ``setup_limits`` tool's XML input file, the\n  specification of functions and classes using \"module:function\" or\n  \"module:class\" syntax is deprecated; Turnstile is moving to a\n  ``pkg_resources`` entrypoint-based approach.  See the section on\n  entrypoints above for more information.\n\nInteroperability with Older Versions of Turnstile\n-------------------------------------------------\n\nThis version of Turnstile is not completely interoperable with older\nversions of Turnstile.  Care has been taken to ensure that both new\nand old instances of Turnstile can run against the same database;\nhowever, the old versions cannot load bucket data from new versions\nand vice versa.  Thus, users should only be running both versions\nduring a transitional period; avoid running both versions for an\nextended period of time.\n\nThe bucket storage format has changed; the new format enhances\nTurnstile's scalability by eliminating the use of transactions when\nstoring bucket data.  To allow for a phased transition to a new\nversion of Turnstile, the bucket keys have also changed.  The result\nof this is that rate-limits are applied to users hitting the new\nversion of Turnstile independently of those applied to users hitting\nthe old version.  This means that a user may be able to make twice as\nmany requests as permitted by the rate limits.  An expedited\ntransition to the new version of Turnstile will address this problem.\n\n.. _PIP: http://www.pip-installer.org/en/latest/index.html",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "UNKNOWN",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/klmitch/turnstile",
            "keywords": null,
            "license": "Apache License (2.0)",
            "maintainer": null,
            "maintainer_email": null,
            "name": "turnstile",
            "package_url": "https://pypi.org/project/turnstile/",
            "platform": "UNKNOWN",
            "project_url": "https://pypi.org/project/turnstile/",
            "project_urls": {
                "Download": "UNKNOWN",
                "Homepage": "https://github.com/klmitch/turnstile"
            },
            "release_url": "https://pypi.org/project/turnstile/0.7.0b2/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Distributed rate-limiting middleware",
            "version": "0.7.0b2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 801009,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6de1c3c4c4f963a4a8904157cbaffd95",
                    "sha256": "00336d4a542d59efab200d38ea0208c363f5df25d407dfb9ffe48dff865121c7"
                },
                "downloads": -1,
                "filename": "turnstile-0.7.0b2.tar.gz",
                "has_sig": false,
                "md5_digest": "6de1c3c4c4f963a4a8904157cbaffd95",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 80664,
                "upload_time": "2013-05-01T22:21:53",
                "upload_time_iso_8601": "2013-05-01T22:21:53.639832Z",
                "url": "https://files.pythonhosted.org/packages/a1/fe/4ac621dc4f25fae25aa8b92f4904b04e0cfa6b3bc490ff948e965b95de7e/turnstile-0.7.0b2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}