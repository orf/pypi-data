{
    "0.1": {
        "info": {
            "author": "lookis<Jingsi Liu>",
            "author_email": "lookisliu@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "## livetrader\n\n### \u4ecb\u7ecd\nlivetrader \u662f\u4e00\u4e2a\u6574\u5408\u4e86\u884c\u60c5\u548c\u4ea4\u6613\u63a5\u53e3\u7684\u5de5\u5177\u94fe\u3002\u73b0\u5728\u5df2\u7ecf\u6709\u5f88\u591a\u6bd4\u8f83\u6210\u719f\u7684\u4ea4\u6613\u6846\u67b6\u4e86\uff0c\u6bd4\u65b9\u8bf4 [vnpy](https://github.com/vnpy/vnpy)\u3001[quantaxis](https://github.com/QUANTAXIS/QUANTAXIS)\u3001[backtrader](https://github.com/mementum/backtrader)\u3001[zipline](https://github.com/quantopian/zipline)\u7b49\uff0c\u4f46\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u8fd9\u4e9b\u6846\u67b6\u90fd\u6ca1\u6709\u5f88\u597d\u5730\u89e3\u51b3\u7684\uff0c\u90a3\u5c31\u662f\uff1a\u4e0d\u540c\u6846\u67b6\u5bf9\u5b9e\u76d8\u884c\u60c5\u3001\u5b9e\u76d8\u4ea4\u6613\u7684\u652f\u6301\u90fd\u4e0d\u662f\u5f88\u5b8c\u6574\u3002\n\n\u6bd4\u65b9\u8bf4 vnpy \u7684[\u4ea4\u6613\u63a5\u53e3](https://www.vnpy.com/docs/cn/gateway.html#id7)\u4e3b\u8981\u96c6\u4e2d\u5728\u6570\u5b57\u8d27\u5e01\u3001\u671f\u8d27\u4e0a\uff0c\u5bf9\u4e8e\u5916\u6c47\u53ea\u6709 MT5 \u7684\u63a5\u53e3\uff0c\u5bf9\u4e8e\u7f8e\u80a1\u4e5f\u662f\u53ea\u6709\u5bcc\u9014\u8bc1\u5238\u3002\u518d\u6bd4\u65b9\u8bf4 quantaxis \u4e5f\u4e3b\u8981\u96c6\u4e2d\u5728 A\u80a1\u548c\u671f\u8d27\u4e4b\u4e0a\uff08[\u94fe\u63a5](https://doc.yutiansut.com/datafetch)\uff09\uff0c\u5bf9\u4e8e\u5b9e\u76d8\u4ea4\u6613\u63a5\u53e3\u90e8\u5206\u56e0\u4e3a\u4e86\u89e3\u7684\u4e0d\u591a\uff0c\u6240\u4ee5\u4e0d\u505a\u8fc7\u591a\u8bc4\u4ef7\uff0c\u4f46\u5c31\u770b\u6587\u6863\u800c\u8a00\uff0c\u597d\u4f3c\u5e76\u6ca1\u6709\u627e\u5230\u5b9e\u76d8\u7684\u652f\u6301\u3002\u66f4\u522b\u8bf4\u56fd\u5916\u7684\u51e0\u4e2a\u6846\u67b6\u4e86 backtrader\u3001zipline \u7684\u5b9e\u76d8\u57fa\u672c\u4e0a\u5c31\u53ea\u6709 \u76c8\u900f(\u7f8e\u80a1)\u3001oanda(\u5916\u6c47) \u8fd9\u4e24 broker \u7684\u652f\u6301\u3002\n\n\u8fd9\u6837\u5c31\u4f1a\u8ba9\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u5982\u679c\u6211\u4eec\u662f\u4e00\u4e2a\u5355\u7b56\u7565\u3001\u591a\u54c1\u79cd\u7684\u4ea4\u6613\u6a21\u5f0f\u7684\u8bdd\uff0c\u5982\u679c\u8981\u8986\u76d6\u6240\u6709\u7684\u53ef\u7a0b\u5e8f\u5316\u4ea4\u6613\u7684 \u671f\u8d27\u3001\u7f8e\u80a1\u3001\u5916\u6c47\u3001\u6570\u5b57\u8d27\u5e01 \u5c31\u9700\u8981\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u4e0a\u7ef4\u62a4\u591a\u4efd\u4ee3\u7801\uff0c\u60f3\u8981\u4ea4\u6613MT4\u7684\uff0c\u5c31\u53ea\u80fd\u4f7f\u7528 MQL \u8bed\u8a00\u7f16\u5199\u7b56\u7565\uff0c\u60f3\u8981\u4ea4\u6613\u7f8e\u80a1\u76c8\u900f\u8bc1\u5238\u7684\uff0c\u5c31\u9700\u8981\u7528 backtrader \u6765\u5199\u903b\u8f91\uff0c\u800c\u5728\u56fd\u5185\u8981\u4ea4\u6613\u671f\u8d27\u7684\u8bdd\uff0c vnpy \u548c quantaxis \u53c8\u662f\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u9009\u578b\u3002\n\n\u6240\u4ee5\uff0c\u8fd9\u4e2a\u9879\u76ee\u7684\u76ee\u6807\u662f\u4e3a\u4e86\u8865\u5145\u8fd9\u4e9b\u6846\u67b6\u91cc\u4e0d\u8db3\u7684\u90a3\u4e00\u90e8\u5206\uff0c**\u96c6\u4e2d\u628a\u884c\u60c5\u63a5\u53e3\u3001\u4ea4\u6613\u63a5\u53e3\u7edf\u4e00\u5316**\uff0c\u7136\u540e\u518d\u9488\u5bf9\u73b0\u5728\u6bd4\u8f83\u6d41\u884c\u7684\u51e0\u4e2a\u4ea4\u6613\u6846\u67b6(vnpy\u3001quantaxis\u3001backtrader) \u63d0\u4f9b\u76f8\u5173\u7684\u63a5\u53e3\u4ee3\u7801\uff0c\u8fd9\u6837\u65e0\u8bba\u4e4b\u524d\u662f\u5728\u54ea\u4e2a\u6846\u67b6\u4e0b\u7f16\u5199\u7684\u7b56\u7565\uff0c\u5c31\u90fd\u53ef\u4ee5\u83b7\u53d6\u5168\u54c1\u79cd\u6570\u636e\u3001\u4ea4\u6613\u5168\u54c1\u79cd\u4e86\uff08\u671f\u8d27\u3001\u7f8e\u80a1\u3001\u5916\u6c47\u3001\u6570\u5b57\u8d27\u5e01\uff09\n\n### \u4f7f\u7528\u65b9\u5f0f\n\n#### \u5b89\u88c5\n\n```bash\npip install -U livetrader\n```\n\u4f7f\u7528\uff1a\u53ef\u4ee5\u53c2\u8003 examples \u76ee\u5f55\u91cc\u7684\u4ee3\u7801\n\n```python\n# \u4f5c\u4e3a\u6a21\u5757\u542f\u52a8\nimport asyncio\n\nfrom simpletrader.market import (CachedMarket, DwxMarket, MarketService,\n                                 TdxMarket)\n\n\nasync def listern_to_latest_kline(kline_queue):\n    print('get latest kline')\n    for i in range(5):\n        (symbol, kline) = await kline_queue.get()\n        print(\"%s, %s\" % (symbol, kline))\n\n\nasync def get_kline_histories(service):\n    print('get kline histories')\n    histories = await service.get_kline_histories('US.BABA', limit=100)\n    print(len(histories))\n\n\nasync def main():\n    market = TdxMarket(host='xx.xx.xx.xx:7727')\n    service = MarketService(market, ['US.BABA'])\n    kline_queue = service.start()\n    await listern_to_latest_kline(kline_queue)\n    await get_kline_histories(service)\n    service.stop()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n```python\n# \u4f5c\u4e3a\u670d\u52a1\u542f\u52a8\nimport logging\n\nfrom livetrader.market import CachedMarket, DwxMarket, MarketService, TdxMarket\nfrom livetrader.rpc import Server\n\n\ndef create_server():\n    market = TdxMarket(host='xx.xx.xx.xx:7727')\n    service = MarketService(market, ['US.BABA'])\n    server = Server(service)\n    server.bind('ipc:///tmp/market')\n    return server\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(format=' %(name)s :: %(levelname)-8s :: %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.setLevel(logging.DEBUG)\n    server = create_server()\n    server.run()\n\n```\n```python\n# \u5bf9\u5e94\u670d\u52a1\u7684\u5ba2\u6237\u7aef\nimport asyncio\nimport logging\n\nfrom livetrader.rpc import Client, MarketSubscriber\n\n\nclass PrintSubscriber(MarketSubscriber):\n\n    def on_kline(self, kline: dict):\n        print('recv kline: %s' % kline, flush=True)\n\n\ndef subscribe_kline(endpoint: str, symbol: str):\n    subscriber = PrintSubscriber(symbol)\n    subscriber.connect('ipc:///tmp/market')\n    subscriber.run()\n    return subscriber\n\n\nasync def main():\n    endpoint = \"ipc:///tmp/market\"\n    symbol = 'US.BABA'\n    subscriber = subscribe_kline(endpoint, symbol)\n    await asyncio.sleep(5)\n    subscriber.close()\n\n    client = Client()\n    client.connect(endpoint)\n    histories = client.get_kline_histories(symbol, None, 100)\n    print(len(histories))\n    client.close()\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(format=' %(name)s :: %(levelname)-8s :: %(message)s')\n    root_logger = logging.getLogger()\n    root_logger.setLevel(logging.DEBUG)\n    asyncio.run(main())\n\n```\n\n## \u7a0b\u5e8f\u67b6\u6784\n\n\u53ef\u4ee5\u53c2\u8003\u77e5\u4e4e\u7684\u6587\u7ae0\uff0c\u77e5\u4e4e\u4e0a\u7684\u6587\u7ae0\u662f\u968f\u7740\u9879\u76ee\u5f00\u53d1\uff0c\u628a\u601d\u8003\u8fc7\u7a0b\u90fd\u8bb0\u5f55\u4e0b\u6765\u4e86\uff1a[\u77e5\u4e4e: \u4ece\u96f6\u67b6\u6784\u4e00\u4e2a\u4ea4\u6613\u6846\u67b6](https://zhuanlan.zhihu.com/p/268036337)\n\n### RPC\n\u56e0\u4e3a\u8fd9\u4e2a\u9879\u76ee\u7684\u76ee\u6807\u662f\u4e3a\u4e86\u670d\u52a1\u5404\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u3001\u4e0d\u540c\u548c\u6846\u67b6\uff0c\u6240\u4ee5\u57fa\u4e8e\u4e0d\u540c\u7684\u7b56\u7565\uff08\u65e5\u5185\u3001\u9ad8\u9891\u3001\u65e5\u95f4\uff09\u573a\u666f\uff0c\u63d0\u4f9b\u4e86\u4e0d\u4e00\u6837\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u800c\u5b9e\u73b0\u7684\u65b9\u5f0f\u4e3b\u8981\u57fa\u4e8e zeromq \u6765\u505a\u7684\u3002\n\n\u5982\u679c\u9700\u8981\u4f4e\u5ef6\u8fdf\u7684\u8bdd\uff0c\u53ef\u4ee5\u4ee5\u6a21\u5757\u7684\u65b9\u5f0f\u52a0\u8f7d\u670d\u52a1\uff0c\u6216\u8005\u4f7f\u7528 zeromq \u63d0\u4f9b\u7684 inproc \u8fde\u63a5\u6a21\u5f0f\n\n\u5982\u679c\u9700\u8981\u672c\u5730\u8c03\u8bd5\u65b9\u4fbf\uff0c\u53ef\u4ee5\u4f7f\u7528 ipc \u7684\u65b9\u5f0f\u8fde\u63a5\n\n\u5982\u679c\u9700\u8981\u5206\u5e03\u5f0f\u90e8\u7f72\uff0c\u53ef\u4ee5\u4f7f\u7528 tcp \u7684\u65b9\u5f0f\u8fde\u63a5\n\n\u53ea\u8981\u6211\u4eec\u4f7f\u7528\u7684\u4e0d\u662f\u6a21\u5757\u7684\u65b9\u5f0f\u52a0\u8f7d\uff0c\u6211\u4eec\u90fd\u8fd8\u4f1a\u901a\u8fc7 MessagePack \u7684\u65b9\u5f0f\u6765\u5e8f\u5217\u5316\u4f20\u8f93\u6570\u636e\u3002\u5728\u65e9\u671f\u4e3a\u4e86\u5feb\u901f\u5f00\u53d1\uff0c\u5c31\u76f4\u63a5\u91c7\u7528\u4e86 [zerorpc](http://www.zerorpc.io/) \u6765\u5b9e\u73b0\uff0c\u4f46\u662f zerorpc \u5728\u6027\u80fd\u4e0a\u7684\u95ee\u9898\u6bd4\u8f83\u5927\uff0c\u6240\u4ee5\u5230\u540e\u671f\u4f1a\u91cd\u5199\u4e00\u4e2a RPC \u6a21\u5757\u6765\u66ff\u6362\u6389\n\n### \u884c\u60c5\u6a21\u5757\n\n\u7b2c\u4e00\u4e2a\u7248\u672c\u4e3b\u8981\u662f\u505a\u4e86\u4ee5\u4e0b\u884c\u60c5\u7684\u9002\u914d\uff1a\n\n1. \u7f8e\u80a1\uff1a\u4f7f\u7528 pytdx \u83b7\u53d6\u514d\u8d39\u5206\u949f\u6570\u636e\n\n2. \u5916\u6c47MT4\uff1a[dwx_zeromq_connector](https://github.com/darwinex/dwx-zeromq-connector)\n\n3. \u671f\u8d27\uff1a\u8ba1\u5212\u91c7\u7528 tqsdk \u83b7\u53d6\u6570\u636e\n\n\n### \u4ea4\u6613\u6a21\u5757\n\n\u6682\u65e0\uff0c\u8ba1\u5212\u5148\u505a\u671f\u8d27\u6216\u8005\u5916\u6c47\n\n### \u6846\u67b6\u9002\u914d\u6a21\u5757\n\n\u6682\u65e0\uff0c\u8ba1\u5212\u5148\u505a backtrader \u7684\u9002\u914d\n\n## \u5173\u4e8e pytdx \u7684\u5730\u5740\n\n\u53ef\u4ee5\u53c2\u8003 quantaxis \u91cc\u7684\u8bb0\u5f55 [\u7f8e\u80a1\u884c\u60c5\u5730\u5740](https://github.com/QUANTAXIS/QUANTAXIS/blob/master/QUANTAXIS/QAUtil/QASetting.py#L364-L385)\n\n## \u5173\u4e8e\u5916\u6c47 MT4 \n\n\u56e0\u4e3a MT4 \u6ca1\u6709\u63d0\u4f9b\u5b98\u65b9\u7684 Api \u63a5\u53e3\uff0c\u60f3\u8981\u628a\u91cc\u9762\u7684\u884c\u60c5\u6570\u636e\u62ff\u51fa\u6765\u6216\u8005\u63d0\u4ea4\u4e0b\u5355\u63a5\u53e3\u5c31\u53ea\u6709\u4e24\u4e2a\u65b9\u6848\uff1a\n\n1. \u50cfpytdx\u4e00\u6837\u6293\u5305\u6216\u8005\u53cd\u7f16\u8bd1\n\n2. \u7528 MQL \u8bed\u8a00\u5199\u4e00\u4e2a\u8f6c\u53d1\n\n\u597d\u5728\u73b0\u5728\u5df2\u7ecf\u6709\u5f00\u6e90\u9879\u76ee\u5b8c\u6210\u4e86\u540e\u4e00\u79cd\u505a\u6cd5\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u62ff\u6765\u7528\u4e86\uff1a[dwx_zeromq_connector](https://github.com/darwinex/dwx-zeromq-connector)\uff0c\u5177\u4f53\u5982\u4f55\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u9879\u76ee\u91cc\u9762\u7684\u8bf4\u660e\u3002\u8981\u6ce8\u610f\u7684\u662f\u6211\u5728\u539f\u9879\u76ee\u4e0a\u505a\u4e86\u4e00\u70b9\u4fee\u6539\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 extra \u76ee\u5f55\u91cc\u7684 mq4 \u4ee3\u7801\uff0c\u7136\u540e\u5728 python \u8fd9\u8fb9\u628a\u539f\u9879\u76ee\u7684\u591a\u7ebf\u7a0b\u7248\u672c\u6539\u4e3a\u4e86 asyncio \u7684\u5f02\u6b65\u7248\u672c\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\n\n## \u5176\u5b83\n\n\u6709\u4ec0\u4e48\u597d\u7684\u60f3\u6cd5\u548c\u5efa\u8bae\u6b22\u8fce\u63d0issue\uff0c\u66f4\u65b0\u5e94\u8be5\u6bd4\u8f83\u52e4\u5feb\uff0c\u6b22\u8fce star \u548c fork \u8fd9\u4e2a\u9879\u76ee\u3002\u77e5\u4e4e\u4e0a\u4e5f\u8bf7\u5927\u5bb6\u591a\u591a\u652f\u6301\u548c\u5173\u6ce8 [\u77e5\u4e4e\u4e13\u680f](https://www.zhihu.com/column/c_1177533241622593536)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/lookis/livetrader",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "livetrader",
            "package_url": "https://pypi.org/project/livetrader/",
            "platform": "",
            "project_url": "https://pypi.org/project/livetrader/",
            "project_urls": {
                "Homepage": "https://github.com/lookis/livetrader"
            },
            "release_url": "https://pypi.org/project/livetrader/0.1/",
            "requires_dist": [
                "click",
                "tzlocal",
                "environs",
                "zerorpc",
                "pymongo",
                "motor"
            ],
            "requires_python": ">=3.6",
            "summary": "A small and extendable framework for trading",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8623605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a04a0c14cd549d10fd97043703dbcb3a",
                    "sha256": "f7341fe8a9966f8928a0e7f7a72c10d33e14093a56a54fdc49af943de1fbce62"
                },
                "downloads": -1,
                "filename": "livetrader-0.1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a04a0c14cd549d10fd97043703dbcb3a",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">=3.6",
                "size": 26373,
                "upload_time": "2020-11-10T12:44:38",
                "upload_time_iso_8601": "2020-11-10T12:44:38.198951Z",
                "url": "https://files.pythonhosted.org/packages/2d/49/cd53e92ccc68fb75a1f6fc1f1e79abf6eef735b46e5b18998223f557b0ec/livetrader-0.1-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6761275fbd48f53c774a654ab9e86a75",
                    "sha256": "4c81e0051e864e1a155850d3d41ff952c4f11720995c1618c3ce7df0b3f09a38"
                },
                "downloads": -1,
                "filename": "livetrader-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "6761275fbd48f53c774a654ab9e86a75",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 15127,
                "upload_time": "2020-11-10T12:44:53",
                "upload_time_iso_8601": "2020-11-10T12:44:53.654777Z",
                "url": "https://files.pythonhosted.org/packages/1a/b2/c37b41d5952707b3a6b322c59d6ea7d8c3d5bbb9cf2e2c6a513f1b0df6bb/livetrader-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}