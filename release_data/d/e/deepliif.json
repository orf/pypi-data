{
    "1.1.2": {
        "info": {
            "author": "Parmida93",
            "author_email": "ghahremani.parmida@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/nadeemlab/DeepLIIF",
            "keywords": "DeepLIIF,IHC,Segmentation,Classification",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "deepliif",
            "package_url": "https://pypi.org/project/deepliif/",
            "platform": null,
            "project_url": "https://pypi.org/project/deepliif/",
            "project_urls": {
                "Homepage": "https://github.com/nadeemlab/DeepLIIF"
            },
            "release_url": "https://pypi.org/project/deepliif/1.1.2/",
            "requires_dist": [
                "opencv-python (==4.5.3.56)",
                "torchvision (==0.10.0)",
                "scikit-image (==0.18.3)",
                "dominate (==2.6.0)",
                "numba (==0.53.1)",
                "Click (==8.0.3)",
                "requests (==2.26.0)",
                "dask (==2021.11.2)",
                "visdom (>=0.1.8.3)"
            ],
            "requires_python": "",
            "summary": "DeepLIIF: Deep-Learning Inferred Multiplex Immunofluorescence for Immunohistochemical Image Quantification",
            "version": "1.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14750014,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f30c9aa7ee68ebee5e6bb04e534bc5eb",
                    "sha256": "f1c5ac9768de9b1e8adae394749b9f5a08ff3b5585cb6eee1ad21041ffdb9e71"
                },
                "downloads": -1,
                "filename": "deepliif-1.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f30c9aa7ee68ebee5e6bb04e534bc5eb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 72979,
                "upload_time": "2022-04-26T19:38:42",
                "upload_time_iso_8601": "2022-04-26T19:38:42.957249Z",
                "url": "https://files.pythonhosted.org/packages/46/dc/8b6e4d7f5fc9d2872ce2acd4c8beea6bc9f5e7231c77cb2ff54a93247409/deepliif-1.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "223d733209a059675226c9c359008c1b",
                    "sha256": "8d7b70bc12bd8bae0dfcc40f9a820a9cf4c75ccb76a67cff798e823cd5a95b9d"
                },
                "downloads": -1,
                "filename": "deepliif-1.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "223d733209a059675226c9c359008c1b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 69210,
                "upload_time": "2022-04-26T19:38:44",
                "upload_time_iso_8601": "2022-04-26T19:38:44.779720Z",
                "url": "https://files.pythonhosted.org/packages/b4/b6/33f97cc32344df9f6f0d43ff6cc447a2a6ecc05a749be88d95c205f7f4c0/deepliif-1.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.3": {
        "info": {
            "author": "Parmida93",
            "author_email": "ghahremani.parmida@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/nadeemlab/DeepLIIF",
            "keywords": "DeepLIIF,IHC,Segmentation,Classification",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "deepliif",
            "package_url": "https://pypi.org/project/deepliif/",
            "platform": null,
            "project_url": "https://pypi.org/project/deepliif/",
            "project_urls": {
                "Homepage": "https://github.com/nadeemlab/DeepLIIF"
            },
            "release_url": "https://pypi.org/project/deepliif/1.1.3/",
            "requires_dist": [
                "opencv-python (==4.5.3.56)",
                "torchvision (==0.10.0)",
                "scikit-image (==0.18.3)",
                "dominate (==2.6.0)",
                "numba (==0.53.1)",
                "Click (==8.0.3)",
                "requests (==2.26.0)",
                "dask (==2021.11.2)",
                "visdom (>=0.1.8.3)"
            ],
            "requires_python": "",
            "summary": "DeepLIIF: Deep-Learning Inferred Multiplex Immunofluorescence for Immunohistochemical Image Quantification",
            "version": "1.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14750014,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f8f36bdfa1241eb61bfa71c9b24e52e1",
                    "sha256": "b06e8cc31b4d64377bb6d05b5f9fe559329fc17a01822b953a50cecb715e5ec3"
                },
                "downloads": -1,
                "filename": "deepliif-1.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f8f36bdfa1241eb61bfa71c9b24e52e1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 77540,
                "upload_time": "2022-06-08T16:06:19",
                "upload_time_iso_8601": "2022-06-08T16:06:19.383163Z",
                "url": "https://files.pythonhosted.org/packages/0c/20/60b70f3c63f6faeac48d265a77bea684a7bc557ace6cc09f83966cfc2db5/deepliif-1.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bc3048b482fd5a067f068f180b3c6124",
                    "sha256": "bda86ff80cb8d6c45367d72a3ec5ae08e46e5fdadd7898870f097d65226dec65"
                },
                "downloads": -1,
                "filename": "deepliif-1.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "bc3048b482fd5a067f068f180b3c6124",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 69880,
                "upload_time": "2022-06-08T16:06:21",
                "upload_time_iso_8601": "2022-06-08T16:06:21.568409Z",
                "url": "https://files.pythonhosted.org/packages/0f/58/58b3ec473d10c46d9ea6871f26741e90c12e168667290fac96c6fc3f72b3/deepliif-1.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.5": {
        "info": {
            "author": "Parmida93",
            "author_email": "ghahremani.parmida@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "\n<!-- PROJECT LOGO -->\n<br />\n<p align=\"center\">\n    <img src=\"./images/DeepLIIF_logo.png\" width=\"50%\">\n    <h3 align=\"center\"><strong>Deep-Learning Inferred Multiplex Immunofluorescence for Immunohistochemical Image Quantification</strong></h3>\n    <p align=\"center\">\n    <a href=\"https://doi.org/10.1101/2021.05.01.442219\">Journal Preprint</a>\n    |\n    <a href=\"https://rdcu.be/cKSBz\">Journal Link</a>\n    |\n    <a href=\"https://openaccess.thecvf.com/content/CVPR2022/html/Ghahremani_DeepLIIF_An_Online_Platform_for_Quantification_of_Clinical_Pathology_Slides_CVPR_2022_paper.html\">CVPR Link</a>\n    |\n    <a href=\"https://deepliif.org/\">Cloud Deployment</a>\n    |\n    <a href=\"https://nadeemlab.github.io/DeepLIIF/\">Documentation</a>\n    |\n    <a href=\"#docker\">Docker</a>\n    |\n    <a href=\"https://github.com/nadeemlab/DeepLIIF/tree/main/ImageJ_Plugin\">ImageJ Plugin</a>\n    |\n    <a href=\"#support\">Support</a>\n  </p>\n</p>\n\n*Reporting biomarkers assessed by routine immunohistochemical (IHC) staining of tissue is broadly used in diagnostic \npathology laboratories for patient care. To date, clinical reporting is predominantly qualitative or semi-quantitative. \nBy creating a multitask deep learning framework referred to as DeepLIIF, we present a single-step solution to stain \ndeconvolution/separation, cell segmentation, and quantitative single-cell IHC scoring. Leveraging a unique de novo \ndataset of co-registered IHC and multiplex immunofluorescence (mpIF) staining of the same slides, we segment and \ntranslate low-cost and prevalent IHC slides to more expensive-yet-informative mpIF images, while simultaneously \nproviding the essential ground truth for the superimposed brightfield IHC channels. Moreover, a new nuclear-envelop \nstain, LAP2beta, with high (>95%) cell coverage is introduced to improve cell delineation/segmentation and protein \nexpression quantification on IHC slides. By simultaneously translating input IHC images to clean/separated mpIF channels \nand performing cell segmentation/classification, we show that our model trained on clean IHC Ki67 data can generalize to \nmore noisy and artifact-ridden images as well as other nuclear and non-nuclear markers such as CD3, CD8, BCL2, BCL6, \nMYC, MUM1, CD10, and TP53. We thoroughly evaluate our method on publicly available benchmark datasets as well as against \npathologists' semi-quantitative scoring. Trained on IHC, DeepLIIF generalizes well to H&E images for out-of-the-box nuclear \nsegmentation.*\n\n**DeepLIIF** is deployed as a free publicly available cloud-native platform (https://deepliif.org) with Bioformats (more than 150 input formats supported) and MLOps pipeline. We also release **DeepLIIF** implementations for single/multi-GPU training, Torchserve/Dask+Torchscript deployment, and auto-scaling via Pulumi (1000s of concurrent connections supported); details can be found in our [documentation](https://nadeemlab.github.io/DeepLIIF/). **DeepLIIF** can be run locally (GPU required) by [pip installing the package](https://github.com/nadeemlab/DeepLIIF/edit/main/README.md#installing-deepliif) and using the deepliif CLI command. **DeepLIIF** can be used remotely (no GPU required) through the https://deepliif.org website, calling the [cloud API via Python](https://github.com/nadeemlab/DeepLIIF/edit/main/README.md#cloud-deployment), or via the [ImageJ/Fiji plugin](https://github.com/nadeemlab/DeepLIIF/edit/main/README.md#imagej-plugin); details for the free cloud-native platform can be found in our [CVPR'22 paper](https://arxiv.org/pdf/2204.04494.pdf).\n\n\u00a9 This code is made available for non-commercial academic purposes.\n\n![overview_image](./images/overview.png)*Overview of DeepLIIF pipeline and sample input IHCs (different \nbrown/DAB markers -- BCL2, BCL6, CD10, CD3/CD8, Ki67) with corresponding DeepLIIF-generated hematoxylin/mpIF modalities \nand classified (positive (red) and negative (blue) cell) segmentation masks. (a) Overview of DeepLIIF. Given an IHC \ninput, our multitask deep learning framework simultaneously infers corresponding Hematoxylin channel, mpIF DAPI, mpIF \nprotein expression (Ki67, CD3, CD8, etc.), and the positive/negative protein cell segmentation, baking explainability \nand interpretability into the model itself rather than relying on coarse activation/attention maps. In the segmentation \nmask, the red cells denote cells with positive protein expression (brown/DAB cells in the input IHC), whereas blue cells \nrepresent negative cells (blue cells in the input IHC). (b) Example DeepLIIF-generated hematoxylin/mpIF modalities and \nsegmentation masks for different IHC markers. DeepLIIF, trained on clean IHC Ki67 nuclear marker images, can generalize \nto noisier as well as other IHC nuclear/cytoplasmic marker images.*\n\n## Prerequisites\n1. Python 3.8\n2. Docker\n\n## Installing `deepliif`\n\nDeepLIIF can be `pip` installed:\n```shell\n$ conda create --name deepliif_env python=3.8\n$ conda activate deepliif_env\n(deepliif_env) $ pip install deepliif\n(deepliif_env) $ conda install -c conda-forge openjdk\n```\n\nThe package is composed of two parts:\n1. A library that implements the core functions used to train and test DeepLIIF models. \n2. A CLI to run common batch operations including training, batch testing and Torchscipt models serialization.\n\nYou can list all available commands:\n\n```\n(venv) $ deepliif --help\nUsage: deepliif [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  prepare-testing-data   Preparing data for testing\n  serialize              Serialize DeepLIIF models using Torchscript\n  test                   Test trained models\n  train                  General-purpose training script for multi-task...\n```\n\n## Training Dataset\nFor training, all image sets must be 512x512 and combined together in 3072x512 images (six images of size 512x512 stitched\ntogether horizontally).\nThe data need to be arranged in the following order:\n```\nXXX_Dataset \n    \u251c\u2500\u2500 train\n    \u2514\u2500\u2500 val\n```\nWe have provided a simple function in the CLI for preparing data for training.\n\n* **To prepare data for training**, you need to have the image dataset for each image (including IHC, Hematoxylin Channel, mpIF DAPI, mpIF Lap2, mpIF marker, and segmentation mask) in the input directory.\nEach of the six images for a single image set must have the same naming format, with only the name of the label for the type of image differing between them.  The label names must be, respectively: IHC, Hematoxylin, DAPI, Lap2, Marker, Seg.\nThe command takes the address of the directory containing image set data and the address of the output dataset directory.\nIt first creates the train and validation directories inside the given output dataset directory.\nIt then reads all of the images in the input directory and saves the combined image in the train or validation directory, based on the given `validation_ratio`.\n```\ndeepliif prepare-training-data --input-dir /path/to/input/images\n                               --output-dir /path/to/output/images\n                               --validation-ratio 0.2\n```\n\n## Training\nTo train a model:\n```\ndeepliif train --dataroot /path/to/input/images \n                --name Model_Name \n```\nor\n```\npython train.py --dataroot /path/to/input/images \n                --name Model_Name \n```\n\n* To view training losses and results, open the URL http://localhost:8097. For cloud servers replace localhost with your IP.\n* Epoch-wise intermediate training results are in `DeepLIIF/checkpoints/Model_Name/web/index.html`.\n* Trained models will be by default be saved in `DeepLIIF/checkpoints/Model_Name`.\n* Training datasets can be downloaded [here](https://zenodo.org/record/4751737#.YKRTS0NKhH4).\n\n**DP**: To train a model you can use DP. DP is single-process. It means that **all the GPUs you want to use must be on the same machine** so that they can be included in the same process - you cannot distribute the training across multiple GPU machines, unless you write your own code to handle inter-node (node = machine) communication.\nTo split and manage the workload for multiple GPUs within the same process, DP uses multi-threading. \nYou can find more information on DP [here](https://github.com/nadeemlab/DeepLIIF/blob/main/Multi-GPU%20Training.md).\n\nTo train a model with DP (Example with 2 GPUs (on 1 machine)):\n```\ndeepliif train --dataroot <data_dir> --batch-size 6 --gpu-ids 0 --gpu-ids 1\n```\nNote that `batch-size` is defined per process. Since DP is a single-process method, the `batch-size` you set is the **effective** batch size.\n\n**DDP**: To train a model you can use DDP. DDP usually spawns multiple processes. \n**DeepLIIF's code follows the PyTorch recommendation to spawn 1 process per GPU** ([doc](https://github.com/pytorch/examples/blob/master/distributed/ddp/README.md#application-process-topologies)). If you want to assign multiple GPUs to each process, you will need to make modifications to DeepLIIF's code (see [doc](https://pytorch.org/tutorials/intermediate/ddp_tutorial.html#combine-ddp-with-model-parallelism)).\nDespite all the benefits of DDP, one drawback is the extra GPU memory needed for dedicated CUDA buffer for communication. See a short discussion [here](https://discuss.pytorch.org/t/do-dataparallel-and-distributeddataparallel-affect-the-batch-size-and-gpu-memory-consumption/97194/2). In the context of DeepLIIF, this means that there might be situations where you could use a *bigger batch size with DP* as compared to DDP, which may actually train faster than using DDP with a smaller batch size.\nYou can find more information on DDP [here](https://github.com/nadeemlab/DeepLIIF/blob/main/Multi-GPU%20Training.md).\n\nTo launch training using DDP on a local machine, use `deepliif trainlaunch`. Example with 2 GPUs (on 1 machine):\n```\ndeepliif trainlaunch --dataroot <data_dir> --batch-size 3 --gpu-ids 0 --gpu-ids 1 --use-torchrun \"--nproc_per_node 2\"\n```\nNote that\n1. `batch-size` is defined per process. Since DDP is a single-process method, the `batch-size` you set is the batch size for each process, and the **effective** batch size will be `batch-size` multiplied by the number of processes you started. In the above example, it will be 3 * 2 = 6.\n2. You still need to provide **all GPU ids to use** to the training command. Internally, in each process DeepLIIF picks the device using `gpu_ids[local_rank]`. If you provide `--gpu-ids 2 --gpu-ids 3`, the process with local rank 0 will use gpu id 2 and that with local rank 1 will use gpu id 3. \n3. `-t 3 --log_dir <log_dir>` is not required, but is a useful setting in `torchrun` that saves the log from each process to your target log directory. For example:\n```\ndeepliif trainlaunch --dataroot <data_dir> --batch-size 3 --gpu-ids 0 --gpu-ids 1 --use-torchrun \"-t 3 --log_dir <log_dir> --nproc_per_node 2\"\n```\n4. If your PyTorch is older than 1.10, DeepLIIF calls `torch.distributed.launch` in the backend. Otherwise, DeepLIIF calls `torchrun`.\n\n## Serialize Model\nThe installed `deepliif` uses Dask to perform inference on the input IHC images.\nBefore running the `test` command, the model files must be serialized using Torchscript.\nTo serialize the model files:\n```\ndeepliif serialize --models-dir /path/to/input/model/files\n                   --output-dir /path/to/output/model/files\n```\n* By default, the model files are expected to be located in `DeepLIIF/model-server/DeepLIIF_Latest_Model`.\n* By default, the serialized files will be saved to the same directory as the input model files.\n\n## Testing\nTo test the model:\n```\ndeepliif test --input-dir /path/to/input/images \n              --output-dir /path/to/output/images \n              --model-dir path/to/the/serialized/model\n              --tile-size 512\n```\nor\n```\npython test.py --dataroot /path/to/input/images \n               --name Model_Name  \n```\n* The latest version of the pretrained models can be downloaded [here](https://zenodo.org/record/4751737#.YKRTS0NKhH4).\n* Before running test on images, the model files must be serialized as described above.\n* The serialized model files are expected to be located in `DeepLIIF/model-server/DeepLIIF_Latest_Model`.\n* The test results will be saved to the specified output directory, which defaults to the input directory.\n* The default tile size is 512.\n* Testing datasets can be downloaded [here](https://zenodo.org/record/4751737#.YKRTS0NKhH4).\n\n**Whole Slide Image (WSI) Inference:**  \nFor translation and segmentation of whole slide images, \nyou can simply use the same test command \ngiving path to the directory containing your whole slide images as the input-dir.\nDeepLIIF automatically reads the WSI region by region, \nand translate and segment each region separately and stitches the regions \nto create the translation and segmentation for whole slide image, \nthen saves all masks in the format of ome.tiff in the given output-dir. \nBased on the available GPU resources, the region-size can be changed.\n```\ndeepliif test --input-dir /path/to/input/images \n              --output-dir /path/to/output/images \n              --model-dir path/to/the/serialized/model\n              --tile-size 512\n              --region-size 20000\n```\n\nIf you prefer, it is possible to run the models using Torchserve.\nPlease see [the documentation](https://nadeemlab.github.io/DeepLIIF/deployment/#deploying-deepliif-with-torchserve)\non how to deploy the model with Torchserve and for an example of how to run the inference.\n\n## Docker\nWe provide a Dockerfile that can be used to run the DeepLIIF models inside a container.\nFirst, you need to install the [Docker Engine](https://docs.docker.com/engine/install/ubuntu/).\nAfter installing the Docker, you need to follow these steps:\n* Download the pretrained model and place them in DeepLIIF/checkpoints/DeepLIIF_Latest_Model.\n* Change XXX of the **WORKDIR** line in the **DockerFile** to the directory containing the DeepLIIF project. \n* To create a docker image from the docker file:\n```\ndocker build -t cuda/deepliif .\n```\nThe image is then used as a base. You can copy and use it to run an application. The application needs an isolated \nenvironment in which to run, referred to as a container.\n* To create and run a container:\n```\n docker run -it -v `pwd`:`pwd` -w `pwd` cuda/deepliif deepliif test --input-dir Sample_Large_Tissues\n```\nWhen you run a container from the image, the `deepliif` CLI will be available.\nYou can easily run any CLI command in the activated environment and copy the results from the docker container to the host.\n\n## ImageJ Plugin\nIf you don't have access to GPU or appropriate hardware and just want to use ImageJ to run inference, we have also created an [ImageJ plugin](https://github.com/nadeemlab/DeepLIIF/tree/main/ImageJ_Plugin) for your convenience.\n\n![DeepLIIF ImageJ Demo](images/deepliif-imagej-demo.gif)\n\nThe plugin also supports submitting multiple ROIs at once:\n\n![DeepLIIF ImageJ ROI Demo](images/deepliif-imagej-roi-demo.gif)\n\n## Cloud Deployment\nIf you don't have access to GPU or appropriate hardware and don't want to install ImageJ, we have also created a [cloud-native DeepLIIF deployment](https://deepliif.org) with a user-friendly interface to upload images, visualize, interact, and download the final results.\n\n![DeepLIIF Website Demo](images/deepliif-website-demo-03.gif)\n\nDeepLIIF can also be accessed programmatically through an endpoint by posting a multipart-encoded request\ncontaining the original image file:\n\n```\nPOST /api/infer\n\nParameters\n\nimg (required)\nfile: image to run the models on\n\nresolution\nstring: resolution used to scan the slide (10x, 20x, 40x), defaults to 20x \n\npil\nboolean: if true, use PIL.Image.open() to load the image, instead of python-bioformats\n\nslim\nboolean: if true, return only the segmentation result image\n```\n\nFor example, in Python:\n\n```python\nimport os\nimport json\nimport base64\nfrom io import BytesIO\n\nimport requests\nfrom PIL import Image\n\n# Use the sample images from the main DeepLIIF repo\nimages_dir = './Sample_Large_Tissues'\nfilename = 'ROI_1.png'\n\nres = requests.post(\n    url='https://deepliif.org/api/infer',\n    files={\n        'img': open(f'{images_dir}/{filename}', 'rb')\n    },\n    # optional param that can be 10x, 20x (default) or 40x\n    params={\n        'resolution': '20x'\n    }\n)\n\ndata = res.json()\n\ndef b64_to_pil(b):\n    return Image.open(BytesIO(base64.b64decode(b.encode())))\n\nfor name, img in data['images'].items():\n    output_filepath = f'{images_dir}/{os.path.splitext(filename)[0]}_{name}.png'\n    with open(output_filepath, 'wb') as f:\n        b64_to_pil(img).save(f, format='PNG')\n\nprint(json.dumps(data['scoring'], indent=2))\n```\n\n## Synthetic Data Generation\nThe first version of DeepLIIF model suffered from its inability to separate IHC positive cells in some large clusters,\nresulting from the absence of clustered positive cells in our training data. To infuse more information about the\nclustered positive cells into our model, we present a novel approach for the synthetic generation of IHC images using\nco-registered data. \nWe design a GAN-based model that receives the Hematoxylin channel, the mpIF DAPI image, and the segmentation mask and\ngenerates the corresponding IHC image. The model converts the Hematoxylin channel to gray-scale to infer more helpful\ninformation such as the texture and discard unnecessary information such as color. The Hematoxylin image guides the\nnetwork to synthesize the background of the IHC image by preserving the shape and texture of the cells and artifacts in\nthe background. The DAPI image assists the network in identifying the location, shape, and texture of the cells to\nbetter isolate the cells from the background. The segmentation mask helps the network specify the color of cells based \non the type of the cell (positive cell: a brown hue, negative: a blue hue).\n\nIn the next step, we generate synthetic IHC images with more clustered positive cells. To do so, we change the \nsegmentation mask by choosing a percentage of random negative cells in the segmentation mask (called as Neg-to-Pos) and \nconverting them into positive cells. Some samples of the synthesized IHC images along with the original IHC image are \nshown below.\n\n![IHC_Gen_image](docs/training/images/IHC_Gen.jpg)*Overview of synthetic IHC image generation. (a) A training sample \nof the IHC-generator model. (b) Some samples of synthesized IHC images using the trained IHC-Generator model. The \nNeg-to-Pos shows the percentage of the negative cells in the segmentation mask converted to positive cells.*\n\nWe created a new dataset using the original IHC images and synthetic IHC images. We synthesize each image in the dataset \ntwo times by setting the Neg-to-Pos parameter to %50 and %70. We re-trained our network with the new dataset. You can \nfind the new trained model [here](https://zenodo.org/record/4751737/files/DeepLIIF_Latest_Model.zip?download=1).\n\n## Registration\nTo register the de novo stained mpIF and IHC images, you can use the registration framework in the 'Registration' \ndirectory. Please refer to the README file provided in the same directory for more details.\n\n## Contributing Training Data\nTo train DeepLIIF, we used a dataset of lung and bladder tissues containing IHC, hematoxylin, mpIF DAPI, mpIF Lap2, and \nmpIF Ki67 of the same tissue scanned using ZEISS Axioscan. These images were scaled and co-registered with the fixed IHC \nimages using affine transformations, resulting in 1264 co-registered sets of IHC and corresponding multiplex images of \nsize 512x512. We randomly selected 575 sets for training, 91 sets for validation, and 598 sets for testing the model. \nWe also randomly selected and manually segmented 41 images of size 640x640 from recently released [BCDataset](https://sites.google.com/view/bcdataset) \nwhich contains Ki67 stained sections of breast carcinoma with Ki67+ and Ki67- cell centroid annotations (for cell \ndetection rather than cell instance segmentation task). We split these tiles into 164 images of size 512x512; the test \nset varies widely in the density of tumor cells and the Ki67 index. You can find this dataset [here](https://zenodo.org/record/4751737#.YKRTS0NKhH4).\n\nWe are also creating a self-configurable version of DeepLIIF which will take as input any co-registered H&E/IHC and \nmultiplex images and produce the optimal output. If you are generating or have generated H&E/IHC and multiplex staining \nfor the same slide (de novo staining) and would like to contribute that data for DeepLIIF, we can perform \nco-registration, whole-cell multiplex segmentation via [ImPartial](https://github.com/nadeemlab/ImPartial), train the \nDeepLIIF model and release back to the community with full credit to the contributors.\n\n## Support\nPlease use the [Image.sc Forum](https://forum.image.sc/tag/deepliif) for discussion and questions related to DeepLIIF.\n\nBugs can be reported in the [GitHub Issues](https://github.com/nadeemlab/DeepLIIF/issues) tab.\n\n## License\n\u00a9 [Nadeem Lab](https://nadeemlab.org/) - DeepLIIF code is distributed under **Apache 2.0 with Commons Clause** license, \nand is available for non-commercial academic purposes. \n\n## Acknowledgments\n* This code is inspired by [CycleGAN and pix2pix in PyTorch](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix).\n\n## Reference\nIf you find our work useful in your research or if you use parts of this code, please cite our paper:\n```\n@article{ghahremani2022deep,\n  title={Deep learning-inferred multiplex immunofluorescence for immunohistochemical image quantification},\n  author={Ghahremani, Parmida and Li, Yanyun and Kaufman, Arie and Vanguri, Rami and Greenwald, Noah and Angelo, Michael and Hollmann, Travis J and Nadeem, Saad},\n  journal={Nature Machine Intelligence},\n  volume={4},\n  number={4},\n  pages={401--412},\n  year={2022},\n  publisher={Nature Publishing Group}\n}\n\n@article{ghahremani2022deepliifui,\n  title={DeepLIIF: An Online Platform for Quantification of Clinical Pathology Slides},\n  author={Ghahremani, Parmida and Marino, Joseph and Dodds, Ricardo and Nadeem, Saad},\n  journal={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n  pages={21399--21405},\n  year={2022}\n}\n\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/nadeemlab/DeepLIIF",
            "keywords": "DeepLIIF,IHC,Segmentation,Classification",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "deepliif",
            "package_url": "https://pypi.org/project/deepliif/",
            "platform": null,
            "project_url": "https://pypi.org/project/deepliif/",
            "project_urls": {
                "Homepage": "https://github.com/nadeemlab/DeepLIIF"
            },
            "release_url": "https://pypi.org/project/deepliif/1.1.5/",
            "requires_dist": [
                "opencv-python (==4.5.3.56)",
                "torchvision (==0.10.0)",
                "scikit-image (==0.18.3)",
                "dominate (==2.6.0)",
                "numba (==0.53.1)",
                "Click (==8.0.3)",
                "requests (==2.26.0)",
                "dask (==2021.11.2)",
                "visdom (>=0.1.8.3)",
                "python-bioformats (>=4.0.6)"
            ],
            "requires_python": "",
            "summary": "DeepLIIF: Deep-Learning Inferred Multiplex Immunofluorescence for Immunohistochemical Image Quantification",
            "version": "1.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14750014,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e121a59d7e0729b848f76aa5b8056c0f",
                    "sha256": "7ccb07f07ecec2f18019a84d3b59898467eabdefca5edd39431ef60f17a79388"
                },
                "downloads": -1,
                "filename": "deepliif-1.1.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e121a59d7e0729b848f76aa5b8056c0f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 78201,
                "upload_time": "2022-08-12T23:48:47",
                "upload_time_iso_8601": "2022-08-12T23:48:47.416902Z",
                "url": "https://files.pythonhosted.org/packages/8f/fe/a5500d8de893bf9931a40106187bf41f79fc6f42609346a3ccfc2905f086/deepliif-1.1.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f5bca60805ad4d65f89876a093010061",
                    "sha256": "ec72f72dcfd24af2785b294748c57e157e26edc2edff5a6aae7a7d1306bb3e72"
                },
                "downloads": -1,
                "filename": "deepliif-1.1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "f5bca60805ad4d65f89876a093010061",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 73931,
                "upload_time": "2022-08-12T23:48:49",
                "upload_time_iso_8601": "2022-08-12T23:48:49.386722Z",
                "url": "https://files.pythonhosted.org/packages/74/45/f9fa1ea31ecba982c2296f24170c2027b6330e41045ef1a6e1f5ddab8c14/deepliif-1.1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}