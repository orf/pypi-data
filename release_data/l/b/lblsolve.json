{
    "0.1.0": {
        "info": {
            "author": "Soren I. Bjornstad",
            "author_email": "contact@sorenbjornstad.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# La Belle Lucie Solver\n\nThis is an automatic solver for the solitaire game\n[La Belle Lucie](https://en.wikipedia.org/wiki/La_Belle_Lucie)\n(including, optionally, the merci rule).\n\n\n## Installation\n\nThis solver has no dependencies outside the standard library\n(all dependencies in `requirements.txt` are needed for development only).\nYou can install it directly via PyPi:\n\n```\npip install lblsolve\n```\n\nOr, if you'd like to play with the code,\nyou can clone this repository and install the package in editable mode:\n\n```\npip install -r requirements.txt\n```\n\nEither way, the `lbl` command and the `lblsolve` Python package\nwill be available on your system.\n\n\n## Use\n\nThe solver accepts a text representation of your tableau on standard input.\nEach line represents a fan, while cards in each fan are separated with spaces.\nHere's a typical input that's solvable with 3 deals and a *merci*:\n\n```\nKH 2S 8S\n3S 5S QH\nJH 4H 10D\n3D 8C 8D\n4C JS 7D\nAH AS 5H\n7C 2D 5D\nAC 8H 10C\n2H QD 7H\n3H AD KD\n4S 9S 6H\n9D QC 10H\n6C KS JD\n6D 6S 9C\nKC 9H 10S\n5C 4D 7S\n2C 3C JC\nQS\n```\n\nYou don't have to enter cards on the foundations --\nthey're assumed to contain all cards that aren't on the tableau.\n\nIf standard input is connected to your terminal,\nyou'll receive a small help message before being prompted to enter the tableau.\n\nAlternatively, you can use the `--shuffle` option\nto generate a random tableau and attempt to solve that.\n\nThere is currently minimal error-checking on inputs.\nBe warned that you may get very odd results\nif you input a tableau that can't have occurred by making legal moves\n(for instance, if you include a 2\u2666 and a 4\u2666 but no 3\u2666,\n so that the foundation contains A\u2666 3\u2666).\n\nYou can control whether the solver automatically redeals\nand whether it applies the *merci* rule\nwith additional command-line options;\ncheck `lbl --help` for these.\n\nHere's what the output looks like:\n\n```\nLa Belle Lucie solver\nCopyright (c) 2022 Soren Bjornstad.\nUse the --help switch for full command-line options.\n\nAwaiting the tableau to solve on standard input.\nCards look like '5H', where 5 is the number of the card or 'A', 'J', 'Q', or 'K', \nand H the suit of the card, 'C', 'D', 'H', or 'S' (lowercase letters or Unicode suit glyphs also accepted).\nEnter horizontal whitespace between cards of a fan and Return between fans.\nTo finish entering fans, press ^D. The foundations will consist of any cards not on your tableau.\n\nKH 2S 8S\n3S 5S QH\nJH 4H 10D\n3D 8C 8D\n4C JS 7D\nAH AS 5H\n7C 2D 5D\nAC 8H 10C\n2H QD 7H\n3H AD KD\n4S 9S 6H\n9D QC 10H\n6C KS JD\n6D 6S 9C\nKC 9H 10S\n5C 4D 7S\n2C 3C JC\nQS\n[Read fan  0] K\u2665  2\u2660  8\u2660\n[Read fan  1] 3\u2660  5\u2660  Q\u2665\n[Read fan  2] J\u2665  4\u2665  10\u2666\n[Read fan  3] 3\u2666  8\u2663  8\u2666\n[Read fan  4] 4\u2663  J\u2660  7\u2666\n[Read fan  5] A\u2665  A\u2660  5\u2665\n[Read fan  6] 7\u2663  2\u2666  5\u2666\n[Read fan  7] A\u2663  8\u2665  10\u2663\n[Read fan  8] 2\u2665  Q\u2666  7\u2665\n[Read fan  9] 3\u2665  A\u2666  K\u2666\n[Read fan 10] 4\u2660  9\u2660  6\u2665\n[Read fan 11] 9\u2666  Q\u2663  10\u2665\n[Read fan 12] 6\u2663  K\u2660  J\u2666\n[Read fan 13] 6\u2666  6\u2660  9\u2663\n[Read fan 14] K\u2663  9\u2665  10\u2660\n[Read fan 15] 5\u2663  4\u2666  7\u2660\n[Read fan 16] 2\u2663  3\u2663  J\u2663\n[Read fan 17] Q\u2660\n^D\n\n========== Deal 1 ==========\nStarting tableau:\n[ 0]  K\u2665   2\u2660   8\u2660\n[ 1]  3\u2660   5\u2660   Q\u2665\n[ 2]  J\u2665   4\u2665  10\u2666\n[ 3]  3\u2666   8\u2663   8\u2666\n[ 4]  4\u2663   J\u2660   7\u2666\n[ 5]  A\u2665   A\u2660   5\u2665\n[ 6]  7\u2663   2\u2666   5\u2666\n[ 7]  A\u2663   8\u2665  10\u2663\n[ 8]  2\u2665   Q\u2666   7\u2665\n[ 9]  3\u2665   A\u2666   K\u2666\n[10]  4\u2660   9\u2660   6\u2665\n[11]  9\u2666   Q\u2663  10\u2665\n[12]  6\u2663   K\u2660   J\u2666\n[13]  6\u2666   6\u2660   9\u2663\n[14]  K\u2663   9\u2665  10\u2660\n[15]  5\u2663   4\u2666   7\u2660\n[16]  2\u2663   3\u2663   J\u2663\n[17]  Q\u2660\n\nDFS for best blocking moves using 7 thread(s):\n  Found 17702 total legal permutation(s) of blocking moves.   \nBest sequence has 39 moves, transferring 18 cards to the foundation and leaving 34 on the tableau.\n\nMove sequence:\n  [Blocking move  ] 10\u2666 => 6\u2663  K\u2660  J\u2666\n  [Blocking move  ] 6\u2665 => 2\u2665  Q\u2666  7\u2665\n  [Safe build     ] 5\u2665 => 2\u2665  Q\u2666  7\u2665  6\u2665\n  [Safe build     ] 4\u2665 => 2\u2665  Q\u2666  7\u2665  6\u2665  5\u2665\n  [Safe build     ] 10\u2665 => J\u2665\n  [Foundation move] A\u2660\n  [Foundation move] A\u2665\n  [Blocking move  ] J\u2663 => 9\u2666  Q\u2663\n  [Safe build     ] 10\u2663 => 9\u2666  Q\u2663  J\u2663\n  [Safe build     ] 9\u2663 => 9\u2666  Q\u2663  J\u2663  10\u2663\n  [Blocking move  ] 6\u2660 => 5\u2663  4\u2666  7\u2660\n  [Safe build     ] 5\u2666 => 6\u2666\n  [Blocking move  ] 9\u2660 => K\u2663  9\u2665  10\u2660\n  [Safe build     ] 8\u2660 => K\u2663  9\u2665  10\u2660  9\u2660\n  [Foundation move] 2\u2660\n  [Safe build     ] Q\u2665 => K\u2665\n  [Safe build     ] 5\u2660 => 5\u2663  4\u2666  7\u2660  6\u2660\n  [Safe build     ] 3\u2660 => 4\u2660\n  [Foundation move] 3\u2660\n  [Foundation move] 4\u2660\n  [Foundation move] 5\u2660\n  [Foundation move] 6\u2660\n  [Foundation move] 7\u2660\n  [Foundation move] 8\u2660\n  [Foundation move] 9\u2660\n  [Foundation move] 10\u2660\n  [Safe build     ] 9\u2665 => J\u2665  10\u2665\n  [Safe build     ] 8\u2665 => J\u2665  10\u2665  9\u2665\n  [Safe build     ] 4\u2666 => 6\u2666  5\u2666\n  [Foundation move] A\u2663\n  [Blocking move  ] 7\u2666 => 3\u2666  8\u2663  8\u2666\n  [Foundation move] J\u2660\n  [Foundation move] Q\u2660\n  [Safe build     ] 3\u2663 => 4\u2663\n  [Safe build     ] 2\u2663 => 4\u2663  3\u2663\n  [Foundation move] 2\u2663\n  [Foundation move] 3\u2663\n  [Foundation move] 4\u2663\n  [Foundation move] 5\u2663\n\nFinal table state after deal 1:\n[ 0]  K\u2665   Q\u2665\n[ 1]  J\u2665  10\u2665   9\u2665   8\u2665\n[ 2]  3\u2666   8\u2663   8\u2666   7\u2666\n[ 3]  7\u2663   2\u2666\n[ 4]  2\u2665   Q\u2666   7\u2665   6\u2665   5\u2665   4\u2665\n[ 5]  3\u2665   A\u2666   K\u2666\n[ 6]  9\u2666   Q\u2663   J\u2663  10\u2663   9\u2663\n[ 7]  6\u2663   K\u2660   J\u2666  10\u2666\n[ 8]  6\u2666   5\u2666   4\u2666\n[ 9]  K\u2663\n\n[\u2660] A\u2660 2\u2660 3\u2660 4\u2660 5\u2660 6\u2660 7\u2660 8\u2660 9\u2660 10\u2660 J\u2660 Q\u2660\n[\u2665] A\u2665\n[\u2663] A\u2663 2\u2663 3\u2663 4\u2663 5\u2663\n\n========== Deal 2 ==========\nStarting tableau:\n[ 0]  6\u2665   7\u2663   5\u2666\n[ 1]  5\u2665   K\u2666   2\u2666\n[ 2]  K\u2660   K\u2665   3\u2665\n[ 3]  2\u2665   6\u2663   7\u2665\n[ 4]  8\u2665   6\u2666   7\u2666\n[ 5] 10\u2665   4\u2665   8\u2663\n[ 6]  8\u2666   9\u2666   J\u2663\n[ 7] 10\u2663   9\u2663   Q\u2663\n[ 8]  K\u2663   9\u2665   Q\u2666\n[ 9]  A\u2666   4\u2666   Q\u2665\n[10]  J\u2665   3\u2666   J\u2666\n[11] 10\u2666\n\nStarting foundation:\n[\u2660] A\u2660 2\u2660 3\u2660 4\u2660 5\u2660 6\u2660 7\u2660 8\u2660 9\u2660 10\u2660 J\u2660 Q\u2660\n[\u2665] A\u2665\n[\u2663] A\u2663 2\u2663 3\u2663 4\u2663 5\u2663\n\nDFS for best blocking moves using 3 thread(s):\n  Found 7 total legal permutation(s) of blocking moves.   \nBest sequence has 45 moves, transferring 29 cards to the foundation and leaving 5 on the tableau.\n\nMove sequence:\n  [Blocking move  ] J\u2666 => K\u2663  9\u2665  Q\u2666\n  [Safe build     ] 10\u2666 => K\u2663  9\u2665  Q\u2666  J\u2666\n  [Blocking move  ] J\u2663 => 10\u2663  9\u2663  Q\u2663\n  [Safe build     ] 9\u2666 => K\u2663  9\u2665  Q\u2666  J\u2666  10\u2666\n  [Safe build     ] 7\u2666 => 8\u2666\n  [Safe build     ] 6\u2666 => 8\u2666  7\u2666\n  [Safe build     ] 7\u2665 => 8\u2665\n  [Safe build     ] 5\u2666 => 8\u2666  7\u2666  6\u2666\n  [Foundation move] 6\u2663\n  [Foundation move] 2\u2665\n  [Foundation move] 7\u2663\n  [Foundation move] 3\u2665\n  [Foundation move] 8\u2663\n  [Foundation move] 4\u2665\n  [Safe build     ] Q\u2665 => K\u2660  K\u2665\n  [Safe build     ] 6\u2665 => 8\u2665  7\u2665\n  [Safe build     ] 4\u2666 => 8\u2666  7\u2666  6\u2666  5\u2666\n  [Safe build     ] 3\u2666 => 8\u2666  7\u2666  6\u2666  5\u2666  4\u2666\n  [Safe build     ] J\u2665 => K\u2660  K\u2665  Q\u2665\n  [Safe build     ] 10\u2665 => K\u2660  K\u2665  Q\u2665  J\u2665\n  [Safe build     ] 2\u2666 => 8\u2666  7\u2666  6\u2666  5\u2666  4\u2666  3\u2666\n  [Safe build     ] A\u2666 => 8\u2666  7\u2666  6\u2666  5\u2666  4\u2666  3\u2666  2\u2666\n  [Foundation move] A\u2666\n  [Foundation move] 2\u2666\n  [Foundation move] 3\u2666\n  [Foundation move] 4\u2666\n  [Foundation move] 5\u2666\n  [Foundation move] 6\u2666\n  [Foundation move] 7\u2666\n  [Foundation move] 8\u2666\n  [Foundation move] 9\u2666\n  [Foundation move] 10\u2666\n  [Foundation move] J\u2666\n  [Foundation move] Q\u2666\n  [Foundation move] K\u2666\n  [Foundation move] 5\u2665\n  [Foundation move] 6\u2665\n  [Foundation move] 7\u2665\n  [Foundation move] 8\u2665\n  [Foundation move] 9\u2665\n  [Foundation move] 10\u2665\n  [Foundation move] J\u2665\n  [Foundation move] Q\u2665\n  [Foundation move] K\u2665\n  [Foundation move] K\u2660\n\nFinal table state after deal 2:\n[ 0] 10\u2663   9\u2663   Q\u2663   J\u2663\n[ 1]  K\u2663\n\n[\u2660] A\u2660 2\u2660 3\u2660 4\u2660 5\u2660 6\u2660 7\u2660 8\u2660 9\u2660 10\u2660 J\u2660 Q\u2660 K\u2660\n[\u2665] A\u2665 2\u2665 3\u2665 4\u2665 5\u2665 6\u2665 7\u2665 8\u2665 9\u2665 10\u2665 J\u2665 Q\u2665 K\u2665\n[\u2663] A\u2663 2\u2663 3\u2663 4\u2663 5\u2663 6\u2663 7\u2663 8\u2663\n[\u2666] A\u2666 2\u2666 3\u2666 4\u2666 5\u2666 6\u2666 7\u2666 8\u2666 9\u2666 10\u2666 J\u2666 Q\u2666 K\u2666\n\n========== Deal 3 ==========\nStarting tableau:\n[ 0] 10\u2663   Q\u2663   9\u2663\n[ 1]  J\u2663   K\u2663\n\nStarting foundation:\n[\u2660] A\u2660 2\u2660 3\u2660 4\u2660 5\u2660 6\u2660 7\u2660 8\u2660 9\u2660 10\u2660 J\u2660 Q\u2660 K\u2660\n[\u2665] A\u2665 2\u2665 3\u2665 4\u2665 5\u2665 6\u2665 7\u2665 8\u2665 9\u2665 10\u2665 J\u2665 Q\u2665 K\u2665\n[\u2663] A\u2663 2\u2663 3\u2663 4\u2663 5\u2663 6\u2663 7\u2663 8\u2663\n[\u2666] A\u2666 2\u2666 3\u2666 4\u2666 5\u2666 6\u2666 7\u2666 8\u2666 9\u2666 10\u2666 J\u2666 Q\u2666 K\u2666\n\nDFS for best blocking moves using 2 thread(s):\n  Found 2 total legal permutation(s) of blocking moves.   \nBest sequence has 7 moves, transferring 5 cards to the foundation and leaving 0 on the tableau.\n\nMove sequence:\n  [Foundation move] 9\u2663\n  [Safe build     ] Q\u2663 => J\u2663  K\u2663\n  [Foundation move] 10\u2663\n  [Merci          ] J\u2663 => J\u2663  K\u2663  Q\u2663\n  [Foundation move] J\u2663\n  [Foundation move] Q\u2663\n  [Foundation move] K\u2663\n\nFinal table state after deal 3:\n\n\n[\u2660] A\u2660 2\u2660 3\u2660 4\u2660 5\u2660 6\u2660 7\u2660 8\u2660 9\u2660 10\u2660 J\u2660 Q\u2660 K\u2660\n[\u2665] A\u2665 2\u2665 3\u2665 4\u2665 5\u2665 6\u2665 7\u2665 8\u2665 9\u2665 10\u2665 J\u2665 Q\u2665 K\u2665\n[\u2663] A\u2663 2\u2663 3\u2663 4\u2663 5\u2663 6\u2663 7\u2663 8\u2663 9\u2663 10\u2663 J\u2663 Q\u2663 K\u2663\n[\u2666] A\u2666 2\u2666 3\u2666 4\u2666 5\u2666 6\u2666 7\u2666 8\u2666 9\u2666 10\u2666 J\u2666 Q\u2666 K\u2666\n\nGame solved in 9842.60ms on deal 3.\n```\n\nIf the game isn't solvable,\nthe sequence of moves yielding the smallest possible number\nof remaining cards on the tableau is shown.\n\nThe exit status is 0 if the game was solved,\n1 if it was unsolvable,\nand 255 if the input was invalid.\n\n\n## Computational approach\n\nThe solver categorizes all possible moves\ninto *safe builds*, *foundation moves*, *blocking moves*, and *mercis*.\n\n* **Safe builds**: Cards that can be moved to another location on the tableau\n  without removing any moves from the set of possible future moves\n  (except, of course, the safe build itself).\n  These include moving a card onto a king,\n  moving a card onto a fan with only one card,\n  and moving a card onto a sequence of two or more descending cards of the same suit.\n\n  There are other edge cases that are safe builds,\n  but the only consequence of leaving them out of the solver's definition\n  is that the search might take a bit longer,\n  so they're ignored for simplicity.\n\n* **Foundation moves**: Cards that can be moved directly onto a foundation.\n  These are also safe in the sense that they don't remove any possible future moves.\n\n* **Blocking moves**: Other moves of cards onto other cards in the tableau.\n  While these moves can allow further safe builds or foundation moves\n  that wouldn't otherwise be possible,\n  they can also prevent other cards from being moved to useful places,\n  and they cannot ever be undone or the card moved again to anywhere other than the foundation,\n  so these moves need to be considered carefully.\n\n* **Mercis**: In the ruleset including a *merci*,\n  at some point during the third deal,\n  you can pick up one card that's not at the top of its fan\n  and place it somewhere on the tableau or foundation.\n  The solver weights these equally with blocking moves\n  and considers them at the same time,\n  when mercis are enabled, the current deal is the last deal,\n  and no merci has yet happened this deal.\n  Otherwise, it skips looking for them entirely.\n\nWe benefit from doing safe builds and foundation moves\nas soon as they're available,\nwhile blocking moves and mercis should be done\nonly when these possibilities are exhausted.\nCompleting safe builds and foundation moves as soon as they're available\nremoves enough computational complexity that a brute-force depth-first search\non blocking moves and mercis\nbecomes practical;\noptimally solved games typically use a single-digit number of blocking moves.\n\nThe general structure of the solver algorithm is as follows:\n\n1. Starting from the initial position,\n   the solver builds an implicit tree (via recursion)\n   of all possible sequences of blocking moves or mercis\n   (if enabled and allowed on the current deal).\n2. After every blocking move/merci,\n   it applies all possible safe builds and foundation moves\n   (alternating between doing all the safe builds possible\n    and all the foundation moves possible\n    until there are no more of either).\n   Then it tries another blocking move or merci.\n3. Recursion continues until the tableau is empty\n   or there are no more legal moves.\n4. At every branch,\n   the child candidate sequence of moves that results in\n   the most cards transferred to the foundation\n   is passed back up to the parent.\n   Since the tableau will be reshuffled (or useless, on the last deal)\n   after all foundation moves are made,\n   nothing else matters.\n   (If at any point there are multiple possible sequences\n    with the same number of foundations transfers,\n    the one chosen is the one tried first.)\n5. Back at the top level,\n   the best possible sequence and the resulting tableau and foundations\n   are displayed to the user.\n6. If the tableau isn't empty,\n   redeals were requested,\n   and this wasn't the last deal,\n   the tableau is gathered up, reshuffled, and redealt,\n   and the process begins again from step 1.\n\nThe first level of the recursive tree is split into threads\nto speed up the process.\nThis is often suboptimal\ndepending on how many possible moves there are in the initial state,\nbut it's a very quick and easy way to get a usually reasonable number,\nand the solver almost always finishes in under a minute\n(often seconds or milliseconds -- the complexity of deals seems to have high variance)\nanyway.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sobjornstad/lblsolve",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lblsolve",
            "package_url": "https://pypi.org/project/lblsolve/",
            "platform": "",
            "project_url": "https://pypi.org/project/lblsolve/",
            "project_urls": {
                "Homepage": "https://github.com/sobjornstad/lblsolve"
            },
            "release_url": "https://pypi.org/project/lblsolve/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "solitaire solver for La Belle Lucie",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12508839,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2d428351f235d3fb8e39343d7402324c",
                    "sha256": "29e7d9984928c1f46c8d973a47b2181f1dc589686b2dc2738155ab280f2ec0d3"
                },
                "downloads": -1,
                "filename": "lblsolve-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2d428351f235d3fb8e39343d7402324c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 6570,
                "upload_time": "2022-01-07T21:43:46",
                "upload_time_iso_8601": "2022-01-07T21:43:46.557814Z",
                "url": "https://files.pythonhosted.org/packages/ea/93/05104aa59ae474c8712644962021b37f77ba4bfd97f2b094050d7f1ddbd7/lblsolve-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bfc90026bf9b9b4e762b68c1e22848fa",
                    "sha256": "50b704e0c6945d4d0be3ca154b37ffb86fc3c678299a255567311bda9a5a977c"
                },
                "downloads": -1,
                "filename": "lblsolve-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "bfc90026bf9b9b4e762b68c1e22848fa",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8840,
                "upload_time": "2022-01-07T21:43:48",
                "upload_time_iso_8601": "2022-01-07T21:43:48.177040Z",
                "url": "https://files.pythonhosted.org/packages/cc/eb/0d173030484b3a91de546144c3e8a34fd2a107f435e15f02e5c4708605ae/lblsolve-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}