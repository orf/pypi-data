{
    "0.1.0": {
        "info": {
            "author": "Luca Giacomel",
            "author_email": "luca.giacomel@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/luke14free/lucius-ltv",
            "keywords": "ltv,lifetime,value,cltv",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lucius-ltv",
            "package_url": "https://pypi.org/project/lucius-ltv/",
            "platform": "",
            "project_url": "https://pypi.org/project/lucius-ltv/",
            "project_urls": {
                "Homepage": "https://github.com/luke14free/lucius-ltv",
                "Repository": "https://github.com/luke14free/lucius-ltv"
            },
            "release_url": "https://pypi.org/project/lucius-ltv/0.1.0/",
            "requires_dist": [
                "pymc3 (>=3.11.4,<4.0.0)",
                "seaborn (>=0.11.2,<0.12.0)",
                "arviz (>=0.11.4,<0.12.0)"
            ],
            "requires_python": ">=3.9,<3.11",
            "summary": "A simple multicohort LTV calculator for subscription based products",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12528755,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ffbc9a10a57ed87c17e3634fb6a6afbe",
                    "sha256": "2162e4e2f29a892cfcbcff0314dfa2c604e9e975bfa3b69ce19f423e4e57e6a3"
                },
                "downloads": -1,
                "filename": "lucius_ltv-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ffbc9a10a57ed87c17e3634fb6a6afbe",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<3.11",
                "size": 9075,
                "upload_time": "2022-01-10T14:09:11",
                "upload_time_iso_8601": "2022-01-10T14:09:11.706266Z",
                "url": "https://files.pythonhosted.org/packages/22/a6/63c6b235d93ec7ccb7e16a59247b6bee0424702e0668e2fa3cd0acb5e08b/lucius_ltv-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "aa1e932eb1755e5cb86703b11ba3d320",
                    "sha256": "4d0420008d378cdcfd106b1d547dbcf66e7ab5ee5d9ca830060f5d9bc3fc89b6"
                },
                "downloads": -1,
                "filename": "lucius-ltv-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "aa1e932eb1755e5cb86703b11ba3d320",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9,<3.11",
                "size": 8225,
                "upload_time": "2022-01-10T14:09:10",
                "upload_time_iso_8601": "2022-01-10T14:09:10.107934Z",
                "url": "https://files.pythonhosted.org/packages/f9/ed/d93355d40eb61739d7e485134a759c1635886f1abb5cacfa1a279ca9dec0/lucius-ltv-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Luca Giacomel",
            "author_email": "luca.giacomel@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Lucius LTV\n\nA Python simple multi-cohort LTV calculator library for subscription-based products.\n\n## Installation\n\n```shell\npip install lucius-ltv\n```\n\n## Building a cohort matrix\n\nTo use this library, the first step is to build a **Cohort retention matrix** for your product.\n\nTo build a cohort matrix:\n * For each period of interest (week/month/year - depending on your subscription)\n * Retrieve the number of users that started paying for the first time\n * Track those users over time to observe how many where still alive in the following periods\n * Stack them in order to obtain a pd.DataFrame resembling this:\n\n| 2015 | 2016 | 2017 | 2018 | 2019 | 2020 | 2021 | 2022 |\n|------|------|------|------|------|------|------|------|\n| 100  | 95   | 82   | 78   | 75   | 71   | 68   | 63   |\n|      | 120  | 109  | 99   | 87   | 80   | 67   | 66   |\n|      |      | 101  | 90   | 80   | 77   | 73   | 68   |\n|      |      |      | 130  | 122  | 115  | 108  | 99   |\n|      |      |      |      | 95   | 91   | 85   | 67   |\n|      |      |      |      |      | 102  | 90   | 81   |\n|      |      |      |      |      |      | 90   | 80   |\n\nAlternatively if you are just trying out this library, you can generate a retention cohort matrix by calling `generate_synthetic_cohort_matrix`. An example of this is contained in the sample file, `sample.py` shipped with this project.\n\n## Fitting the model\n\nOnce you have a cohort matrix, you can finally fit the sBG model that will predict LTV. \nBehind the scenes this library implements \"Fader, Peter and Hardie, Bruce, How to Project Customer Retention (May 2006)\" (Available at SSRN: https://ssrn.com/abstract=801145\nor http://dx.doi.org/10.2139/ssrn.801145) using the powerful Bayesian Inference library [pymc3](https://docs.pymc.io/en/v3/).\n\nTo fit the pymc model, simply run:\n\n### Basic fit\n```python\ninference_data, model = fit_sbg_model(\n    cohort_matrix,\n    periods=10,    # Number of projected periods\n)\n```\n\n### Fit with \"all_users\"\n\nIf your product offers free trials or initial offers of any kind, you can add a conversion layer to the model, by specifying the starting users:\n```python\ninference_data, model = fit_sbg_model(\n    cohort_matrix,\n    all_users=[150, 147, 180, 160, 130, 140, 160], \n    periods=10,    # Number of projected periods\n)\n```\n\n### Fit with true parameters\n\nIf you are testing the model with synthetic data you can specify the true alpha/beta sbg parameter values (those won't be used in fitting, but to generate reference/comparison timeseries)\n\n```python\ninference_data, model = fit_sbg_model(\n    cohort_matrix,\n    periods=10,    # Number of projected periods\n    true_a=1.5,\n    true_b=2.3,\n)\n```\n\n### Extra pymc sampling parameters\n\nIf you want you can pass extra arguments that will be re-routed to the pymc sampler, like `target_accept`, `steps`, `tune`, etc..\n\n## Analyzing results\n\nThe returned `inference_data` is a standard Arviz InferenceData object will contain a posterior estimate of the modelled variables as returned by pymc3.\nThe most interesting variables are:\n\n* `inference_data.posterior['ltv']` the LTV timeseries\n* `inference_data.posterior['conversion_rate_by_cohort']` the conversion rates if you did the fit with `all_users`\n* `inference_data.posterior['ltv']` the true LTV timeseries if you provided true values of alpha and beta\n\nPlease note that these are trace objects resulting from the sampling process, \ntherefore each variable will have multiple possible values representing the sampling of the posterior distribution. \nFrom this sampling you can obtain high-density intervals using [`np.percentile`](https://numpy.org/doc/stable/reference/generated/numpy.percentile.html) or [`az.hdi`](https://arviz-devs.github.io/arviz/api/generated/arviz.hdi.html).\n\n### Empirical LTV from cohort matrix\n\nYou can also compute the empirical LTV starting from the cohort matrix, allowing you to compare empirical LTV to the projected one.\n\n```python\nempirical_ltv = compute_empirical_ltv(cohort_matrix=cohort_matrix)\n```\n\n## Plots\n\nThe library also includes a few methods for quickly plotting results.\n\n### LTV\n\nPlot the user lifetime value\n\n```python\nfig, ax = plt.subplots(figsize=(20, 10))\nplot_ltv(empirical_ltv, inference_data=inference_data, ax=ax)\nfig.suptitle(f'Lifetime value')\nax.legend()\nax.grid()\n```\n\n### Conversion Rate\n\nPlot the conversion rate by cohort\n\n```python\nfig, ax = plt.subplots(figsize=(20, 10))\nplot_conversion_rate(inference_data, ax=ax)\nfig.suptitle(f'Conversion Rate')\nax.grid()\n```\n\n### Cohort matrix\n\nPlot the cohort matrix retention rates\n\n```python\nplot_cohort_matrix_retention(cohort_matrix, 'Cohort Retention')\n```\n\n### Posterior distributions vs true values\n\nPlot the posterior distributions vs true values \n\n```python\nfig, (ax1, ax2, ax3) = plt.subplots(3, figsize=(12, 12))\naz.plot_posterior(inference_data, var_names=(\"alpha\",),\n                  ref_val=true_alpha,\n                  ax=ax1)\naz.plot_posterior(inference_data, var_names=(\"beta\",),\n                  ref_val=true_beta,\n                  ax=ax2)\naz.plot_posterior(inference_data, var_names=(\"conversion_rate\",),\n                  ref_val=1/true_conversion_rate,\n                  ax=ax3)\nfig.suptitle(f'True v Recovered values')\n```",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/luke14free/lucius-ltv",
            "keywords": "ltv,lifetime,value,cltv",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lucius-ltv",
            "package_url": "https://pypi.org/project/lucius-ltv/",
            "platform": "",
            "project_url": "https://pypi.org/project/lucius-ltv/",
            "project_urls": {
                "Homepage": "https://github.com/luke14free/lucius-ltv",
                "Repository": "https://github.com/luke14free/lucius-ltv"
            },
            "release_url": "https://pypi.org/project/lucius-ltv/0.1.1/",
            "requires_dist": [
                "pymc3 (>=3.11.4,<4.0.0)",
                "seaborn (>=0.11.2,<0.12.0)",
                "arviz (>=0.11.4,<0.12.0)"
            ],
            "requires_python": ">=3.9,<3.11",
            "summary": "A simple multicohort LTV calculator for subscription based products",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12528755,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f5f18fe93ed402ec66258bf8ea0b1a33",
                    "sha256": "a90d39ad87a5f9684d91dcd514f8245a49b63882894733688915c071db23f924"
                },
                "downloads": -1,
                "filename": "lucius_ltv-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f5f18fe93ed402ec66258bf8ea0b1a33",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<3.11",
                "size": 8983,
                "upload_time": "2022-01-10T14:13:38",
                "upload_time_iso_8601": "2022-01-10T14:13:38.050923Z",
                "url": "https://files.pythonhosted.org/packages/c1/ba/8f1bd9b301df41e8afbaa5cc9f100afd62b9a167ec5af3b0ad1178c767b5/lucius_ltv-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "930b7f34172a16dc9e5f5f3f02e2abc6",
                    "sha256": "a916ef4c34081ff9c0564ccb06ff1a05bb49c34cb7ae7c8307c56e9ff6ec6fc2"
                },
                "downloads": -1,
                "filename": "lucius-ltv-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "930b7f34172a16dc9e5f5f3f02e2abc6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9,<3.11",
                "size": 8176,
                "upload_time": "2022-01-10T14:13:36",
                "upload_time_iso_8601": "2022-01-10T14:13:36.589335Z",
                "url": "https://files.pythonhosted.org/packages/f2/04/ac8dda12b4f0fb544775daa2949715ba61b73213af6ab3137adb3bd630eb/lucius-ltv-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}