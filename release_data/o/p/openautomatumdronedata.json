{
    "0.0.7": {
        "info": {
            "author": "Peter Zechel",
            "author_email": "peter@automatum-data.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.automatum-data.com",
            "keywords": "",
            "license": "CC-BY-SA",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openautomatumdronedata",
            "package_url": "https://pypi.org/project/openautomatumdronedata/",
            "platform": "",
            "project_url": "https://pypi.org/project/openautomatumdronedata/",
            "project_urls": {
                "Bug Reports": "https://bitbucket.org/automatum/open.automatum.dronedata/issues?status=new&status=open",
                "Documentation": "https://openautomatumdronedata.readthedocs.io/en/latest/",
                "Homepage": "https://www.automatum-data.com",
                "Source": "https://bitbucket.org/automatum/open.automatum.dronedata/src/master/"
            },
            "release_url": "https://pypi.org/project/openautomatumdronedata/0.0.7/",
            "requires_dist": [
                "bokeh (>2.0.0)"
            ],
            "requires_python": "",
            "summary": "A utility package for the open automatum drone dataset",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15352890,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ba731bf5578978981258cf7dd2d49f32",
                    "sha256": "ec021f9ae09e5dda2f7ce0a077a64c3ee1e0c9535a36d2d50369959b53bc347a"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ba731bf5578978981258cf7dd2d49f32",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 12847,
                "upload_time": "2021-06-06T15:20:38",
                "upload_time_iso_8601": "2021-06-06T15:20:38.018833Z",
                "url": "https://files.pythonhosted.org/packages/76/f6/f8bb822f4352a91cb34b6a3864d3af1f95e95bda65d71b7403bda157788e/openautomatumdronedata-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "634d5b3ed21a36767c25aa6bb3fef1a3",
                    "sha256": "6fbce2b02a51ae996632ab0bd23d37f450b1b697ef259324e28cc92a06a06bbe"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "634d5b3ed21a36767c25aa6bb3fef1a3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 8201475,
                "upload_time": "2021-06-06T15:20:41",
                "upload_time_iso_8601": "2021-06-06T15:20:41.856865Z",
                "url": "https://files.pythonhosted.org/packages/1c/c2/c1a8d0cdc7e4cb0d8b671349843f09aecd7f7621d5e6b150509c3a998f52/openautomatumdronedata-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.8": {
        "info": {
            "author": "Peter Zechel",
            "author_email": "peter@automatum-data.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.automatum-data.com",
            "keywords": "",
            "license": "CC-BY-SA",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openautomatumdronedata",
            "package_url": "https://pypi.org/project/openautomatumdronedata/",
            "platform": "",
            "project_url": "https://pypi.org/project/openautomatumdronedata/",
            "project_urls": {
                "Bug Reports": "https://bitbucket.org/automatum/open.automatum.dronedata/issues?status=new&status=open",
                "Documentation": "https://openautomatumdronedata.readthedocs.io/en/latest/",
                "Homepage": "https://www.automatum-data.com",
                "Source": "https://bitbucket.org/automatum/open.automatum.dronedata/src/master/"
            },
            "release_url": "https://pypi.org/project/openautomatumdronedata/0.0.8/",
            "requires_dist": [
                "bokeh (>2.0.0)"
            ],
            "requires_python": "",
            "summary": "A utility package for the open automatum drone dataset",
            "version": "0.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15352890,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8fe92dcc7e46b65c1e0aeb2aa1a55db4",
                    "sha256": "dd6e83bc74a10b1ccf349e702fc2e518b983ee7af7b9a449e42f320b83275afd"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8fe92dcc7e46b65c1e0aeb2aa1a55db4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 13025,
                "upload_time": "2021-07-10T21:27:33",
                "upload_time_iso_8601": "2021-07-10T21:27:33.676023Z",
                "url": "https://files.pythonhosted.org/packages/05/c7/2bc5363cb3bf141243335fe04d11c95ff7e32bb33f2f903630d25458aec2/openautomatumdronedata-0.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "55a3a05de25f36c7cbea5ccb9bbad9a3",
                    "sha256": "d5de0c0df94497f83a94fb7be78b189309e2db00ddcf3de53c362e41da2eec8a"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "55a3a05de25f36c7cbea5ccb9bbad9a3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 8201793,
                "upload_time": "2021-07-10T21:27:46",
                "upload_time_iso_8601": "2021-07-10T21:27:46.548003Z",
                "url": "https://files.pythonhosted.org/packages/f0/11/a481e422a22bfe511aec1e396529fd59a69bceaf5389e68a9431a9ba80ff/openautomatumdronedata-0.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "Peter Zechel",
            "author_email": "peter@automatum-data.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.automatum-data.com",
            "keywords": "",
            "license": "CC-BY-SA",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openautomatumdronedata",
            "package_url": "https://pypi.org/project/openautomatumdronedata/",
            "platform": "",
            "project_url": "https://pypi.org/project/openautomatumdronedata/",
            "project_urls": {
                "Bug Reports": "https://bitbucket.org/automatum/open.automatum.dronedata/issues?status=new&status=open",
                "Documentation": "https://openautomatumdronedata.readthedocs.io/en/latest/",
                "Homepage": "https://www.automatum-data.com",
                "Source": "https://bitbucket.org/automatum/open.automatum.dronedata/src/master/"
            },
            "release_url": "https://pypi.org/project/openautomatumdronedata/0.2.0/",
            "requires_dist": [
                "bokeh (>2.0.0)"
            ],
            "requires_python": "",
            "summary": "A utility package for the open automatum drone dataset",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15352890,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f034622f53c460d1af4387279e175c55",
                    "sha256": "fdb1778043c1bcafb41fdc2205828b10e27e24a3870f30a3d868c8b6844f5e70"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f034622f53c460d1af4387279e175c55",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21367,
                "upload_time": "2022-01-12T08:46:41",
                "upload_time_iso_8601": "2022-01-12T08:46:41.966924Z",
                "url": "https://files.pythonhosted.org/packages/a7/24/df9d91844866ad665beacf2d7ecdb31693037dcbd761e450cf9c5fbb7f53/openautomatumdronedata-0.2.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8138b997406de72e6d4cf2559cc4bea1",
                    "sha256": "0698a84f97732f559570ff469dd0be106ba7c3f7b124051299e6bdf58c542869"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8138b997406de72e6d4cf2559cc4bea1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10466660,
                "upload_time": "2022-01-12T08:46:46",
                "upload_time_iso_8601": "2022-01-12T08:46:46.607825Z",
                "url": "https://files.pythonhosted.org/packages/ed/d3/5fda15db610b96fac4fa5e37f59be197bf1e5cd19036b4d94a8e8c6526ff/openautomatumdronedata-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.1": {
        "info": {
            "author": "Peter Zechel",
            "author_email": "peter@automatum-data.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.automatum-data.com",
            "keywords": "",
            "license": "CC-BY-SA",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openautomatumdronedata",
            "package_url": "https://pypi.org/project/openautomatumdronedata/",
            "platform": "",
            "project_url": "https://pypi.org/project/openautomatumdronedata/",
            "project_urls": {
                "Bug Reports": "https://bitbucket.org/automatum/open.automatum.dronedata/issues?status=new&status=open",
                "Documentation": "https://openautomatumdronedata.readthedocs.io/en/latest/",
                "Homepage": "https://www.automatum-data.com",
                "Source": "https://bitbucket.org/automatum/open.automatum.dronedata/src/master/"
            },
            "release_url": "https://pypi.org/project/openautomatumdronedata/0.2.1/",
            "requires_dist": [
                "bokeh (>2.0.0)"
            ],
            "requires_python": "",
            "summary": "A utility package for the open automatum drone dataset",
            "version": "0.2.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15352890,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8a9e790d582e52d4e1d7a229bdf994d9",
                    "sha256": "a11742a59c2b89400081a9e43e2f13a215e7b520683d409847379fd23707827b"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.2.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8a9e790d582e52d4e1d7a229bdf994d9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21559,
                "upload_time": "2022-01-12T08:56:43",
                "upload_time_iso_8601": "2022-01-12T08:56:43.240723Z",
                "url": "https://files.pythonhosted.org/packages/fe/c5/08b83a97942378846e5590691d92dc449bf04414694ec78933374a05b110/openautomatumdronedata-0.2.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e119e60b79b2fb4fb6737aeeefec9b52",
                    "sha256": "0b158810e41cc7ce5215265d03a053339b63117e11111c116d2b37d556b699d2"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.2.1.tar.gz",
                "has_sig": false,
                "md5_digest": "e119e60b79b2fb4fb6737aeeefec9b52",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10467054,
                "upload_time": "2022-01-12T08:56:47",
                "upload_time_iso_8601": "2022-01-12T08:56:47.631252Z",
                "url": "https://files.pythonhosted.org/packages/13/88/f47bbcd053f61134e790ed888e98ee39354aefa35728759d9daa4989e7b9/openautomatumdronedata-0.2.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.4.0": {
        "info": {
            "author": "Peter Zechel",
            "author_email": "peter.zechel@automatum-data.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Science/Research",
                "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description": "![logo](/docs/logo.png)\n\n# Motivation\n\nThis package provides an object-oriented structure for loading and analyzing AUTOMATUM DATA datasets. It is intended to enable the rapid use of the dataset in research and development. In addition, a web server-based visualization is provided to give an instant overview of the dataset.\n\n\n**Download the the dataset from [https://www.automatum-data.com](https://www.automatum-data.com)**\n\nDocumentation of this package is available under: [https://openautomatumdronedata.rtfd.io](https://openautomatumdronedata.rtfd.io)\n\nA video with annotated objects can be found **[here.](https://www.youtube.com/watch?v=FTHRNN-XNdY)**\n\n\n# Installation\n\nThe <code>openautomatumdronedata</code>-Utility is a standard PIP package which can be installed as any other PIP package with\n\n```\npip install openautomatumdronedata\n```\nor depending on your machine\n```\npip3 install openautomatumdronedata\n```\n\nIn addition, the package can also be installed manually, e.g. by placing the sources in your project folder.\n\n\n# Change History\nSince we update our dataset to keep track with the needs of the user. There are also updates in this library needed. \n\nIn the following table you find which pip package version is compatible with which version of the dataset. You can use pip to directly download a specifc version. The latest version of the dataset is always available on our homepage. \n\n\n| **dataset version** | **open.automatum.data version** | **changes** |\n|--------------|-----------------|-----------------|\n| v1.0 | <= 0.2.1 | |\n| v3.0 | >= 0.4.0 |Object to lane assigment,  Object Relations are directly included in the data, Add TTC, TTH, Distance to left and right lane marking |\n\n\n# Data Structure\n\nThe Automatum DATA datasets are strucktured in single <code>recordings</code> with a length of appx. 10 to 18 minutes each. Each <code>recording</code> was captured on a so called <code>location</code>. \n\nThat means there are usually several <code>recordings</code> on each <code>location</code> and the <code>recordings</code> share the common information of the <code>location</code> like the <code>staticWorld (XODR)</code> and the reference point. \n\nEach <code>recording</code> itself comes in one folder with the following files: \n- **dynamicWorld.json** which contains the dynamic behavior of the objects such as cars, trucks, etc. \n- **staticWorld.xodr**  which contains road geometry in the [OpenDRIVE](https://www.asam.net/standards/detail/opendrive/) format. \n- **recording_name.html**  which contains an overview of the <code>recording</code> with some basic metadata.\n\n## dynamicWorld.json \n\n| **Variable** | **Description** |\n|--------------|-----------------|\n|**UTM-Rferencepoint** | Reference point in the world coordinate system in UTM-Format. This reference point is the center of the coordinate system for the given position. The points is given as a tuple of (x \\[m\\], y \\[m\\], letter, number) |\n|**WGS84-Coordinates** | Referecne point in WGS82 format. |\n|**Recording name** | Unique recording name: Streettype_Streetname_LocationName_UUID |\n|**UUID** | Unique UUID of the recording |\n|**Release** | Release version of the dataset. |\n|**Calculation version** | Dict that shows all versions of the the pipeline used to process the recording. |\n|**Video Information** | fps and count of containing frames of the recording |\n|**Contact an Licencing Information** | Further contact and licence information of the given recording |\n|**Object data** | The actual objects data which is described in this documentation. |\n\n\nWhereby, this Python package has the following objectives: \n- Easy access to the information contained in **dynamicWorld.json** and **staticWorld.xodr**.  \n- Avoid effort by writing a parser for the provided data.\n- Visualize the data easily in a webbrowser\n\n### How to start coding\n\nThe entry point for accessing a dataset is to load a dataset using the ``DroneDataset`` class. You can copy all code snipets one by one and run the code. All snipets together can be found also on the ```hello_world.py``` provided with the sources. \n```python\nfrom openautomatumdronedata.dataset import droneDataset\nimport os\nimport numpy as np\n\npath_to_dataset_folder = os.path.abspath(\"datasets/hw-a9-stammhamm-015-39f0066a-28f0-4a68-b4e8-5d5024720c4e\")\ndataset = droneDataset(path_to_dataset_folder)\n```\n\nthis command reads the **dynamicWorld.json** and **staticWorld.xodr** and translates the complete data in to an object-oriented structure. This allows all further data accesses to be made with the instance of the ``drone dataset`` class. Whereby, the ``drone dataset`` class holds the following two subclasses:\n\n## Dynamic World\nThe dynamic world holds all informations about dynamic objects (cars, trucks, vans) in the dataset and handles the access to objects over the recording time.\n\nYou can access the dynamic world by\n```python\ndynWorld = dataset.dynWorld\n```\n\nThe dynamic world provides you the following variables:\n\n\n| **Variable** | **Description** |\n|--------------|-----------------|\n|**UTM-Rferencepoint** | Reference point in the world coordinate system in UTM-Format. This reference point is the center of the coordinate system for the given position. The points is given as a tuple of (x \\[m\\], y \\[m\\], letter, number) |\n|**UUID** | Unique UUID of the recording |\n|**fps** | fps of the recording |\n|**delta_t** | Sample time of the recording. \\[s\\] |\n|**frame_count** | Total number of frames of the recording. |\n|**maxTime** | Total duration of the recording. \\[s\\]|\n|**DrivenDistanceInMeter** | Total driven distance of all object in the recording. \\[m\\] |\n|**MedianDrivenDistanceInMeter** | Median driven distance of the objects or track length.  \\[m\\] |\n\n\n### Example\n```python\ndynWorld = dataset.dynWorld\nprint(dynWorld.UUID)\nprint(dynWorld.frame_count)\nprint(dynWorld.fps)\nprint(dynWorld.delta_t)\nprint(dynWorld.utm_referene_point)\nprint(dynWorld.maxTime)\nprint(dynWorld.DrivenDistanceInMeter)\nprint(dynWorld.MedianDrivenDistanceInMeter)\n#print(dynWorld.dynamicObjects) # Possible but not recommended. Use further discussed functions.\n```\n\n## Dynamic objects\n\nObjects are represented by a set of type specific class:\n- ``carObject``\n- ``truckObject``\n- ``vanObject``\n- ``carWithTrailerObject``\n- ``motorcycleObject``\n\nAll these classes inherited from the base class ```dynamicObject```, which implements the following features. This means you can use all the following features for all object type specific classes.\n\nPer Object the following information are available as scalar:\n\n| **Variable** | **Description** |\n|--------------|-----------------|\n| **UUID** | Unique UUID of the object |\n| **length** | Length of the object \\[m\\] |\n|**width** | Width of the object \\[m\\] |\n|**delta_t** | Time difference between two data points (equal at all objects and with in the ```dynamicObject```) |\n\nPer object the following information are available as vector over time: \n\n![](docs/VehicleDynamics.png)\n\n| **Variable** | **Description** |\n|--------------|-----------------|\n| **x_vec** | x-Position of the assumed center of gravity of the object in the local coordinate system |\n| **y_vec**  | y-Position of the assumed center of gravity of the object in the local coordinate system |\n| **vx_vec** | Velocity in x-direction  **in the vehicle coordinate system** |\n| **vy_vec** | Velocity in y-direction  **in the vehicle coordinate system**|\n| **ax_vec**  | Acceleration of the object in x-direction **in the vehicle coordinate system** |\n| **ay_vec** | Acceleration of the object in y-direction **in the vehicle coordinate system** |\n| **time** | Vector of the timestamp in the dataset recording for the mention values |\n| **lane_id_vec** | Vector of the ```lane_id``` on which the vehicle drives according to the static world described in the xodr, for details see chapter **Object to lane assignment (OTLA)** |\n| **road_id_vec** | Vector of the ```road_id``` on which the vehicle drives according to the static world described in the xodr, for details see chapter **Object to lane assignment (OTLA)** |\n| **lane_change_flag_vec** | Vector of the ```lane_change_flag```  which is ```true```, if the vehicle has performed a lane change, otherwise it is ```false```, for details see chapter **Object to lane assignment (OTLA)**|\n| **distance_left_lane_marking** | Distance from the center of gravity of a object (defined by ```x_vec```, ```y_vec```) to the left lane marking, for details see chapter **Distance to lane markings**|\n| **distance_right_lane_marking** | Distance from the center of gravity of a object (defined by ```x_vec```, ```y_vec```) to the right lane marking, for details see chapter **Distance to lane markings**|\n| **object_relation_dict_list** | List of dicts, whereby every dict describes the object relation at the current time step, for details see chapter **Object Relations** |\n| **tth_dict_vec** | List of dicts, whereby every dict describes the **tth** to the related objects at the current time step, for details see chapter **TTC / TTH** |\n| **ttc_dict_vec** | List of dicts, whereby every dict describes the **ttc** to the related objects at the current time step, for details see chapter **TTC / TTH** |\n\n### Example\n```python\n\ndynObjectList = dynWorld.get_list_of_dynamic_objects_for_specific_time(1.0)\ndynObject = dynObjectList[-1]\n\nprint(dynObject.x_vec)\nprint(dynObject.y_vec)\nprint(dynObject.vx_vec)\nprint(dynObject.vy_vec)\nprint(dynObject.psi_vec)\nprint(dynObject.ax_vec)\nprint(dynObject.ay_vec)\nprint(dynObject.length)\nprint(dynObject.width)\nprint(dynObject.time)\nprint(dynObject.UUID)\nprint(dynObject.delta_t) \n\n```\n\nTo keep the size of the dataset files as small as possible the data of the objects is only provided for the time intervale where the object is visitable in the video recording. Therefore, the first element in the time vector is the entry time and the last element the time of exit. \n\n\n## Dynamic objects utilities \nTo allow an easy access to objects, the following methods are implemented. \n\n\n### Total objects included\nReturns the total number of included objects\n```python\nlen(dynWorld)\n```\n\n### Get all objects at a specific time\nGives you a list of all objects which are included in the first second of the recording.\n```python\ndynObjectList = dynWorld.get_list_of_dynamic_objects_for_specific_time(1.0)\n```\n\n### Get specific timestamps of an object\n```python\nprint(dynObject.get_first_time()) # Returns the time the object occurs the first time\nprint(dynObject.get_last_time()) # Returns the time the object occurs the last time\nprint(dynObject.is_visible_at(10)) # Checks if the object is visible at the given time\n```\n\n### Convert a time step to a vector index\n\nTo access the object vector based on a defined time step. You can use the function ```next_index_of_specific_time``` to convert a given time into the index of the data vectors at that given time, like\n\n```python\ntime_vec = np.arange(dynObject.get_first_time(),\n                      dynObject.get_last_time(),\n                      dynObject.delta_t)\n# Print positions\nx_vec = dynObject.x_vec\ny_vec = dynObject.y_vec\nfor time in time_vec:\n    idx = dynObject.get_object_relation_for_defined_time(time)\n    print(\"At time %0.2f the vehicle is at position %0.2f, %0.2f\" % (time, x_vec[idx], y_vec[idx]))\n```\n\n## Object to lane assignment (OTLA)\nThe object-lane mapping is calculated for each object in each time step with the corresponding lane ID.\n\nThe x and y position of the object is used as a reference. Thus, the time stamp at which the lane ID changes is when that position passes over the lane marker. \n\nThe lane ID / road ID is defined by the static world of *xodr*, for more details see the static world chapter. Where all lane IDs with the same sign (e.g. positive) belong to one driving direction. Absolutely low IDs belong to a lane closer to the center of the road (between driving directions). Note that a lane ID does not have to start at 0, as there may also be an unnavigable lane near the center of the road. \n\n\n**To access the Lane ID use:** \n```python\nprint(dynObject.lane_id_vec) \nprint(dynObject.road_id_vec)  \n```\n\n## Distance to lane marking\nFor each object the current distances were calculated to the next left and right lane marking from ego view.\n![](docs/lane_distance.png)\n\n```dl``` and ```dr``` are defined as the orthogonal distance from the center of gravity of the car to the next lane marking. \n\n\n\n## Object Relations \n\nThe object relation describing the relative position between object based on a view of one defined vehicle:\n\n![](docs/ObjectRelation.png)\n\n\nThe object relation are defined as dict of \\<relation name\\>:\\<UUID of other object\\>. If an object has no relation to an other then the element is still in the dict, however, the value is ``` None```. \n\n```python\n[ \n    { # Time step 0\n        'front_ego': None,\n        'behind_ego': '4bc73813-79bc-413c-87ec-e9048514079f',\n        'front_left': None,\n        'behind_left': None,\n        'front_right': None,\n        'behind_right': '0df4550c-a21b-4c38-bee3-e03ef4d59afc',\n    },\n    { #Time step 1\n        'front_ego': None,\n        'behind_ego': '4bc73813-79bc-413c-87ec-e9048514079f',\n        'front_left': None,\n        'behind_left': None,\n        'front_right': None,\n        'behind_right': '0df4550c-a21b-4c38-bee3-e03ef4d59afc',\n    } \n    ...\n]\n\n\n```\n\nTherefore, the access is as followed\n```python\nobject_relation_dict = dynObject.object_relation_dict_list[0] \nprint(object_relation_dict[\"front_ego\"])\nprint(object_relation_dict[\"behind_ego\"])\nprint(object_relation_dict[\"front_left\"])\nprint(object_relation_dict[\"behind_left\"])\nprint(object_relation_dict[\"front_right\"])\nprint(object_relation_dict[\"behind_right\"])\n```\n\n## Lateral and Longitudinal Position between Objects\n\nSince the datasets consists also roads with a curvature, objects are not aligned to the coordinate system. Since the lateral and longitudinal distance are imported the function ``get_lat_and_long`` is introduced. \n\n\n![](/docs/Lat_Long_Distance.png)\n\n\n```python\ndynObject2 = dynObjectList[1]\n\nlong_distance, lat_distance = dynObject.get_lat_and_long(1.0, dynObject2)\nprint(long_distance, lat_distance)\n\n```\n\n## TTC and TTH\nFor each object the current ```TTC``` and ```TTH``` is calculated **only to every in  ```front``` driving object**. \n\n![](docs/ttc.png)\n\nThe distance ```d``` as base of all calculations is defined as the closest distance of both vehicle centers ```'d```. To compensate for the vehicle length, ```l/2``` of each vehicle was substracted from ```'d```.\n\n### TTC\n```TTC``` is calculated as ```d``` / ```velocity difference```. \n\nIf the front car is moving faster than the ego vehicle, a collision is impossible an the ```TTC``` is marked as ```-1```.\n\n### TTH\n```TTH``` is calculated as ```d``` / ```velocity ego```. \n\n\n\n# Static World \nWe implemented a basic parser for *xodr* with some additional functionality. This parser stores the relevant information in the so called Static World. As the Dynamic World the Static World can be accessed by the dataset class:\n\n```python\nstatWorld = dataset.statWorld\n```\n\nThe Static World consist of a hierarchically structure of different classed to represents the *xodr*. Further information of *xodr* can be found **[here.](https://www.asam.net/index.php?eID=dumpFile&t=f&f=4422&token=e590561f3c39aa2260e5442e29e93f6693d1cccd#top-792f18a2-f184-4906-8ba0-717c09b36673)**\nWe highly recommend to get a basic understanding of *xodr* if lane related information are used. \n\nTo get a fast and good view of an ```xodr``` we highly recommend the easy **[OpenDriveViewer](https://odrviewer.io)** to open and analyze the ```xodr``` files. \n\n![](docs/open_drive_viewer.png)\n\n\n\n# Visualization\n\nThis package provides an integrated visualization of the dataset via a web server realized by bokeh.\n\n\nIf you installed the package via pip simply starte the visualization by typing:\n```\nautomatum_vis\n```\nTo start the visualization manually execute the ```start_bokeh.py``` script form the [package source](https://bitbucket.org/automatum/open.automatum.dronedata/src/master/). \n\nTo open a dataset simple copy the absolute path of the dataset folder into the text filed on the top of the webpage. \nBy clicking load the dataset will be loaded and visualized. Give it some seconds to load....\n\n![](docs/vis_load.png)\n\nAfter loading a dataset you should get a comparable view:\n\n![](docs/vis_overview.png)\n\nIf you scroll down you find the panel where you can control a live view of the data:\n- With Play/Pause you start/stop the animation. \n- With the arrows bellow you can step a single frame.\n- The slider allows to change the playback speed.\n- The two check boxes allow to show additional data. \n- The \"Jump to time\" box allows it to jup directly to a picture of interest. \n\n![](docs/vis_control.png)\n\nShow object relations prints all present relation to each object:\n\n![](docs/vis_object_relations.png)\n\n\nShow distance lane markings prints the current orthogonal distances of each car to the current lane:\n\n![](docs/vis_lane_marking.png)\n\nTo get a lange change, please zoom into the overview picture and hover to a red dot which is indicating a lane change:\n\n![](docs/vis_lane_change.png)\n\nThe info box is telling you the UUID of the object which is performing the lane change and also the time step when this is happening. With the time step you can use the \"Jump\" box to show this time step in the animation. \n\n# Complete Example\nHere you find the complete example of all code snipets from above:\n\n```python\nfrom openautomatumdronedata.dataset import droneDataset\nimport os\nimport numpy as np\n\n\npath_to_dataset_folder = os.path.abspath(\"datasets/hw-a9-stammhamm-015-39f0066a-28f0-4a68-b4e8-5d5024720c4e\")\ndataset = droneDataset(path_to_dataset_folder)\n\ndynWorld = dataset.dynWorld\n\nprint(dynWorld.UUID)\nprint(dynWorld.frame_count)\nprint(dynWorld.fps)\nprint(dynWorld.delta_t)\nprint(dynWorld.utm_referene_point)\nprint(dynWorld.maxTime)\nprint(dynWorld.DrivenDistanceInMeter)\nprint(dynWorld.MedianDrivenDistanceInMeter)\n#print(dynWorld.dynamicObjects) # Possible but not recommended. Use further discussed functions.\n\ndynObjectList = dynWorld.get_list_of_dynamic_objects_for_specific_time(1.0)\ndynObject = dynObjectList[-1]\n\nprint(dynObject.x_vec)\nprint(dynObject.y_vec)\nprint(dynObject.vx_vec)\nprint(dynObject.vy_vec)\nprint(dynObject.psi_vec)\nprint(dynObject.ax_vec)\nprint(dynObject.ay_vec)\nprint(dynObject.length)\nprint(dynObject.width)\nprint(dynObject.time)\nprint(dynObject.UUID)\nprint(dynObject.delta_t) \n\nlen(dynWorld) # Returns the number of included object\ndynObjectList = dynWorld.get_list_of_dynamic_objects_for_specific_time(1.0)\n\nprint(dynObject.get_first_time()) # Returns the time the object occurs the first time\nprint(dynObject.get_last_time()) # Returns the time the object occurs the last time\nprint(dynObject.is_visible_at(10)) # Checks if the object is visible at the given time\n \ntime_vec = np.arange(dynObject.get_first_time(),\n                      dynObject.get_last_time(),\n                      dynObject.delta_t)\n# Print positions\nx_vec = dynObject.x_vec\ny_vec = dynObject.y_vec\nfor time in time_vec:\n    idx = dynObject.next_index_of_specific_time(time)\n    print(\"At time %0.2f the vehicle is at position %0.2f, %0.2f\" % (time, x_vec[idx], y_vec[idx]))\n\n\nprint(dynObject.lane_id_vec)  \nprint(dynObject.road_id_vec) \n\nobject_relation_dict = dynObject.object_relation_dict_list[0] \nprint(object_relation_dict[\"front_ego\"])\nprint(object_relation_dict[\"behind_ego\"])\nprint(object_relation_dict[\"front_left\"])\nprint(object_relation_dict[\"behind_left\"])\nprint(object_relation_dict[\"front_right\"])\nprint(object_relation_dict[\"behind_right\"])\n\ndynObject2 = dynObjectList[1]\n\nlong_distance, lat_distance = dynObject.get_lat_and_long(1.0, dynObject2)\nprint(long_distance, lat_distance)\n\nstatWorld = dataset.statWorld \n```\n# Disclamer\n\nThe implementation of *xodr* via the ```automatum_vis``` can show artefacts or road elements are displayed incorrectly. The *xodr* itself is generated using IPG's *CarMaker* tool and is fully represented. Also not all road elements of the standard are implemented to be shown. \n\n# Copyright\n\nAll credits to AUTOMATUM DATA \n\n\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.automatum-data.com",
            "keywords": "",
            "license": "CC-BY-SA",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openautomatumdronedata",
            "package_url": "https://pypi.org/project/openautomatumdronedata/",
            "platform": null,
            "project_url": "https://pypi.org/project/openautomatumdronedata/",
            "project_urls": {
                "Bug Reports": "https://bitbucket.org/automatum/open.automatum.dronedata/issues?status=new&status=open",
                "Documentation": "https://openautomatumdronedata.readthedocs.io/en/latest/",
                "Homepage": "https://www.automatum-data.com",
                "Source": "https://bitbucket.org/automatum/open.automatum.dronedata/src/master/"
            },
            "release_url": "https://pypi.org/project/openautomatumdronedata/0.4.0/",
            "requires_dist": [
                "bokeh (>2.0.0)"
            ],
            "requires_python": "",
            "summary": "A utility package for the open automatum drone dataset",
            "version": "0.4.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15352890,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0ad728b55c2298a557e2d01a889285e6",
                    "sha256": "ae10e75678da62961002831193713e49b618f981e0f065c66024daa61d18f542"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.4.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0ad728b55c2298a557e2d01a889285e6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 24089,
                "upload_time": "2022-10-09T16:53:03",
                "upload_time_iso_8601": "2022-10-09T16:53:03.070975Z",
                "url": "https://files.pythonhosted.org/packages/ef/2b/02a227eec072dce36442736a8b64b12f926ffc26904210b48d8f87e4715d/openautomatumdronedata-0.4.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b7f3b4cd0b3933d4ad2b5c42503a004c",
                    "sha256": "6c7c46494089ee7c57bdd198f8074d015abd5603c5f5b386b11019abe1d94705"
                },
                "downloads": -1,
                "filename": "openautomatumdronedata-0.4.0.tar.gz",
                "has_sig": false,
                "md5_digest": "b7f3b4cd0b3933d4ad2b5c42503a004c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17596990,
                "upload_time": "2022-10-09T16:53:09",
                "upload_time_iso_8601": "2022-10-09T16:53:09.283805Z",
                "url": "https://files.pythonhosted.org/packages/a7/ff/5f94d3294785680fb046a4a4a7f512093e1ad6cf37fc4978b05c3b988c52/openautomatumdronedata-0.4.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}