{
    "0.0.1": {
        "info": {
            "author": "Timothy Law",
            "author_email": "timthlaw@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# The `investsai` package hosts an Symbol AI algorithm\n## The algorithm is interpretable. It can be trained with historic data and predict the companies are more likely to succeed in the future\n\n### Prerequisites\n\n- Python >=3.7\n- pip/virtualenv installed\n\n### Installing\n\n#### Make sure you have upgraded version of pip\n```bash\npython -m pip install --upgrade pip\n```\n#### Create a virtualenv and install requirements. You can do this by running\n```bash\nvirtualenv venv\n. venv/bin/activate\n```\n### Install package\n```bash\n!pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ investsai==0.0.9 -q\n```\n\n### Example\n```bash\nfrom investsai.sai import SAI\nimport random\nimport numpy as np\nimport pandas as pd\n\ndef simulate_data() -> Union[dict, dict, dict]:\n    \"\"\"\n    This function simulates data to demonstrate the module\n\n    Returns:\n        Union[dict, dict, dict]: simulate training and testing data\n    \"\"\"\n\n    # Simulate n securities each with m numeric variables/factors\n    n = 10000  # simulate 1000 securities\n    m = 20  # each securities with 20 variables/factors\n\n    # a dictionary to store training data. i.e. a pandas DataFrame (value) per month (key)\n    XTrain = {}\n    for i in range(1):  # use 1 snapshot (with time-dependent features, i.e. avg eps in past 12 months) as Traing Data or it can use multiple snapshot (i.e. each month as a key in the dictionary XTrain)\n        XTrain['mth' + str(i + 1).zfill(2)] = pd.DataFrame(np.random.rand(n, m - 1), columns=[\n            f'factor_{i}' for i in range(m - 1)], index=['sec' + str(i) for i in range(1, n + 1)])\n    # add a str factor (i.e. Sector) to test functionality, the dimension of input X is now n x m\n        XTrain['mth' + str(i + 1).zfill(2)].loc[:, 'Sector'] = ['Technology'] * \\\n            int(n / 2) + ['Munufacturing'] * (n - int(n / 2))\n\n    # Simulate a y varible to represent whether the stocks in training data is successful (can be by any objective or multi-objective)\n    yTrain = {}  # same key as in XTrain to identity whether the security in month {key} is successful\n    for i in range(1):\n        y = [0] * int(n * 0.70) + [1] * int(n - int(n * 0.70))\n        random.shuffle(y)\n        yTrain['mth' + str(i + 1).zfill(2)] = pd.DataFrame(y, columns=['y'])\n\n    # Simulate a test data with n_test securities each with the same m variables/factor\n    n_test = 10000  # test on 10000 securities, can be different from n\n    XTest = pd.DataFrame(np.random.rand(n_test, m - 1), columns=[f'factor_{i}' for i in range(m - 1)], index=[\n        'sec' + str(i) for i in range(1, n_test + 1)])\n    # added another variable to represent the sector, the dimension of input XTest is now n x m\n    XTest.loc[:, 'Sector'] = ['Technology'] * \\\n        int(n_test / 2) + ['Munufacturing'] * (n_test - int(n_test / 2))\n\n    return XTrain, yTrain, XTest\n\n\ndef main() -> None:\n    \"\"\"\n    Run the invest-sai algorithm and print learned rules and predictions\n    \"\"\"\n\n    XTrain, yTrain, XTest = simulate_data()  # Simulate data\n\n    # Start using Invest-SAI algorithm\n    # Input parameters\n    params = {\n        'q': 3,\n        'parallel': True,\n        'nb_workers': 2\n    }\n\n    invest_sai = SAI(params=params)\n    invest_sai.fit(X=XTrain, y=yTrain)\n\n    # This is the output expected success probilities of the securities in the test data\n    yTest = invest_sai.predict(X=XTest)\n\n    print(\n        f'\\n\\nInterpretable rules with conditional probailities to rank securities\\n{invest_sai.rules}\\n')\n    print(f'\\nRanking of securities in XTest\\n{yTest}\\n')\n\n\nif __name__ == '__main__':\n    main()\n```\n\n## Technical debt\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/timthlaw/Invest-SAI",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "investsai",
            "package_url": "https://pypi.org/project/investsai/",
            "platform": null,
            "project_url": "https://pypi.org/project/investsai/",
            "project_urls": {
                "Bug Tracker": "https://github.com/timthlaw/Invest-SAI/issues",
                "Homepage": "https://github.com/timthlaw/Invest-SAI"
            },
            "release_url": "https://pypi.org/project/investsai/0.0.1/",
            "requires_dist": [
                "mlxtend (>=0.21.0)",
                "numpy (>=1.21.6)",
                "pandarallel (>=1.6.3)",
                "pandas (>=1.3.5)"
            ],
            "requires_python": ">=3.7",
            "summary": "a SAI algorithm to rank securities",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15920499,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c47927ec075d152fea5bbdc7cfb5d2ba",
                    "sha256": "b1b9fb039ff557235726f19e92fa6bbfb0d5e4096b5610bbb7450deca0feb846"
                },
                "downloads": -1,
                "filename": "investsai-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c47927ec075d152fea5bbdc7cfb5d2ba",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 7742,
                "upload_time": "2022-11-29T00:06:31",
                "upload_time_iso_8601": "2022-11-29T00:06:31.319377Z",
                "url": "https://files.pythonhosted.org/packages/53/6e/ae30219110727f50ebeb6c093cede1a01bbe1ffcf25e414779a50c46f1e6/investsai-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "20b24c40234d94385f4c2469dc6e9504",
                    "sha256": "2dd6f9a28dce2f068476c78c3dd3d15b1a2036f6676c43d63cc4a50147fee8b4"
                },
                "downloads": -1,
                "filename": "investsai-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "20b24c40234d94385f4c2469dc6e9504",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8784,
                "upload_time": "2022-11-29T00:06:33",
                "upload_time_iso_8601": "2022-11-29T00:06:33.193204Z",
                "url": "https://files.pythonhosted.org/packages/85/6a/4c76f1063f0fe6a57ac78e896eeb7591f6900929a61296e9cebe2cd67ec3/investsai-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}