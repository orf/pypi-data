{
    "1.0.8": {
        "info": {
            "author": "Seyyed Mohammad Hejazi Hoseini",
            "author_email": "smohammadhejazi78@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Education",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "![KabirRec](https://drive.google.com/uc?export=view&id=1nBP3-89Hadr-BpFCgWeH_QNY8XhIr2f5 \"KabirRec\")\r\n\r\n# Overview\r\n**KabirRec** is a Python recommendation service that uses **surprise** and **scikit-learn**.\r\n\r\nIt has three main services:\r\n- Cold Start Recommendation: Recomnends the most polular items\r\n- Similar Items Recommendation: Recomnends similar items to the item given\r\n- User Specific Recommendation: Recommends the best items to a user based on their history.\r\n\r\n# Getting started\r\nIts easy to use each service, first you need to create the RecommendationService object. Then read your csv data. We use ml-100k which has user info, user ratings, item info. We need to specify the columns as well as each csv seperators.\r\n```\r\nrecommendation_service = RecommendationService()\r\n\r\nrecommendation_service.read_csv_data(\r\n    user_info_path=\"../dataset/ml-100k/u.user\",\r\n    user_ratings_path=\"../dataset/ml-100k/u.data\",\r\n    item_info_path=\"../dataset/ml-100k/u.item\",\r\n    info_columns=[\"user_id\", \"age\", \"gender\", \"occupation\", \"zip_code\"],\r\n    ratings_columns=[\"user_id\", \"item_id\", \"rating\", \"timestamp\"],\r\n    item_columns=[\"movie_id\", \"movie_title\", \"release_date\", \"video_release_date\", \"imdb_url\", \"unknown\",\r\n    \"action\", \"adventure\", \"animation\", \"children's\", \"comedy\", \"crime\", \"documentary\",\r\n    \"drama\", \"fantasy\", \"film_noir\", \"horror\", \"musical\", \"mystery\", \"romance\", \"sci-fi\",\r\n    \"thriller\", \"war\", \"western\"],\r\n    info_sep=\"|\", ratings_sep=\"\\t\", item_sep=\"|\"\r\n)\r\n```\r\n\r\nThen you can call on generators for services to get the service object. First call the fit function and then you can use their prediction services.\r\n## User Specific Example\r\n```\r\nuser_specific = recommendation_service.user_specific_module(options={\"verbose\": True, \"k\": 26})\r\nuser_specific.fit(20, 30)\r\nuser_specific.draw_clusters_graph()\r\nprediction_rating = user_specific.recommend(1, 4)\r\nprint(prediction_rating)\r\nprediction_rating = user_specific.predict_rating(1, 1)\r\nprint(prediction_rating.est)\r\n```\r\nOutput:\r\n```\r\nFitting the algorithm...\r\nFinding optimal cluster...\r\nOptimal cluster k=23 found.\r\nClustering with k=23...\r\nClustering done.\r\nBuilding tables...\r\nTables are built.\r\nFitting is done.\r\n[(1189, 'Prefontaine (1997)', 5), (1500, 'Santa with Muscles (1996)', 5), (814, 'Great Day in Harlem, A (1994)', 5), (1536, 'Aiqing wansui (1994)', 5)]\r\n3.603819651096398\r\n```\r\n![Clusters Info](https://drive.google.com/uc?export=view&id=1ja8V-cmDBhkc4wJHSGR0-6shcHGgeppi \"Clusters Info\")\r\n## Similar Item Example\r\n```\r\nsimilar_items = recommendation_service.similar_items_module(options={\"verbose\": True})\r\nsimilar_items.fit()\r\nitems = similar_items.recommend(\"Toy Story (1995)\", k=5)\r\nfor movie in items:\r\n    print(movie)\r\n```\r\nOutput:\r\n```\r\nFitting the algorithm...\r\nEstimating biases using als...\r\nComputing the pearson_baseline similarity matrix...\r\nDone computing similarity matrix.\r\nFitting is done.\r\nFinding 5 nearest items...\r\n5 nearest items found.\r\nBeauty and the Beast (1991)\r\nRaiders of the Lost Ark (1981)\r\nThat Thing You Do! (1996)\r\nLion King, The (1994)\r\nCraft, The (1996)\r\n```\r\n## Cold Start Example\r\n```\r\ncold_start = recommendation_service.cold_start_module(options {\"verbose\": True})\r\ncold_start.fit()\r\nitems = cold_start.recommend(5)\r\nfor movie in items:\r\n    print(movie)\r\n```\r\nOutput:\r\n```\r\nRanking items...\r\nAll items are ranked.\r\n     item_id  rating\r\n49        50    2541\r\n99       100    2111\r\n180      181    2032\r\n257      258    1936\r\n173      174    1786\r\n```\r\n## More Information\r\nFor more information on how to use the library, look at comments in the codes.\r\n\r\n# Installation\r\nYou can use pip (you'll need a C compiler and numpy library):\r\n```\r\n$ pip install kabirrec\r\n```\r\nYou can also clone the repo and build the library:\r\n```\r\n$ pip install numpy cython\r\n$ git clone https://github.com/smohammadhejazi/recommendation-as-a-service\r\n$ cd recommendation-as-a-service\r\n$ python setup.py install\r\n```\r\n\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/smohammadhejazi/recommendation-as-a-service",
            "keywords": "recommendation-service,recommendation-system,recommender-system",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "kabirrec",
            "package_url": "https://pypi.org/project/kabirrec/",
            "platform": null,
            "project_url": "https://pypi.org/project/kabirrec/",
            "project_urls": {
                "Homepage": "https://github.com/smohammadhejazi/recommendation-as-a-service"
            },
            "release_url": "https://pypi.org/project/kabirrec/1.0.8/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "A recommendation system with cold start, similar items and user specific recommendation",
            "version": "1.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16140217,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bce9e43032ec1c50cd481e70d118d728",
                    "sha256": "c6bac2d2885366f60e0d4031117a0094f57d770ce2afddb74c69ceea2164dbf8"
                },
                "downloads": -1,
                "filename": "kabirrec-1.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "bce9e43032ec1c50cd481e70d118d728",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 9058109,
                "upload_time": "2022-12-18T11:50:20",
                "upload_time_iso_8601": "2022-12-18T11:50:20.661375Z",
                "url": "https://files.pythonhosted.org/packages/04/ef/d1a36bb167cfd358b36b2138cd4f539689725ce62b9228ca17cde04e9a06/kabirrec-1.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}