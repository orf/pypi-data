{
    "0.0.1": {
        "info": {
            "author": "Laurel Orr and Avanika Narayan",
            "author_email": "lorr1@cs.stanford.edu",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description": "\n# Manifest\nHow to make prompt programming with Foundation Models a little easier.\n\n\n# Table of Contents\n- [Install](#install)\n- [Getting Started](#getting-started)\n- [Manifest](#manifest-components)\n- [Local HuggingFace Models](#local-huggingface-models)\n- [Development](#development)\n\n\n# Install\nInstall:\n```bash\npip install manifest-ml\n```\n\nInstall with HuggingFace API Support:\n```bash\npip install manifest-ml[api]\n```\n\nDev Install:\n```bash\ngit clone git@github.com:HazyResearch/manifest.git\ncd manifest\nmake dev\n```\n\n# Getting Started\nRunning is simple to get started. If using OpenAI, set `export OPENAI_API_KEY=<OPENAIKEY>` (or pass key in through variable `client_connection`) then run\n\n```python\nfrom manifest import Manifest\n\n# Start a manifest session to OpenAI - default `engine=text-davinci-002`\nmanifest = Manifest(\n    client_name = \"openai\",\n)\nmanifest.run(\"Why is the grass green?\")\n```\n\n# Manifest Components\nManifest is meant to be a very light weight package to help with prompt design and iteration. Three key design decisions of Manifest are\n\n* Prompt are functional -- they can take an input example and dynamically change\n* All models are behind APIs\n* Supports caching of model inputs/outputs for iteration, reproducibility, and cost saving\n\n## Models\nManifest provides model clients for [OpenAI](https://openai.com/), [AI21](https://studio.ai21.com/), [Cohere](https://cohere.ai/), [Together](https://together.xyz/), and HuggingFace (see [below](#huggingface-models) for how to use locally hosted HuggingFace models). You can toggle between the models by changing `client_name` and `client_connection`. For example, if a HuggingFace model is loaded locally, run\n```python\nmanifest = Manifest(\n    client_name = \"huggingface\",\n    client_connection = \"http://127.0.0.1:5000\",\n)\n```\nIf you want to use Cohere, run\n```python\nmanifest = Manifest(\n    client_name = \"cohere\",\n    client_connection = <COHERE_API_KEY>,\n)\n```\nYou can also just set `export COHERE_API_KEY=<COHERE_API_KEY>` and not use `client_connection`.\n\n\nYou can see the model details and possible model inputs to `run()` via\n```python\nprint(manifest.client.get_model_params())\nprint(manifest.client.get_model_inputs())\n```\n\n## Prompts\nA Manifest prompt is a function that accepts a single input to generate a string prompt to send to a model.\n\n```python\nfrom manifest import Prompt\nprompt = Prompt(lambda x: f\"Hello, my name is {x}\")\nprint(prompt(\"Laurel\"))\n>>> \"Hello, my name is Laurel\"\n```\n\nRunning\n```python\nresult = manifest.run(prompt, \"Laurel\")\n```\nwill send ``Hello, my name is Laurel'' to the model.\n\nAs you saw above, if you don't want your prompt to change, we also support static strings\n```python\nresult = manifest.run(\"Hello, my name is static\")\n```\n\n## Global Cache\nWe support having queries and results stored in a global cache that can be shared across users. We treat inputs and outputs as key value pairs and support SQLite or Redis backends. To start with global caching using SQLite, run\n\n```python\nmanifest = Manifest(\n    client_name = \"openai\",\n    cache_name = \"sqlite\",\n    cache_connection = \"mycache.sqlite\",\n)\n```\nThe cache will be saved in `mycache.sqlite`.\n\nWe also support Redis backend.\n```python\nmanifest = Manifest(\n    client_name = \"openai\",\n    cache_name = \"redis\",\n    cache_connection = \"localhost:6379\"\n)\n```\nAs a hint, if you want to get Redis running, see the `docker run` command below under development.\n\n## Sessions\nEach Manifest run supports a session that, in addition to a global cache, connects to a local SQLite DB to store user query history.\n```python\nmanifest = Manifest(\n    client_name = \"openai\",\n    cache_name = \"sqlite\",\n    cache_connection = \"mycache.sqlite\",\n    session_id = \"grass_color\",\n)\n```\nwill start a Manifest session with the session name `grass_color`. This can be helpful for a user to logically keep track of sessions, see interaction history, and resume sessions if desired. If the session id provided is `_default`, we generate a random id for the user.\n\nAfter a few queries, the user can explore their history\n```python\nmanifest.get_last_queries(4)\n```\nwill retrieve the last 4 model queries and responses.\n\n## Running Queries\nOnce you have a session open, you can write and develop prompts.\n\n```python\nprompt = Prompt(lambda x: \"Hello, my name is {x}\")\nresult = manifest.run(prompt, \"Laurel\")\n```\n\nYou can also run over multiple examples.\n```python\nresults = manifest.run_batch(prompt, [\"Laurel\", \"Avanika\"])\n```\n\nIf something doesn't go right, you can also ask to get a raw manifest Response.\n```python\nresult_objects = manifest.batch_run(prompt, [\"Laurel\", \"Avanika\"], return_response=True)\nfor result_object in result_objects:\n    print(result_object.get_request())\n    print(result_object.is_cached())\n    print(result_object.get_json_response())\n```\n\nBy default, we do not truncate results based on a stop token. You can change this by either passing a new stop token to a Manifest session or to a `run` or `run_batch`.\n```python\nresult = manifest.run(prompt, \"Laurel\", stop_token=\"and\")\n```\n\nIf you want to change default parameters to a model, we pass those as `kwargs` to the client.\n```python\nresult = manifest.run(prompt, \"Laurel\", max_tokens=50)\n```\n\n# Local Huggingface Models\nTo use a HuggingFace generative model, in `manifest/api` we have a Falsk application that hosts the models for you.\n\nIn a separate terminal or Tmux/Screen session, to load 6B parameters models, run\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path EleutherAI/gpt-j-6B \\\n    --device 0\n```\nYou will see the Flask session start and output a URL `http://127.0.0.1:5000`. Pass this in to Manifest. If you want to use a different port, set the `FLASK_PORT` environment variable.\n\n```python\nmanifest = Manifest(\n    client_name = \"huggingface\",\n    client_connection = \"http://127.0.0.1:5000\",\n)\n```\n\nIf you have a custom model you trained, pass the model path to `--model_name_or_path`.\n\nTo help load larger models, we also support using `parallelize()` from HF, [accelerate](https://huggingface.co/docs/accelerate/index), and [bitsandbytes](https://github.com/TimDettmers/bitsandbytes). You will need to install these packages first. We list the commands to load larger models below.\n\n* T0pp\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path bigscience/T0pp \\\n    --use_hf_parallelize\n```\n\n* NeoX 20B (requires at least 60GB of GPU memory)\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path EleutherAI/gpt-neox-20b \\\n    --use_accelerate_multigpu \\\n    --percent_max_gpu_mem_reduction 0.75\n```\n* Bloom 175B (requires at least 240GB of GPU memory)\n```bash\npython3 -m manifest.api.app \\\n    --model_type huggingface \\\n    --model_name_or_path bigscience/bloom \\\n    --use_bitsandbytes \\\n    --percent_max_gpu_mem_reduction 0.85\n```\n\n# Development\nBefore submitting a PR, run\n```bash\nexport REDIS_PORT=\"6380\"  # or whatever PORT local redis is running for those tests\ncd <REDIS_PATH>\ndocker run -d -p 127.0.0.1:${REDIS_PORT}:6379 -v `pwd`:`pwd` -w `pwd` --name manifest_redis_test redis\nmake test\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HazyResearch/manifest",
            "keywords": "",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "manifest-ml",
            "package_url": "https://pypi.org/project/manifest-ml/",
            "platform": null,
            "project_url": "https://pypi.org/project/manifest-ml/",
            "project_urls": {
                "Homepage": "https://github.com/HazyResearch/manifest"
            },
            "release_url": "https://pypi.org/project/manifest-ml/0.0.1/",
            "requires_dist": [
                "dill (>=0.3.5)",
                "redis (>=4.3.1)",
                "requests (>=2.27.1)",
                "sqlitedict (>=2.0.0)",
                "tqdm (>=4.64.0)",
                "nbsphinx (>=0.8.0) ; extra == 'all'",
                "sphinx-autobuild ; extra == 'all'",
                "pytest (>=7.0.0) ; extra == 'all'",
                "accelerate (>=0.10.0) ; extra == 'all'",
                "Flask (>=2.1.2) ; extra == 'all'",
                "types-redis (>=4.2.6) ; extra == 'all'",
                "recommonmark (>=0.7.1) ; extra == 'all'",
                "pytest-cov (>=3.0.0) ; extra == 'all'",
                "pre-commit (>=2.14.0) ; extra == 'all'",
                "autopep8 (>=1.6.0) ; extra == 'all'",
                "transformers (>=4.20.0) ; extra == 'all'",
                "types-requests (>=2.27.29) ; extra == 'all'",
                "pep8-naming (>=0.12.1) ; extra == 'all'",
                "docformatter (>=1.4) ; extra == 'all'",
                "black (>=22.3.0) ; extra == 'all'",
                "types-setuptools (>=57.4.17) ; extra == 'all'",
                "python-dotenv (>=0.20.0) ; extra == 'all'",
                "types-protobuf (>=3.19.21) ; extra == 'all'",
                "mypy (>=0.950) ; extra == 'all'",
                "isort (>=5.9.3) ; extra == 'all'",
                "sphinx-rtd-theme (>=0.5.1) ; extra == 'all'",
                "flake8-docstrings (>=1.6.0) ; extra == 'all'",
                "twine ; extra == 'all'",
                "types-python-dateutil (>=2.8.16) ; extra == 'all'",
                "types-PyYAML (>=6.0.7) ; extra == 'all'",
                "flake8 (>=4.0.0) ; extra == 'all'",
                "torch (>=1.8.0) ; extra == 'all'",
                "Flask (>=2.1.2) ; extra == 'api'",
                "accelerate (>=0.10.0) ; extra == 'api'",
                "transformers (>=4.20.0) ; extra == 'api'",
                "torch (>=1.8.0) ; extra == 'api'",
                "autopep8 (>=1.6.0) ; extra == 'dev'",
                "black (>=22.3.0) ; extra == 'dev'",
                "isort (>=5.9.3) ; extra == 'dev'",
                "flake8 (>=4.0.0) ; extra == 'dev'",
                "flake8-docstrings (>=1.6.0) ; extra == 'dev'",
                "mypy (>=0.950) ; extra == 'dev'",
                "pep8-naming (>=0.12.1) ; extra == 'dev'",
                "docformatter (>=1.4) ; extra == 'dev'",
                "pytest (>=7.0.0) ; extra == 'dev'",
                "pytest-cov (>=3.0.0) ; extra == 'dev'",
                "python-dotenv (>=0.20.0) ; extra == 'dev'",
                "sphinx-rtd-theme (>=0.5.1) ; extra == 'dev'",
                "nbsphinx (>=0.8.0) ; extra == 'dev'",
                "recommonmark (>=0.7.1) ; extra == 'dev'",
                "pre-commit (>=2.14.0) ; extra == 'dev'",
                "types-redis (>=4.2.6) ; extra == 'dev'",
                "types-requests (>=2.27.29) ; extra == 'dev'",
                "types-PyYAML (>=6.0.7) ; extra == 'dev'",
                "types-protobuf (>=3.19.21) ; extra == 'dev'",
                "types-python-dateutil (>=2.8.16) ; extra == 'dev'",
                "types-setuptools (>=57.4.17) ; extra == 'dev'",
                "sphinx-autobuild ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": ">=3.8.0",
            "summary": "Manifest for Prompt Programming Foundation Models.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15694073,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4b155979bbe8df95749ef183cc0eddaa",
                    "sha256": "fc4e62e706fd767fd8851d91051fdb71bc79b2df9c66f5879736c46d8163a316"
                },
                "downloads": -1,
                "filename": "manifest_ml-0.0.1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4b155979bbe8df95749ef183cc0eddaa",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">=3.8.0",
                "size": 42869,
                "upload_time": "2022-11-08T04:37:59",
                "upload_time_iso_8601": "2022-11-08T04:37:59.646004Z",
                "url": "https://files.pythonhosted.org/packages/82/e7/6c7712c2aaeb5f09345ced6bc44676e175875781a8a9cbcc293383103bd7/manifest_ml-0.0.1-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2705e375d8f6b44097784ad55c3d3bac",
                    "sha256": "f828faf7de41fad5318254beec08acdf5142196e0e22203a4047412c2d3127a0"
                },
                "downloads": -1,
                "filename": "manifest-ml-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "2705e375d8f6b44097784ad55c3d3bac",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8.0",
                "size": 31885,
                "upload_time": "2022-11-08T04:38:01",
                "upload_time_iso_8601": "2022-11-08T04:38:01.549632Z",
                "url": "https://files.pythonhosted.org/packages/51/b8/4c67f592a77fa997128d3ec3ca0994826fabe5c1f432b087b10a135149da/manifest-ml-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}