{
    "0.0.1.dev2": {
        "info": {
            "author": "",
            "author_email": "Audrey Dutcher <audrey@rhelmot.io>",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "pipeline,data,task,repository,processing,async,kubernetes,s3,mongodb,docker",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pydatatask",
            "package_url": "https://pypi.org/project/pydatatask/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydatatask/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/pydatatask/0.0.1.dev2/",
            "requires_dist": [
                "kubernetes",
                "kubernetes-asyncio",
                "docker-registry-client-async",
                "python-dxf",
                "jinja2",
                "pyyaml",
                "networkx",
                "aiobotocore",
                "types-aiobotocore[essential]",
                "motor",
                "ipython",
                "aiofiles",
                "aioshutil",
                "tox (>=4.0.0) ; extra == 'dev'",
                "black ; extra == 'dev'",
                "isort ; extra == 'dev'",
                "pytest ; extra == 'test'",
                "pytest-cov ; extra == 'test'",
                "mypy ; extra == 'type'",
                "kubernetes-typed ; extra == 'type'",
                "types-pyyaml ; extra == 'type'",
                "networkx-stubs ; extra == 'type'",
                "types-aiofiles ; extra == 'type'"
            ],
            "requires_python": ">=3.8",
            "summary": "Library for constructing data-centric processing pipelines with few invariants",
            "version": "0.0.1.dev2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16068129,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a43a7277fd0c6698400fa7e53cf662cb",
                    "sha256": "a0cb90d3994f4e7f2684e0cc7c04e8e4f34f41eca936fe5f6f467a37968b7aa8"
                },
                "downloads": -1,
                "filename": "pydatatask-0.0.1.dev2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a43a7277fd0c6698400fa7e53cf662cb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 19948,
                "upload_time": "2022-12-11T13:26:23",
                "upload_time_iso_8601": "2022-12-11T13:26:23.240607Z",
                "url": "https://files.pythonhosted.org/packages/26/e3/3be4528974c430cd5c3796a402f174b343fffca3a1389eb4058fcd5009ca/pydatatask-0.0.1.dev2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8dc3a5833fea11d352ba39d32ebb65f3",
                    "sha256": "916ded471dfe6b6c7713389aca6a89b1c651317daa08261323cb6547bceb90e1"
                },
                "downloads": -1,
                "filename": "pydatatask-0.0.1.dev2.tar.gz",
                "has_sig": false,
                "md5_digest": "8dc3a5833fea11d352ba39d32ebb65f3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 19863,
                "upload_time": "2022-12-11T13:26:24",
                "upload_time_iso_8601": "2022-12-11T13:26:24.783605Z",
                "url": "https://files.pythonhosted.org/packages/0f/cc/510349ef8d1784c5df73482003b0e2660ca1f0eae7f4119407678eb0bd09/pydatatask-0.0.1.dev2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "",
            "author_email": "Audrey Dutcher <audrey@rhelmot.io>",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pydatatask\n\npydatatask is a library for building data pipelines. Sounds familiar? The cool part here is that you are not restricted in the way your data is stored or the way your tasks are executed.\n\n## Installing\n\n`pip install pydatatask`\n\n## Nomenclature\n\nA **task** is one phase of computation.\nIt is parameterized (instantiated) by a single **job** that it is currently working on.\nA **pipeline** is a collection of tasks.\nTasks read and write data from **repositories**, which are arbitrary key-value stores.\n\n## The way your data is stored\n\nRepositories are the core of pydatatask.\nYou can store your data in any way you desire and as long as you can write a Repository class to describe it, it can be used to drive a pipeline.\n\nThe notion of the \"value\" part of the key-value store abstraction is defined very, very loosely.\nThe repository base class doesn't have an interface to get or store values, only to query for and delete keys.\nInstead, you have to know which repository subclass you're working with, and use its interfaces.\nFor example, `MetadataRepository` assumes that its values are structured objects and loads them fully into memory, and `BlobRepository` provides a streaming interface to a flat address space.\n\nCurrent in-tree repositories:\n- In-memory dicts\n- Files or directories on the local filesystem\n- S3 or compatible buckets\n- MongoDB collections\n- Docker repositories\n- Various combinators\n\n## The way your tasks are executed\n\nA task is connected to repositories through **links**. A link is a repository plus a collection of properties describing the repository's relationship to the task - i.e. whether it is input or output, whether it should inhibit dependent tasks from starting, etc.\n\nCurrent in-tree task types:\n- In-process python function execution\n- Python function execution with the help of a concurrent.futures Executor\n- Python function execution on a kubernetes cluster\n- Script execution on a kubernetes cluster\n\nMost tasks define the notion of an **environment** which is used to template the task for the particular job that is being run.\n\n## Putting it together: the Pipeline object\n\nA pipeline is just an unordered collection of tasks. Relationships between the tasks are implicit, defined by which repositories they share.\n\n## Management of resources: the Session\n\nTODO\n\n## Example\n\n```python\nimport os\nimport aiobotocore.session\nimport pydatatask\n\nsession = pydatatask.Session()\n\n@session.resource\nasync def bucket():\n    bucket_session = aiobotocore.session.get_session()\n    async with bucket_session.create_client(\n        's3',\n        endpoint_url=os.getenv('BUCKET_ENDPOINT'),\n        aws_access_key_id=os.getenv(\"BUCKET_USERNAME\"),\n        aws_secret_access_key=os.getenv(\"BUCKET_PASSWORD\"),\n    ) as client:\n        yield client\n\nbooks_repo = pydatatask.S3BucketRepository(bucket, \"books/\", '.txt')\ndone_repo = pydatatask.YamlMetadataFileRepository('./results/')\nreports_repo = pydatatask.FileRepository('./reports', '.txt')\n\n@pydatatask.InProcessSyncTask('summary', done_repo)\nasync def summary(job: str, books: pydatatask.S3BucketRepository, reports: pydatatask.FileRepository):\n    paragraphs, lines, words, chars = 0, 0, 0, 0\n    async with await books.open(job, 'r') as fp:\n        data = await fp.read()\n    for line in data.splitlines():\n        if line.strip() == '':\n            paragraphs += 1\n        lines += 1\n        words += len(line.split())\n        chars += len(line)\n    async with await reports.open(job, 'w') as fp:\n        await fp.write(f'The book \"{job}\" has {paragraphs} paragraphs, {lines} lines, {words} words, and {chars} characters.\\n')\n\nsummary.link('books', books_repo, is_input=True)\nsummary.link('reports', reports_repo, is_output=True)\n\npipeline = pydatatask.Pipeline([summary], session)\n\nif __name__ == '__main__':\n    pydatatask.main(pipeline)\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "pipeline,data,task,repository,processing,async,kubernetes,s3,mongodb,docker",
            "license": "Copyright 2022 Audrey Dutcher  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pydatatask",
            "package_url": "https://pypi.org/project/pydatatask/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydatatask/",
            "project_urls": {
                "repository": "https://github.com/rhelmot/pydatatask"
            },
            "release_url": "https://pypi.org/project/pydatatask/0.1.4/",
            "requires_dist": [
                "kubernetes",
                "kubernetes-asyncio",
                "docker-registry-client-async",
                "python-dxf",
                "jinja2",
                "pyyaml",
                "networkx",
                "aiobotocore",
                "types-aiobotocore[essential]",
                "motor",
                "ipython",
                "aiofiles",
                "aioshutil",
                "tox (>=4.0.0) ; extra == 'dev'",
                "black ; extra == 'dev'",
                "isort ; extra == 'dev'",
                "pytest ; extra == 'test'",
                "pytest-cov ; extra == 'test'",
                "mypy ; extra == 'type'",
                "kubernetes-typed ; extra == 'type'",
                "types-pyyaml ; extra == 'type'",
                "networkx-stubs ; extra == 'type'",
                "types-aiofiles ; extra == 'type'"
            ],
            "requires_python": ">=3.8",
            "summary": "Library for constructing data-centric processing pipelines with few invariants",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16068129,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4da9b13fd90ab6151a83acd875da0be7",
                    "sha256": "401b4a5b948f8c3c40f776ba392e636e507412440322eeef7ce85c9b1dd1f55c"
                },
                "downloads": -1,
                "filename": "pydatatask-0.1.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4da9b13fd90ab6151a83acd875da0be7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 22218,
                "upload_time": "2022-12-11T23:48:45",
                "upload_time_iso_8601": "2022-12-11T23:48:45.907677Z",
                "url": "https://files.pythonhosted.org/packages/15/ea/57e49530b79debf57110dbe277cc840289a6efcd67e86c81a6d3912a2cfb/pydatatask-0.1.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "027e5377576cdff6d1a96215bf4812f7",
                    "sha256": "f10e506ca7fbc841b519849126f927bbedc21354962f66008d1b980e8ac2d7da"
                },
                "downloads": -1,
                "filename": "pydatatask-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "027e5377576cdff6d1a96215bf4812f7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 22064,
                "upload_time": "2022-12-11T23:48:47",
                "upload_time_iso_8601": "2022-12-11T23:48:47.565202Z",
                "url": "https://files.pythonhosted.org/packages/ef/4a/6ca8cc18eedc2610ec4bb4c41cd90c7760f869936966c5119528feed62d2/pydatatask-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}