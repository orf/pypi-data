{
    "0.5": {
        "info": {
            "author": "",
            "author_email": "Jonathan de Bruin <jonathandebruinos@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "<p align=\"center\">\n  <img alt=\"PyAlex - a Python wrapper for OpenAlex\" src=\"https://github.com/J535D165/pyalex/raw/main/pyalex_repocard.svg\">\n</p>\n\n# PyAlex\n\nPyAlex is a Python library for [OpenAlex](https://openalex.org/). OpenAlex is\nan index of hundreds of millions of interconnected scholarly papers, authors,\ninstitutions, and more. OpenAlex offers a robust, open, and free [REST API](https://docs.openalex.org/) to extract, aggregate, or search scholarly data.\nPyAlex is a lightweight and thin Python interface to this API. PyAlex tries to\nstay as close as possible to the design of the original service.\n\nThe following features of OpenAlex are currently supported by PyAlex:\n\n- [x] Get single entities\n- [x] Filter entities\n- [x] Search entities\n- [x] Group entities\n- [x] Search filters\n- [x] Pagination\n- [ ] [Autocomplete endpoint](https://docs.openalex.org/api/autocomplete-endpoint)\n- [x] N-grams\n\nWe aim to cover the entire API, and we are looking for help. We are welcoming Pull Requests.\n\n## Key features\n\n- **Pipe operations** - PyAlex can handle multiple operations in a sequence. This allows the developer to write understandable queries. For examples, see [code snippets](#code-snippets).\n- **Plaintext abstracts** - OpenAlex [doesn't include plaintext abstracts](https://docs.openalex.org/about-the-data/work#abstract_inverted_index) due to legal constraints. PyAlex converts the inverted abstracts into [plaintext abstracts on the fly](#get-abstract).\n- **Permissive license** - OpenAlex data is CC0 licensed :raised_hands:. PyAlex is published under the MIT license.\n\n## Installation\n\nPyAlex requires Python 3.6 or later.\n\n```sh\npip install pyalex\n```\n\n## Getting started\n\nPyAlex offers support for all [Entity Objects (Works, Authors, Venues, Institutions, Concepts)](https://docs.openalex.org/about-the-data#entity-objects).\n\n```python\nfrom pyalex import Works, Authors, Venues, Institutions, Concepts\n```\n\n### The polite pool\n\n[The polite pool](https://docs.openalex.org/api#the-polite-pool) has much\nfaster and more consistent response times. To get into the polite pool, you\nset your email:\n\n```python\nimport pyalex\n\npyalex.config.email = \"mail@example.com\"\n```\n\n### Get single entity\n\nGet a single Work, Author, Venue, Institution or Concept from OpenAlex by the\nOpenAlex ID, or by DOI or ROR.\n\n```python\nWorks()[\"W2741809807\"]\n\n# same as\nWorks()[\"https://doi.org/10.7717/peerj.4375\"]\n```\n\nThe result is a `Work` object, which is very similar to a dictionary. Find the avialable fields with `.keys()`.\n\nFor example, get the open access status:\n\n```python\nWorks()[\"W2741809807\"][\"open_access\"]\n```\n\n```python\n{'is_oa': True, 'oa_status': 'gold', 'oa_url': 'https://doi.org/10.7717/peerj.4375'}\n```\n\nThe previous works also for Authors, Venues, Institutions and Concepts\n\n```python\nAuthors()[\"A2887243803\"]\nAuthors()[\"https://orcid.org/0000-0002-4297-0502\"]  # same\n```\n\n#### Get random\n\nGet a [random Work, Author, Venue, Institution or Concept](https://docs.openalex.org/api/get-single-entities#random-entity).\n\n```python\nWorks().random()\nAuthors().random()\nVenues().random()\nInstitutions().random()\nConcepts().random()\n```\n\n#### Get abstract\n\nOnly for Works. Request a work from the OpenAlex database:\n\n```python\nw = Works()[\"W3128349626\"]\n```\n\nAll attributes are available like documented under [Works](https://docs.openalex.org/about-the-data/work), as well as `abstract` (only if `abstract_inverted_index` is not None).\n\n```python\nw[\"abstract\"]\n```\n\n```python\n'Abstract To help researchers conduct a systematic review or meta-analysis as efficiently and transparently as possible, we designed a tool to accelerate the step of screening titles and abstracts. For many tasks\u2014including but not limited to systematic reviews and meta-analyses\u2014the scientific literature needs to be checked systematically. Scholars and practitioners currently screen thousands of studies by hand to determine which studies to include in their review or meta-analysis. This is error prone and inefficient because of extremely imbalanced data: only a fraction of the screened studies is relevant. The future of systematic reviewing will be an interaction with machine learning algorithms to deal with the enormous increase of available text. We therefore developed an open source machine learning-aided pipeline applying active learning: ASReview. We demonstrate by means of simulation studies that active learning can yield far more efficient reviewing than manual reviewing while providing high quality. Furthermore, we describe the options of the free and open source research software and present the results from user experience tests. We invite the community to contribute to open source projects such as our own that provide measurable and reproducible improvements over current practice.'\n```\n\nPlease respect the legal constraints when using this feature.\n\n### Get lists of entities\n\nFor list of enities, you can return the result as well as the metadata. By default, only the results are returned.\n\n```python\nresults, meta = Concepts().get(return_meta=True)\nprint(meta)\n```\n\n```python\n{'count': 65073, 'db_response_time_ms': 16, 'page': 1, 'per_page': 25}\n```\n\n#### Filter records\n\n```python\nWorks().filter(publication_year=2020, is_oa=True).get()\n```\n\nwhich is identical to:\n\n```python\nWorks().filter(publication_year=2020).filter(is_oa=True).get()\n```\n\n#### Nested attribute filters\n\nSome attribute filers are nested and separated with dots by OpenAlex. For\nexample, filter on [`authorships.institutions.ror`](https://docs.openalex.org/api/get-lists-of-entities/filter-entity-lists#works-attribute-filters).\n\nIn case of nested attribute filters, use a dict to built the query.\n\n```python\nWorks()\n  .filter(authorships={\"institutions\": {\"ror\": \"04pp8hn57\"}})\n  .get()\n```\n\n#### Search entities\n\nOpenAlex reference: [The search parameter](https://docs.openalex.org/api/get-lists-of-entities/search-entity-lists#the-search-parameter)\n\n```python\nWorks().search(\"fierce creatures\").get()\n```\n\n#### Search filter\n\nOpenAlex reference: [The search filter](https://docs.openalex.org/api/get-lists-of-entities/search-entity-lists#the-search-filter)\n\n```python\nAuthors().search_filter(display_name=\"einstein\").get()\n```\n\n```python\nWorks().search_filter(title=\"cubist\").get()\n```\n\n#### Sort entity lists\n\nOpenAlex reference: [Sort entity lists](https://docs.openalex.org/api/get-lists-of-entities/sort-entity-lists).\n\n```python\nWorks().sort(cited_by_count=\"desc\").get()\n```\n\n#### Paging\n\nOpenAlex offers two methods for paging: [basic paging](https://docs.openalex.org/api#basic-paging) and [cursor paging](https://docs.openalex.org/api#cursor-paging). Both methods are supported by\nPyAlex, although cursor paging seems to be easier to implement and less error-prone.\n\n##### Basic paging\n\nSee limitations of [basic paging](https://docs.openalex.org/api#basic-paging) in the OpenAlex documentation.\n\n```python\nfrom pyalex import Authors\n\n# example query\nquery = Authors().search_filter(display_name=\"einstein\")\n\n# set the page\npage = 1\n\n# store the results\nresults = []\n\n# loop till page is None\nwhile page is not None:\n\n    # get the results\n    r, m = query.get(return_meta=True, per_page=200, page=page)\n\n    # results\n    results.append(r)\n\n    page = m[\"page\"] + 1 if page is not None else None\n```\n\n##### Cursor paging\n\n```python\nfrom pyalex import Authors\n\n# example query\nquery = Authors().search_filter(display_name=\"einstein\")\n\n# set the next_cursor (to *)\nnext_cursor = \"*\"\n\n# store the results\nresults = []\n\n# loop till next_cursor is None\nwhile next_cursor is not None:\n\n    # get the results\n    r, m = query.get(return_meta=True, per_page=200, cursor=next_cursor)\n\n    # results\n    results.extend(r)\n\n    # set the next cursor\n    next_cursor = m[\"next_cursor\"]\n```\n\n### Get N-grams\n\nOpenAlex reference: [Get N-grams](https://docs.openalex.org/api/get-n-grams).\n\n\n```python\nWorks()[\"W2023271753\"].ngrams()\n```\n\n\n## Code snippets\n\nA list of awesome use cases of the OpenAlex dataset.\n\n### Cited publications (referenced works)\n\n```python\nfrom pyalex import Works\n\n# the work to extract the referenced works of\nw = Works()[\"W2741809807\"]\n\nWorks().filter(openalex_id=\"|\".join(w[\"referenced_works\"])).get()\n```\n\n### Dataset publications in the global south\n\n```python\nfrom pyalex import Works\n\n# the work to extract the referenced works of\nw = Works() \\\n  .filter(institutions={\"is_global_south\":True}) \\\n  .filter(type=\"dataset\") \\\n  .group_by(\"institutions.country_code\") \\\n  .get()\n\n```\n\n### Most cited publications in your organisation\n\n```python\nfrom pyalex import Works\n\nWorks() \\\n  .filter(authorships={\"institutions\": {\"ror\": \"04pp8hn57\"}}) \\\n  .sort(cited_by_count=\"desc\") \\\n  .get()\n\n```\n\nSame, but with only for first authors\n\n```python\nfrom pyalex import Works\n\nWorks() \\\n  .filter(authorships={\"institutions\": {\"ror\": \"04pp8hn57\"},\n                       \"author_position\": \"first\"}) \\\n  .sort(cited_by_count=\"desc\") \\\n  .get()\n\n```\n\n## License\n\n[MIT](/LICENSE)\n\n## Contact\n\nFeel free to reach out with questions, remarks, and suggestions. The\n[issue tracker](/issues) is a good starting point. You can also email me at\n[jonathandebruinos@gmail.com](mailto:jonathandebruinos@gmail.com).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyalex",
            "package_url": "https://pypi.org/project/pyalex/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyalex/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/pyalex/0.5/",
            "requires_dist": [
                "requests",
                "flake8 ; extra == 'lint'",
                "flake8-import-order ; extra == 'lint'",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.6",
            "summary": "One downloader for many scientific data and code repositories!",
            "version": "0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16024671,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7ee8c01f63e97617e662beba1e65140a",
                    "sha256": "2465fca6ee595353d415d5d51893173671d22336fc73212f49e1cd30f4741f17"
                },
                "downloads": -1,
                "filename": "pyalex-0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7ee8c01f63e97617e662beba1e65140a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7773,
                "upload_time": "2022-12-07T20:24:51",
                "upload_time_iso_8601": "2022-12-07T20:24:51.395479Z",
                "url": "https://files.pythonhosted.org/packages/e1/05/e62fec95484b3ef3bb34c2661f90d3d6a6acf7634cecf12abebdab188d04/pyalex-0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0cf33e70f036e8c2ebdb60ec5256756c",
                    "sha256": "9d97435c7d717dd75c63dbe07abc8db9500161b0d1c6f923796aa68df918c80a"
                },
                "downloads": -1,
                "filename": "pyalex-0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "0cf33e70f036e8c2ebdb60ec5256756c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 36038,
                "upload_time": "2022-12-07T20:24:52",
                "upload_time_iso_8601": "2022-12-07T20:24:52.851363Z",
                "url": "https://files.pythonhosted.org/packages/23/dc/829da824db79225f7ce882900269a675f662e279d0aeaa91c352d867040d/pyalex-0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}