{
    "0.0.1": {
        "info": {
            "author": "pulkin",
            "author_email": "gpulkin@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "file-grid",
            "package_url": "https://pypi.org/project/file-grid/",
            "platform": null,
            "project_url": "https://pypi.org/project/file-grid/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/file-grid/0.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Clone and multiply your files seamlessly using a simple template language",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16075275,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d502a1d3b45af406ef49d5cd53e0728e",
                    "sha256": "6cd39adcf4ac85697d2b40259979aafb1f259a062abb469193871a7236734e6c"
                },
                "downloads": -1,
                "filename": "file-grid-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "d502a1d3b45af406ef49d5cd53e0728e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12072,
                "upload_time": "2022-12-06T23:20:04",
                "upload_time_iso_8601": "2022-12-06T23:20:04.501575Z",
                "url": "https://files.pythonhosted.org/packages/7f/f9/97b4c845d5fd768bda4a1e69923b50611b5a46de3b2d753b469ea2cb60a1/file-grid-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "pulkin",
            "author_email": "gpulkin@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "[![build](https://github.com/pulkin/file-grid/actions/workflows/test.yml/badge.svg)](https://github.com/pulkin/file-grid/actions)\n\n# ![icon](resources/icon-full.svg)\n\nClone and multiply your files seamlessly using a simple template language.\n\nWhat it is\n----------\n\n`grid` is a command-line tool to create *many* copies of *similar* files\nusing a **template** language.\n\n`grid` scans current folder for template files with evaluate blocks and\nexpands them.\n`grid` creates copies of template files and substitutes template blocks\n(eval blocks) with their corresponding computed values.\nAs a result, text files with eval blocks such as\n`something = {% range(3, 8) %}` replicate into 5 separate files containing\n`something = 3`, `something = 4`, etc.\n\nInstall\n-------\n\nInstall from pypi\n\n```bash\npip install file-grid\n```\n\nInstall from git using pip\n\n```bash\npip install git+https://github.com/pulkin/file-grid.git#egg=file_grid\n```\n\nBuild and install from source manually\n\n```bash\ngit clone https://github.com/pulkin/file-grid.git\npip install build\npython -m build\npip install dist/*.tar.gz\n```\n\nRun\n---\n\n```bash\npython -m file_grid --help\n```\n\nor simply\n\n```bash\ngrid --help\n```\n\nif your `PATH` includes python `bin` folder.\n\nExample\n-------\n\nSuppose you have a single file `run.sh` in the folder `root`:\n\n```\nroot\n|- run.sh\n```\n\nThe contents of `run.sh` includes the following script\n\n```\nrun-some-program --some-arg=arg-value\n```\n\nYou would like to make copies of this file where `--some-arg`\ntakes values from 0 to 9.\nYou turn `run.sh` into a template where `arg-value` is replaced with\neval block `{% range(10) %}` like this:\n\n```\nrun-some-program --some-arg={% range(10) %}\n```\n\nAfterwards you invoke `grid new` which takes care of interpreting\nyour template and creating copies of the file `run.sh` in 10 separate\nfolders named `grid0`, `grid1`, etc.\n\n```\ngrid new\n```\n\n```\nroot\n|- run.sh\n|- grid0\n|  |- run.sh\n|\n|- grid1\n|  |- run.sh\n|\n|- grid2\n|  |- run.sh\n...\n```\n\nWhile the file `run.sh` in the root folder remains untouched, each copy\nof the root folder `grid0` to `grid9` contains the file `run.sh` where\nthe `{% ... %}` eval block is substituted with one of its values `range(10)`:\ni.e. `0`, `1`, `2`, etc.\nFor example, the contents of `root/grid4/run.sh` is\n\n```\nrun-some-program --some-arg=4\n```\n\nNow, executing each copy of `run.sh` is as simple as `grid run ./run.sh`\nwhich runs 10 copies one after another within their corresponding grid\nfolders.\n\nTemplate language\n-----------------\n\nBy default, `grid` scans for all files and attempts to locate brackets\n`{% ... %}`.\nThe expression inside has to be a valid python `compile(..., 'eval')`\nstatement.\n\n### Grid: multiple brackets\n\nConsider the following file.\n\n```\nrun-some-program --some-arg={% range(10) %} --another-arg={% range(3) %}\n```\n\nIt will be expanded into 30 copies with all possible combinations of the\ntwo arguments / eval block values.\n\n### Dependent statements\n\nIt is possible to re-use computed eval blocks as a part of an expression\nin another eval block.\nFor this, named blocks are available as `{% name = expression %}`.\nFor example,\n\n```\nrun-some-program --some-arg={% a = range(10) %} --another-arg={% a + 3 %}\n```\n\nIn this case, 10 copies are created where the value of the second block\n(`--another-arg`) is always the value substituted in the first block plus 3.\n\n### Multiple files\n\nMultiple files are treated as if it is a single file (i.e. all dependent\nblocks belong to the same scope and all named blocks are shared).\n\n### Formatting\n\nTBD: not implemented yet.\nCurrently, `str(...)` is used when writing expanded expressions.\n\n### Useful implementation details\n\n- All python types are supported: integers, floats, strings, objects, etc.\n  For example, this is a valid eval block: `{% ['a', 2, 3.] %}`.\n- Anonymous eval blocks such as the above are assigned an\n  `anonymous_{file}_{line}_{char}` name.\n- Currently, only `range` and `linspace` are available as builtins.\n  TBD: will be fixed.\n- To see variable values after the grid was created simply look into\n  `.variables` file of the grid folder.\n- A two-phase scheme is used when evaluating blocks.\n  At the first stage, blocks without dependencies are identified and\n  computed.\n  At the second stage, all dependent templates are computed.\n- Under the hood, blocks are compiled into python code objects in `eval`\n  mode and name dependencies are determined via `code.co_names`.\n- `__grid_folder_name__` with the grid folder name and\n  `__grid_id__` with grid sequence id are injected into eval scope\n  at the second stage.\n- The grid size (shape) is defined by the (cartesian) product of all\n  values of independent eval blocks.\n  If the computed template value results in an object with `__len__`\n  attribute it will be treated as-is.\n  Otherwise, the object (for example, integer or float) will be replaced\n  with a single-element list. I.e. the effect of `{% a = 1 %}` and\n  `{% a = [1] %}` is the same.\n  Instead, `{% a = 'abc' %}` will iterate over individual characters 'a',\n  'b', 'c' while `{% a = ['abc'] %}` will produce a single value 'abc'.\n- For the sake of simplicity, the closing bracket `%}` has the highest\n  priority when parsing.\n  In the following template `{% \"%}\" %}` the eval block part is `{% \"%}`.\n  To make a valid expression, escaping is necessary `{% \"\\%}\" %}` resulting\n  in `\"%}\"` as its computed value.\n  Both `\"{%\"` inside the template block or `\"%}\"` outside of it are treated\n  as-is without the need of escaping.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "file-grid",
            "package_url": "https://pypi.org/project/file-grid/",
            "platform": null,
            "project_url": "https://pypi.org/project/file-grid/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/file-grid/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Clone and multiply your files seamlessly using a simple template language",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16075275,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3b2153bddf50a98f3e1e6922a9ae917b",
                    "sha256": "943f2aed3384a203a6c8029a528a99411ec99c1e2ea4ad54e2a9ffcac7f83cc5"
                },
                "downloads": -1,
                "filename": "file-grid-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "3b2153bddf50a98f3e1e6922a9ae917b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12824,
                "upload_time": "2022-12-12T15:04:16",
                "upload_time_iso_8601": "2022-12-12T15:04:16.713103Z",
                "url": "https://files.pythonhosted.org/packages/68/95/9de56a4eeabb90126541689032a17a8f1af58c08a580e7c4c3b85f95fd72/file-grid-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}