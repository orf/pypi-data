{
    "1.0.0": {
        "info": {
            "author": null,
            "author_email": "Jonas Haag <jonas.haag@quantco.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# multiregex\n\n[![CI](https://github.com/Quantco/multiregex/actions/workflows/ci.yml/badge.svg)](https://github.com/Quantco/multiregex/actions/workflows/ci.yml)\n[![Documentation](https://img.shields.io/badge/docs-latest-success?style=plastic)](https://docs.dev.quantco.cloud/qc-github-artifacts/Quantco/multiregex/latest/index.html)\n\nQuickly match many regexes against a string. Provides 2-10x speedups over na\u00efve regex matching.\n\n## Installation\n\nYou can install the package in development mode using:\n\n```bash\ngit clone git@github.com:quantco/multiregex.git\ncd multiregex\n\n# create and activate a fresh environment named multiregex\n# see environment.yml for details\nmamba env create\nconda activate multiregex\n\npre-commit install\npip install --no-build-isolation -e .\n```\n\n\n## Usage\n\n```py\nimport multiregex\n\n# Create matcher from multiple regexes.\nmy_patterns = [r\"\\w+@\\w+\\.com\", r\"\\w\\.com\"]\nmatcher = multiregex.RegexMatcher(my_patterns)\n\n# Run `re.search` for all regexes.\n# Returns a set of matches as (re.Pattern, re.Match) tuples.\nmatcher.search(\"john.doe@example.com\")\n# => [(re.compile('\\\\w+@\\\\w+\\\\.com'), <re.Match ... 'doe@example.com'>),\n#     (re.compile('\\\\w+\\\\.com'), <re.Match ... 'example.com'>)]\n\n# Same as above, but with `re.match`.\nmatcher.match(...)\n```\n\n### Custom prematchers\n\nTo be able to quickly match many regexes against a string, `multiregex` uses\n\"prematchers\" under the hood. Prematchers are lists of non-regex strings of which\nat least one can be assumed to be present in the haystack if the corresponding regex matches.\nAs an example, a valid prematcher of `r\"\\w+\\.com\"` could be `[\".com\"]` and a valid\nprematcher of `r\"(B|b)anana\"` could be `[\"B\", \"b\"]` or `[\"anana\"]`.\n\nYou will likely have to provide your own prematchers for all but the simplest\nregex patterns:\n\n```py\nmultiregex.RegexMatcher([r\"\\d+\"])\n# => ValueError: Could not generate prematcher : '\\\\d+'\n```\n\nTo provide custom prematchers, pass `(pattern, prematchers)` tuples:\n\n```py\nmultiregex.RegexMatcher([(r\"\\d+\", map(str, range(10)))])\n```\n\nTo use a mixture of automatic and custom prematchers, pass `prematchers=None`:\n\n```py\nmatcher = multiregex.RegexMatcher([(r\"\\d+\", map(str, range(10))), (r\"\\w+\\.com\", None)])\nmatcher.patterns\n# => [(re.compile('\\\\d+'), ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']),\n#     (re.compile('\\\\w+\\\\.com'), ['com'])]\n```\n\n### Disabling prematchers\n\nTo disable prematching for certain pattern entirely (ie., always run the regex\nwithout first running any prematchers), pass an empty list of prematchers:\n\n```py\nmultiregex.RegexMatcher([(r\"super complicated regex\", [])])\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": "Jonas Haag <jonas.haag@quantco.com>",
            "name": "multiregex",
            "package_url": "https://pypi.org/project/multiregex/",
            "platform": null,
            "project_url": "https://pypi.org/project/multiregex/",
            "project_urls": {
                "Home": "https://github.com/quantco/multiregex"
            },
            "release_url": "https://pypi.org/project/multiregex/1.0.0/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Speed up regex matching with non-regex substring \"prematchers\", similar to Bloom filters.",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13845185,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "d9d0744fd33fcec0f4243531653483fd",
                    "sha256": "46fb3545c5a377d9b4756cb197e05f32d6b524014fb17f33c3b5fba8e94c7aea"
                },
                "downloads": -1,
                "filename": "multiregex-1.0.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d9d0744fd33fcec0f4243531653483fd",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 6207,
                "upload_time": "2022-05-16T20:20:45",
                "upload_time_iso_8601": "2022-05-16T20:20:45.033511Z",
                "url": "https://files.pythonhosted.org/packages/89/2b/371543601c6b1a6c4280b54a87754090603f8733e45e926f455d59404899/multiregex-1.0.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "d99acf6d99dbbd8afe2591169d1a16bc",
                    "sha256": "c541e90910ed6a5a3762ded8622618f0193f360504e337adbe9d52a1db81534b"
                },
                "downloads": -1,
                "filename": "multiregex-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "d99acf6d99dbbd8afe2591169d1a16bc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 19993,
                "upload_time": "2022-05-16T20:20:47",
                "upload_time_iso_8601": "2022-05-16T20:20:47.704571Z",
                "url": "https://files.pythonhosted.org/packages/59/ce/4f1154777b6e58d492e2eecabfeac820eb6c2bfbe7ab17d7bc9f82860507/multiregex-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}