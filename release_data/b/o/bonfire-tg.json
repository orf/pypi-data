{
    "1.0.7a0": {
        "info": {
            "author": "Alex_Stepens",
            "author_email": "ianacist01@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# bonfire\r\n\r\n\r\n\r\n\r\nbonfire this framework for [Telegram Bot API](https://core.telegram.org/bots/api) built on [flask](https://flask.palletsprojects.com/en/2.2.x/ ) and [requests](https://requests.readthedocs.io/en/latest/) <br>\r\n**Ukrainian launge translate -> [click](https://github.com/Help-urself/bonfire/blob/main/Uk.md)**<br>\r\n**instaling**\r\n```python \r\ngit clone https://github.com/Help-urself/bonfire\r\n```\r\nor\r\n\r\n```python \r\npip install -i https://test.pypi.org/simple/ bonfire-tg-libraly\r\npip install bonfire-tg-libraly\r\n\r\n\r\n```\r\n\r\n\r\n## Examples\r\n<details>\r\n  <summary> Click </summary>\r\n\r\n\r\n**1.install interceptor**\r\n- install [ngrok](https://ngrok.com/) and start the server according to the instructions on the website.\r\n- set webhook `https://api.telegram.org/botTOKEN/setWebhook?url=you url ngrok/hosting url`\r\n\r\n### Simple [`send_message`](https://core.telegram.org/method/messages.sendMessage) request\r\n\r\n```python\r\n#git clone\r\n\r\nimport requests\r\nfrom flask import Flask\r\nimport os\r\nimport sys\r\nsys.path.append(os.path.abspath('you path to bonfire'))\r\nfrom bonfiree.methods import *\r\nfrom bonfiree.Bot import *\r\n\r\n\r\napp = Flask(__name__)\r\ntoken = \"...\"#token\r\n\r\n\r\n@bot.handler\r\ndef start():  \r\n    if msg.text == \"/start\": \r\n     send_message(token,chat_id=msg.chat_id,text=f\"Hello {msg.author_username},is test bot\")#send message\r\n\r\n@commands(app)\r\ndef main():\r\n global msg\r\n msg=message(request.get_json())#message handler\r\n start()#start function start\r\n\r\n\r\n return Response('OK', status=200)#return status ok to cmd\r\nif __name__ == '__main__':\r\n       run(app)\r\n\r\n       \"\"\"set-webhook - > https://api.telegram.org/botTOKEN/setWebhook?url=URL\"\"\"\r\n\r\n```\r\n\r\n```py\r\n#pip install\r\n\r\nimport requests\r\nfrom flask import Flask\r\nfrom bonfiree.methods import *\r\nfrom bonfiree.Bot import *\r\n\r\n\r\napp = Flask(__name__)\r\ntoken = \"...\"#token\r\n\r\n\r\n@bot.handler\r\ndef start():  \r\n    if msg.text == \"/start\": \r\n     send_message(token,chat_id=msg.chat_id,text=f\"Hello {msg.author_username},is test bot\")#send message\r\n\r\n@commands(app)\r\ndef main():\r\n global msg\r\n msg=message(request.get_json())#message handler\r\n start()#start function start\r\n\r\n\r\n return Response('OK', status=200)#return status ok to cmd\r\nif __name__ == '__main__':\r\n       run(app)\r\n\r\n       \"\"\"set-webhook - > https://api.telegram.org/botTOKEN/setWebhook?url=URL\"\"\"\r\n```\r\n\r\n  </details>\r\n  \r\n## Documentation (in development)\r\n<details>\r\n  <summary> Click </summary>\r\n  \r\n  \r\n### functions\r\n\r\n**send_message**\r\n  \r\n```python \r\ndef send_message(token,chat_id,text):\r\n  ```\r\n  -**token** - keyword where you store the token<br>\r\n  -**chat_id** - you can use your chat id or use the msg.chat_id method<br>\r\n  -**text** - \r\nyour message text<br>\r\n  -**parse_mode**(\tOptional ) - parse mode in HTML (optional)\r\n  <details>\r\n  <summary> example </summary>\r\n    \r\n```python \r\nmsg=message(request.get_json())\r\n\r\n#without parse_mode\r\nsend_message(token=bot,chat_id=msg.chat_id,text=f'hello :)')\r\n#with parse_mode\r\nsend_message(token=bot,chat_id=msg.chat_id,text=f'<b>hello :)<b>',parse_mode='HTML') #make text bold\r\n  ```\r\n    \r\n   </details>\r\n    <br>\r\n    <br>\r\n    \r\n **reply_message**\r\n  \r\n```python \r\ndef reply_message(token,chat_id,msg_id,text,parse_mode):\r\n  ```\r\n  -**token** - keyword where you store the token<br>\r\n  -**chat_id** - you can use your chat id or use the msg.chat_id method<br>\r\n  -**text** - your message text<br>\r\n  -**msg_id** - you can use your message id or use the msg.id method <br>\r\n  -**parse_mode**(\tOptional ) - parse mode in HTML (optional)\r\n  <details>\r\n  <summary> example </summary>\r\n    \r\n```python \r\n msg=message(request.get_json())\r\n#without parse_mode\r\nreply_message(token,msg_id=msg.id,chat_id=msg.chat_id,text=\"reply message ._.\")\r\n#with parse_mode\r\nreply_message(token,msg_id=msg.id,chat_id=msg.chat_id,text=\"<b>reply message is bold .-.</b>\",parse_mode=\"HTML\")#make text bold\r\n  ```\r\n    \r\n   </details>\r\n    <br>\r\n    <br>\r\n\r\n**send_sticker**\r\n```python \r\ndef send_sticker(token,chat_id,sticker):\r\n  ```\r\n  -**token** - keyword where you store the token<br>\r\n  -**chat_id** - you can use your chat id or use the msg.chat_id method<br>\r\n  -**sticker** -unique sticker key, you can get it from [idstickerbot](https://t.me/idstickerbot)<br>\r\n\r\n  <details>\r\n  <summary> example </summary>\r\n    \r\n```python \r\nsend_sticker(token,chat_id=msg.chat_id,sticker=\"CAACAgIAAxkBAAEGdwNjd-IwPaLBzeqJW1DJvDLGnYOJpwACQBMAAvZDSUjqTxpxhtdlhisE\")\r\n  ```\r\n    \r\n   </details>\r\n   <br>\r\n   <br>\r\n   \r\n**delete_message**\r\n```python \r\ndef delete_message(token,chat_id,msg_id):\r\n  ```\r\n  -**token** - keyword where you store the token<br>\r\n  -**chat_id** - you can use your chat id or use the msg.chat_id method<br>\r\n  -**msg_id** - you can use your message id or use the msg.id method <br>\r\n\r\n\r\n  <details>\r\n  <summary> example </summary>\r\n    \r\n```python \r\n\r\ndelete_message(token,msg_id=msg.id,chat_id=msg.chat_id) #this code will only work in a private chat, so that it would work for the bot to have the right to delete messages or replace message_id with reply_message_id, you can find an example in the folder example->delete_message.py\r\n\r\n  ```\r\n    \r\n   </details>\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Help-urself/bonfire",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "bonfire-tg",
            "package_url": "https://pypi.org/project/bonfire-tg/",
            "platform": null,
            "project_url": "https://pypi.org/project/bonfire-tg/",
            "project_urls": {
                "Homepage": "https://github.com/Help-urself/bonfire"
            },
            "release_url": "https://pypi.org/project/bonfire-tg/1.0.7a0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Speed telegram api libraly",
            "version": "1.0.7a0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15991380,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1188e25e63f01373dfc7f271bb27bcbd",
                    "sha256": "1286b57390386e86781dd1360bf0c0022d2f136632cbdd633ff751090334f581"
                },
                "downloads": -1,
                "filename": "bonfire_tg-1.0.7a0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1188e25e63f01373dfc7f271bb27bcbd",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 9724,
                "upload_time": "2022-12-05T04:55:34",
                "upload_time_iso_8601": "2022-12-05T04:55:34.380219Z",
                "url": "https://files.pythonhosted.org/packages/07/13/1f8f42ee96250379d272083da3a5bb98db4a3a4db9a82a26fb68c6dd2f10/bonfire_tg-1.0.7a0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "373ac57d6cbe18622b286bedfe765a70",
                    "sha256": "c78bcc780711283298d2e351f1390a3358deb5aec94b6009f32ba82a7182d41a"
                },
                "downloads": -1,
                "filename": "bonfire_tg-1.0.7a0.tar.gz",
                "has_sig": false,
                "md5_digest": "373ac57d6cbe18622b286bedfe765a70",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 7117,
                "upload_time": "2022-12-05T04:55:36",
                "upload_time_iso_8601": "2022-12-05T04:55:36.961604Z",
                "url": "https://files.pythonhosted.org/packages/76/ca/dbf2f5e0bc1ae2249d132f351196611693df75074695c03ecbcf7d5299d7/bonfire_tg-1.0.7a0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}