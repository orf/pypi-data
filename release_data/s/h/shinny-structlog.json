{
    "0.0.1": {
        "info": {
            "author": "TianQin",
            "author_email": "tianqincn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shinnytech/structlog-python",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinny-structlog",
            "package_url": "https://pypi.org/project/shinny-structlog/",
            "platform": "",
            "project_url": "https://pypi.org/project/shinny-structlog/",
            "project_urls": {
                "Homepage": "https://github.com/shinnytech/structlog-python"
            },
            "release_url": "https://pypi.org/project/shinny-structlog/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Shinny StructLog",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8557716,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "32e2e00fd4369974561cb0974ed0b2e4",
                    "sha256": "6e03eb8ed1cdcac646369f8d9c725b3154be03d4c913bb885c753afca1123509"
                },
                "downloads": -1,
                "filename": "shinny_structlog-0.0.1-py2-none-any.whl",
                "has_sig": false,
                "md5_digest": "32e2e00fd4369974561cb0974ed0b2e4",
                "packagetype": "bdist_wheel",
                "python_version": "py2",
                "requires_python": ">=3.6",
                "size": 7316,
                "upload_time": "2020-09-02T05:49:09",
                "upload_time_iso_8601": "2020-09-02T05:49:09.932433Z",
                "url": "https://files.pythonhosted.org/packages/31/76/b7821f20f5ea14a861dbfd8de50be9b3d881066dbb8a8dfccbc9dda9e301/shinny_structlog-0.0.1-py2-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1712475afcf47dced597a094c055bc4e",
                    "sha256": "de78b09e0eefa477870fb6d4f2cc73de752445a7444f64e46acb8193621dc244"
                },
                "downloads": -1,
                "filename": "shinny-structlog-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "1712475afcf47dced597a094c055bc4e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8044,
                "upload_time": "2020-09-02T05:49:12",
                "upload_time_iso_8601": "2020-09-02T05:49:12.366783Z",
                "url": "https://files.pythonhosted.org/packages/7a/87/15948b396b38aee5b04f753dbdd7a30414361f1d907a7abcb08c422f4139/shinny-structlog-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "TianQin",
            "author_email": "tianqincn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shinnytech/structlog-python",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinny-structlog",
            "package_url": "https://pypi.org/project/shinny-structlog/",
            "platform": "",
            "project_url": "https://pypi.org/project/shinny-structlog/",
            "project_urls": {
                "Homepage": "https://github.com/shinnytech/structlog-python"
            },
            "release_url": "https://pypi.org/project/shinny-structlog/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Shinny StructLog",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8557716,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ad823c4426670b261ce1c96473dcef9c",
                    "sha256": "6cf631062a95edbc623e0b1f26bad7ffd1b0604b1271917f4e28de27760cfbf4"
                },
                "downloads": -1,
                "filename": "shinny_structlog-0.0.2-py2-none-any.whl",
                "has_sig": false,
                "md5_digest": "ad823c4426670b261ce1c96473dcef9c",
                "packagetype": "bdist_wheel",
                "python_version": "py2",
                "requires_python": ">=3.6",
                "size": 7288,
                "upload_time": "2020-09-04T07:06:39",
                "upload_time_iso_8601": "2020-09-04T07:06:39.965821Z",
                "url": "https://files.pythonhosted.org/packages/fe/da/168ac7effa7bbfc1af9de0cf55c0b876ac2f12ac50abeac43ceffaf372b4/shinny_structlog-0.0.2-py2-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "48a1acaf4d957b783c2965918d384d10",
                    "sha256": "32edaa96170385ab58cb09592d9f2fbb96e5d08ba016e39eaea262902d65d63f"
                },
                "downloads": -1,
                "filename": "shinny-structlog-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "48a1acaf4d957b783c2965918d384d10",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8006,
                "upload_time": "2020-09-04T07:06:41",
                "upload_time_iso_8601": "2020-09-04T07:06:41.102864Z",
                "url": "https://files.pythonhosted.org/packages/10/5e/30b67db47f013b6d7398240cd219d554595c28359d66366f8ced44b30e54/shinny-structlog-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "TianQin",
            "author_email": "tianqincn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shinnytech/structlog-python",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinny-structlog",
            "package_url": "https://pypi.org/project/shinny-structlog/",
            "platform": "",
            "project_url": "https://pypi.org/project/shinny-structlog/",
            "project_urls": {
                "Homepage": "https://github.com/shinnytech/structlog-python"
            },
            "release_url": "https://pypi.org/project/shinny-structlog/0.0.3/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Shinny StructLog",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8557716,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6e654a64a19f8e668e7073773f17f3b7",
                    "sha256": "7fe80eab019cf9255a6e0998ad72598b0f15ef8562ae3c366d9ba1dd6e74de8c"
                },
                "downloads": -1,
                "filename": "shinny_structlog-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6e654a64a19f8e668e7073773f17f3b7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7288,
                "upload_time": "2020-09-04T09:19:35",
                "upload_time_iso_8601": "2020-09-04T09:19:35.725250Z",
                "url": "https://files.pythonhosted.org/packages/50/9d/9da9aea0cc0c1727e7ee5e9c18ec4559dddd99b05aea04ced6b6581e1ab4/shinny_structlog-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "63c599b1698c3368c2510d969ed4fe4c",
                    "sha256": "2fb4fda457efdde1a97803909178564a6ed5a1e2c93425c1ac03cc711c41401c"
                },
                "downloads": -1,
                "filename": "shinny-structlog-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "63c599b1698c3368c2510d969ed4fe4c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 10693,
                "upload_time": "2020-09-04T09:19:37",
                "upload_time_iso_8601": "2020-09-04T09:19:37.892776Z",
                "url": "https://files.pythonhosted.org/packages/f7/ff/884fc21f6c46a17e198f478a7e8c919ee3f63ebef9686514669d675a1725/shinny-structlog-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4": {
        "info": {
            "author": "TianQin",
            "author_email": "tianqincn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3"
            ],
            "description": "# structlog-python\n\n\u6839\u636e [\u65e5\u5fd7\u89c4\u8303](https://shinnytech.atlassian.net/wiki/spaces/TWG/pages/161153315)\uff0c\u5b9e\u73b0\u7684 python \u7248\u672c\u7684\u65e5\u5fd7\u5e93\u3002\n\n\u57fa\u4e8e python \u81ea\u5e26 logging \u6a21\u5757\u7684\u7b80\u5355\u5c01\u88c5\u3002\n\n# \u76ee\u5f55\n\n* [logging \u6a21\u5757\u5904\u7406\u6d41\u7a0b](#logging-\u6a21\u5757\u5904\u7406\u6d41\u7a0b)\n* [\u672c\u5e93\u9075\u5faa\u7684\u65e5\u5fd7\u89c4\u8303](#\u672c\u5e93\u9075\u5faa\u7684\u65e5\u5fd7\u89c4\u8303)\n* [\u5b89\u88c5](#\u5b89\u88c5)\n* [\u7ed3\u6784\u5316](#\u7ed3\u6784\u5316)\n* [\u4e0a\u4e0b\u6587](#\u4e0a\u4e0b\u6587)\n    * [1. \u6253\u5370\u65e5\u5fd7\uff0c\u4f7f\u7528 extra \u5b57\u6bb5\u8868\u793a\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002](#1-\u6253\u5370\u65e5\u5fd7\u4f7f\u7528-extra-\u5b57\u6bb5\u8868\u793a\u4e0a\u4e0b\u6587\u4fe1\u606f)\n    * [2. \u4f7f\u7528 ShinnyLoggerAdapter \u7ef4\u62a4 context \u4fe1\u606f](#2-\u4f7f\u7528-shinnyloggeradapter-\u7ef4\u62a4-context-\u4fe1\u606f)\n* [\u65e5\u5fd7\u6e90\u5934\u53ca\u4f18\u5148\u7ea7](#\u65e5\u5fd7\u6e90\u5934\u53ca\u4f18\u5148\u7ea7)\n    * [1. context \u4fe1\u606f](#1-context-\u4fe1\u606f)\n    * [2. logger.debug \u65f6\u63d0\u4f9b\u7684\u5b57\u6bb5](#2-loggerdebug-\u65f6\u63d0\u4f9b\u7684\u5b57\u6bb5)\n    * [3. shinny_structlog.JSONFormatter \u81ea\u52a8\u751f\u6210\u7684\u5b57\u6bb5](#3-shinny_structlogjsonformatter-\u81ea\u52a8\u751f\u6210\u7684\u5b57\u6bb5)\n* [\u4f7f\u7528\u793a\u4f8b\u53ca\u6ce8\u610f\u4e8b\u9879](#\u4f7f\u7528\u793a\u4f8b\u53ca\u6ce8\u610f\u4e8b\u9879)\n    * [\u4e0d\u4f7f\u7528\u672c\u65e5\u5fd7\u5e93](#\u4e0d\u4f7f\u7528\u672c\u65e5\u5fd7\u5e93)\n    * [\u7ed3\u6784\u5316\u65e5\u5fd7](#\u7ed3\u6784\u5316\u65e5\u5fd7)\n    * [\u65e5\u5fd7\u6dfb\u52a0\u989d\u5916\u5b57\u6bb5](#\u65e5\u5fd7\u6dfb\u52a0\u989d\u5916\u5b57\u6bb5)\n    * [LogRecord \u672c\u8eab\u5e26\u6709\u7684\u5c5e\u6027](#logrecord-\u672c\u8eab\u5e26\u6709\u7684\u5c5e\u6027)\n    * [\u4e0a\u4e0b\u6587\u8868\u793a](#\u4e0a\u4e0b\u6587\u8868\u793a)\n    * [\u4e0a\u4e0b\u6587\u7ee7\u627f](#\u4e0a\u4e0b\u6587\u7ee7\u627f)\n\n## logging \u6a21\u5757\u5904\u7406\u6d41\u7a0b\n\n1. logger = logging.getLogger(name=\"x\")   \u83b7\u53d6\u4e00\u4e2a\u6307\u5b9a name \u7684 logger \u5b9e\u4f8b\uff0cname \u4e0e logger \u7684\u5173\u7cfb\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u76f8\u540c name \u8c03\u7528\u4e24\u6b21\uff0c\u5f97\u5230\u7684\u662f\u540c\u4e00\u4e2a logger \u5b9e\u4f8b\u3002\n2. logger.debug(msg=\"debug msg\")  \u8c03\u7528 logger \u4e0b\u7684\u63a5\u53e3\u6253\u5370\u65e5\u5fd7\u3002\n3. \u5728\u5224\u65ad\u5f53\u524d\u7ea7\u522b\u53ef\u4ee5\u751f\u6210\u65e5\u5fd7\u540e\uff0c\u63a5\u4e0b\u6765\u4f1a\u751f\u6210 LogRecord \u5b9e\u4f8b record\uff0c record \u4ee3\u8868\u4e86\u5f53\u524d\u6253\u5370\u8fd9\u4e00\u884c\u65e5\u5fd7\u7684\u5bf9\u8c61\uff0crecord \u4e2d\u9664\u4e86\u8bb0\u5f55\u4e86\u65e5\u5fd7 msg \u4fe1\u606f\uff0c\u8fd8\u5e26\u6709\u5f88\u591a\u5176\u4ed6\u4fe1\u606f\uff0c\u6bd4\u5982 thread \u7ebf\u7a0b\u53f7\u3001threadName \u7ebf\u7a0b\u540d\u7b49\u7b49\u3002\n4. \u63a5\u4e0b\u6765\u7531\u5f53\u524d logger \u4e0b\u6dfb\u52a0\u8fc7\u7684 handlers \u4f9d\u6b21\u5904\u7406 record\uff0c`handler.handle(record)` \u771f\u6b63\u5c06\u6bcf\u6761\u65e5\u5fd7\u8f93\u51fa\u5230\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u6bcf\u4e2a handler \u90fd\u53ef\u4ee5\u8bbe\u7f6e\u5bf9\u5e94\u7684 **\u65e5\u5fd7\u7ea7\u522b** \u548c **\u683c\u5f0f**\u3002\n\n\u672c\u5e93\u5728\u6b64\u6d41\u7a0b\u4e0a\uff0c\u4e3b\u8981\u589e\u5f3a\u4e86\u4e24\u90e8\u5206\u529f\u80fd\uff1a\n1. \u63d0\u4f9b shinny_structlog.JSONFormatter\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u4efb\u610f handler \u7684 formatter \u7c7b\u3002\n2. logger.debug()\u3001logger.info()\u3001logger.warning()\u3001logger.error()\u3001logger.fatal()\u3001logger.panic() \u53ef\u4ee5\u63a5\u53d7\u5904\u7406\u66f4\u591a\u7684\u53c2\u6570\n\n\n## \u672c\u5e93\u9075\u5faa\u7684\u65e5\u5fd7\u89c4\u8303\n\n* \u6bcf\u6761\u65e5\u5fd7\u90fd\u662f\u4e00\u4e2a `json object` \u4e14\u9075\u5faa `json` \u6807\u51c6\u7684 `utf-8` \u7f16\u7801\uff0c\u3010\u4e0d\u80fd\u3011\u4f7f\u7528 `gb2312/gbk` \u7b49\u5176\u4ed6\u7f16\u7801\u683c\u5f0f\u3002\n* \u65e5\u5fd7\u4e2d\u7684\u5b57\u6bb5\u540d\u3010\u5fc5\u987b\u3011\u4f7f\u7528\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u6570\u5b57\u53ca\u4e0b\u5212\u7ebf\uff0c\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u63cf\u8ff0\u4e3a `[a-z0-9_]`\u3002\n* \u6bcf\u4e00\u6761\u65e5\u5fd7\uff0c\u9ed8\u8ba4\u5305\u62ec\u7684\u5b57\u6bb5\uff1a\n    + msg - \u4e8b\u4ef6\u63cf\u8ff0\uff0c\u5176\u552f\u4e00\u6027\u3010\u5fc5\u987b\u3011\u53ef\u679a\u4e3e\uff0c\u4e14\u3010\u5e94\u3011\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5168\u5c0f\u5199\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff08\u7f29\u5199\u9664\u5916\uff1a\u4f8b\u5982 \"decode STEP\"\uff09\uff0c\u5e76\u4f7f\u7528\u7a7a\u683c\u5206\u9694\u3002\n    + time - \u65f6\u95f4\uff0c\u4ece record.create \u8f6c\u4e3a RFC3339Nano \u683c\u5f0f\uff0c\u4f8b\u5982 \"2020-04-28T11:27:27.039781461+08:00\"\n    + level - \u65e5\u5fd7\u7ea7\u522b\u5206\u522b\u4e3a\n        - debug\n        - info\n        - warning\n        - error\n        - fatal\n        - panic\n    + name - logger \u7684 name \u5b57\u6bb5\uff0c\u4e3a getLogger \u586b\u5165\u7684\u53c2\u6570\n\n\n## \u5b89\u88c5 \n\n```\npip install shinny-structlog\n```\n\n## \u7ed3\u6784\u5316\n\n\u6240\u6709\u65e5\u5fd7\u8f93\u51fa\u90fd\u662f json \u7ed3\u6784\uff0c\u5728\u6253\u5370\u65e5\u5fd7\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a msg \uff08\u4e8b\u4ef6\u7684\u552f\u4e00\u6027\u63cf\u8ff0\uff09\uff0c\u540e\u9762\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u7684\u952e\u503c\u5bf9\u53c2\u6570\u3002\n\n`logger.debug('send_data', url=\"xxx\", pack={}, ip=\"127.0.0.1\", port=8080)`\n\n\n## \u4e0a\u4e0b\u6587\n\n\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u8868\u793a context \u4fe1\u606f\n\n### 1. \u6253\u5370\u65e5\u5fd7\uff0c\u4f7f\u7528 extra \u5b57\u6bb5\u8868\u793a\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\n\n\u76f4\u63a5\u5728 extra \u5173\u952e\u5b57\u4e0b\u586b\u5165\u4e00\u4e2a dict \u5bf9\u8c61\uff0c\u7531\u7528\u6237\u81ea\u5df1\u7ba1\u7406 context \u7ee7\u627f\u5173\u7cfb\u3002\u81ea\u5df1\u7684 context \u9700\u8981\u5148 copy\uff0c\u518d\u8c03\u7528 update \u65b9\u6cd5\u3002\n\n```python\napi_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\ntqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n```\n\n```python\n# \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\napi_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\ntqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n\n# \u7ee7\u627f context \u4fe1\u606f\uff0c\u9700\u8981\u5148 copy \u7236\u7ea7\u7684 context \u4fe1\u606f\uff0c\u518d\u6dfb\u52a0\u5b50\u7ea7\u9700\u8981\u7684\u4fe1\u606f\uff0c\u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\nmd1_context = api_context.copy()\nmd1_context[\"url\"] = \"wss://a.shinnytech.com\"\ntqsdk_logger.info(\"received\", extra=md1_context, pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2001\": {}}}]})\n```\n\n### 2. \u4f7f\u7528 ShinnyLoggerAdapter \u7ef4\u62a4 context \u4fe1\u606f\n\n* ShinnyLoggerAdapter \u6784\u9020\u65b9\u6cd5\n\n```\nlogger = logging.getLogger(\"tqsdk\")\n# \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a logger \uff0c\u540e\u9762\u53ef\u4ee5\u63a5\u4efb\u610f\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570\nadapter = ShinnyLoggerAdapter(logger, strategy_id=2, strategy_name=\"ma\")\n```\n\n* ShinnyLoggerAdapter \u4e4b\u95f4\u7684\u7ee7\u627f\n\n```\nlogger = logging.getLogger(\"tqsdk\")\n# \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a logger \uff0c\u540e\u9762\u53ef\u4ee5\u63a5\u4efb\u610f\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570\nadapter = ShinnyLoggerAdapter(logger, strategy_id=2, strategy_name=\"ma\")\n# \u8c03\u7528 bind \u65b9\u6cd5\uff0c\u63a5\u4efb\u610f\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 adapter, \u5176\u643a\u5e26 context \u4fe1\u606f\u5305\u62ec\u7236\u7ea7 context \u4fe1\u606f\u548c bind \u6dfb\u52a0\u7684\u53c2\u6570\nchild_adapter = adapter.bind(user_name=\"tianqin\", user_id=\"1009\")\n```\n\n**\u6ce8\u610f**\uff1a\n+ \u5982\u679c\u5b50\u7ea7 bind \u7684\u53c2\u6570\u548c\u7236\u7ea7\u53c2\u6570\u540c\u540d\uff0c\u5b50\u7ea7\u4f1a\u8986\u76d6\u7236\u7ea7\u540c\u540d\u7684\u53c2\u6570\n+ \u5982\u679c\u8c03\u7528 `adapter.debug()/info()/warning()/error()/fatal()/panic()` \u540c\u65f6\u4f20\u5165 extra \u53c2\u6570\uff0c\u90a3\u4e48 extra \u4f1a\u8986\u76d6 adapter \u4e2d\u7684\u76f8\u540c\u5173\u952e\u5b57\u7684 context \u4fe1\u606f\u3002\n\n\n## \u65e5\u5fd7\u6e90\u5934\u53ca\u4f18\u5148\u7ea7\n\n\u4f7f\u7528\u672c\u5e93\uff0c\u6253\u5370\u7684\u6bcf\u4e00\u6761\u65e5\u5fd7\u90fd\u662f\u4e00\u4e2a `json object`\uff0c\u5176\u5185\u5bb9\u6709 4 \u4e2a\u6e90\u5934\uff0c\u6309\u4f18\u5148\u7ea7\u4ece\u4f4e\u5230\u9ad8\u4f9d\u6b21\u662f\uff1a\n\n#### 1. \u4f7f\u7528 ShinnyLoggerAdapter \u7c7b\u6dfb\u52a0\u7684 context \u4fe1\u606f\u3002\n\n\u63a8\u8350\u4f7f\u7528 ShinnyLoggerAdapter, context \u4fe1\u606f\u66f4\u660e\u786e\uff0c\u907f\u514d\u7528\u6237\u5728\u4f7f\u7528 dict \u65f6\u5fd8\u8bb0 copy \u6216\u8005 update \u7b49\u7b80\u5355\u9519\u8bef\u3002\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n    logger = shinny_structlog.ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    logger.debug(\"init\", init_balance=100000000.0)\n\n# output:\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:19:33.115011+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n#### 2. extra \u5b57\u6bb5\u6765\u8868\u793a\u7684 context \u4fe1\u606f\n\n\u4f7f\u7528\u672c\u5e93\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 extra \u5b57\u6bb5\u6765\u8868\u793a\u7684 context \u4fe1\u606f\uff0c\n\n\u5206\u522b\u53c2\u8003\uff1a`examples/log_with_context.py` `examples/log_with_context_adapter.py`\n\n\u63a8\u8350\u4f7f\u7528 ShinnyLoggerAdapter, context \u4fe1\u606f\u66f4\u660e\u786e\uff0c\u907f\u514d\u7528\u6237\u5728\u4f7f\u7528 dict \u65f6\u5fd8\u8bb0 copy \u6216\u8005 update \u7b49\u7b80\u5355\u9519\u8bef\u3002\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n    logger = shinny_structlog.ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    logger.debug(\"init\", extra={\"strategy_name\": \"ma5\"}, init_balance=100000000.0)\n\n# output:\n# {\"strategy_id\": 2, \"strategy_name\": \"ma5\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:19:33.115011+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n#### 3. logger.debug \u65f6\u63d0\u4f9b\u7684\u5b57\u6bb5\n\n`logger.debug()`\u3001`logger.info()`\u3001`logger.warning()`\u3001`logger.error()`\u3001`logger.fatal()`\u3001`logger.panic()` \u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u5173\u952e\u5b57\u53c2\u6570\u3002\n\n\u4f46\u662f\uff0c\u6709 4 \u4e2a\u53c2\u6570\u662f logging \u6a21\u5757\u672c\u8eab\u5c31\u652f\u6301\u7684\uff0c\u6709\u7279\u522b\u542b\u4e49\uff1a\n\n+ extra: dict \u7c7b\u578b\uff0c\u7528\u6765\u8868\u793a context \u4fe1\u606f\u3002\n+ exc_info: bool \u6216\u8005 exception \u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c None\u3002\u5982\u679c\u662f Exception \u5b9e\u4f8b\uff0c\u5219\u6253\u5370\u8be5\u5f02\u5e38\u4fe1\u606f\uff1b\u5982\u679c\u662f True\uff0c\u5219\u8c03\u7528 `sys.exc_info()` \u83b7\u53d6\u5f02\u5e38\u4fe1\u606f\u540e\u6253\u5370\u3002\n+ stack_info\uff1abool \u7c7b\u578b\uff0c\u9ed8\u8ba4\u503c False\uff0c\u8f93\u51fa\u8c03\u7528\u6808\u4fe1\u606f\u3002\n+ stacklevel: int \u7c7b\u578b\uff0c\u5728 3.8 \u7248\u65b0\u589e\uff0c\u9ed8\u8ba4\u4e3a 1\u3002\u5982\u679c\u5927\u4e8e 1\uff0c\u5219\u5728\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u65f6\uff0c\u5c06\u8df3\u8fc7\u76f8\u5e94\u6570\u91cf\u7684\u8c03\u7528\u6808\u3002\n\n\u793a\u4f8b - \u4f18\u5148\u7ea7\uff1a\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n    logger = shinny_structlog.ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    logger.debug(\"init\", extra={\"md_url\": \"wss://aaa.shinnytech.com\"}, md_url=\"wss://bbb.shinnytech.com\")  # \u8fd9\u91cc\u7684 md_url \u4f1a\u8986\u76d6 extra.md_url\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"md_url\": \"wss://bbb.shinnytech.com\", \"msg\": \"init\", \"time\": \"2020-09-01T17:32:15.628907+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n\u793a\u4f8b - \u6253\u5370\u8c03\u7528\u6808\u6216\u8005\u5f02\u5e38\u4fe1\u606f\uff1a\n\n```python\nimport logging\nimport shinny_structlog\n\ndef subscribe_quote(symbols):\n    try:\n        symbols = symbols - [\"DCE.a\"]  # TypeError: unsupported operand type(s) for -: 'list' and 'list'\"\n        pack = {\n            \"aid\": \"subscribe_quote\",\n            \"ins_list\": \",\".join(symbols)\n        }\n        # api.send_pack(pack)  # \u53d1\u9001\u6570\u636e\u5305\n        tqsdk_logger.debug(\"send data\", extra=api_context, stack_info=1, pack=pack)  # \u8bb0\u5f55\u65e5\u5fd7\uff0c\u540c\u65f6\u4f1a\u6253\u5370\u51fa\u8c03\u7528\u6808\u4fe1\u606f\n    except Exception as e:\n        tqsdk_logger.debug(\"send data\", extra=api_context, exc_info=e)  # \u8bb0\u5f55\u65e5\u5fd7\uff0c\u6253\u5370\u51fa Exception\n        # tqsdk_logger.debug(\"send data\", extra=api_context, exc_info=True)  # \u8bb0\u5f55\u65e5\u5fd7\uff0c\u4e5f\u4f1a\u6253\u5370\u51fa\u548c\u4e0a\u4e00\u884c\u4e00\u6837\u7684\u4fe1\u606f\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n    api_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"md_url\": \"wss://aaa.shinnytech.com\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)  # \u6bcf\u6b21\u6253\u5370\u65e5\u5fd7\uff0c\u90fd\u5c06 context \u4fe1\u606f\u7528 extra \u4f20\u7ed9 logger\n\n    subscribe_quote([\"SHFE.cu2002\", \"SHFE.au2002\"])\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"md_url\": \"wss://aaa.shinnytech.com\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:17:26.627757+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"msg\": \"send data\", \"time\": \"2020-09-01T17:17:26.627924+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\", \"exc_info\": \"Traceback (most recent call last):\\n  File \\\"/Users/yanqiongma/Documents/WorkSpace/structlog-python/examples/log_with_context.py\\\", line 7, in subscribe_quote\\n    symbols = symbols - [\\\"DCE.a\\\"]\\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\"}```\n```\n\n\n#### 4. shinny_structlog.JSONFormatter \u81ea\u52a8\u751f\u6210\u7684\u5b57\u6bb5\n\nshinny_structlog.JSONFormatter \u4f1a\u4e3a\u6bcf\u6761 json \u65e5\u5fd7\u6dfb\u52a0 `msg`\u3001`time`\u3001`level`\u3001`name` \u8fd9\u51e0\u4e2a\u5b57\u6bb5\u3002\n\n+ msg - \u4e8b\u4ef6\u63cf\u8ff0\uff0c\u5176\u552f\u4e00\u6027\u3010\u5fc5\u987b\u3011\u53ef\u679a\u4e3e\u3002\u4e3a logger.debug() \u4e2d\u7b2c\u4e00\u4e2a\u53c2\u6570\n+ time - \u4ece record.create \u8f6c\u4e3a RFC3339Nano \u683c\u5f0f\uff0c\u4f8b\u5982 \"2020-04-28T11:27:27.039781461+08:00\"\n+ level - debug\u3001info\u3001warning\u3001error\u3001fatal\u3001panic \u5176\u4e2d\u4e4b\u4e00\n+ name - logger \u7684 name \u5b57\u6bb5\uff0c\u4e3a getLogger \u586b\u5165\u7684\u53c2\u6570\n\n**\u6ce8\u610f**\uff1a\ntime \u5b57\u6bb5\u9ed8\u8ba4\u4f7f\u7528\u673a\u5668\u672c\u5730\u65f6\u533a\uff0c\u5982\u4f55\u4e3b\u52a8\u8bbe\u7f6e\u65f6\u533a\u4fe1\u606f\uff1f\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf TZ\uff0cdatetime \u6a21\u5757\u5c31\u4f1a\u91c7\u7528\u8bbe\u7f6e\u7684 TZ \u6765\u8f93\u51fa\u65f6\u95f4\u7684\u65f6\u533a\u4fe1\u606f\u3002\n\n\u73af\u5883\u53d8\u91cf TZ \u8bbe\u7f6e\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u6863 `https://docs.python.org/3/library/time.html#time.tzset`\n\n\u6bd4\u5982\uff1a\u4e1c\u516b\u533a\u53ef\u4ee5\u8bbe\u7f6e\u4e3a `CST-08`\n\n\n\u53e6\u5916\u5728 JSONFormatter \u521d\u59cb\u5316\u65f6\uff0c\u8fd8\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\u53c2\u6570\uff0c\u6765\u6dfb\u52a0\u7531 LogRecord \u751f\u6210\u7684\u5c5e\u6027\u4fe1\u606f\u3002 \n\n\u53ef\u4ee5\u6dfb\u52a0\u7684\u5c5e\u6027\u503c\u6709\uff1a\n\n+ created - LogRecord \u88ab\u521b\u5efa\u7684\u65f6\u95f4\uff08\u5373 time.time() \u7684\u8fd4\u56de\u503c\uff09\n+ filename - pathname \u7684\u6587\u4ef6\u540d\u90e8\u5206\n+ func_name - \u8c03\u7528 logger \u7684\u51fd\u6570\u540d\n+ levelno - \u65e5\u5fd7\u7ea7\u522b\u7684\u6570\u5b57\u8868\u793a\n+ lineno - \u53d1\u51fa\u65e5\u5fd7\u8bb0\u5f55\u8c03\u7528\u6240\u5728\u7684\u6e90\u884c\u53f7\uff08\u5982\u679c\u53ef\u7528\uff09\n+ module - \u6a21\u5757\u540d (filename \u7684\u540d\u79f0\u90e8\u5206)\n+ msecs - LogRecord \u88ab\u521b\u5efa\u7684\u65f6\u95f4\u7684\u6beb\u79d2\u90e8\u5206\n+ pathname - \u53d1\u51fa\u65e5\u5fd7\u8bb0\u5f55\u8c03\u7528\u7684\u6e90\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\u540d\uff08\u5982\u679c\u53ef\u7528\uff09\n+ process - \u8fdb\u7a0bID\uff08\u5982\u679c\u53ef\u7528\uff09\n+ process_name - \u8fdb\u7a0b\u540d\uff08\u5982\u679c\u53ef\u7528\uff09\n+ relative_created - \u4ee5\u6beb\u79d2\u6570\u8868\u793a\u7684 LogRecord \u88ab\u521b\u5efa\u7684\u65f6\u95f4\uff0c\u5373\u76f8\u5bf9\u4e8e logging \u6a21\u5757\u88ab\u52a0\u8f7d\u65f6\u95f4\u7684\u5dee\u503c\u3002\n+ thread - \u7ebf\u7a0bID\uff08\u5982\u679c\u53ef\u7528\uff09\n+ thread_name - \u7ebf\u7a0b\u540d\uff08\u5982\u679c\u53ef\u7528\uff09\n\n\u793a\u4f8b - \u4f18\u5148\u7ea7\uff1a\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter([\"module\"]))  # \u8fd9\u91cc module \u7684\u4f18\u5148\u7ea7\u6700\u9ad8\n    tqsdk_logger.addHandler(sh)\n\n    api_context = {\"module\":\"api\", \"md_url\": \"wss://aaa.shinnytech.com\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, md_url=\"wss://bbb.shinnytech.com\", module=\"tqsdk\")  # \u8fd9\u91cc\u7684 module \u4f1a\u88ab formatter \u4e2d record \u81ea\u52a8\u751f\u6210\u7684 module \u8986\u76d6\n\n# output\n# {\"module\": \"log_params_priority\", \"md_url\": \"wss://bbb.shinnytech.com\", \"msg\": \"init\", \"time\": \"2020-09-01T17:51:32.781189+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n## \u4f7f\u7528\u793a\u4f8b\u53ca\u6ce8\u610f\u4e8b\u9879\n\n### \u4e0d\u4f7f\u7528\u672c\u65e5\u5fd7\u5e93\n\n\u9ed8\u8ba4\u65e5\u5fd7\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0cpython \u9ed8\u8ba4\u8f93\u51fa\u7684 logging.WARNING \u7ea7\u522b\u7684\u65e5\u5fd7, \u53ea\u8f93\u51fa msg \u5b57\u7b26\u4e32\n\n```python\nimport logging\n\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    logger.info(\"info\")  # \u770b\u4e0d\u5230\u6b64\u884c\u8f93\u51fa\u4fe1\u606f\n    logger.warning(\"warning\")\n    logger.error(\"error\")\n    logger.error(\"error %s %s\", 'xxx', 'yyy')\n\n# \u8f93\u51fa\n# warning\n# error\n# error xxx yyy\n```\n\n### \u7ed3\u6784\u5316\u65e5\u5fd7\n\n`shinny_structlog.JSONFormatter` \u53ef\u4ee5\u5c06\u8f93\u51fa\u7684\u65e5\u5fd7\u683c\u5f0f\u5316\u4e3a json \u683c\u5f0f\u3002\n\n```python\n\nimport logging\nimport shinny_structlog\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()  # \u8f93\u51fa\u5230\u63a7\u5236\u53f0\u524d\u7aef\n    sh.setLevel(logging.INFO)  # logging.INFO \u7ea7\u522b\n\n    fmt = shinny_structlog.JSONFormatter\n    sh.setFormatter(fmt())\n    tqsdk_logger.addHandler(sh)\n\n    tqsdk_logger.info(\"connected\")\n    tqsdk_logger.warning(\"connected\")\n    tqsdk_logger.error(\"connected\")\n    tqsdk_logger.fatal(\"connected\")\n    tqsdk_logger.panic(\"connected\")\n\n    tqsdk_logger.log(27, \"connected\")\n\n# output\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304480+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304681+08:00\", \"level\": \"warning\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304787+08:00\", \"level\": \"error\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304879+08:00\", \"level\": \"fatal\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.304971+08:00\", \"level\": \"panic\", \"name\": \"tqsdk\"}\n# {\"msg\": \"connected\", \"time\": \"2020-08-31T18:28:15.305065+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n```\n\n\n\u8bbe\u7f6e\u65e5\u5fd7\u4e3a json \u683c\u5f0f\uff0c\u8f93\u51fa\u5230\u65e5\u5fd7\u6587\u4ef6\n```python\nimport logging\nimport shinny_structlog\nif __name__ == \"__main__\":\n\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    fh = logging.FileHandler(filename=\"testprint.log\")\n    fh.setLevel(logging.DEBUG)\n    fmt = shinny_structlog.JSONFormatter\n    fh.setFormatter(fmt())\n    tqsdk_logger.addHandler(fh)\n\n    tqsdk_logger.error(\"connected error\", url=\"xxx.com\", user=\"abc\")\n\n# \u8f93\u51fa\u5230 testprint.log\n# {\"url\": \"xxx.com\", \"user\": \"abc\", \"msg\": \"connected error\", \"time\": \"2020-08-31T12:15:31.519445+08:00\", \"level\": \"error\", \"name\": \"tqsdk\"}\n```\n\n\n### \u65e5\u5fd7\u6dfb\u52a0\u989d\u5916\u5b57\u6bb5\n\n\u6253\u5370\u6bcf\u6761\u65e5\u5fd7\uff0c\u90fd\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u4e2a\u7684\u5065\u503c\u5bf9\u53c2\u6570\u3002\u6bcf\u4e2a\u53c2\u6570\u540d\u90fd\u5fc5\u987b\u7b26\u5408\u65e5\u5fd7\u89c4\u8303\uff0c\u3010\u5fc5\u987b\u3011\u4f7f\u7528\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u6570\u5b57\u53ca\u4e0b\u5212\u7ebf\uff0c\u5bf9\u5e94\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u63cf\u8ff0\u4e3a `[a-z0-9_]`\u3002\n\n```python\nimport logging\nimport shinny_structlog\nif __name__ == \"__main__\":\n\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    tqsdk_logger.error(\"connected error\", url=\"xxx.com\", user=\"abc\")\n\n# output\n# {\"url\": \"xxx.com\", \"user\": \"abc\", \"msg\": \"connected error\", \"time\": \"2020-08-31T12:15:31.519445+08:00\", \"level\": \"error\", \"name\": \"tqsdk\"}\n```\n\n\n### LogRecord \u672c\u8eab\u5e26\u6709\u7684\u5c5e\u6027\n\n\u5728 JSONFormatter \u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a list \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8868\u793a\u5728\u751f\u6210 json \u5b57\u7b26\u4e32\u4e2d\u6dfb\u52a0 LogRecord \u5bf9\u5e94\u7684\u5b57\u6bb5\u3002\n\n\u6ce8\u610f\uff1alogging \u6a21\u5757\u5c5e\u6027\u540d\u91c7\u7528\u9a7c\u5cf0\u6807\u8bc6\uff0cshinny_structlog \u7684\u65e5\u5fd7\u89c4\u8303\u91c7\u7528\u5c0f\u5199\u5b57\u6bcd\u52a0\u4e0b\u5212\u7ebf\uff0c\u6b64\u5904\u5c06 LogRecord \u4e2d\u9a7c\u5cf0\u6807\u8bc6\u7684\u5c5e\u6027\uff0c\u8f6c\u4e3a\u5c0f\u5199\u5b57\u6bcd\u52a0\u4e0b\u5212\u7ebf\u3002\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    fmt = shinny_structlog.JSONFormatter\n    # \u6253\u5370\u7684\u6bcf\u6761\u65e5\u5fd7\u90fd\u4f1a\u81f3\u5c11\u5305\u542b \"msg\" \"time\" \"level\" \"name\" \u4ee5\u53ca \"module\" \"line_no\" \"thread_name\" \u8fd97\u4e2a\u5b57\u6bb5\n    sh.setFormatter(fmt([\"module\", \"line_no\", \"thread_name\"])) \n    tqsdk_logger.addHandler(sh)\n\n    tqsdk_logger.debug(\"xxx\")\n\n# output\n# {\"msg\": \"xxx\", \"time\": \"2020-08-31T18:44:34.087702+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\", \"module\": \"example\", \"line_no\": 15, \"thread_name\": \"MainThread\"}\n```\n\n\n## \u4e0a\u4e0b\u6587\u8868\u793a\n\n1. \u6253\u5370\u65e5\u5fd7\u65f6\uff0c\u4f7f\u7528 extra \u5b57\u6bb5\u8868\u793a\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n\n    api_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:55:47.532228+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n2. \u4f7f\u7528 ShinnyLoggerAdapter \u7ef4\u62a4 context \u4fe1\u606f\n\n```python\nimport logging\nfrom shinny_structlog import ShinnyLoggerAdapter, JSONFormatter\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n    tqsdk_logger_adapter = ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    tqsdk_logger_adapter.debug(\"init\", init_balance=100000000.0)\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-07T16:51:28.124017+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n```\n\n\n## \u4e0a\u4e0b\u6587\u7ee7\u627f\n\n\u6709\u4e24\u79cd\u65b9\u5f0f\u6765\u8868\u793a context \u7684\u7ee7\u627f\u5173\u7cfb\uff1a\n\n1. \u76f4\u63a5\u4f7f\u7528 dict \u5bf9\u8c61\uff0c\u7531\u7528\u6237\u81ea\u5df1\u7ba1\u7406 context \u7ee7\u627f\u5173\u7cfb\n\n```python\nimport logging\nimport shinny_structlog\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(shinny_structlog.JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n\n    api_context = {\"strategy_id\": 2, \"strategy_name\": \"ma\"}\n    tqsdk_logger.debug(\"init\", extra=api_context, init_balance=100000000.0)\n\n    # \u7ee7\u627f context \u4fe1\u606f\uff0c\u9700\u8981\u5148 copy \u7236\u7ea7\u7684 context \u4fe1\u606f\uff0c\u518d\u6dfb\u52a0\u5b50\u7ea7\u9700\u8981\u7684\u4fe1\u606f\uff0c\u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n    md1_context = api_context.copy()\n    md1_context[\"url\"] = \"wss://a.shinnytech.com\"\n    tqsdk_logger.info(\"received\", extra=md1_context, pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2001\": {}}}]})\n\n    md2_context = api_context.copy()\n    md2_context[\"url\"] = \"wss://b.shinnytech.com\"\n    tqsdk_logger.info(\"received\", extra=md2_context, pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2012\": {}}}]})\n\n# output\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-01T17:55:47.532228+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://a.shinnytech.com\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2001\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-01T17:55:47.532424+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://b.shinnytech.com\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2012\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-01T17:55:47.532507+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}```\n```\n\n2. \u4f7f\u7528 ShinnyLoggerAdapter \u7ef4\u62a4 context \u7ee7\u627f\u5173\u7cfb\n\n```python\nimport logging\nfrom shinny_structlog import ShinnyLoggerAdapter, JSONFormatter\n\nif __name__ == \"__main__\":\n    tqsdk_logger = logging.getLogger(\"tqsdk\")\n\n    sh = logging.StreamHandler()\n    sh.setLevel(logging.NOTSET)\n    sh.setFormatter(JSONFormatter())\n    tqsdk_logger.addHandler(sh)\n\n    # \u4f7f\u7528 extra \u5173\u952e\u5b57\u53c2\u6570\u8868\u793a context \u4fe1\u606f\n    tqsdk_logger_adapter = ShinnyLoggerAdapter(tqsdk_logger, strategy_id=2, strategy_name=\"ma\")\n    tqsdk_logger_adapter.debug(\"init\", init_balance=100000000.0)\n    tqsdk_logger_adapter.debug(\"init\", extra={\"strategy_name\": \"tqsdk_ma\"}, init_balance=100000000.0)  # debug \u4e2d extra \u4f1a\u8986\u76d6 ShinnyLoggerAdapter \u4e2d\u540c\u540d\u7684\u53c2\u6570\n\n    # \u7ee7\u627f context \u4fe1\u606f\uff0c\u8c03\u7528 tqsdk_logger.bind\n    # \u7ee7\u627f tqsdk_logger_adapter \u4e2d\u7684 context, \u5e76\u4e14\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u6bb5\n    md1_logger_adapter = tqsdk_logger_adapter.bind(url=\"wss://a.shinnytech.com\", ip=\"127.0.0.1\")\n    md1_logger_adapter.info(\"received\", pack={\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2001\": {}}}]})\n\n    md2_logger_adapter = tqsdk_logger_adapter.bind(url=\"wss://b.shinnytech.com\", ip=\"127.0.0.1\")\n    md2_logger_adapter.info(\"received\", pack={\"aid\":\"rtn_data\", \"data\":[{\"quotes\": {\"SHFE.cu2012\": {}}}]})\n\n# ouput\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-07T16:52:12.825100+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"strategy_name\": \"tqsdk_ma\", \"strategy_id\": 2, \"init_balance\": 100000000.0, \"msg\": \"init\", \"time\": \"2020-09-07T16:52:12.825390+08:00\", \"level\": \"debug\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://a.shinnytech.com\", \"ip\": \"127.0.0.1\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2001\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-07T16:52:12.825478+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n# {\"strategy_id\": 2, \"strategy_name\": \"ma\", \"url\": \"wss://b.shinnytech.com\", \"ip\": \"127.0.0.1\", \"pack\": {\"aid\": \"rtn_data\", \"data\": [{\"quotes\": {\"SHFE.cu2012\": {}}}]}, \"msg\": \"received\", \"time\": \"2020-09-07T16:52:12.825558+08:00\", \"level\": \"info\", \"name\": \"tqsdk\"}\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shinnytech/structlog-python",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinny-structlog",
            "package_url": "https://pypi.org/project/shinny-structlog/",
            "platform": "",
            "project_url": "https://pypi.org/project/shinny-structlog/",
            "project_urls": {
                "Homepage": "https://github.com/shinnytech/structlog-python"
            },
            "release_url": "https://pypi.org/project/shinny-structlog/0.0.4/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Shinny StructLog",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8557716,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fa2aba5639f22edfee346a9abdfc555f",
                    "sha256": "989f96f484eeefae2a37a80fd262a3d3c92d14e3fe8346c218f45dff0a3412c8"
                },
                "downloads": -1,
                "filename": "shinny_structlog-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fa2aba5639f22edfee346a9abdfc555f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8783,
                "upload_time": "2020-11-02T07:17:09",
                "upload_time_iso_8601": "2020-11-02T07:17:09.413905Z",
                "url": "https://files.pythonhosted.org/packages/61/7e/e9289e6b2c677318b44e48eb8cd5bb7dc9fe786df640e78947cda7a325ae/shinny_structlog-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "14a9cce5eea69f647068867c92fa66c1",
                    "sha256": "e30db15314ce81f15af025b0f49715dcfdcb932e539bfbc7d462b8b61c3afeb3"
                },
                "downloads": -1,
                "filename": "shinny-structlog-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "14a9cce5eea69f647068867c92fa66c1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 14834,
                "upload_time": "2020-11-02T07:17:10",
                "upload_time_iso_8601": "2020-11-02T07:17:10.654283Z",
                "url": "https://files.pythonhosted.org/packages/a4/8f/66169d65384be6ab15e146db5f1b384a74ce202aa7bdc311f3a088187fb5/shinny-structlog-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}