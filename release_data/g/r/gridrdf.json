{
    "0.1.3": {
        "info": {
            "author": null,
            "author_email": "James Cumby <james.cumby@ed.ac.uk>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Scientific/Engineering"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "gridrdf",
            "package_url": "https://pypi.org/project/gridrdf/",
            "platform": null,
            "project_url": "https://pypi.org/project/gridrdf/",
            "project_urls": {
                "Home": "https://git.ecdf.ed.ac.uk/funcmatgroup/gridrdf"
            },
            "release_url": "https://pypi.org/project/gridrdf/0.1.3/",
            "requires_dist": null,
            "requires_python": null,
            "summary": "Grouped Representations of Interatomic Distances (GRID)",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15612007,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "c6656201e9ec42867fd806fde1cb42b1",
                    "sha256": "da858ce3234d502e94b2bbe9c1a5d9d6ff17ed7cea397b759d35d92be456b41b"
                },
                "downloads": -1,
                "filename": "gridrdf-0.1.3-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c6656201e9ec42867fd806fde1cb42b1",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 43721,
                "upload_time": "2022-07-01T10:03:31",
                "upload_time_iso_8601": "2022-07-01T10:03:31.907444Z",
                "url": "https://files.pythonhosted.org/packages/e7/cc/b4bfd63b0ff010c58c56e3131942ace386ed8f564916b8c66c2d5a968754/gridrdf-0.1.3-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "e13a2e01d859bc0c6918d19a996c1ff4",
                    "sha256": "0ad90c8f5f7c2e7517c299675ecfa4f8512cc82f9f2e4098ce667cd951f494dc"
                },
                "downloads": -1,
                "filename": "gridrdf-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "e13a2e01d859bc0c6918d19a996c1ff4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1817785,
                "upload_time": "2022-07-01T10:03:35",
                "upload_time_iso_8601": "2022-07-01T10:03:35.457433Z",
                "url": "https://files.pythonhosted.org/packages/c7/39/f0ac9e779e7bc3a554ce8cdbef17563b6c772692bace1ff6e550bf69cceb/gridrdf-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "jcumby",
            "author_email": "james.cumby@ed.ac.uk",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python"
            ],
            "description": ".. \n\tThese are examples of badges you might want to add to your README:\n\t   please update the URLs accordingly\n\n\t.. image:: https://api.cirrus-ci.com/github/<USER>/gridrdf.svg?branch=main\n\t\t :alt: Built Status\n\t\t :target: https://cirrus-ci.com/github/<USER>/gridrdf\n\t.. image:: https://readthedocs.org/projects/gridrdf/badge/?version=latest\n\t\t :alt: ReadTheDocs\n\t\t :target: https://gridrdf.readthedocs.io/en/stable/\n\t.. image:: https://img.shields.io/coveralls/github/<USER>/gridrdf/main.svg\n\t\t :alt: Coveralls\n\t\t :target: https://coveralls.io/r/<USER>/gridrdf\n\n\t.. image:: https://img.shields.io/conda/vn/conda-forge/gridrdf.svg\n\t\t :alt: Conda-Forge\n\t\t :target: https://anaconda.org/conda-forge/gridrdf\n\n.. image:: https://img.shields.io/pypi/v/gridrdf.svg\n    :alt: PyPI-Server\n    :target: https://pypi.org/project/gridrdf/\n\n.. image:: https://img.shields.io/badge/-PyScaffold-005CA0?logo=pyscaffold\n    :alt: Project generated with PyScaffold\n    :target: https://pyscaffold.org/\n\n|\n\n=======\ngridrdf\n=======\n\n\n    Grouped representation of interatomic distances (GRID)\n\n\nThis package is designed to compute GRID descriptions of \ncrystal structures and use them to train ML models, currently\nbased on properties extracted from the Materials Project.\nIn addition, it contains a number of tools for computing \nearth mover's distance (EMD) between distributions such \nas GRID or RDF, and using the resulting dissimilarities for\nfurther calculations.\n\nThis code accompanies the following paper, which should be cited\nif you use it for any future publications:\n\n`Grouped Representation of Interatomic Distances as a Similarity Measure for Crystal Structures <https://doi.org/10.26434/chemrxiv-2022-9m4jh>`_\n\n\n\n\n------------\nInstallation\n------------\n\nThe latest stable version of gridrdf can be installed using pip:\n\n.. code-block:: bash\n\n    pip install gridrdf\n\n\nIf you are using conda, you may find it easier to create a new environment with the\nrequired dependencies first, before installing gridrdf using pip:\n\n.. code-block:: bash\n\n\tconda create -n gridrdf_env -f environment.yml\n\tconda activate gridrdf_env\n\tpip install gridrdf\n\n\nAlternatively, the most recent development version can be installed\nby cloning the git repository, and then installing in 'development' mode:\n\n.. code-block:: bash\n\n\tgit clone https://git.ecdf.ed.ac.uk/funcmatgroup/gridrdf.git\n\tpip install -e gridrdf/\n\nUsing conda with this approach, you can install the dependencies from requirements.txt:\n\n.. code-block:: bash\n\n\tgit clone https://git.ecdf.ed.ac.uk/funcmatgroup/gridrdf.git\n\tconda env create -n gridrdf_env --file gridrdf/requirements.txt -c defaults -c conda-forge\n\tconda activate gridrdf_env\n\tpip install -e gridrdf\n\n\n-------\nTesting\n-------\n\nOnce downloaded or installed, it is recommended to test the code operates\ncorrectly. Using a python terminal, navigate to the `gridrdf` directory and type\n\n.. code-block:: bash\n\n\tpython -m unittest discover -s tests\n\n--------------\nUsing the Code\n--------------\n\nAll modules contained in gridrdf have documentation describing their\nintended use, and are grouped into 'data preparation' (`gridrdf.data_prepare`),\n'similarity calculation' (`gridrdf.earth_mover_distance`) and 'model training' (`gridrdf.train`) steps. \nOther utility modules are also included.\n\nSubmodules of gridrdf can be imported and used interactively in a python environment, but the main steps\noutlined above can also be accessed as command line scripts by calling the module directly (--help will give \nmore details of usage):\n\n.. code-block:: bash\n\n\tpython -m gridrdf.MODULE_NAME --help\n\n\n-----------------\nIntended Workflow\n-----------------\n\nTo re-create the results presented in the publication of predicting\nbulk modulus  using a kNN model and EMD dissimilarity, the procedure is as follows:\n\n1. Import data from the materials project with calculated elastic moduli\n\t\n    .. code-block:: python\n\t\n\t    data = gridrdf.data_prepare.get_MP_bulk_modulus_data(APIkey)\n\t    with open('MP_modulus.json') as f:\n\t\t\tgridrdf.json.dumps(data, f)\n   \n    NOTE: gridrdf currently relies on the legacy Materials Project API, so needs an old API KEY\n   \n2. Calculate GRID representation for each structure (generates GRID file for each structure)\n    .. code-block:: python\n\t\n\t\tgridrdf.data_prepare.batch_rdf(data[:2],\n\t\t\t\t\t\t\t\t\t   max_dist=10,\n\t\t\t\t\t\t\t\t\t   bin_size = 0.1,\n\t\t\t\t\t\t\t\t\t   method='kde',\n\t\t\t\t\t\t\t\t\t   output_dir = './GRIDS',\n\t\t\t\t\t\t\t\t\t   normalize=True\n\t\t\t\t\t\t\t\t\t  )\n\n    or from a terminal:\n   \n    .. code-block:: bash\n\t\n\t\tpython -m gridrdf.data_prepare --data_source MP_modulus.json --output_dir ../GRIDS/ --tasks grid_rdf_kde\n\n   \n3. Remove any structures with fewer than 100 GRID shells\n    .. code-block:: python\n\t\n\t\tall_GRID = gridrdf.data_io.rdf_read_parallel(data, rdf_dir = './GRIDS/')\n\t\tfor i, d in enumerate(data[:]):\n\t\t\tif len(all_GRID[i]) < 100:\n\t\t\t\tdata.remove(d)\n\t\twith open('MP_subset.json', 'w') as f:\n\t\t\tjson.dump(data, f, indent=1)\n \n   or from a terminal:\n    .. code-block:: bash\n\n\t\tpython -m gridrdf.data_prepare --data_source MP_modulus.json --output_dir ./GRIDS/ --tasks subset_grid_len --output_file MP_subset.json  \n\n    \n4. Filter structure with negative bulk moduli\n\t.. code-block:: python\n\t\n\t\tfor d in data:\n\t\t\tif d['elasticity.K_VRH'] < 0:\n\t\t\t\tdata.remove(d)\n\n   or from a terminal:\n\t.. code-block:: bash\n   \n\t\tpython -m gridrdf.data_prepare --data_source MP_modulus.json --output_dir ./GRIDS/ --output_file MP_subset.json --tasks subset_property --prop_filter elasticity.K_VRH 0 np.inf\n\n   \n5. Filter elements with atomic number > Bi:\n\t.. code-block:: python\n\t\n\t\t# First, generate internal list of 78 elements (as gridrdf.composition.periodic_table_78)\n\t\tgridrdf.composition.element_indice()\n\t\tdata = gridrdf.data_prepare.elements_selection(data, gridrdf.composition.periodic_table_78, mode='consist')\n\n   \n   NOTE: not currently implemented for command line script\n    \nSteps 2-5 can be combined into a single function call (similarly through terminal script by specifying tasks in order):\n\n.. code-block:: python\n\n\tdata_quick = gridrdf.data_prepare.main(data_source = './MP_modulus.json',\n\t\t\t\t\t\t\t\t\t  tasks = ['subset_grid_len', 'subset_composition', 'subset_property'],\n\t\t\t\t\t\t\t\t\t  output_dir = './GRIDS',\n\t\t\t\t\t\t\t\t\t  output_file = 'subset.json',\n\t\t\t\t\t\t\t\t\t  max_dist=10,\n\t\t\t\t\t\t\t\t\t  min_grid_groups = 100,\n\t\t\t\t\t\t\t\t\t  composition = {'elem': gridrdf.composition.periodic_table_78, 'type':'consist'},\n\t\t\t\t\t\t\t\t\t  data_property = ('elasticity.K_VRH', 0, np.inf)\n\t\t\t\t\t\t\t\t\t )\n    \n    \n6. Calculate pair-wise dissimilarity matrix between structures using EMD (time-consuming)\n\t.. code-block:: python\n\t\n\t\tsimilarity = gridrdf.earth_mover_distance.rdf_similarity_matrix(data, all_GRID, method='emd')\n\t\tsimilarity.to_csv('GRID_sim_whole_matrix.csv')\n\n   or from a terminal:\n    .. code-block:: bash\n\t\n\t\tpython -m gridrdf.earth_mover_distance --input_file MP_modulus.json --rdf_dir ./GRIDS/ --output_file GRID_sim --task rdf_similarity_matrix\n\n   Note: The data can also be processed in smaller chunks using `indice` (or `--data_indice` as a script) to allow parallel-processing.\n7. Use a simplified kNN model to predict bulk modulus\n\t.. code-block:: python\n\t\n\t\tK_data = np.array([ x['elasticity.K_VRH'] for x in data ])\n\t\tmodel = sklearn.neighbors.KNeighborsRegressor(n_neighbors=1, metric='precomputed')\n\t\tgridrdf.train.calc_obs_vs_pred_2D(funct = model,\n\t\t\t\t\t\t\t\t\t\t X_data = similarity,\n\t\t\t\t\t\t\t\t\t\t y_data = K_data,\n\t\t\t\t\t\t\t\t\t\t test_size = 0.2,\n\t\t\t\t\t\t\t\t\t\t outdir= './',\n\t\t\t\t\t\t\t\t\t\t)\n\n   or from a terminal:\n\t.. code-block:: bash\n\t\n\t\tpython -m gridrdf.train --input_file MP_modulus.json --rdf_dir ./GRIDS/ --input_features distance_matrix --dist_matrix GRID_sim_whole_matrix.csv --out_dir ./ --funct knn_reg --target bulk_modulus --metrics emd --task obs_vs_pred\n\n   \n   \n------\nIssues\n------\n\nIf you have any questions, comments or problems with the code, please feel free to post them as issues `here <https://git.ecdf.ed.ac.uk/funcmatgroup/gridrdf/-/issues>`_ \n   \n\n\n.. _pyscaffold-notes:\n\nNote\n====\n\nThis project has been set up using PyScaffold 4.3.1. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n",
            "description_content_type": "text/x-rst; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://git.ecdf.ed.ac.uk/funcmatgroup/gridrdf",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "gridrdf",
            "package_url": "https://pypi.org/project/gridrdf/",
            "platform": "any",
            "project_url": "https://pypi.org/project/gridrdf/",
            "project_urls": {
                "Documentation": "https://pyscaffold.org/",
                "Homepage": "https://git.ecdf.ed.ac.uk/funcmatgroup/gridrdf"
            },
            "release_url": "https://pypi.org/project/gridrdf/0.2.0/",
            "requires_dist": [
                "numpy (>=1.19.2)",
                "pandas (>=1.1.5)",
                "scikit-learn (>=0.22.2)",
                "pymatgen (>=2019.7.2)",
                "scipy (>=1.5.2)",
                "pyemd (>=0.5.1)",
                "matminer (>=0.7.4)",
                "ElMD (>=0.3.1)",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "Grouped representation of interatomic distances",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15612007,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ad57b1769d97c45b6cf4210404330fa2",
                    "sha256": "ea397f117ccf867798ee48635419b41c25ca3e1294e42d96e720d6eca4f52fd2"
                },
                "downloads": -1,
                "filename": "gridrdf-0.2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ad57b1769d97c45b6cf4210404330fa2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 45757,
                "upload_time": "2022-11-01T15:03:02",
                "upload_time_iso_8601": "2022-11-01T15:03:02.553291Z",
                "url": "https://files.pythonhosted.org/packages/3f/58/26eff27a7610759eead75531ee8dbf5a42221c578fbcd41462ea8852fee3/gridrdf-0.2.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "213334d3a2b1df4d11e6898ed41f5e92",
                    "sha256": "ff86930bfb339ea24680fc611c89a8981838696fee9d8e7d15007ab0afbfe916"
                },
                "downloads": -1,
                "filename": "gridrdf-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "213334d3a2b1df4d11e6898ed41f5e92",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1815451,
                "upload_time": "2022-11-01T15:03:05",
                "upload_time_iso_8601": "2022-11-01T15:03:05.469564Z",
                "url": "https://files.pythonhosted.org/packages/91/f8/e2b60caff059575590278da229c429462eb3664ac15854af936737c750b2/gridrdf-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}