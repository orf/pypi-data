{
    "0.0.0": {
        "info": {
            "author": "",
            "author_email": "ZHB <zhb2000@whu.edu.cn>",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "AGPL-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lightq",
            "package_url": "https://pypi.org/project/lightq/",
            "platform": null,
            "project_url": "https://pypi.org/project/lightq/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/lightq/0.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.10",
            "summary": "",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15840519,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3bc680bc1a276aac9770e869ed5254b1",
                    "sha256": "c9e3981dac97c2fcebf6473c879f855d3bed06a00344f99da626e175aae8abfd"
                },
                "downloads": -1,
                "filename": "lightq-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3bc680bc1a276aac9770e869ed5254b1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 13345,
                "upload_time": "2022-08-11T05:24:35",
                "upload_time_iso_8601": "2022-08-11T05:24:35.853316Z",
                "url": "https://files.pythonhosted.org/packages/db/49/2dbec2750cee72c5c2c2ab26a945baa5dd18b560baa34436b9b10c335f83/lightq-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "",
            "author_email": "ZHB <zhb2000@whu.edu.cn>",
            "bugtrack_url": null,
            "classifiers": [
                "Framework :: AsyncIO",
                "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Internet",
                "Typing :: Typed"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "qq,mirai",
            "license": "AGPL-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lightq",
            "package_url": "https://pypi.org/project/lightq/",
            "platform": null,
            "project_url": "https://pypi.org/project/lightq/",
            "project_urls": {
                "Bug Tracker": "https://github.com/zhb2000/lightq/issues",
                "Source": "https://github.com/zhb2000/lightq"
            },
            "release_url": "https://pypi.org/project/lightq/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.10",
            "summary": "An elegant QQ bot framework based on mirai-api-http.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15840519,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e311ae2c63d312ebc525cd7116c26464",
                    "sha256": "c15facad92a5d37cb41706edcedd86ad1682fbbdd706cc7693a93ff9bd2e0525"
                },
                "downloads": -1,
                "filename": "lightq-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e311ae2c63d312ebc525cd7116c26464",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 47551,
                "upload_time": "2022-08-11T07:29:38",
                "upload_time_iso_8601": "2022-08-11T07:29:38.661270Z",
                "url": "https://files.pythonhosted.org/packages/3c/f3/42990a8a2703bee3043ef45a56351c61a98c4d47b4757831d6035bd6864c/lightq-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "",
            "author_email": "ZHB <zhb2000@whu.edu.cn>",
            "bugtrack_url": null,
            "classifiers": [
                "Framework :: AsyncIO",
                "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Internet",
                "Typing :: Typed"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "qq,mirai",
            "license": "AGPL-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lightq",
            "package_url": "https://pypi.org/project/lightq/",
            "platform": null,
            "project_url": "https://pypi.org/project/lightq/",
            "project_urls": {
                "Bug Tracker": "https://github.com/zhb2000/lightq/issues",
                "Source": "https://github.com/zhb2000/lightq"
            },
            "release_url": "https://pypi.org/project/lightq/0.2.0/",
            "requires_dist": null,
            "requires_python": ">=3.10",
            "summary": "An elegant QQ bot framework based on mirai-api-http.",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15840519,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "806b369e7bf12c9c3ba30fcf1e1a96fd",
                    "sha256": "ac83b99ba025a251ad107680317bd286498696ecb628d9610c479310273bc2f6"
                },
                "downloads": -1,
                "filename": "lightq-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "806b369e7bf12c9c3ba30fcf1e1a96fd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 49825,
                "upload_time": "2022-09-08T07:59:13",
                "upload_time_iso_8601": "2022-09-08T07:59:13.137951Z",
                "url": "https://files.pythonhosted.org/packages/4f/7a/95d11c00f264ca3aaa7d127869b5a83e3114110ff0bc8e9a28864cbcaf55/lightq-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.0": {
        "info": {
            "author": "",
            "author_email": "ZHB <zhb2000@whu.edu.cn>",
            "bugtrack_url": null,
            "classifiers": [
                "Framework :: AsyncIO",
                "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Internet",
                "Typing :: Typed"
            ],
            "description": "# LightQ\r\n\r\n![PyPI](https://img.shields.io/pypi/v/lightq?logo=pypi&logoColor=white) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/lightq?logo=python&logoColor=white) ![mirai-api-http version](https://img.shields.io/badge/mirai--api--http-v2.6.2-blue) ![PyPI - License](https://img.shields.io/pypi/l/lightq)\r\n\r\nLightQ \u662f\u4e00\u4e2a\u57fa\u4e8e [mirai-api-http](https://github.com/project-mirai/mirai-api-http) \u7684 QQ \u673a\u5668\u4eba\u6846\u67b6\u3002\r\n\r\n## \u5b89\u88c5\r\n\r\n\u4ece PyPI \u5b89\u88c5\uff1a\r\n\r\n```shell\r\npip install lightq\r\n```\r\n\r\n\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5\uff1a\r\n\r\n```shell\r\ngit clone https://github.com/zhb2000/lightq.git\r\ncd lightq\r\npip install .\r\n```\r\n\r\n## \u524d\u7f6e\u6761\u4ef6\r\n\r\n\u73af\u5883\u8981\u6c42\uff1a\r\n\r\n- Python 3.10\r\n- mirai-api-http 2.6.2\r\n\r\nLightQ \u9700\u8981\u501f\u52a9\u7f51\u7edc API \u8c03\u7528 Mirai \u7684\u529f\u80fd\uff0c\u56e0\u6b64\u8bf7\u5148\u5b89\u88c5\u5e76\u914d\u7f6e\u597d  [Mirai Console Loader](https://github.com/iTXTech/mirai-console-loader) \u548c [mirai-api-http](https://github.com/project-mirai/mirai-api-http) \u63d2\u4ef6\uff1a\r\n\r\n1. \u5b89\u88c5 [Mirai Console Loader (MCL)](https://github.com/iTXTech/mirai-console-loader)\u3002\r\n1. \u5728 MCL \u4e2d\u914d\u7f6e QQ \u8d26\u53f7\u548c\u5bc6\u7801\uff0c\u786e\u4fdd\u80fd\u6b63\u5e38\u767b\u5f55\u8d26\u53f7\uff0c\u4e2d\u9014\u53ef\u80fd\u9700\u8981\u4f7f\u7528 [TxCaptchaHelper](https://github.com/mzdluo123/TxCaptchaHelper) \u5e94\u5bf9\u6ed1\u52a8\u9a8c\u8bc1\u7801\u3002\r\n1. \u4e3a MCL \u5b89\u88c5 [mirai-api-http](https://github.com/project-mirai/mirai-api-http) \u63d2\u4ef6\u3002\r\n1. \u5728 mirai-api-http \u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u542f\u7528 websocket \u9002\u914d\u5668\u3002\r\n\r\nLightQ \u4f7f\u7528 Python \u6807\u51c6\u5e93\u7684 [asyncio](https://docs.python.org/zh-cn/3/library/asyncio.html) \u5b8c\u6210\u5f02\u6b65\u64cd\u4f5c\uff0c\u5982\u679c\u4f60\u4e0d\u719f\u6089 Python \u7684\u534f\u7a0b\uff0c\u53ef\u4ee5\u5148\u770b\u770b Python \u6587\u6863\u4e2d[\u534f\u7a0b\u4e0e\u4efb\u52a1](https://docs.python.org/zh-cn/3/library/asyncio-task.html)\u8fd9\u4e00\u8282\u3002\r\n\r\n## \u7b80\u660e\u6559\u7a0b\r\n### \u5feb\u901f\u8d77\u6b65\r\n\r\n```python\r\nimport asyncio\r\nfrom lightq import message_handler, Bot, scan_handlers\r\nfrom lightq.entities import FriendMessage\r\n\r\n@message_handler(FriendMessage)\r\ndef say_hello() -> str:\r\n    return 'Hello'\r\n\r\nasync def main():\r\n    bot = Bot(123456789, 'verify-key')  # \u8bf7\u66ff\u6362\u4e3a\u76f8\u5e94\u7684 QQ \u53f7\u548c verify key\r\n    bot.add_all(scan_handlers(__name__))\r\n    await bot.run()\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n```\r\n\r\n\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6700\u7b80\u5355\u7684 QQ \u673a\u5668\u4eba\uff0c\u65e0\u8bba\u8c01\u7ed9\u5b83\u53d1\u6d88\u606f\uff0c\u5b83\u90fd\u53ea\u4f1a\u56de\u590d Hello\u3002\r\n\r\n`message_handler` \u88c5\u9970\u5668\u5c06 `say_hello` \u51fd\u6570\u5305\u88c5\u4e3a\u4e00\u4e2a `MessageHandler` \u5bf9\u8c61\uff0c\u8be5\u6d88\u606f\u5904\u7406\u5668\u53ea\u4f1a\u54cd\u5e94\u597d\u53cb\u6d88\u606f `FriendMessage`\u3002LightQ \u8fd8\u63d0\u4f9b\u4e86 `event_handler` \u548c `exception_handler` \u88c5\u9970\u5668\uff0c\u5206\u522b\u7528\u4e8e\u521b\u5efa\u4e8b\u4ef6\u5904\u7406\u5668\u548c\u5f02\u5e38\u5904\u7406\u5668\u3002\r\n\r\n`bot.add_all(scan_handlers(__name__))` \u7684\u4f5c\u7528\u662f\u83b7\u53d6\u5f53\u524d\u6a21\u5757\u4e2d\u6240\u6709 public \u7684 handler\uff0c\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 `bot` \u4e2d\u3002\r\n\r\n- \u6ce8 1\uff1a[`__name__` \u662f Python \u4e2d\u4e00\u4e2a\u7279\u6b8a\u7684\u53d8\u91cf\uff0c\u8868\u793a\u5f53\u524d\u6a21\u5757\u7684\u5168\u9650\u5b9a\u540d\u79f0](https://docs.python.org/zh-cn/3/reference/import.html#name__)\u3002\r\n- \u6ce8 2\uff1a\u5728 Python \u4e2d\u4e0d\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u53d8\u91cf\u4e3a\u6a21\u5757\u7684 public \u6210\u5458\uff0c\u53e6\u4e00\u79cd\u505a\u6cd5\u662f\u5728\u6a21\u5757\u4e2d\u7528 `__all__` \u5217\u51fa\u6240\u6709 public \u6210\u5458\u7684\u540d\u5b57\u3002\r\n\r\n\u4e00\u4e2a\u5408\u6cd5\u7684 handler \u51fd\u6570\u9700\u8981\u8fd4\u56de `str` \u6216 `MessageChain` \u6216 `None`\u3002Handler \u51fd\u6570\u65e2\u53ef\u4ee5\u662f\u540c\u6b65\u51fd\u6570\u4e5f\u53ef\u4ee5\u662f\u5f02\u6b65\u51fd\u6570\u3002\r\n\r\n```python\r\nfrom lightq import message_handler\r\nfrom lightq.entities import FriendMessage, MessageChain, Plain\r\n\r\n@message_handler(FriendMessage)\r\nasync def say_hello() -> MessageChain:  # \u4e00\u4e2a\u8fd4\u56de MessageChain \u7684\u5f02\u6b65\u51fd\u6570\r\n    await asyncio.sleep(1)\r\n    return MessageChain([Plain('Hello')])\r\n```\r\n\r\n### \u8fc7\u6ee4\u5668\r\n\r\n\u5982\u4f55\u5b9e\u73b0 handler \u7684\u6709\u6761\u4ef6\u6267\u884c\uff1f\u9700\u8981\u4f7f\u7528\u8fc7\u6ee4\u5668\u3002\u6211\u4eec\u7ee7\u7eed\u6539\u8fdb\u4e4b\u524d\u7684 `say_hello`\uff1a\r\n\r\n```python\r\nfrom lightq import RecvContext\r\n\r\ndef condition(context: RecvContext) -> bool:\r\n    return str(context.data.message_chain) == 'Hello'\r\n\r\n@message_handler(FriendMessage, filters=condition)\r\ndef say_hello() -> str:\r\n    \"\"\"\u5f53\u522b\u4eba\u5bf9 bot \u8bf4 Hello \u65f6\u56de\u590d Hello\"\"\"\r\n    return 'Hello'\r\n```\r\n\r\n\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 `condition` \u51fd\u6570\u5c31\u662f\u4e00\u4e2a\u8fc7\u6ee4\u5668\u3002`lightq.filters` \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e9b\u73b0\u6210\u7684\u8fc7\u6ee4\u5668\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002\u8ba9\u6211\u4eec\u518d\u4fee\u6539\u4e00\u4e0b `say_hello`\uff0c\u4e3a\u5b83\u8bbe\u7f6e\u4e24\u4e2a\u6761\u4ef6\uff1a\r\n\r\n```python\r\nfrom lightq import RecvContext, filters\r\n\r\ndef condition(context: RecvContext) -> bool:\r\n    return str(context.data.message_chain) == 'Hello'\r\n\r\n@message_handler(FriendMessage, filters=[filters.from_user(987654321), condition])\r\ndef say_hello() -> str:\r\n    \"\"\"\u5f53 QQ \u53f7\u4e3a 987654321 \u7684\u7528\u6237\u5bf9 bot \u8bf4 Hello \u65f6\u56de\u590d Hello\"\"\"\r\n    return 'Hello'\r\n```\r\n\r\n### \u53c2\u6570\u89e3\u6790\r\n#### \u57fa\u4e8e\u7c7b\u578b\u7684\u53c2\u6570\u89e3\u6790\r\n\r\n\u5982\u679c\u4f60\u7528\u8fc7 Spring Boot \u4e4b\u7c7b\u7684 Web \u6846\u67b6\uff0c\u5bf9\u4e8e\u53c2\u6570\u89e3\u6790\u8fd9\u4e2a\u6982\u5ff5\u5e94\u8be5\u4e0d\u4f1a\u964c\u751f\u3002LightQ \u6846\u67b6\u652f\u6301\u57fa\u4e8e\u7c7b\u578b\u548c\u57fa\u4e8e\u51fd\u6570\u4e24\u79cd\u53c2\u6570\u89e3\u6790\u673a\u5236\u3002\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u57fa\u4e8e\u7c7b\u578b\u7684\u53c2\u6570\u89e3\u6790\uff1a\r\n\r\n```python\r\nfrom lightq.entities import GroupMessage, MessageChain\r\n\r\n@message_handler(GroupMessage)\r\ndef group_message_handler(chain: MessageChain):\r\n    print(f'\u6536\u5230\u4e00\u6761\u7fa4\u7ec4\u6d88\u606f\uff0c\u5185\u5bb9\u4e3a\uff1a{chain}')\r\n```\r\n\r\n\u6ce8\u610f\u5230 `group_message_handler` \u51fd\u6570\u5e26\u6709\u53c2\u6570\u7c7b\u578b\u6ce8\u89e3 `chain: MessageChain`\uff0c\u8fd9\u4e2a\u7c7b\u578b\u6ce8\u89e3\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\u3002LightQ \u6846\u67b6\u4f7f\u7528 Python \u7684\u5185\u7701 (inspect) \u673a\u5236\u83b7\u53d6 `chain` \u53c2\u6570\u7684\u7c7b\u578b\uff0c\u63a5\u6536\u5230\u6d88\u606f\u540e\u89e3\u6790\u51fa\u6d88\u606f\u94fe\u5bf9\u8c61\uff0c\u518d\u81ea\u52a8\u5730\u5c06\u6d88\u606f\u94fe\u5bf9\u8c61\u6ce8\u5165 `chain` \u53c2\u6570\u4e2d\u3002\r\n\r\n\u53c2\u6570\u89e3\u6790\u673a\u5236\u7684\u4e00\u4e2a\u91cd\u8981\u7528\u9014\u662f\u5728 handler \u5185\u83b7\u53d6 bot \u7684\u5f15\u7528\uff0c\u5e76\u76f4\u63a5\u8c03\u7528 bot \u5bf9\u8c61\u4e0a\u7684\u65b9\u6cd5\uff1a\r\n\r\n```python\r\n@event_handler(NudgeEvent)\r\nasync def nudge_response(event: NudgeEvent, bot: Bot):\r\n    \"\"\"\u8c01\u62cd\u4e00\u62cd\u6211\uff0c\u6211\u5c31\u62cd\u4e00\u62cd\u8c01\"\"\"\r\n    if (event.subject.kind == 'Group'\r\n        and event.target == bot.bot_id\r\n        and event.from_id != bot.bot_id):\r\n        await bot.api.send_nudge(event.from_id, event.subject.id, 'Group')\r\n```\r\n\r\nLightQ \u6846\u67b6\u652f\u6301\u81ea\u52a8\u89e3\u6790\u7684\u7c7b\u578b\u6709\uff1a\r\n\r\n- `Bot`\r\n- `RecvContext`\r\n- `ExceptionContext`\r\n- `MessageChain`\r\n- `Message` \u53ca\u5176\u5b50\u7c7b\r\n- `Event` \u53ca\u5176\u5b50\u7c7b\r\n- `Exception` \u53ca\u5176\u5b50\u7c7b\r\n\r\n\u53c2\u6570\u89e3\u6790\u673a\u5236\u4e5f\u652f\u6301\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u53ea\u9700\u8ba9\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\u7ee7\u627f `lightq.framework` \u4e2d\u7684 `FromContext` / `FromRecvContext` / `FromExceptionContext` \u62bd\u8c61\u7c7b\u5e76\u91cd\u5199\u5bf9\u5e94\u7684\u65b9\u6cd5\u5373\u53ef\u3002\r\n\r\n#### \u57fa\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u89e3\u6790\r\n\r\n\u57fa\u4e8e\u7c7b\u578b\u7684\u53c2\u6570\u89e3\u6790\u65e0\u6cd5\u8986\u76d6\u6240\u6709\u573a\u666f\uff0c\u4f8b\u5982\uff1a\u5e0c\u671b\u4ece\u7fa4\u7ec4\u6d88\u606f\u4e2d\u89e3\u6790\u51fa\u7fa4\u53f7\u548c\u53d1\u9001\u8005\u7684 QQ \u53f7\uff0c\u4f46\u4e8c\u8005\u7686\u4e3a `int` \u7c7b\u578b\uff0c\u4ec5\u51ed\u7c7b\u578b\u65e0\u6cd5\u533a\u5206\u3002\u6b64\u65f6\u9700\u8981\u4f7f\u7528\u57fa\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u89e3\u6790\uff0c\u8bf7\u770b\u5982\u4e0b\u4f8b\u5b50\uff1a\r\n\r\n```python\r\nfrom lightq import resolvers  # resolvers \u662f\u4e00\u4e2a\u6a21\u5757\r\nfrom lightq import resolve  # resolve \u662f\u4e00\u4e2a\u88c5\u9970\u5668\r\n\r\n@resolve(resolvers.group_id, member_id=resolvers.sender_id)\r\n@message_handler(GroupMessage)\r\ndef group_message_handler(chain: MessageChain, group_id: int, member_id: int):\r\n    print(f'\u6536\u5230\u4e00\u6761\u7fa4\u7ec4\u6d88\u606f\uff0c\u7fa4\u53f7 {group_id}\uff0c\u7fa4\u5458 QQ \u53f7 {member_id}\uff0c\u5185\u5bb9\u4e3a\uff1a{chain}')\r\n```\r\n\r\n`resolvers.group_id` \u548c `resolvers.sender_id` \u662f\u4e24\u4e2a\u7c7b\u578b\u4e3a `(RecvContext) -> int` \u7684\u51fd\u6570\uff0c\u5206\u522b\u4ece `RecvContext` \u5bf9\u8c61\u4e2d\u89e3\u6790\u51fa\u53d1\u9001\u8005\u7684\u7fa4\u53f7\u548c QQ \u53f7\uff0c\u518d\u914d\u5408 `resolve` \u88c5\u9970\u5668\u5c31\u53ef\u4ee5\u5b9e\u73b0\u53c2\u6570\u89e3\u6790\u548c\u81ea\u52a8\u6ce8\u5165\u7684\u6548\u679c\u3002\r\n\r\n\u4f7f\u7528 `resolve` \u88c5\u9970\u5668\u65f6\uff0c\u82e5\u4ee5\u666e\u901a\u65b9\u5f0f\u4f20\u53c2\uff08\u4e0a\u9762\u7684 `@resolve(resolvers.group_id)`\uff09\uff0c\u5219\u6839\u636e\u89e3\u6790\u5668\u7684 `__name__` \u5c5e\u6027\u6ce8\u5165\u540c\u540d\u7684\u53c2\u6570\uff08[Python \u51fd\u6570\u7684 `__name__` \u5c5e\u6027\u9ed8\u8ba4\u4e3a\u8be5\u51fd\u6570\u7684\u540d\u5b57](https://docs.python.org/zh-cn/3/library/stdtypes.html#definition.__name__)\uff09\uff1b\u82e5\u4ee5\u547d\u540d\u53c2\u6570\u7684\u65b9\u5f0f\u4f20\u53c2\uff08\u4e0a\u9762\u7684 `@resolve(member_id=resolvers.sender_id)`\uff09\uff0c\u5219\u8868\u793a\u624b\u52a8\u6307\u5b9a\u6ce8\u5165\u53c2\u6570\u3002\r\n\r\n\u672c\u8282\u7684\u793a\u4f8b\u4ee3\u7801\u653e\u5728 [examples/resolver_example.py](./examples/resolver_example.py) \u4e2d\u3002\r\n\r\n### \u6b63\u5219\u8868\u8fbe\u5f0f\r\n\r\n`lightq.decorators` \u6a21\u5757\u4e2d\u6709\u4e09\u4e2a\u5f88\u5b9e\u7528\u7684\u88c5\u9970\u5668\uff1a`regex_match`\u3001`regex_search`\u3001`regex_fullmatch`\uff0c\u5206\u522b\u5bf9\u5e94 Python \u6807\u51c6\u5e93\u4e2d\u7684 `re.match`, `re.search`, `re.fullmatch`\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6d88\u606f\u7684\u5185\u5bb9\u3002\r\n\r\n```python\r\nimport re\r\nfrom lightq.decorators import regex_match\r\n\r\n@regex_match('(?P<first_group>\\w+) (?P<second_group>\\w+)')\r\n@message_handler(GroupMessage)\r\ndef handler(first_group: str, second_group: str, match: re.Match):\r\n    assert first_group == match['first_group']\r\n    assert second_group == match['second_group']\r\n```\r\n\r\n\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\u5f62\u5982 `(?P<name>...)` \u7684\u662f\u547d\u540d\u7ec4\u8bed\u6cd5\u3002\u5982\u679c\u6d88\u606f\u7684\u5185\u5bb9\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5339\u914d\uff0c\u90a3\u4e48\u5c06\u6355\u83b7\u7684\u7ec4\u6309\u7167\u7ec4\u7684\u540d\u5b57\u6ce8\u5165\u5230 handler \u7684\u540c\u540d\u53c2\u6570\u4e2d\uff0c\u5339\u914d\u5bf9\u8c61\u5c06\u81ea\u52a8\u6ce8\u5165\u5230\u7c7b\u578b\u4e3a `re.Match` \u7684\u53c2\u6570\u4e2d\u3002\r\n\r\n\u6b63\u5219\u8868\u8fbe\u5f0f\u88c5\u9970\u5668\u53ef\u4ee5\u7528\u6765\u6784\u5efa QQ \u673a\u5668\u4eba\u7684\u6307\u4ee4\u7cfb\u7edf\uff1a\r\n\r\n```python\r\n@regex_fullmatch(r'/mute\\s+(?P<member_id>\\d+)\\s+(?P<duration>\\d+)')\r\n@resolve(resolvers.group_id)\r\n@message_handler(GroupMessage)\r\nasync def mute_command(group_id: int, member_id: str, duration: str, bot: Bot):\r\n    \"\"\"\r\n    \u8f93\u5165 /mute member_id duration \u547d\u4ee4\u4ee5\u7981\u8a00\u7528\u6237\r\n\r\n    :param group_id: \u7fa4\u53f7\r\n    :param member_id: \u88ab\u7981\u8a00\u7684\u7528\u6237\r\n    :param duration: \u7981\u8a00\u65f6\u957f\uff08\u79d2\uff09\r\n    \"\"\"\r\n    await bot.api.mute(group_id, int(member_id), int(duration))\r\n```\r\n\r\n`regex_match` \u7684\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u5176\u539f\u7406\u662f\u5c06\u8fc7\u6ee4\u5668\u548c\u89e3\u6790\u5668\u6784\u9020\u51fa\u6765\u63d2\u5165 handler \u4e2d\uff0c\u5e76\u4e0d\u9700\u8981\u5f15\u5165\u989d\u5916\u7684\u7ec4\u4ef6\u3002\u4f60\u53ef\u4ee5\u5728 [src/lightq/decorators/_regex.py](./src/lightq/decorators/_regex.py) \u627e\u5230\u5176\u6e90\u4ee3\u7801\u3002\r\n\r\n### \u8bbe\u7f6e handler \u7684\u4f18\u5148\u7ea7\r\n\r\n\u82e5\u4e0d\u663e\u5f0f\u5730\u6307\u5b9a handler \u95f4\u7684\u4f18\u5148\u5173\u7cfb\uff0c\u5219\u673a\u5668\u4eba\u904d\u5386\u5404\u4e2a handler \u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u8fd9\u6709\u65f6\u5019\u4f1a\u5e26\u6765\u95ee\u9898\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u590d\u8bfb\u673a\u7a0b\u5e8f\uff0c\u53ef\u901a\u8fc7\u201c\u5f00\u59cb\u590d\u8bfb\u201d\u548c\u201c\u505c\u6b62\u590d\u8bfb\u201d\u547d\u4ee4\u6765\u5f00\u5173\u590d\u8bfb\u529f\u80fd\u3002\r\n\r\n```python\r\nrepeat_on = False\r\n\r\n@regex_fullmatch('(?P<option>\u5f00\u59cb|\u505c\u6b62)\u590d\u8bfb')\r\n@message_handler(GroupMessage)\r\ndef switch(option: str):\r\n    global repeat_on\r\n    repeat_on = option == '\u5f00\u59cb'\r\n    return f'\u590d\u8bfb\u5df2{option}'\r\n\r\n@message_handler(GroupMessage, filters=lambda ctx: repeat_on, after=switch)\r\ndef repeat(chain: MessageChain) -> MessageChain:\r\n    return chain\r\n```\r\n\r\n\u6ce8\u610f\u5230\uff0c\u5fc5\u987b\u5148\u5224\u65ad `switch` \u7684\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u7136\u540e\u518d\u5224\u65ad `repeat` \u7684\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u5373 `switch` \u7684\u4f18\u5148\u7ea7\u5fc5\u987b\u9ad8\u4e8e `repeat`\uff0c\u5426\u5219\u5f53\u7528\u6237\u8f93\u5165\u201c\u505c\u6b62\u590d\u8bfb\u201d\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u7ee7\u7eed\u590d\u8bfb\u201c\u505c\u6b62\u590d\u8bfb\u201d\u8fd9\u53e5\u8bdd\u800c\u4e0d\u662f\u628a\u590d\u8bfb\u529f\u80fd\u5173\u6389\u3002\r\n\r\n\u600e\u6837\u8bbe\u7f6e handler \u7684\u4f18\u5148\u7ea7\u5462\uff1f\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a\r\n\r\n- \u4f7f\u7528\u88c5\u9970\u5668\u7684 `after` \u53c2\u6570\u6216 `before` \u53c2\u6570\uff0c\u5982\u4e0a\u8ff0\u4ee3\u7801\u5728 `repeat` \u7684\u88c5\u9970\u5668\u4e2d\u8bbe\u7f6e\u4e86 `after=switch`\u3002\r\n- \u76f4\u63a5\u4fee\u6539 handler \u7684 `after` \u6216 `before` \u5c5e\u6027\uff0c\u5982 `repeat.after.append(switch)`\u3002\r\n- \u4f7f\u7528 `Bot` \u7684 `add_order` \u65b9\u6cd5\uff0c\u5982 `bot.add_order(switch, repeat)`\u3002\r\n\r\n\u672c\u8282\u7684\u793a\u4f8b\u4ee3\u7801\u653e\u5728 [examples/repeater.py](./examples/repeater.py) \u4e2d\u3002\r\n\r\n### \u4f7f\u7528 controller\r\n\r\n\u4ee5\u4e0a\u793a\u4f8b\u4e2d\u6240\u6709\u7684 bot \u90fd\u662f\u201c\u4e00\u95ee\u4e00\u7b54\u201d\u578b\uff0c\u800c\u4e00\u4e2a\u5177\u5907\u8fde\u7eed\u5bf9\u8bdd\u80fd\u529b\u7684 bot \u770b\u8d77\u6765\u4f1a\u66f4\u52a0\u6709\u8da3\uff1a\r\n\r\n```text\r\n\u7fa4\u53cb 1\uff1a/weather\r\nBot\uff1a\u60a8\u60f3\u67e5\u8be2\u54ea\u4e2a\u57ce\u5e02\u7684\u5929\u6c14\uff1f\r\n\u7fa4\u53cb 1\uff1a\u6b66\u6c49\r\nBot\uff1a\u6b66\u6c49\u7684\u5929\u6c14\u4e3a\u5c0f\u96e8\r\n\r\n\u7fa4\u53cb 2\uff1a/mute_all\r\nBot\uff1a\u60a8\u786e\u5b9a\u8981\u5f00\u542f\u5168\u5458\u7981\u8a00\u5417\uff1f\u8bf7\u56de\u590d\u201c\u662f\u201d\u6216\u201c\u5426\u201d\r\n\u7fa4\u53cb 2\uff1ano\r\nBot\uff1a\u8bf7\u56de\u590d\u201c\u662f\u201d\u6216\u201c\u5426\u201d\r\n\u7fa4\u53cb 2\uff1a\u5426\r\n```\r\n\r\n\u82e5\u8981\u5b9e\u73b0\u8fde\u7eed\u5bf9\u8bdd\u529f\u80fd\uff0c\u5c31\u5fc5\u987b\u4fdd\u5b58\u6bcf\u4e2a\u7528\u6237\u7684\u72b6\u6001\u3002\u53ef\u4ee5\u5c06\u72b6\u6001\u4fdd\u5b58\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\u3002\u5982\u679c\u4f60\u4e0d\u559c\u6b22\u5168\u5c40\u53d8\u91cf\u8fd9\u79cd\u4ee3\u7801\u98ce\u683c\uff0c\u4e5f\u53ef\u4ee5\u5c06\u72b6\u6001\u5c01\u88c5\u5230 controller \u7c7b\u4e2d\u7edf\u4e00\u7ba1\u7406\u3002Controller \u7c7b\u7684\u7f16\u5199\u65b9\u6cd5\u5982\u4e0b\uff1a\r\n\r\n```python\r\nclass MyController(lightq.Controller):  # \u7ee7\u627f lightq.Controller \u7c7b\r\n    def __init__(self):\r\n        self.status = ...  # \u5c06\u72b6\u6001\u4f5c\u4e3a\u6210\u5458\u53d8\u91cf\u5c01\u88c5\u5230 controller \u4e2d\r\n\r\n    # \u8fc7\u6ee4\u5668\u65b9\u6cd5\r\n    def condition(self, context: RecvContext) -> bool: ...\r\n\r\n    # \u89e3\u6790\u5668\u65b9\u6cd5\r\n    def resolver(self, context: RecvContext): ...\r\n\r\n    # \u7528 message_handler \u88c5\u9970\u5668\u5c06 my_handler \u65b9\u6cd5\u8f6c\u6362\u4e3a\u6d88\u606f\u5904\u7406\u5668\r\n    # - \u4f7f\u7528 condition \u65b9\u6cd5\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\r\n    # - \u4f7f\u7528 resolver \u65b9\u6cd5\u4f5c\u4e3a\u53c2\u6570\u89e3\u6790\u5668\r\n    @resolve(data=resolver)\r\n    @message_handler(Message, filters=condition)\r\n    def my_handler(self, data):\r\n        self.status  # \u5728\u65b9\u6cd5\u5185\u90e8\u53ef\u4ee5\u901a\u8fc7 self \u5f15\u7528\u4fdd\u5b58\u7684\u72b6\u6001\r\n        ...\r\n\r\ncontroller = MyController()\r\n# \u901a\u8fc7 handlers \u65b9\u6cd5\u83b7\u53d6\u6240\u6709 public \u7684 handler\r\nbot.add_all(controller.handlers())\r\n# ...\r\n```\r\n\r\n[examples/assistant.py](./examples/assistant.py) \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684 controller \u793a\u4f8b\uff0c\u5b9e\u73b0\u4e86\u4e00\u4e2a\u652f\u6301 `/weather` \u548c `/mute_all` \u547d\u4ee4\u7684\u673a\u5668\u4eba\u3002\r\n\r\n\u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u7528 `handler_property` \u88c5\u9970\u5668\u5c06\u5c5e\u6027\u65b9\u6cd5\u8f6c\u6362\u4e3a\u5904\u7406\u5668\uff0c\u793a\u4f8b\u4ee3\u7801\u89c1 [examples/assistant_property_style.py](./examples/assistant_property_style.py).\r\n\r\n### \u5176\u4ed6\u529f\u80fd\r\n#### \u5b9a\u65f6\u4efb\u52a1\u3001\u540e\u53f0\u4efb\u52a1\r\n\r\n\u76f8\u5173\u7684\u51fd\u6570\u548c\u65b9\u6cd5\uff1a\r\n\r\n- `asyncio.sleep`\uff1a\u53ef\u7528\u4e8e\u5ef6\u8fdf\u6267\u884c\u7b49\u573a\u666f\u3002\r\n- `lightq.utils.sleep_until`\uff1a\u5ef6\u8fdf\u5230\u67d0\u4e2a\u65f6\u523b\u6267\u884c\uff0c\u8be5\u51fd\u6570\u662f\u5bf9 `asyncio.sleep` \u7684\u7b80\u5355\u5c01\u88c5\u3002\r\n- `Bot.create_task`\uff1a\u521b\u5efa\u540e\u53f0\u4efb\u52a1\uff0c\u8be5\u65b9\u6cd5\u662f\u5bf9 `asyncio.create_task` \u7684\u7b80\u5355\u5c01\u88c5\u3002\r\n- `Bot.create_everyday_task`\uff1a\u521b\u5efa\u6bcf\u65e5\u5b9a\u65f6\u4efb\u52a1\u3002\r\n\r\n#### \u65e5\u5fd7\r\n\r\nLightQ \u4f7f\u7528 Python \u6807\u51c6\u5e93\u4e2d\u7684 `logging` \u6a21\u5757\u6765\u6253\u5370\u65e5\u5fd7\uff0c\u53ef\u901a\u8fc7 `lightq.logger` \u83b7\u5f97 logger \u5bf9\u8c61\u3002\u9ed8\u8ba4\u7684\u65e5\u5fd7\u6253\u5370\u7ea7\u522b\u4e3a INFO\u3002\r\n\r\n#### \u81ea\u5b9a\u4e49\u8def\u7531\r\n\r\nLightQ \u9ed8\u8ba4\u7684\u8def\u7531\u4f1a\u6839\u636e\u6d88\u606f/\u4e8b\u4ef6/\u5f02\u5e38\u7684\u7c7b\u578b\u5c06\u6570\u636e\u9001\u7ed9\u6307\u5b9a\u7684 handler\u3002\u4f60\u4e5f\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u573a\u666f\u8bbe\u8ba1\u66f4\u9ad8\u6548\u7684\u8def\u7531\u673a\u5236\u3002\u7ee7\u627f `MessageRouter` / `EventRouter` / `ExceptionRouter` \u62bd\u8c61\u7c7b\uff08\u4f4d\u4e8e `lightq.framework` \u6a21\u5757\u4e2d\uff09\u5e76\u91cd\u5199\u5bf9\u5e94\u7684\u65b9\u6cd5\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49\u8def\u7531\u673a\u5236\u3002\r\n\r\n## \u672a\u6765\r\n\r\n\uff08\u53ef\u80fd\u662f\uff09\u5c06\u6765\u7684\u4e00\u4e9b\u5de5\u4f5c\uff1a\r\n\r\n- \u5b8c\u5584\u6587\u6863\r\n- \u652f\u6301\u6587\u4ef6\u64cd\u4f5c\r\n- \u8865\u9f50\u5269\u4f59\u7684 API \u529f\u80fd\r\n- \u4e2d\u95f4\u4ef6/\u94a9\u5b50\u51fd\u6570\uff1f\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "qq,mirai",
            "license": "AGPL-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lightq",
            "package_url": "https://pypi.org/project/lightq/",
            "platform": null,
            "project_url": "https://pypi.org/project/lightq/",
            "project_urls": {
                "Bug Tracker": "https://github.com/zhb2000/lightq/issues",
                "Source": "https://github.com/zhb2000/lightq"
            },
            "release_url": "https://pypi.org/project/lightq/0.3.0/",
            "requires_dist": null,
            "requires_python": ">=3.10",
            "summary": "An elegant QQ bot framework based on mirai-api-http.",
            "version": "0.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15840519,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "12eba19e5faaf0abb7e6708bd7946dc1",
                    "sha256": "66c0ab28206f8b55532da0929d3f2680a4ec48d3efa7d14929cda8a3da03e207"
                },
                "downloads": -1,
                "filename": "lightq-0.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "12eba19e5faaf0abb7e6708bd7946dc1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 50888,
                "upload_time": "2022-11-21T13:45:15",
                "upload_time_iso_8601": "2022-11-21T13:45:15.306283Z",
                "url": "https://files.pythonhosted.org/packages/f0/cf/36dafc07d60d38d79d6c3fd792a4f12aca20124b455cb0429fb23d3072de/lightq-0.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}