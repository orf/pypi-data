{
    "0.1": {
        "info": {
            "author": "Huite Bootsma",
            "author_email": "huite.bootsma@deltares.nl",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Scientific/Engineering"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Huite/numba_celltree",
            "keywords": "mesh,spatial index,ugrid,unstructured grid",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "numba-celltree",
            "package_url": "https://pypi.org/project/numba-celltree/",
            "platform": "",
            "project_url": "https://pypi.org/project/numba-celltree/",
            "project_urls": {
                "Code": "https://github.com/Huite/numba_celltree",
                "Homepage": "https://github.com/Huite/numba_celltree",
                "Issues": "https://github.com/Huite/numba_celltree/issues"
            },
            "release_url": "https://pypi.org/project/numba-celltree/0.1/",
            "requires_dist": [
                "numba (>=0.50)",
                "numpy",
                "matplotlib ; extra == 'all'",
                "meshzoo ; extra == 'all'",
                "matplotlib ; extra == 'docs'",
                "meshzoo ; extra == 'docs'",
                "pydata-sphinx-theme ; extra == 'docs'",
                "sphinx ; extra == 'docs'",
                "sphinx-gallery ; extra == 'docs'"
            ],
            "requires_python": ">=3.7",
            "summary": "Cell Tree Spatial Index",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14962789,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f667eefa5169a7a2201bd8f05fd7784a",
                    "sha256": "87eaa3092aa0fc794f3964ec928f783711a40301b383c2d96a7b2bcce00f6b7f"
                },
                "downloads": -1,
                "filename": "numba_celltree-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f667eefa5169a7a2201bd8f05fd7784a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 35333,
                "upload_time": "2021-08-30T11:33:11",
                "upload_time_iso_8601": "2021-08-30T11:33:11.333914Z",
                "url": "https://files.pythonhosted.org/packages/e5/53/69c19b02fcab90dd3831cc8937679c44413b3a93c1146e9d7bdaa5919262/numba_celltree-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a5fa6e77cbba2c48e9e55cb6ebaccb6a",
                    "sha256": "b1943f0d80479adfb8bb08cbffa13c8c554f6357fa3092061f773cd1a3bf86c5"
                },
                "downloads": -1,
                "filename": "numba_celltree-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a5fa6e77cbba2c48e9e55cb6ebaccb6a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 31595,
                "upload_time": "2021-08-30T11:33:12",
                "upload_time_iso_8601": "2021-08-30T11:33:12.855912Z",
                "url": "https://files.pythonhosted.org/packages/ee/ee/089a4956adec3a0042e792d94b3fd3df9e434f4001858c675e52d2c9be89/numba_celltree-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Huite Bootsma",
            "author_email": "huite.bootsma@deltares.nl",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Scientific/Engineering"
            ],
            "description": "Numba Celltree\r\n==============\r\n\r\n.. image:: https://img.shields.io/github/workflow/status/deltares/numba_celltree/ci?style=flat-square\r\n   :target: https://github.com/deltares/numba_celltree/actions?query=workflows%3Aci\r\n.. image:: https://img.shields.io/codecov/c/github/deltares/numba_celltree.svg?style=flat-square\r\n   :target: https://app.codecov.io/gh/deltares/numba_celltree\r\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square\r\n   :target: https://github.com/psf/black\r\n\r\nFinding your way around in an unstructured meshes is difficult. Numba Celltree\r\nprovides methods for searching for points, lines, boxes, and cells (convex\r\npolygons) in a two dimensional unstructured mesh.\r\n\r\n.. code:: python\r\n\r\n    import meshzoo\r\n    import numpy as np\r\n    from numba_celltree import CellTree2d\r\n\r\n\r\n    vertices, faces = meshzoo.disk(5, 5)\r\n    vertices += 1.0\r\n    vertices *= 5.0\r\n    tree = CellTree2d(vertices, faces, -1)\r\n\r\n    # Intersection with two triangles\r\n    triangle_vertices = np.array(\r\n        [\r\n            [5.0, 3.0],\r\n            [7.0, 3.0],\r\n            [7.0, 5.0],\r\n            [0.0, 6.0],\r\n            [4.0, 4.0],\r\n            [6.0, 10.0],\r\n        ]\r\n    )\r\n    triangles = np.array([[0, 1, 2], [3, 4, 5]])\r\n    tri_i, cell_i, area = tree.intersect_faces(triangle_vertices, triangles, -1)\r\n\r\n    # Intersection with two lines\r\n    edge_coords = np.array(\r\n        [\r\n            [[0.0, 0.0], [10.0, 10.0]],\r\n            [[0.0, 10.0], [10.0, 0.0]],\r\n        ]\r\n    )\r\n    edge_i, cell_i, intersections = tree.intersect_edges(edge_coords)\r\n\r\n.. image:: https://raw.githubusercontent.com/Deltares/numba_celltree/main/docs/_static/intersection-example.svg\r\n  :target: https://github.com/deltares/numba_celltree\r\n\r\nInstallation\r\n------------\r\n\r\n.. code:: console\r\n\r\n    pip install numba_celltree\r\n    \r\nDocumentation\r\n-------------\r\n\r\n.. image:: https://img.shields.io/github/workflow/status/deltares/numba_celltree/docs?style=flat-square\r\n   :target: https://deltares.github.io/numba_celltree/\r\n\r\nBackground\r\n----------\r\n\r\nThis package provides the cell tree data structure described in:\r\n\r\nGarth, C., & Joy, K. I. (2010). Fast, memory-efficient cell location in\r\nunstructured grids for visualization. IEEE Transactions on Visualization and\r\nComputer Graphics, 16(6), 1541-1550.\r\n\r\nThis paper can be read `here\r\n<https://escholarship.org/content/qt0vq7q87f/qt0vq7q87f.pdf>`_.\r\n\r\nThe tree building code is a direction translation of the (public domain) `C++\r\ncode\r\n<https://github.com/NOAA-ORR-ERD/cell_tree2d/blob/master/src/cell_tree2d.cpp>`_\r\nby Jay Hennen, which is available in the `cell_tree2d\r\n<https://github.com/NOAA-ORR-ERD/cell_tree2d>`_ python package. This\r\nimplementation is currently specialized for two spatial dimensions, but\r\nextension to three dimensions is relatively straightforward. Another (BSD\r\nlicensed) implementation which supports three dimensions can be found in VTK's\r\n`CellTreeLocator\r\n<https://vtk.org/doc/nightly/html/classvtkCellTreeLocator.html>`_.\r\n\r\nThe cell tree of the ``cell_tree2d`` currently only locates points. I've added\r\nadditional methods for locating and clipping lines and convex polygons.\r\n\r\nJust-In-Time Compilation: Numba\r\n-------------------------------\r\n\r\nThis package relies on `Numba <https://numba.pydata.org/>`_ to just-in-time\r\ncompile Python code into fast machine code. This has the benefit of keeping\r\nthis package a \"pure\" Python package, albeit with a dependency on Numba.\r\n\r\nWith regards to performance:\r\n\r\n* Building the tree is marginally faster compared to the C++ implementation\r\n  (~15%).\r\n* Serial point queries are somewhat slower (~50%), but Numba's automatic\r\n  parallellization speeds things up significantly (down to 20% runtime on my 4\r\n  core laptop). (Of course the C++ code can be parallellized in the same manner\r\n  with ``pragma omp parallel for``.)\r\n* The other queries have not been compared, as the C++ code lacks the\r\n  functionality.\r\n* In traversing the tree, recursion in Numba appears to be less performant than\r\n  maintaining a stack of nodes to traverse. The VTK implementation also uses\r\n  a stack rather than recursion.\r\n* Numba (like its `LLVM JIT sister Julia <https://julialang.org/>`_) does not\r\n  allocate small arrays on the stack automatically, like C++ and Fortran\r\n  compilers do. However, it can be done `manually\r\n  <https://github.com/numba/numba/issues/5084>`_. This cuts down runtimes by\r\n  at least a factor 2, more so in parallel. However, these stack allocated\r\n  arrays work only in the context of Numba. They must be disabled when running\r\n  in uncompiled Python -- there is some code in ``numba_celltree.utils`` which\r\n  takes care of this.\r\n* All methods have been carefully written to keep heap allocations to a\r\n  minimum. This also helps in parallellization, as at the time of writing\r\n  Numba's lists are `not thread safe\r\n  <https://github.com/numba/numba/issues/5878>`_.  Unfortunately, this means we\r\n  have to query twice when the number of answers is unknown: once to count,\r\n  after which we can allocate, then another time to store the answers. Since\r\n  parallelization results in speedups over a factor 2, this still results in a\r\n  net gain.\r\n\r\nTo debug, set the environmental variable ``NUMBA_DISABLE_JIT=1``. Re-enable by\r\nsetting ``NUMBA_DISABLE_JIT=0``.\r\n\r\n.. code:: bash\r\n\r\n    export NUMBA_DISABLE_JIT=1\r\n\r\nIn Windows Command Prompt:\r\n\r\n.. code:: console\r\n\r\n    set NUMBA_DISABLE_JIT=1\r\n\r\nIn Windows Powershell:\r\n\r\n.. code:: console\r\n\r\n    $env:NUMBA_DISABLE_JIT=1\r\n\r\nIn Python itself:\r\n\r\n.. code:: python\r\n\r\n    import os\r\n\r\n    os.environ[\"NUMBA_DISABLE_JIT\"] = \"1\"\r\n\r\nThis must be done before importing the package to have effect. \r\n\r\n\r\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/deltares/numba_celltree",
            "keywords": "mesh,spatial index,ugrid,unstructured grid",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "numba-celltree",
            "package_url": "https://pypi.org/project/numba-celltree/",
            "platform": "",
            "project_url": "https://pypi.org/project/numba-celltree/",
            "project_urls": {
                "Code": "https://github.com/deltares/numba_celltree",
                "Homepage": "https://github.com/deltares/numba_celltree",
                "Issues": "https://github.com/deltares/numba_celltree/issues"
            },
            "release_url": "https://pypi.org/project/numba-celltree/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Cell Tree Spatial Index",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14962789,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0cfc24db8e59c07fa59a9e5ab6604ed0",
                    "sha256": "e4cc5b85cea991eaf83a0c77f165845deeb341a7a5fed428a3cc74b372678b85"
                },
                "downloads": -1,
                "filename": "numba_celltree-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "0cfc24db8e59c07fa59a9e5ab6604ed0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 31984,
                "upload_time": "2021-12-15T10:38:03",
                "upload_time_iso_8601": "2021-12-15T10:38:03.098681Z",
                "url": "https://files.pythonhosted.org/packages/73/d5/13101b06798d00fc39586cca9250f32d06c448b80ad2704a2b4514b1d510/numba_celltree-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}