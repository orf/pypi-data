{
    "1.0.7": {
        "info": {
            "author": "Joseph Edradan",
            "author_email": "edradanjoseph245@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only"
            ],
            "description": "\n# Code Analyzer\n\n[![Tests](https://github.com/josephedradan/code_analyzer/actions/workflows/test.yml/badge.svg)](https://github.com/josephedradan/code_analyzer/actions/workflows/test.yml)\n\n\n### What is this?\nA python code analyzer that allows you to visually see how your code works after executing code.\nAlternatively, you can think of it as a python debugger that prints all the lines executed.\n\n### Why would you use this?\nLet's say you don't want to use a python debugger and you want to see how your code runs line by line printed out. You can import this module and add a few lines of code to initialize the analyzer and run your code, and\nyou will get a simple analysis of the code executed in your terminal or exported to a txt or html file. \n\nIt is not advised to use this analyzer in a big project as the output won't fit in your terminal; though, using an export\nmethod call to see the code in a file might be more useful/helpful.\n\n### Requirements:\n    python>=3.7\n    rich\n    colorama\n    pandas\n\n### Example:\n\n    from code_analyzer import CodeAnalyzer\n    \n    code_analyzer = CodeAnalyzer()  # Initialize analyzer\n    code_analyzer.start()\n    \n    # Comment that will be displayed on the next line\n    code_analyzer.record_comment_for_interpretable_next(\"Function definition here!\")\n    \n    \n    def recursive(depth: int) -> int:\n        # Comment that will be displayed on the previous line\n        code_analyzer.record_comment_for_interpretable_previous({\"__depth\": depth})\n        if depth <= 0:\n            code_analyzer.record_comment_for_interpretable_next({\"Final depth\": depth})\n            return depth\n    \n        return recursive(depth - 1)\n    \n    \n    code_analyzer.record_comment_for_interpretable_next(\"This is where the fun begins\")\n    recursive(5)\n    \n    code_analyzer.stop()\n    code_analyzer.print()\n    \n    # code_analyzer.get_code_analyzer_printer().print_debug()\n    code_analyzer.get_code_analyzer_printer().export_to_txt()\n    \n    # code_analyzer.get_code_analyzer_printer().print_rich()  # export_rich_to_html prints to console by default\n    code_analyzer.get_code_analyzer_printer().export_rich_to_html()\n    \n    Or just look at the other examples in examples folder.\n\n\n### Output\n![example_recursive.png](https://raw.githubusercontent.com/josephedradan/code_analyzer/main/images/example_recursive.png)\n\n## [Rich output html](https://htmlpreview.github.io/?https://github.com/josephedradan/code_analyzer/blob/main/examples/example_recursive_code_analysis_rich.html)\n### Notes\n\nIn the output of a print (Such as in the image above):\n\n* Blue foreground code is a callable's definition.\n* Green foreground code is a callable being executed.\n* Red foreground text are {Variable: value} pairs found in between the `{}` brackets that are new to the current interpretable relative to its scope. \n* Purple foreground text are (arguments) found in between the `()` brackets passed to the method calls below:\n    * .record_comment_for_interpretable_next(...) \n    * .record_comment_for_interpretable_previous(...)\n    \nIn the output of a rich export (such as the .html files in the examples folder):\n\n* Blue background code is a callable's definition.\n* Green background code is a callable being executed.\n* Orange foreground text are {Variable: value} pairs found in between the {} brackets that are new to the current interpretable relative to its scope. \n* Red foreground text are (arguments) found in between the () brackets passed to the method calls below:\n    * .record_comment_for_interpretable_next(...) \n    * .record_comment_for_interpretable_previous(...)\n\n__IF YOU SEE CODE THAT DOESN'T SEEM TO BE CODE THAT YOU SHOULD BE ANALYZING WHEN USING TYPE HINTING, ADD THE \nIMPORT BELOW TO THE TOP OF THE FILE TO POSSIBLY REMOVE IT__\n\n    from __future__ import annotations\n\n### Installation\n    pip install python-code-analyzer\n\n__TODO:__\n* Fancy visualizer\n* Memory usage?\n* Timing code?\n* profiler (Time and calls amount)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/josephedradan/code_analyzer",
            "keywords": "python,analyzer,debugger,python code analyzer,python analyzer",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "python-code-analyzer",
            "package_url": "https://pypi.org/project/python-code-analyzer/",
            "platform": null,
            "project_url": "https://pypi.org/project/python-code-analyzer/",
            "project_urls": {
                "Homepage": "https://github.com/josephedradan/code_analyzer"
            },
            "release_url": "https://pypi.org/project/python-code-analyzer/1.0.7/",
            "requires_dist": [
                "colorama",
                "pandas",
                "rich",
                "mypy ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "tox ; extra == 'testing'"
            ],
            "requires_python": ">=3.7",
            "summary": "A python code analyzer that high jacks the current settrace function to analyze executed code.",
            "version": "1.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16111027,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0a64e57176b94c3570fc6c133be4225f",
                    "sha256": "97e0e764f3d219e3de3d96ad80e8971df8f98f3a722fd3079f57a24a346718f7"
                },
                "downloads": -1,
                "filename": "python_code_analyzer-1.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0a64e57176b94c3570fc6c133be4225f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 36290,
                "upload_time": "2022-12-15T09:26:26",
                "upload_time_iso_8601": "2022-12-15T09:26:26.230094Z",
                "url": "https://files.pythonhosted.org/packages/a7/70/2b75089ed938e55583cf1622291a3708f552e9e796920b994bd0b21de171/python_code_analyzer-1.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3e7d834adfcdcebede7631e63ee86c41",
                    "sha256": "bad632494a31bbbd4f5d63aa853512357cb5ed302e3e86dafa07961c49e4681e"
                },
                "downloads": -1,
                "filename": "python_code_analyzer-1.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "3e7d834adfcdcebede7631e63ee86c41",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 33905,
                "upload_time": "2022-12-15T09:26:27",
                "upload_time_iso_8601": "2022-12-15T09:26:27.874324Z",
                "url": "https://files.pythonhosted.org/packages/94/d7/8a05f1e624da00d546a39daa633ba1cff76675703c057d43e0b41e20ff8f/python_code_analyzer-1.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}