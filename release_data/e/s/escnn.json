{
    "0.1": {
        "info": {
            "author": "Gabriele Cesa",
            "author_email": "cesa.gabriele@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/QUVA-Lab/escnn/archive/v0.1.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUVA-Lab/escnn",
            "keywords": "pytorch,cnn,convolutional-networksequivariant,isometries",
            "license": "BSD 3-Clause Clear",
            "maintainer": "",
            "maintainer_email": "",
            "name": "escnn",
            "package_url": "https://pypi.org/project/escnn/",
            "platform": null,
            "project_url": "https://pypi.org/project/escnn/",
            "project_urls": {
                "Download": "https://github.com/QUVA-Lab/escnn/archive/v0.1.tar.gz",
                "Homepage": "https://github.com/QUVA-Lab/escnn"
            },
            "release_url": "https://pypi.org/project/escnn/0.1/",
            "requires_dist": [
                "autograd",
                "pymanopt",
                "joblib",
                "lie-learn",
                "scipy",
                "numpy",
                "torch"
            ],
            "requires_python": ">=3.7",
            "summary": "E(n)-Equivariant CNNs Library for PyTorch",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14524907,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c0fa8bb27daafd1005fd99b671d5943f",
                    "sha256": "3fc7f5f0e0961254bf327de3decbcd4f2e2d1195facc376f72774ddfa4a80163"
                },
                "downloads": -1,
                "filename": "escnn-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c0fa8bb27daafd1005fd99b671d5943f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 337511,
                "upload_time": "2022-03-20T00:51:52",
                "upload_time_iso_8601": "2022-03-20T00:51:52.073505Z",
                "url": "https://files.pythonhosted.org/packages/fc/fa/66f1a65f83f241d722d5dbd60a8f82c0ca3dc8d8ead87ad679c7976433f4/escnn-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6af207c7485a267f9787019361a7b272",
                    "sha256": "a616705e38385324b820a4b4d30c75c9d5b3bc11af4b2892b6827d5b1eb5f0e8"
                },
                "downloads": -1,
                "filename": "escnn-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "6af207c7485a267f9787019361a7b272",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 228469,
                "upload_time": "2022-03-20T00:51:54",
                "upload_time_iso_8601": "2022-03-20T00:51:54.716121Z",
                "url": "https://files.pythonhosted.org/packages/d4/17/c1d1778cafb30fe8a4d88835e38438628c25d595a9399798a1f84d538218/escnn-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Gabriele Cesa",
            "author_email": "cesa.gabriele@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/QUVA-Lab/escnn/archive/v0.1.1.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUVA-Lab/escnn",
            "keywords": "pytorch,cnn,convolutional-networksequivariant,isometries",
            "license": "BSD 3-Clause Clear",
            "maintainer": "",
            "maintainer_email": "",
            "name": "escnn",
            "package_url": "https://pypi.org/project/escnn/",
            "platform": null,
            "project_url": "https://pypi.org/project/escnn/",
            "project_urls": {
                "Download": "https://github.com/QUVA-Lab/escnn/archive/v0.1.1.tar.gz",
                "Homepage": "https://github.com/QUVA-Lab/escnn"
            },
            "release_url": "https://pypi.org/project/escnn/0.1.1/",
            "requires_dist": [
                "autograd",
                "pymanopt",
                "joblib",
                "lie-learn",
                "scipy",
                "numpy",
                "torch"
            ],
            "requires_python": ">=3.7",
            "summary": "E(n)-Equivariant CNNs Library for PyTorch",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14524907,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9449a5d8388c6e11690f85800b4a59c7",
                    "sha256": "52d88b83f8a04b95781f935a6dd43504b4a65bb4eb4cbc77107fefc7f8ab73fd"
                },
                "downloads": -1,
                "filename": "escnn-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9449a5d8388c6e11690f85800b4a59c7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 337536,
                "upload_time": "2022-04-01T11:46:00",
                "upload_time_iso_8601": "2022-04-01T11:46:00.111613Z",
                "url": "https://files.pythonhosted.org/packages/38/b2/bbe7676f951a2ac4d5915ba52a4a2988e305b13721f931675a557d19ddad/escnn-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "132b00213f3fa8b6dfbb147000298826",
                    "sha256": "5cf75b164deb9925571731512bc06957447b973b519ee974e9ab41dcde33a985"
                },
                "downloads": -1,
                "filename": "escnn-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "132b00213f3fa8b6dfbb147000298826",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 228537,
                "upload_time": "2022-04-01T11:46:02",
                "upload_time_iso_8601": "2022-04-01T11:46:02.087518Z",
                "url": "https://files.pythonhosted.org/packages/8d/d7/f69f228fbdbf9b3d9666f9bccc4923bd9b47766a2be3244deeb7ee0c7bea/escnn-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Gabriele Cesa",
            "author_email": "cesa.gabriele@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/QUVA-Lab/escnn/archive/v0.1.2.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUVA-Lab/escnn",
            "keywords": "pytorch,cnn,convolutional-networksequivariant,isometries",
            "license": "BSD 3-Clause Clear",
            "maintainer": "",
            "maintainer_email": "",
            "name": "escnn",
            "package_url": "https://pypi.org/project/escnn/",
            "platform": null,
            "project_url": "https://pypi.org/project/escnn/",
            "project_urls": {
                "Download": "https://github.com/QUVA-Lab/escnn/archive/v0.1.2.tar.gz",
                "Homepage": "https://github.com/QUVA-Lab/escnn"
            },
            "release_url": "https://pypi.org/project/escnn/0.1.2/",
            "requires_dist": [
                "autograd",
                "pymanopt",
                "joblib",
                "lie-learn",
                "scipy",
                "numpy",
                "torch"
            ],
            "requires_python": ">=3.7",
            "summary": "E(n)-Equivariant CNNs Library for PyTorch",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14524907,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "db133b99ecd7db7c1722a2cb8c4d38d5",
                    "sha256": "c3566dd9c4190d745bb9fe7e7c7e9510491602a14fb413f30df9c94f374f75dd"
                },
                "downloads": -1,
                "filename": "escnn-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "db133b99ecd7db7c1722a2cb8c4d38d5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 341310,
                "upload_time": "2022-07-11T21:20:49",
                "upload_time_iso_8601": "2022-07-11T21:20:49.530074Z",
                "url": "https://files.pythonhosted.org/packages/4c/8d/00486f39db19a81ec1536a964e268a02965b4ca2cc115a737e60a680709f/escnn-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b5a9176b2f3137983573be52f60d64ac",
                    "sha256": "4e81f48d199cfbdc88419bb7c68d0ccd406d1a2220eb7ec95f97d5fbd1da71f8"
                },
                "downloads": -1,
                "filename": "escnn-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "b5a9176b2f3137983573be52f60d64ac",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 230906,
                "upload_time": "2022-07-11T21:20:51",
                "upload_time_iso_8601": "2022-07-11T21:20:51.436886Z",
                "url": "https://files.pythonhosted.org/packages/97/60/c0392d3f8451deaa49674c3b0c94b00e0c50a3ce4e06529aed0abd91d7ac/escnn-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Gabriele Cesa",
            "author_email": "cesa.gabriele@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/QUVA-Lab/escnn/archive/v0.1.3.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUVA-Lab/escnn",
            "keywords": "pytorch,cnn,convolutional-networksequivariant,isometries",
            "license": "BSD 3-Clause Clear",
            "maintainer": "",
            "maintainer_email": "",
            "name": "escnn",
            "package_url": "https://pypi.org/project/escnn/",
            "platform": null,
            "project_url": "https://pypi.org/project/escnn/",
            "project_urls": {
                "Download": "https://github.com/QUVA-Lab/escnn/archive/v0.1.3.tar.gz",
                "Homepage": "https://github.com/QUVA-Lab/escnn"
            },
            "release_url": "https://pypi.org/project/escnn/0.1.3/",
            "requires_dist": [
                "autograd",
                "pymanopt",
                "joblib",
                "lie-learn",
                "scipy",
                "numpy",
                "torch"
            ],
            "requires_python": ">=3.7",
            "summary": "E(n)-Equivariant CNNs Library for PyTorch",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14524907,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fd25a692639c4e186689b1e6686586af",
                    "sha256": "40fce15fb7ab9230e4f6b70135b212682bb37129530fabc3367f900115f0f3e0"
                },
                "downloads": -1,
                "filename": "escnn-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fd25a692639c4e186689b1e6686586af",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 341482,
                "upload_time": "2022-07-14T21:24:51",
                "upload_time_iso_8601": "2022-07-14T21:24:51.351817Z",
                "url": "https://files.pythonhosted.org/packages/c0/9c/1dd2116b9378f3bceefe0d353bc46245b7c77efb4b6c30e30d74daa68fc9/escnn-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f84b4789323fc2755aa28eda51391263",
                    "sha256": "a362d2bc2b53ee227d6617670cec0d6095d00607e3ba029573df490944491ff4"
                },
                "downloads": -1,
                "filename": "escnn-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "f84b4789323fc2755aa28eda51391263",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 230936,
                "upload_time": "2022-07-14T21:24:52",
                "upload_time_iso_8601": "2022-07-14T21:24:52.972423Z",
                "url": "https://files.pythonhosted.org/packages/38/67/1de6014c1e3d17b74b30942713fe62d148554a88de091e77e6bd342a06ba/escnn-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "Gabriele Cesa",
            "author_email": "cesa.gabriele@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "\nE(n)-equivariant Steerable CNNs (*escnn*)\n--------------------------------------------------------------------------------\n**[Documentation](https://quva-lab.github.io/escnn/)** | **[Paper ICLR 22](https://openreview.net/forum?id=WE4qe9xlnQw)** | **[Paper NeurIPS 19](https://arxiv.org/abs/1911.08251)** | **[e2cnn](<https://github.com/QUVA-Lab/e2cnn>) library** | **[e2cnn experiments](https://github.com/QUVA-Lab/e2cnn_experiments)** | **[Thesis](https://gabri95.github.io/Thesis/thesis.pdf)** \n\n*escnn* is a [PyTorch](https://pytorch.org/) extension for equivariant deep learning.\n*escnn* is the successor of the [e2cnn](<https://github.com/QUVA-Lab/e2cnn>) library, which only supported planar isometries.\nInstead, *escnn* supports steerable CNNs equivariant to both 2D and 3D isometries, as well as equivariant MLPs.\n\n*Equivariant neural networks* guarantee a specified transformation behavior of their feature spaces under transformations of their input.\nFor instance, classical convolutional neural networks (*CNN*s) are by design equivariant to translations of their input.\nThis means that a translation of an image leads to a corresponding translation of the network's feature maps.\nThis package provides implementations of neural network modules which are equivariant under all *isometries* E(2) of the image plane \n![my equation](https://chart.apis.google.com/chart?cht=tx&chs=19&chl=\\mathbb{R}^2)\nand all *isometries* E(3) of the 3D space\n![my equation](https://chart.apis.google.com/chart?cht=tx&chs=19&chl=\\mathbb{R}^3)\n, that is, under *translations*, *rotations* and *reflections* (and can, potentially, be extended to all isometries E(n) of \n![my equation](https://chart.apis.google.com/chart?cht=tx&chs=19&chl=\\mathbb{R}^n)\n).\nIn contrast to conventional CNNs, E(n)-equivariant models are guaranteed to generalize over such transformations, and are therefore more data efficient.\n\nThe feature spaces of E(n)-equivariant Steerable CNNs are defined as spaces of *feature fields*, being characterized by their transformation law under rotations and reflections.\nTypical examples are scalar fields (e.g. gray-scale images or temperature fields) or vector fields (e.g. optical flow or electromagnetic fields).\n\n![feature field examples](https://github.com/QUVA-Lab/escnn/raw/master/visualizations/feature_fields.png)\n\nInstead of a number of channels, the user has to specify the field *types* and their *multiplicities* in order to define a feature space.\nGiven a specified input- and output feature space, our ``R2conv`` and ``R3conv`` modules instantiate the *most general* convolutional mapping between them.\nOur library provides many other equivariant operations to process feature fields, including nonlinearities, mappings to produce invariant features, batch normalization and dropout.\nFeature fields are represented by ``GeometricTensor`` objects, which wrap a ``torch.Tensor`` with the corresponding transformation law.\nAll equivariant operations perform a dynamic type-checking in order to guarantee a geometrically sound processing of the feature fields.\n\n\nTo parameterize steerable kernel spaces, equivariant to an arbitrary compact group G,\nin our [paper](https://openreview.net/forum?id=WE4qe9xlnQw), we generalize the Wigner-Eckart theorem in\n[A Wigner-Eckart Theorem for Group Equivariant Convolution Kernels](https://arxiv.org/abs/2010.10952)\nfrom G-homogeneous spaces to more general spaces X carrying a G-action. \nIn short, our method leverages a G-steerable basis for unconstrained scalar filters over the whole Euclidean space \n![my equation](https://chart.apis.google.com/chart?cht=tx&chs=19&chl=\\mathbb{R}^n) \nto generate steerable kernel spaces with arbitrary input and output field *types*.\nFor example, the left side of the next image shows two elements of a SO(2)-steerable basis for functions on\n![my equation](https://chart.apis.google.com/chart?cht=tx&chs=19&chl=X=\\mathbb{R}^2) which are used to generate two \nbasis elements for SO(2)-equivariant steerable kernels on the right.\nIn particular, the steerable kernels considered map a frequency l=1 vector field (2 channels) to a frequency J=2 \nvector field (2 channels).\n\n![we_theorem_example](https://github.com/QUVA-Lab/escnn/raw/master/visualizations/wigner_eckart_theorem_2.png)\n\n\nE(n)-Equivariant Steerable CNNs unify and generalize a wide range of isometry equivariant CNNs in one single framework.\nExamples include:\n- [Group Equivariant Convolutional Networks](https://arxiv.org/abs/1602.07576)\n- [Harmonic Networks: Deep Translation and Rotation Equivariance](https://arxiv.org/abs/1612.04642)\n- [Steerable CNNs](https://arxiv.org/abs/1612.08498)\n- [Rotation equivariant vector field networks](https://arxiv.org/abs/1612.09346)\n- [Learning Steerable Filters for Rotation Equivariant CNNs](https://arxiv.org/abs/1711.07289)\n- [HexaConv](https://arxiv.org/abs/1803.02108)\n- [Roto-Translation Covariant Convolutional Networks for Medical Image Analysis](https://arxiv.org/abs/1804.03393)\n- [3D Steesable CNNs](https://arxiv.org/abs/1807.02547)\n- [Tensor Field Networks](https://arxiv.org/abs/1802.08219)\n- [Cormorant: Covariant Molecular Neural Networks](https://arxiv.org/abs/1906.04015)\n- [3D GCNNs for Pulmonary Nodule Detection](https://arxiv.org/abs/1804.04656)\n\n\nFor more details, we refer to our ICLR 2022 paper [A Program to Build E(N)-Equivariant Steerable CNNs](https://openreview.net/forum?id=WE4qe9xlnQw)\nand our NeurIPS 2019 paper [General E(2)-Equivariant Steerable CNNs](https://arxiv.org/abs/1911.08251).\n\n--------------------------------------------------------------------------------\n\nThe library is structured into four subpackages with different high-level features:\n\n| Component                                                                   | Description                                                      |\n|-----------------------------------------------------------------------------|------------------------------------------------------------------|\n| [**escnn.group**](https://github.com/QUVA-Lab/escnn/blob/master/group/)     | implements basic concepts of *group* and *representation* theory |\n| [**escnn.kernels**](https://github.com/QUVA-Lab/escnn/blob/master/kernels/) | solves for spaces of equivariant convolution kernels             |\n| [**escnn.gspaces**](https://github.com/QUVA-Lab/escnn/blob/master/gspaces/) | defines the Euclidean spaces and their symmetries                |\n| [**escnn.nn**](https://github.com/QUVA-Lab/escnn/blob/master/nn/)           | contains equivariant modules to build deep neural networks       |\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\n## Demo\n\nSince E(2)-steerable CNNs are equivariant under rotations and reflections, their inference is independent from the choice of image orientation.\nThe visualization below demonstrates this claim by feeding rotated images into a randomly initialized E(2)-steerable CNN (left).\nThe middle plot shows the equivariant transformation of a feature space, consisting of one scalar field (color-coded) and one vector field (arrows), after a few layers.\nIn the right plot we transform the feature space into a comoving reference frame by rotating the response fields back (stabilized view).\n\n![Equivariant CNN output](https://github.com/QUVA-Lab/escnn/raw/master/visualizations/vectorfield.gif)\n\nThe invariance of the features in the comoving frame validates the rotational equivariance of E(2)-steerable CNNs empirically.\nNote that the fluctuations of responses are discretization artifacts due to the sampling of the image on a pixel grid, which does not allow for exact continuous rotations.\n<!-- Note that the fluctuations of responses are due to discretization artifacts coming from the  -->\n\nFor comparison, we show a feature map response of a conventional CNN for different image orientations below.\n\n![Conventional CNN output](https://github.com/QUVA-Lab/escnn/raw/master/visualizations/conventional_cnn.gif)\n\nSince conventional CNNs are not equivariant under rotations, the response varies randomly with the image orientation.\nThis prevents CNNs from automatically generalizing learned patterns between different reference frames.\n\n\n## Experimental results\n\nE(n)-steerable convolutions can be used as a drop in replacement for the conventional convolutions used in CNNs.\nWhile using the same base architecture (with similar memory and computational cost), \nthis leads to significant performance boosts compared to CNN baselines (values are test accuracies in percent).\n\n| model        | Rotated ModelNet10 |\n|--------------|--------------------|\n| CNN baseline | 82.5       \u00b1 1.4   |\n| SO(2)-CNN    | 86.9       \u00b1 1.9   |\n| Octa-CNN     | 89.7       \u00b1 0.6   |\n| Ico-CNN      | 90.0       \u00b1 0.6   |\n| SO(3)-CNN    | 89.5       \u00b1 1.0   |\n\nAll models share approximately the same architecture and width.\nFor more details we refer to our [paper](https://openreview.net/forum?id=WE4qe9xlnQw).\n\nThis library supports E(2)-steerable CNNs implemented in our previous [e2cnn](<https://github.com/QUVA-Lab/e2cnn>) library as a special case; \nwe include some representative results in the 2D setting from there:\n\n model        | CIFAR-10                | CIFAR-100                | STL-10             |\n ------------ | ----------------------- | ------------------------ | ------------------ |\n CNN baseline | 2.6 &nbsp; \u00b1 0.1 &nbsp; | 17.1 &nbsp; \u00b1 0.3 &nbsp; |       12.74 \u00b1 0.23 |\n E(2)-CNN *   | 2.39       \u00b1 0.11       | 15.55       \u00b1 0.13       |       10.57 \u00b1 0.70 |\n E(2)-CNN     | 2.05       \u00b1 0.03       | 14.30       \u00b1 0.09       | &nbsp; 9.80 \u00b1 0.40 |\n\nWhile using the same training setup (*no further hyperparameter tuning*) used for the CNN baselines, the equivariant models achieve significantly better results (values are test errors in percent).\nFor a fair comparison, the models without * are designed such that the number of parameters of the baseline is approximately preserved while models with * preserve the number of channels, and hence compute.\nFor more details we refer to our previous *e2cnn* [paper](https://arxiv.org/abs/1911.08251).\n\n\n## Getting Started\n\n*escnn* is easy to use since it provides a high level user interface which abstracts most intricacies of group and representation theory away.\nThe following code snippet shows how to perform an equivariant convolution from an RGB-image to 10 *regular* feature fields (corresponding to a\n[group convolution](https://arxiv.org/abs/1602.07576)).\n\n```python3\nfrom escnn import gspaces                                          #  1\nfrom escnn import nn                                               #  2\nimport torch                                                       #  3\n                                                                   #  4\nr2_act = gspaces.rot2dOnR2(N=8)                                    #  5\nfeat_type_in  = nn.FieldType(r2_act,  3*[r2_act.trivial_repr])     #  6\nfeat_type_out = nn.FieldType(r2_act, 10*[r2_act.regular_repr])     #  7\n                                                                   #  8\nconv = nn.R2Conv(feat_type_in, feat_type_out, kernel_size=5)       #  9\nrelu = nn.ReLU(feat_type_out)                                      # 10\n                                                                   # 11\nx = torch.randn(16, 3, 32, 32)                                     # 12\nx = feat_type_in(x)                                                # 13\n                                                                   # 14\ny = relu(conv(x))                                                  # 15\n```\n\nLine 5 specifies the symmetry group action on the image plane\n![my equation](https://chart.apis.google.com/chart?cht=tx&chs=19&chl=\\mathbb{R}^2)\nunder which the network should be equivariant.\nWe choose the \n[*cyclic group*](https://en.wikipedia.org/wiki/Cyclic_group)\n C<sub>8</sub>, which describes discrete rotations by multiples of 2\u03c0/8.\nLine 6 specifies the input feature field types.\nThe three color channels of an RGB image are thereby to be identified as three independent scalar fields, which transform under the\n[*trivial representation*](https://en.wikipedia.org/wiki/Trivial_representation)\n of C<sub>8</sub> (when the input image is rotated, the RGB values do not change; compare the scalar and vector fields in the first image above).\nSimilarly, the output feature space in line 7 is specified to consist of 10 feature fields which transform under the\n[*regular representation*](https://en.wikipedia.org/wiki/Regular_representation)\nof C<sub>8</sub>.\nThe C<sub>8</sub>-equivariant convolution is then instantiated by passing the input and output type as well as the kernel size to the constructor (line 9).\nLine 10 instantiates an equivariant ReLU nonlinearity which will operate on the output field and is therefore passed the output field type.\n\nLines 12 and 13 generate a random minibatch of RGB images and wrap them into a `nn.GeometricTensor` to associate them\nwith their correct field type `feat_type_in`.\nThe equivariant modules process the geometric tensor in line 15.\nEach module is thereby checking whether the geometric tensor passed to them satisfies the expected transformation law.\n\nBecause the parameters do not need to be updated anymore at test time, after training, any equivariant network can be \nconverted into a pure PyTorch model with no additional computational overhead in comparison to conventional CNNs.\nThe code currently supports the automatic conversion of a few commonly used modules through the `.export()` method; \ncheck the [documentation](https://quva-lab.github.io/escnn/api/escnn.nn.html) for more details.\n\nA hands-on tutorial, introducing the basic functionality of *escnn*, is provided in [introduction.ipynb](https://github.com/QUVA-Lab/escnn/blob/master/examples/introduction.ipynb).\nCode for training and evaluating a simple model on the [*rotated MNIST*](https://sites.google.com/a/lisa.iro.umontreal.ca/public_static_twiki/variations-on-the-mnist-digits) dataset is given in [model.ipynb](https://github.com/QUVA-Lab/escnn/blob/master/examples/model.ipynb).\nNote that *escnn* also supports equivariant MLPs; see [mlp.ipynb](https://github.com/QUVA-Lab/escnn/blob/master/examples/mlp.ipynb) for some examples.\nCheck also the [tutorial](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/DL2/Geometric_deep_learning/tutorial2_steerable_cnns.html) on Steerable CNNs using our library in the *Deep Learning 2* course at the University of Amsterdam.\n\nMore complex equivariant *Wide Resnet* models are implemented in [e2wrn.py](https://github.com/QUVA-Lab/escnn/blob/master/examples/e2wrn.py).\nTo try a model which is equivariant under reflections call:\n```\ncd examples\npython e2wrn.py\n```\nA version of the same model which is simultaneously equivariant under reflections and rotations of angles multiple of 90 degrees can be run via:\n```\npython e2wrn.py --rot90\n```\n\n\n## Dependencies\n\nThe library is based on Python3.7\n\n```\ntorch>=1.3\nnumpy\nscipy\nlie_learn\njoblib\n```\nOptional:\n```\ntorch-geometric\npymanopt\nautograd\n```\n\n## Installation\n\nYou can install the latest [release](https://github.com/QUVA-Lab/escnn/releases) as\n\n```\npip install escnn\n```\n\nor you can clone this repository and manually install it with\n```\npip install git+https://github.com/QUVA-Lab/escnn\n```\n\n\n\n\n## Cite\n\nThe development of this library was part of the work done for our papers\n[A Program to Build E(N)-Equivariant Steerable CNNs](https://openreview.net/forum?id=WE4qe9xlnQw)\nand [General E(2)-Equivariant Steerable CNNs](https://arxiv.org/abs/1911.08251).\nPlease cite these works if you use our code:\n\n```\n\n   @inproceedings{cesa2022a,\n        title={A Program to Build {E(N)}-Equivariant Steerable {CNN}s },\n        author={Gabriele Cesa and Leon Lang and Maurice Weiler},\n        booktitle={International Conference on Learning Representations},\n        year={2022},\n        url={https://openreview.net/forum?id=WE4qe9xlnQw}\n    }\n    \n   @inproceedings{e2cnn,\n       title={{General E(2)-Equivariant Steerable CNNs}},\n       author={Weiler, Maurice and Cesa, Gabriele},\n       booktitle={Conference on Neural Information Processing Systems (NeurIPS)},\n       year={2019},\n   }\n```\n\nFeel free to [contact us](mailto:cesa.gabriele@gmail.com).\n\n## License\n\n*escnn* is distributed under BSD Clear license. See LICENSE file.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/QUVA-Lab/escnn/archive/v0.1.4.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUVA-Lab/escnn",
            "keywords": "pytorch,cnn,convolutional-networksequivariant,isometries",
            "license": "BSD 3-Clause Clear",
            "maintainer": "",
            "maintainer_email": "",
            "name": "escnn",
            "package_url": "https://pypi.org/project/escnn/",
            "platform": null,
            "project_url": "https://pypi.org/project/escnn/",
            "project_urls": {
                "Download": "https://github.com/QUVA-Lab/escnn/archive/v0.1.4.tar.gz",
                "Homepage": "https://github.com/QUVA-Lab/escnn"
            },
            "release_url": "https://pypi.org/project/escnn/0.1.4/",
            "requires_dist": [
                "autograd",
                "pymanopt",
                "joblib",
                "lie-learn",
                "scipy",
                "numpy",
                "torch"
            ],
            "requires_python": ">=3.7",
            "summary": "E(n)-Equivariant CNNs Library for PyTorch",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14524907,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "257ee697f386b6ab9510825b14a76d5d",
                    "sha256": "e68c104fbd9533689665dba628496f5ce81505898cddb63216f1f66a8fd207fd"
                },
                "downloads": -1,
                "filename": "escnn-0.1.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "257ee697f386b6ab9510825b14a76d5d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 341469,
                "upload_time": "2022-07-14T21:55:09",
                "upload_time_iso_8601": "2022-07-14T21:55:09.491665Z",
                "url": "https://files.pythonhosted.org/packages/cf/48/5bd2fe31ea23e1b152f33047c4fece2b52991cc894e2a88b49242e6ccc96/escnn-0.1.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "07a375225af6713661cc0650349a6c04",
                    "sha256": "13f9cd826610d7a32d11d2a69c953760fa5fbd98270147c37f76ca24e3eeb248"
                },
                "downloads": -1,
                "filename": "escnn-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "07a375225af6713661cc0650349a6c04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 230918,
                "upload_time": "2022-07-14T21:55:11",
                "upload_time_iso_8601": "2022-07-14T21:55:11.137352Z",
                "url": "https://files.pythonhosted.org/packages/0f/c9/d992c718e742c8e26440661e8e18e9a59241b210d0e05698ce5c225322e7/escnn-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}