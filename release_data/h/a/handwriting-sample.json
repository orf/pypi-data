{
    "1.0.0": {
        "info": {
            "author": "Brain Diseases Analysis Laboratory",
            "author_email": "mucha@vut.cz",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: PyPy"
            ],
            "description": "# Handwriting Sample \r\n\r\n![GitHub last commit](https://img.shields.io/github/last-commit/BDALab/handwriting-sample)\r\n![GitHub issues](https://img.shields.io/github/issues/BDALab/handwriting-sample)\r\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/BDALab/handwriting-sample)\r\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/handwriting-sample)\r\n![GitHub top language](https://img.shields.io/github/languages/top/BDALab/handwriting-sample)\r\n![PyPI - License](https://img.shields.io/pypi/l/handwriting-sample)\r\n\r\nThis package provides a [PyPi-installable](https://pypi.org/project/handwriting-sample/) module for the manipulation \r\nwith the so-called online handwriting data (handwriting with dynamic information in form of the time-series) acquired \r\nby Wacom Digitizing Tablets. The package implements `HandwritingSample` class enabling fast and easy handwriting \r\ndata-object handling. Handwriting data must consists of 7 following time-series: **x, y, timestamp, pen status, \r\nazimuth, tilt, pressure**. \r\n\r\nMain features:\r\n - data load with validation\r\n   - *.svc, \r\n   - *.json, \r\n   - array \r\n   - pandas dataframe\r\n - unit transformation\r\n   - axis from to mm\r\n   - time to seconds\r\n   - angles to degrees\r\n - simple access and manipulation with time-series\r\n - data storage\r\n\r\nThe package can be used also for data acquired from any other devices if they satisfied the collection of the above list of time-series. \r\n\r\n_The full programming sphinx-generated docs can be seen in [official documentation](https://handwriting-sample.readthedocs.io/en/latest/)_.\r\n\r\n**Contents**:\r\n1. [Installation](#Installation)\r\n2. [Data](#Data)\r\n3. [Examples](#Examples)\r\n4. [License](#License)\r\n5. [Contributors](#Contributors)\r\n\r\n\r\n## Installation\r\n\r\n```\r\npip install handwriting-sample\r\n```\r\n\r\n## Data\r\n### Input data\r\n\r\nInput data must consist of handwriting data in the form of time-series acquired by Wacom Digitizing Tablet. \r\nHowever, other similar devices can be used too, if they satisfy the following data structure:\r\n\r\n- ``x``: X axis \r\n- ``y``: Y axis \r\n- ``time``: timestamp since epoch\r\n- ``pen_status``: pen up or down (0 = up, 1 = down) \r\n- ``azimuth``: azimuth of the pen tip\r\n- ``tilt``: tilt of the pen regarding the tablet surface\r\n- ``pressure``: pressure\r\n\r\n\r\n---\r\nExample of the *.svc database can be found [here](https://bdalab.utko.feec.vutbr.cz/#downloads).\r\n\r\n---\r\n\r\n### Metadata\r\nTo bring more insights for the processed data sample, we support the metadata. Metadata can be read in two forms:\r\n1. (NOT RECOMMENDED) from the file name of SVC file (see [SVC file](#SVC file))\r\n2. from the JSON file, part ``meta_data`` (see [JSON file](#JSON file))\r\n3. from the ``key: value`` dictionary using ``add_meta_data``, once the sample has been loaded \r\n(see [Examples](#Examples))\r\n\r\n### Input data examples\r\n#### SVC file\r\nfull SVC example can be found [here](examples/svc_data)\r\n\r\n```csv\r\n606 \r\n4034 7509 354642400 1 1190 720 10852\r\n4034 7509 354642408 1 1180 700 10997\r\n4150 7582 354642416 1 1170 690 11061\r\n4241 7639 354642423 1 1150 670 11077\r\n4362 7714 354642431 1 1130 650 12085\r\n4513 7810 354642438 1 1120 640 13222\r\n4693 7926 354642446 1 1110 640 14278\r\n...\r\n```\r\nfirst line in SVC represents the number of samples (lines) in SVC file\r\n\r\n**SVC Metadata**\r\n\r\nMetadata are read from the file name with the following convention:\r\n\r\n``SubjectID_DateOfBirth_Gender_TaskNumber_AdministratorName_DateOfAcquisition.svc``\r\n\r\nexample:\r\n\r\nID0025_18-07-2014_M_0007_Doe_12-05-2021.svc\r\n\r\n#### JSON file\r\nfull JSON example can be found [here](examples/json_data/signal.json)\r\n```json\r\n{\r\n  \"meta_data\":\r\n  {\r\n    \"samples_count\": 100,\r\n    \"column_names\": [\"x\", \"y\", \"time\", \"pen_status\", \"azimuth\", \"tilt\", \"pressure\"],\r\n    \"administrator\": \"Doe\",\r\n    \"participant\":\r\n    {\r\n      \"id\": \"BD_1234\",\r\n      \"sex\": \"female\",\r\n      \"birth_date\": \"2002-11-05\",\r\n    },\r\n    \"task_id\": 7,\r\n    ...\r\n  },\r\n  \"data\":\r\n  {\r\n    \"x\":\r\n    [\r\n      52.81, 52.83, 52.855, 52.87, 52.88, 52.89, 52.9, ...\r\n    ],\r\n    \"y\":\r\n    [\r\n      52.81, 52.83, 52.855, 52.87, 52.88, 52.89, 52.9, ...\r\n    ],\r\n    \"time\":\r\n    [\r\n      0.0, 0.007, 0.015, 0.022, 0.03, 0.037, 0.045, ...\r\n    ],\r\n    \"pen_status\":\r\n    [\r\n      1, 1, 1, 1, 1, 1, 1, ...\r\n    ],\r\n    \r\n    \"azimuth\":\r\n    [\r\n      510.0, 510.0, 510.0, 510.0, 510.0, ... \r\n    ],\r\n    \"tilt\":\r\n    [\r\n      520.0, 520.0, 520.0, 520.0, 520.0, ...\r\n    ],\r\n    \"pressure\":\r\n    [\r\n      0.0, 0.01173, 0.022483, 0.035191, 0.056696, ...\r\n    ]\r\n  }\r\n}\r\n```\r\n**JSON Metadata**\r\n\r\nMetadata are read from the ``\"meta_data\"`` section of the JSON file\r\n\r\n\r\n\r\n#### Numpy Array\r\nWhen loading data using numpy array, ensure the proper identification of the time series order.\r\n```python\r\narray = numpy.array([[1,1,1,1,0],\r\n                      [1,2,3,4,5],\r\n                      [1,2,3,4,5],\r\n                      [254651615,254651616,254651617,254651618,254651619],\r\n                      [1,2,3,4,5],\r\n                      [1,2,3,4,5],\r\n                      [10,20,30,40,50]])\r\n\r\ncolumn_names = ['pen_status', 'y', 'x', 'time', 'azimuth', 'tilt', 'pressure']\r\n```\r\n\r\n#### Pandas DataFrame\r\n\r\n```python\r\nx = [1,2,3,4,5]\r\ny = [1,2,3,4,5]\r\ntime = [254651615,254651616,254651617,254651618,254651619]\r\npen_status = [1,2,3,4,5]\r\nazimuth = [1,2,3,4,5]\r\ntilt= [1,2,3,4,5]\r\npressure=[10,20,30,40,50]\r\n\r\npandas.DataFrame(numpy.column_stack([x, y, time, pen_status, azimuth, tilt, pressure]))\r\n\r\ncolumn_names = ['x', 'y', 'time', 'pen_status', 'azimuth', 'tilt', 'pressure']\r\n```\r\n\r\n\r\n\r\n## Handwriting Unit Transformation\r\nThe package supports all data unit transformation:\r\n1. _axis values to mm_: for the axis transformation we need to set a Line-Per-Inch (LPI) or Line-Per-Millimeter (LPMM)\r\n   of \r\n   the device. This value depends on the device type and RAW \r\n      data gathering. \r\n**By default, we are using LPI for conversion**\r\n2. _time to seconds_: from the time since epoch to seconds starting from 0\r\n3. _angles to degree_: for the angle transformation we need to set maximal theoretical value of raw angle range and \r\n   maximal value of angle in degrees based on device capabilities\r\n4. _pressure normalization_: from the RAW pressure values to pressure levels based on device capabilities\r\n\r\nBy default, package uses predefined technical values for \r\n[Wacom Cintiq 16](http://101.wacom.com/UserHelp/en/TOC/DTK-1660.html) tablet:\r\n\r\n| Name | Value  |   \r\n|---|---|\r\n| LPI  |  5080 | \r\n| LPMM |  200 |  \r\n| MAX_PRESSURE_VALUE  |  32767 |  \r\n| PRESSURE_LEVELS  |  8192 |  \r\n| MAX_TILT_VALUE  |  900 |  \r\n| MAX_TILT_DEGREE  |  90 |  \r\n| MAX_AZIMUTH_VALUE  |  3600 |  \r\n| MAX_AZIMUTH_DEGREE  |  360 |  \r\n\r\n---\r\n**NOTE** \r\n\r\nIn case of unit transformation ensure you used a proper technical values regarding your device \r\n\r\n---\r\n\r\n\r\n## Examples\r\n\r\n### Load sample\r\n\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load from svc\r\nsvc_sample = HandwritingSample.from_svc(path=\"path_to_svc\")\r\nprint(svc_sample)\r\n```\r\n### Load sample from JSON and print some time-series\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load from json\r\njson_sample = HandwritingSample.from_json(path=\"path_to_json\")\r\nprint(json_sample)\r\n\r\n# print x \r\nprint(json_sample.x)\r\n# print y\r\nprint(json_sample.y)\r\n# print trajectory\r\nprint(json_sample.xy)\r\n# print pressure\r\nprint(json_sample.pressure)\r\n```\r\n\r\n### Strokes \r\nStroke is one segment of data between the position change of pen up/down.\r\n\r\nReturn value for all the following methods is tuple with the identification of the movement and object of the \r\n``HandwritingSample`` class.  \r\n\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load sample\r\nsample = HandwritingSample.from_json(path=\"path_to_json\")\r\n\r\n# get all strokes\r\nstrokes = sample.get_strokes()\r\n\r\n# get on surface strokes\r\nstroke_on_surface = sample.get_on_surface_strokes()\r\n\r\n# get in air strokes\r\nstrokes_in_air = sample.get_in_air_strokes()\r\n```\r\n\r\nor you just can get the data on surface or in air\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load sample\r\nsample = HandwritingSample.from_json(path=\"path_to_json\")\r\n\r\n# get movement on surface\r\non_surface_data = sample.get_on_surface_data()\r\n\r\n# get movement in air\r\nin_air_data = sample.get_in_air_data()\r\n```\r\n\r\n### Unit Transformation\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load sample\r\nsample = HandwritingSample.from_json(path=\"path_to_json\")\r\n\r\n# transform axis\r\nsample.transform_axis_to_mm(conversion_type=HandwritingSample.transformer.LPI,\r\n                            lpi_value=5080,\r\n                            shift_to_zero=True)\r\n\r\n# transform time to seconds\r\nsample.transform_time_to_seconds()\r\n\r\n# transform angle\r\nsample.transform_angle_to_degree(angle=HandwritingSample.TILT)\r\n```\r\n\r\nor you can transform all unit at once\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load sample\r\nsample = HandwritingSample.from_json(path=\"path_to_json\")\r\n\r\n# transform axis\r\nsample.transform_all_units()\r\n```\r\n### Store Data\r\nIf you provide a metadata the filename will be generated automatically, \r\notherwise you need to select a filename. \r\nMoreover, you can also store the original data only.\r\n\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load sample from svc\r\nsample = HandwritingSample.from_svc(path=\"path_to_svc\")\r\n\r\n# store data to json\r\nsample.to_json(path=\"path_to_storage\")\r\n\r\n# store original raw data to json\r\nsample.to_json(path=\"path_to_storage\", store_original_data=True)\r\n```\r\n\r\n### Transform RAW database to database with transformed units\r\nFor example if you have a database of SVC files with RAW data,\r\nand you want to transform handwriting units of all data, add some metadata, \r\nand store it to JSON.  \r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# Prepare metadata\r\nmeta_data = { \"protocol_id\": \"pd_protocol_2018\",\r\n              \"device_type\": \"Wacom Cinitq\",\r\n              \"device_driver\": \"2.1.0\",\r\n              \"wintab_version\": \"1.2.5\",\r\n              \"lpi\": 1024,\r\n              \"time_series_ranges\": {\r\n                \"x\": [0, 1025],\r\n                \"y\": [0, 1056],\r\n                \"azimuth\": [0, 1000],\r\n                \"tilt\": [0, 1000],\r\n                \"pressure\": [0, 2048]}}             \r\n\r\n# Go for each file in file list\r\nfor file in file_paths:\r\n   # load sample from svc\r\n   sample = HandwritingSample.from_svc(path=file)\r\n   \r\n   # add metadata\r\n   sample.add_meta_data(meta_data=meta_data)\r\n   \r\n   # transform all units\r\n   sample.transform_all_units()\r\n   \r\n   # store original raw data to json\r\n   sample.to_json(path=\"path_to_storage\")\r\n```\r\n\r\n### Data visualisation\r\nPackage supports also a visualisations e.g.:\r\n```python\r\nfrom handwriting_sample import HandwritingSample\r\n\r\n# load sample from svc\r\nsample = HandwritingSample.from_svc(path=\"path_to_svc\")\r\n\r\n# transform all units\r\nsample.transform_all_units()\r\n\r\n# Show separate movements\r\nsample.plot_separate_movements()\r\n\r\n# Show in air data\r\nsample.plot_in_air()\r\n\r\n# Show all data\r\nsample.plot_all_data()\r\n```\r\n\r\n## License\r\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\r\n\r\n## Contributors\r\n\r\nThis package is developed by the members of [Brain Diseases Analysis Laboratory](http://bdalab.utko.feec.vutbr.cz/). For more information, please contact the head of the laboratory Jiri Mekyska <mekyska@vut.cz> or the main developer: Jan Mucha <mucha@vut.cz>.\r\n\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/BDALab/handwriting-sample",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "handwriting-sample",
            "package_url": "https://pypi.org/project/handwriting-sample/",
            "platform": "",
            "project_url": "https://pypi.org/project/handwriting-sample/",
            "project_urls": {
                "Homepage": "https://github.com/BDALab/handwriting-sample"
            },
            "release_url": "https://pypi.org/project/handwriting-sample/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Handwriting sample",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12100723,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "93f05fbe4ad21703551b7d1b0d88d571",
                    "sha256": "67e0ea9808bc821fead58865ceefb43bb16d8c98912df631a13148a06d298dd0"
                },
                "downloads": -1,
                "filename": "handwriting-sample-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "93f05fbe4ad21703551b7d1b0d88d571",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 23591,
                "upload_time": "2021-11-23T10:29:37",
                "upload_time_iso_8601": "2021-11-23T10:29:37.935479Z",
                "url": "https://files.pythonhosted.org/packages/e5/5f/6e6827653685c2f0acc28e18e4c0d701c227c3b57300572732b304190af6/handwriting-sample-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}