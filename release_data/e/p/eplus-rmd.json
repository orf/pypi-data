{
    "0.2": {
        "info": {
            "author": "Jason Glazer",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# createRulesetModelDescription\n\n[![Test/Package Status](https://img.shields.io/github/workflow/status/JasonGlazer/createRulesetModelDescription/Flake8/main?label=flake8)](https://github.com/JasonGlazer/createRulesetModelDescription/actions/workflows/flake8.yml)\n[![Build Package and Run Tests](https://github.com/JasonGlazer/createRulesetModelDescription/actions/workflows/build_and_test.yml/badge.svg?branch=main)](https://github.com/JasonGlazer/createRulesetModelDescription/actions/workflows/build_and_test.yml)\n\nAn EnergyPlus utility that creates an Ruleset Model Description (RMD) file based on output (and some input) from a simulation. \n\n## Background\n\nThe RMD file is based on a schema being developed as part of the writing of ASHRAE Standard 229P:\n\nTitle:\n\n - Protocols for Evaluating Ruleset Implementation in Building Performance Modeling Software\n\nPurpose:\n\n - This standard establishes tests and acceptance criteria for implementation of rulesets (e.g., modeling rules) and related reporting in building performance modeling software.\n\nScope:\n\n - This standard applies to building performance modeling software that implements rulesets.\n - This standard applies to rulesets associated with new or existing buildings and their systems, system controls, their sites, and other aspects of buildings described by the ruleset implementation being evaluated.\n\nThe development of the RMD schema to support the standard is going on here:\n\nhttps://github.com/open229/ruleset-model-description-schema\n\n## Overview\n\nThe utility is intended to be used at a command line prompt:\n\n```\n  createRulesetModelDescription in.epJSON\n```\n\nwhere in.epJSON is the name of the EnergyPlus input file with path in the epJSON format. \n\nEnergyPlus version 22.2.0 or newer is requried to use the utility.\n\n## epJSON Format\n\nTo create an epJSON file from an EnergyPlus IDF file use ConvertInputFormat.exe that comes with EnergyPlus. \n\nTo convert files, at the command prompt type:\n\n```\n ConvertInputFormat in.idf\n```\n\nWhere in.idf is the name of the EnergyPlus input file with path in the IDF format. The utility will convert the file into a file with the same name\nbut the extension .epJSON in the JSON format. \n\nFor additional help with ConvertInputFormat at the command prompt in the directory with the EnergyPlus application, type:\n\n```\n ConvertInputFormat --help\n```\n\n## Required Input File Changes\n\nThe EnergyPlus input file has some added requirements to be used with the createRulesetModelDescription utility.\n\n - many tabular output reports are used so the Output:Table:SummaryReports should be set to AllSummary, AllSummaryMonthly, or AllSummaryMonthlyAndSizingPeriod:\n\n``` \n  Output:Table:SummaryReports,\n    AllSummaryMonthly;    !- Report 1 Name\n``` \n\nAdditional warning messages may appear when including the monthly predefined reports.\n\n - the JSON output format is used so that should be enabled for both timeseries and tabular output:\n\n```    \n  Output:JSON,\n    TimeSeriesAndTabular,    !- Option Type\n    Yes,                     !- Output JSON\n    No,                      !- Output CBOR\n    No;                      !- Output MessagePack\n```\n\nThis will create filename_out.json files when EnergyPlus is run at the command line. \n\nNote: This utility was designed to work with files produced using EnergyPlus at the command line. Some file renaming might be necessary if using EP-Launch. \nIf using EP-Launch the eplusout.json and eplusout_hourly.json files may be found in the EPTEMP directory without the specific file name.\n\n - SI units should be used so\n\n``` \n   OutputControl:Table:Style,\n    HTML,            !- Column Separator\n    None;            !- Unit Conversion\n```\n - hourly output for each schedule needs to be created using the following\n \n```\n   Output:Variable,\n    *,\n    schedule value,\n    hourly;\n```\n\nThis will create filenameout_hourly.json files when EnergyPlus is run at the command line. If using EP-Launch this files may be found in the EPTEMP directory without the specific file name.\n\n - add output schedules reports\n \n```\n  Output:Schedules,\n    Hourly;\n```\n\nThis produces a summary report in the EIO file and the Initialization Summary related to schedules. While it is not currently used by the script it probably will be used \nin the future.\n\n\n - add space type tags by using the Space input object\n\n```\n  Space,\n    core_space,              !- Name\n    Core_ZN,                 !- Zone Name\n    autocalculate,           !- Ceiling Height\n    autocalculate,           !- Volume\n    autocalculate,           !- Floor Area {m2}\n    OFFICE_OPEN_PLAN,        !- Space Type\n    OFFICE_BUILDINGS_OFFICE_SPACE, !- Tag 1\n    OFFICE;                  !- Tag 2\n```\n\nThe fields should be completed as described below:\n\n - the Space Type field should be set to the appropriate option for lighting_space_type see LightingSpaceOptions2019ASHRAE901TG37 for the list of options.\n - the Tag 1 field should be set to the the appropriate option for ventilations_space_type see VentilationSpaceOptions2019ASHRAE901 for the list of options.\n - the Tag 2 field should be set to the the appropriate option for service_water_heating_space_type see ServiceWaterHeatingSpaceOptions2019ASHRAE901 for the list of options.\n\nThese enumerated lists are found here:\n\nhttps://github.com/open229/ruleset-model-description-schema/blob/master/docs229/Enumerations2019ASHRAE901.schema.md\n\nIf you had not been using the Space input object before, set the numeric inputs to 'autocalculate'.\n\nIt is usually easier to make these changes prior to converting the file into the epJSON format.\n\n## Weather File\n\nWhen selecting the EPW weather file, make sure the STAT file is present in the same directory. This file is needed for the fully populate the Climatic Data Summary tabular \nreport which is used to identify the ASHRAE climate zone.\n\n## Output\n\nThe resulting Ruleset Model Description file will be created in the same directory as the epJSON file with the same name and the file extension .rmd\n\n\n\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/JasonGlazer/createRulesetModelDescription",
            "keywords": "energyplus",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "eplus-rmd",
            "package_url": "https://pypi.org/project/eplus-rmd/",
            "platform": null,
            "project_url": "https://pypi.org/project/eplus-rmd/",
            "project_urls": {
                "Homepage": "https://github.com/JasonGlazer/createRulesetModelDescription"
            },
            "release_url": "https://pypi.org/project/eplus-rmd/0.2/",
            "requires_dist": [
                "jsonschema",
                "pyyaml"
            ],
            "requires_python": ">=3.7",
            "summary": "A Python tool for generating RMDs.",
            "version": "0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15792711,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bef46465cf973769e889e203d006e62b",
                    "sha256": "3dc74625b65d2b8a8fe84132365237abdf9d8d9523e45924520c0689ba676083"
                },
                "downloads": -1,
                "filename": "eplus_rmd-0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "bef46465cf973769e889e203d006e62b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 1012822,
                "upload_time": "2022-11-16T19:18:14",
                "upload_time_iso_8601": "2022-11-16T19:18:14.881685Z",
                "url": "https://files.pythonhosted.org/packages/3a/e2/ea7fab3e90d343163cc5e84bc7332029d0a3d81c81d1c9082c618728f379/eplus_rmd-0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0c6440099dcdc121e118837583796319",
                    "sha256": "02e8129d8a29dd5bf1a1d201a4a190aafbfa4b517ed90c6a6497fa31a2cb0ead"
                },
                "downloads": -1,
                "filename": "eplus_rmd-0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "0c6440099dcdc121e118837583796319",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 925165,
                "upload_time": "2022-11-16T19:18:18",
                "upload_time_iso_8601": "2022-11-16T19:18:18.161610Z",
                "url": "https://files.pythonhosted.org/packages/04/14/c28b3c751d41f66aa3dd3587d72f0ec06b0e169de1ade34ef2419b35a579/eplus_rmd-0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}