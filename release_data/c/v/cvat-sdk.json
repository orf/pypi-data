{
    "2.1.0": {
        "info": {
            "author": "CVAT.ai team",
            "author_email": "support@cvat.ai",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cvat-ai/cvat",
            "keywords": "OpenAPI,OpenAPI-Generator,CVAT REST API",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cvat-sdk",
            "package_url": "https://pypi.org/project/cvat-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cvat-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/cvat-ai/cvat"
            },
            "release_url": "https://pypi.org/project/cvat-sdk/2.1.0/",
            "requires_dist": [
                "attrs (>=21.4.0)",
                "Pillow (>=9.0.1)",
                "tqdm (>=4.64.0)",
                "tuspy (==0.2.5)",
                "typing-extensions (>=4.2.0)",
                "python-dateutil (>=2.5.3)",
                "setuptools (>=21.0.0)",
                "urllib3 (>=1.25.3)"
            ],
            "requires_python": ">=3.7",
            "summary": "CVAT REST API",
            "version": "2.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15031655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "25c49eb22907dc33c8e38ad13e472b72",
                    "sha256": "3dc734c8a027e3a589e694777616f6d3f652d0c7bdac31f1b667cb6662972e19"
                },
                "downloads": -1,
                "filename": "cvat_sdk-2.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "25c49eb22907dc33c8e38ad13e472b72",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 531912,
                "upload_time": "2022-09-07T09:59:58",
                "upload_time_iso_8601": "2022-09-07T09:59:58.258605Z",
                "url": "https://files.pythonhosted.org/packages/f7/77/f81ba879b70a28c1addc73d7822e4b04a29231072e3a428f2e666ffa3ebf/cvat_sdk-2.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7d70dd2a0460de81d2a036e1bfca7e81",
                    "sha256": "9a09797d714cc8287869f8758d1c9bd0cc09f17727ff1a5374c1e5da0889d0c9"
                },
                "downloads": -1,
                "filename": "cvat_sdk-2.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "7d70dd2a0460de81d2a036e1bfca7e81",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 166646,
                "upload_time": "2022-09-07T10:00:00",
                "upload_time_iso_8601": "2022-09-07T10:00:00.504922Z",
                "url": "https://files.pythonhosted.org/packages/f2/b8/86f86d2b9ac3d7a1991ee033bcc02111c716f6120a0335d7f83d154a079a/cvat_sdk-2.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.1.0.post1": {
        "info": {
            "author": "CVAT.ai team",
            "author_email": "support@cvat.ai",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# cvat_sdk\nREST API for Computer Vision Annotation Tool (CVAT)\n\nThis Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:\n\n- API version: 2.1.0\n- Package version: 2.0-alpha\n- Build package: org.openapitools.codegen.languages.PythonClientCodegen\nFor more information, please visit [https://github.com/cvat-ai/cvat](https://github.com/cvat-ai/cvat)\n\n## Installation & Usage\n### pip install\n\nIf the python package is hosted on a repository, you can install directly using:\n\n```sh\npip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git\n```\n(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/GIT_USER_ID/GIT_REPO_ID.git`)\n\nThen import the package:\n```python\nimport cvat_sdk.api_client\n```\n\n### Setuptools\n\nInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).\n\n```sh\npython setup.py install --user\n```\n(or `sudo python setup.py install` to install the package for all users)\n\nThen import the package:\n```python\nimport cvat_sdk.api_client\n```\n\n## Getting Started\n\nPlease follow the [installation procedure](#installation--usage) and then run the following:\n\nAPI includes 2 layers:\n- REST API wrappers (`ApiClient`). Located in at `cvat_sdk.api_client`\n- high-level tools (`core`). Located at `cvat_sdk.core`\n\n### `ApiClient` (low level)\n\nThis layer is useful if you need to work directly with REST API, but want\nto have data validation and syntax assistance from your code editor. The code\non this layer is autogenerated.\n\n#### Example\n\nLet's see how a task with local files can be created. We will use the basic auth\nto make things simpler.\n\n```python\nfrom time import sleep\nfrom cvat_sdk.api_client import Configuration, ApiClient, models, apis, exceptions\n\nconfiguration = Configuration(\n    host=\"http://localhost\",\n    username='YOUR_USERNAME',\n    password='YOUR_PASSWORD',\n)\n\n# Enter a context with an instance of the API client\nwith ApiClient(configuration) as api_client:\n    # Parameters can be passed as a plain dict with JSON-serialized data\n    # or as model objects (from cvat_sdk.api_client.models), including\n    # mixed variants.\n    #\n    # In case of dicts, keys must be the same as members of models.I<ModelName>\n    # interfaces and values must be convertible to the corresponding member\n    # value types (e.g. a date or string enum value can be parsed from a string).\n    #\n    # In case of model objects, data must be of the corresponding\n    # models.<ModelName> types.\n    #\n    # Let's use a dict here. It should look like models.ITaskWriteRequest\n    task_spec = {\n        'name': 'example task',\n        \"labels\": [{\n            \"name\": \"car\",\n            \"color\": \"#ff00ff\",\n            \"attributes\": [\n                {\n                    \"name\": \"a\",\n                    \"mutable\": True,\n                    \"input_type\": \"number\",\n                    \"default_value\": \"5\",\n                    \"values\": [\"4\", \"5\", \"6\"]\n                }\n            ]\n        }],\n    }\n\n    try:\n        # Apis can be accessed as ApiClient class members\n        # We use different models for input and output data. For input data,\n        # models are typically called like \"*Request\". Output data models have\n        # no suffix.\n        (task, response) = api_client.tasks_api.create(task_spec)\n    except exceptions.ApiException as e:\n        # We can catch the basic exception type, or a derived type\n        print(\"Exception when trying to create a task: %s\\n\" % e)\n\n    # Here we will use models instead of a dict\n    task_data = models.DataRequest(\n        image_quality=75,\n        start_frame=2,\n        stop_frame=5,\n        client_files=[\n            open('image1.jpg', 'rb'),\n            open('image2.jpg', 'rb'),\n        ],\n    )\n\n    # If we pass binary file objects, we need to specify content type.\n    # For this endpoint, we don't have response data\n    (_, response) = api_client.tasks_api.create_data(task.id,\n        data_request=task_data,\n        _content_type=\"multipart/form-data\",\n\n        # we can choose to check the response status manually\n        # and disable the response data parsing\n        _check_status=False, _parse_response=False\n    )\n    assert response.status == 202, response.msg\n\n    # Wait till task data is processed\n    for _ in range(100):\n        (status, _) = api_client.tasks_api.retrieve_status(task.id)\n        if status.state.value in ['Finished', 'Failed']:\n            break\n        sleep(0.1)\n    assert status.state.value == 'Finished', status.message\n\n    # Update the task object and check the task size\n    (task, _) = api_client.tasks_api.retrieve(task.id)\n    assert task.size == 4\n```\n\n### `Core` (high-level)\n\nThis layer provides high-level APIs, allowing easier access to server operations.\nAPI includes *Repositories* and *Entities*. Repositories provide management\noperations for Entitites. Entitites represent separate objects on the server\n(e.g. tasks, jobs etc).\n\n#### Example\n\n```python\nfrom cvat_sdk import make_client, models\nfrom cvat_sdk.core.proxies.tasks import ResourceType, Task\n\nwith make_client(host=\"http://localhost\") as client:\n    # Authorize using the basic auth\n    client.login(('YOUR_USERNAME', 'YOUR_PASSWORD'))\n\n    # Models are used the same way as in the layer 1\n    task_spec = {\n        \"name\": \"example task 2\",\n        \"labels\": [\n            {\n                \"name\": \"car\",\n                \"color\": \"#ff00ff\",\n                \"attributes\": [\n                    {\n                        \"name\": \"a\",\n                        \"mutable\": True,\n                        \"input_type\": \"number\",\n                        \"default_value\": \"5\",\n                        \"values\": [\"4\", \"5\", \"6\"],\n                    }\n                ],\n            }\n        ],\n    }\n\n    # Different repositories can be accessed as the Client class members.\n    # They may provide both simple and complex operations,\n    # such as entity creation, retrieval and removal.\n    task = client.tasks.create_from_data(\n        spec=task_spec,\n        resource_type=ResourceType.LOCAL,\n        resources=['image1.jpg', 'image2.png'],\n    )\n\n    # Task object is already up-to-date with its server counterpart\n    assert task.size == 2\n\n    # An entity needs to be fetch()-ed to reflect the latest changes.\n    # It can be update()-d and remove()-d depending on the entity type.\n    task.update({'name': 'mytask'})\n    task.remove()\n```\n\n## Documentation for API Endpoints\n\nAll URIs are relative to *http://localhost*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*AuthApi* | **auth_create_login** | **POST** /api/auth/login | \n*AuthApi* | **auth_create_logout** | **POST** /api/auth/logout | \n*AuthApi* | **auth_create_password_change** | **POST** /api/auth/password/change | \n*AuthApi* | **auth_create_password_reset** | **POST** /api/auth/password/reset | \n*AuthApi* | **auth_create_password_reset_confirm** | **POST** /api/auth/password/reset/confirm | \n*AuthApi* | **auth_create_register** | **POST** /api/auth/register | \n*AuthApi* | **auth_create_signing** | **POST** /api/auth/signing | This method signs URL for access to the server\n*CloudstoragesApi* | **cloudstorages_create** | **POST** /api/cloudstorages | Method creates a cloud storage with a specified characteristics\n*CloudstoragesApi* | **cloudstorages_destroy** | **DELETE** /api/cloudstorages/{id} | Method deletes a specific cloud storage\n*CloudstoragesApi* | **cloudstorages_list** | **GET** /api/cloudstorages | Returns a paginated list of storages according to query parameters\n*CloudstoragesApi* | **cloudstorages_partial_update** | **PATCH** /api/cloudstorages/{id} | Methods does a partial update of chosen fields in a cloud storage instance\n*CloudstoragesApi* | **cloudstorages_retrieve** | **GET** /api/cloudstorages/{id} | Method returns details of a specific cloud storage\n*CloudstoragesApi* | **cloudstorages_retrieve_actions** | **GET** /api/cloudstorages/{id}/actions | Method returns allowed actions for the cloud storage\n*CloudstoragesApi* | **cloudstorages_retrieve_content** | **GET** /api/cloudstorages/{id}/content | Method returns a manifest content\n*CloudstoragesApi* | **cloudstorages_retrieve_preview** | **GET** /api/cloudstorages/{id}/preview | Method returns a preview image from a cloud storage\n*CloudstoragesApi* | **cloudstorages_retrieve_status** | **GET** /api/cloudstorages/{id}/status | Method returns a cloud storage status\n*CommentsApi* | **comments_create** | **POST** /api/comments | Method creates a comment\n*CommentsApi* | **comments_destroy** | **DELETE** /api/comments/{id} | Method deletes a comment\n*CommentsApi* | **comments_list** | **GET** /api/comments | Method returns a paginated list of comments according to query parameters\n*CommentsApi* | **comments_partial_update** | **PATCH** /api/comments/{id} | Methods does a partial update of chosen fields in a comment\n*CommentsApi* | **comments_retrieve** | **GET** /api/comments/{id} | Method returns details of a comment\n*InvitationsApi* | **invitations_create** | **POST** /api/invitations | Method creates an invitation\n*InvitationsApi* | **invitations_destroy** | **DELETE** /api/invitations/{key} | Method deletes an invitation\n*InvitationsApi* | **invitations_list** | **GET** /api/invitations | Method returns a paginated list of invitations according to query parameters\n*InvitationsApi* | **invitations_partial_update** | **PATCH** /api/invitations/{key} | Methods does a partial update of chosen fields in an invitation\n*InvitationsApi* | **invitations_retrieve** | **GET** /api/invitations/{key} | Method returns details of an invitation\n*IssuesApi* | **issues_create** | **POST** /api/issues | Method creates an issue\n*IssuesApi* | **issues_destroy** | **DELETE** /api/issues/{id} | Method deletes an issue\n*IssuesApi* | **issues_list** | **GET** /api/issues | Method returns a paginated list of issues according to query parameters\n*IssuesApi* | **issues_list_comments** | **GET** /api/issues/{id}/comments | The action returns all comments of a specific issue\n*IssuesApi* | **issues_partial_update** | **PATCH** /api/issues/{id} | Methods does a partial update of chosen fields in an issue\n*IssuesApi* | **issues_retrieve** | **GET** /api/issues/{id} | Method returns details of an issue\n*JobsApi* | **jobs_create_annotations** | **POST** /api/jobs/{id}/annotations/ | Method allows to upload job annotations\n*JobsApi* | **jobs_destroy_annotations** | **DELETE** /api/jobs/{id}/annotations/ | Method deletes all annotations for a specific job\n*JobsApi* | **jobs_list** | **GET** /api/jobs | Method returns a paginated list of jobs according to query parameters\n*JobsApi* | **jobs_list_commits** | **GET** /api/jobs/{id}/commits | The action returns the list of tracked changes for the job\n*JobsApi* | **jobs_list_issues** | **GET** /api/jobs/{id}/issues | Method returns list of issues for the job\n*JobsApi* | **jobs_partial_update** | **PATCH** /api/jobs/{id} | Methods does a partial update of chosen fields in a job\n*JobsApi* | **jobs_partial_update_annotations** | **PATCH** /api/jobs/{id}/annotations/ | Method performs a partial update of annotations in a specific job\n*JobsApi* | **jobs_partial_update_annotations_file** | **PATCH** /api/jobs/{id}/annotations/{file_id} | Allows to upload an annotation file chunk. Implements TUS file uploading protocol.\n*JobsApi* | **jobs_retrieve** | **GET** /api/jobs/{id} | Method returns details of a job\n*JobsApi* | **jobs_retrieve_annotations** | **GET** /api/jobs/{id}/annotations/ | Method returns annotations for a specific job as a JSON document. If format is specified, a zip archive is returned.\n*JobsApi* | **jobs_retrieve_data** | **GET** /api/jobs/{id}/data | Method returns data for a specific job\n*JobsApi* | **jobs_retrieve_data_meta** | **GET** /api/jobs/{id}/data/meta | Method provides a meta information about media files which are related with the job\n*JobsApi* | **jobs_retrieve_dataset** | **GET** /api/jobs/{id}/dataset | Export job as a dataset in a specific format\n*JobsApi* | **jobs_update_annotations** | **PUT** /api/jobs/{id}/annotations/ | Method performs an update of all annotations in a specific job\n*LambdaApi* | **lambda_create_functions** | **POST** /api/lambda/functions/{func_id} | \n*LambdaApi* | **lambda_create_requests** | **POST** /api/lambda/requests | Method calls the function\n*LambdaApi* | **lambda_list_functions** | **GET** /api/lambda/functions | Method returns a list of functions\n*LambdaApi* | **lambda_list_requests** | **GET** /api/lambda/requests | Method returns a list of requests\n*LambdaApi* | **lambda_retrieve_functions** | **GET** /api/lambda/functions/{func_id} | Method returns the information about the function\n*LambdaApi* | **lambda_retrieve_requests** | **GET** /api/lambda/requests/{id} | Method returns the status of the request\n*MembershipsApi* | **memberships_destroy** | **DELETE** /api/memberships/{id} | Method deletes a membership\n*MembershipsApi* | **memberships_list** | **GET** /api/memberships | Method returns a paginated list of memberships according to query parameters\n*MembershipsApi* | **memberships_partial_update** | **PATCH** /api/memberships/{id} | Methods does a partial update of chosen fields in a membership\n*MembershipsApi* | **memberships_retrieve** | **GET** /api/memberships/{id} | Method returns details of a membership\n*OrganizationsApi* | **organizations_create** | **POST** /api/organizations | Method creates an organization\n*OrganizationsApi* | **organizations_destroy** | **DELETE** /api/organizations/{id} | Method deletes an organization\n*OrganizationsApi* | **organizations_list** | **GET** /api/organizations | Method returns a paginated list of organizatins according to query parameters\n*OrganizationsApi* | **organizations_partial_update** | **PATCH** /api/organizations/{id} | Methods does a partial update of chosen fields in an organization\n*OrganizationsApi* | **organizations_retrieve** | **GET** /api/organizations/{id} | Method returns details of an organization\n*ProjectsApi* | **projects_create** | **POST** /api/projects | Method creates a new project\n*ProjectsApi* | **projects_create_backup** | **POST** /api/projects/backup/ | Methods create a project from a backup\n*ProjectsApi* | **projects_create_dataset** | **POST** /api/projects/{id}/dataset/ | Import dataset in specific format as a project\n*ProjectsApi* | **projects_destroy** | **DELETE** /api/projects/{id} | Method deletes a specific project\n*ProjectsApi* | **projects_list** | **GET** /api/projects | Returns a paginated list of projects according to query parameters (12 projects per page)\n*ProjectsApi* | **projects_list_tasks** | **GET** /api/projects/{id}/tasks | Method returns information of the tasks of the project with the selected id\n*ProjectsApi* | **projects_partial_update** | **PATCH** /api/projects/{id} | Methods does a partial update of chosen fields in a project\n*ProjectsApi* | **projects_partial_update_backup_file** | **PATCH** /api/projects/backup/{file_id} | Allows to upload a file chunk. Implements TUS file uploading protocol.\n*ProjectsApi* | **projects_partial_update_dataset_file** | **PATCH** /api/projects/{id}/dataset/{file_id} | Allows to upload a file chunk. Implements TUS file uploading protocol.\n*ProjectsApi* | **projects_retrieve** | **GET** /api/projects/{id} | Method returns details of a specific project\n*ProjectsApi* | **projects_retrieve_annotations** | **GET** /api/projects/{id}/annotations | Method allows to download project annotations\n*ProjectsApi* | **projects_retrieve_backup** | **GET** /api/projects/{id}/backup | Methods creates a backup copy of a project\n*ProjectsApi* | **projects_retrieve_dataset** | **GET** /api/projects/{id}/dataset/ | Export project as a dataset in a specific format\n*RestrictionsApi* | **restrictions_retrieve_terms_of_use** | **GET** /api/restrictions/terms-of-use | Method provides CVAT terms of use\n*RestrictionsApi* | **restrictions_retrieve_user_agreements** | **GET** /api/restrictions/user-agreements | Method provides user agreements that the user must accept to register\n*SchemaApi* | **schema_retrieve** | **GET** /api/schema/ | \n*ServerApi* | **server_create_exception** | **POST** /api/server/exception | Method saves an exception from a client on the server\n*ServerApi* | **server_create_logs** | **POST** /api/server/logs | Method saves logs from a client on the server\n*ServerApi* | **server_list_share** | **GET** /api/server/share | Returns all files and folders that are on the server along specified path\n*ServerApi* | **server_retrieve_about** | **GET** /api/server/about | Method provides basic CVAT information\n*ServerApi* | **server_retrieve_annotation_formats** | **GET** /api/server/annotation/formats | Method provides the list of supported annotations formats\n*ServerApi* | **server_retrieve_plugins** | **GET** /api/server/plugins | Method provides allowed plugins\n*TasksApi* | **jobs_partial_update_data_meta** | **PATCH** /api/jobs/{id}/data/meta | Method provides a meta information about media files which are related with the job\n*TasksApi* | **tasks_create** | **POST** /api/tasks | Method creates a new task in a database without any attached images and videos\n*TasksApi* | **tasks_create_annotations** | **POST** /api/tasks/{id}/annotations/ | Method allows to upload task annotations from a local file or a cloud storage\n*TasksApi* | **tasks_create_backup** | **POST** /api/tasks/backup/ | Method recreates a task from an attached task backup file\n*TasksApi* | **tasks_create_data** | **POST** /api/tasks/{id}/data/ | Method permanently attaches images or video to a task. Supports tus uploads, see more https://tus.io/\n*TasksApi* | **tasks_destroy** | **DELETE** /api/tasks/{id} | Method deletes a specific task, all attached jobs, annotations, and data\n*TasksApi* | **tasks_destroy_annotations** | **DELETE** /api/tasks/{id}/annotations/ | Method deletes all annotations for a specific task\n*TasksApi* | **tasks_list** | **GET** /api/tasks | Returns a paginated list of tasks according to query parameters (10 tasks per page)\n*TasksApi* | **tasks_list_jobs** | **GET** /api/tasks/{id}/jobs | Method returns a list of jobs for a specific task\n*TasksApi* | **tasks_partial_update** | **PATCH** /api/tasks/{id} | Methods does a partial update of chosen fields in a task\n*TasksApi* | **tasks_partial_update_annotations** | **PATCH** /api/tasks/{id}/annotations/ | Method performs a partial update of annotations in a specific task\n*TasksApi* | **tasks_partial_update_annotations_file** | **PATCH** /api/tasks/{id}/annotations/{file_id} | Allows to upload an annotation file chunk. Implements TUS file uploading protocol.\n*TasksApi* | **tasks_partial_update_backup_file** | **PATCH** /api/tasks/backup/{file_id} | Allows to upload a file chunk. Implements TUS file uploading protocol.\n*TasksApi* | **tasks_partial_update_data_file** | **PATCH** /api/tasks/{id}/data/{file_id} | Allows to upload a file chunk. Implements TUS file uploading protocol.\n*TasksApi* | **tasks_partial_update_data_meta** | **PATCH** /api/tasks/{id}/data/meta | Method provides a meta information about media files which are related with the task\n*TasksApi* | **tasks_retrieve** | **GET** /api/tasks/{id} | Method returns details of a specific task\n*TasksApi* | **tasks_retrieve_annotations** | **GET** /api/tasks/{id}/annotations/ | Method allows to download task annotations\n*TasksApi* | **tasks_retrieve_backup** | **GET** /api/tasks/{id}/backup | Method backup a specified task\n*TasksApi* | **tasks_retrieve_data** | **GET** /api/tasks/{id}/data/ | Method returns data for a specific task\n*TasksApi* | **tasks_retrieve_data_meta** | **GET** /api/tasks/{id}/data/meta | Method provides a meta information about media files which are related with the task\n*TasksApi* | **tasks_retrieve_dataset** | **GET** /api/tasks/{id}/dataset | Export task as a dataset in a specific format\n*TasksApi* | **tasks_retrieve_status** | **GET** /api/tasks/{id}/status | When task is being created the method returns information about a status of the creation process\n*TasksApi* | **tasks_update_annotations** | **PUT** /api/tasks/{id}/annotations/ | Method allows to upload task annotations\n*UsersApi* | **users_destroy** | **DELETE** /api/users/{id} | Method deletes a specific user from the server\n*UsersApi* | **users_list** | **GET** /api/users | Method provides a paginated list of users registered on the server\n*UsersApi* | **users_partial_update** | **PATCH** /api/users/{id} | Method updates chosen fields of a user\n*UsersApi* | **users_retrieve** | **GET** /api/users/{id} | Method provides information of a specific user\n*UsersApi* | **users_retrieve_self** | **GET** /api/users/self | Method returns an instance of a user who is currently authorized\n\n\n## Documentation For Models\n\n - About\n - AnnotationFileRequest\n - AnnotationsRead\n - Attribute\n - AttributeRequest\n - AttributeVal\n - AttributeValRequest\n - BackupWriteRequest\n - BasicUser\n - BasicUserRequest\n - ChunkType\n - CloudStorageRead\n - CloudStorageWriteRequest\n - CommentRead\n - CommentReadOwner\n - CommentWriteRequest\n - CredentialsTypeEnum\n - DataMetaRead\n - DataRequest\n - DatasetFileRequest\n - DatasetFormat\n - DatasetFormats\n - DatasetWriteRequest\n - Exception\n - ExceptionRequest\n - FileInfo\n - FileInfoTypeEnum\n - FrameMeta\n - InputTypeEnum\n - InvitationRead\n - InvitationWrite\n - InvitationWriteRequest\n - IssueRead\n - IssueWriteRequest\n - JobAnnotationsUpdateRequest\n - JobCommit\n - JobRead\n - JobStage\n - JobStatus\n - Label\n - LabeledData\n - LabeledDataRequest\n - LabeledImage\n - LabeledImageRequest\n - LabeledShape\n - LabeledShapeRequest\n - LabeledTrack\n - LabeledTrackRequest\n - LocationEnum\n - LogEvent\n - LogEventRequest\n - LoginRequest\n - Manifest\n - ManifestRequest\n - MembershipRead\n - MembershipWrite\n - MetaUser\n - OperationStatus\n - OrganizationRead\n - OrganizationWrite\n - OrganizationWriteRequest\n - PaginatedCloudStorageReadList\n - PaginatedCommentReadList\n - PaginatedInvitationReadList\n - PaginatedIssueReadList\n - PaginatedJobCommitList\n - PaginatedJobReadList\n - PaginatedMembershipReadList\n - PaginatedMetaUserList\n - PaginatedPolymorphicProjectList\n - PaginatedTaskReadList\n - PasswordChangeRequest\n - PasswordResetConfirmRequest\n - PasswordResetSerializerExRequest\n - PatchedCloudStorageWriteRequest\n - PatchedCommentWriteRequest\n - PatchedDataMetaWriteRequest\n - PatchedInvitationWriteRequest\n - PatchedIssueWriteRequest\n - PatchedJobWriteRequest\n - PatchedLabelRequest\n - PatchedLabeledDataRequest\n - PatchedMembershipWriteRequest\n - PatchedOrganizationWriteRequest\n - PatchedProjectWriteRequest\n - PatchedProjectWriteRequestTargetStorage\n - PatchedTaskWriteRequest\n - PatchedTaskWriteRequestTargetStorage\n - PatchedUserRequest\n - Plugins\n - PolymorphicProject\n - ProjectFileRequest\n - ProjectRead\n - ProjectReadAssignee\n - ProjectReadOwner\n - ProjectReadTargetStorage\n - ProjectSearch\n - ProjectWriteRequest\n - ProviderTypeEnum\n - RestAuthDetail\n - RestrictedRegister\n - RestrictedRegisterRequest\n - RoleEnum\n - RqStatus\n - RqStatusStateEnum\n - Segment\n - ShapeType\n - SigningRequest\n - SimpleJob\n - SortingMethod\n - Storage\n - StorageMethod\n - StorageRequest\n - StorageType\n - SubLabeledShape\n - SubLabeledShapeRequest\n - SubLabeledTrack\n - SubLabeledTrackRequest\n - Sublabel\n - SublabelRequest\n - TaskAnnotationsUpdateRequest\n - TaskAnnotationsWriteRequest\n - TaskFileRequest\n - TaskRead\n - TaskReadTargetStorage\n - TaskWriteRequest\n - Token\n - TrackedShape\n - TrackedShapeRequest\n - User\n - UserAgreement\n - UserAgreementRequest\n\n\n\n## Author\n\nsupport@cvat.ai\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cvat-ai/cvat",
            "keywords": "OpenAPI,OpenAPI-Generator,CVAT REST API",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cvat-sdk",
            "package_url": "https://pypi.org/project/cvat-sdk/",
            "platform": null,
            "project_url": "https://pypi.org/project/cvat-sdk/",
            "project_urls": {
                "Homepage": "https://github.com/cvat-ai/cvat"
            },
            "release_url": "https://pypi.org/project/cvat-sdk/2.1.0.post1/",
            "requires_dist": [
                "attrs (>=21.4.0)",
                "Pillow (>=9.0.1)",
                "tqdm (>=4.64.0)",
                "tuspy (==0.2.5)",
                "typing-extensions (>=4.2.0)",
                "python-dateutil (>=2.5.3)",
                "setuptools (>=21.0.0)",
                "urllib3 (>=1.25.3)"
            ],
            "requires_python": ">=3.7",
            "summary": "CVAT REST API",
            "version": "2.1.0.post1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15031655,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e5a432c0bee22fd2780f1395b874f7a",
                    "sha256": "b5a59c4375c04fa2ddad9d1f6b0c4b7f305740c71eab1167f87826ca63854bad"
                },
                "downloads": -1,
                "filename": "cvat_sdk-2.1.0.post1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4e5a432c0bee22fd2780f1395b874f7a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 531976,
                "upload_time": "2022-09-08T12:09:07",
                "upload_time_iso_8601": "2022-09-08T12:09:07.935487Z",
                "url": "https://files.pythonhosted.org/packages/92/74/1263b6a4503f619e5670f61f6039afe4324523548f33af6f4aafbfa17310/cvat_sdk-2.1.0.post1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1e2daae9756b5341579f4af0de90e03a",
                    "sha256": "e1039e951ece258f83ef04863f1b34e8f9981aaa4059e9c957d48235a14f28b4"
                },
                "downloads": -1,
                "filename": "cvat_sdk-2.1.0.post1.tar.gz",
                "has_sig": false,
                "md5_digest": "1e2daae9756b5341579f4af0de90e03a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 166718,
                "upload_time": "2022-09-08T12:09:09",
                "upload_time_iso_8601": "2022-09-08T12:09:09.667634Z",
                "url": "https://files.pythonhosted.org/packages/2f/a6/cd0428d4f74a4baf5c5a165a2c90810d9873c7fa49e74b9d9e7fef017a76/cvat_sdk-2.1.0.post1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}