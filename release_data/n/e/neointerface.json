{
    "3.1.2": {
        "info": {
            "author": "Alexey Kuznetsov, Julian West",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": " Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 GlaxoSmithKline Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neointerface",
            "package_url": "https://pypi.org/project/neointerface/",
            "platform": "",
            "project_url": "https://pypi.org/project/neointerface/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/neointerface/3.1.2/",
            "requires_dist": [
                "numpy (==1.19.5)",
                "pandas (==1.1.5)",
                "neo4j (==4.4.0)",
                "requests (==2.25.1)"
            ],
            "requires_python": ">=3.6",
            "summary": "A Python interface to use the Neo4j graph database",
            "version": "3.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15044156,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dd47a55d656f24bcfc54045c30976da3",
                    "sha256": "32f741098f9f921a23f4644e8cead6c8f83ee3f9ac988f4c81dd72b28c71bfdb"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dd47a55d656f24bcfc54045c30976da3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 45209,
                "upload_time": "2022-01-05T09:34:27",
                "upload_time_iso_8601": "2022-01-05T09:34:27.449298Z",
                "url": "https://files.pythonhosted.org/packages/47/bd/a23559c353d8f9181598d8341ecbf0e5c0eea324e2f15b48384167cc1fa5/neointerface-3.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d1805936dfc4360fbe5a7e8c12890480",
                    "sha256": "a6b586cda38ab4ef30c6d695720031eb38e9d33a95a649bbebc4ace5c66b5c5d"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "d1805936dfc4360fbe5a7e8c12890480",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 68455,
                "upload_time": "2022-01-05T09:34:29",
                "upload_time_iso_8601": "2022-01-05T09:34:29.161353Z",
                "url": "https://files.pythonhosted.org/packages/c1/bb/d41c6553b6f80347c65a540b91aef8edfc521a550ddd83ac86a53e03b404/neointerface-3.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "3.1.5": {
        "info": {
            "author": "Alexey Kuznetsov, Julian West, Ben Grinsted, William McDermott",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": " Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 GlaxoSmithKline Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neointerface",
            "package_url": "https://pypi.org/project/neointerface/",
            "platform": null,
            "project_url": "https://pypi.org/project/neointerface/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/neointerface/3.1.5/",
            "requires_dist": [
                "numpy (==1.19.5)",
                "pandas (==1.1.5)",
                "neo4j (==4.4.0)",
                "requests (==2.25.1)"
            ],
            "requires_python": ">=3.6",
            "summary": "A Python interface to use the Neo4j graph database",
            "version": "3.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15044156,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "005c5e4b6ffbeabbdd81ada65f0a0d6b",
                    "sha256": "770d4eb53762b094f2f42fdf9974e3ba7e831ef78055b71dd9782ec9b9c29dcd"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "005c5e4b6ffbeabbdd81ada65f0a0d6b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 47351,
                "upload_time": "2022-08-11T09:32:51",
                "upload_time_iso_8601": "2022-08-11T09:32:51.173725Z",
                "url": "https://files.pythonhosted.org/packages/8f/ed/da7545701a7c7aa37655e7cd5431f7b6101e0869c03f11e4f522d2e7237b/neointerface-3.1.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "34db6fcc326fcd50d569de1aecfd0f85",
                    "sha256": "74ff4a0cf3f68f655ec38fe2a82bb73d0d47775790943a3ba4e91ae4ad753fa0"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "34db6fcc326fcd50d569de1aecfd0f85",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 71376,
                "upload_time": "2022-08-11T09:32:52",
                "upload_time_iso_8601": "2022-08-11T09:32:52.467223Z",
                "url": "https://files.pythonhosted.org/packages/84/3d/7f488befc1da2faca38b13698c644d588335f8e790396c0492555a56a1ce/neointerface-3.1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "3.1.7": {
        "info": {
            "author": "Alexey Kuznetsov, Julian West, Ben Grinsted, William McDermott",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": " Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 GlaxoSmithKline Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neointerface",
            "package_url": "https://pypi.org/project/neointerface/",
            "platform": null,
            "project_url": "https://pypi.org/project/neointerface/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/neointerface/3.1.7/",
            "requires_dist": [
                "setuptools (==56.0.0)",
                "neo4j (==4.4.0)",
                "numpy (==1.19.5)",
                "pandas (==1.1.5)",
                "pytest (==6.2.4)",
                "pytest-unordered (==0.4.1)",
                "requests (==2.25.1)",
                "networkx (==2.5.1)"
            ],
            "requires_python": ">=3.6",
            "summary": "A Python interface to use the Neo4j graph database",
            "version": "3.1.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15044156,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "89b423276659b7b5789dae1274f11141",
                    "sha256": "b5eeb4f725c4de32db1059f149eac638542d997a35911ebb80238c815c9382dd"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "89b423276659b7b5789dae1274f11141",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 47750,
                "upload_time": "2022-08-25T16:54:55",
                "upload_time_iso_8601": "2022-08-25T16:54:55.865626Z",
                "url": "https://files.pythonhosted.org/packages/27/5b/5e4c48316ca370fdced1ad92249719c987ea699ef8f04be9a0c014d38e3b/neointerface-3.1.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "94a59094251d9f82822bd8cdb8d388c7",
                    "sha256": "86be16072755d36bf9492c49c10948d3369d65b38c67157fbce7bd35e153c26e"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.7.tar.gz",
                "has_sig": false,
                "md5_digest": "94a59094251d9f82822bd8cdb8d388c7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 74689,
                "upload_time": "2022-08-25T16:54:57",
                "upload_time_iso_8601": "2022-08-25T16:54:57.537615Z",
                "url": "https://files.pythonhosted.org/packages/75/8d/ddb80f8b849cd76c4d6725b83035c858d48f9aae6c9580936716e133daac/neointerface-3.1.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "3.1.8": {
        "info": {
            "author": "Alexey Kuznetsov, Julian West, Ben Grinsted, William McDermott",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Neointerface - Neo4j made easy for Python programmers!\n\nA Python interface to use the Neo4j graph database, and simplify its use.\n\nclass **NeoInterface**:\n\n    Class to interact programmatically with Neo4j using Python.\n    It provides a higher-level wrapper around the Neo4j python connectivity library \"Neo4j Python Driver\" \n    (https://neo4j.com/docs/api/python-driver/current/api.html)\n    \n    This class reduces the need to know and use Cypher query language; \n    for a variety of common operations, class methods may be used instead of Cypher queries.\n    Advanced users can pass Cypher directly.\n \nIMPORTANT NOTE: tested on **version 4.3.6 of Neo4j**\n\n**AUTHORS:**\n        Alexey Kuznetsov, Julian West, GlaxoSmithKline\n\n# MICRO-TUTORIAL\n\n## What are Neo4j/Graph Databases, and why do they matter?\nIf you're new, \nhere's a [gentle brief intro](https://julianspolymathexplorations.blogspot.com/2021/02/neo4j-graph-databases-intro.html) \nby one of the authors of this class.\n\n## In a nutshell\nIf you understand that:\n1) Neo4j **nodes** are similar to *records* (rows) in relational databases or spreadsheets\n2) Neo4j **node labels** vaguely correspond to table names (though a node can have multiple labels)\n3) Neo4j **links (relationships)** are ways of pointing from a record to one or more others \n(akin to \"foreign keys\" or \"join tables\" in relational databases)\n4) Neo4j includes a **query language named Cypher**, akin to SQL (but much more powerful!) \n\nthen you're ready to start!\n\n## How to set up Neo4j\nFor use within a company, consult on which method is preferred with your IT department.\n\n*Any one of the following methods:*\n\n* **Super-simple method for beginners**: get a [free account\nat the Neo4j sandbox](https://neo4j.com/sandbox/); then use the credentials from that site\n* Create or obtain a Docker container with Neo4j : see [appendix A](Appendixes.md)\n* Install the free [Neo4j Community server](https://neo4j.com/download-center/#community) \non your computer - Windows10 or Linux. You will \nalso need [Java11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html), if \ndon't have it already.\n* Install the Windows program [Neo4j Desktop](https://neo4j.com/download-center/#desktop)  (convenient, \nbut be aware that you will be aggressively steered towards the Enterprise edition)\n* Use a pre-made VM machine image that contains Neo4j, \nfor example from the excellent [Bitnami](https://bitnami.com/stack/neo4j)\n* Use [Neo4j Aura](https://neo4j.com/cloud/aura/), a managed solution\n\nNote: some functions in this class, such as export_dbase_json(), require that the *APOC* library \nbe installed alongside Neo4j - see [appendix B](Appendixes.md); the Docker option has APOC already enabled.\nThe RDF functionality requires both APOC and n10s installed.\n\n\n## A quick gallop thru Neo4j\n```python\nimport neointerface\ndb = neointerface.NeoInterface(host=\"neo4j://localhost:7687\" , credentials=(\"neo4j\", \"YOUR_NEO4J_PASSWORD\"))\n\n# Create 2 new nodes (records).  The internal Neo4j node ID is returned\nnode1_id = db.create_node_by_label_and_dict(\"patient\", {'patient_id': 123, 'gender': 'M'})\nnode2_id = db.create_node_by_label_and_dict(\"doctor\", {'doctor_id': 1, 'name': 'Hippocrates'})\n\n# You can think of the above as a 1-record table of patients and a 1-record table of doctors.\n# Now link the patient to his doctor\ndb.link_nodes_by_ids(node1_id, node2_id, \"IS_TREATED_BY\", {'since': 2021})\n\n# You can run general Cypher queries, or use existing methods that allow you to avoid\n# them for common operations\n\n# EXAMPLE: find all the patients of a doctor named 'Hippocrates'\ncypher = \"MATCH (p :patient)-[IS_TREATED_BY]->(d :doctor {name:'Hippocrates'}) RETURN p\"\nresult = db.query(cypher)\nprint(result)   # SHOWS:  [{'p': {'gender': 'M', 'patient_id': 123}}]\n```\nThe database constructed so far, as seen in the Neo4j browser:\n![The database constructed so far, as seen in the Neo4j browser](docs/Example_database.png)\n\n## From Pandas dataframe to Neo4j and back\nLet's say that you have a Pandas dataframe such as:\n```python\nimport pandas as pd\ndf_original = pd.DataFrame({\"patient_id\": [100, 200], \"name\": [\"Jack\", \"Jill\"]})\n```\n\n\n(row number) | patient_id | name\n-----| ---------| -------\n0| 100 | Jack\n1| 200 | Jill\n\nLoad it into the Neo4j database simply with:\n```python\ndb.load_df(df_original, \"my_label\")\n```\n\nwhere *db* is the instantiated NeoInterface class from the earlier example.  The *\"my_label\"* string\nroughly corresponds to table names in relational databases.\nVoila', now you have 2 nodes in your database:\n>**NODE 1**, with properties \"patient_id\"=100 and \"name\"=\"Jack\"\n> \n>**NODE 2**, with properties \"patient_id\"=200 and \"name\"=\"Jill\"\n\nIf you want them back as a dataframe, just do:\n```python\ndf_new = db.get_df(\"my_label\")\n```\n\n\n\n# Instantiating the Class\n\n\n\n## NeoInterface()\nname | arguments| return\n-----| ---------| -------\n*NeoInterface*| host=os.environ.get(\"NEO4J_HOST\"), credentials=(os.environ.get(\"NEO4J_USER\"), os.environ.get(\"NEO4J_PASSWORD\")), apoc=False, rdf=False, rdf_host = None, verbose=True, debug=False, autoconnect=True|\n\n    If unable to create a Neo4j driver object, raise an Exception reminding the user to check whether the Neo4j database is running\n\n    :param host:        URL to connect to database with.  DEFAULT: read from NEO4J_HOST environmental variable\n    :param credentials: Pair of strings (tuple or list) containing, respectively, the database username and password\n                        DEFAULT: read from NEO4J_USER and NEO4J_PASSWORD environmental variables\n                        if None then no authentication is used\n    :param apoc:        Flag indicating whether apoc library is used on Neo4j database to connect to\n    :param verbose:     Flag indicating whether a verbose mode is to be used by all methods of this class\n    :param debug:       Flag indicating whether a debug mode is to be used by all methods of this class\n    :param autoconnect  Flag indicating whether the class should establish connection to database at initialization\n\n\n\n--- \n\n\n# GENERAL METHODS\n\n\n\n## version()\nname | arguments| return\n-----| ---------| -------\n*version*| | str\n\n    Return the version of the Neo4j driver being used. EXAMPLE: '4.2.1'\n\n\n\n---\n\n\n\n## close()\nname | arguments| return\n-----| ---------| -------\n*close*| | str\n\n    Terminate the database connection.\n\n    Note: this method is automatically invoked after the last operation of a 'with' statement\n\n\n\n---\n\n\n# METHODS TO RUN GENERIC QUERIES\n\n\n\n## query()\nname | arguments| return\n-----| ---------| -------\n*query*| q: str, params = None, return_type = 'data'| list/neo4j.Result/pd.DataFrame/MultiDiGraph\n\n        Runs a general Cypher query\n        :param q:       A Cypher query\n        :param params:  An optional Cypher dictionary\n                        EXAMPLE, assuming that the cypher string contains the substrings \"$node_id\":\n                                {'node_id': 20}\n        :param return_type: type of the returned result 'data'/'neo4j.Result'/'pd'/'nx'\n        *** When return_type == 'neo4j.Result':\n        Returns result of the query as a raw neo4j.Result object\n        (See https://neo4j.com/docs/api/python-driver/current/api.html#neo4j.Result)\n        *** When return_type == 'data' (default):\n        Returns a list of dictionaries.\n        In cases of error, return an empty list.\n        A new session to the database driver is started, and then immediately terminated after running the query.\n        :return:        A (possibly empty) list of dictionaries.  Each dictionary in the list\n                                will depend on the nature of the Cypher query.\n                        EXAMPLES:\n                            Cypher returns nodes (after finding or creating them): RETURN n1, n2\n                                    -> list item such as {'n1': {'gender': 'M', 'patient_id': 123}\n                                                          'n2': {'gender': 'F', 'patient_id': 444}}\n                            Cypher returns attribute values that get renamed: RETURN n.gender AS client_gender, n.pid AS client_id\n                                    -> list items such as {'client_gender': 'M', 'client_id': 123}\n                            Cypher returns attribute values without renaming: RETURN n.gender, n.pid\n                                    -> list items such as {'n.gender': 'M', 'n.pid': 123}\n                            Cypher returns a single computed value\n                                    -> a single list item such as {\"count(n)\": 100}\n                            Cypher returns a single relationship, with or without attributes: MERGE (c)-[r:PAID_BY]->(p)\n                                    -> a single list item such as [{ 'r': ({}, 'PAID_BY', {}) }]\n                            Cypher creates nodes (without returning them)\n                                    -> empty list\n        *** When return_type == 'pd':\n        Returns result of the query as a pandas dataframe\n        (See https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)\n        by storing the values of node properties in columns of the dataframe\n        (note the info about the labels of the nodes is not persisted)\n        *** When return_type == 'nx':\n        Returns result of the query as a networkx graph\n        (See https://networkx.org/documentation/stable/reference/classes/multidigraph.html)\n        \n        \n---\n\n\n\n## query_expanded()\nname | arguments| return\n-----| ---------| -------\n*query_expanded*| q: str, params = None, flatten = False| []\n\n    Expanded version of query(), meant to extract additional info for queries that return Graph Data Types,\n    i.e. nodes, relationships or paths,\n    such as \"MATCH (n) RETURN n\", or \"MATCH (n1)-[r]->(n2) RETURN r\"\n\n    For example, if nodes were returned, and their Neo4j internal IDs and/or labels are desired\n    (in addition to all the properties and their values)\n\n    Unless the flatten flag is True, individual records are kept as separate lists.\n        For example, \"MATCH (b:boat), (c:car) RETURN b, c\"\n        will return a structure such as [ [b1, c1] , [b2, c2] ]  if flatten is False,\n        vs.  [b1, c1, b2, c2]  if  flatten is True.  (Note: each b1, c1, etc, is a dictionary.)\n\n    :param q:       A Cypher query\n    :param params:  An optional Cypher dictionary\n                        EXAMPLE, assuming that the cypher string contains the substring \"$age\":\n                                    {'age': 20}\n    :param flatten: Flag indicating whether the Graph Data Types need to remain clustered by record,\n                    or all placed in a single flattened list.\n\n    :return:        A (possibly empty) list of dictionaries, which will depend on which Graph Data Types\n                                were returned in the Cypher query.\n                                EXAMPLE - for a returned node\n                                    {'gender': 'M', 'age': 20, 'neo4j_id': 123, 'neo4j_labels': ['patient']}\n                                EXAMPLE - for a returned relationship\n                                    {'price': 7500, 'neo4j_id': 2,\n                                     'neo4j_start_node': <Node id=11 labels=frozenset() properties={}>,\n                                     'neo4j_end_node': <Node id=14 labels=frozenset() properties={}>,\n                                     'neo4j_type': 'bought_by'}]\n\n\n\n---\n\n\n# METHODS TO RETRIEVE DATA\n\n\n\n## get_single_field()\nname | arguments| return\n-----| ---------| -------\n*get_single_field*| labels, field_name: str, properties_condition=None, cypher_clause=None, cypher_dict=None| list\n\n    For situations where one is fetching just 1 field,\n    and one desires a list of those values, rather than a dictionary of records.\n    In other respects, similar to the more general get_nodes()\n\n    EXAMPLES: fetch_single_field(\"car\", \"price\", properties_condition={\"car_make\": \"Toyota\"})\n                    will RETURN a list of prices of all the Toyota models\n              fetch_single_field(\"car\", \"price\", properties_condition={\"car_make\": \"Toyota\"}, clause=\"n.price < 50000\")\n                    will RETURN a list of prices of all the Toyota models that cost less than 50000\n\n    :param field_name:  A string with the name of the desired field (attribute)\n\n    For more information on the other parameters, see get_nodes()\n\n    :return:  A list of the values of the field_name attribute in the nodes that match the specified conditions\n\n\n\n---\n\n\n![image](docs/get_single_field.png)\n\n\n\n## get_nodes()\nname | arguments| return\n-----| ---------| -------\n*get_nodes*| labels=\"\", properties_condition=None, cypher_clause=None, cypher_dict=None, return_nodeid=False, return_labels=False| [{}]\n\n    EXAMPLES:\n        get_nodes(\"\")       # Get ALL nodes\n        get_nodes(\"client\")\n        get_nodes(\"client\", properties_condition = {\"gender\": \"M\", \"ethnicity\": \"white\"})\n        get_nodes(\"client\", cypher_clause = \"n.age > 40 OR n.income < 50000\")\n        get_nodes(\"client\", cypher_clause = \"n.age > $some_age\", cypher_dict = {\"$some_age\": 40})\n        get_nodes(\"client\", properties_condition = {\"gender\": \"M\", \"ethnicity\": \"white\"} ,\n                                       cypher_clause = \"n.age > 40 OR n.income < 50000\")\n    RETURN a list of the records (as dictionaries of ALL the key/value node properties)\n    corresponding to all the Neo4j nodes with the specified label,\n        AND satisfying the given Cypher CLAUSE (if present),\n        AND exactly matching ALL of the specified property key/values pairs  (if present).\n        I.e. an implicit AND operation.\n    IMPORTANT: nodes referred to in the Cypher clause must be specified as \"n.\"\n\n    A dictionary of data binding (cypher_dict) for the Cypher clause may be optionally specified.\n    In case of conflict (any key overlap) between the dictionaries cypher_dict and properties_condition, and Exception is raised.\n    Optionally, the Neo4j internal node ID and label name(s) may also be obtained and returned.\n\n    :param labels:          A string (or list/tuple of strings) specifying one or more Neo4j labels;\n                                an empty string indicates that the match is to be carried out\n                                across all labels - NOT RECOMMENDED for large databases!\n                                (Note: blank spaces ARE allowed in the strings)\n    :param cypher_dict:     Dictionary of data binding for the Cypher string.  EXAMPLE: {\"gender\": \"M\", \"age\": 40}\n    :param cypher_clause:   String with a clause to refine the search; any nodes it refers to, MUST be specified as \"n.\"\n                                EXAMPLE with hardwired values:  \"n.age > 40 OR n.income < 50000\"\n                                EXAMPLE with data-binding:      \"n.age > $age OR n.income < $income\"\n                                        (data-binding values are specified in cypher_dict)\n    :param properties_condition: A (possibly-empty) dictionary of property key/values pairs. Example: {\"gender\": \"M\", age: 64}\n                                 IMPORTANT: cypher_dict and properties_dict must have no overlapping keys, or an Exception will be raised\n    :param return_nodeid:   Flag indicating whether to also include the Neo4j internal node ID in the returned data\n                                (using \"neo4j_id\" as its key in the returned dictionary)\n    :param return_labels:   Flag indicating whether to also include the Neo4j label names in the returned data\n                                (using \"neo4j_labels\" as its key in the returned dictionary)\n    :return:        A list whose entries are dictionaries with each record's information\n                    (the node's attribute names are the keys)\n                    EXAMPLE: [  {\"gender\": \"M\", \"age\": 42, \"condition_id\": 3},\n                                {\"gender\": \"M\", \"age\": 76, \"location\": \"Berkeley\"}\n                             ]\n                    Note that ALL the attributes of each node are returned - and that they may vary across records.\n                    If the flag return_nodeid is set to True, then an extra key/value pair is included in the dictionaries,\n                            of the form     \"neo4j_id\": some integer with the Neo4j internal node ID\n                    If the flag return_labels is set to True, then an extra key/value pair is included in the dictionaries,\n                            of the form     \"neo4j_labels\": [list of Neo4j label(s) attached to that node]\n                    EXAMPLE using both of the above flags:\n                        [  {\"neo4j_id\": 145, \"neo4j_labels\": [\"person\", \"client\"], \"gender\": \"M\", \"age\": 42, \"condition_id\": 3},\n                           {\"neo4j_id\": 222, \"neo4j_labels\": [\"person\"], \"gender\": \"M\", \"age\": 76, \"location\": \"Berkeley\"}\n                        ]\n\n\n\n---\n\n\n\n## get_df()\nname | arguments| return\n-----| ---------| -------\n*get_df*| labels=\"\", properties_condition=None, cypher_clause=None, cypher_dict=None, return_nodeid=False, return_labels=False| pd.DataFrame\n\n    Same as get_nodes(), but the result is returned as a Pandas dataframe\n\n    See get_nodes() for more information\n\n\n\n---\n\n\n\n## get_parents_and_children()\nname | arguments| return\n-----| ---------| -------\n*get_parents_and_children*| node_id: int| {}\n\n    Fetch all the nodes connected to the given one by INbound relationships to it (its \"parents\"),\n    as well as by OUTbound relationships to it (its \"children\")\n    :param node_id: An integer with a Neo4j internal node ID\n    :return:        A dictionary with 2 keys: 'parent_list' and 'child_list'\n                    The values are lists of dictionaries with 3 keys: \"id\", \"label\", \"rel\"\n                        EXAMPLE of individual items in either parent_list or child_list:\n                        {'id': 163, 'labels': ['Subject'], 'rel': 'HAS_TREATMENT'}\n\n\n\n---\n\n\n\n## get_labels()\nname | arguments| return\n-----| ---------| -------\n*get_labels*| | [str]\n\n    Extract and return a list of all the Neo4j labels present in the database.\n    No particular order should be expected.\n\n    :return:    A list of strings\n\n\n\n---\n\n\n## get_relationshipTypes()\nname | arguments| return\n-----| ---------| -------\n*get_relationshipTypes*| | [str]\n\n    Extract and return a list of all the Neo4j relationship types present in the database.\n    No particular order should be expected.\n    \n    :return:    A list of strings\n\n---\n\n\n\n## get_label_properties()\nname | arguments| return\n-----| ---------| -------\n*get_label_properties*| label:str| list\n\n    Return a list of keys associated to any node with the given label\n\n\n\n---\n\n\n# METHODS TO GET/CREATE/MODIFY SCHEMA\n\n\n\n## get_indexes()\nname | arguments| return\n-----| ---------| -------\n*get_indexes*| types=None| pd.DataFrame\n\n    Return all the database indexes, and some of their attributes,\n    as a Pandas dataframe.\n    Optionally restrict the type (such as \"BTREE\") of indexes returned.\n\n    EXAMPLE:\n           labelsOrTypes            name          properties   type uniqueness\n         0    [my_label]  index_23b0962b       [my_property]  BTREE  NONUNIQUE\n         1    [my_label]       some_name  [another_property]  BTREE     UNIQUE\n\n    :param types:   Optional list to of types to limit the result to\n    :return:        A (possibly-empty) Pandas dataframe\n\n\n\n---\n\n\n\n## get_constraints()\nname | arguments| return\n-----| ---------| -------\n*get_constraints*| | pd.DataFrame\n\n    Return all the database constraints, and some of their attributes,\n    as a Pandas dataframe with 3 columns:\n        name        EXAMPLE: \"my_constraint\"\n        description EXAMPLE: \"CONSTRAINT ON ( patient:patient ) ASSERT (patient.patient_id) IS UNIQUE\"\n        details     EXAMPLE: \"Constraint( id=3, name='my_constraint', type='UNIQUENESS',\n                              schema=(:patient {patient_id}), ownedIndex=12 )\"\n\n    :return:  A (possibly-empty) Pandas dataframe\n\n\n\n---\n\n\n\n## create_index()\nname | arguments| return\n-----| ---------| -------\n*create_index*| label: str, key: str| bool\n\n    Create a new database index, unless it already exists,\n    to be applied to the specified label and key (property).\n    The standard name given to the new index is of the form label.key\n\n    EXAMPLE - to index nodes labeled \"car\" by their key \"color\":\n                    create_index(\"car\", \"color\")\n              This new index - if not already in existence - will be named \"car.color\"\n\n    If an existing index entry contains a list of labels (or types) such as [\"l1\", \"l2\"] ,\n    and a list of properties such as [\"p1\", \"p2\"] ,\n    then the given pair (label, key) is checked against (\"l1_l2\", \"p1_p2\"), to decide whether it already exists.\n\n    :param label:   A string with the node label to which the index is to be applied\n    :param key:     A string with the key (property) name to which the index is to be applied\n    :return:        True if a new index was created, or False otherwise\n\n\n\n---\n\n\n\n## create_constraint()\nname | arguments| return\n-----| ---------| -------\n*create_constraint*| label: str, key: str, type=\"UNIQUE\", name=None| bool\n\n    Create a uniqueness constraint for a node property in the graph,\n    unless a constraint with the standard name of the form `{label}.{key}.{type}` is already present\n\n    Note: it also creates an index, and cannot be applied if an index already exists.\n\n    EXAMPLE: create_constraint(\"patient\", \"patient_id\")\n\n    :param label:   A string with the node label to which the constraint is to be applied\n    :param key:     A string with the key (property) name to which the constraint is to be applied\n    :param type:    For now, the default \"UNIQUE\" is the only allowed option\n    :param name:    Optional name to give to the new constraint; if not provided, a\n                        standard name of the form `{label}.{key}.{type}` is used.  EXAMPLE: \"patient.patient_id.UNIQUE\"\n    :return:        True if a new constraint was created, or False otherwise\n\n\n\n---\n\n\n\n## drop_index()\nname | arguments| return\n-----| ---------| -------\n*drop_index*| name: str| bool\n\n    Eliminate the index with the specified name.\n\n    :param name:    Name of the index to eliminate\n    :return:        True if successful or False otherwise (for example, if the index doesn't exist)\n\n\n\n---\n\n\n\n## drop_constraint()\nname | arguments| return\n-----| ---------| -------\n*drop_constraint*| name: str| bool\n\n    Eliminate the constraint with the specified name.\n\n    :param name:    Name of the constraint to eliminate\n    :return:        True if successful or False otherwise (for example, if the constraint doesn't exist)\n\n\n\n---\n\n\n\n## drop_all_constraints()\nname | arguments| return\n-----| ---------| -------\n*drop_all_constraints*| | None\n\n    Eliminate all the constraints in the database\n\n    :return:    None\n\n\n\n---\n\n\n\n## drop_all_indexes()\nname | arguments| return\n-----| ---------| -------\n*drop_all_indexes*| including_constraints=True| None\n\n    Eliminate all the indexes in the database and, optionally, also get rid of all constraints\n\n    :param including_constraints:   Flag indicating whether to also ditch all the constraints\n    :return:                        None\n\n\n\n---\n\n\n# METHODS TO CREATE/MODIFY DATA\n\n\n\n## create_node_by_label_and_dict()\nname | arguments| return\n-----| ---------| -------\n*create_node_by_label_and_dict*| label: str, items=None| int\n\n    Create a new node with the given label and with the attributes/values specified in the items dictionary\n    Return the Neo4j internal ID of the node just created.\n\n    :param label:   A string with a Neo4j label (ok to include blank spaces)\n    :param items:   An optional dictionary.  EXAMPLE: {'age': 22, 'gender': 'F'}    \n    :return:        An integer with the Neo4j internal ID of the node just created\n\n\n\n---\n\n\n\n## delete_nodes_by_label()\nname | arguments| return\n-----| ---------| -------\n*delete_nodes_by_label*| delete_labels=None, keep_labels=None, batch_size = 50000| None\n\n    Empty out (by default completely) the Neo4j database.\n    Optionally, only delete nodes with the specified labels, or only keep nodes with the given labels.\n    Note: the keep_labels list has higher priority; if a label occurs in both lists, it will be kept.\n    IMPORTANT: it does NOT clear indexes; \"ghost\" labels may remain!  To get rid of those, run drop_all_indexes()\n\n    :param delete_labels:   An optional string, or list of strings, indicating specific labels to DELETE\n    :param keep_labels:     An optional string or list of strings, indicating specific labels to KEEP\n                                (keep_labels has higher priority over delete_labels)\n    :return:                None\n\n\n\n---\n\n\n\n## clean_slate()\nname | arguments| return\n-----| ---------| -------\n*clean_slate*| keep_labels=None, drop_indexes=True, drop_constraints=True| None\n\n    Use this to get rid of absolutely everything in the database.\n    Optionally, keep nodes with a given label, or keep the indexes, or keep the constraints\n\n    :param keep_labels:     An optional list of strings, indicating specific labels to KEEP\n    :param drop_indexes:    Flag indicating whether to also ditch all indexes (by default, True)\n    :param drop_constraints:Flag indicating whether to also ditch all constraints (by default, True)\n    :return:                None\n\n\n\n---\n\n## extract_entities()\nname | arguments| return\n-----| ---------| -------\n*extract_entities*| mode='merge', label=None, cypher=None, cypher_dict=None, target_label=None, property_mapping={}, relationship=None, direction=None| None\n                         \n    Create new nodes using data from other nodes\n        \n        Example use:\n        df = pd.DataFrame({'id': [1, 2, 3, 4, 5], 'color': ['red', 'red', 'red', 'blue', 'blue']})\n        db.load_df(df, label='Thing')\n        db.extract_entities(\n            label='Thing',\n            target_label='Color',\n            relationship='OF',\n            property_mapping=['color'])\n        \n        :param mode:str; assert mode in ['merge', 'create']\n        :param label:str; label of the nodes to extract data from\n        :param cypher: str; only of label not provided: cypher that returns id(node) of the nodes to extract data from\n            EXAMPLE:\n            cypher = '''\n            MATCH (f:`Source Data Table`{{_domain_:$domain}})-[:HAS_DATA]->(node:`Source Data Row`)\n            RETURN id(node)\n            '''\n        :param cypher_dict: None/dict parameters required for the cypher query\n            EXAMPLE:\n            cypher_dict={'domain':'ADSL'}\n        :param target_label: label of the newly created nodes with extracted data\n        :param property_mapping: dict or list\n            if dict: keys correspond to the property names of source data (e.g. Source Data Row) and values correspond\n            to to the property names of the target class where the data is extracted to\n            \t\tif list: properties of the extracted node (as per the list) will extracted and will be named same as\n            \t\tin the source node\n        :param relationship: type of the relationship (to/from the extraction node) to create\n        :param direction: direction of the relationship to create (>: to the extraction node, <: from the extraction node)\n        :return: None\n        \n![extract_entities](docs/extract_entities.png)  \nThe part in green would be created as the result of operation in the \"Example use\".        \n---\n\n\n# METHODS TO CREATE NEW RELATIONSHIPS\n\n## link_entities()\nname | arguments| return\n-----| ---------| -------\n*link_entities*| left_class:str, right_class:str, relationship=\"\\_default_\", cond_via_node=None, cond_left_rel=None, cond_right_rel=None, cond_cypher=None, cond_cypher_dict=None| None\n\n    Creates relationship of type {relationship}\n    Example use:\n    db.link_entities(left_class='Thing', right_class='Thing',\n                cond_via_node=\"Color\",\n                cond_left_rel=\"<OF\",\n                cond_right_rel=\"OF>\",\n                relationship=\"SAME_COLOR\")\n                \n        :param left_class:      Name of the left class \n        :param right_class:     Name of the right class\n        :param relationship:    Name to give the relationship (if None: will use name of right_class (f'HAS_{right_class.upper())')\n        :param cond_via_node:   Name of central node from which relationships will be created\n        :param cond_left_rel:   Name and direction of relationship from right_class (e.g. FROM_DATA> or <FROM_DATA)\n        :param cond_right_rel:  Name and direction of relationship from left_class (e.g. FROM_DATA> or <FROM_DATA)\n        :param cond_cypher:     (optional) - if not None: cond_via_node, cond_left_rel, cond_right_rel will be ignored\n                                instead the cypher query will be run which return nodes 'left' and 'right' to be linked \n                                with relationship of type {relationship}\n        :param cond_cypher_dict: parameters required for the cypher query\n        :return: None\n\n![link_entities](docs/link_entities.png)  \nSAME_COLOR relationships in green would be created as the result of operation in \"Example use\" \n---\n\n## link_nodes_on_matching_property()\nname | arguments| return\n-----| ---------| -------\n*link_nodes_on_matching_property*| label1:str, label2:str, property1:str, rel:str, property2=None| None\n\n    Locate any pair of Neo4j nodes where all of the following hold:\n                        1) the first one has label1\n                        2) the second one has label2\n                        3) the two nodes agree in the value of property1 (if property2 is None),\n                                    or in the values of property1 in the 1st node and property2 in the 2nd node\n\n    For any such pair found, add a relationship - with the name specified in the rel argument - from the 1st to 2nd node,\n    unless already present\n\n    :param label1:      A string against which the label of the 1st node must match\n    :param label2:      A string against which the label of the 2nd node must match\n    :param property1:   Name of property that must be present in the 1st node (and also in 2nd node, if property2 is None)\n    :param property2:   Name of property that must be present in the 2nd node (may be None)\n    :param rel:         Name to give to all relationships that get created\n    :return:            None\n\n\n\n---\n\n\n\n## link_nodes_on_matching_property_value()\nname | arguments| return\n-----| ---------| -------\n*link_nodes_on_matching_property_value*| label1:str, label2:str, prop_name:str, prop_value:str, rel:str| None\n\n    Locate any pair of Neo4j nodes where all of the following hold:\n                        1) the first one has label1\n                        2) the second one has label2\n                        3) both nodes have a property with the specified name\n                        4) the string values of the properties in (3) in the two nodes are both equal to the specified value\n    For any such pair found, add a relationship - with the name specified in the rel argument - from the 1st to 2nd node,\n    unless already present\n\n    :param label1:      A string against which the label of the 1st node must match\n    :param label2:      A string against which the label of the 2nd node must match\n    :param prop_name:   Name of property that must be present in both nodes\n    :param prop_value:  A STRING value that the above property must have in both nodes\n    :param rel:         Name to give to all relationships that get created\n    :return:            None\n\n\n\n---\n\n\n\n## link_nodes_by_ids()\nname | arguments| return\n-----| ---------| -------\n*link_nodes_by_ids*| node_id1:int, node_id2:int, rel:str, rel_props = None| None\n\n    Locate the pair of Neo4j nodes with the given Neo4j internal ID's.\n    If they are found, add a relationship - with the name specified in the rel argument,\n    and with the specified optional properties - from the 1st to 2nd node, unless already present\n\n    :param node_id1:    An integer with the Neo4j internal ID to locate the 1st node\n    :param node_id2:    An integer with the Neo4j internal ID to locate the 2nd node\n    :param rel:         A string specifying a Neo4j relationship name\n    :param rel_props:   Optional dictionary with the relationship properties.  EXAMPLE: {'since': 2003, 'code': 'xyz'}\n    :return:         None\n\n\n\n---\n\n\n# METHODS TO READ IN DATA\n\n\n\n## load_df()\nname | arguments| return\n-----| ---------| -------\n*load_df*| df:pd.DataFrame, label:str, merge=True, primary_key=None, rename=None, max_chunk_size = 10000| None\n\n    Load a Pandas data frame into Neo4j.\n    Each line is loaded as a separate node.\n\n    :param df:              A Pandas data frame to import into Neo4j\n    :param label:           String with Neo4j label to use on the newly-created nodes\n    :param merge:           If true, records are \"merged\" (added only if not present); otherwise, always added\n    :param primary_key:     Only applicable when merging\n    :param rename:          Optional dictionary to rename columns\n    :param max_chunk_size:  To limit the number of rows loaded at one time\n    :return:                None\n\n## load_dict()\nname | arguments| return\n-----| ---------| -------\n*load_dict*| dct:dict, label=\"Root\", rel_prefix=\"\", maxdepth=10| None\n\n    Loads python dict to Neo4j (auto-unpacking hierarchy)\n    \n    Children of type dict converted into related nodes with relationship {rel_prefix}_{key}\n    Children of type list (of dict or other) converted into:\n        - multiple related nodes for list items of type dict\n        - properties of parent node of type list in case list items        \n    see example in tests.test_json.test_import_custom_json\n    \n    :param dct: python dict to load\n    :param label: label to assign to the root node\n    :param rel_prefix: prefix to add to relationship name from parent to child\n    :param maxdepth: maximum possible depth(of children) of dict\n    :return: None\n\n\n## load_arrows_dict()\nname | arguments| return\n-----| ---------| -------\n*load_arrows_dict*| dct: dict, merge_on = None| result of the corresponding Neo4j query: {'node_map':dict, 'rel_map':dict}\n\n    Loads data created in prototyping tool https://arrows.app/\n    Uses MERGE statement separately on each node and each relationship using all properties as identifying properties\n    Example of use:\n    with open(\"arrows.json\", 'r') as jsonfile:\n        dct = json.load(jsonfile)\n    neo = NeoInterface()\n    neo.load_arrows_dict(dct)\n\n    :param dct: python dict to load\n    :param merge_on: None or dict with label as key and list of properties as value - the properties will be used\n        as identProps in apoc.merge.node, the rest of the properties will be used as onCreateProps and onMatchProps\n    :return: result of the corresponding Neo4j query\n\n---\n\n\n# UTILITY METHODS\n\n\n\n## dict_to_cypher()\nname | arguments| return\n-----| ---------| -------\n*dict_to_cypher*| data_dict: {}| (str, {})\n\n    Turn a Python dictionary (meant for specifying node or relationship attributes)\n    into a string suitable for Cypher queries,\n    plus its corresponding data-binding dictionary.\n\n    EXAMPLE :\n                {'cost': 65.99, 'item description': 'the \"red\" button'}\n            will lead to\n                (\n                    '{`cost`: $par_1, `item description`: $par_2}',\n                    {'par_1': 65.99, 'par_2': 'the \"red\" button'}\n                )\n\n    Note that backticks are used in the Cypher string to allow blanks in the key names.\n    Consecutively-named dummy variables ($par_1, $par_2, etc) are used,\n    instead of names based on the keys of the data dictionary (such as $cost),\n    because the keys might contain blanks.\n\n    :param data_dict:   A Python dictionary\n    :return:            A pair consisting of a string suitable for Cypher queries,\n                            and a corresponding data-binding dictionary.\n                        If the passed dictionary is empty or None,\n                            the pair returned is (\"\", {})\n\n\n\n---\n\n\n# METHODS TO SUPPORT DEBUGGING\n\n\n\n## neo4j_query_params_from_dict()\nname | arguments| return\n-----| ---------| -------\n*neo4j_query_params_from_dict*| params:dict, char_limit = 500| str\n\n    :param params: query parameters in a form of python dict\n    :param char_limit: limit number of characters to print\n    :return: string of parameters to paste into Neo4j browser for testing procedures in the browser\n\n\n\n---\n\n\n# METHODS TO SUPPORT JSON IMPORT/EXPORT\n\n\n\n## export_dbase_json()\nname | arguments| return\n-----| ---------| -------\n*export_dbase_json*| | {}\n\n    Export the entire Neo4j database as a JSON string\n    EXAMPLE:\n    { 'nodes': 2,\n      'relationships': 1,\n      'properties': 6,\n      'data': '[{\"type\":\"node\",\"id\":\"3\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Adam\",\"age\":32,\"male\":true}},\\n\n                {\"type\":\"node\",\"id\":\"4\",\"labels\":[\"User\"],\"properties\":{\"name\":\"Eve\",\"age\":18}},\\n\n                {\"id\":\"1\",\"type\":\"relationship\",\"label\":\"KNOWS\",\"properties\":{\"since\":2003},\"start\":{\"id\":\"3\",\"labels\":[\"User\"]},\"end\":{\"id\":\"4\",\"labels\":[\"User\"]}}\\n\n               ]'\n    }\n    NOTE - the Neo4j Browser uses a slightly different format for NODES:\n            {\n              \"identity\": 4,\n              \"labels\": [\n                \"User\"\n              ],\n              \"properties\": {\n                \"name\": \"Eve\",\n                \"age\": 18\n              }\n            }\n          and a substantially more different format for RELATIONSHIPS:\n            {\n              \"identity\": 1,\n              \"start\": 3,\n              \"end\": 4,\n              \"type\": \"KNOWS\",\n              \"properties\": {\n                \"since\": 2003\n              }\n            }\n\n    IMPORTANT - this function requires that the APOC library be installed alongside Neo4j\n    \n    :return:    A dictionary specifying the number of nodes exported,\n                the number of relationships, and the number of properties,\n                as well as a \"data\" field with the actual export in JSON format\n\n\n\n---\n\n\n\n## import_json_data()\nname | arguments| return\n-----| ---------| -------\n*import_json_data*| json_str: str|\n\n    Import nodes and/or relationships into the database, as directed by the given data dump in JSON form.\n    Note: the id's of the nodes need to be shifted,\n          because one cannot force the Neo4j internal id's to be any particular value...\n          and, besides (if one is importing into an existing database), particular id's may already be taken.\n\n    :param json_str:    A JSON string with the format specified under export_dbase_json()\n    :return:            A status message with import details if successful, or an Exception if not\n\n\n\n---\n\n\n# METHODS TO SUPPORT RDF PROCEDURES\n\n\n\n## rdf_generate_uri()\nname | arguments| return\n-----| ---------| -------\n*rdf_generate_uri*| dct={}, include_label_in_uri=True, prefix='neo4j://graph.schema#', add_prefixes=[], sep = '/', uri_prop = 'uri'| None\n\n    A method that\n        - on the neo4j nodes with labels equal to keys of :dict dictionary\n        - sets additional label Resource (for handling in RDF)\n        - sets property with name :uri_prop with value that starts with prefix folled by a string\n        built by concatenating with separator :sep the list of :add_prefixes together with values of\n        properties on each node that are specified in the values of the :dict (different set for each Neo4j label)\n    Used for the purpose of being able to save and restore subgraphs using methods rdf_get_subgraph and\n    rdf_import_subgraph_inline.\n    :param dct: dictionary describing set of node properties that construct a primary key (and eventually uri) for that node\n    EXAMPLE:\n    dct = {\n        'Vehicle': ['type', 'model'],\n        'Car': ['model', 'fuel']\n    }\n    generate_uri(dct)\n    will set property uri like 'neo4j://graph.schema#car/toyota' on nodes with labels Vehicle\n    (in case v.type == 'car' and v.model == 'toyota')\n    and set property uri like 'neo4j://graph.schema#toyota/petrol' on nodes with labels Car\n    (in case c.model == 'toyota' and v.fuel == 'petrol')\n\n    :param prefix: a prefix for uri\n    :param add_prefixes: list of prefixes to prepend uri with (after prefix), list joined with :sep separator\n    :param sep: separator for joining add_perfixes and the primary keys into uri\n    :return: None\n\n\n\n---\n\n\n\n## rdf_get_subgraph()\nname | arguments| return\n-----| ---------| -------\n*rdf_get_subgraph*| cypher:str, cypher_dict={}, format=\"Turtle\"| str\n\n    A method that returns an RDF serialization of a subgraph specified by :cypher query\n    LIMITATION: properties on Relationship are not saved!\n\n    :param cypher: cypher query to return a subgraph\n    :param cypher_dict: parameters required for the cypher query\n    :param format: RDF format in which to serialize output\n    :return: str - RDF serialization of subgraph\n\n\n\n---\n\n\n\n## rdf_import_fetch()\nname | arguments| return\n-----| ---------| -------\n*rdf_import_fetch*| url: str, format=\"Turtle\"|\n\n---\n\n\n\n## rdf_import_subgraph_inline()\nname | arguments| return\n-----| ---------| -------\n*rdf_import_subgraph_inline*| rdf:str, format=\"Turtle\"|\n\n    A method that creates/merges appropriate nodes in Neo4j as specified in the provided :rdf string\n    The nodes will be MERGEd by 'uri' property\n\n    :param rdf: RDF serialization of Neo4j nodes and relationships\n    :param format: RDF serialization format\n    :return: returns a dictionary with keys triplesParsed, triplesLoaded as a summary of the operation\n\n\n\n---\n\n\n\n## rdf_get_graph_onto()\nname | arguments| return\n-----| ---------| -------\n*rdf_get_graph_onto*| |\n\n    A method that returns an ontology autogenerated from existing nodes in Neo4j (provided by n10s(neosemantics) library\n\n    :return: str - serialized ontology\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": " Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 GlaxoSmithKline Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neointerface",
            "package_url": "https://pypi.org/project/neointerface/",
            "platform": null,
            "project_url": "https://pypi.org/project/neointerface/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/neointerface/3.1.8/",
            "requires_dist": [
                "setuptools (==56.0.0)",
                "neo4j (==4.4.0)",
                "numpy (==1.19.5)",
                "pandas (==1.1.5)",
                "pytest (==6.2.4)",
                "pytest-unordered (==0.4.1)",
                "requests (==2.25.1)",
                "networkx (==2.5.1)"
            ],
            "requires_python": ">=3.6",
            "summary": "A Python interface to use the Neo4j graph database",
            "version": "3.1.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15044156,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "857d7af3781270f8be85a88795d74eee",
                    "sha256": "28ae8a4a69f17e10c15a152a72ebb525e5091184f687682016283234c869fd6d"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "857d7af3781270f8be85a88795d74eee",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 47920,
                "upload_time": "2022-09-09T13:45:47",
                "upload_time_iso_8601": "2022-09-09T13:45:47.856388Z",
                "url": "https://files.pythonhosted.org/packages/ce/91/f59ef6af5d201320573e6c06a211f5ed2aafc07adb70f5a7ccd4d09ad0a8/neointerface-3.1.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a6e2f3390f27ddad145d6a1cf5622506",
                    "sha256": "bb8eca9b7c8cae64d004c298c78d49d995ecd735d44c514969e52d1d3107d887"
                },
                "downloads": -1,
                "filename": "neointerface-3.1.8.tar.gz",
                "has_sig": false,
                "md5_digest": "a6e2f3390f27ddad145d6a1cf5622506",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 72214,
                "upload_time": "2022-09-09T13:45:49",
                "upload_time_iso_8601": "2022-09-09T13:45:49.454919Z",
                "url": "https://files.pythonhosted.org/packages/e2/34/95eeb63913b6e57d2effa05a0702e8ceb0ad10ad825f72312f25e6bc7ae9/neointerface-3.1.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}