{
    "0.1.1": {
        "info": {
            "author": "",
            "author_email": "Tony White <tony.white_dev@proton.me>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "![Mal4py API Banner](https://image.myanimelist.net/ui/OK6W_koKDTOqqqLDbIoPAphlZzlTj5CPK0fFssPvFnc)\n![Python Lang](https://pbs.twimg.com/media/DALAHaRVoAASaTr.png)\n# MAL4Py \n\nMAL API\nAn unofficial MyAnimeList API for Python 3.\n  \nCurrently, MAL4Py is a small package for download and sync information from MyAnimeList.\n\n#### Version 0.1.1\n\n## API Documentation\n[MAL API v2 Beta Documentation](https://myanimelist.net/apiconfig/references/api/v2)\n\n## Installation and Usage\n\nTo install the library:\n\n```\n\npip install -U mal4py\n\n```\n\nTo import the library:\n\n```python\n\nfrom mal4py import *\n\n```\n\n## Example\n\nTo call the API, first you need to create an object Auth.\n\n#### Auth Login Example\n\n  \n\n```python\n\nimport  asyncio\nfrom mal4py import Auth, get_new_code_verifier, MalToken\n\n\"\"\"\n\tFor all cases you must declarate Auth object\n\"\"\"\n# ID Client MAL App Android, recomend replace for own ID Client\nauth = Auth(\"6114d00ca681b7701d1e15fe11a4987e\") \n\n\n# UNOFFICIAL WAY TO LOGIN\n\"\"\"\n\tThis way login can execute basic querys to MAL API, but only unstable_login can you edit user info.\n\"\"\"\n\n# If you use this way, must load Id Client MAL \"6114d00ca681b7701d1e15fe11a4987e\" others Id Client Don't Support way\n\n# login with user and password unstable way\naccount = asyncio.run(auth.unstable_login(\"my_user\",\"my_password\"))\n\n# Guest login without user and password unstable way\naccount = asyncio.run(auth.guest_login())\n\n\n# OFFICIAL WAY TO LOGIN (recomended)\n\"\"\" \n\tOAUTH Way generate Code\n\"\"\"\ncode_verifier = get_new_code_verifier()\nurl = auth.get_oauth_url(code_verifier)\nprint(url)\n\n# Open returned url, accept oauth and use returned code to authorize\n\nauthorization_code = input('Copy-paste the Authorization Code: ').strip()\naccount = asyncio.run(auth.authorize_with_code(authorization_code,code_verifier))\n\n\"\"\"\n\tLoad Token saved previously\n\"\"\"\n\n# Load Token from saved String\n\njsontoken = '{\"token_type\":\"Bearer\",\"expires_in\":xxx,\"access_token\":\"my_access_Token\",\"refresh_token\":\"my_refresh_token\"}'\naccount = auth.authorize_with_json_string(jsontoken)\n\n# Load Token from saved Dict\n\ntoken = {\"token_type\":\"Bearer\",\"expires_in\":xxx,\"access_token\":\"my_access_Token\",\"refresh_token\":\"my_refresh_token\"}\naccount = auth.authorize_with_json_obj(token)\n\n# Other way to Load Token load from MalToken object saved\n\nmal_token = MalToken._from_json_string(jsontoken)\n# Or\nmal_token = MalToken._from_json_obj(token)\n# Load MalToken\naccount = auth.load_token(mal_token)\n\n```\nYou can generate Token and load usign this script of [ZeroCrystal](https://gitlab.com/-/snippets/2039434)\n\n#### Search Query Example\n\n```python\n\nfrom mal import MalAccount\n\n\n# Query Anime for all login types\n\nsearch = account.anime.get_details(anime_id=44511)\nsearch = account.anime.get_list(\"chainsaw\",limit=3)\nsearch = account.anime.get_seasonal(2022,\"winter\",limit=3)\nsearch = account.anime.get_ranking(limit=3)\n\n\n# Query Anime for oAuth only or password and login user\n\nsearch = account.anime.get_suggested(limit=3)\n\n\n# Query Manga for all login types\n\nsearch = account.manga.get_details(manga_id=13)\nsearch = account.manga.get_list(\"chainsaw\",limit=3)\nsearch = account.manga.get_ranking(limit=3)\n\n\n# Query Forum for all login types\n# Actually MAL API have problems with integrity the object returned. (THIS BETA)\n\nsearch = account.forum.get_board()\nsearch = account.forum.get_topic_detail(topic_id=41)\nsearch = account.forum.get_topics(q=\"love\",subboard_id=2,board_id=0)\n\n\n# Query User for only oAuth or user and password login \n\nsearch = account.user.get_my_info()\nsearch = account.user.update_mangalist_status(13,{\"status\":\"reading\",\"is_rereading\":False,\"score\":8,\"num_volumes_read\":1,\"num_chapters_read\":2,\"priority\":1,\"num_times_reread\":0,\"reread_value\":0,\"tags\":\"Myread\",\"comments\":\"Amazing Manga\"})\nsearch = account.user.delete_mangalist_item(13)\nsearch = account.user.get_mangalist()\nsearch = account.user.update_animelist_status(21,{\"status\":\"on_hold\",\"is_rewatching\":False,\"score\":9,\"num_watched_episodes\":110,\"priority\":0,\"num_times_rewatched\":0,\"rewatch_value\":0,\"tags\":\"\",\"comments\":\"Me gusta la serie\"})\nsearch = account.user.delete_animelist_item(21)\nsearch = account.user.get_animelist(status=\"watching\")\n\n```\n\n## References\n\nFor each parameter required in any query you can review the documentation at [MAL API](https://myanimelist.net/apiconfig/references/api/v2)\n\nThis project was inspired by [Node-MyAnimeList](https://github.com/PolyMeilex/node-myanimelist) and [Python MAL API](https://github.com/darenliang/mal-api) projects. \n\nThanks to them.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "api,myanimelist,MAL,Anime,Manga",
            "license": "MIT License  Copyright (c) 2022 AntoBlanco  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "maintainer": "",
            "maintainer_email": "antoblanco <tony.white_dev@proton.me>",
            "name": "mal4py",
            "package_url": "https://pypi.org/project/mal4py/",
            "platform": null,
            "project_url": "https://pypi.org/project/mal4py/",
            "project_urls": {
                "Bug Tracker": "https://github.com/AntoBlanco/MAL4Py/issues",
                "Homepage": "https://github.com/AntoBlanco/MAL4Py"
            },
            "release_url": "https://pypi.org/project/mal4py/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "MAL API An unofficial MyAnimeList API for Python 3",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16042603,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "451808d1fda5425c9d801ab78ecd32e5",
                    "sha256": "1b91c8a0c83d8b2f852ab0be60513c7b0810e2fc5e33556cb18bcce5040947bd"
                },
                "downloads": -1,
                "filename": "mal4py-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "451808d1fda5425c9d801ab78ecd32e5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 9570,
                "upload_time": "2022-12-09T01:14:58",
                "upload_time_iso_8601": "2022-12-09T01:14:58.496468Z",
                "url": "https://files.pythonhosted.org/packages/64/95/0ab9494fd816b3537cbb7186b5f4334e0a97fd20011790e0ab7904e308b2/mal4py-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a3ab26352bce9d0121399a25e0333aa2",
                    "sha256": "dd924abacb50daf60506daea2ef046e396445be58b7dfae12f3655919fbaf801"
                },
                "downloads": -1,
                "filename": "mal4py-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a3ab26352bce9d0121399a25e0333aa2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 10288,
                "upload_time": "2022-12-09T01:15:03",
                "upload_time_iso_8601": "2022-12-09T01:15:03.276686Z",
                "url": "https://files.pythonhosted.org/packages/f8/25/4bf7f3494d46a5e68514179ac70da849f9f3be330f47634345dfe2042f9c/mal4py-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}