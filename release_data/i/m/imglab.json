{
    "0.1.0": {
        "info": {
            "author": "",
            "author_email": "imglab <support@imglab.io>",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# imglab\n\n`imglab` is the official Python package to integrate with imglab services.\n\n## Installation\n\n```sh\n$ pip install imglab\n```\n\n## Python compatibility\n\n`imglab` has been successfully tested with the following Python versions: `3.10`, `3.9`, `3.8`, `3.7`, `3.6`.\n\n## Generating URLs\n\nYou can use `imglab.url` function to generate imglab compatible URLs for your application.\n\nThe easiest way to generate a URL is to specify the name of the `source`, a `path` and required `parameters`:\n\n```python\n>>> import imglab\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600)\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600'\n\n>>> imglab.url(\"avatars\", \"user-01.jpeg\", width=300, height=300, mode=\"crop\", crop=\"face\", format=\"webp\")\n'https://avatars.imglab-cdn.net/user-01.jpeg?width=300&height=300&mode=crop&crop=face&format=webp'\n\n```\n\nIf some specific settings are required for the source you can use an instance of `imglab.Source` class instead:\n\n```python\n>>> imglab.url(imglab.Source(\"assets\"), \"image.jpeg\", width=500, height=600)\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600'\n\n```\n\n### Using secure image sources\n\nFor sources that require signed URLs you can specify `secure_key` and `secure_salt` attributes:\n\n```python\n>>> source = imglab.Source(\"assets\", secure_key=\"55IX1RVlDHpgl/4D\", secure_salt=\"ITvYA2lPfyz0w8/v\")\n>>> imglab.url(source, \"image.jpeg\", width=500, height=600)\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&signature=16sKGTU_dgMVqzU1JUBfkkmUV3vCKoZFkwVBYiqnGZU'\n\n```\n\n`signature` query parameter will be automatically generated and attached to the returned URL.\n\n> Note: `secure_key` and `secure_salt` attributes are secrets that should not be added to a code repository. Please use environment vars or other secure method to use them in your application.\n\n### Using HTTP instead of HTTPS\n\nIn the case that HTTP schema is required instead of HTTPS you can set `https` attribute to `False` when creating the source:\n\n```python\n>>> imglab.url(imglab.Source(\"assets\", https=False), \"image.jpeg\", width=500, height=600)\n'http://assets.imglab-cdn.net/image.jpeg?width=500&height=600'\n\n```\n\n> Note: HTTPS is the default and recommended way to generate URLs with imglab.\n\n### Specifying parameters\n\nAny parameter from the imglab API can be used to generate URLs with `imglab.url` method. For parameters that required dashes characters like `trim-color` you can use regular underscore argument names like `trim_color` those will be normalized in the URL generation to it's correct form:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", trim=\"color\", trim_color=\"black\")\n'https://assets.imglab-cdn.net/image.jpeg?trim=color&trim-color=black'\n\n```\n\nIf necessary you can pass a dictionary instead of a list of keyword arguments, unpacking the dictionary with `**` operator:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", **{\"trim\": \"color\", \"trim-color\": \"black\"})\n'https://assets.imglab-cdn.net/image.jpeg?trim=color&trim-color=black'\n\n```\n\n### Specifying color parameters\n\nSome imglab parameters can receive a color as value. It is possible to specify these color values as strings:\n\n```python\n>>> # Specifying a RGB color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"255,0,0\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0'\n\n>>> # Specifying a RGBA color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"255,0,0,128\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0%2C128'\n\n>>> # Specifying a named color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"red\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=red'\n\n>>> # Specifying a hexadecimal color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"F00\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=F00'\n\n```\n\nYou can additionally use `imglab.color` helper to specify color values:\n\n```python\n>>> from imglab import color\n\n>>> # Using color helper function for a RGB color\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=color(255, 0, 0))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0'\n\n>>> # Using color helper function for a RGBA color\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=color(255, 0, 0, 128))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0%2C128'\n\n>>> # Using color helper function for a named color\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=color(\"red\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=red'\n\n```\n\n> Note: specify hexadecimal color values using `imglab.color` helper function is not allowed. You can use strings instead.\n\n### Specifying position parameters\n\nSome imglab parameters can receive a position as value. It is possible to specify these values using strings:\n\n```python\n>>> # Specifying a horizontal and vertical position as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=\"left,top\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left%2Ctop'\n\n>>> # Specifying a vertical and horizontal position as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=\"top,left\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=top%2Cleft'\n\n>>> # Specifying a position as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=\"left\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left'\n\n```\n\nYou can additionally use `imglab.position` helper function to specify position values:\n\n```python\n>>> from imglab import position\n\n>>> # Using position function helper for a horizontal and vertical position\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=position(\"left\", \"top\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left%2Ctop'\n\n>>> # Using position function helper for a vertical and horizontal position\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=position(\"top\", \"left\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=top%2Cleft'\n\n>>> # Using position function helper for a single position\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=position(\"left\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left'\n\n```\n\n### Specifying URL parameters\n\nSome imglab parameters can receive URLs as values. It is possible to specify these parameter values as strings:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, watermark=\"logo.svg\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=logo.svg'\n\n```\n\nAnd even use parameters if required:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, watermark=\"logo.svg?width=100&format=png\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=logo.svg%3Fwidth%3D100%26format%3Dpng'\n\n```\n\nAdditionally you can use nested `imglab.url` calls to specify these URL values:\n\n```python\n>>> imglab.url(\n...     \"assets\",\n...     \"image.jpeg\",\n...     width=500,\n...     height=600,\n...     watermark=imglab.url(\"assets\", \"logo.svg\", width=100, format=\"png\")\n... )\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=https%3A%2F%2Fassets.imglab-cdn.net%2Flogo.svg%3Fwidth%3D100%26format%3Dpng'\n\n```\n\nIf the resource is located in a different source we can specify it using `imglab.url`:\n\n```python\n>>> imglab.url(\n...     \"assets\",\n...     \"image.jpeg\",\n...     width=500,\n...     height=600,\n...     watermark=imglab.url(\"marketing\", \"logo.svg\", width=100, format=\"png\")\n... )\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=https%3A%2F%2Fmarketing.imglab-cdn.net%2Flogo.svg%3Fwidth%3D100%26format%3Dpng'\n\n```\n\nUsing secure sources for URLs parameter values is possible too:\n\n```python\n>>> marketing = imglab.Source(\"marketing\", secure_key=\"55IX1RVlDHpgl/4D\", secure_salt=\"ITvYA2lPfyz0w8/v\")\n>>> imglab.url(\n...     \"assets\",\n...     \"image.jpeg\",\n...     width=500,\n...     height=600,\n...     watermark=imglab.url(marketing, \"logo.svg\", width=100, format=\"png\")\n... )\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=https%3A%2F%2Fmarketing.imglab-cdn.net%2Flogo.svg%3Fwidth%3D100%26format%3Dpng%26signature%3DMd4V23DOkn5hHw_nAjkEG9lKHOZ8wjDBmYi2d5TCaCc'\n\n```\n\n`signature` query parameter will be automatically generated and attached to the nested URL value.\n\n### Specifying URLs with expiration timestamp\n\nThe `expires` parameter allows you to specify a UNIX timestamp in seconds after which the request is expired.\n\nIf a `datetime` or `struct_time` instance is specified as value to `expires` parameter it will be automatically converted to UNIX timestamp. In the following example, we specify an expiration time of one hour:\n\n```python\nimport datetime\nexpires_at = datetime.datetime.utcnow() + datetime.timedelta(hours=1)\nimglab.url(\"assets\", \"image.jpeg\", width=500, expires=expires_at)\n```\n\n> Note: The `expires` parameter should be used in conjunction with secure sources. Otherwise, `expires` value could be tampered with.\n\n## Generating URLs for on-premises imglab server\n\nFor on-premises imglab server is possible to define custom sources pointing to your server location.\n\n* `https` - a `boolean` value specifying if the source should use https or not (default: `True`)\n* `host` - a `string` specifying the host where the imglab server is located. (default: `\"imglab-cdn.net\"`)\n* `port` - an `integer` specifying a port where the imglab server is located. (default: `None`)\n* `subdomains` - a `bool` value specifying if the source should be specified using subdomains instead of using the path. (default: `True`)\n\nIf we have our on-premises imglab server at `http://my-company.com:8080` with a source named `images` we can use the following source settings to access a `logo.png` image:\n\n```python\n>>> source = imglab.Source(\"images\", https=False, host=\"my-company.com\", port=8080)\n>>> imglab.url(source, \"logo.png\", width=300, height=300, format=\"png\")\n'http://images.my-company.com:8080/logo.png?width=300&height=300&format=png'\n\n```\n\nIt is possible to use secure sources too:\n\n```python\n>>> source = imglab.Source(\n...     \"images\",\n...     https=False,\n...     host=\"my-company.com\",\n...     port=8080,\n...     secure_key=\"55IX1RVlDHpgl/4D\",\n...     secure_salt=\"ITvYA2lPfyz0w8/v\"\n... )\n>>> imglab.url(source, \"logo.png\", width=300, height=300, format=\"png\")\n'http://images.my-company.com:8080/logo.png?width=300&height=300&format=png&signature=spnbiXwImfp6PpihAqVJenm0IGdC-h5inIhViYp4_TU'\n\n```\n\n### Using sources with disabled subdomains\n\nIn the case that your on-premises imglab server is configured to use source names as paths instead of subdomains you can set `subdomains` attribute to `False`:\n\n```python\n>>> source = imglab.Source(\n...     \"images\",\n...     https=False,\n...     host=\"my-company.com\",\n...     port=8080,\n...     subdomains=False\n... )\n>>> imglab.url(source, \"logo.png\", width=300, height=300, format=\"png\")\n'http://my-company.com:8080/images/logo.png?width=300&height=300&format=png'\n\n```\n\n## License\n\nimglab source code is released under [MIT License](LICENSE).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imglab",
            "package_url": "https://pypi.org/project/imglab/",
            "platform": null,
            "project_url": "https://pypi.org/project/imglab/",
            "project_urls": {
                "Homepage": "https://imglab.io",
                "Source Code": "https://github.com/imglab-io/imglab-py"
            },
            "release_url": "https://pypi.org/project/imglab/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Official Python library to integrate with imglab services.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14716600,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "06eb1837f7c273d295c382c07e9205bb",
                    "sha256": "5f72c015623440898df288943cf759f19bf19757dfdcbef5eee6ddc4126bf080"
                },
                "downloads": -1,
                "filename": "imglab-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "06eb1837f7c273d295c382c07e9205bb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 11053,
                "upload_time": "2022-08-10T13:03:33",
                "upload_time_iso_8601": "2022-08-10T13:03:33.340592Z",
                "url": "https://files.pythonhosted.org/packages/b4/d5/7aeedd826bbd54f55f9d932d5290e374c9cb46dbb77cb8f10b0cc2d43fd4/imglab-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c3f505ef806234a9c3e8a6e2630c6d13",
                    "sha256": "8643ab78a0d0fc45aa0a27a34367a18b9859f5398c1a66a0dedef496f1b76cc5"
                },
                "downloads": -1,
                "filename": "imglab-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "c3f505ef806234a9c3e8a6e2630c6d13",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 11862,
                "upload_time": "2022-08-10T13:03:36",
                "upload_time_iso_8601": "2022-08-10T13:03:36.892631Z",
                "url": "https://files.pythonhosted.org/packages/18/a1/72a60a7b95616f94fd3ec6c672d4940df781883147763f47c423088b1598/imglab-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}