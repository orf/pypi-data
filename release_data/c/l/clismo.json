{
    "0.1.0": {
        "info": {
            "author": "Jorge Morgado Vega",
            "author_email": "jorge.morgadov@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "clismo",
            "package_url": "https://pypi.org/project/clismo/",
            "platform": "",
            "project_url": "https://pypi.org/project/clismo/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/clismo/0.1.0/",
            "requires_dist": [
                "typer (>=0.4.0,<0.5.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "Programing language designed por simulating and optimizing client-server like discret events models",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12947511,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ab5be1d786bd907061116dfea5e0b86f",
                    "sha256": "7f1c39e7ca82c346ee4038c71df5646388d00c844e2aab7c389fd5b2af8aefba"
                },
                "downloads": -1,
                "filename": "clismo-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ab5be1d786bd907061116dfea5e0b86f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 84371,
                "upload_time": "2022-02-19T15:02:00",
                "upload_time_iso_8601": "2022-02-19T15:02:00.536533Z",
                "url": "https://files.pythonhosted.org/packages/16/09/6a2fd0e9df792b9bfb3e87a669fec0c454940dc2bf13904d8e7cb35456e3/clismo-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2e96c793be0feb2972a023f623cff58b",
                    "sha256": "81d68f54cf5efba892987821d57087172662ad4df78b069188fff661a14b0a97"
                },
                "downloads": -1,
                "filename": "clismo-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "2e96c793be0feb2972a023f623cff58b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 69995,
                "upload_time": "2022-02-19T15:02:03",
                "upload_time_iso_8601": "2022-02-19T15:02:03.073418Z",
                "url": "https://files.pythonhosted.org/packages/22/b7/6532112e1339a56a2d21c5cb778c46b2c48ba3dfd089ab5a650ceb42c12d/clismo-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Jorge Morgado Vega",
            "author_email": "jorge.morgadov@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "clismo",
            "package_url": "https://pypi.org/project/clismo/",
            "platform": "",
            "project_url": "https://pypi.org/project/clismo/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/clismo/0.1.1/",
            "requires_dist": [
                "typer (>=0.4.0,<0.5.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "Programing language designed for simulating and optimizing client-server like discret events models",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12947511,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "de5c63a10e532ff56c81347f2405aa3b",
                    "sha256": "6fcabc8854b7d1672bce0fefeb36723a8d7b4cb4a76616b4eb3b9d6edee5c725"
                },
                "downloads": -1,
                "filename": "clismo-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "de5c63a10e532ff56c81347f2405aa3b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 92233,
                "upload_time": "2022-02-19T17:53:15",
                "upload_time_iso_8601": "2022-02-19T17:53:15.222315Z",
                "url": "https://files.pythonhosted.org/packages/6d/b8/1b58808e1affdff82b934f67a1b385e729047992426e1c94b7315d6940b3/clismo-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6e2c2dc99931c58fcbf85019a890cffc",
                    "sha256": "9277d8eb7ef26c5f1e6f9f6f85b7741ace96d58b8cbe335e556536b3428db001"
                },
                "downloads": -1,
                "filename": "clismo-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "6e2c2dc99931c58fcbf85019a890cffc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 87088,
                "upload_time": "2022-02-19T17:53:16",
                "upload_time_iso_8601": "2022-02-19T17:53:16.791765Z",
                "url": "https://files.pythonhosted.org/packages/89/e0/b239c0e833ba0705a0211446e5f6c9ee2e11b21de9fc03deac8c412762ce/clismo-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Jorge Morgado Vega",
            "author_email": "jorge.morgadov@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "clismo",
            "package_url": "https://pypi.org/project/clismo/",
            "platform": "",
            "project_url": "https://pypi.org/project/clismo/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/clismo/0.1.2/",
            "requires_dist": [
                "typer (>=0.4.0,<0.5.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "Programing language designed for simulating and optimizing client-server like discret events models",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12947511,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c3bf5227b6ca16d3d3c520982f7aef5e",
                    "sha256": "069a6e8b39182af892dc52b406665dd6a15a1ac86ab167a2cac2406c6210a5bd"
                },
                "downloads": -1,
                "filename": "clismo-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c3bf5227b6ca16d3d3c520982f7aef5e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 92232,
                "upload_time": "2022-02-19T18:00:19",
                "upload_time_iso_8601": "2022-02-19T18:00:19.363810Z",
                "url": "https://files.pythonhosted.org/packages/8a/24/3cd2fe3d32c8b9e7bab801c9498dcab01a9ecf1c9b9882d8325d6d88a760/clismo-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2be25654b52239cf769ab4c87ee9936b",
                    "sha256": "53a56387012860abcba1e7a454a7db909ef96e234ac644bc8eca257a2aacc5d7"
                },
                "downloads": -1,
                "filename": "clismo-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "2be25654b52239cf769ab4c87ee9936b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 87087,
                "upload_time": "2022-02-19T18:00:20",
                "upload_time_iso_8601": "2022-02-19T18:00:20.849340Z",
                "url": "https://files.pythonhosted.org/packages/21/5b/027460d573525d3a1b4269f47e49a2cf2eee32a6f4f558e04f16c1c2d93d/clismo-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Jorge Morgado Vega",
            "author_email": "jorge.morgadov@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "clismo",
            "package_url": "https://pypi.org/project/clismo/",
            "platform": "",
            "project_url": "https://pypi.org/project/clismo/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/clismo/0.1.3/",
            "requires_dist": [
                "typer (>=0.4.0,<0.5.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "Programing language designed for simulating and optimizing client-server like discret events models",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12947511,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "33369c90fce13f2e708f788a4aedc108",
                    "sha256": "ed379021418e608ec8fe1b619d1003db9b12eb0d2492ae107b8438b5dc4823fd"
                },
                "downloads": -1,
                "filename": "clismo-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "33369c90fce13f2e708f788a4aedc108",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 92251,
                "upload_time": "2022-02-19T18:07:25",
                "upload_time_iso_8601": "2022-02-19T18:07:25.444308Z",
                "url": "https://files.pythonhosted.org/packages/a9/59/da7265fc29a0c1b190c1da05102890408a20f88509dc25230582908d1b47/clismo-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "469ff24d7823f740273cb1daddc8832e",
                    "sha256": "3ae6272cc5c69e20d29aca37aeb67c23bbec80007b7670b26fcebba9dee7685e"
                },
                "downloads": -1,
                "filename": "clismo-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "469ff24d7823f740273cb1daddc8832e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 87083,
                "upload_time": "2022-02-19T18:07:27",
                "upload_time_iso_8601": "2022-02-19T18:07:27.119488Z",
                "url": "https://files.pythonhosted.org/packages/73/db/84ed0f64fad0cd54e001956fe3bff7442618c2353572d2f0e80db44de872/clismo-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "Jorge Morgado Vega",
            "author_email": "jorge.morgadov@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Clismo\n\n## \u00cdndice\n\n- [Objetivos](https://github.com/jmorgadov/clismo#objetivos)\n- [Instalaci\u00f3n](https://github.com/jmorgadov/clismo#instalaci%C3%B3n)\n- [Lenguaje](https://github.com/jmorgadov/clismo#lenguaje)\n  - [Caracter\u00edsticas b\u00e1sicas](https://github.com/jmorgadov/clismo#caracter%C3%ADsticas-b%C3%A1sicas)\n    - [Declaraci\u00f3n y uso de variables](https://github.com/jmorgadov/clismo#declaraci%C3%B3n-y-uso-de-variables)\n    - [Condicionales](https://github.com/jmorgadov/clismo#condicionales)\n    - [Ciclos](https://github.com/jmorgadov/clismo#cliclos)\n  - [Estructuras principales](https://github.com/jmorgadov/clismo#estructuras-principales)\n  - [Atributos y funciones especiales](https://github.com/jmorgadov/clismo#atributos-y-funciones-especiales)\n    - [Client](https://github.com/jmorgadov/clismo#client)\n    - [Server](https://github.com/jmorgadov/clismo#server)\n    - [Step](https://github.com/jmorgadov/clismo#step)\n    - [Simulation](https://github.com/jmorgadov/clismo#simulation)\n  - [General](https://github.com/jmorgadov/clismo#general)\n  - [Funciones built-in](https://github.com/jmorgadov/clismo#funciones-built-in)\n- [Implementaci\u00f3n](https://github.com/jmorgadov/clismo#implementaci%C3%B3n)\n  - [Aut\u00f3matas](https://github.com/jmorgadov/clismo#aut%C3%B3matas)\n  - [Motor de expresiones regulares](https://github.com/jmorgadov/clismo#motor-de-expresiones-regulares)\n  - [Tokenizador](https://github.com/jmorgadov/clismo#tokenizador)\n  - [Gram\u00e1ticas](https://github.com/jmorgadov/clismo#gram%C3%A1ticas)\n  - [\u00c1rbol de Sintaxis Abstracta (AST)](https://github.com/jmorgadov/clismo#%C3%A1rbol-de-sintaxis-abstracta-ast)\n  - [Parser](https://github.com/jmorgadov/clismo#parser)\n  - [Visitors](https://github.com/jmorgadov/clismo#visitors)\n  - [Ejecuci\u00f3n](https://github.com/jmorgadov/clismo#ejecuci%C3%B3n)\n    - [Reconocimiento de las estructuras declaradas](https://github.com/jmorgadov/clismo#reconocimiento-de-las-estructuras-declaradas)\n    - [Chequeo sem\u00e1ntico](https://github.com/jmorgadov/clismo#chequeo-sem%C3%A1ntico)\n    - [Evaluaci\u00f3n](https://github.com/jmorgadov/clismo#evaluaci%C3%B3n)\n- [Ejemplo](https://github.com/jmorgadov/clismo#ejemplo)\n\n## Objetivos\n\nEl objetivo de este proyecto es crear un lenguaje de programaci\u00f3n\n(espec\u00edficamente un DCL) que permita la creaci\u00f3n, ejecuci\u00f3n y optmizaci\u00f3n de\nmodelos de simulaci\u00f3n de eventos discretos de tipo cliente-servidor. De esta\nforma, los usuarios pueden enfocarse m\u00e1s en la estructura de los modelos y no\nen la implementaci\u00f3n interna de los mismos.\n\nEl lenguaje ofrece adem\u00e1s la posibilidad de optimizar los modelos creados bajo\ncriterios que el mismo usuario puede especificar.\n\n## Instalaci\u00f3n\n\n```bash\npip install clismo\n```\n\nPara m\u00e1s informaci\u00f3n sobre el uso del programa:\n\n```bash\nclismo --help\n```\n\n## Lenguaje\n\n**Clismo** es un lenguaje no orientado a objetos, y a pesar de ser un lenguaje\nde programaci\u00f3n imperativo, el mismo tiene caracter\u00edsticas funcionales. El\ntipado es est\u00e1tico, aunque no es necesario declarar los tipos en la sintaxis\n(son inferidos autom\u00e1ticamente).\n\nAl ser un lenguaje dedicado a la creaci\u00f3n de modelos de simulaci\u00f3n del tipo\ncliente-servidor, posee cuatro estructuras b\u00e1sicas: `client`, `server`, `step`\ny `simulation`. Las relaciones entre estas estructuras son:\n\n- Los servidores atienden a los clientes.\n- Un `step` contiene una serie de servidores (indica que est\u00e1n en paralelo).\n- Un `simulation` contiene una serie de steps (indica que est\u00e1n en secuencia).\n\nCada una de estas estructuras puede contener atributos y/o funciones especiales\nque definen el comportamiento del sistema que ser\u00e1n analizados en futuras\nsecciones.\n\n### Caracter\u00edsticas b\u00e1sicas\n\nA continuaci\u00f3n se presentan ejemplos de c\u00f3digo que muestran las caracter\u00edsticas\nb\u00e1sicas del lenguaje.\n\n#### Declaraci\u00f3n y uso de variables\n\n```text\nvar name = \"John\"\nvar is_elder = False\nvar count = 10\ncount = count + 3\n```\n\n#### Condicionales\n\n```text\nif count == 10:\n    ...\nelse:\n    ...\n```\n\n> Con indentaciones similar a Python.\n\n#### Cliclos\n\n- Ciclo infinito\n\n    ```text\n    loop:\n        ...\n    ```\n\n    > Dentro de los loops se pueden usar las palabras claves `endloop` o `nextloop`\n    > para terminar el loop o saltar a la siguiente iteraci\u00f3n respectivamente.\n\n- Ciclo infinito con variable\n\n    ```text\n    loop i:\n        ...\n    ```\n\n- Ciclo infinito con variable y comienzo\n\n    ```text\n    loop i from 5:\n        ...\n    ```\n\n- Ciclo con comienzo y fin\n\n    ```text\n    loop i from 5 to 10:\n        ...\n    ```\n\n- Ciclo con comienzo, fin y paso\n\n    ```text\n    loop i from 5 to 10 by 2:\n        ...\n    ```\n\n### Estructuras principales\n\nLas estructuras principales (`client`, `server`, `step` y `simulation`) se\ncrean de la siguiente forma:\n\n```text\n<struct_type> <name>:\n    <attr_name> = <attr_value>\n    ...\n\n    <func_name>(<specifications>):\n        <func_body>\n        ...\n```\n\n> Los <specifications> no representan par\u00e1metros que se pasan a la funci\u00f3n,\n> sino que son, como su nombre lo indica, especificaciones.\n\nPor ejemplo, para crear un servidor:\n\n```text\nserver server1:\n    my_own_attr = 10\n\n    attend_client():\n        return norm() + 10\n```\n\n> `attend_client` es una funci\u00f3n especial que deben definir los servidores para\n> indicar el tiempo que tardar\u00e1 en atender a un cliente.\n\n### Atributos y funciones especiales\n\nAlgunas estructuras requieren de atributos y funciones especiales para\nser poder definidas. (Como en el ejemplo anterior `attend_client`, no\nse puede crear un servidor si no se define esta funci\u00f3n en el cuerpo\ndel mismo).\n\n#### Client\n\nLos clientes no requieren de atributos especiales, pero si pueden definir\nopcionalmente una funci\u00f3n `on_server_out` que ser\u00e1 llamada cuando el cliente\nsale del servidor. Esta funci\u00f3n no debe devolver ningun valor, se usa\ngeneralemente para indicar modificar attributos del cliente.\n\n> M\u00e1s adelante se explicar\u00e1 como se pueden obtener y modificar los atributos\n> de una estructura.\n\n#### Server\n\nLos servidores requieren la implementaci\u00f3n de la funci\u00f3n `attend_client`.\nEsta funci\u00f3n debe devolver el tiempo que tardar\u00e1 en atender a un cliente.\nDentro de ella se puede acceder al cliente actual mediante la variable\n`current_client`.\n\n#### Step\n\nLos steps no requieren ninguna funci\u00f3n especial pero si la declaraci\u00f3n del\natributo `servers`, una lista de servidores que se encargar\u00e1n de atender a los\nclientes.\n\n```text\nstep step1:\n    servers = [server1, server2]\n```\n\n#### Simulation\n\nLas simulaciones requieren la declaraci\u00f3n de los siguientes atributos:\n\n- `steps`: una lista de steps que representan los servidores en serie.\n- `time_limit` o `client_limit`: una cantidad de tiempo o cantidad de clientes que se desea simular. Solo es necesario uno de los dos (aunque se pueden indicar ambas)\n- `arrive(<client_type>)`: una funci\u00f3n que devuelve el tiempo que tardar\u00e1 en llegar un cliente de un tipo determinado. Ejemplo:\n    \n    ```text\n    arrive(DefaultClient):\n        return norm() + 10\n    ```\n\n    > `DefaultClient` es un tipo de cliente que se usa por defecto. Cada simulaci\u00f3n\n    > puede definir m\u00e1s funciones `arrive` con clientes de distintos tipos. Tambi\u00e9n\n    > se puede definir una misma funci\u00f3n `arrive` para varios tipos de clientes,\n    > por ejemplo `arrive(ClientType1, ClientType2)`.\n\nOpcionalemente, se puede definit el modo de ejecuci\u00f3n de la simulaci\u00f3n con el\natributo `mode`. El mismo puede ser `\"run\"` (por defecto) o `\"optimize\"`. Estos\nindican si se quiere ejecutar la simulaci\u00f3n u optimizar el modelo.\n\nEn caso de que se quiera optimizar el modelo, se debe definir la funci\u00f3n\n`minimize()` que devuelve el valor que se desea minimizar.\n\nPara la configuraci\u00f3n del algoritmo gen\u00e9tico utilizado para la optimizaci\u00f3n,\nse pueden especificar los atributos:\n\n- `pop_size`: cantidad de individuos en la poblaci\u00f3n. Por defecto es 10.\n- `max_iter`: cantidad m\u00e1xima de iteraciones. Por defecto es 5.\n- `mut_prob`: probabilidad de mutaci\u00f3n. Por defecto es 0.1.\n- `best_sel`: cantidad de individuos que se seleccionan para la siguiente generaci\u00f3n. Por defecto es 3.\n- `new_rand`: cantidad de nuevos individuos que se generan al final de cada iteraci\u00f3n. Por defecto es 2.\n\n### General\n\nCada estructura puede definir una funci\u00f3n `possible(<attr_name>)`. Esta funci\u00f3n\ndebe devolver un posible valor (aleatorio) para el atributo especificado.\n\nEstas funciones se utlizar\u00e1n para crear el vector de posibles valores para los\ndiferentes atributos. Con ello se pueden crear diferentes versiones de un mismo\nmodelo y es lo que el algoritmo gen\u00e9tico utilizar\u00e1 para optimizar el mismo.\n\nAdicionalemente, en cualquier funci\u00f3n se puede acceder a las variables globales\n`time` y `clients` que representan el tiempo actual se la simulaci\u00f3n y la\ncantidad de clientes que han salido del sistema.\n\n### Funciones built-in\n\nDentro de la implementaci\u00f3n de las funciones especiales se pueden usar diversas\nfunciones built-in. Dos de las funciones principales son: `get` y `set`. Con\nestas funciones se pueden obtener y modificar los atributos de una estructura.\nPor ejemplo:\n\n```text\nserver S1:\n    mean = 10\n    total = 0\n\n    attend_client():\n        set(self, \"total\", get(self, total) + 1)\n        return nomr() + get(self, mean)\n```\n\n> `self` es una referencia a la instancia de la estructura actual\n\nComo el lenguaje no es orintado a objetos, existen diversas funciones que\npermiten realizar todo tipo de acciones:\n\n- `get_at(<list>, <index>)`: devuelve el valor del elemento en la posici\u00f3n especificada de la lista.\n- `set_at(<list>, <index>, <value>)`: modifica el valor del elemento en la posici\u00f3n especificada de la lista.\n- `append(<list>, <value>)`: agrega un elemento al final de la lista.\n- `rand()`: devuelve un valor aleatorio entre 0 y 1.\n- `norm()`: devuelve un valor aleatorio entre 0 y 1 con distribuci\u00f3n normal.\n- `randint(<min>, <max>)`: devuelve un valor aleatorio entre `min` y `max`.\n- `startswith(<string>, <substring>)`: devuelve `True` si `string` empieza con `substring`.\n- `lower(<string>)`: devuelve `string` en min\u00fasculas.\n- `upper(<string>)`: devuelve `string` en may\u00fasculas.\n- `sqrt(<number>)`: devuelve la ra\u00edz cuadrada de `number`.\n- `abs(<number>)`: devuelve el valor absoluto de `number`.\n- `round(<number>, <decimals>)`: devuelve `number` redondeado a `decimals` decimales.\n\nEntre muchas otras similares a las funciones de python.\n\n## Implementaci\u00f3n\n\n**Clismo** es un lenguaje evaluado escrito en Python. A continuaci\u00f3n se\nexponen las caracter\u00edsticas principales de la implementaci\u00f3n de cada etapa.\n\n### Aut\u00f3matas\n\nPara la creaci\u00f3n de las algunas de las proximas funcionalidades, se realiza\u00f3\nuna implementaci\u00f3n de un tipo `Automata` que permite simular una\nm\u00e1quina de estados de forma gen\u00e9rica. A los mismos se le pueden agregar\nestados as\u00ed como transiciones entre los mismos. Cada aut\u00f3mata tiene un estado\ninicial y uno o varios estados finales.\n\nLa ejecuci\u00f3n de una m\u00e1quina de estados realizada con un aut\u00f3mata es bastante\nsimple. Dado una entrada iterable, se comienza en el estado inicial y se va\nejecutando cada transici\u00f3n hasta llegar a un estado final. En caso de llegar a\nun estado en el que ninguna transici\u00f3n es v\u00e1lida, se termina la ejecuci\u00f3n y la\nentrada no es v\u00e1lida. En caso de terminar de recorrer la entrada se clasifica\nla entrada como v\u00e1lida o inv\u00e1lida en dependencia de si se lleg\u00f3 a un estado\nfinal o no respectivamente.\n\nLos aut\u00f3matas pueden tener transiciones **\u00e9psilon** entre estados, en este\ncaso, la ejecuci\u00f3n se bifurca y la maquina de estados se mueve por todos los\nestaos posibles al mismo timepo. Esto da la posibliadad de ejecutar aut\u00f3matas\nno deterministas.\n\nSe implement\u00f3 adem\u00e1s, utilizando el algoritmo visto en clase (calculando los\n**goto** y **epsilon clausuras**) la opci\u00f3n de convertir un aut\u00f3mata no\ndeterminista (NFA) a un aut\u00f3mata determinista (DFA).\n\n### Motor de expresiones regulares\n\nLas principales funcionalidades implementadas son:\n\n- Operador `*`: Matchea cero o m\u00e1s veces la expresi\u00f3n anterior.\n- Operador `|`: Mathcea la expresi\u00f3n anterior o la siguiente.\n- Operador `^`: Matchea cualquier expresion excepto la expresi\u00f3n que le prosigue.\n- Caracter `.`: Matchea cualquier caracter (ASCII).\n- Caracter `\\`: Inicio de un caracter especial.\n- Caracter `\\d`: Matchea un d\u00edgito.\n- Caracter `\\a`: Matchea una letra min\u00fascula.\n- Caracter `\\A`: Matchea una letra may\u00fascula.\n- Parentesis `(` y `)`: Agrupan una expresi\u00f3n regular.\n\n> Cualquier operador o caracter especal puede ser escapado con `\\`.\n\nPara la realizaci\u00f3n del motor de expresiones regulares se utiliz\u00f3 la clase\n`Automata`. Para cada expresi\u00f3n regular se construye un aut\u00f3mata finito no\ndeterminista (NFA) usando el algoritmo de Thompson y luego el mismo se\nconvierte a un DFA utlizando el m\u00e9todo `to_dfa` de la clase `Automata`.\n\nSe ofrecen adem\u00e1s dos funciones para el matcheo de cadenas segun una expresi\u00f3n\nregular: `match` (la cual tiene un comportamiento similar a `re.match`) y\n`compile_patt` (la cual tiene un comportamiento similar a `re.compile`). La\nventaja principal de usar `compile_patt` es que se no es necesario crear un\naut\u00f3mata para cada vez que se desea matchear una cadena (ya que el aut\u00f3mata es\nconstruido una sola vez).\n\n### Tokenizador\n\nPara la implementaci\u00f3n del tokenizador se cre\u00f3 una clase `Tokenizer`. Esta\nclase se encarga de tomar un texto y dividirlo en diferentes tipos de tokens.\nCada patr\u00f3n que se agrega est\u00e1 definido por un nombre (tipo del token) y una\nexpresi\u00f3n regular (se hace uso del motor de expresiones regulares\nimplementado).\n\n```python\ntknz = Tokenizer()\ntknz.add_pattern(\"NUMBER\", r\"\\d\\d*|\\d\\d*\\.\\d\\d*\")\n```\n\nAl tokenizar un texto, se revisan los patrones comenzando por el primero (en el\nmismo orden en el que fueron agregados) y el primero que matchee con un prefijo\nde la cadena se establece como un token nuevo (se toma como lexema la subcadena\nque matche\u00f3 con la expresi\u00f3n regular). Luego se vuelve a realizar esta\noperaci\u00f3n con el resto de la cadena, as\u00ed sucesivamente hasta terminar la misma.\nSi en alg\u00fan punto no se encuentra un token que matchee con el inicio de la\ncadena, se considera que la cadena no se puede tokenizar (con los tipos de\ntokens establecidos).\n\nCada vez que se agrega un patr\u00f3n al tokenizador se puede establecer una\nfunci\u00f3n que se aplicar\u00e1 al lexema antes de guardar su valor en el token.\n\nPor ejemplo, para quitar las comillas al tokenizar un **string**:\n\n```python\ntknz.add_pattern(\"STRING\", r\"'((^')|(\\\\'))*(^\\\\)'\", lambda t: t[1:-1])\n```\n\nEsta funci\u00f3n tambien puede ser utilizada para indicar que se quiere ignorar\nlos tokens de un tipo determinado. En tal caso basta con que la funci\u00f3n devuelva\n`None`:\n\n```python\ntknz.add_pattern(\"SPACE\", r\"( | \\t)( |\\t)*\", lambda t: None)\n```\n\nSe ofrece tambi\u00e9n la opci\u00f3n de agregar `keywords` (palabras claves) para una\nmayor comodidad. Esto se hace mediante el m\u00e9todo `add_keywords()` el cual recibe\nuna lista de palabras. En el proceso de tokenizaci\u00f3n, si el prefijo matcheado\nconicide con alguna de las palabras clave, entonces el tipo del token se\nestablece como `KEYWORD`.\n\nEn caso de que se quiera aplicar una funci\u00f3n para procesar todos los tokens\nobtenidos, se puede usar el decorador `process_tokens` de la clase `Tokenizer`.\nEste debe ser usado en una funci\u00f3n que reciba un solo argumento (la lista de\ntokens) y devuelva una lista de tokens procesados.\n\n```python\n@tknz.process_tokens\ndef process_tokens(tokens):\n    # ...\n    return tokens\n```\n\nFinalmente, para obtener los tokens de un texto basta con usar la funci\u00f3n\n`tokenize`:\n\n```python\ntokens = tknz.tokenize(\"some text\")\n```\n\n### Gram\u00e1ticas\n\nSe implementaron las clases `Grammar`, `NonTerminal`, `Terminal` y `Production`\nlas cuales son usadas para la representaci\u00f3n de una gram\u00e1tica general. Se\nimplement\u00f3 adem\u00e1s un parser de gram\u00e1ticas con el cual es posible crear\ngram\u00e1ticas dado un formato, esto permite definir la gram\u00e1tica del lenguaje en\nun archivo y poder cambiarla f\u00e1cilmente. Dado la sencillez del formato (el\nlenguaje de las gram\u00e1ticas), se implement\u00f3 un sencillo parser recursivo\ndescendente para la creaci\u00f3n de las mismas.\n\nEl formato especificado es el siguiente:\n\n```\nexpression: production_1 | production_2 | ... | production_n\n```\n\nDe forma equivalente, para mayor legibilidad:\n\n```\nexpression:\n    | production_1 \n    | production_2\n    | ...\n    | production_n\n```\n\nEjemplo:\n\n```\nExprAB:\n    | 'a' ExprAB 'b'\n    | EPS\n```\n\n> EPS es un elemento especial en las gram\u00e1ticas para representar *epsilon*\n\nLas gram\u00e1ticas luego pueden ser cargadas como se muestra a continuaci\u00f3n:\n\n```python\nfrom grammar im port Grammar\ngm = Grammar.open(\"expr_ab.gm\")\n```\n\nLas gram\u00e1ticas est\u00e1n compuestas por una lista de expresiones (no terminales).\nCada no terminal de la gram\u00e1tica, contiene una lista de producciones. Cada\nproducci\u00f3n contiene una lista de elementos (terminales o no terminales).\n\n### \u00c1rbol de Sintaxis Abstracta (AST)\n\nPara la creaci\u00f3n de un AST se cre\u00f3 la clase abstracta `AST`. De esta clase\nheredan todos las clases que representan los nodos del \u00e1rbol de sintaxis \nabstracta del lenguaje. En la clase se implementa tambi\u00e9n un m\u00e9todo `dump`\nque permite mostrar el \u00e1rbol de forma legible. Este m\u00e9todo usa el\natributo `__slots__` mediante el cual se definen los atributos que se\nquieren mostrar.\n\nPara definir c\u00f3mo se construye cada nodo del AST se pueden asignar los\nconstructores a cada producci\u00f3n de la gram\u00e1tica usando la funci\u00f3n\n`assign_builders`. Esta funci\u00f3n recibe un diccionario donde las llaves son la\nrepresentaci\u00f3n textual de la producci\u00f3n y los valores son funciones que reciben\ncomo argumentos los elementos de la producci\u00f3n. En caso de que el s\u00edmbolo sea\nun terminal la funci\u00f3n recibir\u00e1 dicho terminal, en caso de ser un no terminal,\nla funci\u00f3n recibir\u00e1 el resultado de la ejecuci\u00f3n algunas de las funciones\nconstructoras de las producciones que tengan como cabeza a dicho no terminal.\n\nPor ejemplo, a continuaci\u00f3n se muestran algunos de los constructores para\nla gram\u00e1tica de **Clismo**:\n\n```python\nbuilders = {\n    # -------------------------------------------------------------------------\n    \"program -> obj_def program\": lambda s, p: ast.Program([s] + p.stmts),\n    \"program -> NEWLINE program\": lambda n, p: p,\n    \"program -> EPS\": lambda: ast.Program([]),\n    # -------------------------------------------------------------------------\n    \"obj_def -> client_def\": lambda c: c,\n    \"obj_def -> server_def\": lambda s: s,\n    \"obj_def -> step_def\": lambda s: s,\n    \"obj_def -> sim_def\": lambda s: s,\n    # -------------------------------------------------------------------------\n    # ...\n    # ...\n```\n\n### Parser\n\nPara la implementaci\u00f3n del parser principal del lenguaje se cre\u00f3 la clase\nabstacta `Parser`. Usando esta clase como base se cre\u00f3 una clase `LR1Parser`,\nla cual implementa un parser LR(1).\n\nPara la realizaci\u00f3n del parser LR(1) fue necesario implementar las clases\n`LR1Item` y `LR1Table`. La primera de estas clases representa un item del\nparser, el cual contiene: la producci\u00f3n que lo genera, la posici\u00f3n del punto\n(dot) en la producci\u00f3n y el terminal que le debe proseguir (lookahead).\n\nLa segunda clase (`LR1Table`) representa la tabla de transici\u00f3n del parser.\nCada posici\u00f3n de la tabla puede contener tres tipos de elementos: un **string**\n`\"OK\"`, que indica que el estado de aceptaci\u00f3n; un val\u00f3r num\u00e9rico entero, que\nindica cual es el siguiente estado; o un no terminal de la gram\u00e1tica, el cual\nrepresenta que hay que realizar una reducci\u00f3n. Para no tener que recalcular la\ntabla cada vez que se va a parsear un texto, la misma puede ser serializada y\nluego cargada.\n\nLa construcci\u00f3n de la tabla se realiz\u00f3 siguiendo el algoritmo visto en las\nconferencias de la asignatura (calculando los **goto** y las **clausuras** de\nlos estados).\n\nEn el proceso de parsing, al realizar una acci\u00f3n de reducci\u00f3n, es donde se\nutilizan las funciones constructoras vistas en la secci\u00f3n anterior. En\ndependencia de la producci\u00f3n que se est\u00e1 reduciendo, se llama a la funci\u00f3n\nconstructora correspondiente.\n\nPara una mayor comodidad se implement\u00f3 tambi\u00e9n la clase `ParserManager`. Esta\nclase ofrece, dado una gram\u00e1tica, un tokenizador (opcional) y un parser\n(opcional, por defecto LR(1)), m\u00e9todos como: `parse_file` (para parsear un\narchivo), `parse` (para parsear un texto) y `parse_tokens` (para parsear una\nlista de tokens directamete). Estas funciones devuelven el AST resultante del\nproceso de parsing.\n\n### Visitors\n\nUna vez obtenido el AST de un programa es necesario realizar recorridos sobre\n\u00e9l. Para ello se implment\u00f3 una clase `Visitor` la cual contiene dos decoradores\n`@visitor` y `@callback`. Por cada **visitor** que se quiera implementar para\nel AST, se debe implementar una nueva clase que tenga como atributo de clase\nuna instancia de la clase `Visitor`. Luego, cada m\u00e9todo de la clase que tenga\nel decorador `@visitor`, se establecer\u00e1 como una sobrecarga. Es por ello que\ntodos estos m\u00e9todos deben tener sus argumentos tipados (esta es la forma en la\nque el **visitor** sabe cual de los m\u00e9todos de la clase debe llamar).\n\nPor ejemplo:\n\n```python\nfrom clismo.lang.visitor import Visitor\n\nclass EvalVisitor:\n    visitor_dec = Visitor().visitor\n\n    @visitor_dec\n    def eval(self, node: ast.Program):\n        for stmt in node.stmts:\n            stmt.eval(self)\n\n    @visitor_dec\n    def eval(self, node: ast.ClientDef): ...\n\n    # ...\n```\n\nEl decorador `@callback` se utiliza para definir funciones que se van a llamar\ncada vez que se llame a una funci\u00f3n marcada como **visitor**.\n\n### Ejecuci\u00f3n\n\nEl proceso de ejecuci\u00f3n se divide en 3 partes:\n\n1. Reconocimiento de las estructuras declaradas.\n2. Chequeo sem\u00e1ntico.\n3. Ejecuci\u00f3n.\n\n#### Reconocimiento de las estructuras declaradas\n\nEn este paso se recorre el AST con un visitor el cual analiza las estructuras\ndeclaradas. Esta informaci\u00f3n es utilizada luego en el checqueo sem\u00e1ntico. Esto\npermite usar dentro de las estructuras referencias a otras que por el orden del\nc\u00f3digo no han sido definidas a\u00fan.\n\n#### Chequeo sem\u00e1ntico\n\nEn esta etapa se realiza una verificaci\u00f3n a cada estructura declarado\n(igualmente con otro visitor). Se asegura que las estructuras declaradas tengan\nlos atributos y funciones necesarias para su correcta ejecuci\u00f3n.\n\nAdem\u00e1s se realiza un chequeo de tipos de los atributos y cuerpos de las\nfunciones. De esta forma se asegura que cada funci\u00f3n devuelva un valor de\ntipo correcto.\n\n#### Evaluaci\u00f3n\n\nFinalmente, un \u00faltimo v\u00edsitor se encarga de recorrer el AST configurando la\nsimulaci\u00f3n seg\u00fan las estructuras declaradas para luego ejecutar (u optimizar)\nel modelo definido.\n\n## Ejemplo\n\nEn el script [clismo_example.csm](./clismo_example.csm) se muestra un ejemplo\nde un programa.\n\n```text\nclient Normal:\n    test_val = 5\n\n    possible(test_val):\n        return randint(2, 10)\n\nserver S1:\n    total = 0\n\n    attend_client():\n        var t = 1 * get(current_client, test_val)\n        set(self, total, get(self, total) + t)\n        return t\n\nserver S2:\n    total = 0\n\n    attend_client():\n        var t = 3 * get(current_client, test_val)\n        set(self, total, get(self, total) + t)\n        return t\n\nstep P1:\n    servers = [S2, S2, S1]\n\n    possible(servers):\n        var s = [S1, S2]\n        var count = len(get(self, servers))\n        var new_servers = list(\"server\")\n        loop _ from 0 to count:\n            var r = randint(0, 1)\n            new_servers = append(new_servers, get_at(s, r))\n        return new_servers\n\nsimulation Test:\n    mode = \"run\"\n    steps = [P1]\n    client_limit = 50\n\n    max_iter = 20\n    pop_size = 3\n    mut_prob = 0.4\n    new_rand = 10\n\n    arrive(Normal):\n        return 5\n    \n    minimize():\n        var servers = get(get_at(get(self, steps), 0), servers)\n        var count = len(servers)\n        var val = 0\n        loop i from 0 to count:\n            val = val + get(get_at(servers, i), total)\n        return val\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "clismo",
            "package_url": "https://pypi.org/project/clismo/",
            "platform": "",
            "project_url": "https://pypi.org/project/clismo/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/clismo/0.1.4/",
            "requires_dist": [
                "typer (>=0.4.0,<0.5.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "Programing language designed for simulating and optimizing client-server like discret events models",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12947511,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "24a0480f7ba0b9bd1321a5c1c920f1e3",
                    "sha256": "f5484cd4ae765ab5cb3f0c36fd7eba2c493905dda651b7afe88d5d252fd5f870"
                },
                "downloads": -1,
                "filename": "clismo-0.1.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "24a0480f7ba0b9bd1321a5c1c920f1e3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 92271,
                "upload_time": "2022-02-20T00:21:54",
                "upload_time_iso_8601": "2022-02-20T00:21:54.064251Z",
                "url": "https://files.pythonhosted.org/packages/7e/7c/91a98404824f924f88fa70eff78d1b37d4d4d0a02e9e2e0960b3c2150cae/clismo-0.1.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6a9ab3a92cde4c913fa77904f235bca6",
                    "sha256": "f67e73e1c876cf0729f9ebdf2d0f3957ca8c0e9dd9562dd0a4e0061648a7e833"
                },
                "downloads": -1,
                "filename": "clismo-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "6a9ab3a92cde4c913fa77904f235bca6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 87142,
                "upload_time": "2022-02-20T00:21:55",
                "upload_time_iso_8601": "2022-02-20T00:21:55.586634Z",
                "url": "https://files.pythonhosted.org/packages/bc/92/94b1ea0fa1b9af4ff8422c0c57d07711068153f5ecb63a8832e0a0d819f6/clismo-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}