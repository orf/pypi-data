{
    "0.3.3": {
        "info": {
            "author": "co0lc0der",
            "author_email": "c0der@ya.ru",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Intended Audience :: End Users/Desktop",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: SQL",
                "Topic :: Database",
                "Topic :: Database :: Database Engines/Servers"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/co0lc0der/simple-query-builder-python/archive/v0.3.3.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/co0lc0der/simple-query-builder-python",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "simple-query-builder",
            "package_url": "https://pypi.org/project/simple-query-builder/",
            "platform": null,
            "project_url": "https://pypi.org/project/simple-query-builder/",
            "project_urls": {
                "Download": "https://github.com/co0lc0der/simple-query-builder-python/archive/v0.3.3.zip",
                "Homepage": "https://github.com/co0lc0der/simple-query-builder-python"
            },
            "release_url": "https://pypi.org/project/simple-query-builder/0.3.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "This is a small easy-to-use component for working with a database. It provides some public methods to compose SQL queries and manipulate data. Each SQL query is prepared and safe.",
            "version": "0.3.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15332710,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a7bb01a34f153272c3117c4ea3fe4468",
                    "sha256": "476f81500b70b676810040597ce9110a2f9314508c4c2106b6466f86bbcf7c5c"
                },
                "downloads": -1,
                "filename": "simple_query_builder-0.3.3.tar.gz",
                "has_sig": false,
                "md5_digest": "a7bb01a34f153272c3117c4ea3fe4468",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11121,
                "upload_time": "2022-09-08T08:18:03",
                "upload_time_iso_8601": "2022-09-08T08:18:03.327804Z",
                "url": "https://files.pythonhosted.org/packages/02/9d/b590399fdd1a2d9a6f81c40850c18af7d93fb7e8017f3a8272c02cabbaca/simple_query_builder-0.3.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.4": {
        "info": {
            "author": "co0lc0der",
            "author_email": "c0der@ya.ru",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Intended Audience :: End Users/Desktop",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: SQL",
                "Topic :: Database",
                "Topic :: Database :: Database Engines/Servers"
            ],
            "description": "# QueryBuilder python module\r\n\r\n![PyPI](https://img.shields.io/pypi/v/simple-query-builder?color=yellow&style=flat-square)\r\n![PyPI - Downloads](https://img.shields.io/pypi/dm/simple-query-builder?color=darkgreen&style=flat-square)\r\n[![Latest Version](https://img.shields.io/github/release/co0lc0der/simple-query-builder-python?color=orange&style=flat-square)](https://github.com/co0lc0der/simple-query-builder-python/release)\r\n![GitHub repo size](https://img.shields.io/github/repo-size/co0lc0der/simple-query-builder-python?label=size&style=flat-square)\r\n![Python 3.7, 3.8, 3.9, 3.10](https://img.shields.io/pypi/pyversions/simple-query-builder?color=blueviolet&style=flat-square)\r\n[![GitHub license](https://img.shields.io/github/license/co0lc0der/simple-query-builder-python?style=flat-square)](https://github.com/co0lc0der/simple-query-builder-python/blob/main/LICENSE.md)\r\n\r\nThis is a small easy-to-use module for working with a database. It provides some public methods to compose SQL queries and manipulate data. Each SQL query is prepared and safe. QueryBuilder fetches data to _list_ by default. At present time the component supports SQLite (file or memory).\r\n\r\n## Contributing\r\n\r\nBug reports and/or pull requests are welcome\r\n\r\n## License\r\n\r\nThe module is available as open source under the terms of the [MIT license](https://github.com/co0lc0der/simple-query-builder-python/blob/main/LICENSE.md)\r\n\r\n## Installation\r\n\r\nInstall the current version with [PyPI](https://pypi.org/project/simple-query-builder):\r\n\r\n```bash\r\npip install simple-query-builder\r\n```\r\n\r\nOr from Github:\r\n```bash\r\npip install https://github.com/co0lc0der/simple-query-builder-python/archive/main.zip\r\n```\r\n## How to use\r\n### Main public methods\r\n- `get_sql()` returns SQL query string which will be executed\r\n- `get_params()` returns an array of parameters for a query\r\n- `get_result()` returns query's result\r\n- `get_count()` returns result's rows count\r\n- `get_error()` returns `True` if an error is had\r\n- `get_error_message()` returns an error message if an error is had\r\n- `set_error(message)` sets `_error` to `True` and `_error_essage`\r\n- `get_first()` returns the first item of results\r\n- `get_last()` returns the last item of results\r\n- `reset()` resets state to default values (except PDO property)\r\n- `all()` executes SQL query and returns all rows of result (`fetchall()`)\r\n- `one()` executes SQL query and returns the first row of result (`fetchone()`)\r\n- `column(col_index)` executes SQL query and returns the needed column of result, `col_index` is `0` by default\r\n- `pluck(key_index, col_index)` executes SQL query and returns a list of tuples (the key (usually ID) and the needed column of result), `key_index` is `0` and `col_index` is `1` by default\r\n- `go()` this method is for non `SELECT` queries. it executes SQL query and returns nothing (but returns the last inserted row ID for `INSERT` method)\r\n- `count()` prepares a query with SQL `COUNT(*)` function and executes it\r\n- `query(sql, params, fetch_type, col_index)` executes prepared `sql` with `params`, it can be used for custom queries\r\n- 'SQL' methods are presented in [Usage section](#usage-examples)\r\n\r\n### Import the module and init `QueryBuilder` with `Database()`\r\n```python\r\nfrom simple_query_builder import *\r\n\r\nqb = QueryBuilder(DataBase(), 'my_db.db')\r\n```\r\n### Usage examples\r\n- Select all rows from a table\r\n```python\r\nresults = qb.select('users').all()\r\n```\r\n```sql\r\nSELECT * FROM `users`;\r\n```\r\n- Select a row with a condition\r\n```python\r\nresults = qb.select('users').where([['id', '=', 10]]).one()\r\n# or since 0.3.4\r\nresults = qb.select('users').where([['id', 10]]).one()\r\n```\r\n```sql\r\nSELECT * FROM `users` WHERE `id` = 10;\r\n```\r\n- Select rows with two conditions\r\n```python\r\nresults = qb.select('users').where([['id', '>', 1], 'and', ['group_id', '=', 2]]).all()\r\n# or since 0.3.4\r\nresults = qb.select('users').where([['id', '>', 1], 'and', ['group_id', 2]]).all()\r\n```\r\n```sql\r\nSELECT * FROM `users` WHERE (`id` > 1) AND (`group_id` = 2);\r\n```\r\n- Select a row with a `LIKE` and `NOT LIKE` condition\r\n```python\r\nresults = qb.select('users').like(['name', '%John%']).all()\r\n# or\r\nresults = qb.select('users').where([['name', 'LIKE', '%John%']]).all()\r\n```\r\n```sql\r\nSELECT * FROM `users` WHERE (`name` LIKE '%John%');\r\n```\r\n```python\r\nresults = qb.select('users').notLike(['name', '%John%']).all()\r\n# or\r\nresults = qb.select('users').where([['name', 'NOT LIKE', '%John%']]).all()\r\n```\r\n```sql\r\nSELECT * FROM `users` WHERE (`name` NOT LIKE '%John%');\r\n```\r\n- Select rows with `OFFSET` and `LIMIT`\r\n```python\r\nresults = qb.select('posts')\\\r\n    .where([['user_id', '=', 3]])\\\r\n    .offset(14)\\\r\n    .limit(7)\\\r\n    .all()\r\n# or since 0.3.4\r\nresults = qb.select('posts')\\\r\n    .where([['user_id', 3]])\\\r\n    .offset(14)\\\r\n    .limit(7)\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT * FROM `posts` WHERE (`user_id` = 3) OFFSET 14 LIMIT 7;\r\n```\r\n- Select custom fields with additional SQL\r\n1. `COUNT()`\r\n```python\r\nresults = qb.select('users', {'counter': 'COUNT(*)'}).one()\r\n# or\r\nresults = qb.count('users').one()\r\n```\r\n```sql\r\nSELECT COUNT(*) AS `counter` FROM `users`;\r\n```\r\n2. `ORDER BY`\r\n```python\r\nresults = qb.select({'b': 'branches'}, ['b.id', 'b.name'])\\\r\n    .where([['b.id', '>', 1], 'and', ['b.parent_id', 1]])\\\r\n    .order_by('b.id', 'desc')\\\r\n    .all()\r\n# or since 0.3.4\r\nresults = qb.select({'b': 'branches'}, ['b.id', 'b.name'])\\\r\n    .where([['b.id', '>', 1], 'and', ['b.parent_id', 1]])\\\r\n    .order_by('b.id desc')\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT `b`.`id`, `b`.`name` FROM `branches` AS `b`\r\nWHERE (`b`.`id` > 1) AND (`b`.`parent_id` = 1)\r\nORDER BY `b`.`id` DESC;\r\n``` \r\n3. `GROUP BY` and `HAVING`\r\n```python\r\nresults = qb.select('posts', ['id', 'category', 'title'])\\\r\n    .where([['views', '>=', 1000]])\\\r\n    .group_by('category')\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT `id`, `category`, `title` FROM `posts`\r\nWHERE (`views` >= 1000) GROUP BY `category`;\r\n```\r\n```python\r\ngroups = qb.select('orders', {'month_num': 'MONTH(`created_at`)', 'total': 'SUM(`total`)'})\\\r\n    .where([['YEAR(`created_at`)', '=', 2020]])\\\r\n    .group_by('month_num')\\\r\n    .having([['total', '=', 20000]])\\\r\n    .all()\r\n# or since 0.3.4\r\ngroups = qb.select('orders', {'month_num': 'MONTH(`created_at`)', 'total': 'SUM(`total`)'})\\\r\n    .where([['YEAR(`created_at`)', 2020]])\\\r\n    .group_by('month_num')\\\r\n    .having([['total', 20000]])\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT MONTH(`created_at`) AS `month_num`, SUM(`total`) AS `total`\r\nFROM `orders` WHERE (YEAR(`created_at`) = 2020)\r\nGROUP BY `month_num` HAVING (`total` = 20000);\r\n```\r\n4. `JOIN`. Supports `INNER`, `LEFT OUTER`, `RIGHT OUTER`, `FULL OUTER` and `CROSS` joins (`INNER` is by default)\r\n```python\r\nresults = qb.select({'u': 'users'}, [\r\n        'u.id',\r\n        'u.email',\r\n        'u.username',\r\n        {'perms': 'groups.permissions'}\r\n    ])\\\r\n    .join('groups', ['u.group_id', 'groups.id'])\\\r\n    .limit(5)\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT `u`.`id`, `u`.`email`, `u`.`username`, `groups`.`permissions` AS `perms`\r\nFROM `users` AS `u`\r\nINNER JOIN `groups` ON `u`.`group_id` = `groups`.`id`\r\nLIMIT 5;\r\n```\r\n```python\r\nresults = qb.select({'cp': 'cabs_printers'}, [\r\n        'cp.id',\r\n        'cp.cab_id',\r\n        {'cab_name': 'cb.name'},\r\n        'cp.printer_id',\r\n        {'printer_name': 'p.name'},\r\n        {'cartridge_type': 'c.name'},\r\n        'cp.comment'\r\n    ])\\\r\n    .join({'cb': 'cabs'}, ['cp.cab_id', 'cb.id'])\\\r\n    .join({'p': 'printer_models'}, ['cp.printer_id', 'p.id'])\\\r\n    .join({'c': 'cartridge_types'}, 'p.cartridge_id=c.id')\\\r\n    .where([['cp.cab_id', 'in', [11, 12, 13]], 'or', ['cp.cab_id', '=', 5], 'and', ['p.id', '>', 'c.id']])\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT `cp`.`id`, `cp`.`cab_id`, `cb`.`name` AS `cab_name`, `cp`.`printer_id`,\r\n       `p`.`name` AS `printer_name`, `c`.`name` AS `cartridge_type`, `cp`.`comment`\r\nFROM `cabs_printers` AS `cp`\r\nINNER JOIN `cabs` AS `cb` ON `cp`.`cab_id` = `cb`.`id`\r\nINNER JOIN `printer_models` AS `p` ON `cp`.`printer_id` = `p`.`id`\r\nINNER JOIN `cartridge_types` AS `c` ON p.cartridge_id=c.id\r\nWHERE (`cp`.`cab_id` IN (11, 12, 13)) OR (`cp`.`cab_id` = 5) AND (`p`.`id` > `c`.`id`);\r\n```\r\n```python\r\n# since 0.3.4\r\nresults = qb.select({'cp': 'cabs_printers'}, [\r\n        'cp.id',\r\n        'cp.cab_id',\r\n        {'cab_name': 'cb.name'},\r\n        'cp.printer_id',\r\n        {'cartridge_id': 'c.id'},\r\n        {'printer_name': 'p.name'},\r\n        {'cartridge_type': 'c.name'},\r\n        'cp.comment'\r\n    ])\\\r\n    .join({'cb': 'cabs'}, ['cp.cab_id', 'cb.id'])\\\r\n    .join({'p': 'printer_models'}, ['cp.printer_id', 'p.id'])\\\r\n    .join({'c': 'cartridge_types'}, ['p.cartridge_id', 'c.id'])\\\r\n    .group_by(['cp.printer_id', 'cartridge_id'])\\\r\n    .order_by(['cp.cab_id', 'cp.printer_id desc'])\\\r\n    .all()\r\n```\r\n```sql\r\nSELECT `cp`.`id`, `cp`.`cab_id`, `cb`.`name` AS `cab_name`, `cp`.`printer_id`, `c`.`id` AS `cartridge_id`,\r\n    `p`.`name` AS `printer_name`, `c`.`name` AS `cartridge_type`, `cp`.`comment`\r\nFROM `cabs_printers` AS `cp`\r\nINNER JOIN `cabs` AS `cb` ON `cp`.`cab_id` = `cb`.`id`\r\nINNER JOIN `printer_models` AS `p` ON `cp`.`printer_id` = `p`.`id`\r\nINNER JOIN `cartridge_types` AS `c` ON `p`.`cartridge_id` = `c`.`id`\r\nGROUP BY `cp`.`printer_id`, `cartridge_id`\r\nORDER BY `cp`.`cab_id` ASC, `cp`.`printer_id` DESC;\r\n```\r\n- Insert a row\r\n```python\r\nnew_id = qb.insert('groups', {\r\n    'name': 'Moderator',\r\n    'permissions': 'moderator'\r\n}).go()\r\n```\r\n```sql\r\nINSERT INTO `groups` (`name`, `permissions`) VALUES ('Moderator', 'moderator');\r\n```\r\n- Insert many rows\r\n```python\r\nqb.insert('groups', [['name', 'role'],\r\n    ['Moderator', 'moderator'],\r\n    ['Moderator2', 'moderator'],\r\n    ['User', 'user'],\r\n    ['User2', 'user']\r\n]).go()\r\n```\r\n```sql\r\nINSERT INTO `groups` (`name`, `role`)\r\nVALUES ('Moderator', 'moderator'),\r\n       ('Moderator2', 'moderator'),\r\n       ('User', 'user'),\r\n       ('User2', 'user');\r\n```\r\n- Update a row\r\n```python\r\nqb.update('users', {\r\n        'username': 'John Doe',\r\n        'status': 'new status'\r\n    })\\\r\n    .where([['id', '=', 7]])\\\r\n    .limit()\\\r\n    .go()\r\n# or since 0.3.4\r\nqb.update('users', {\r\n        'username': 'John Doe',\r\n        'status': 'new status'\r\n    })\\\r\n    .where([['id', 7]])\\\r\n    .limit()\\\r\n    .go()\r\n```\r\n```sql\r\nUPDATE `users` SET `username` = 'John Doe', `status` = 'new status'\r\nWHERE `id` = 7 LIMIT 1;\r\n```\r\n- Update rows\r\n```python\r\nqb.update('posts', {'status': 'published'})\\\r\n    .where([['YEAR(`updated_at`)', '>', 2020]])\\\r\n    .go()\r\n```\r\n```sql\r\nUPDATE `posts` SET `status` = 'published'\r\nWHERE (YEAR(`updated_at`) > 2020);\r\n```\r\n- Delete a row\r\n```python\r\nqb.delete('users')\\\r\n    .where([['name', '=', 'John']])\\\r\n    .limit()\\\r\n    .go()\r\n# or since 0.3.4\r\nqb.delete('users')\\\r\n    .where([['name', 'John']])\\\r\n    .limit()\\\r\n    .go()\r\n```\r\n```sql\r\nDELETE FROM `users` WHERE `name` = 'John' LIMIT 1;\r\n```\r\n- Delete rows\r\n```python\r\nqb.delete('comments')\\\r\n    .where([['user_id', '=', 10]])\\\r\n    .go()\r\n# or since 0.3.4\r\nqb.delete('comments')\\\r\n    .where([['user_id', 10]])\\\r\n    .go()\r\n```\r\n```sql\r\nDELETE FROM `comments` WHERE `user_id` = 10;\r\n```\r\n- Truncate a table\r\n```python\r\nqb.truncate('users').go()\r\n```\r\n```sql\r\nTRUNCATE TABLE `users`;\r\n```\r\n- Drop a table\r\n```python\r\nqb.drop('temporary').go()\r\n```\r\n```sql\r\nDROP TABLE IF EXISTS `temporary`;\r\n```\r\n\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/co0lc0der/simple-query-builder-python/archive/v0.3.4.zip",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/co0lc0der/simple-query-builder-python",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "simple-query-builder",
            "package_url": "https://pypi.org/project/simple-query-builder/",
            "platform": null,
            "project_url": "https://pypi.org/project/simple-query-builder/",
            "project_urls": {
                "Download": "https://github.com/co0lc0der/simple-query-builder-python/archive/v0.3.4.zip",
                "Homepage": "https://github.com/co0lc0der/simple-query-builder-python"
            },
            "release_url": "https://pypi.org/project/simple-query-builder/0.3.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "This is a small easy-to-use component for working with a database. It provides some public methods to compose SQL queries and manipulate data. Each SQL query is prepared and safe.",
            "version": "0.3.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15332710,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "87c957e37ff10eefd5810d5020f2b778",
                    "sha256": "5754485bed1778d7778c8423fc04a1d31eabd6915de0e39a5425134b257cfc65"
                },
                "downloads": -1,
                "filename": "simple_query_builder-0.3.4.tar.gz",
                "has_sig": false,
                "md5_digest": "87c957e37ff10eefd5810d5020f2b778",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11904,
                "upload_time": "2022-10-07T09:18:20",
                "upload_time_iso_8601": "2022-10-07T09:18:20.303399Z",
                "url": "https://files.pythonhosted.org/packages/eb/bb/2b4d37334d9189fa5ea359381cf5f69d1346080fb577e29ba748a1e42814/simple_query_builder-0.3.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}