{
    "0.0.1": {
        "info": {
            "author": "Susanne Zabel",
            "author_email": "susizabel93@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# VIPurPCA\n\n<p align=\"center\">\n  <img src=\"https://github.com/Integrative-Transcriptomics/VIPurPCA/blob/main/images/logo.png\" width=\"256\">\n</p>\n\nVIPurPCA offers a visualization of uncertainty propagated through the dimensionality reduction technique Principal Component Analysis (PCA) by automatic differentiation. \n\n### Installation\nVIPurPCA requires Python 3.7.3 or later and can be installed via:\n\n```\npip install vipurpca\n```\n\nA website showing results and animations can be found [here](https://github.com/Integrative-Transcriptomics/VIPurPCA).\n\n### Usage\n#### Propagating uncertainty through PCA and visualize output uncertainty as animated scatter plot\nIn order to propagate uncertainty through PCA the class `PCA` can be used, which has the following parameters, attributes, and methods: \n\n| Parameters    |  |\n| ------------- | ------------- |\n|  | ***matrix : array_like*** <br/> Array of size [n, p] containing mean numbers to which VIPurPCA should be applied. |\n|  | **_n_components : int or float, default=None, optional_** <br/> Number of components to keep. |\n|  | **_axis : {0, 1} , default=0, optional_** <br/> The default expects samples in rows and features in columns. |\n|  | **_cov_data : array_like of shape [n*p] or [n*p, n*p] , default=None, optional_** <br/> Uncertainties attached to the numbers in *matrix*. If *cov_data* is one-dimensional it is assumend to be the diagonal of a diagonal matrix. If None |\n|  | **_compute_jacobian : Boolean, default=False, optional_** <br/> Whether or whether not to propagate uncertainty through PCA. |\n\n| Attributes    |  |\n| ------------- | ------------- |\n|  | **_size : [n, p]_** <br/> Dimension of *matrix* (n: number of samples, p: number of dimensions) |\n|  | **_covariance : ndarray of size [p, p]_** <br/> Features' covariance matrix.|\n|  | **_eigenvalues : ndarray of size [n_components]_** <br/> Eigenvalues obtained from eigenvalue decomposition of the *covariance* matrix. |\n|  | **_eigenvectors : ndarray of size [n_components*p, n*p]_** <br/> Eigenvectors obtained from eigenvalue decomposition of the *covariance* matrix. |\n|  | **_jacobian : ndarray of size [n_components*p, n*p]_** <br/> Jacobian containing derivatives of *eigenvectors* w.r.t. input *matrix*. |\n|  | **_jacobian_eigenvalues : ndarray of size [n_components*p, n*p]_** <br/> Jacobian containing derivatives of *eigenvalues* w.r.t. input *matrix*. |\n|  | **_cov_eigenvectors : ndarray of size [n_components*p, n_components*p]_** <br/> Propagated uncertainties of *eigenvectors*.|\n|  | **_cov_eigenvalues : ndarray of size [n_components*n_components]_** <br/> Propagaged uncertainties of *eigenvalues*. |\n|  | **_transformed data : ndarray of size [n, n_components]_** <br/> Low dimensional representation of data after applying PCA. |\n\n| Methods    |  |\n| ------------- | ------------- |\n| ***pca_value()*** | Apply PCA to the *matrix*.|\n| ***pca_grad(center=True)*** | Apply PCA to the *matrix* and compute the *jacobian* and *jacobian_eigenvalues* using automatic differentiation. |\n| ***transform_data()*** | Transform *matrix* according to *eigenvectors* and reduce dimensionality according to *n_components*.|\n| ***compute_cov_eigenvectors()*** | Compute uncertainties of *eigenvectors*.|\n| ***compute_cov_eigenvalues()*** | Compute uncertainties of *eigenvalues*.|\n| ***animate(n_frames=10, labels=None, outfile='animation.html')*** | Generate animation with *n_frames* number of frames with plotly. *labels* (list, 1d array) indicate labelling of individual samples. Save animation (as html) at *outfile*. |\n\n#### Example datasets\nThree example datasets can be loaded after installing VIPurPCA providing mean, covariance and labels. \n```\nfrom vipurpca import load_data\nY, cov_Y, y = load_data.load_studentgrades_dataset()\nY, cov_Y, y = load_data.load_mice_dataset()\nY, cov_Y, y = load_data.load_estrogen_dataset()\n```\nMore information on the datasets can be found [here](https://github.com/Integrative-Transcriptomics/VIPurPCA)\n\n#### Example\n```\nfrom vipurpca import load_data\nfrom vipurpca import PCA\n\n# load mean (Y), uncertainty estimates (cov_Y) and labels (y)\nY, cov_Y, y = load_data.load_mice_dataset()\npca_student_grades = PCA(matrix=Y, cov_data=cov_Y, n_components=2, axis=0, compute_jacobian=True)\n# compute PCA with backprop\npca_student_grades.pca_grad()\n# Bayesian inference\npca_student_grades.compute_cov_eigenvectors()\npca_student_grades.compute_cov_eigenvalues()\n# Transform data \npca_student_grades.transform_data()\npca_student_grades.animate(n_frames=10, labels=y, outfile='animation.html')\n```\n\nThe resulting animation can be found here [here](https://integrative-transcriptomics.github.io/VIPurPCA/examples/studentgrades/).\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Integrative-Transcriptomics/VIPurPCA",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "vipurpca",
            "package_url": "https://pypi.org/project/vipurpca/",
            "platform": "",
            "project_url": "https://pypi.org/project/vipurpca/",
            "project_urls": {
                "Bug Tracker": "https://github.com/Integrative-Transcriptomics/VIPurPCA/issues",
                "Homepage": "https://github.com/Integrative-Transcriptomics/VIPurPCA"
            },
            "release_url": "https://pypi.org/project/vipurpca/0.0.1/",
            "requires_dist": [
                "jax (>=0.1.70)",
                "jaxlib (>=0.1.48)",
                "matplotlib (>=3.4.2)",
                "npm (>=0.1.1)",
                "numpy (>=1.18.5)",
                "pandas (>=1.1.3)",
                "plotly (>=4.4.1)",
                "psutil (==5.6.2)",
                "scikit-learn (==0.24.1)",
                "seaborn (==0.11.0)",
                "sklearn (==0.0)",
                "urllib3 (==1.26.5)"
            ],
            "requires_python": ">=3.7",
            "summary": "Visualizing and propagating uncertainty in PCA",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12165657,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "22da30895a271ef6e3a053ab0abb322f",
                    "sha256": "c32ae7d2131b9332fa64897e5ab4697bfbc2c8462bd6a3330e5a23bb9a3585db"
                },
                "downloads": -1,
                "filename": "vipurpca-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "22da30895a271ef6e3a053ab0abb322f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 2822869,
                "upload_time": "2021-11-30T12:51:18",
                "upload_time_iso_8601": "2021-11-30T12:51:18.984606Z",
                "url": "https://files.pythonhosted.org/packages/3f/c6/8a3cf75f058a84c2d40f041bb399841188d527a83b0ad2cf5359e61f9730/vipurpca-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3684b9a9d1a8bf1bae8f4dae80e0bf53",
                    "sha256": "af8e5b5af9689b9e076680c3eb9eb300eca417d4e7eeb05a81ce58fb1f659c06"
                },
                "downloads": -1,
                "filename": "vipurpca-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3684b9a9d1a8bf1bae8f4dae80e0bf53",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 2816313,
                "upload_time": "2021-11-30T12:51:23",
                "upload_time_iso_8601": "2021-11-30T12:51:23.222470Z",
                "url": "https://files.pythonhosted.org/packages/48/a5/88b515096c4f800c9cc6c782cc62d44e3b5e7ec6a565999efb4436bbf0c5/vipurpca-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}