{
    "0.1.0": {
        "info": {
            "author": "Chris Newville",
            "author_email": "chrisnewville1396@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9",
                "Topic :: Internet :: WWW/HTTP"
            ],
            "description": "# pi_stream_util\n\n*Self managed stream processor for PI Web API Channels*\n\npi_stream_util is an abstraction layer built on the [piwebasync](https://github.com/newvicx/piwebasync) `WebsocketClient`. It is designed to be a reliable and resilient message processor for incoming data from a PI Web API channel connection. The purpose of pi_stream_util is to receive incoming messages from a channel endpoint, handle the messages, and pass the processed messages onto an async queue. Typically, messages passed along to the queue are picked up by a producer process which publishes the messages to a broker.\n\n## Installation\n\nInstall pi_stream_util using pip:\n\n```\npip install pi-stream-util\n```\n\n## Usage\n\n### Basic usage\n\n```python\nimport asyncio\n\nfrom piwebasync import Controller, WebsocketMessage\nfrom pi_stream_util import Stream\n\ndef handler(message: WebsocketMessage):\n    return WebsocketMessage\n\nasync def main():\n    webid = 'my_webid'\n    request = Controller('wss', 'mypihost', root='piwebapi').streamsets.get_channel_adhoc([webid])\n    queue = asyncio.Queue()\n    stream = Stream(queue)\n    # Start the stream\n    stream_id = await stream.start(request, handler)\n    # Stream will start processing messages and putting them in the queue\n    # Stop the stream\n    await stream.stop()\n    \n```\n\n### Live Updating\n\nYou can update a stream in real time to add additional points/attributes\n\n```python\nnew_request = Controller('wss', 'mypihost', root='piwebapi').streamsets.get_channel_adhoc([webid, new_webid])\nawait stream.update(new_request)\n```\n\nIf an update fails, the default behavior is to rollback the stream to the previous request. If an update fails but the stream rolls back successfully, a `ChannelRollback` error will be raised. Optionally you can set `rollback=False` and if an update fails, a `ChannelUpdateError` will be raised and the stream will not process anymore messages\n\n### Stream Error Callbacks\n\nYou can assign a callback function to be called when the stream encounters an error and closes the websocket connection. This feature is helpful when you have several streams running under a manager type object. The callback can trigger the manager to send an alert and potentially try and restart the stream. The callback can be set as an optional parameter in the `start()` coroutine\n\n```python\ndef error_callback(fut: asyncio.Future):\n    print(\"Stream encountered an error\")\n    \nawait stream.start(request, handler, on_error_callback=error_callback)\n```\n\n### Stopping the Stream\n\nYou can stop the stream by calling the `stop()` coroutine. This will handle cleanly closing the websocket connection. `stop()` is idempotent, meaning multiple calls to `stop()` will have no effect and will just return immediately. When `stop()` is called for the first time, if the stream encountered an error during processing, that error will be raised when calling `stop()`\n\n```python\ntry:\n    await stream.stop()\nexcept PIWebAsyncException:\n    # Do something with error\n    raise\n```\n\n## Requirements\n\n- piwebasync>=0.1.1\n\n## Supports\n\n- python>=3.9\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/newvicx/pi_stream_util",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pi-stream-util",
            "package_url": "https://pypi.org/project/pi-stream-util/",
            "platform": null,
            "project_url": "https://pypi.org/project/pi-stream-util/",
            "project_urls": {
                "Changelog": "https://github.com/newvicx/pi_stream_util/blob/master/CHANGELOG.md",
                "Homepage": "https://github.com/newvicx/pi_stream_util",
                "Source": "https://github.com/newvicx/pi_stream_util"
            },
            "release_url": "https://pypi.org/project/pi-stream-util/0.1.0/",
            "requires_dist": [
                "piwebasync (>=0.1.1)"
            ],
            "requires_python": ">=3.9",
            "summary": "Self managed stream processor for PI Web API Channels",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13364357,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d662d9fb9bfe91b4c5ec5ff249e21f16",
                    "sha256": "19b681a06b08ec8343d10c8a18ee765b4da46171954cc7d9c514528b647dd040"
                },
                "downloads": -1,
                "filename": "pi_stream_util-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d662d9fb9bfe91b4c5ec5ff249e21f16",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 6804,
                "upload_time": "2022-03-31T18:58:36",
                "upload_time_iso_8601": "2022-03-31T18:58:36.096074Z",
                "url": "https://files.pythonhosted.org/packages/cd/7a/6e684951f557ac4696419b954353c2b0c24530ba3a30fdb78030f58e3fbc/pi_stream_util-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "08c4ad8103e3ae01661a3ad2a14a4f69",
                    "sha256": "c30a9ce8d51e3410b2b251ac463f5aaf9eeab708a4b533de54c8af14fcbbcee8"
                },
                "downloads": -1,
                "filename": "pi_stream_util-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "08c4ad8103e3ae01661a3ad2a14a4f69",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 6910,
                "upload_time": "2022-03-31T18:58:37",
                "upload_time_iso_8601": "2022-03-31T18:58:37.718594Z",
                "url": "https://files.pythonhosted.org/packages/dd/5c/e9c3117910d077772b82d7354290d060884c69bcc8c17bc6ea74713ede9e/pi_stream_util-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}