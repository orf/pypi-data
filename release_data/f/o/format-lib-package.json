{
    "1.0.0": {
        "info": {
            "author": "Example Author",
            "author_email": "author@example.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Travaux Pratiques: Distrbution de votre code Python\n\nLors de cet s\u00e9ance, nous allons transformer en package les fichiers pythons d\u00e9velopp\u00e9s lors du [TP2](http://pedago-service.univ-lyon1.fr:2325/POO/TP2). Cette op\u00e9ration se d\u00e9roulera au travers des \u00e9tapes suivantes:\n1. La copie des modules Python dans une arborescence de r\u00e9pertoires ad-hoc\n2. La transformation de votre module Python en un package\n3. La cr\u00e9ation d'un jeu de fonctions expos\u00e9es \"publiquement\" par votre package\n4. La mention des sp\u00e9cifications de votre package dans le fichier de configuration de pip (`setuptool.py`)\n5. Le d\u00e9ploiement en local de ce package depuis son repository git de d\u00e9veloppement\n6. La construction d'une distribution \u00e0 partir de votre package\n7. L'upload de cette distribution sur pipy.org\n\n## Mise en place\n\n### Cr\u00e9ation d'un repository gitlab d\u00e9di\u00e9\n\nVeuillez initialiser un d\u00e9p\u00f4t git du type `http://pedago-service.univ-lyon1.fr:2325/USER_ID/<package_formatlib_repo>`. Vous clonerez celui-ci et y travaillerez pour le reste de ce travail, sauf mention contraire. Vous pouvez choisir le nom `<package_format_lib>` qui vous convient.\n\n### Virtualenv\nCr\u00e9ez un environnement virtuel, \u00e0 l'aide du module \n    [`venv`](https://docs.python.org/3/tutorial/venv.html) pour le d\u00e9roulement de ce TP.\n\n**Attention**, le r\u00e9pertoire *contenant* l'environnement virtuel est cr\u00e9\u00e9 dans votre repertoire courant. Afin de ne pas joindre cete environnement \u00e0 vos `git commit` vous pouvez:\n- executer la commande `python -m venv` en dehors de votre d\u00e9p\u00f4t git\n- ajouter le repertoire de l'environnement \u00e0 un fichier [`.gitignore`](https://git-scm.com/docs/gitignore)\n\n### Modules requis\nActivez, puis installez les modules suivants dans l'environnement:\n\n* [setuptools](https://pypi.org/project/setuptools/)\n* [twine](https://pypi.org/project/twine/)\n\nObservez quelles modifications du r\u00e9pertoire de l'environnement ont induites ces deux installations.\n\n### Cr\u00e9ation de l'arborescence\n```shell\n<MON_DEPOT_GIT>\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 <PACKAGE_FORMATLIB>\n        \u2514\u2500\u2500 formatLib.py\n        \u2514\u2500\u2500 ...\n```\n\nAvec, \n* MON_DEPOT_GIT: le nom du r\u00e9pertoire local contenant votre d\u00e9p\u00f4t git\n* README.md: le fichier de documentation de votre futur package, pour l'instant vide\n* setup.py: le fichier de configuration de `pip install`, pour l'instant vide\n* MON_PACKAGE_FORMAT_LIB: le nom que vous souhaitez donner \u00e0 votre futur package\n* `formatLib.py` et `...`: le(s) module(s) d\u00e9velopp\u00e9(s) \u00e0 l'issue du TP2\n\nToutes les modifications \u00e0 apporter \u00e0 vos fichiers Python prendront donc place dans le r\u00e9pertoire `<MON_DEPOT_GIT>/src/<PACKAGE_FORMATLIB>`\n\n### Transformation en package\n\nUn package est essentiellement un module dot\u00e9 d'une variable `__path__`. Dans la pratique, que convient-il d'ajouter au(x) r\u00e9pertoire(s) actuel(s) pour le(s) faire \u00e9voluer en package ?  \n\n### Cr\u00e9ation de l'interface publique (API) du package\n\nNous souhaitons permettre aux futurs utilisateurs du package de r\u00e9aliser facilement les op\u00e9rations de conversion de format sous la forme de fonctions (et non plus de script).\nLe package pourra ainsi \u00eatre utilis\u00e9 de la fa\u00e7on suivante:\n\n###### `script_test.py`\n\n```python\nimport <PACKAGE_FORMATLIB>\n# Lit un fihier au format BED et \u00e9crit \n# son \u00e9quivalent dans un fichier au format GMF\n<PACKAGE_FORMATLIB>.bed2gmf(FILE_IN , FILE_OUT1)\n# Lit un fihier au format BED et \u00e9crit \n# son \u00e9quivalent dans un fichier au format SSAM\n<PACKAGE_FORMATLIB>.bed2ssam(FILE_IN, FILE_OUT2)\n```\n\nDans ce exemple, la fonction `bed2gmf`, est une fonction publique qui appelera les fonctions pr\u00e9-existantes dans votre module `formatLib` n\u00e9cessaires pour:\n\n- Parser le fichier source\n- Cr\u00e9er les objets/dictionnaires stockant ces donn\u00e9es  \n- Formater ces donn\u00e9es dans une cha\u00eene de caract\u00e8res au format de sortie demand\u00e9\n\nVous devrez proposer une impl\u00e9mentation compl\u00e8te des fonctions publiques `bed2gmf` et `bed2ssam` prenant en charge toutes les \u00e9tapes de la lecture du fichier d'entr\u00e9e \u00e0 l'\u00e9criture dans un fichier de sortie. Par exemple, \u00e9tant donn\u00e9e une fonction pr\u00e9existante \u00e9quivalente \u00e0 `formatLib.bed_parser`\n\n###### `MON_PACKAGE/__init__.py`\n\n```python\nimport formatLib\ndef bed2gmf(bed_file_in, gmf_file_out):\n    data       = formatLib.bed_parser(bed_file_in)\n    gmf_format = formatLib.gmf_dumper(data)\n\n    with open(gmf_file_out,'w') as fp:\n        fp.write(gmf_format)\n```\n\nCeci n'est qu'un exemple, vous l'adapterez \u00e0 la version de votre librairie. Id\u00e9alement, vous **ne modifierez pas** votre librarie `formatLib`.\n\n### Configuration de l'installation du package\n\nL'installation d'un package est prise en charge par la commande pip install MON_PACKAGE. Dans le cas d'une distribution source, la commande, `pip`  ex\u00e9cute le fichier `setup.py` contenu dans l'archive du package.\n\n#### Ecriture du fichier setup.py\n\nColler dans le fichier appropri\u00e9 de votre d\u00e9p\u00f4t git, le contenu suivant et modifier son contenu le pour l'adapter \u00e0 votre package.\n\n```python\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"<PACKAGE_FORMATLIB>\", # Par convention, utiliser le nom du repertoire contenant votre package\n    version=\"1.0.0\",\n    author=\"Example Author\",\n    author_email=\"author@example.com\",\n    description=\"A small example package\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"http://pedago-service.univ-lyon1.fr:2325/POO/tp-packaging\",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n    ],\n    install_requires=['numpy'],\n    package_dir={'': 'src'},\n    python_requires='>=3.6',\n)\n```\n\nL'option `package_dir` definit le repertoire dans lequel chercher le repertoire de votre package.\nObservez notamment comment sont g\u00e9n\u00e9r\u00e9s les documentations.\nVous devrez \u00e9diter la documentation \"longue\" au fur et \u00e0 mesure de ce TP.\n\n#### Test de deploiement de votre package\n\nLe programme [`pip`](https://pip.pypa.io/en/stable/reference/) est un outil puissant aux multiples fonctionalit\u00e9s. Nous allons tout d'abord l'utilis\u00e9 pour verifier la validit\u00e9 de notre version local du projet et son fichier `setup.py`. La forme de la commande pip est alors la suivante:\n\n```shell\npip install [options] <local project path> ...\n```\n\nO\u00f9 `<local project path>` est le chemin jusqu'au repertoire contenant le fichier de configuration `setup.py`.\n**La commande est \u00e0 executer dans un environnement virtuel**.\nVerifier ensuite l'installation du package en:\n\n- inspectant le r\u00e9pertoire `site-packages`\n- important le package dans l'interpreteur Python en ligne de commandes (REPL).\n\nQuelle forme a pris l'installation de votre package?\nObservez vous des modification dans le d\u00e9p\u00f4t git?\nModifiez le fichier `.gitignore` en cons\u00e9quence.\n\n#### Test de deploiement distant de votre package\nTout d'abord, mettez \u00e0 jour le d\u00e9p\u00f4t distant de votre projet, aka:`commit & push`, vous pouvez changer le num\u00e9ro de version de votre package dans `setup.py`.\nNous allons maintenant pouvoir tester l'installation de votre package depuis ce d\u00e9p\u00f4t distant, gr\u00e2ce \u00e0 la prise en charge par pip des protocoles ssh,http et git.\nLa commande [`pip`](https://pip.pypa.io/en/stable/reference/) sera de la forme\n```sh\npip install -I git+http://pedago-service.univ-lyon1.fr:2325/<USER_ID>/<package_formatlib_repo>\n```\nle flag `-I`, assure une r\u00e9installation dans les cas ou un package de m\u00eames nom et version serait d\u00e9j\u00e0 install\u00e9 (ce qui est la cas ici).\n\n##### Pr\u00e9cisions\nDans les deux cas de test ci-dessus le flag `-e` permettrait d'installer le package en mode \u00e9dition, ce qui, coupl\u00e9 au flag `--src` autorise \u00e0 installer le package dans le repertoire de son choix\n```sh\npip install -I -e --src /tmp/editable_pkg git+http://pedago-service.univ-lyon1.fr:2325/<USER_ID>/<package_formatlib_repo>\n```\nhttps://pip.pypa.io/en/latest/reference/pip_install/#vcs-support\n\n#### Construire les distributions\n\nMaintenant que le deploiement de votre package est assur\u00e9, nous allons cr\u00e9er les archives necessaire \u00e0 son partage avec le monde entier.\n\n##### Distribution source \n\n\n##### Distribution wheel\n\n\n##### Envoi \u00e0 pipy.org",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://pedago-service.univ-lyon1.fr:2325/POO/tp-packaging",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "format-lib-package",
            "package_url": "https://pypi.org/project/format-lib-package/",
            "platform": "",
            "project_url": "https://pypi.org/project/format-lib-package/",
            "project_urls": {
                "Homepage": "http://pedago-service.univ-lyon1.fr:2325/POO/tp-packaging"
            },
            "release_url": "https://pypi.org/project/format-lib-package/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A small example package",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8755977,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "87943666e3f7970f9ba31bae8b39e5f1",
                    "sha256": "4a632b9b9cab804f7c190b9116283593b3fadd87deb38712bbd701d5b6820cc7"
                },
                "downloads": -1,
                "filename": "format-lib-package-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "87943666e3f7970f9ba31bae8b39e5f1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 4784,
                "upload_time": "2020-11-26T14:39:02",
                "upload_time_iso_8601": "2020-11-26T14:39:02.991285Z",
                "url": "https://files.pythonhosted.org/packages/84/61/7f39875a93ba349f9c2b290080c7d9491d174d834b5abbe41c7d3811ce9e/format-lib-package-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}