{
    "1.0.0": {
        "info": {
            "author": "Aurum",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SunakazeKun/pyjmap",
            "keywords": "nintendo,jsystem,jmap,bcsv,modding",
            "license": "gpl-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyjmap",
            "package_url": "https://pypi.org/project/pyjmap/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyjmap/",
            "project_urls": {
                "Homepage": "https://github.com/SunakazeKun/pyjmap"
            },
            "release_url": "https://pypi.org/project/pyjmap/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Python library for Nintendo's BCSV/JMap format",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14400816,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1531536985e688d8021fb1b0b0211f58",
                    "sha256": "b68157e2c3002cf59565b065080eaf0bd6f77b9243c1ad46b7c9b10e918bddec"
                },
                "downloads": -1,
                "filename": "pyjmap-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "1531536985e688d8021fb1b0b0211f58",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 15698,
                "upload_time": "2022-03-17T10:14:50",
                "upload_time_iso_8601": "2022-03-17T10:14:50.221545Z",
                "url": "https://files.pythonhosted.org/packages/e9/3a/cff0fb5573f0e1bb33842d8c55c2781c7eb24554e85b550ba72dba6cd2a3/pyjmap-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "Aurum",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SunakazeKun/pyjmap",
            "keywords": "nintendo,jsystem,jmap,bcsv,modding",
            "license": "gpl-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyjmap",
            "package_url": "https://pypi.org/project/pyjmap/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyjmap/",
            "project_urls": {
                "Homepage": "https://github.com/SunakazeKun/pyjmap"
            },
            "release_url": "https://pypi.org/project/pyjmap/1.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Python library for Nintendo's BCSV/JMap format",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14400816,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a14fb69aa14d7db3473cc10c6ae0ee57",
                    "sha256": "6200414cb92d36cdeed2323b6dad717593146768b6afc97fce5382e4d4218a3c"
                },
                "downloads": -1,
                "filename": "pyjmap-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a14fb69aa14d7db3473cc10c6ae0ee57",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 24361,
                "upload_time": "2022-03-17T13:00:24",
                "upload_time_iso_8601": "2022-03-17T13:00:24.420770Z",
                "url": "https://files.pythonhosted.org/packages/85/ba/fab1f4632ca73c5d87ea875db48787b0b47a178d6b5358f6fff9e9c9766b/pyjmap-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2": {
        "info": {
            "author": "Aurum",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SunakazeKun/pyjmap",
            "keywords": "nintendo,jsystem,jmap,bcsv,modding",
            "license": "gpl-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyjmap",
            "package_url": "https://pypi.org/project/pyjmap/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyjmap/",
            "project_urls": {
                "Homepage": "https://github.com/SunakazeKun/pyjmap"
            },
            "release_url": "https://pypi.org/project/pyjmap/1.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Python library for Nintendo's BCSV/JMap format",
            "version": "1.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14400816,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4959468ede473300b2627d1d002e1fc5",
                    "sha256": "2df4f3951074b13f8b845f33f156db3c3e1114fa2ca2f01c65e6147500ce7d6c"
                },
                "downloads": -1,
                "filename": "pyjmap-1.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "4959468ede473300b2627d1d002e1fc5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 25070,
                "upload_time": "2022-03-23T13:03:31",
                "upload_time_iso_8601": "2022-03-23T13:03:31.550893Z",
                "url": "https://files.pythonhosted.org/packages/7a/4f/d64c40efca4cf9ec420a80cff93c9ff78f797eecd13aacac8ec1aea2ed5c/pyjmap-1.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.3": {
        "info": {
            "author": "Aurum",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SunakazeKun/pyjmap",
            "keywords": "nintendo,jsystem,jmap,bcsv,modding",
            "license": "gpl-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyjmap",
            "package_url": "https://pypi.org/project/pyjmap/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyjmap/",
            "project_urls": {
                "Homepage": "https://github.com/SunakazeKun/pyjmap"
            },
            "release_url": "https://pypi.org/project/pyjmap/1.0.3/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Python library for Nintendo's BCSV/JMap format",
            "version": "1.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14400816,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "151d9760bb453e8c1a9514ac63904818",
                    "sha256": "978eebc2123151ab0421d05ad1745171cb723eb5a7277ec234616ee01a77c578"
                },
                "downloads": -1,
                "filename": "pyjmap-1.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "151d9760bb453e8c1a9514ac63904818",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 37910,
                "upload_time": "2022-07-08T08:39:04",
                "upload_time_iso_8601": "2022-07-08T08:39:04.933089Z",
                "url": "https://files.pythonhosted.org/packages/8f/03/5d701c4e4b91a48b2fc562016f871e6025c24fcac45c95b84ff615032771/pyjmap-1.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.6": {
        "info": {
            "author": "Aurum",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "# pyjmap\n**pyjmap** is a high-level implementation of Nintendo's homemade BCSV/JMap data format. This includes methods to construct, analyze, manipulate, deserialize and serialize proper JMap data. Conversion between CSV and BCSV files is also supported. The reverse-engineered specifications of the file format can be accessed on the [Luma's Workshop wiki](https://luma.aurumsmods.com/wiki/BCSV_(File_format)). This flatbuffer-like data type was used in first-party GameCube and Wii games. As the field/column names are hashed, a lookup table needs to be used to retrieve proper field names. For this, the library provides hashtable implementations for *Super Mario Galaxy*, *Super Mario Galaxy 2*, *Luigi's Mansion* and *Donkey Kong Jungle Beat*.\n\n## Setup\nThis library requires **Python 3.6 or newer**. You can use pip to install *pyjmap*:\n```sh\npip install pyjmap\n```\n\n## Command usage\nCommand line operations to convert between JMap and CSV files are supported. The CSV files are required to be in a special format that has been found in some leftover source files from *Super Mario Galaxy 2*. That format is described down below.\n\nYou can dump the contents of a BCSV/JMap file to a CSV file using:\n```sh\npyjmap tocsv [-le] [-jmapenc JMAP_ENCODING] [-csvenc CSV_ENCODING] {smg,dkjb,lm} JMAP_FILE_PATH CSV_FILE_PATH\n```\n\nProper CSV files can be converted back to BCSV/JMap files using:\n```sh\npyjmap tojmap [-le] [-jmapenc JMAP_ENCODING] [-csvenc CSV_ENCODING] {smg,dkjb,lm} CSV_FILE_PATH JMAP_FILE_PATH\n```\n\nIf ``le`` is set, the data is expected to be stored using little-endian byte order. ``jmapenc`` specifies the encoding of strings in the JMap data and it defaults to ``shift_jisx0213``. ``csvenc`` is the encoding of the CSV file and it uses ``utf-8`` by default. The hash lookup table is specified by ``HASHTABLE``. Supported values are ``smg`` for *Super Mario Galaxy*, ``lm`` for *Luigi's Mansion*, ``sms`` for *Super Mario Sunshine* and ``dkjb`` for *Donkey Kong Jungle Beat*.\n\n## Library usage\nThe library provides various high-level operations to deal with JMap data. Below is some example code showing the fundamentals of *pyjmap*. Look at [jmap.py](pyjmap/jmap.py) for more information about the different methods.\n\n```python\nimport pyjmap\n\n# A hash lookup table is required to retrieve the proper names for hashed fields:\nhashtbl_smg = pyjmap.SuperMarioGalaxyHashTable()    # Lookup table for Super Mario Galaxy 1/2\nhashtbl_sms = pyjmap.SuperMarioSunshineHashTable()  # Lookup table for Super Mario Sunshine\nhashtbl_lm = pyjmap.LuigisMansionHashTable()        # Lookup table for Luigi's Mansion\nhashtbl_dkjb = pyjmap.JungleBeatHashTable()         # Lookup table for Donkey Kong Jungle Beat\n\n# Create JMapInfo data from files and print number of entries\ninfo = pyjmap.from_file(hashtbl_smg, \"GalaxySortIndexTable.bcsv\", big_endian=True)  # Big-endian is True by default\ninfo_from_csv = pyjmap.from_csv(hashtbl_smg, \"GalaxySortIndexTable.csv\")            # Load data from CSV file\nprint(\"Number of entries: %d\" % len(info))                                          # >> Number of entries: 55\n\n# Print fields\nfor field in info.fields:\n    print(field)  # >> name\n                  # >> MapPaneName\n                  # >> OpenCondition0\n                  # >> OpenCondition1\n                  # >> OpenCondition2\n                  # >> PowerStarNum\n                  # >> GrandGalaxyNo\n\n# Checking if a field exists\nprint(\"MapPaneName\" in info)  # >> True\nprint(\"StageName\" in info)    # >> False\n\n# Getting information about a field\nfield = info.get_field(\"MapPaneName\")  # Get field by name\nfield = info.get_field(0x7991F36F)     # Get field by hash\n\nprint(\"[%08X]\" % field.hash)  # >> [7991F36F]\nprint(field.name)             # >> MapPaneName\nprint(field.type)             # >> JMapFieldType.STRING_OFFSET\nprint(\"0x%08X\" % field.mask)  # >> 0xFFFFFFFF\nprint(field.shift)            # >> 0\n\n# Manually-specified offsets and bit-packed data\ncollision_pa = pyjmap.JMapInfo(hashtbl_smg)\ncollision_pa.manual_offsets = True\ncollision_pa.create_field(\"camera_id\", pyjmap.JMapFieldType.LONG, 0, mask=0x000000FF, shift_amount=0, offset=0)\ncollision_pa.create_field(\"Sound_code\", pyjmap.JMapFieldType.LONG, 0, mask=0x00007F00, shift_amount=8, offset=0)\ncollision_pa.create_field(\"Floor_code\", pyjmap.JMapFieldType.LONG, 0, mask=0x001F8000, shift_amount=15, offset=0)\ncollision_pa.create_field(\"Wall_code\", pyjmap.JMapFieldType.LONG, 0, mask=0x01E00000, shift_amount=21, offset=0)\ncollision_pa.create_field(\"Camera_through\", pyjmap.JMapFieldType.LONG, 0, mask=0x02000000, shift_amount=25, offset=0)\n\n# Creating an exact copy of the data\ncopied = info.copy()\n\n# The following creates a new field called CometMedalNum which uses the LONG data type. The field's default value\n# that is applied to all fields is -1. The optional bitmask and shift amount are 0xFFFFFFFF and 0, respectively.\ncopied.create_field(\"CometMedalNum\", pyjmap.JMapFieldType.LONG, -1, mask=0xFFFFFFFF, shift_amount=0)\n\n# This removes the field OpenCondition2 and its data in all entries.\ncopied.drop_field(\"OpenCondition2\")\n\n# Accessing entries directly\nfirst = copied[0] # Get first entry from copied data\nlast = copied[-1] # Get last entry from copied data\n\n# Adding and deleting entries\nnew_entry = copied.create_entry()  # Creates a new entry with default data for all fields\ndel copied[-3:]                    # Delete the last three entries from the copied data\n\n# Iterate over all entries and set GrandGalaxyNo to 0\nfor entry in copied:\n    entry[\"GrandGalaxyNo\"] = 0\n\n# Sort entries by name in lexicographic descending order\ninfo.sort_entries(lambda e: e[\"name\"].lower(), reverse=True)\n\n# Get all entries whose name start with \"Koopa\"\nfor entry in filter(lambda e: e[\"name\"].startswith(\"Koopa\"), info):\n    print(entry)  # >> {'name': 'KoopaJrShipLv1Galaxy', ... }\n                  # >> {'name': 'KoopaBattleVs3Galaxy', ... }\n                  # >> {'name': 'KoopaBattleVs2Galaxy', ... }\n                  # >> {'name': 'KoopaBattleVs1Galaxy', ... }\n\n# Write data to files\npyjmap.write_file(info, \"GalaxySortIndexTable_edited.bcsv\", big_endian=True)  # Pack and write binary\npyjmap.dump_csv(copied, \"GalaxySortIndexTable_copied.csv\", encoding=\"utf-8\")  # Dump CSV content\n\n# Pack as little-endian buffer\npacked_copied = pyjmap.pack_buffer(copied, big_endian=False)\n```\n\n# Data types\nThe following field data types are supported:\n\n| Identifier | CSV type | Description |\n| - | - | - |\n| ``JMapFieldType.LONG`` | ``Int`` | 32-bit integer\n| ``JMapFieldType.LONG_2`` | ``Int2`` | 32-bit integer\n| ``JMapFieldType.SHORT`` | ``Short`` | 16-bit integer\n| ``JMapFieldType.CHAR`` | ``Char`` | 8-bit integer\n| ``JMapFieldType.FLOAT`` | ``Float`` | single-precission float\n| ``JMapFieldType.STRING`` | ``EmbeddedString`` | embedded SJIS string (occupies 31 bytes at max)\n| ``JMapFieldType.STRING_OFFSET`` | ``String`` | SJIS string (**not supported in Luigi's Mansion**)\n\n# CSV format\nThe CSV format is based on the format of known source files that were left in the files of *Super Mario Galaxy 2*:\n* All CSV files are comma-delimited and use quote-marks for quoted cell strings. Quoting is only used when necessary.\n* The first CSV-row contains the field descriptors. A field descriptor always consists of three components that are separated by double-colons: the field's name, the data type and the default value. All existing CSV types are described in the previous section and are case sensitive!\n* The default value for strings is 0 and is always ignored. It is only kept for syntax.\n* If an entry's field data is empty, the default value will be used.\n* The field name may be a hash if it's a hex-string encapsulated between two square brackets (for example ``[DEADBEEF]``)\n\nHere is an example of a properly-formated CSV file:\n```csv\nname:String:0,MapPaneName:String:0,OpenCondition0:String:0,OpenCondition1:String:0,OpenCondition2:String:0,PowerStarNum:Char:0,GrandGalaxyNo:Char:0\nAstroGalaxy,dummy,,,,0,0\nAstroDome,dummy,,,,0,0\nLibraryRoom,dummy,,,,0,0\nPeachCastleGardenGalaxy,dummy,,,,0,0\nEpilogueDemoStage,dummy,,,,0,0\n```",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SunakazeKun/pyjmap",
            "keywords": "nintendo,jsystem,jmap,bcsv,modding",
            "license": "gpl-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyjmap",
            "package_url": "https://pypi.org/project/pyjmap/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyjmap/",
            "project_urls": {
                "Homepage": "https://github.com/SunakazeKun/pyjmap"
            },
            "release_url": "https://pypi.org/project/pyjmap/1.0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Python library for Nintendo's BCSV/JMap format",
            "version": "1.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14400816,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6c1b02fc5878e4fd8d040c5b7912fb83",
                    "sha256": "3bacccf2003652cdba6f8cbf54257c6967a8b135eae7c1cc3b76d8be318dcc4f"
                },
                "downloads": -1,
                "filename": "pyjmap-1.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "6c1b02fc5878e4fd8d040c5b7912fb83",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 37915,
                "upload_time": "2022-07-11T15:57:23",
                "upload_time_iso_8601": "2022-07-11T15:57:23.282024Z",
                "url": "https://files.pythonhosted.org/packages/b5/bf/a970296edead3bb6b7d97e05290e2e77c433a4160973774d5f8afcab81c5/pyjmap-1.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}