{
    "2.1.8": {
        "info": {
            "author": "Laurent Tupin",
            "author_email": "laurent.tupinn@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: Free For Home Use",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# pynut_tools - Laurent Tupin\n\nIt provides various functions to simplify the users life. \n\n\n## Installation\n\nYou can install the package from [PyPI](https://pypi.org/project/pynut_tools/):\n\n    python -m pip install pynut_tools\n\nThe package is supported on Python 3.7 and above.\n\n\n\n## How to use\n\n\nYou can call a function as this example:\n\n    $ ----------------------------------------------------\n    >>> from pyNutTools import nutDate\n    >>> nutDate.today()\n\n\nThis is the libraries I am using with the package\n\n    $ ----------------------------------------------------\n    >>> pandas==1.1.3\n\n\n## Documentation\n\nTemporary documentation for nutDate :\n\n    from pyNut import nutDate as dat\n    \n    dte_date = dat.fDte_formatToDate(dte_date, str_dateFormat = '%d/%m/%Y')\n    \"\"\" fDte_formatToDate makes sure you will have a varable with a date format\n        The first Argument is the Variable (date), and the format of the string if it is a sting\n        It allows you to avoid testing the type of the variable and get your get Date anyhow\"\"\"\n    \n    int_dateDiff = dat.fInt_dateDifference(dte_date1, dte_date2)\n    \"\"\" fInt_dateDifference give you the difference in days between 2 dates\"\"\"\n    \n    Date2 = dat.fDte_convertExcelInteger(Date)\n    \"\"\" fDte_convertExcelInteger takes an integer as input, \n        This is the integer you can find in Excel when it is a date \n        And return the associated date  \"\"\"\n    \n    \nTemporary documentation for nutDataframe :\n\n    import pyNut.nutDataframe as dframe\n    \n    bl_isempty = dframe.fBl_isDataframeEmpty(df_simple)\n    \"\"\" Test if a Dataframe is empty\"\"\"\n    \n    df_simple = dframe.fDf_createSimpleDataframe()\n    \"\"\" Create a simple dataframe to make test\"\"\"\n    \n    bl_compare, df_compare = dframe.fBl_compareDfCol({'df': df_1, 'colJoin': 'colJoin','colToCompare':'data'},\n                                                      {'df': df_2,'colJoin': 'colJoin','colToCompare':'data'})\n    \"\"\" compare 2 dataframe one a numeric column by joining the df and returning the difference \"\"\"\n    \n    df_1['DataRounded'] = df_1['DataToBeRounded'].apply(lambda x: dframe.round_down(x))\n    \"\"\" Use the Math Function floor() - Able to add a decimals like in Excel\n        floor() rounds down. int() truncates. \n        The difference is clear when you use negative numbers\n        math.floor(-3.5)    -4\n        int(-3.5)           -3\"\"\"\n    \n    df_2['DataRounded'] = df_2['DataToBeRounded'].apply(lambda x: dframe.round_up(x))\n    \"\"\" Use the Math Function ceil() - Able to add a decimals like in Excel\"\"\"\n    \n    df_data = dframe.fDf_readCsv_enhanced(path, bl_header = None, str_sep = '|', l_names = range(33))\n    \"\"\" Use the pandas method read_csv\n        but resolving Parse Error and will try again after displaying a message \n        Also resolving UnicodeDecodeError by detecting the encoding and trying again accordingly \"\"\"\n     \n    df2 = dframe.fDf_removeDoublons(df1)\n    \"\"\" Remove all rows that are exactly the same\"\"\"\n     \n    df2 = dframe.fDf_DropRowsIfNa_resetIndex(df1, l_colToDropNA = ['col1'])\n    \"\"\" Drop the rows where all defined columns will be Nan\n        And reset the index\"\"\"\n    \n    df2 = dframe.dDf_fillNaColumn(df1, 'col2', 'col1')\n    \"\"\" Replace Nan in a column by the value in another column or a Constant \"\"\"\n    \n    df2 = dframe.fDf_fillColUnderCondition(df1, 'NameColApply', df1['data'], 'NameColC', 'YES', bl_except = False)\n    ''' Transform DF with condition\n        ValueToApply can be a value or a lambda function'''   \n    \n    \nTemporary documentation for nutOther :\n    \n    from pyNut import nutOther as oth\n    \n    1. Decorators\n    \n    @oth.dec_singletonsClass\n    class CLASS_TO_DECORATE():\n    ''' Singeltons decorators: always use the first instance \n        Example: connection to database, FTP (keep the same connection for performance and possibly Access issue)\n        '''    \n    \n    @oth.dec_getTimePerf(int_secondesLimitDisplay = 2)\n    def function_TO_DECORATE(*args, **kwarks):\n    ''' Time Performance Decorators on a function\n        You can calculate and compare Performance on any function just by decorating it\n        It will show nothing if the performance is better than a specific threshold you will defined\n        '''   \n    \n    @oth.dec_stopProcessTimeOut(int_secondesLimit = 10, returnIfTimeOut = False)\n    def function_TO_DECORATE(*args, **kwarks):\n    ''' This decorators allow to stop a process if it is too long\n        For example, testing a folder existence might be very very long...'''\n    \n\n***END***\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Laurent-Tupin/pynut_tools",
            "keywords": "",
            "license": "Copyright 2022-2035",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pynut-tools",
            "package_url": "https://pypi.org/project/pynut-tools/",
            "platform": null,
            "project_url": "https://pypi.org/project/pynut-tools/",
            "project_urls": {
                "Homepage": "https://github.com/Laurent-Tupin/pynut_tools"
            },
            "release_url": "https://pypi.org/project/pynut-tools/2.1.8/",
            "requires_dist": [
                "pandas (==1.1.3)"
            ],
            "requires_python": "",
            "summary": "Function easing life :)",
            "version": "2.1.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14363110,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a1c189bc51a183261c990c42c810570b",
                    "sha256": "92aa922fdcb15753b321533b4a066e38ff8b11ff67d5a347f33e66c586aeb456"
                },
                "downloads": -1,
                "filename": "pynut_tools-2.1.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a1c189bc51a183261c990c42c810570b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 28978,
                "upload_time": "2022-07-07T10:41:16",
                "upload_time_iso_8601": "2022-07-07T10:41:16.232975Z",
                "url": "https://files.pythonhosted.org/packages/f7/83/41c45a7856cd4abf52b064044ff0a84286de2ad3c0baaa767d7aca49ba1b/pynut_tools-2.1.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "12d54218a20364042440a754227fc757",
                    "sha256": "85042c1acacdd828b1b236d6edeec8d97c14ffd2bbd25d0c673fb032c5d460d7"
                },
                "downloads": -1,
                "filename": "pynut_tools-2.1.8.tar.gz",
                "has_sig": false,
                "md5_digest": "12d54218a20364042440a754227fc757",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 30948,
                "upload_time": "2022-07-07T10:41:19",
                "upload_time_iso_8601": "2022-07-07T10:41:19.308403Z",
                "url": "https://files.pythonhosted.org/packages/f5/64/643dabe2cca7cb6641a6c25d00debb2e9167fd254ccc43d092e78d4d3136/pynut_tools-2.1.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}