{
    "5.15.2.1.0": {
        "info": {
            "author": "Chad Dombrova",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Typing :: Stubs Only"
            ],
            "description": "\n# Type stubs for PySide2 (and soon PySide6)\n\nThe most accurate type stubs for PySide! They have been tested against a code base with many thousands of lines of PySide code.\n\n## Comparison to other PySide stubs\n\nI tried a number of projects before deciding to create my own.  Here's my super-biased assessment:\n\n| Stub Project                                                         | Technique                                                                         | Rating   |\n|----------------------------------------------------------------------|-----------------------------------------------------------------------------------|----------|\n| Official stubs                                                       | Uses PySide's `generate_pyi` stub generator                                       | abysmal  |\n| [PySide2-Stubs-Gen](https://github.com/HareInWeed/PySide2-Stubs-Gen) | Uses a modified version of `generate_pyi`                                         | marginal |\n| [PySide2-stubs](https://pypi.org/project/PySide2-stubs/)             | Reprocesses official stubs using [libcst](https://libcst.readthedocs.io/en/latest/) | better   |\n| [types-PySide2](https://pypi.org/project/types-PySide2/)             | Uses mypy's [stubgen](https://mypy.readthedocs.io/en/stable/stubgen.html)         | best     |\n\n`python-qt-tools/PySide2-stubs` is pretty good, but it still produced hundreds of errors in our code base.\nOne thing I really like about the project, however, is the set of tests that serves to both demonstrate PySide runtime behavior _and_ prove that the stubs are accurate, so I've heavily borrowed from that. \nI considered contributing new features to that project, but the approach of using an AST/CST parser to modify\nan upstream set of bad official stubs to make them good is convoluted and prone to errors from upstream changes.\nThis project uses mypy's official `stubgen` tool to directly generate stubs, with a set of corrections applied.\nCorrections are primarily defined through a dictionaries that map classes/methods/args to fixes which are applied during stub generation.\nIn the process of creating these stubs I made a bunch of improvements to mypy's `stubgen` tool which should benefit me and other stub creators in the future, rather than persisting and working around PySide's own mediocre `PySide2.support.generate_pyi` tool.\n\n## Features and fixes\n\n### General fixes\n\n* Fixed an issue where methods/attributes were not detected, due to presence of `QObject.__getattr__()`\n* Added all signals and made new-style signal patterns work\n  * e.g. `myobject.mysignal.connect(func)` and `myobject.mysignal[type].connect(func)`\n  * Fixed slot arg of `SignalInstance.connect()` to be `typing.Callable` instead of `object`\n  * Fixed `Signal.emit()`\n  * Fixed `Signal.connect()` return value to bool instead of None\n  * Fixed `Object.disconnect()`\n* Fixed flag classes to Aad all methods: `__or__`, `__xor__`, ...\n\n### Rule-based fixes\n\n* When instantiating subclasses of `QObject` it is possible to pass the values of properties and signals as `**kwargs` to `__init__`.  The stubs have been fix to include these on all relevant `__init__` methods.\n* Qt/PySide has special \"flag\" enumerator classes that work as pairs: one represents a single flag value, while the other represents multiple combined.  The stubs have been fix to allow either type of flag -- single or multiple -- anywhere that one of the would have been accepted, which is the correct behavior (technically `typing.SupportsInt` is the most correct, but using this would undermine the type enforcement provided by the stubs).\n* Removed redundant overlapping overloads, so that satisfying mypy/liskov on subclassed methods is easier \n* Fixed all arguments typed as `typing.Sequence` to be `typing.Iterable`.  Tests so far have indicated that this is true as a general rule.  Also note that unlike other projects, `typing.Iterable` includes the subtype, e.g. `typing.Iterable[str]`\n* Replaced `object` with `typing.Any` in return types. e.g.:\n  * `QSettings.value() -> Any`\n  * `QModelIndex.internalPointer() -> Any`\n  * `QPersistentModelIndex.internalPointer() -> Any`\n\n### Specific fixes\n\n* Certain argument types implicitly accept alternative types for brevity.  Below are the known fixes so far (Note that I've debated not including these, since one of the advantages of static typing is it gives you the confidence to be explicit rather than ambiguous. I could introduce a strict mode in the future that would disable these):\n  * `QKeySequence`: `str`\n  * `QColor`: `Qt.GlobalColor`\n  * `QBrush`: `QLinearGradient` and `QColor` (and by extension `Qt.GlobalColor`)\n  * `QCursor`: `Qt.CursorShape`\n  * `QEasingCurve`: `QEasingCurve.Type`\n* Corrected numerous annotations from `bytes/QByteArray` to `str`:\n  * `QObject.setProperty()`\n  * `QObject.property()`\n  * `QState.assignProperty()`\n  * `QCoreApplication.translate()`\n  * `format` args on all methods\n* Fixed `QTreeWidgetItemIterator.__iter__()` to return `Iterator[QTreeWidgetItemIterator]`\n* Added missing `QDialog.exec()` method\n* Fixed numerous methods which accept `None`:\n  * `QPainter.drawText(..., br)`\n  * `QPainter.drawPolygon(..., arg__2)`\n  * `QProgressDialog.setCancelButton(button)`\n  * `*.setModel(model)`\n  * `QLabel.setPixmap(arg__1)`\n* Fixed numerous arguments that accept `QModelIndex` which were typed as `int`\n* Fixed return type for `QApplication.instance()` and `QGuiApplication.instance()`\n* Fixed return type for `QObject.findChild()` and `QObject.findChildren()`\n* Fixed support for initializing `QDate` from `datetime.date`\n* Fixed support for initializing `QDateTime` from `datetime.datetime`\n* Fixed `QByteArray.__iter__()` to return `Iterator[bytes]`\n* Fixed support for `bytes(QByteArray(b'foo'))`\n* Added support for all `QSize` and `QSizeF` operations\n* Added support for all `QPolygon` operations\n\n## Licensing\nAs a derived work from PySide2, the stubs are delivered under the LGPL v2.1 . See file LICENSE for more details.\n\n## Installation\n\nInstall the latest stub packages from pypi:\n\n    $ pip install types-PySide2\n\nThis will add the `PySide2-stubs` and `shiboken2-stubs` packages into your site-packages directory. \n\nNote, you may need to uninstall other PySide2 stubs first:\n\n    $ pip uninstall PySide2-stubs\n\n## Help improve the stubs\n\nIf you notice incorrect or missing typing information (i.e. mypy reports errors even though your code is correct), please report it or make a PR to fix it. \n\n## TODO\n\n* Get all my stubgen changes merged into mypy\n* Build PySide6 stubs\n* Merge overloads where a `Union` would do instead of multiple overloads\n* Add type enforcement for signal types, to protect against incorrect callables provided to `connect()`\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "LGPL v2.1",
            "maintainer": "",
            "maintainer_email": "",
            "name": "types-PySide2",
            "package_url": "https://pypi.org/project/types-PySide2/",
            "platform": null,
            "project_url": "https://pypi.org/project/types-PySide2/",
            "project_urls": {
                "Bug Tracker": "https://github.com/chadrik/types-pyside/issues",
                "Homepage": "https://github.com/chadrik/types-pyside"
            },
            "release_url": "https://pypi.org/project/types-PySide2/5.15.2.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "The most accurate stubs for PySide2",
            "version": "5.15.2.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14818936,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9a907fe2e47d81c76d7284fc299b415e",
                    "sha256": "4fc0437477610ed818b5dffcaa45c9254b51dcaa46b7d615cbd0e6e8582959cd"
                },
                "downloads": -1,
                "filename": "types_PySide2-5.15.2.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9a907fe2e47d81c76d7284fc299b415e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 577628,
                "upload_time": "2022-08-20T01:15:19",
                "upload_time_iso_8601": "2022-08-20T01:15:19.453371Z",
                "url": "https://files.pythonhosted.org/packages/e1/3b/15d537f8c63ef8690a6da0a086fd95cb815672cae5ca74436a56a442fff3/types_PySide2-5.15.2.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}