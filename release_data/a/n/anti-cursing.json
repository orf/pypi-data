{
    "0.0.1": {
        "info": {
            "author": "24_bean",
            "author_email": "sabin5105@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sabin5105/anti-cursing",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "anti-cursing",
            "package_url": "https://pypi.org/project/anti-cursing/",
            "platform": null,
            "project_url": "https://pypi.org/project/anti-cursing/",
            "project_urls": {
                "Homepage": "https://github.com/sabin5105/anti-cursing"
            },
            "release_url": "https://pypi.org/project/anti-cursing/0.0.1/",
            "requires_dist": null,
            "requires_python": ">= 3.8",
            "summary": "The package that detect & switch the curse word in the sentence by using deep learning",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15886257,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "28e350780f87ab9197112e248c03c53b",
                    "sha256": "639b11e4fd8e9adaf412a945d3ca0b5e5b37d4a56f7c1ac6a42e3de787092613"
                },
                "downloads": -1,
                "filename": "anti_cursing-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "28e350780f87ab9197112e248c03c53b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">= 3.8",
                "size": 27238,
                "upload_time": "2022-11-24T07:46:39",
                "upload_time_iso_8601": "2022-11-24T07:46:39.626178Z",
                "url": "https://files.pythonhosted.org/packages/a4/fb/1227dedff32856d570a89a88a9d1aeb25214f46b883386080038fa2321b7/anti_cursing-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "24_bean",
            "author_email": "sabin5105@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# anti-cursing\n\n**\"anti-cursing\"** is a python package that detects and switches negative or any kind of cursing word from sentences or comments whatever\ud83e\udd2c\n\nYou just install the package the way you install any other package and then you can use it in your code.\n\nThe whole thing is gonna be updated soon.\n\nSo this is __**the very first idea**__\n\nBut you can find my package in pypi(https://pypi.org/project/anti-cursing/0.0.1/)\n\n**\ud83d\ude4f\ud83c\udffbPlz bare with the program to install model's weight and bias from huggingface at the first time you use the package.**\n\n<img width=\"1134\" alt=\"image\" src=\"https://user-images.githubusercontent.com/50198431/203723736-3aeb84a1-6418-4190-b967-2888e14b14fd.png\">\n\n<hr>\n\n# Concept\nThere are often situations where you have to code something, detect a forbidden word, and change it to another word.\nHardcoding all parts is very inconvenient, and in the Python ecosystem, there are many packages to address.\nOne of them is **\"anti-cursing\"**.\n\nThe package, which operates exclusively for **Korean**, does not simply change the banned word by setting it up, but detects and replaces the banned word by learning a deep learning model.\n\nTherefore, it is easy to cope with new malicious words as long as they are learned.\nFor this purpose, semi-supervied learning through pseudo labeling is used.\n\nAdditionally, instead of changing malicious words to special characters such as --- or ***, you can convert them into emojis to make them more natural.\n\n# Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Model comparison](#model-comparison)\n- [Dataset](#dataset)\n- [Used API](#used-api)\n- [License](#license)\n- [Working Example](#working-example)\n- [References](#references)\n- [Project Status](#project-status)\n- [Future Work](#future-work)\n\n\n# Installation\n\nYou can install the package using pip:\n\n```bash\npip install anti-cursing\n```\n\n**it doesn't work yet, but it will soon!!\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb**\n\n# Usage\n\n```python\nfrom anti_cursing.utils import antiCursing\n\nantiCursing.anti_cur(\"\ub098\ub294 \ub108\uac00 \uc88b\uc9c0\ub9cc, \ub108\ub294 \ub108\ubb34 \uac1c\uc0c8\ub07c\uc57c\")\n```\n\n```bash\n\ub098\ub294 \ub108\uac00 \uc88b\uc9c0\ub9cc, \ub108\ub294 \ub108\ubb34 \ud83d\udc7c\ud83c\udffb\uc57c\n```\n\n# Model-comparison\n| Classification | KcElectra | KoBERT | RoBERTa-base | RoBERTa-large |\n| --- | --- | --- | --- | --- |\n| Validation Accuracy | 0.88680 | 0.85721 | 0.83421 | 0.86994 |\n| Validation Loss | 1.00431 | 1.23237 | 1.30012 | 1.16179 |\n| Training Loss | 0.09908 | 0.03761 | 0.0039 | 0.06255 |\n| Epoch | 10 | 40 | 20 | 20 |\n| Batch-size | 8 | 32 | 16 | 32 |\n| transformers | beomi/KcELECTRA-base | skt/kobert-base-v1 | xlm-roberta-base | klue/roberta-large |\n\n# Dataset\n* ### Smilegate-AI \n  * https://github.com/smilegate-ai/korean_unsmile_dataset\n  * Korean Sentiment Analysis\n  * [paper](#korean-unsmile-dataset)\n* ### Naver portal news articles crawling\n  * https://news.naver.com\n  * Non-labeled Data for Test Dataset\n* ### \ud83d\ude00 Emoji unicode crawling for encoding\n  * https://unicode.org/emoji/charts/full-emoji-list.html\n\n# Used-api\n### Google translator\n* https://cloud.google.com/translate/docs (API DOCS)\n\n# License\n\nThis repository is licensed under the MIT license. See LICENSE for details.\n\nClick here to see the License information --> [License](LICENSE)\n\n# Working-example\n---- some video is gonna be placed here ----\n\n# References\n\n### Sentiment Analysis Based on Deep Learning : A Comparative Study\n  * Nhan Cach Dang, Maria N. Moreno-Garcia, Fernando De la Prieta. 2006. Sentiment Analysis Based on Deep Learning : A Comparative Study. In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP 2006), pages 1\u20138, Prague, Czech Republic. Association for Computational Linguistics.\n### Attention is all you need\n  * Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems, pages 6000\u20136010.\n### BERT : Pre-training of Deep Bidirectional Transformers for Language Understanding\n  * Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. BERT:         Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 4171\u20134186.\n\n### Electra : Pre-training Text Encoders as Discriminators Rather Than Generators\n  * Kevin Clark, Minh-Thang Luong, Quoc V. Le, Christopher D. Manning. 2019. Electra: Pre-training text encoders as discriminators rather than generators. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 4171\u20134186.\n\n### BIDAF : Bidirectional Attention Flow for Machine Comprehension\n  * Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, Hannaneh Hajishirzi. 2016. Bidirectional Attention Flow for Machine Comprehension. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2129\u20132139.\n\n### Effect of Negation in Sentences on Sentiment Analysis and Polarity Detection\n  * Partha Mukherjeea, Saptarshi Ghoshb, and Saptarshi Ghoshc. 2018. Effect of Negation in Sentences on Sentiment Analysis and Polarity Detection. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2129\u20132139.\n\n### KOAS : Korean Text Offensiveness Analysis System\n  * Seonghwan Kim, Seongwon Lee, and Seungwon Do. 2019. KOAS: Korean Text Offensiveness Analysis System. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 1\u201311.\n\n### Korean Unsmile Dataset\n  * Seonghwan Kim, Seongwon Lee, and Seungwon Do. 2019. Korean Unsmile Dataset. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 1\u201311.\n# Project-status\n\n![80%](https://geps.dev/progress/80)\n\n# Future-work\nupdate soon plz bare with me \ud83d\ude4f\ud83c\udffb\n\n<hr>\n\n# KOREAN FROM HERE / \uc5ec\uae30\ubd80\ud134 \ud55c\uad6d\uc5b4 \uc124\uba85\uc785\ub2c8\ub2e4.\n# anti-cursing\n\n**\"anti-cursing\"**\uc740 \ubb38\uc7a5\uc774\ub098 \ub313\uae00\uc5d0\uc11c \ubd80\uc815\uc801\uc774\uac70\ub098 \ubaa8\ub4e0 \uc885\ub958\uc758 \uc695\uc124\uc744 \uac10\uc9c0\ud558\uace0 \uc804\ud658\ud558\ub294 \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\uc785\ub2c8\ub2e4\ud83e\udd2c\n\n\ub2e4\ub978 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud558\ub294 \ubc29\uc2dd\uacfc \ub3d9\uc77c\ud558\uac8c \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud55c \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc544\uc9c1 \uc544\uc774\ub514\uc5b4 \uad6c\uc0c1 \ub2e8\uacc4\uc774\uae30 \ub54c\ubb38\uc5d0 **\uc544\ubb34\uac83\ub3c4 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc9c0\ub9cc** \uace7 \uc791\ub3d9\ud558\ub3c4\ub85d \uc5c5\ub370\uc774\ud2b8\ud560 \uc608\uc815\uc785\ub2c8\ub2e4.\n\nPypi(https://pypi.org/project/anti-cursing/0.0.1/)\uc5d0 \ud328\ud0a4\uc9c0\ub974 \uc5c5\ub85c\ub4dc\ud588\uc2b5\ub2c8\ub2e4. \ud655\uc778\ud558\uc2dc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n**\ud83d\ude4f\ud83c\udffb\ud328\ud0a4\uc9c0\ub97c \ucc98\uc74c \uc124\uce58\ud558\uc2dc\uace0 \uc0ac\uc6a9\ud558\uc2e4 \ub54c \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \ubd88\ub7ec\uc624\uae30 \uc704\ud574 huggingface\uc5d0\uc11c parsing\uc744 \uc2dc\ub3c4\ud569\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub9cc \ud574\ub2f9 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2c8 \uc2dc\uac04\uc774 \uc870\uae08 \uac78\ub9bc\uacfc \uc6a9\ub7c9\uc744 \ucc28\uc9c0\ud568\uc744 \uace0\ub824\ud574\uc8fc\uc138\uc694**\n\n<img width=\"1134\" alt=\"image\" src=\"https://user-images.githubusercontent.com/50198431/203723736-3aeb84a1-6418-4190-b967-2888e14b14fd.png\">\n\n\n<hr>\n\n# Concept\n\n\ubb34\uc5b8\uac00 \ucf54\ub529\uc744 \ud558\uba70, \uae08\uc9c0 \ub2e8\uc5b4\ub97c \uac10\uc9c0\ud558\uace0 \uadf8\uac83\uc744 \ub2e4\ub978 \ub2e8\uc5b4\ub85c \ubc14\uafd4\uc57c\ud560 \uc0c1\ud669\uc774 \uc885\uc885 \uc0dd\uae41\ub2c8\ub2e4.\n\ubaa8\ub4e0 \ubd80\ubd84\uc744 \ud558\ub4dc\ucf54\ub529\ud558\ub294 \uac83\uc774 \ub9e4\uc6b0 \ubd88\ud3b8\ud558\uba70, \ud30c\uc774\uc36c \uc0dd\ud0dc\uacc4\uc5d0\uc11c\ub294 \uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud55c \ub9ce\uc740 \ud328\ud0a4\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\uadf8 \uc911 \ud558\ub098\uac00 **\"anti-cursing\"**\uc785\ub2c8\ub2e4.\n\n\ud55c\uad6d\uc5b4 \uc804\uc6a9\uc73c\ub85c \ub3d9\uc791\ud558\ub294 \ud574\ub2f9 \ud328\ud0a4\uc9c0\ub294 \ub2e8\uc21c\ud788 \uae08\uc9c0 \ub2e8\uc5b4\ub97c \uae30\uc874\uc5d0 \uc124\uc815\ud558\uc5ec \ubc14\uafb8\ub294 \uac83\uc774 \uc544\ub2cc, \ub525\ub7ec\ub2dd \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uc5ec \uae08\uc9c0 \ub2e8\uc5b4\ub97c \uac10\uc9c0\ud558\uace0 \ubc14\uafc9\ub2c8\ub2e4.\n\ub530\ub77c\uc11c \uc0c8\ub86d\uac8c \uc0dd\uae30\ub294 \uc545\uc131 \ub2e8\uc5b4\uc5d0 \ub300\ud574\uc11c\ub3c4 \ud559\uc2b5\ub9cc \uc774\ub8e8\uc5b4\uc9c4\ub2e4\uba74 \uc27d\uac8c \ub300\ucc98\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub97c \uc704\ud574 pseudo labeling\uc744 \ud1b5\ud55c semi-supervied learning\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \n\n\ucd94\uac00\ub85c \uc545\uc131\ub2e8\uc5b4\ub97c ---\ub098 ***\uac19\uc740 \ud2b9\uc218\ubb38\uc790\ub85c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc544\ub2cc, \uc774\ubaa8\uc9c0\ub85c \ubcc0\ud658\ud558\uc5ec \ub354\uc6b1 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ubc14\uafc0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n# \ubaa9\ucc28\n\n- [\uc124\uce58](#\uc124\uce58)\n- [\uc0ac\uc6a9\ubc95](#\uc0ac\uc6a9\ubc95)\n- [\ubaa8\ub378 \uc131\ub2a5 \ube44\uad50](#\ubaa8\ub378-\uc131\ub2a5-\ube44\uad50)\n- [\ub370\uc774\ud130\uc14b](#\ub370\uc774\ud130\uc14b)\n- [\uc0ac\uc6a9 API](#\uc0ac\uc6a9-api)\n- [License](#license)\n- [\uc791\ub3d9 \uc608\uc2dc](#\uc791\ub3d9-\uc608\uc2dc)\n- [\ucc38\uace0\ubb38\ud5cc](#\ucc38\uace0\ubb38\ud5cc)\n- [\uc9c4\ud589\uc0c1\ud669](#\uc9c4\ud589\uc0c1\ud669)\n- [\ubc1c\uc804](#\ubc1c\uc804)\n\n\n# \uc124\uce58\n\npip\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n```bash\npip install anti-cursing\n```\n\n**\uc544\uc9c1 \uc544\ubb34\uac83\ub3c4 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uace7 \uc791\ub3d9\ud558\ub3c4\ub85d \uc5c5\ub370\uc774\ud2b8\ud560 \uc608\uc815\uc785\ub2c8\ub2e4\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb.**\n\n# \uc0ac\uc6a9\ubc95\n\n```python\nfrom anti_cursing.utils import antiCursing\n\nantiCursing.anti_cur(\"\ub098\ub294 \ub108\uac00 \uc88b\uc9c0\ub9cc, \ub108\ub294 \ub108\ubb34 \uac1c\uc0c8\ub07c\uc57c\")\n```\n\n```bash\n\ub098\ub294 \ub108\uac00 \uc88b\uc9c0\ub9cc, \ub108\ub294 \ub108\ubb34 \ud83d\udc7c\ud83c\udffb\uc57c\n```\n\n# \ubaa8\ub378 \uc131\ub2a5 \ube44\uad50\n| Classification | KcElectra | KoBERT | RoBERTa-base | RoBERTa-large |\n| --- | --- | --- | --- | --- |\n| Validation Accuracy | 0.88680 | 0.85721 | 0.83421 | 0.86994 |\n| Validation Loss | 1.00431 | 1.23237 | 1.30012 | 1.16179 |\n| Training Loss | 0.09908 | 0.03761 | 0.0039 | 0.06255 |\n| Epoch | 10 | 40 | 20 | 20 |\n| Batch-size | 8 | 32 | 16 | 32 |\n| transformers | beomi/KcELECTRA-base | skt/kobert-base-v1 | xlm-roberta-base | klue/roberta-large |\n\n\n# \ub370\uc774\ud130\uc14b\n* ### Smilegate-AI \n  * https://github.com/smilegate-ai/korean_unsmile_dataset\n  * \ud55c\uad6d\uc5b4 \uac10\uc815\ubd84\ub958 \ub370\uc774\ud130\uc14b\n  * [paper](#korean-unsmile-dataset)\n* ### \ub124\uc774\ubc84 \ub274\uc2a4 \uae30\uc0ac \ud06c\ub864\ub9c1\n  * https://news.naver.com\n  * \ud14c\uc2a4\ud2b8\ub97c \uc704\ud55c \ub370\uc774\ud130\uc14b\n* ### \ud83d\ude00 \uc774\ubaa8\uc9c0 \uc720\ub2c8\ucf54\ub4dc \ub370\uc774\ud130\uc14b\n  * https://unicode.org/emoji/charts/full-emoji-list.html\n\n# \uc0ac\uc6a9 API\n### Google translator\n* https://cloud.google.com/translate/docs (API \ubb38\uc11c)\n\n# License\n\n\uc774 \ud504\ub85c\uc81d\ud2b8\ub294 MIT \ub77c\uc774\uc13c\uc2a4\ub97c \ub530\ub985\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 LICENSE \ud30c\uc77c\uc744 \ucc38\uace0\ud574\uc8fc\uc138\uc694.\n\n\ub77c\uc774\uc13c\uc2a4 \uc815\ubcf4 --> [License](LICENSE)\n\n# \uc791\ub3d9 \uc608\uc2dc\n---- \uc791\ub3d9 \uc608\uc2dc\uac00 \ucd94\uac00\ub420 \uc608\uc815\uc785\ub2c8\ub2e4 ----\n\n# \ucc38\uace0\ubb38\ud5cc\n\n### Sentiment Analysis Based on Deep Learning : A Comparative Study\n  * Nhan Cach Dang, Maria N. Moreno-Garcia, Fernando De la Prieta. 2006. Sentiment Analysis Based on Deep Learning : A Comparative Study. In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (EMNLP 2006), pages 1\u20138, Prague, Czech Republic. Association for Computational Linguistics.\n### Attention is all you need\n  * Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need. In Advances in Neural Information Processing Systems, pages 6000\u20136010.\n### BERT : Pre-training of Deep Bidirectional Transformers for Language Understanding\n  * Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. BERT:         Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 4171\u20134186.\n\n### Electra : Pre-training Text Encoders as Discriminators Rather Than Generators\n  * Kevin Clark, Minh-Thang Luong, Quoc V. Le, Christopher D. Manning. 2019. Electra: Pre-training text encoders as discriminators rather than generators. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 4171\u20134186.\n\n### BIDAF : Bidirectional Attention Flow for Machine Comprehension\n  * Minjoon Seo, Aniruddha Kembhavi, Ali Farhadi, Hannaneh Hajishirzi. 2016. Bidirectional Attention Flow for Machine Comprehension. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2129\u20132139.\n\n### Effect of Negation in Sentences on Sentiment Analysis and Polarity Detection\n  * Partha Mukherjeea, Saptarshi Ghoshb, and Saptarshi Ghoshc. 2018. Effect of Negation in Sentences on Sentiment Analysis and Polarity Detection. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2129\u20132139.\n\n### KOAS : Korean Text Offensiveness Analysis System\n  * Seonghwan Kim, Seongwon Lee, and Seungwon Do. 2019. KOAS: Korean Text Offensiveness Analysis System. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 1\u201311.\n\n### Korean Unsmile Dataset\n  * Seonghwan Kim, Seongwon Lee, and Seungwon Do. 2019. Korean Unsmile Dataset. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 1\u201311.\n# \uc9c4\ud589\uc0c1\ud669\n\n![80%](https://geps.dev/progress/80)\n\n# \ubc1c\uc804\n\uc55e\uc73c\ub85c \ucd94\uac00\ub420 \uc608\uc815\uc785\ub2c8\ub2e4 \uc7a0\uc2dc\ub9cc \uae30\ub2e4\ub824\uc8fc\uc138\uc694\ud83d\ude4f\ud83c\udffb\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sabin5105/anti-cursing",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "anti-cursing",
            "package_url": "https://pypi.org/project/anti-cursing/",
            "platform": null,
            "project_url": "https://pypi.org/project/anti-cursing/",
            "project_urls": {
                "Homepage": "https://github.com/sabin5105/anti-cursing"
            },
            "release_url": "https://pypi.org/project/anti-cursing/0.0.2/",
            "requires_dist": [
                "transformers",
                "torch",
                "pandas",
                "numpy"
            ],
            "requires_python": ">= 3.8",
            "summary": "The package that detect & switch the curse word in the sentence by using deep learning",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15886257,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0c75eb945640f4ee662adacc986e3746",
                    "sha256": "78aa4b2382079b0a19d1a4abf4a7a2af9598bbf23a96d32a56a55258824905c6"
                },
                "downloads": -1,
                "filename": "anti_cursing-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0c75eb945640f4ee662adacc986e3746",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">= 3.8",
                "size": 31390,
                "upload_time": "2022-11-25T05:24:50",
                "upload_time_iso_8601": "2022-11-25T05:24:50.032149Z",
                "url": "https://files.pythonhosted.org/packages/13/3d/25df0f1de802f903166aa10d5e834a24386c4c4cd027620368df6f609330/anti_cursing-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}