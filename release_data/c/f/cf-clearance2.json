{
    "0.28.2": {
        "info": {
            "author": "vvanglro",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/acheong08/cf_clearance",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cf-clearance2",
            "package_url": "https://pypi.org/project/cf-clearance2/",
            "platform": null,
            "project_url": "https://pypi.org/project/cf-clearance2/",
            "project_urls": {
                "Homepage": "https://github.com/acheong08/cf_clearance",
                "Repository": "https://github.com/acheong08/cf_clearance"
            },
            "release_url": "https://pypi.org/project/cf-clearance2/0.28.2/",
            "requires_dist": [
                "playwright"
            ],
            "requires_python": ">=3.7,<4",
            "summary": "Purpose To make a cloudflare challenge pass successfully, Can be use cf_clearance bypassed by cloudflare, However, with the cf_clearance, make sure you use the same IP and UA as when you got it.",
            "version": "0.28.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16085449,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "38d4342d8346e808c7e1972164766b71",
                    "sha256": "f92b50bcefc2a80895f737332774ca19751bf68900dc7d743d4ad25b45d36234"
                },
                "downloads": -1,
                "filename": "cf_clearance2-0.28.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "38d4342d8346e808c7e1972164766b71",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<4",
                "size": 13770,
                "upload_time": "2022-12-13T11:21:01",
                "upload_time_iso_8601": "2022-12-13T11:21:01.995200Z",
                "url": "https://files.pythonhosted.org/packages/f8/a6/3ef5520298e45645ddfe8afe18324671658bacbd076bb8493e886475bec7/cf_clearance2-0.28.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1680b2f74a0553882ec6c8aeb2f835e6",
                    "sha256": "22281c1fe8021d3fd4d950ab440d73651ed508b8290a646aebfbd744d026a99a"
                },
                "downloads": -1,
                "filename": "cf_clearance2-0.28.2.tar.gz",
                "has_sig": false,
                "md5_digest": "1680b2f74a0553882ec6c8aeb2f835e6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<4",
                "size": 12892,
                "upload_time": "2022-12-13T11:21:04",
                "upload_time_iso_8601": "2022-12-13T11:21:04.274212Z",
                "url": "https://files.pythonhosted.org/packages/3a/53/6867cdb80dbba73be1db4c40c900bb3add6afb065848a751219f41f6345a/cf_clearance2-0.28.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.28.3": {
        "info": {
            "author": "vvanglro",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# cf-clearance\n\n[![OSCS Status](https://www.oscs1024.com/platform/badge/vvanglro/cf_clearance.svg?size=small)](https://www.oscs1024.com/project/vvanglro/cf_clearance?ref=badge_small)\n[![Package version](https://img.shields.io/pypi/v/cf_clearance?color=%2334D058&label=pypi%20package)](https://pypi.python.org/pypi/cf_clearance)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/cf_clearance.svg?color=%2334D058)](https://pypi.python.org/pypi/cf_clearance)\n[![Docker Image versions](https://img.shields.io/docker/v/vvanglro/cf-clearance?color=%2334D058&label=docker%20version)](https://hub.docker.com/r/vvanglro/cf-clearance)\n\n\nPurpose To make a cloudflare challenge pass successfully, Can be use cf_clearance bypassed by cloudflare, However, with\nthe cf_clearance, make sure you use the same IP and UA as when you got it.\n\n## Warning\n\nPlease use interface mode, You must add headless=False.\nIf you use it on linux or docker, use XVFB.\n\n## Docker Usage\n\nRecommended to install using a Docker container.\nDockerHub => https://hub.docker.com/r/vvanglro/cf-clearance\n\n```shell\ndocker run -d --restart always --network host --name cf-clearance vvanglro/cf-clearance:latest \\\n--host 0.0.0.0 --port 8000 --workers 1\n```\n\n```shell\ncurl http://localhost:8000/challenge -H \"Content-Type:application/json\" -X POST \\\n-d '{\"proxy\": {\"server\": \"socks5://localhost:7890\"}, \"timeout\":20, \"url\": \"https://nowsecure.nl\"}'\n```\n\n```python\nimport requests\n\nproxy = \"socks5://localhost:7890\"\nresp = requests.post(\"http://localhost:8000/challenge\",\n                     json={\"proxy\": {\"server\": proxy}, \"timeout\": 20,\n                           \"url\": \"https://nowsecure.nl\"})\nif resp.json().get(\"success\"):\n    ua = resp.json().get(\"user_agent\")\n    cf_clearance_value = resp.json().get(\"cookies\").get(\"cf_clearance\")\n    # use cf_clearance, must be same IP and UA\n    headers = {\"user-agent\": ua}\n    cookies = {\"cf_clearance\": cf_clearance_value}\n    res = requests.get('https://nowsecure.nl', proxies={\n        \"all\": proxy\n    }, headers=headers, cookies=cookies)\n    if '<title>Please Wait... | Cloudflare</title>' not in res.text:\n        print(\"cf challenge success\")\n```\n\n## Install\n\n```\npip install cf-clearance==0.28.2\n```\n\n## Usage\n\nPlease make sure it is the latest package.\n\n```\npip install --upgrade cf-clearance\n```\nor\n```shell\npip install git+https://github.com/vvanglro/cf-clearance.git@main\n```\n\n### sync\n\n```python\nfrom playwright.sync_api import sync_playwright\nfrom cf_clearance import sync_cf_retry, sync_stealth\nimport requests\n\n# not use cf_clearance, cf challenge is fail\nproxies = {\n    \"all\": \"socks5://localhost:7890\"\n}\nres = requests.get('https://nowsecure.nl', proxies=proxies)\nif '<title>Please Wait... | Cloudflare</title>' in res.text:\n    print(\"cf challenge fail\")\n# get cf_clearance\nwith sync_playwright() as p:\n    browser = p.chromium.launch(headless=False, proxy={\"server\": \"socks5://localhost:7890\"})\n    page = browser.new_page()\n    sync_stealth(page, pure=True)\n    page.goto('https://nowsecure.nl')\n    res = sync_cf_retry(page)\n    if res:\n        cookies = page.context.cookies()\n        for cookie in cookies:\n            if cookie.get('name') == 'cf_clearance':\n                cf_clearance_value = cookie.get('value')\n                print(cf_clearance_value)\n        ua = page.evaluate('() => {return navigator.userAgent}')\n        print(ua)\n    else:\n        print(\"cf challenge fail\")\n    browser.close()\n# use cf_clearance, must be same IP and UA\nheaders = {\"user-agent\": ua}\ncookies = {\"cf_clearance\": cf_clearance_value}\nres = requests.get('https://nowsecure.nl', proxies=proxies, headers=headers, cookies=cookies)\nif '<title>Please Wait... | Cloudflare</title>' not in res.text:\n    print(\"cf challenge success\")\n```\n\n### async\n\n```python\nimport asyncio\nfrom playwright.async_api import async_playwright\nfrom cf_clearance import async_cf_retry, async_stealth\nimport requests\n\n\nasync def main():\n    # not use cf_clearance, cf challenge is fail\n    proxies = {\n        \"all\": \"socks5://localhost:7890\"\n    }\n    res = requests.get('https://nowsecure.nl', proxies=proxies)\n    if '<title>Please Wait... | Cloudflare</title>' in res.text:\n        print(\"cf challenge fail\")\n    # get cf_clearance\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=False, proxy={\"server\": \"socks5://localhost:7890\"})\n        page = await browser.new_page()\n        await async_stealth(page, pure=True)\n        await page.goto('https://nowsecure.nl')\n        res = await async_cf_retry(page)\n        if res:\n            cookies = await page.context.cookies()\n            for cookie in cookies:\n                if cookie.get('name') == 'cf_clearance':\n                    cf_clearance_value = cookie.get('value')\n                    print(cf_clearance_value)\n            ua = await page.evaluate('() => {return navigator.userAgent}')\n            print(ua)\n        else:\n            print(\"cf challenge fail\")\n        await browser.close()\n    # use cf_clearance, must be same IP and UA\n    headers = {\"user-agent\": ua}\n    cookies = {\"cf_clearance\": cf_clearance_value}\n    res = requests.get('https://nowsecure.nl', proxies=proxies, headers=headers, cookies=cookies)\n    if '<title>Please Wait... | Cloudflare</title>' not in res.text:\n        print(\"cf challenge success\")\n\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/acheong08/cf_clearance",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cf-clearance2",
            "package_url": "https://pypi.org/project/cf-clearance2/",
            "platform": null,
            "project_url": "https://pypi.org/project/cf-clearance2/",
            "project_urls": {
                "Homepage": "https://github.com/acheong08/cf_clearance",
                "Repository": "https://github.com/acheong08/cf_clearance"
            },
            "release_url": "https://pypi.org/project/cf-clearance2/0.28.3/",
            "requires_dist": [
                "playwright"
            ],
            "requires_python": ">=3.7,<4",
            "summary": "Purpose To make a cloudflare challenge pass successfully, Can be use cf_clearance bypassed by cloudflare, However, with the cf_clearance, make sure you use the same IP and UA as when you got it.",
            "version": "0.28.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16085449,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "23e599b06ebf73546a0f306c2e5904b4",
                    "sha256": "b5bac77cb57db8c88dc6d532fa099422a9ce9a6f3f13d87ceec5d04bba53c472"
                },
                "downloads": -1,
                "filename": "cf_clearance2-0.28.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "23e599b06ebf73546a0f306c2e5904b4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<4",
                "size": 13775,
                "upload_time": "2022-12-13T11:40:24",
                "upload_time_iso_8601": "2022-12-13T11:40:24.167437Z",
                "url": "https://files.pythonhosted.org/packages/d8/5f/b2e0df6a768670ca0345c60b4c577cf820ee33c8acaf8e5760dc81588375/cf_clearance2-0.28.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "292f58852ba4ef5b60f9daf86b37ed75",
                    "sha256": "28528addccab425cc61dd0368060c29fe88eaf80e637b9ac63e72c06e92db62e"
                },
                "downloads": -1,
                "filename": "cf_clearance2-0.28.3.tar.gz",
                "has_sig": false,
                "md5_digest": "292f58852ba4ef5b60f9daf86b37ed75",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<4",
                "size": 12891,
                "upload_time": "2022-12-13T11:40:26",
                "upload_time_iso_8601": "2022-12-13T11:40:26.383415Z",
                "url": "https://files.pythonhosted.org/packages/2d/e6/b57291e9b34d8653ee16eecdac8172a83a4f73165f36da5bfa5bbdcfcc5e/cf_clearance2-0.28.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}