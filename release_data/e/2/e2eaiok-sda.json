{
    "0.2.2": {
        "info": {
            "author": "INTEL AIA BDF",
            "author_email": "bdf.aidk@intel.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Smart Democratization advisor (SDA)\n\n# INTRODUCTION\nA user-guided tool to facilitate automation of built-in model democratization via parameterized models, it generates yaml files based on user choice, provided build-in intelligence through parameterized models and leverage SigOpt for HPO. SDA converts the manual model tuning and optimization to assisted autoML and autoHPO. SDA provides a list of build-in optimized models ranging from RecSys, CV, NLP, ASR and RL. \n\n# Getting Start\n## install with pip (require preinstall spark)\n```\npip install e2eAIOK\n```\n\n## examples\n\nexample 1: builtin model with default best hyper-parameter\n``` python\nfrom e2eAIOK import SDA\n\nsettings = dict()\nsettings[\"data_path\"] = \"/home/vmagent/app/dataset/criteo/\"\nsettings[\"ppn\"] = 2\nsettings[\"ccl_worker_num\"] = 4\nsettings[\"enable_sigopt\"] = True\n\nsda = SDA(model=\"dlrm\", settings=settings) # default settings\nsda.launch()\n\nhydro_model = sda.snapshot()\nhydro_model.explain()\n```\n``` console\n2022-04-26 05:27:09,901 - HYDRO.AI.SDA - INFO - ### Ready to submit current task  ###\n2022-04-26 05:27:09,902 - HYDRO.AI.SDA - INFO - Model Advisor created\n2022-04-26 05:27:09,903 - HYDRO.AI.SDA - INFO - model parameter initialized\n2022-04-26 05:27:09,903 - HYDRO.AI.SDA - INFO - start to launch training\n...\n[0] Finished training it 256/256 of epoch 0, 411.28 ms/it, loss 0.129076, accuracy 96.669 %\n[1] Finished training it 256/256 of epoch 0, 411.10 ms/it, loss 0.128426, accuracy 96.695 %\n[0] :::MLLOG {\"namespace\": \"\", \"time_ms\": 1650952435427, \"event_type\": \"INTERVAL_START\", \"key\": \"eval_start\", \"value\": null, \"metadata\": {\"file\": \"/home/vmagent/app/e2eaiok/modelzoo/dlrm/dlrm/dlrm_s_pytorch.py\", \"lineno\": 1366, \"epoch_num\": 2.0}}\n2022-04-26 05:27:14,748 - sigopt - INFO - Training completed based in sigopt suggestion, took 4.843278169631958 secs\n2022-04-26 05:27:14,749 - HYDRO.AI.SDA - INFO - training script completed\n\n===============================================\n***    Best Trained Model    ***\n===============================================\n  Model Type: dlrm\n  Model Saved Path: /home/vmagent/app/e2eaiok/result/dlrm/20220426_052421/\n  Sigopt Experiment id is None\n  === Result Metrics ===\n    accuracy: 0.8025\n===============================================\n```\n\nexample 2: create your own model\n``` python\nfrom e2eAIOK import SDA\n\n# global settings\nsettings = dict()\nsettings[\"data_path\"] = \"/home/vmagent/app/dataset/xxx/\"\nsettings[\"enable_sigopt\"] = True\n\n# model settings\nmodel_info = dict()\n# config for model\nmodel_info[\"score_metrics\"] = [(\"accuracy\", \"maximize\"), (\"training_time\", \"minimize\")]\nmodel_info[\"execute_cmd_base\"] = \"/opt/intel/oneapi/intelpython/latest/envs/pytorch_mlperf/bin/python /home/vmagent/app/e2eaiok/modelzoo/dlrm/dlrm/launch.py\"\nmodel_info[\"result_file_name\"] = \"best_auc.txt\"\n\n# config for sigopt\nmodel_info[\"experiment_name\"] = \"dlrm\"\nmodel_info[\"sigopt_config\"] = [\n    {'name':'learning_rate','bounds':{'min':5,'max':50},'type':'int'},\n    {'name':'lamb_lr','bounds':{'min':5,'max':50},'type':'int'},\n    {'name':'warmup_steps','bounds':{'min':2000,'max':4500},'type':'int'},\n    {'name':'decay_start_steps','bounds':{'min':4501,'max':9000},'type':'int'},\n    {'name':'num_decay_steps','bounds':{'min':5000,'max':15000},'type':'int'},\n    {'name':'sparse_feature_size','grid': [128,64,16],'type':'int'},\n    {'name':'mlp_top_size','bounds':{'min':0,'max':7},'type':'int'},\n    {'name':'mlp_bot_size','bounds':{'min':0,'max':3},'type':'int'}]\nmodel_info[\"observation_budget\"] = 1\n\n# register model to SDA\nsda = SDA(settings=settings) # default settings\nsda.register(model_info)\nsda.launch()\n\nhydro_model = sda.snapshot()\nhydro_model.explain()\n```\n\n## use cases\n* [DLRM](http://vsr140:8891/notebooks/builtin/dlrm/DLRM_DEMO.ipynb) - [Readme](modelzoo/dlrm/README.md) - recsys, facebook, pytorch_mlperf\n* [DIEN](http://vsr140:8892/notebooks/builtin/dien/DIEN_DEMO.ipynb) - [Readme](modelzoo/dien/README.md) - recsys, alibaba, tensorflow\n* [WnD](http://vsr140:8892/notebooks/builtin/wnd/WND_DEMO.ipynb) - [Readme](modelzoo/WnD/README.md) - recsys, google, tensorflow\n* [RNNT](http://vsr140:8890/notebooks/builtin/rnnt/RNNT_DEMO.ipynb) - [Readme](modelzoo/rnnt/README.md) - speech recognition, pytorch\n* [RESNET](http://vsr140:8892/notebooks/builtin/resnet/RESNET_DEMO.ipynb) - [Readme](modelzoo/resnet/README.md) - computer vision, tensorflow\n* [BERT](http://vsr140:8892/notebooks/builtin/bert/BERT_DEMO.ipynb) - [Readme](modelzoo/bert/README.md) - Natual Language Processing, tensorflow\n* [MiniGO](http://sr141:8888/notebooks/demo/MiniGo_DEMO.ipynb) - [Readme](modelzoo/minigo/README.md) - minimalist engine modeled after AlphaGo Zero, tensorflow\n\n## LICENSE\n* Apache 2.0\n\n## Dependency\n* python 3.*\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/intel/e2eAIOK",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "e2eAIOK-sda",
            "package_url": "https://pypi.org/project/e2eAIOK-sda/",
            "platform": null,
            "project_url": "https://pypi.org/project/e2eAIOK-sda/",
            "project_urls": {
                "Bug Tracker": "https://github.com/intel/e2eAIOK/issues",
                "Homepage": "https://github.com/intel/e2eAIOK"
            },
            "release_url": "https://pypi.org/project/e2eAIOK-sda/0.2.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Intel\u00ae End-to-End AI Optimization Kit - SDA",
            "version": "0.2.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15909507,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f40d588d3b8bb57195f67da7beeefa78",
                    "sha256": "be035d998047572e40384f2fd4e4240a45640949e42de9dcb4009aaf68488919"
                },
                "downloads": -1,
                "filename": "e2eAIOK-sda-0.2.2.tar.gz",
                "has_sig": false,
                "md5_digest": "f40d588d3b8bb57195f67da7beeefa78",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18281,
                "upload_time": "2022-11-28T03:38:15",
                "upload_time_iso_8601": "2022-11-28T03:38:15.228834Z",
                "url": "https://files.pythonhosted.org/packages/d0/d3/f973096b5834496d6d8ce06ac66f0ad6b8699244f2e70176c89d161f88a2/e2eAIOK-sda-0.2.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}