{
    "1.0.0": {
        "info": {
            "author": "Zhan Shi",
            "author_email": "phe.zshi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smpcp",
            "package_url": "https://pypi.org/project/smpcp/",
            "platform": null,
            "project_url": "https://pypi.org/project/smpcp/",
            "project_urls": {
                "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
            },
            "release_url": "https://pypi.org/project/smpcp/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13729778,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fa0f9d0481d2e018252c480fcc3c8cc5",
                    "sha256": "60638ee7e9e6ce6938e75c458f453f560ba5cf34ca5cf14b812a79c58a201c3d"
                },
                "downloads": -1,
                "filename": "smpcp-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fa0f9d0481d2e018252c480fcc3c8cc5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 11475,
                "upload_time": "2022-05-06T04:07:22",
                "upload_time_iso_8601": "2022-05-06T04:07:22.976707Z",
                "url": "https://files.pythonhosted.org/packages/1a/92/93614e3c6c299759458b0f9f6cff4885e5d04b08d654834bf0f9db33ea59/smpcp-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "47d5c6160ad6b4a560a96b281538b443",
                    "sha256": "006448bdc9264fb59450e1ab3c8841da8c0fee04f0c376b9b2bff57769e28ffd"
                },
                "downloads": -1,
                "filename": "smpcp-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "47d5c6160ad6b4a560a96b281538b443",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12515,
                "upload_time": "2022-05-06T04:07:26",
                "upload_time_iso_8601": "2022-05-06T04:07:26.058181Z",
                "url": "https://files.pythonhosted.org/packages/70/19/f4b5a1df0dd6a76d5e6ce3ab236b8d84db3895a5556f77d8d3769a42a33b/smpcp-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "Zhan Shi",
            "author_email": "phe.zshi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smpcp",
            "package_url": "https://pypi.org/project/smpcp/",
            "platform": null,
            "project_url": "https://pypi.org/project/smpcp/",
            "project_urls": {
                "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
            },
            "release_url": "https://pypi.org/project/smpcp/1.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13729778,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6d228616f1b3bed836dc7caf582c55ea",
                    "sha256": "8853366a5ebd6bc3da477a7a0af3e8b9ceb3b31016b6b3ae213e5738d2a891b2"
                },
                "downloads": -1,
                "filename": "smpcp-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6d228616f1b3bed836dc7caf582c55ea",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 14343,
                "upload_time": "2022-05-06T04:23:25",
                "upload_time_iso_8601": "2022-05-06T04:23:25.831544Z",
                "url": "https://files.pythonhosted.org/packages/3d/8c/d2442e37d7b4c2b5eec9d4985a2b49955de2548cbdd7bce67b5e406db21d/smpcp-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "23b3095b96db99a712cd1bec2abbc063",
                    "sha256": "31da0a9810027f4f989f7fa29e524fa64c6ffd77c0777a4d83f9b4a0d52e29b6"
                },
                "downloads": -1,
                "filename": "smpcp-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "23b3095b96db99a712cd1bec2abbc063",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16288,
                "upload_time": "2022-05-06T04:23:27",
                "upload_time_iso_8601": "2022-05-06T04:23:27.764435Z",
                "url": "https://files.pythonhosted.org/packages/bc/da/d37a17f15d48bf7f8bd065d8a6d87c6f471380df453b4cbc5a46ac4c9cb4/smpcp-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2": {
        "info": {
            "author": "Zhan Shi",
            "author_email": "phe.zshi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smpcp",
            "package_url": "https://pypi.org/project/smpcp/",
            "platform": null,
            "project_url": "https://pypi.org/project/smpcp/",
            "project_urls": {
                "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
            },
            "release_url": "https://pypi.org/project/smpcp/1.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
            "version": "1.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13729778,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0efbfbfd0ef0c01a0c35f66e2759c2f9",
                    "sha256": "665a02252ace163b731af3141aabde0a6a2d70953938419377a2307dd2a113c1"
                },
                "downloads": -1,
                "filename": "smpcp-1.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0efbfbfd0ef0c01a0c35f66e2759c2f9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7936,
                "upload_time": "2022-05-06T04:37:58",
                "upload_time_iso_8601": "2022-05-06T04:37:58.240803Z",
                "url": "https://files.pythonhosted.org/packages/b4/78/33b7161f5de84e5170aac92d7371682f1ca922606d37813d88bba2f80c7e/smpcp-1.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1f97fec8c115999c22b5ce4ebe9661c1",
                    "sha256": "ba5e31edccd39b836ebef8d79c9d7126a3f9d4f07a3e07353688a395db7649ee"
                },
                "downloads": -1,
                "filename": "smpcp-1.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "1f97fec8c115999c22b5ce4ebe9661c1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10763,
                "upload_time": "2022-05-06T04:38:00",
                "upload_time_iso_8601": "2022-05-06T04:38:00.663649Z",
                "url": "https://files.pythonhosted.org/packages/ed/65/8342e56299f84cb43a48432a31e4fb9324aafdee608909041fa35b87413e/smpcp-1.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.0": {
        "info": {
            "author": "Zhan Shi",
            "author_email": "phe.zshi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smpcp",
            "package_url": "https://pypi.org/project/smpcp/",
            "platform": null,
            "project_url": "https://pypi.org/project/smpcp/",
            "project_urls": {
                "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
            },
            "release_url": "https://pypi.org/project/smpcp/2.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
            "version": "2.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13729778,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "44d4f5fa75490dd2b93c932571ecd531",
                    "sha256": "8c3eab9f6bea9561ad610be2e067d843c816c4a471965ebcdb00c673e61dbad6"
                },
                "downloads": -1,
                "filename": "smpcp-2.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "44d4f5fa75490dd2b93c932571ecd531",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 8457,
                "upload_time": "2022-05-06T04:45:53",
                "upload_time_iso_8601": "2022-05-06T04:45:53.601899Z",
                "url": "https://files.pythonhosted.org/packages/7a/f9/d1c86b4befd15ee014b63a42cf7c28d29b43df2d28bbb4eaf768a132dabf/smpcp-2.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "28b5dbc5ed6fe04fe14849ae6d2d55d7",
                    "sha256": "b87712bed217dc1e685408fd8f7cf95415f0eb980ae4f9b9a8bba582b609244a"
                },
                "downloads": -1,
                "filename": "smpcp-2.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "28b5dbc5ed6fe04fe14849ae6d2d55d7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11045,
                "upload_time": "2022-05-06T04:45:56",
                "upload_time_iso_8601": "2022-05-06T04:45:56.034225Z",
                "url": "https://files.pythonhosted.org/packages/19/81/d9673466c1714aa56aa271c0deda4d5fadfce3b1da43abae34b629886c08/smpcp-2.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.1": {
        "info": {
            "author": "Zhan Shi",
            "author_email": "phe.zshi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smpcp",
            "package_url": "https://pypi.org/project/smpcp/",
            "platform": null,
            "project_url": "https://pypi.org/project/smpcp/",
            "project_urls": {
                "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
            },
            "release_url": "https://pypi.org/project/smpcp/2.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
            "version": "2.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13729778,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "affd539442fac89a0d6c83df963d0880",
                    "sha256": "bb6eac628f5e1d827c1ca7818dc456cf8ea4985ca4713a8da1c116b0106624e3"
                },
                "downloads": -1,
                "filename": "smpcp-2.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "affd539442fac89a0d6c83df963d0880",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 8498,
                "upload_time": "2022-05-06T04:55:08",
                "upload_time_iso_8601": "2022-05-06T04:55:08.270293Z",
                "url": "https://files.pythonhosted.org/packages/8a/17/e459e7ab4353236eaffcea1537f7b51c6ecb3da0825eee074c03b2b0432d/smpcp-2.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9317f3d2a12b3f018e55e9bdc3316759",
                    "sha256": "b98a82ec695cb7cfbb586046768ec8934f9d9c385411de689a76edc0f8f67af9"
                },
                "downloads": -1,
                "filename": "smpcp-2.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "9317f3d2a12b3f018e55e9bdc3316759",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11104,
                "upload_time": "2022-05-06T04:55:13",
                "upload_time_iso_8601": "2022-05-06T04:55:13.479165Z",
                "url": "https://files.pythonhosted.org/packages/ff/c4/518a30b6471a01a7a51ed2d78775f28131abbf590f0c88531863faa0bc49/smpcp-2.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.2": {
        "info": {
            "author": "Zhan Shi",
            "author_email": "phe.zshi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "<h1 align='center' >\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae</h1>\n\n\n---\n\n## \u9879\u76ee\u80cc\u666f\n\n\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\uff08Secure Multi-Party Computation\uff09\u7684\u7814\u7a76\u4e3b\u8981\u662f\u9488\u5bf9\u65e0\u53ef\u4fe1\u7b2c\u4e09\u65b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u5b89\u5168\u5730\u8ba1\u7b97\u4e00\u4e2a\u7ea6\u5b9a\u51fd\u6570\u7684\u95ee\u9898\u3002\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u662f\u7535\u5b50\u9009\u4e3e\u3001\u95e8\u9650\u7b7e\u540d\u4ee5\u53ca\u7535\u5b50\u62cd\u5356\u7b49\u8bf8\u591a\u5e94\u7528\u5f97\u4ee5\u5b9e\u65bd\u7684\u5bc6\u7801\u5b66\u57fa\u7840\u3002\n\n\u4e00\u4e2a\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae\uff0c\u5982\u679c\u5bf9\u4e8e\u62e5\u6709\u65e0\u9650\u8ba1\u7b97\u80fd\u529b\u653b\u51fb\u8005\u800c\u8a00\u662f\u5b89\u5168\u7684\uff0c\u5219\u79f0\u4f5c\u662f\u4fe1\u606f\u8bba\u5b89\u5168\u7684\u6216\u65e0\u6761\u4ef6\u5b89\u5168\u7684\uff1b\u5982\u679c\u5bf9\u4e8e\u62e5\u6709\u591a\u9879\u5f0f\u8ba1\u7b97\u80fd\u529b\u7684\u653b\u51fb\u8005\u662f\u5b89\u5168\u7684\uff0c\u5219\u79f0\u4e3a\u662f\u5bc6\u7801\u5b66\u5b89\u5168\u7684\u6216\u6761\u4ef6\u5b89\u5168\u7684\u3002\n\n\u5df2\u6709\u7684\u7ed3\u679c\u8bc1\u660e\u4e86\u5728\u65e0\u6761\u4ef6\u5b89\u5168\u6a21\u578b\u4e0b\uff0c\u5f53\u4e14\u4ec5\u5f53\u6076\u610f\u53c2\u4e0e\u8005\u7684\u4eba\u6570\u5c11\u4e8e\u603b\u4eba\u6570\u76841/3\u65f6\uff0c\u5b89\u5168\u7684\u65b9\u6848\u624d\u5b58\u5728\u3002\u800c\u5728\u6761\u4ef6\u5b89\u5168\u6a21\u578b\u4e0b\uff0c\u5f53\u4e14\u4ec5\u5f53\u6076\u610f\u53c2\u4e0e\u8005\u7684\u4eba\u6570\u5c11\u4e8e\u603b\u4eba\u6570\u7684\u4e00\u534a\u65f6\uff0c\u5b89\u5168\u7684\u65b9\u6848\u624d\u5b58\u5728\u3002\n\n\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u8d77\u6e90\u4e8e1982\u5e74[\u59da\u671f\u667a](https://baike.baidu.com/item/\u59da\u671f\u667a)\u7684\u767e\u4e07\u5bcc\u7fc1\u95ee\u9898\u3002\u540e\u6765Oded Goldreich\u6709\u6bd4\u8f83\u7ec6\u81f4\u7cfb\u7edf\u7684\u8bba\u8ff0\u3002\n\n\u57fa\u4e8e[phe](https://github.com/data61/python-paillier)\u5e93 (Paillier Homomorphic Encryption) \u7684\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae\u5b9e\u73b0\uff0c\u5305\u542b\uff1a\n\n- \u5b89\u5168\u4e58\u6cd5\u534f\u8bae\n- \u5b89\u5168\u9664\u6cd5\u534f\u8bae\n- \u5b89\u5168\u6700\u5927\u503c\u8ba1\u7b97\u534f\u8bae\n- \u5b89\u5168\u6700\u5c0f\u503c\u8ba1\u7b97\u534f\u8bae\n- \u5b89\u5168\u5947\u5076\u6027\u5224\u65ad\u534f\u8bae\n- \u5b89\u5168\u4e8c\u8fdb\u5236\u5206\u89e3\u534f\u8bae\n- \u5b89\u5168\u4e8c\u8fdb\u5236\u4e0e\u534f\u8bae\n- \u5b89\u5168\u4e8c\u8fdb\u5236\u6216\u534f\u8bae\n- \u5b89\u5168\u4e8c\u8fdb\u5236\u975e\u534f\u8bae\n- \u5b89\u5168\u4e8c\u8fdb\u5236\u5f02\u6216\u534f\u8bae\n- \u5b89\u5168\u76f8\u7b49\u534f\u8bae\n- \u5b89\u5168\u4e0d\u76f8\u7b49\u534f\u8bae\n- \u5b89\u5168\u5927\u4e8e\u534f\u8bae\n- \u5b89\u5168\u5927\u4e8e\u7b49\u4e8e\u534f\u8bae\n- \u5b89\u5168\u5c0f\u4e8e\u534f\u8bae\n- \u5b89\u5168\u5c0f\u4e8e\u7b49\u4e8e\u534f\u8bae\n\n---\n\n## \u9879\u76ee\u73af\u5883\n\n- `python3.8`\n- `gmpy2>=2.0.8`\n- `pandas>=1.2.4`\n- `phe>=1.4.0`\n- `tqdm>=4.59.0`\n- `numpy>=1.20.2`\n\n\u8be6\u89c1`requirements.txt`\u3002\n\n---\n\n## \u9879\u76ee\u793a\u4f8b\n\n### \u51c6\u5907\u5de5\u4f5c\n\n\u5b89\u5168\u4f9d\u8d56\u73af\u5883: `pip install -r requirements.txt`\n\n\u5b89\u88c5`smpcp`\u5e93: `pip install smpcp`\n\n\u5f15\u5165`phe`\u5e93: `import phe`\n\n\u5f15\u5165`smpcp`\u5e93: `from smpcp import CloudPlatform, CloudPlatformThird, SecureMultiPartyComputationProtocol`\n\n### \u751f\u6210\u5bc6\u94a5\n\n```python\npublic_key, secret_key = phe.generate_paillier_keypair(n_length=2048)\n```\n\n\u5176\u4e2d`n_length`\u4e3a\u5bc6\u94a5\u957f\u5ea6\u3002\n\n### \u5b9a\u4e49\u4e91\u670d\u52a1\u5668\n\n```python\ncloud1 = CloudPlatform(public_key=public_key)\ncloud2 = CloudPlatformThird(public_key=public_key, secret_key=secret_key)\n```\n\n### \u5b9a\u4e49\u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae\n\n```python\nprotocol = SecureMultiPartyComputationProtocol(c1=cloud1, c2=cloud2)\n```\n\n### \u7f16\u7801\n\n```python\nn1 = protocol.encode(public_key.encrypt(6))\nn2 = public_key.encrypt(3)\nb1 = protocol.encode(public_key.encrypt(1))\nb2 = public_key.encrypt(0)\n```\n\n### \u89e3\u7801\n\n```python\nassert secret_key.decrypt(n1.decode()) == 6\n```\n\n### \u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae\u5b9e\u73b0\n\n```python\n# TODO \u5b89\u5168\u4e58\u6cd5\u534f\u8bae\nassert secret_key.decrypt(n1 * n2) == 18\n# TODO \u5b89\u5168\u9664\u6cd5\u534f\u8bae\nassert secret_key.decrypt(n1 / n2) == 2\n# TODO \u5b89\u5168\u6700\u5927\u503c\u534f\u8bae\nassert secret_key.decrypt(n1.optimum(n2, 'max')) == 6\n# TODO \u5b89\u5168\u6700\u5c0f\u503c\u534f\u8bae\nassert secret_key.decrypt(n1.optimum(n2, 'min')) == 3\n# TODO \u5b89\u5168\u5947\u5076\u6027\u5224\u65ad\u534f\u8bae\nassert secret_key.decrypt(n1.parity()) == 0\nassert secret_key.decrypt(protocol.encode(n2).parity()) == 1\n# TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u5206\u89e3\u534f\u8bae\nbit = []\nfor v in n1.bit_dec(3):\n    bit.append(secret_key.decrypt(v))\nassert bit == [1, 1, 0]\n# TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u4e0e\u534f\u8bae\nassert secret_key.decrypt(b1 | b2) == 1\n# TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u6216\u534f\u8bae\nassert secret_key.decrypt(b1 & b2) == 0\n# TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u975e\u534f\u8bae\nassert secret_key.decrypt(b1.bit_not()) == 0\n# TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u5f02\u6216\u534f\u8bae\nassert secret_key.decrypt(b1 ^ b2) == 1\n# TODO \u5b89\u5168\u76f8\u7b49\u534f\u8bae\nassert secret_key.decrypt(n1 == n2) == 0\nassert secret_key.decrypt(n1 == n2 * 2) == 1\n# TODO \u5b89\u5168\u4e0d\u76f8\u7b49\u534f\u8bae\nassert secret_key.decrypt(n1 != n2) == 1\nassert secret_key.decrypt(n1 != n2 * 2) == 0\n# TODO \u5b89\u5168\u5927\u4e8e\u534f\u8bae\nassert secret_key.decrypt(n1 > n2) == 1\nassert secret_key.decrypt(n2 > n1) == 0\n# TODO \u5b89\u5168\u5927\u4e8e\u7b49\u4e8e\u534f\u8bae\nassert secret_key.decrypt(n1 >= n2) == 1\nassert secret_key.decrypt(n2 >= n1) == 0\n# TODO \u5b89\u5168\u5c0f\u4e8e\u534f\u8bae\nassert secret_key.decrypt(n1 < n2) == 0\nassert secret_key.decrypt(n2 < n1) == 1\n# TODO \u5b89\u5168\u5c0f\u4e8e\u7b49\u4e8e\u534f\u8bae\nassert secret_key.decrypt(n1 <= n2) == 0\nassert secret_key.decrypt(n2 <= n1) == 1\n```\n\n\u8be6\u89c1`example.py`\u3002\n\n---\n\n## \u9879\u76ee\u6d4b\u8bd5\n\n\u7ecf\u8fc7`Unit Test`\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a\n\n```python\nkey_length = 2048  # TODO \u5bc6\u94a5\u957f\u5ea6\n\npublic_key, secret_key = phe.generate_paillier_keypair(n_length=key_length)  # \u751f\u6210\u5bc6\u94a5\u5bf9\n\ncloud1 = CloudPlatform(public_key=public_key)  # \u4e91\u670d\u52a1\u56681\ncloud2 = CloudPlatformThird(public_key=public_key, secret_key=secret_key)  # \u4e91\u670d\u52a1\u56682\n\nprotocol = SecureMultiPartyComputationProtocol(c1=cloud1, c2=cloud2)  # \u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae\u7c7b\n\n\nclass SMPCPTest(unittest.TestCase):\n    \"\"\"\n    \u5b89\u5168\u591a\u65b9\u8ba1\u7b97\u534f\u8bae\u6d4b\u8bd5\u7c7b\n    \"\"\"\n\n    def setUp(self):\n        \"\"\"\n        \u6d4b\u8bd5\u524d\n        \"\"\"\n        # \u751f\u6210\u6d6e\u70b9\u6570\n        self.float1 = int(\n            gmpy2.mpz_random(gmpy2.random_state(\n                int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)),\n                                     key_length))), key_length)) * random.uniform(0.1, 1.0)\n        self.float2 = int(\n            gmpy2.mpz_random(gmpy2.random_state(\n                int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)), key_length))),\n                key_length)) * random.uniform(0.1, 1.0)\n        self.float_n1 = protocol.encode(public_key.encrypt(self.float1))\n        self.float_n2 = public_key.encrypt(self.float2)\n        # \u751f\u6210\u6574\u6570\n        self.int1 = int(gmpy2.mpz_random(gmpy2.random_state(\n            int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)), key_length))),\n            key_length))\n        self.int2 = int(gmpy2.mpz_random(gmpy2.random_state(\n            int(gmpy2.mpz_random(gmpy2.random_state(random.SystemRandom().randint(1, 0xffffffff)), key_length))),\n            key_length))\n        self.int_n1 = protocol.encode(public_key.encrypt(self.int1))\n        self.int_n2 = public_key.encrypt(self.int2)\n        return super().setUp()\n\n    def tearDown(self):\n        \"\"\"\n        \u6d4b\u8bd5\u540e\n        \"\"\"\n        return super().tearDown()\n\n    # TODO \u5b89\u5168\u4e58\u6cd5\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e58\u6cd5\u534f\u8bae')\n    def test_mul(self):\n        \"\"\"\n        \u5b89\u5168\u4e58\u6cd5\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u4e58\u6cd5\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6700\u9ad8\u652f\u63018\u4f4d\u6d6e\u70b9\u4e58\u6cd5\n        self.assertEqual(round(self.float1 * self.float2, 8),\n                         round(secret_key.decrypt(self.float_n1 * self.float_n2), 8))\n\n        # \u6574\u6570\u4e58\u6cd5\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        self.assertEqual(self.int1 * self.int2, secret_key.decrypt(self.int_n1 * self.int_n2))\n\n    # TODO \u5b89\u5168\u9664\u6cd5\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u9664\u6cd5\u534f\u8bae')\n    def test_div(self):\n        \"\"\"\n        \u5b89\u5168\u9664\u6cd5\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u9664\u6cd5\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6700\u9ad8\u652f\u630110\u4f4d\u6d6e\u70b9\u9664\u6cd5\n        self.assertEqual(round(self.float1 / self.float2, 10),\n                         round(secret_key.decrypt(self.float_n1 / self.float_n2), 10))\n\n        # \u6574\u6570\u9664\u6cd5\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6700\u9ad8\u652f\u630110\u4f4d\u6574\u6570\u9664\u6cd5\n        self.assertEqual(round(self.int1 / self.int2, 10), round(secret_key.decrypt(self.int_n1 / self.int_n2), 10))\n\n    # TODO \u5b89\u5168\u6700\u503c\u8ba1\u7b97\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u6700\u503c\u8ba1\u7b97\u534f\u8bae')\n    def test_optimum(self):\n        \"\"\"\n        \u5b89\u5168\u6700\u503c\u8ba1\u7b97\u534f\u8bae\n        \"\"\"\n        mode = 'max' if random.random() > 0.5 else 'min'\n        if mode == 'max':\n            # \u6d6e\u70b9\u6700\u5927\u503c\u8ba1\u7b97\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n            self.assertEqual(max(self.float1, self.float2),\n                             secret_key.decrypt(self.float_n1.optimum(self.float_n2, 'max')))\n\n            # \u6574\u6570\u6700\u5927\u503c\u8ba1\u7b97\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n            self.assertEqual(max(self.int1, self.int2), secret_key.decrypt(self.int_n1.optimum(self.int_n2, 'max')))\n        else:\n            # \u6d6e\u70b9\u6700\u5c0f\u503c\u8ba1\u7b97\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n            self.assertEqual(min(self.float1, self.float2),\n                             secret_key.decrypt(self.float_n1.optimum(self.float_n2, 'min')))\n\n            # \u6574\u6570\u6700\u5c0f\u503c\u8ba1\u7b97\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n            self.assertEqual(min(self.int1, self.int2), secret_key.decrypt(self.int_n1.optimum(self.int_n2, 'min')))\n\n    # TODO \u5b89\u5168\u5947\u5076\u6027\u5224\u65ad\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u5947\u5076\u6027\u5224\u65ad\u534f\u8bae')\n    def test_parity(self):\n        \"\"\"\n        \u5b89\u5168\u5947\u5076\u6027\u5224\u65ad\u534f\u8bae\n        \"\"\"\n        # \u6574\u6570\u5947\u5076\u6027\u5224\u65ad\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        self.assertEqual(self.int1 % 2, secret_key.decrypt(self.int_n1.parity()))\n\n    # TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u5206\u89e3\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e8c\u8fdb\u5236\u5206\u89e3\u534f\u8bae')\n    def test_bit_dec(self):\n        \"\"\"\n        \u5b89\u5168\u4e8c\u8fdb\u5236\u5206\u89e3\u534f\u8bae\n        \"\"\"\n        # \u6574\u6570\u4e8c\u8fdb\u5236\u5206\u89e3\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        bit = len(bin(self.int1).split('b')[1])\n        result = ''.join([str(secret_key.decrypt(v)) for v in self.int_n1.bit_dec(bit)])\n        self.assertEqual(bin(self.int1).split('b')[1], result)\n\n    # TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u4e0e\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e8c\u8fdb\u5236\u4e0e\u534f\u8bae')\n    def test_and(self):\n        \"\"\"\n        \u5b89\u5168\u4e8c\u8fdb\u5236\u4e0e\u534f\u8bae\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit2 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        bit_n2 = public_key.encrypt(bit2)\n        # \u4e8c\u8fdb\u5236\u6216\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        self.assertEqual(bit1 & bit2, secret_key.decrypt(bit_n1 & bit_n2))\n\n    # TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u6216\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e8c\u8fdb\u5236\u6216\u534f\u8bae')\n    def test_or(self):\n        \"\"\"\n        \u5b89\u5168\u4e8c\u8fdb\u5236\u6216\u534f\u8bae\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit2 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        bit_n2 = public_key.encrypt(bit2)\n        # \u4e8c\u8fdb\u5236\u6216\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        self.assertEqual(bit1 | bit2, secret_key.decrypt(bit_n1 | bit_n2))\n\n    # TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u975e\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e8c\u8fdb\u5236\u975e\u534f\u8bae')\n    def test_bit_not(self):\n        \"\"\"\n        \u5b89\u5168\u4e8c\u8fdb\u5236\u975e\u534f\u8bae\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        # \u4e8c\u8fdb\u5236\u6216\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        self.assertEqual(1 - bit1, secret_key.decrypt(bit_n1.bit_not()))\n\n    # TODO \u5b89\u5168\u4e8c\u8fdb\u5236\u5f02\u6216\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e8c\u8fdb\u5236\u5f02\u6216\u534f\u8bae')\n    def test_xor(self):\n        \"\"\"\n        \u5b89\u5168\u4e8c\u8fdb\u5236\u5f02\u6216\u534f\u8bae\n        \"\"\"\n        bit1 = random.SystemRandom().randint(0, 1)\n        bit2 = random.SystemRandom().randint(0, 1)\n        bit_n1 = protocol.encode(public_key.encrypt(bit1))\n        bit_n2 = public_key.encrypt(bit2)\n        # \u4e8c\u8fdb\u5236\u6216\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u65e0\u660e\u663e\u95ee\u9898\n        self.assertEqual(bit1 ^ bit2, secret_key.decrypt(bit_n1 ^ bit_n2))\n\n    # TODO \u5b89\u5168\u76f8\u7b49\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u76f8\u7b49\u534f\u8bae')\n    def test_eq(self):\n        \"\"\"\n        \u5b89\u5168\u76f8\u7b49\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.float1 == self.float1 else 0,\n                         secret_key.decrypt(self.float_n1 == self.float_n1.decode()))\n\n        # \u6574\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.int1 == self.int1 else 0, secret_key.decrypt(self.int_n1 == self.int_n1.decode()))\n\n    # TODO \u5b89\u5168\u4e0d\u76f8\u7b49\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u4e0d\u76f8\u7b49\u534f\u8bae')\n    def test_ne(self):\n        \"\"\"\n        \u5b89\u5168\u4e0d\u76f8\u7b49\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.float1 != self.float2 else 0, secret_key.decrypt(self.float_n1 != self.float_n2))\n\n        # \u6574\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.int1 != self.int2 else 0, secret_key.decrypt(self.int_n1 != self.int_n2))\n\n    # TODO \u5b89\u5168\u5927\u4e8e\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u5927\u4e8e\u534f\u8bae')\n    def test_gt(self):\n        \"\"\"\n        \u5b89\u5168\u5927\u4e8e\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.float1 > self.float2 else 0, secret_key.decrypt(self.float_n1 > self.float_n2))\n\n        # \u6574\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.int1 > self.int2 else 0, secret_key.decrypt(self.int_n1 > self.int_n2))\n\n    # TODO \u5b89\u5168\u5927\u4e8e\u7b49\u4e8e\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u5927\u4e8e\u7b49\u4e8e\u534f\u8bae')\n    def test_ge(self):\n        \"\"\"\n        \u5b89\u5168\u5927\u4e8e\u7b49\u4e8e\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.float1 >= self.float2 else 0, secret_key.decrypt(self.float_n1 >= self.float_n2))\n\n        # \u6574\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.int1 >= self.int2 else 0, secret_key.decrypt(self.int_n1 >= self.int_n2))\n\n    # TODO \u5b89\u5168\u5c0f\u4e8e\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u5c0f\u4e8e\u534f\u8bae')\n    def test_lt(self):\n        \"\"\"\n        \u5b89\u5168\u5c0f\u4e8e\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.float1 < self.float2 else 0, secret_key.decrypt(self.float_n1 < self.float_n2))\n\n        # \u6574\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.int1 < self.int2 else 0, secret_key.decrypt(self.int_n1 < self.int_n2))\n\n    # TODO \u5b89\u5168\u5c0f\u4e8e\u7b49\u4e8e\u534f\u8bae\u6d4b\u8bd5\n    # @unittest.skip('\u8df3\u8fc7\u5b89\u5168\u5c0f\u4e8e\u7b49\u4e8e\u534f\u8bae')\n    def test_le(self):\n        \"\"\"\n        \u5b89\u5168\u5c0f\u4e8e\u7b49\u4e8e\u534f\u8bae\n        \"\"\"\n        # \u6d6e\u70b9\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.float1 <= self.float2 else 0, secret_key.decrypt(self.float_n1 <= self.float_n2))\n\n        # \u6574\u6570\u76f8\u7b49\u6d4b\u8bd5\uff1a\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6d6e\u70b9\u6570\u4f1a\u5f71\u54cd\u7ed3\u679c\n        self.assertEqual(1 if self.int1 <= self.int2 else 0, secret_key.decrypt(self.int_n1 <= self.int_n2))\n```\n\n\u8be6\u89c1`test_case/test_smpcp.py`, \u9879\u76ee\u62a5\u544a\u4f9d\u8d56\u57fa\u4e8e`unittest`\u7684[\u9879\u76ee](https://github.com/TesterlifeRaymond/BeautifulReport)`test_case/BeautifulReport.py`\u3002\n\n---\n\n## \u8054\u7cfb\u65b9\u5f0f\n\n\u4f5c\u8005\uff1a\u6c88\u9633\u822a\u7a7a\u822a\u5929\u5927\u5b66 \u6570\u636e\u5b89\u5168\u4e0e\u9690\u79c1\u8ba1\u7b97\u8bfe\u9898\u7ec4 \u65bd\u5c55\n\nGithub: https://github.com/shine813/\n\n\u90ae\u7bb1\uff1aphe.zshi@gmail.com\n\n\u5982\u6709\u95ee\u9898\uff0c\u53ef\u53ca\u65f6\u8054\u7cfb\u4f5c\u8005\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smpcp",
            "package_url": "https://pypi.org/project/smpcp/",
            "platform": null,
            "project_url": "https://pypi.org/project/smpcp/",
            "project_urls": {
                "Homepage": "https://github.com/shine813/Secure-Multi-Party-Computation-Protocol"
            },
            "release_url": "https://pypi.org/project/smpcp/2.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Secure Multi-Party Computation Protocol base on Partially Homomorphic Encryption for Python",
            "version": "2.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13729778,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "10fba74892c2583557a9dbba1076ed7a",
                    "sha256": "6676c4bd9c8f59b2d71ab82eb57ed180d5f14224156e766279d3dfa34b485efa"
                },
                "downloads": -1,
                "filename": "smpcp-2.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "10fba74892c2583557a9dbba1076ed7a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 8514,
                "upload_time": "2022-05-06T06:37:58",
                "upload_time_iso_8601": "2022-05-06T06:37:58.118510Z",
                "url": "https://files.pythonhosted.org/packages/5d/0e/d2aa01cae4b57bb6e3fd325aefc4d106fb1a739971ad2d52189b03e0d4d4/smpcp-2.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2e90fe5ed55c4b0dd0431ec99c20b0ac",
                    "sha256": "19f89edb51c99066024056ca8831b35bdfe1a256493cd91726db02f35169c2e5"
                },
                "downloads": -1,
                "filename": "smpcp-2.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "2e90fe5ed55c4b0dd0431ec99c20b0ac",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11121,
                "upload_time": "2022-05-06T06:38:00",
                "upload_time_iso_8601": "2022-05-06T06:38:00.989425Z",
                "url": "https://files.pythonhosted.org/packages/13/53/5285cee64e66a32789cd8c0cef69ecd655fb96a7f923aab12a43a43c7747/smpcp-2.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}