{
    "0.2.2": {
        "info": {
            "author": "Shuzhao Li",
            "author_email": "shuzhao.li@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: BSD License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Bio-Informatics",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shuzhao-li/khipu",
            "keywords": "chemistry,bioinformatics,mass spectrometry",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "khipu-metabolomics",
            "package_url": "https://pypi.org/project/khipu-metabolomics/",
            "platform": null,
            "project_url": "https://pypi.org/project/khipu-metabolomics/",
            "project_urls": {
                "Homepage": "https://github.com/shuzhao-li/khipu"
            },
            "release_url": "https://pypi.org/project/khipu-metabolomics/0.2.2/",
            "requires_dist": [
                "mass2chem",
                "treelib",
                "networkx"
            ],
            "requires_python": ">=3.7",
            "summary": "Common utilities for interpreting mass spectrometry data",
            "version": "0.2.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16079684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8e035e9e1974cbf69867ae9f0276f6d8",
                    "sha256": "6ddeed388d32f382ee7a004066cbe1d3121095cae7ee503733e02227b46e98af"
                },
                "downloads": -1,
                "filename": "khipu_metabolomics-0.2.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8e035e9e1974cbf69867ae9f0276f6d8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 19467,
                "upload_time": "2022-12-11T16:56:09",
                "upload_time_iso_8601": "2022-12-11T16:56:09.103893Z",
                "url": "https://files.pythonhosted.org/packages/83/82/afd04926353b9575bb8175c8a0f0e24201f92ebc57fea6798eb47dcb9889/khipu_metabolomics-0.2.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4394428e78ac5a0cac48e91944cbb201",
                    "sha256": "3b0c672cd281fed53f1e9e00abb0a749125abd742e9c5b69fd19efb2bd287d1e"
                },
                "downloads": -1,
                "filename": "khipu-metabolomics-0.2.2.tar.gz",
                "has_sig": false,
                "md5_digest": "4394428e78ac5a0cac48e91944cbb201",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 19870,
                "upload_time": "2022-12-11T16:56:11",
                "upload_time_iso_8601": "2022-12-11T16:56:11.460248Z",
                "url": "https://files.pythonhosted.org/packages/a4/5b/2f14771a51b1574a5773f17e739313acc63a9e7254e4adb61c20dd4211e7/khipu-metabolomics-0.2.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.4": {
        "info": {
            "author": "Shuzhao Li",
            "author_email": "shuzhao.li@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: BSD License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Bio-Informatics",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# khipu as a tree data structure to model a chemical compound in mass spectrometry data\nThis applies to regular LC-MS data, but also enables easy analysis of isotope tracing and chemical labeling data.\n\n## Why tree?\nGrouping ions in mass spectrometry data to their origin compound is a key step of data annotation.\nIt's a common practice to search the data for signatures of mass differences, \nthen combine overlap signatures as a network of ions (also called features or peaks).\nIdeally, one wants to infer the neutral formula of the compound, \nand annotate how each ion is related to the origin compound. \nIn such case, each ion should have only one unique \"parent\" in the mass difference network, \nand the network should have one origin compound as root. \nThis becomes a tree structure.\n\nIn theory, multiple ions are measured in mass spectrometry for one origin compound,\nbecause of two factors:\n1) isotopes exists for atoms, which have difference mass values; and\n2) modifications occur during the mass spectrometry analysis, including formation of adducts, ionization, in-source fragmentation and neutral loss.\n\nEach ion is a result of combination of these two factors, and can be attributed to the origin compound.\nTherefore, the ions can be adequately represented as a \"leaf\" on a tree, root being the origin compound.\n\nOnce we move beyond generic networks and use trees to annotate ions,\nit is much easier to optimize algorithms and exchange annotations.\n\n## What's \"khipu\"?\nKhipu is a recording device using knots, often 2-level of strings,\nhistorically used by people in Andean South America, includign Inca (https://en.wikipedia.org/wiki/Quipu).\nThe format is similar to how we represent isotopes and adducts in our data.\nWe chose \"khipu\" over the spelling of \"quipu\", to pay respect to the indigenous people.\n\n## Tree and depth\nAfter we get paired relationship between ions by mass differences, a tree may look like this:\n\n    179.1123@172.9   #  (M0)\n    \u2514\u2500\u2500 180.1156@172.9\n        \u251c\u2500\u2500 181.1198@171.7\n        \u2502   \u2514\u2500\u2500 182.1233@171.7    # (should be level 1 not lower)\n        \u2514\u2500\u2500 181.1198@173.3        # problematic assignment\n\nHere, each ion is denoted as m/z@retention_time. \nThe above tree has a problem of tree depth.\nFor isotopes, M3 is not parent of M4 - they are children of root and at the same level.\nFor adducts, they should be at the same level because adduct formation is one-time event in ESI.\nThus, the annotation tree should have 2-levels: isotopes and adducts (and other modifications). \n\nThe above tree has an additional problem, as we have two ions at 181.1198, \none of which could be from a different origin compound.\n\n## Algorithmic consideration: tree search vs network partitioning\nLet's consider two senarios of constructing a khipu per origin compound:\na) search all isotopic trees and merge the adducts in an additional step, or \nb) search all isotopic pairs and all adduct pairs, form the network and partition the network.\n\nThe a) option may have problem if the merging only considers M0, \nwhich may not be the most abundant ion in isotope labeling experiments. \nI.e. M0 may not be measured for a compound and the adduct relation of M0s is broken.\nIf we have to search beyond M0 for adduct relations, a) offers no advantage.\nTherefore, b) is the more generic solution.\n\n## Implementation - overview\n1. Get all pairs of features that match isotope patterns and adduct patterns. The patterns are provided as options and users can use their own patterns. The default match in LC-MS is based on m/z and retention time windows, while preprocessing software (asari) can require overlap scans.\n\n2. Connect all pattern matched feature pairs to an overall network, which is further partitioned into connected subnetworks.\n\n3. Each subnetwork becomes a khipu instance, after rule inspection and optimization to resolve ambiguity. A khipu is essentially an 'empirical compound' that is used for downstream annotation and analysis.\n\n4. This library supports tree and grid visualization in plain text. Once imported to a Jupyter Notebook, one can use enhanced visualization schemes. The library can also be used by others for extended tools. \n\n## Assignment of ions to a khipu\nThe network formed by m/z pairs is redundant, especially when multiple isotopes exist. \nAn example is that only half of edges are needed to connect the ions:\n\n    >>> big[0].edges()\n    [('F1478', 'F171'), ('F1478', 'F114'), ('F1478', 'F10'), ('F171', 'F114'), ('F171', 'F10'), ('F114', 'F10')]\n    >>> T = nx.minimum_spanning_tree(big[0])\n    >>> \n    >>> T.edges()\n    [('F1478', 'F171'), ('F1478', 'F114'), ('F1478', 'F10')]\n \nIn theory, one can find the ion of lowest m/z, calculate all the combinations of isotopes and adducts, \nand match all ions to the calculated combinations (a grid). \nHowever, it will be problematic because each measurement has an error, \nand this method imposes the error of one ion to others, sufficient to cause wrong matches \nwhen m/z patterns are close. E.g. the m/z difference of 13C/12C is 1.003355 and that of a proton is 1.0073.\nFor high m/z values, their difference is sensitive to measurement errors. \n\nIn this khipu library, we \n1. separate isotope edges and adduct edges.\n2. treat all connected isotope edges as one branch.\n3. establish a \"trunk\" of ordered adducts.\n4. asssign each isotopic branch to the adduct trunk.\n5. align isotopes in all branches to establish the khipu grid. \n\nSome ions may come into the initial network by mistakes or unresolved signals.\nThe are removed from the established khipu by clean-up rules, and sent off to form a new khipu.\n\n## Applicable to isotope tracing and chemical derivatization\nThe search pattern for isotopes is often dependent on the biochemical experiment.\nUsers can overwrite the default by supplying their search patterns (see demo notebooks).\nSearch patterns are separate from search functions, lending flexibiliy to data analysis.\n\nIn chemical derivatization experiments, the origin compound and derivatized compound can be both measured in the LC-MS data.\nWe have separate khipu trees for each, then link them by the m/z shift from derivatization.\nBecause derivatization is a reaction that occurs before LC-MS, and\nLC-MS measures whatever compounds that are present in samples.\n\n## Khipus are used as empirical compounds \n- Empirical compound is defined at https://github.com/shuzhao-li/metDataModel\n- Khipu defines the MS1 pseudo spectra for empirical compounds\n- Empirical compounds are designed to include additional annotations, including from tandem mass spec data and database searches\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shuzhao-li/khipu",
            "keywords": "chemistry,bioinformatics,mass spectrometry",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "khipu-metabolomics",
            "package_url": "https://pypi.org/project/khipu-metabolomics/",
            "platform": null,
            "project_url": "https://pypi.org/project/khipu-metabolomics/",
            "project_urls": {
                "Homepage": "https://github.com/shuzhao-li/khipu"
            },
            "release_url": "https://pypi.org/project/khipu-metabolomics/0.2.4/",
            "requires_dist": [
                "mass2chem",
                "treelib",
                "networkx"
            ],
            "requires_python": ">=3.7",
            "summary": "Common utilities for interpreting mass spectrometry data",
            "version": "0.2.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16079684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e8c628082e1bfe2e19a0f469ee4c528d",
                    "sha256": "2022715455bcd0428f11a1678c121a21d33c142a22055e5c39b1e67be6cb515d"
                },
                "downloads": -1,
                "filename": "khipu_metabolomics-0.2.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e8c628082e1bfe2e19a0f469ee4c528d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 19777,
                "upload_time": "2022-12-12T22:44:23",
                "upload_time_iso_8601": "2022-12-12T22:44:23.612601Z",
                "url": "https://files.pythonhosted.org/packages/ff/4f/c20f02d24b2625a758970cfdfcf06a93c428fc7f255e7c51d8b1e7d52d8b/khipu_metabolomics-0.2.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cc12682d2cbd4ecdc9337a3a6b856942",
                    "sha256": "6711cd9a1c7863024be7c40a882dcb072197bd7b6c913d7fb1f98b374dc489d8"
                },
                "downloads": -1,
                "filename": "khipu-metabolomics-0.2.4.tar.gz",
                "has_sig": false,
                "md5_digest": "cc12682d2cbd4ecdc9337a3a6b856942",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 19985,
                "upload_time": "2022-12-12T22:44:26",
                "upload_time_iso_8601": "2022-12-12T22:44:26.705223Z",
                "url": "https://files.pythonhosted.org/packages/40/b8/99adbb40122c49b5cdd2b2078479d91f8c9dc4b6d01171b287fdb6bff9c9/khipu-metabolomics-0.2.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}