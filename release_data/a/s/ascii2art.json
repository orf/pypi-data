{
    "4.1": {
        "info": {
            "author": "halt",
            "author_email": "info@4r7.ir",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "Intended Audience :: Education",
                "Intended Audience :: End Users/Desktop",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 2.7",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Multimedia",
                "Topic :: Printing",
                "Topic :: Text Editors",
                "Topic :: Text Processing :: Fonts",
                "Topic :: Text Processing :: General",
                "Topic :: Utilities"
            ],
            "description": "<div align=\"center\">\n<img src=\"https://github.com/sepandhaghighi/art/raw/master/otherfile/logo.png\">\n<br/>\n<br/>\n<a href=\"https://codecov.io/gh/sepandhaghighi/art\">\n  <img src=\"https://codecov.io/gh/sepandhaghighi/art/branch/master/graph/badge.svg\" alt=\"Codecov\" />\n</a>\n<a href=\"https://badge.fury.io/py/art\"><img src=\"https://badge.fury.io/py/art.svg\" alt=\"PyPI version\" height=\"18\"></a>\n<a href=\"https://www.python.org/\"><img src=\"https://img.shields.io/badge/built%20with-Python3-green.svg\" alt=\"built with Python3\" /></a>\n<a href=\"https://github.com/sepandhaghighi/art/blob/master/FontList.ipynb\"><img src=\"https://img.shields.io/badge/Font List-632-blue.svg\"></a>\n<a href=\"https://github.com/sepandhaghighi/art/blob/master/ArtList.ipynb\"><img src=\"https://img.shields.io/badge/Art List-710-orange.svg\"></a>\n<a href=\"https://github.com/sepandhaghighi/art/blob/master/DecorList.ipynb\"><img src=\"https://img.shields.io/badge/Decor List-218-green.svg\"></a>\n<a href=\"https://t.me/artlib_bot\" target=\"__blank\"><img src=\"https://img.shields.io/badge/Telegram-Bot-red.svg\"></a>\n<a href=\"https://anaconda.org/sepandhaghighi/art\"><img src=\"https://anaconda.org/sepandhaghighi/art/badges/version.svg\"></a>\n<a href=\"https://discord.com/invite/FAAyq3QJqP\"><img src=\"https://img.shields.io/discord/897532566301724722.svg\" alt=\"Discord Channel\"></a>\n</div>\n\t\n----------\n## Overview\t\nASCII art is also known as \"computer text art\". It involves the smart placement of typed special characters or\nletters to make a visual shape that is spread over multiple lines of text.\n\t\nART is a Python lib for text converting to ASCII art fancy. ;-)\n\n\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">Open Hub</td>\n\t\t<td align=\"center\"><a href=\"https://www.openhub.net/p/artlib\"><img src=\"https://www.openhub.net/p/artlib/widgets/project_thin_badge.gif\"></a></td>\t\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">PyPI Counter</td>\n\t\t<td align=\"center\"><a href=\"http://pepy.tech/project/art\"><img src=\"http://pepy.tech/badge/art\"></a></td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">Github Stars</td>\n\t\t<td align=\"center\"><a href=\"https://github.com/sepandhaghighi/art\"><img src=\"https://img.shields.io/github/stars/sepandhaghighi/art.svg?style=social&label=Stars\"></a></td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">Font Counter</td>\n\t\t<td align=\"center\">632</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">1-Line-Art Counter</td>\n\t\t<td align=\"center\">710</td>\n\t</tr>\n    <tr>\n\t\t<td align=\"center\">Decor Counter</td>\n\t\t<td align=\"center\">218</td>\n\t</tr>\n</table>\n\n\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">Branch</td>\n\t\t<td align=\"center\">master</td>\t\n\t\t<td align=\"center\">dev</td>\t\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">CI</td>\n\t\t<td align=\"center\"><img src=\"https://github.com/sepandhaghighi/art/workflows/CI/badge.svg?branch=master\"></td>\n\t\t<td align=\"center\"><img src=\"https://github.com/sepandhaghighi/art/workflows/CI/badge.svg?branch=dev\"></td>\n\t</tr>\n</table>\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">Code Quality</td>\n\t\t<td align=\"center\"><a class=\"badge-align\" href=\"https://www.codacy.com/app/sepand-haghighi/art?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=sepandhaghighi/art&amp;utm_campaign=Badge_Grade\"><img src=\"https://api.codacy.com/project/badge/Grade/405020450bc94088ad1450461831a587\"/></a></td>\t\n\t\t<td align=\"center\"><a href=\"https://codebeat.co/projects/github-com-sepandhaghighi-art-dev\"><img alt=\"codebeat badge\" src=\"https://codebeat.co/badges/90e77325-a046-4cc5-9c3e-646c011a5b72\" /></a></td>\t\n\t\t<td align=\"center\"><a href=\"https://www.codefactor.io/repository/github/sepandhaghighi/art\"><img src=\"https://www.codefactor.io/repository/github/sepandhaghighi/art/badge\" alt=\"CodeFactor\" /></a></td>\n\t</tr>\n</table>\n\n    \n\n## Usage\n\n<div align=\"center\">\n\n<img src=\"https://github.com/sepandhaghighi/art/raw/master/otherfile/ART.gif\">\n<p>Quick Start</p>\n\n</div>\t\t\t\t\n\n\n### 1-Line art\n\n\u26a0\ufe0f Some environments don't support all 1-Line arts\n\n\u26a0\ufe0f **ART 4.6** is the last version to support **Bipartite art**\n\n\n#### 1. art\t\t\t\t\t\n\nThis function return 1-line art as `str` in normal mode and raise `artError` in exception.\t\n```pycon\n>>> from art import *\n>>> art_1=art(\"coffee\") # return art as str in normal mode\n>>> print(art_1)\nc[_]\n>>> art_2=art(\"woman\",number=2) # return multiple art as str\n>>> print(art_2)\n\u2593\u2697_\u2697\u2593 \u2593\u2697_\u2697\u2593 \n>>> art(\"random\") # random 1-line art mode\n'(\u3063\u25d5\u203f\u25d5)\u3063 '\n>>> art(\"rand\")   # random 1-line art mode\n't(-_-t) '\n>>> art(22,number=1) # raise artError\nTraceback (most recent call last):\n        ...\nart.art.artError: The 'artname' type must be str.\n\n```\n#### 2. aprint\t\t\t\t\n\nThis function print 1-line art in normal mode (return None) and raise `artError` in exception.\n```pycon\n>>> aprint(\"butterfly\") # print art\n\u01b8\u0335\u0321\u04dc\u0335\u0328\u0304\u01b7 \n>>> aprint(\"happy\") # print art\n \u06dc\\(\ufb41\u06ba\ufb41\u064e` )/\u06dc\n>>> aprint(\"random\") # random 1-line art mode\n'(\u3063\u25d5\u203f\u25d5)\u3063 '\n>>> aprint(\"rand\")   # random 1-line art mode\n't(-_-t) '\n>>> aprint(\"woman\",number=\"22\") # raise artError\nTraceback (most recent call last):\n        ...\nart.art.artError: The 'number' type must be int.\n```\n\n#### 3. randart\n\n`randart` function is added in `Version 2.2` as `art(\"random\")` shortcut.\n```pycon\n>>> randart()\n'\u12de\u13dc\u2118\u2118\u13bd \u212c\u2139\u211b\u0288\u12de\u15ec\u13dc\u13bd '\n>>> randart()\n'\u270c(\u25d5\u203f-)\u270c '\n```\t\n\n* Note1 : Use `ART_NAMES` to access all arts name list (new in `Version 4.2`)\n* Note2 : Use `NON_ASCII_ARTS` to access all Non-ASCII arts name list (new in `Version 4.6`)\n* Note3 : Use `ASCII_ARTS` to access all ASCII arts name list (new in `Version 5.7`)\n\n### ASCII text\n\t\n\u26a0\ufe0f Some fonts don't support all characters\t\t\n\n\u26a0\ufe0f From `Version 3.3` Non-ASCII fonts added (These fonts are not compatible with some environments)\n\n\u26a0\ufe0f From `Version 5.3` `\\n` is used as the default line separator instead of `\\r\\n` (Use `sep` parameter if needed)\n\n#### 1. text2art\t\t\t\t\n\nThis function return ASCII text as `str` in normal mode and raise `artError` in exception.\n```pycon\t\n>>> Art=text2art(\"art\") # Return ASCII text (default font) and default chr_ignore=True \n>>> print(Art)\n              _   \n  __ _  _ __ | |_ \n / _` || '__|| __|\n| (_| || |   | |_ \n \\__,_||_|    \\__|\n                  \n                     \n>>> Art=text2art(\"art\",font='block',chr_ignore=True) # Return ASCII text with block font\n>>> print(Art)\n\n\n .----------------.  .----------------.  .----------------.\n| .--------------. || .--------------. || .--------------. |\n| |      __      | || |  _______     | || |  _________   | |\n| |     /  \\     | || | |_   __ \\    | || | |  _   _  |  | |\n| |    / /\\ \\    | || |   | |__) |   | || | |_/ | | \\_|  | |\n| |   / ____ \\   | || |   |  __ /    | || |     | |      | |\n| | _/ /    \\ \\_ | || |  _| |  \\ \\_  | || |    _| |_     | |\n| ||____|  |____|| || | |____| |___| | || |   |_____|    | |\n| |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'\n\n>>> Art=text2art(\"test\",\"random\") # random font mode\n>>> print(Art)\n |       | \n~|~/~/(~~|~\n | \\/__) | \n           \n>>> Art=text2art(\"test\",\"rand\") # random font mode\n>>> print(Art)\n___ ____ ____ ___ \n |  |___ [__   |  \n |  |___ ___]  | \n\n>>> print(text2art('''Lorem  \nipsum \ndolor''', font=\"small\")) # Multi-line print\n _                            \n| |    ___  _ _  ___  _ __    \n| |__ / _ \\| '_|/ -_)| '  \\   \n|____|\\___/|_|  \\___||_|_|_|  \n                              \n _                         \n(_) _ __  ___ _  _  _ __   \n| || '_ \\(_-<| || || '  \\  \n|_|| .__//__/ \\_,_||_|_|_| \n   |_|                     \n    _       _           \n __| | ___ | | ___  _ _ \n/ _` |/ _ \\| |/ _ \\| '_|\n\\__,_|\\___/|_|\\___/|_|  \n                        \n\n>>> print(text2art(\"test\",\"white_bubble\"))  # Non-ASCII font example\n\u24e3\u24d4\u24e2\u24e3\n>>> text2art(\"art\",font=\"fancy5\",decoration=\"barcode1\") # decoration parameter is added in Version 4.6\n'\u258c\u2502\u2588\u2551\u258c\u2551\u258c\u2551 \u13d7\u13d2\u13d6 \u2551\u258c\u2551\u258c\u2551\u2588\u2502\u258c'\n>>> text2art(\"se\u0633\u0633\u0633\",font=DEFAULT_FONT,chr_ignore=False) # raise artError in exception\nTraceback (most recent call last):\n        ...\nart.art.artError: \u0633 is invalid.\n  \n```\n#### 2. tprint\t\t\t\t\n\nThis function print ASCII text in normal mode (return None) and raise `artError` in exception.\n```pycon\n>>> tprint(\"art\") # print ASCII text (default font) \n              _   \n  __ _  _ __ | |_ \n / _` || '__|| __|\n| (_| || |   | |_ \n \\__,_||_|    \\__|\n                  \n\n>>> tprint(\"art\",font=\"block\",chr_ignore=True) # print ASCII text (block font)\n\n .----------------.  .----------------.  .----------------.\n| .--------------. || .--------------. || .--------------. |\n| |      __      | || |  _______     | || |  _________   | |\n| |     /  \\     | || | |_   __ \\    | || | |  _   _  |  | |\n| |    / /\\ \\    | || |   | |__) |   | || | |_/ | | \\_|  | |\n| |   / ____ \\   | || |   |  __ /    | || |     | |      | |\n| | _/ /    \\ \\_ | || |  _| |  \\ \\_  | || |    _| |_     | |\n| ||____|  |____|| || | |____| |___| | || |   |_____|    | |\n| |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'\n\n>>> tprint('test\u0633\u0633')  # chr_ignore flag ==True (Default)\n _               _   \n| |_   ___  ___ | |_ \n| __| / _ \\/ __|| __|\n| |_ |  __/\\__ \\| |_ \n \\__| \\___||___/ \\__|\n                     \n>>> tprint(\"test\",\"random\") # random font mode\n |       | \n~|~/~/(~~|~\n | \\/__) | \n           \n>>> tprint(\"test\",\"rand\") # random font mode\n___ ____ ____ ___ \n |  |___ [__   |  \n |  |___ ___]  |  \n                  \n\n>>> tprint('test\u0633\u0633',chr_ignore=False) # raise artError in exception \nTraceback (most recent call last):\n       ...\nart.art.artError: \u0633 is invalid.\n>>> tprint('''Lorem  \nipsum \ndolor''', font=\"cybermedium\") # Multi-line print\n_    ____ ____ ____ _  _    \n|    |  | |__/ |___ |\\/|    \n|___ |__| |  \\ |___ |  |    \n                            \n_ ___  ____ _  _ _  _    \n| |__] [__  |  | |\\/|    \n| |    ___] |__| |  |    \n                         \n___  ____ _    ____ ____ \n|  \\ |  | |    |  | |__/ \n|__/ |__| |___ |__| |  \\ \n\n>>> tprint(\"art\",font=\"fancy5\",decoration=\"barcode1\") # decoration parameter is added in Version 4.6\n\u258c\u2502\u2588\u2551\u258c\u2551\u258c\u2551 \u13d7\u13d2\u13d6 \u2551\u258c\u2551\u258c\u2551\u2588\u2502\u258c\n>>> tprint(\"art\",font=\"fancy5\",decoration=\"random\") # decoration random mode is added in Version 5.0\n\u2022]\u2022\u00b7\u2726\u00ba\u2726\u00b7\u00bb\u13d7\u13d2\u13d6\u00ab\u00b7\u2726\u00ba\u2726\u00b7\u2022[\u2022\n```\n#### 3. tsave\t\t\t\t\n\nThis function return `dict` in normal and exception mode.\n```pycon\n>>> Response=tsave(\"art\",filename=\"test.txt\") # save ASCII text in test.txt file with save message (print_status==True), return dict\nSaved! \nFilename: test.txt\n>>> Response[\"Message\"]\n'OK'\n>>> Response=tsave(\"art\",filename=\"test.txt\",print_status=False) # save ASCII text in test.txt file without save message (print_status==False)\n>>> Response[\"Message\"]\n'OK'\n>>> Response[\"Status\"]\nTrue\n>>> tsave(22,font=DEFAULT_FONT,filename=\"art\",chr_ignore=True,print_status=True)\n{'Status': False, 'Message': \"'int' object has no attribute 'split'\"}\n>>> Response=tsave(\"art\",filename=\"test.txt\",overwrite=True) # overwrite parameter is added in Version 4.0\nSaved! \nFilename: test.txt\n>>> Response=tsave(\"art\",filename=\"test.txt\",decoration=\"barcode1\") # decoration parameter is added in Version 4.6\nSaved! \nFilename: test.txt\n>>> Response=tsave(\"art\",filename=\"test.txt\",sep=\"\\r\\n\") # sep parameter is added in Version 5.3\nSaved! \nFilename: test.txt                        \n```\n\n* Note1 : Use `FONT_NAMES` to access all fonts name list (new in `Version 4.2`)\n* Note2 : Use `NON_ASCII_FONTS` to access all Non-ASCII fonts name list (new in `Version 4.4`)\n* Note3 : Use `ASCII_FONTS` to access all ASCII fonts name list (new in `Version 5.7`)\n\n### Decoration\n\n\u26a0\ufe0f Some environments don't support all decorations\n\n#### 1. decor\n\nThis function return decoration as `str` in normal mode and raise `artError` in exception.\n```pycon\n>>> decor(\"barcode1\")\n'\u258c\u2502\u2588\u2551\u258c\u2551\u258c\u2551 '\n>>> decor(\"barcode1\",reverse=True)\n' \u2551\u258c\u2551\u258c\u2551\u2588\u2502\u258c'\n>>> decor(\"barcode1\") + text2art(\"    art   \",font=\"fancy42\") + decor(\"barcode1\",reverse=True)\n'\u258c\u2502\u2588\u2551\u258c\u2551\u258c\u2551     \u0105\u044f\u0163    \u2551\u258c\u2551\u258c\u2551\u2588\u2502\u258c'\n>>> decor(\"barcode1\",both=True) # both parameter is added in Version 5.0\n['\u258c\u2502\u2588\u2551\u258c\u2551\u258c\u2551 ', ' \u2551\u258c\u2551\u258c\u2551\u2588\u2502\u258c']\n>>> decor(\"random\",both=True) # random mode is added in Version 5.0\n['\uff62(\u25d4\u03c9\u25d4\u300c)\u4e09', '\u4e09\u4e09\u4e09\u0285(\uff1b\u25d4\u0c6a\u25d4)\u0283']\n>>> decor(\"rand\",both=True) # random mode is added in Version 5.0\n['\u2039\u2013\u2026\u00b7\u00b4`\u00b7\u2026\u2013\u203a', '\u2039\u2013\u2026\u00b7\u00b4`\u00b7\u2026\u2013\u203a']\n>>> decor(None)\nTraceback (most recent call last):\n\t...\nart.art.artError: The 'decoration' type must be str.\n```\n\n* Note : Use `DECORATION_NAMES` to access all decorations name list (new in `Version 4.6`)\n\n### Font modes\n\nThese modes are available for `text2art`, `tprint` & `tsave`.\t\n\n#### 1. Font name\t\n\n\u26a0\ufe0f Some fonts don't support all characters\n\t\t\t\n```pycon\n\n>>> tprint(\"art\",font=\"block\",chr_ignore=True)\n\n .----------------.  .----------------.  .----------------.\n| .--------------. || .--------------. || .--------------. |\n| |      __      | || |  _______     | || |  _________   | |\n| |     /  \\     | || | |_   __ \\    | || | |  _   _  |  | |\n| |    / /\\ \\    | || |   | |__) |   | || | |_/ | | \\_|  | |\n| |   / ____ \\   | || |   |  __ /    | || |     | |      | |\n| | _/ /    \\ \\_ | || |  _| |  \\ \\_  | || |    _| |_     | |\n| ||____|  |____|| || | |____| |___| | || |   |_____|    | |\n| |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'\n\n>>> tprint(\"art\",\"white_bubble\")\n\u24d0\u24e1\u24e3\n\n```\t\n\n#### 2. Random\t\t\n\nRandomly select from all fonts.\t\n\nKeywords : `random`, `rand` & `rnd`\n\n```pycon\n>>> tprint(\"test\",font=\"random\")\n |       | \n~|~/~/(~~|~\n | \\/__) | \n  \n\n```\n\n#### 3. Random small\n\nRandomly select from small fonts.\t\n\nKeywords : `rnd-small`, `random-small` & `rand-small`\n\n* Note : New in `Version 2.8`\n\n```pycon\n>>> tprint(\"test\",font=\"rnd-small\")\n             \n_/  _   _ _/ \n/  (- _)  /  \n             \n```\n\n#### 4. Random medium\n\nRandomly select from medium fonts.\n\nKeywords : `rnd-medium`, `random-medium` & `rand-medium`\n\n* Note : New in `Version 2.8`\n\n```pycon\n>>> tprint(\"test\",font=\"rnd-medium\")\n                      \n  ,                ,  \n ||               ||  \n=||=  _-_   _-_, =||= \n ||  || \\\\ ||_.   ||  \n ||  ||/    ~ ||  ||  \n \\\\, \\\\,/  ,-_-   \\\\, \n                      \n                      \n```\n\n#### 5. Random large\n\nRandomly select from large fonts.\n\nKeywords : `rnd-large`, `random-large` & `rand-large`\n\n* Note : New in `Version 2.8`\n\n```pycon\n>>> tprint(\"test\",font=\"rnd-large\")\n                                                                    \n8888888 8888888888 8 8888888888      d888888o.   8888888 8888888888 \n      8 8888       8 8888          .`8888:' `88.       8 8888       \n      8 8888       8 8888          8.`8888.   Y8       8 8888       \n      8 8888       8 8888          `8.`8888.           8 8888       \n      8 8888       8 888888888888   `8.`8888.          8 8888       \n      8 8888       8 8888            `8.`8888.         8 8888       \n      8 8888       8 8888             `8.`8888.        8 8888       \n      8 8888       8 8888         8b   `8.`8888.       8 8888       \n      8 8888       8 8888         `8b.  ;8.`8888       8 8888       \n      8 8888       8 888888888888  `Y8888P ,88P'       8 8888       \n\n\n```\n\n#### 6. Random xlarge\n\nRandomly select from xlarge fonts.\t\n\nKeywords : `rnd-xlarge`, `random-xlarge` & `rand-xlarge`\n\n* Note : New in `Version 2.8`\n\n```pycon\n>>> tprint(\"test\",\"rnd-xlarge\")\n      _____                    _____                    _____                _____          \n     /\\    \\                  /\\    \\                  /\\    \\              /\\    \\         \n    /::\\    \\                /::\\    \\                /::\\    \\            /::\\    \\        \n    \\:::\\    \\              /::::\\    \\              /::::\\    \\           \\:::\\    \\       \n     \\:::\\    \\            /::::::\\    \\            /::::::\\    \\           \\:::\\    \\      \n      \\:::\\    \\          /:::/\\:::\\    \\          /:::/\\:::\\    \\           \\:::\\    \\     \n       \\:::\\    \\        /:::/__\\:::\\    \\        /:::/__\\:::\\    \\           \\:::\\    \\    \n       /::::\\    \\      /::::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\          /::::\\    \\   \n      /::::::\\    \\    /::::::\\   \\:::\\    \\    ___\\:::\\   \\:::\\    \\        /::::::\\    \\  \n     /:::/\\:::\\    \\  /:::/\\:::\\   \\:::\\    \\  /\\   \\:::\\   \\:::\\    \\      /:::/\\:::\\    \\ \n    /:::/  \\:::\\____\\/:::/__\\:::\\   \\:::\\____\\/::\\   \\:::\\   \\:::\\____\\    /:::/  \\:::\\____\\\n   /:::/    \\::/    /\\:::\\   \\:::\\   \\::/    /\\:::\\   \\:::\\   \\::/    /   /:::/    \\::/    /\n  /:::/    / \\/____/  \\:::\\   \\:::\\   \\/____/  \\:::\\   \\:::\\   \\/____/   /:::/    / \\/____/ \n /:::/    /            \\:::\\   \\:::\\    \\       \\:::\\   \\:::\\    \\      /:::/    /          \n/:::/    /              \\:::\\   \\:::\\____\\       \\:::\\   \\:::\\____\\    /:::/    /           \n\\::/    /                \\:::\\   \\::/    /        \\:::\\  /:::/    /    \\::/    /            \n \\/____/                  \\:::\\   \\/____/          \\:::\\/:::/    /      \\/____/             \n                           \\:::\\    \\               \\::::::/    /                           \n                            \\:::\\____\\               \\::::/    /                            \n                             \\::/    /                \\::/    /                             \n                              \\/____/                  \\/____/                              \n                                                                                            \n```\n\t\n#### 7. Wizard\t\n\nThis mode consider length of input text to select font\n\n\u2611\ufe0f Support of 95 ASCII characters guaranteed\n\nKeywords : `wizard`, `wiz` & `magic`\n\n* Note : New in `Version 2.9`\n\n```pycon\n>>> tprint(\"1\",\"wizard\")\n    88 \n  ,d88 \n888888 \n    88 \n    88 \n    88 \n    88 \n    88 \n    88 \n    88 \n       \n            \n\n>>> tprint(\"1\"*5,\"wizard\")\nd88  d88  d88  d88  d88  \n 88   88   88   88   88  \n 88   88   88   88   88  \n 88   88   88   88   88  \n 88   88   88   88   88  \nd88P d88P d88P d88P d88P \n                         \n                         \n\n>>> tprint(\"1\"*15,\"wizard\")\n                                             \n                                             \n #  #  #  #  #  #  #  #  #  #  #  #  #  #  # \n## ## ## ## ## ## ## ## ## ## ## ## ## ## ## \n #  #  #  #  #  #  #  #  #  #  #  #  #  #  # \n #  #  #  #  #  #  #  #  #  #  #  #  #  #  # \n #  #  #  #  #  #  #  #  #  #  #  #  #  #  # \n## ## ## ## ## ## ## ## ## ## ## ## ## ## ## \n                                             \n                                             \n```\n\t\n\n\n#### 8. Random Non-ASCII\n\nRandomly select from Non-ASCII fonts.\t\n\nKeywords : `random-na`, `rand-na` & `rnd-na`\n\n* Note : New in `Version 3.4`\n\n```pycon\n>>> tprint(\"test\",\"random-na\")\n\u20ae\u0246\u20b4\u20ae\n>>> tprint(\"test\",\"random-na\")\n\u0287s\u01dd\u0287\n\n```\n\n#### 9. Mix Non-ASCII\n\nRandomly mix Non-ASCII fonts.\n\nKeywords : `mix`\n\n* Note : New in `Version 3.7`\n\n```pycon\n>>> tprint(\"test\",\"mix\")\n\u2020\u0190\u0455\u2020\n>>> tprint(\"test\",\"mix\")\nt\u13cb\u0455t\n>>> tprint(\"test\",\"mix\")\n\ua4c4\u0454\u0e23\ua4c4\n```\n\n\u26a0\ufe0f Non-ASCII fonts are only available in `Font name`, `Random Non-ASCII` and `Mix` modes\t\n\n\n### Typo-tolerance\t\t\t\n<a href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance</a> used in this project. (`Version` >0.9)\n\n```pycon\n>>> aprint(\"happi\")  # correct --> aprint(\"happy\"), error < |artname|/2\n \u06dc\\(\ufb41\u06ba\ufb41\u064e` )/\u06dc \n>>> Art=art(\"birds2222222\",number=1) # correct --> Art=art(\"birds\",number=1), error >= |artname|/2\nTraceback (most recent call last):\n\t...\nart.art.artError: Invalid art name.\n>>> aprint(\"happi231\")  # correct --> aprint(\"happy\"), error < |artname|/2\n\u23a6\u02da\u25e1\u02da\u23a3 \n>>> aprint(\"happi2312344\") # correct --> aprint(\"happy\"), error >= |artname|/2\nTraceback (most recent call last):\n\t...\nart.art.artError: Invalid art name.\n>>> Art=text2art(\"test\",font=\"black\") # correct --> Art=text2art(\"test\",font=\"block\")\n>>> print(Art)\n\n .----------------.  .----------------.  .----------------.  .----------------.\n| .--------------. || .--------------. || .--------------. || .--------------. |\n| |  _________   | || |  _________   | || |    _______   | || |  _________   | |\n| | |  _   _  |  | || | |_   ___  |  | || |   /  ___  |  | || | |  _   _  |  | |\n| | |_/ | | \\_|  | || |   | |_  \\_|  | || |  |  (__ \\_|  | || | |_/ | | \\_|  | |\n| |     | |      | || |   |  _|  _   | || |   '.___`-.   | || |     | |      | |\n| |    _| |_     | || |  _| |___/ |  | || |  |`\\____) |  | || |    _| |_     | |\n| |   |_____|    | || | |_________|  | || |  |_______.'  | || |   |_____|    | |\n| |              | || |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'  '----------------'\n\n>>> tprint(\"test\",font=\"cybermedum\")   # correct --> tprint(\"test\",font=\"cybermedium\")\n___ ____ ____ ___ \n |  |___ [__   |  \n |  |___ ___]  |  \n                  \n   \n```\n\n### Set defaults\t\t\t\n`set_default` function is added in `Version 2.2` in order to change default values.\n\n```pycon\n>>> help(set_default)\nHelp on function set_default in module art.art:\n\nset_default(font='standard', chr_ignore=True, filename='art', print_status=True, overwrite=False, decoration=None, sep='\\n')\n    Change text2art, tprint and tsave default values.\n    \n    :param font: input font\n    :type font:str\n    :param chr_ignore: ignore not supported character\n    :type chr_ignore:bool\n    :param filename: output file name (only tsave)\n    :type filename:str\n    :param print_status : save message print flag (only tsave)\n    :type print_status:bool\n    :param overwrite : overwrite the saved file if true (only tsave)\n    :type overwrite:bool\n    :param decoration: input decoration\n    :type decoration:str\n    :param sep: line separator char\n    :type sep: str\n    :return: None\n\n>>> tprint(\"test\")\n _               _   \n| |_   ___  ___ | |_ \n| __| / _ \\/ __|| __|\n| |_ |  __/\\__ \\| |_ \n \\__| \\___||___/ \\__|\n                     \n\n>>> set_default(font=\"italic\")\n>>> tprint(\"test\")\n             \n_/  _   _ _/ \n/  (- _)  /  \n             \n\n```\n* Note : Functions error response updated in `Version 0.8`\n\n\t<table>\n\t<tr>\n\t\t<td align=\"center\">Function</td>\n\t\t<td align=\"center\">Normal Output</td>\n\t\t<td align=\"center\">Error</td>\n\t</tr>\n    <tr>\n\t\t<td align=\"center\">decor</td>\n\t\t<td align=\"center\">str</td>\n\t\t<td align=\"center\">raise artError</td>\n\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">art</td>\n\t\t<td align=\"center\">str</td>\n\t\t<td align=\"center\">raise artError</td>\n\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">aprint</td>\n\t\t<td align=\"center\">None</td>\n\t\t<td align=\"center\">raise artError</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">tprint</td>\n\t\t<td align=\"center\">None</td>\n\t\t<td align=\"center\">raise artError</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">tsave</td>\n\t\t<td align=\"center\">{\"Status\":bool,\"Message\":str}</td>\n\t\t<td align=\"center\">{\"Status\":bool,\"Message\":str}</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">text2art</td>\n\t\t<td align=\"center\">str</td>\n\t\t<td align=\"center\">raise artError</td>\n\t</tr>\t\n\t<tr>\n\t\t<td align=\"center\">set_default</td>\n\t\t<td align=\"center\">None</td>\n\t\t<td align=\"center\">raise artError</td>\n\t</tr>\t\n\t</table> \n\n### Testing\n- Only ASCII fonts and arts :\n```\npython -m art test\n```\n\n- All fonts, arts and decorations :\n```\npython -m art test2\n```\n\n### CLI\t\t\t\n- List of arts :  `python -m art list` or `python -m art arts`\n- List of fonts : `python -m art fonts`\n- Text : `python -m art text yourtext fontname(optional)`\n- Art : `python -m art shape art_name` or `python -m art art art_name`\n- Save :  `python -m art save yourtext fontname(optional)`\n- All  :  `python -m art all yourtext`\n\n### Telegram bot\t\t\t\n\nJust send your text to one of these bots. \ud83d\udc47\ud83d\udc47\ud83d\udc47\ud83d\udc47\t\t\n\n<a href=\"https://t.me/artlib_bot\" target=\"__blank\"><img src=\"https://img.shields.io/badge/Telegram-Bot1-red.svg\"></a>\t\t\t\n\n<a href=\"https://t.me/textart_robot\" target=\"__blank\"><img src=\"https://img.shields.io/badge/Telegram-Bot2-blue.svg\"></a>\n\n\n### Try ART in your browser\n\n1. ART can be used online in interactive Jupyter Notebooks via the Binder service! Try it out now! :\t\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/sepandhaghighi/art/master)\n\n* Open `FontList.ipynb`, `ArtList.ipynb` and `DecorList.ipynb`\n* Edit and execute each part of the notes, step by step from the top panel by run button\n\n2. ART also can be used online in [ascii-generator.site](https://ascii-generator.site/), a Django website by [hermanTenuki](https://github.com/hermanTenuki)\t\n\n### Screen record\t\t\n\n\n<div align=\"center\">\n<a href=\"https://asciinema.org/a/186368\" target=\"_blank\"><img src=\"https://asciinema.org/a/186368.png\" /></a>\n<p>Screen Record</p>\n</div>\n\n* View full font list ([Link1](https://github.com/sepandhaghighi/art/blob/master/FontList.ipynb \"Full Font List\"),[Link2](http://art.shaghighi.ir/FontList.html \"Full Font List\"))\t\t\t\t\t\n* View full art list ([Link1](https://github.com/sepandhaghighi/art/blob/master/ArtList.ipynb \"Full Art List\"),[Link2](http://art.shaghighi.ir/ArtList.html \"Full Art List\"))\n* View full decoration list ([Link1](https://github.com/sepandhaghighi/art/blob/master/DecorList.ipynb \"Full Decoration List\"),[Link2](http://art.shaghighi.ir/DecorList.html \"Full Decoration List\"))\n\n## Issues & bug reports\t\t\t\n\n1. Fill an issue and describe it. We'll check it ASAP!\n    - Please complete the issue template\n2. Discord : [https://discord.com/invite/FAAyq3QJqP](https://discord.com/invite/FAAyq3QJqP)\n3. Website : [https://www.4r7.ir](https://www.4r7.ir)\n4. Email : [info@4r7.ir](mailto:info@4r7.ir \"info@4r7.ir\")\n\n## Dependencies\n\n<table>\n\t<tr> \n\t\t<td align=\"center\">master</td>\t\n\t\t<td align=\"center\">dev</td>\t\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\"><a href=\"https://requires.io/github/sepandhaghighi/art/requirements/?branch=master\"><img src=\"https://requires.io/github/sepandhaghighi/art/requirements.svg?branch=master\" alt=\"Requirements Status\" /></a></td>\n\t\t<td align=\"center\"><a href=\"https://requires.io/github/sepandhaghighi/art/requirements/?branch=dev\"><img src=\"https://requires.io/github/sepandhaghighi/art/requirements.svg?branch=dev\" alt=\"Requirements Status\" /></a></td>\n\t</tr>\n</table>\n\n## Reference    \n\n1. [FIGlet](http://www.figlet.org/)\n2. [1 Line Art](http://1lineart.kulaone.com/#/)\n3. [Text to ASCII](http://patorjk.com/software/taag/#p=display&f=Blocks&t=ART)\n4. [ASCII Generator](http://www.network-science.de/ascii/)\n5. [Asky](https://asky.io/)\n6. [Flipyourtext](https://www.flipyourtext.com/)\n7. [YayText](https://yaytext.com)\n8. [Coolletters](http://www.coolletters.net/)\n9. [Instagram Fonts](https://igfonts.io/)\n10. [Cool Symbol](https://coolsymbol.com/)\n11. [ASCII Moji](http://asciimoji.com/)\n12. [SMILEY COOL](https://smiley.cool/)\n13. [SPREZZ](https://www.sprezzkeyboard.com/)\n14. [Textart4u](http://textart4u.blogspot.com/2013/03/one-line-ascii-text-art.html?m=1)\n15. [Chat4o](https://en.chat4o.com/ascii/)\n16. [Findwebapp](http://www.findwebapp.com/ascii-art-one-liner/)\n17. [Hubpages](https://hubpages.com/technology/one-line-ascii-art-for-twitter)\n18. [ASCII-ART](http://www.ascii-art.de/ascii/mno/one_line.txt)\n19. [Messletters](https://www.messletters.com/en/)\n20. [Webestools](http://www.webestools.com/)\n21. [ASCII-emoji](https://github.com/dysfunc/ascii-emoji)\n22. [Instagram Fonts2](https://www.instagramfonts.com/)\n23. [Emotiworld](http://en.emotiworld.com/)\n24. [Fancy Text Pro](https://www.fancytextpro.com/)\n25. [Playing Cards in Unicode](https://en.m.wikipedia.org/wiki/Playing_cards_in_Unicode)\n26. [Text Generator](https://coolfonts.text-generator.org/)\n27. [GOGOTEXT](https://instafontsgen.codesdetail.com)\n28. [Fsymbols](https://fsymbols.com/)\n29. [Font Copy and Paste](https://www.fontcopypaste.com/)\n\n\n* Logo designed by [Arta Khanalizadeh](https://www.linkedin.com/in/artakhanalizadeh)\t\n\n## Show your support\n\t\t\t\t\t\t\t\t\n<h3>Star this repo</h3>\t\t\t\t\t\n\nGive a \u2b50\ufe0f if this project helped you!\n\n<h3>Donate to our project</h3>\t\n\nIf you do like our project and we hope that you do, can you please support us? Our project is not and is never going to be working for profit. We need the money just so we can continue doing what we do ;-) .\t\t\t\n\n<h4>Bitcoin</h4>\n1KtNLEEeUbTEK9PdN6Ya3ZAKXaqoKUuxCy\n<h4>Ethereum</h4>\n0xcD4Db18B6664A9662123D4307B074aE968535388\n<h4>Litecoin</h4>\nLdnz5gMcEeV8BAdsyf8FstWDC6uyYR6pgZ\n<h4>Doge</h4>\nDDUnKpFQbBqLpFVZ9DfuVysBdr249HxVDh\n<h4>Tron</h4>\nTCZxzPZLcJHr2qR3uPUB1tXB6L3FDSSAx7\n<h4>Ripple</h4>\nrN7ZuRG7HDGHR5nof8nu5LrsbmSB61V1qq\n<h4>Binance Coin</h4>\nbnb1zglwcf0ac3d0s2f6ck5kgwvcru4tlctt4p5qef\n<h4>Tether</h4>\n0xcD4Db18B6664A9662123D4307B074aE968535388\n<h4>Dash</h4>\nXd3Yn2qZJ7VE8nbKw2fS98aLxR5M6WUU3s\n<h4>Stellar</h4>\t\t\nGALPOLPISRHIYHLQER2TLJRGUSZH52RYDK6C3HIU4PSMNAV65Q36EGNL\n<h4>Zilliqa</h4>\nzil1knmz8zj88cf0exr2ry7nav9elehxfcgqu3c5e5\n<h4>Coffeete</h4>\n<a href=\"http://www.coffeete.ir/opensource\">\n<img src=\"http://www.coffeete.ir/images/buttons/lemonchiffon.png\" style=\"width:260px;\" />\n</a>\n<h4>Gitcoin</h4>\n<a href=\"https://gitcoin.co/grants/3408/ascii-art-library-for-python\">\n<img src=\"https://github.com/sepandhaghighi/art/raw/master/otherfile/gitcoin_btn.png\" style=\"width:260px;\" />\n</a>\n\n<h3>Become a sponsor to ART</h3>\n\n* Contact us at the email first\t\n\n<h4>Corporate sponsor</h4>\n\n- **$250** a month\n- Your company's logo can be featured on **Readme**\n- Intended for small companies\n\n\n<h4>Mega corporate sponsor</h4>\n\n- **$500** a month\n- Your company's logo can be featured on **Readme** and **Website**\n- Intended for medium-sized companies",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sepandhaghighi/art",
            "keywords": "ascii art python3 python text font non-ascii printing",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ascii2art",
            "package_url": "https://pypi.org/project/ascii2art/",
            "platform": null,
            "project_url": "https://pypi.org/project/ascii2art/",
            "project_urls": {
                "Discord": "https://discord.com/invite/FAAyq3QJqP",
                "Homepage": "https://github.com/sepandhaghighi/art",
                "Source": "https://github.com/sepandhaghighi/art",
                "Tracker": "https://github.com/sepandhaghighi/art/issues",
                "Webpage": "https://www.4r7.ir"
            },
            "release_url": "https://pypi.org/project/ascii2art/4.1/",
            "requires_dist": null,
            "requires_python": ">=2.7",
            "summary": "ASCII Art Library For Python",
            "version": "4.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15762087,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "04d926486669e648c86c7125a9f0aa57",
                    "sha256": "3402258520b693e9dab8d4e627c057bc4bb76c28ebe448f040e0c5dc5531e83f"
                },
                "downloads": -1,
                "filename": "ascii2art-4.1.tar.gz",
                "has_sig": false,
                "md5_digest": "04d926486669e648c86c7125a9f0aa57",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=2.7",
                "size": 634843,
                "upload_time": "2022-11-14T13:18:43",
                "upload_time_iso_8601": "2022-11-14T13:18:43.700676Z",
                "url": "https://files.pythonhosted.org/packages/36/16/4822ef534f24c63703dc4b0af9bacd0ae1926081c5bc01d32294fc0e50e4/ascii2art-4.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}