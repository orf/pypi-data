{
    "0.1.0": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.0/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "code generator for binary message passing between languages",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7d5be39945ba2c635c586013a98b977c",
                    "sha256": "33245362c59012d982bef3e8964dd3f586a00337563eb7ca081729f3cba67909"
                },
                "downloads": -1,
                "filename": "Beschi-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7d5be39945ba2c635c586013a98b977c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21139,
                "upload_time": "2022-02-22T10:40:45",
                "upload_time_iso_8601": "2022-02-22T10:40:45.774884Z",
                "url": "https://files.pythonhosted.org/packages/c8/1a/117cb3819a959034d56e88f58c0e58728a65898312518621fd61ab581090/Beschi-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "50772bdf8fde96cd9d362c599cd8b622",
                    "sha256": "5ae231370d0f3a0fc5a3a79b5d9e0aaa5bfc3d3620653de9319e8616887c11c0"
                },
                "downloads": -1,
                "filename": "Beschi-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "50772bdf8fde96cd9d362c599cd8b622",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 18209,
                "upload_time": "2022-02-22T10:40:48",
                "upload_time_iso_8601": "2022-02-22T10:40:48.807884Z",
                "url": "https://files.pythonhosted.org/packages/bb/6b/559c3a8871b191d088644db918ced32862f5d3c041b41c1b3ae321382ddd/Beschi-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.1/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C#, Go, and TypeScript",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d4ec6f9e91c8c3662094242f61238b99",
                    "sha256": "4bd9b4ba90e07e377c02e3b08ea7d71778f83de5c2f907f4f24b050d1ff2c637"
                },
                "downloads": -1,
                "filename": "beschi-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d4ec6f9e91c8c3662094242f61238b99",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21221,
                "upload_time": "2022-02-22T10:49:40",
                "upload_time_iso_8601": "2022-02-22T10:49:40.608449Z",
                "url": "https://files.pythonhosted.org/packages/54/7e/2a72d7863ebd4eb77b8e1d897784f9fe1afd6b0e58f6b88ff93ce1cc4c61/beschi-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "421de64fc914fc88415ed1e15d38ee50",
                    "sha256": "e936a4bc30ccebb6c80a7d38fd1d3f483bb95431d44e8b66c977eb5ef943f217"
                },
                "downloads": -1,
                "filename": "beschi-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "421de64fc914fc88415ed1e15d38ee50",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 18247,
                "upload_time": "2022-02-22T10:49:42",
                "upload_time_iso_8601": "2022-02-22T10:49:42.440904Z",
                "url": "https://files.pythonhosted.org/packages/30/0b/fe4765cb71de4e219188c4b25502279ffce46c444ddc3632b8151195a654/beschi-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.10": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Software Development :: Code Generators"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.10/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'publish'",
                "twine ; extra == 'publish'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C, C#, Go, Rust, Swift, and TypeScript",
            "version": "0.1.10",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2a98071b81bb3a0381bca00cd91c7d34",
                    "sha256": "e40aa7fa1a4a86b77ac76157ac7fcb23daadac9b876cd6d4345c29dd855de70e"
                },
                "downloads": -1,
                "filename": "beschi-0.1.10-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2a98071b81bb3a0381bca00cd91c7d34",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 34582,
                "upload_time": "2022-03-06T14:08:19",
                "upload_time_iso_8601": "2022-03-06T14:08:19.147730Z",
                "url": "https://files.pythonhosted.org/packages/51/58/1d2f2c324335db580a4690607af5d0867c3c5541bc9d0dc5172cff9f42d1/beschi-0.1.10-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4c7c2cf879d6eada7cdb1e79febc9d4a",
                    "sha256": "97e2a5ed0373c548839a566444649f63702f00d04d5979a15baa49b0f83e7509"
                },
                "downloads": -1,
                "filename": "beschi-0.1.10.tar.gz",
                "has_sig": false,
                "md5_digest": "4c7c2cf879d6eada7cdb1e79febc9d4a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 28915,
                "upload_time": "2022-03-06T14:08:20",
                "upload_time_iso_8601": "2022-03-06T14:08:20.704028Z",
                "url": "https://files.pythonhosted.org/packages/96/4b/3e818acddeaab0a4c873f1e6d11328b948b4c091617b0dfdadb1ce945e4a/beschi-0.1.10.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.2/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C#, Go, and TypeScript",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3614f49096a9cbc35d4f39dd9d419caf",
                    "sha256": "000b36530383433bc23930e3341cf5e5f2518cfc508fb4947e39eb74c0e3a1fa"
                },
                "downloads": -1,
                "filename": "beschi-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3614f49096a9cbc35d4f39dd9d419caf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21343,
                "upload_time": "2022-02-22T12:10:48",
                "upload_time_iso_8601": "2022-02-22T12:10:48.255725Z",
                "url": "https://files.pythonhosted.org/packages/26/1a/6ae81c43cceff093b228e0ca61e9486d8448b542e357b95ae4a1434eab4d/beschi-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8ee5af4f0728367727a397a3ef48324e",
                    "sha256": "c2bbd5edcc798b3bc9c9f389b8f1e4ceb9367a289f13f1acc4297e0b302d99cd"
                },
                "downloads": -1,
                "filename": "beschi-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "8ee5af4f0728367727a397a3ef48324e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24701,
                "upload_time": "2022-02-22T12:10:50",
                "upload_time_iso_8601": "2022-02-22T12:10:50.057840Z",
                "url": "https://files.pythonhosted.org/packages/61/61/33588d884904815179af9dcb2ee4f0c6803e5b79c3fe4326fdc86236c919/beschi-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Software Development :: Code Generators"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.3/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C#, Go, and TypeScript",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "207cc00b22f91da79ca43aac309d260a",
                    "sha256": "fd16a43493bbc02e86b667e087c04b12b3fec0391eff5b5b859652dc639a766b"
                },
                "downloads": -1,
                "filename": "beschi-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "207cc00b22f91da79ca43aac309d260a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 21475,
                "upload_time": "2022-02-22T12:16:46",
                "upload_time_iso_8601": "2022-02-22T12:16:46.014122Z",
                "url": "https://files.pythonhosted.org/packages/95/0a/3c8963336336eb3c425b74a30e8a70526725ee9759be877a49b093517b5f/beschi-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "153098542eb81f476660ba9ef015953a",
                    "sha256": "3c4332fe791575a6b8bc5ea50652d627516972ae7644570216f30ad024a52ebc"
                },
                "downloads": -1,
                "filename": "beschi-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "153098542eb81f476660ba9ef015953a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24863,
                "upload_time": "2022-02-22T12:16:47",
                "upload_time_iso_8601": "2022-02-22T12:16:47.750225Z",
                "url": "https://files.pythonhosted.org/packages/0f/d0/9671536e9c033e249d53af613670d4a75ce27e17b9e37d67161fe38fcdab/beschi-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.5": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Software Development :: Code Generators"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.5/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C#, Go, Swift, and TypeScript",
            "version": "0.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "af233bc9834fd18f72f46431ee7af18f",
                    "sha256": "436d975672e4e58e0175b41a900c444b6517e834222358a5849c40cb510309a8"
                },
                "downloads": -1,
                "filename": "beschi-0.1.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "af233bc9834fd18f72f46431ee7af18f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 30813,
                "upload_time": "2022-02-26T07:58:48",
                "upload_time_iso_8601": "2022-02-26T07:58:48.513684Z",
                "url": "https://files.pythonhosted.org/packages/0e/49/647adfa95a349fff2a6c380105df6edb4b1b5e67eeae20243799ec8d6308/beschi-0.1.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "908e452ed732f8e0361751c2865d0550",
                    "sha256": "38fb054ce98662ac07c78cd613423b88ce05809a43daef49393641460fdfc422"
                },
                "downloads": -1,
                "filename": "beschi-0.1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "908e452ed732f8e0361751c2865d0550",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 33787,
                "upload_time": "2022-02-26T07:58:50",
                "upload_time_iso_8601": "2022-02-26T07:58:50.217177Z",
                "url": "https://files.pythonhosted.org/packages/3f/07/717eeea72d4ccd220dc102f8af530ebcee91c3a422591a6fe8530d80685c/beschi-0.1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.6": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Software Development :: Code Generators"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.6/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C#, Go, Swift, and TypeScript",
            "version": "0.1.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dfb50e3165cbe894ad9dd836e1af499f",
                    "sha256": "4d15e5a1f6e3d7340b5fad6a831dff480291fa2567bd98f00840324699c49cbe"
                },
                "downloads": -1,
                "filename": "beschi-0.1.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dfb50e3165cbe894ad9dd836e1af499f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 34234,
                "upload_time": "2022-02-26T08:10:39",
                "upload_time_iso_8601": "2022-02-26T08:10:39.188740Z",
                "url": "https://files.pythonhosted.org/packages/cf/6d/23a225788bb1320566a7a093a159a84bc81fed43565e43f89d04ffdae631/beschi-0.1.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c90183bef234050978ef067a0ce846a6",
                    "sha256": "5ec996619181ef87b6e00347d607dd4f5472dcacb7c163752c247f45744762ab"
                },
                "downloads": -1,
                "filename": "beschi-0.1.6.tar.gz",
                "has_sig": false,
                "md5_digest": "c90183bef234050978ef067a0ce846a6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 36284,
                "upload_time": "2022-02-26T08:10:40",
                "upload_time_iso_8601": "2022-02-26T08:10:40.726298Z",
                "url": "https://files.pythonhosted.org/packages/25/47/187004533156feeb399dd1ce426ca97425501ed1103c8035dbcbb09423e3/beschi-0.1.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.8": {
        "info": {
            "author": "Shane Liesegang",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Topic :: Software Development :: Code Generators"
            ],
            "description": "# Beschi\n\n[![Verification Tests](https://github.com/sjml/beschi/actions/workflows/ci.yml/badge.svg)](https://github.com/sjml/beschi/actions/workflows/ci.yml)\n\nThis is a custom bit-packing and unpacking code generator for C#, Go, C, Rust, Swift, and TypeScript. You feed it a data description and it generates source files for writing/reading buffers of that data, along the lines of [FlatBuffers](https://google.github.io/flatbuffers/) or [Cap'n Proto](https://capnproto.org), but with much less functionality for much simpler use cases. It was initially written for a larger project but I extracted it into its own thing. If all you need is a simple way to pack a data structure into a compact, portable binary form, this might be useful for you.\n\nThe original project started off using FlatBuffers, which are pretty great for a lot of use cases and I definitely recommend you look at them if you need the features they offer. I faced two issues, though: \n1. The code for getting data in and out of FlatBuffers is super awkward.\n2. The actual binary data created by flatbuffers is relatively bulky. \n\nBoth of these problems stem from the fact that FlatBuffers provide a lot of interesting functionality like being able to update the data schema, partially deserialize data to pluck out a single element, etc. But I wasn't using any of that functionality -- since my messages only exist in flight and are never persisted, client and server can stay in lockstep, and the buffers can be more compact. Partial deserialization was not a benefit for me, since most of my messages were very small and I basically *always* need *all* the data. I didn't want an opaque buffer that I could munge data in and out of; I just wanted native language structures that I could package for transmission. So for this particular use case, I can lose the overhead, get smaller buffers, and have some easier-to-write client code.\n\nI'll be honest, too: it **was** kind of fun to write a code generator. \ud83d\ude1d \n\n\n## How to use\n\nYou can install from [PyPI](https://pypi.org/project/beschi/): \n\n```\npip install beschi\n```\n\nIt installs an executable that you can run directly, so long as however you invoked `pip` put it on your path. (This will work in an activated virtual environment, for instance.)\n\nExample:\n```\nbeschi --lang csharp --protocol ./messages.toml\n```\n\nBy default, it prints to standard output, but you can also write to a file with an output flag like `--output ./Messages.cs`.\n\nFrom the input protocol file (detailed below), you get a code file that you can integrate to a project allowing you encode messages as compact and portable binary buffers. For example, I used it in a project where a Unity game, a Go server, and a web client were all passing data back and forth to each other. When the message format needed to change, it was just a matter of tweaking the protocol and regenerating the language files, instead of having to do the painstaking and error-prone manual bit-packing and unpacking across multiple languages. \n\n\n## Protocols\n\nThe protocol files are written in [TOML](https://toml.io). There's [a fuller example in the test suite](https://github.com/sjml/beschi/tree/main/test/_protocols/example.toml), but here's an annotated sample.\n\n```toml\n# the \"meta\" section only has the namespace\n#  for now, but may have more later if needed\n#\n# the namespace is optional; not all languages\n#  do something useful with it, but it's handy\n#  to have to help avoid clashes\n[meta]\nnamespace = \"AppMessages\"\n\n# messages are defined by a name and their data\n#  members. this will become a class or struct in\n#  the target languages with these pieces of data\n#  as accessible members.\n[[messages]]\n_name = \"Vector3Message\"\nx = \"float\"\ny = \"float\"\nz = \"float\"\n\n# there are a variety of different data member\n#  types that can be defined\n[[messages]]\n_name = \"NewCharacterMessage\"\nid = \"uint64\"\ncharacterName = \"string\"\nstrength = \"uint16\"\nintelligence = \"uint16\"\ndexterity = \"uint16\"\ngoldInWallet = \"uint32\"\nnicknames = \"[string]\" # the brackets indicate a list/array\n\n# you can also define structs, collections of data\n#  that go together, but are not themselves a message\n[[structs]]\n_name = \"Color\"\nred = \"float\"\ngreen = \"float\"\nblue = \"float\"\nalpha = \"float\"\n\n# structs can contain other structs, and even lists of them\n[[structs]]\n_name = \"Spectrum\"\ndefaultColor = \"Color\"\ncolors = \"[Color]\"\n\n# structs can then be used in messages\n[[messages]]\n_name = \"CharacterJoinedTeam\"\ncharacterID = \"uint64\"\nteamName = \"string\"\nteamColors = \"[Color]\"\n```\n\n## Data Members\n\nThese are the base types from which you can build up whatever structures and messages you need to, along with what they correspond to in the various languages. \n\n| Protocol Type | C#       | Go        | C          | Rust     | Swift     | TypeScript |\n|---------------|----------|-----------|------------|----------|-----------|------------|\n| `byte`        | `byte`   | `byte`    | `uint8_t`  | `u8`     | `UInt8`   | `number`   |\n| `bool`        | `bool`   | `bool`    | `bool`     | `bool`   | `Bool`    | `boolean`  |\n| `int16`       | `short`  | `int16`   | `uint16_t` | `i16`    | `Int16`   | `number`   |\n| `uint16`      | `ushort` | `uint16`  | `int16_t`  | `u16`    | `UInt16`  | `number`   |\n| `int32`       | `int`    | `int32`   | `uint32_t` | `i32`    | `Int32`   | `number`   |\n| `uint32`      | `uint`   | `uint32`  | `int32_t`  | `u32`    | `UInt32`  | `number`   |\n| `int64`       | `long`   | `int64`   | `uint64_t` | `i64`    | `Int64`   | `bigint`   |\n| `uint64`      | `ulong`  | `uint64`  | `int64_t`  | `u64`    | `UInt64`  | `bigint`   |\n| `float`       | `float`  | `float32` | `float`    | `f32`    | `Float32` | `number`   |\n| `double`      | `double` | `float64` | `double`   | `f64`    | `Float64` | `number`   |\n| `string`      | `string` | `string`  | `char*`    | `String` | `String`  | `string`   |\n\nAll the numbers are stored as little-endian in the buffer, if that matters for you. (C types are using `stdint.h` and `stdbool.h`.)\n\n\n## Usage in code\n\nBeschi does not generate any code to handle writing or reading from disk, pushing data across a network, or anything like that \u2014 it will turn a message into bytes and read that same message back from the bytes, but you are responsible for what you do with them otherwise. \n\nWith the given protocol, though, you could create a message in C# and write it to a file:\n\n```csharp\nvar msg = new AppMessages.Vector3Message();\nmsg.x = 1.0f;\nmsg.y = 4096.1234f;\nmsg.z = -42.56f;\nvar fs = new FileStream(\"./vec3.msg\", FileMode.Create);\nvar bw = new BinaryWriter(fs);\nmsg.WriteBytes(bw, false);\n```\n\nAnd then read it back in TypeScript:\n\n```typescript\nconst data = fs.readFileSync(\"./vec3.msg\");\nconst dv = new DataView(new Uint8Array(data).buffer);\nconst msg = AppMessages.Vector3Message.FromBytes(dv, 0).val;\nif (msg.y == Math.fround(4096.1234)) {\n    console.log(\"Ready to go!\");\n}\n```\n\nOr Go:\n\n```golang\ndat, _ := os.Open(\"./vec3.msg\")\ndefer dat.Close()\nmsg := AppMessages.Vector3MessageFromBytes(dat)\nif msg.X == 1.0 && msg.Y == 4096.1234 && msg.Z < 0.0 {\n\tprint(\"Ready to go!\\n\")\n}\n```\n\nFor the most part, Beschi tries to keep behavior and structures consistent across the languages, but there are a few points of difference [outlined in detail below](#caveats). Notice in the example above, for instance, that in TypeScript you have to make a call to `Math.fround` if you want to do a straight comparison of float values because of how the underlying JavaScript engine treats all numbers as double-width floats. (Doing equality comparisons on floats is usually a bad idea, but in this instance we *want* to check that they are actually bitwise identical.) Similarly, see how the data members are upper-cased in Go to match that language's export conventions, and the byte reading function is part of the namespace because Go doesn't have static functions for data types. The goal is to make working across languages feel as seamless as possible, but there are some differences that we adapt to as much as possible. \n\nThere are more extensive examples in [the test harnesses](https://github.com/sjml/beschi/tree/main/test/_harnesses).\n\n## Message objects\n\nMessages are instantiated with each language's standard construction style. \n\nGo:\n```golang\nvar vec3 AppMessages.Vector3Message\nvec3.x = 1.0\nvec3.y = 2.0\nvec3.z = 3.0\n```\n\nC#: \n```csharp\nvar vec3 = new AppMessages.Vector3Message();\nvec3.x = 1.0f;\nvec3.y = 2.0f;\nvec3.z = 3.0f;\n```\n\nC:\n```c\nAppMessages_Vector3Message vec3 = AppMessages_Vector3Message_default;\nvec3.x = 1.0f;\nvec3.y = 2.0f;\nvec3.z = 3.0f;\n\n// or\nAppMessages_Vector3Message* vec3ptr = malloc(sizeof(AppMessages_Vector3Message));\nvec3ptr->x = 1.0f;\nvec3ptr->y = 2.0f;\nvec3ptr->z = 3.0f;\n```\n\nNote that all data members are initialized to zero values (or empty strings/lists). There's no way, at present, to specify other defaults in a protocol, so that needs to be handled in client code. \n\n(In the function signature pseudocodes below, [...] indicates that specific languages may need additional parameters; these are the bases that indicate broad functionality.)\n\nInstances of the Message base class (interface in Go) defines three methods: \n* `GetMessageType()`: returns an enum value that identifies what specific type of message the object represents\n* `GetSizeInBytes()`: returns the size of memory buffer required to write out the message in its current form. If the message and its data members don't contain strings or lists, this is pre-calculated and constant. Otherwise, though, it has to run some calculations to measure out string length, number of items in a list, etc. \n* `WriteBytes(buffer, tag, [...])`: takes the language's equivalent of a data buffer and a boolean value to indicate whether to tag the written data by writing the identifier (from `GetMessageType()`) in front of it. \n\nEach namespace (or generated file) contains a function for handling a buffer containing multiple messages:\n* `ProcessRawBytes(buffer, [...])`: takes a buffer and returns a list/array of Message objects. The messages in the buffer need to be tagged with their identifiers. Note that if it encounters a stretch of memory that it cannot parse, it will append a nil value and stop processing, returning the set of messages parsed so far. \n\nEach Message class also has a static function in languages that allow it:\n* `FromBytes(buffer, [...])`: returns a message of the class's type, or a null value if it could not be parsed. This is useful if you already know what kind of message you're expecting from a certain buffer and don't need to identify it beforehand. \n\nNote that generated struct objects also have `WriteBytes` and `FromBytes` equivalents, but they need to be used with a little more caution since they throw exceptions (or panic) on errors where Messages will just return a null value if there's a problem.\n\n## Caveats\n\nBeschi is a little bit fast and loose with how it does generation. This allows for simpler generator code (each language writer is around just 400 lines of fairly readable declarative code without layers of templates) and necessitates fewer dependencies (only TOML so far!), but it does mean that there are some situations it can't handle. \n\n### General\n* I make no claims that the produced code is optimal or necessarily even good. It passes a test suite, and I've used it \"in production\" for personal projects; it seems to work pretty well, but I'm not an expert programmer in all the generated languages, so am very open to feedback if there's something that could be improved. \n* It makes efforts to follow the best practices of each language as much as possible, but the generated code probably won't win any awards from the linters. \n* It always produces *valid* code (if it does not, that is a bug), but it may not be formatted to your (or gofmt's) liking. If you have strong opinions on that sort of thing, consider running it through a code formatter program after generation.\n* Makes no attempt to limit variable names other than disallowing whitespace. That means you could name a data member something that is a reserved word in a target language and it would cause compilation problems. If you call a message member \"int\" you won't be happy, so don't do that; stay happy.\n* There are probably some protocols you can define that produce invalid code in the target languages. I'm thinking specifically of some pathological cases of a bunch of nested structs where all data members are called the same thing. So don't do that either. \n* You cannot at present define more than 255 message types in a single namespace. This is because the identifier tag is a single byte. This hasn't proven to be a limitation for me so far, and it could obviously be expanded if needed. \n* Strings and lists use an unsigned 32-bit integer to record their lengths in the buffers. That's enough for more than 4 GB of ASCII text in a string; if you need more, you probably outgrew this system long ago.\n* There is no effort made at checking data integrity or the like. It would not be too hard to add a checksum message or data member and perform that verification in client code, though. \n* There is no partial deserialization, like with FlatBuffers, where you can just snag a specific piece of data out of the buffer. I mostly work with small messages that I always want to fully decode, so this was just added overhead; if that's something you need, consider other options. \n* There is no functionality for versioning messages, so if you update your protocol, messages generated from the older code will not be readable by new code. Beschi messages are not intended to persist beyond the time it takes to shuttle them across a network or memory pipe. Versioning can be accomplished on the client side, but will require manual decoding steps and probably retaining the old generated code.\n\n### Go\n* Usually the identifying enum is accessed by `{namespace}.MessageType.{specific_message_name}Type`, but Go doesn't do enums the way the other languages do, so it's missing the `.MessageType.` in the middle. \n* The generated Go code uses the standard binary readers and writers, which allow for dealing with whole structures in one go. They seem to pack and unpack identically to the more detailed systems that the other languages need, but there might be some edge cases where packing becomes an issue. \n* Go doesn't have static functions, so instead of `AppMessages.Vector3Message.FromBytes()`, you call `AppMessages.Vector3MessageFromBytes()`. (Note the missing `.` before `FromBytes`.)\n* The various `*FromBytes` functions *on structs* also take a pointer to a variable of the appropriate Message type, which will get filled in as it reads. (For messages, you just pass a buffer and it either returns a pointer to the correct type or `nil`.)\n* As mentioned above, generated Go code will have all the data members changed to start with an uppercase letter to match the language's export rules. \n\n### TypeScript\n* Following [current recommendations from the TypeScript team](https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html), it ignores the defined namespace in favor of treating the whole exported code file as a module. You can still get the same syntax by importing like: `import * as AppMessages from './AppMessages';`. \n* The generated TypeScript code uses decorators to provide something similar to static functions. There might be a better way of handling this, and I'm open to suggestion, but for now you have to have `experimentalDecorators` enabled in your TypeScript configuration. \n* 64-bit integers (both signed and unsigned) are implemented with BigInt, which has [pretty broad support at this point](https://caniuse.com/?search=bigint). Your client code may need to handle them differently though -- you can't seamlessly do math with a regular `number` and a `bigint`. Users of other languages are used to these kinds of folds, but JavaScript/TypeScript users may find them new and annoying. :) \n* The generated `WriteBytes()` function for TypeScript takes an additional `offset: number` parameter. Since JavaScript doesn't keep track of a position when writing into a buffer, we have to manually tell it where to start writing. The function also returns a new offset letting you know where it finished writing. \n* Similarly, the TypeScript implementation of `ProcessRawBytes` also takes an offset parameter, and instead of just returning a list of Messages, returns an object: `{ vals: Message[], offset: number }`.\n* `FromBytes` also takes an offset and returns a structure similar to the one from `ProcessRawBytes`: `{ val: SpecificMessageType, offset: number }`\n\n### C#\n* No particular caveats, actually! Perhaps a side effect of C# being the first generator that was made for this system is that its semantics match up pretty well. \n\n### Swift\n* Swift support is kind of experimental. It's difficult to deal with bytes directly in Swift, so there are some tricky/unsafe things going on to, for example allow unaligned reads in the loading. \n* There might be some extraneous memory copies happening, particularly during writing a message to a buffer. It's actually a little hard to track, but maybe it's ok? Anyway, something to keep awareness of. \n* Swift doesn't have namespaces, and the accepted community practice seems to be wrapping everything in an empty enum. For the most part this makes the code look similar to the other languages, but there is some small weirdness like the `Message` base protocol being prepended with `{namespace}_` rather than being actually inside of it. \n\n### Rust\n* Beschi does its best to generate code that feels at home in the target languages, which means the Rust version has some different semantics. \n* Messages are defined as an enum with data, so instead of having to examine and cast them, you use Rust's usual pattern-matching to figure out what kind of message structure you're looking at. \n* The generated code shouldn't generate warnings from the standard compiler... but `clippy` is another matter. Most of the warnings I've seen are things that can be changed by altering the protocol (for example, all members of an enum having the same suffix). So if you want `clippy` to be happy, be ready to either suppress some warnings or tinker with your protocol. \n\n### C\n* Unsurprisingly, C code that uses Beschi messages tends to be much more verbose than code from more modern languages. The syntax is a bit different, too, because of the lack of multiple return values and exceptions in C. \n    - Nearly all functions require you to pass in pointers to your objects, and return a `{namespace}_err_t` that you should check is equal to `{NAMESPACE}_ERR_OK` before you use those objects. \n    - Take a look at the test harnesses to see how it works, in general. \n* As always, C makes it far easier to mess things up if you don't pay close attention. Feed the wrong kind of data to a function and it will *try* to recover gracefully and return an error, but it's also just as likely that you'll crash. \n* There's a lot of variants of C, and the generated code is not tested across all of them. It makes the following assumptions:\n    - A C99 compiler (makes use of variable declaration in loops and designated initializers)\n    - IEEE-754 floating point numbers (a pretty safe assumption, but if you're running on some exotic hardware, this might fail)\n    - Little-endian processor (a less safe assumption, but in general is ok; would like to fix this at some point anyway)\n* The generated code tries to be as straightforward as possible, avoiding macros and unnecessary terseness, so it shouldn't be terribly hard to debug if there's a problem with it.\n* C doesn't support any kind of namespacing other than prefixing functions/structs/variables with a string, so that's what the generated code does. You may want to use a shorter namespace string if you're planning to use C code, so as to save some horizontal space in your code editor. \n* The code generated is an [STB-style](https://github.com/nothings/stb/) single-file header library. If you've never used one before, it's actually pretty simple. You `#include \"MyGeneratedFile.h\"` wherever you need to use the structures and functions, like you normally would with a library. But instead of having a separate file to compile, all the implementation is in the same file, just behind a definition guard. So to actually link the implementation code, in **exactly** one file, `#define {NAMESPACE}_IMPLEMENTATION` **before** you include it. \n* The layout of the structs (mostly) mirrors the way they are declared in the protocol file, which may raise warnings about padding if you compile with warnings all the way up. If memory alignment is important to you, you may want to play with the declaration order. \n    - Exceptions are: \n        - Every message struct has an additional byte (`_mt`) at the start, used to identify it if its in a `void**` array. \n        - Every string and list have an associated `{varname}_len` variable storing their length, right before them in the array. \n        - Lists of strings have a second variable of `{varname}_els_len` recording the lengths of each element in the array. \n        - You probably shouldn't declare members in the protocol that would shadow these variables, but I'm not the boss of you. \n* With the various length variables: they will be set properly when reading a message out of a buffer, but *you are responsible* for making sure they are correct before they go into a buffer. C has no way to track the length of arrays (without introducing another dependency), so it's up to you. \n* The calculated length for strings should *not* include the null terminator. \n* When declaring an instance of a message, it's probably best to use the generated constant `{namespace}_{message_name}_default` to make sure that its members are initialized and that its identifying byte is set correctly. Otherwise things might break. \n* Reading a message from a buffer copies all the data it needs, so the buffer can be discarded safely afterwards. This *does* mean, though, that the reading functions might allocate memory if there are lists or strings in the structure. They will need to be `free`-ed or will leak. \n    - Every message struct has an associated `{namespace}_Destroy{message_type}` function that handles that for you. \n* `ProcessRawBytes` fills an array of pointers to `void` (`void**`), so you need to pass it a *pointer* to such an array, a `void***`. I know, I know. Anyway, once it's filled, you can check each one for its type with `{namespace}_GetMessageType` and then cast as you need to. (There is also a `{namespace}_DestroyMessageList` to help with cleaning that up when you're done.)\n\n\n## Future\nI will admit that part of me wants to make new writers, but since I don't have a separate project motivating that at the moment, it's not likely to get done. If someone loves this system, though, and really wants to see a generator for Rust or Haskell or whatever, let me know. The existing writers should be decent starting points \u2014 they aren't terribly clever (no AST or interesting data structures), just iterating over the protocol and writing out serialization/deserialization code. \n\n\n## Beschi?\n[Constanzo Giuseppe Beschi](https://en.wikipedia.org/wiki/Constanzo_Beschi) was an Italian Jesuit who worked in southern India during the early 18th century. He was noted as a talented linguist, able to tie concepts from multiple languages into a single form. At the same time, he was adept at the Jesuit principle of \"inculturation,\" where foreign concepts are adapted for a new culture and the foreigner attempting the adaptation also respectfully adopts habits and ways of proceeding from the host culture.\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sjml/beschi",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "beschi",
            "package_url": "https://pypi.org/project/beschi/",
            "platform": "",
            "project_url": "https://pypi.org/project/beschi/",
            "project_urls": {
                "Homepage": "https://github.com/sjml/beschi"
            },
            "release_url": "https://pypi.org/project/beschi/0.1.8/",
            "requires_dist": [
                "toml",
                "pytest ; extra == 'dev'",
                "build ; extra == 'publish'",
                "twine ; extra == 'publish'"
            ],
            "requires_python": "",
            "summary": "bit-packing and unpacking code generator for C#, Go, C, Rust, Swift, and TypeScript",
            "version": "0.1.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13093107,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "557e0ff843427a2f1cf712360789b2b5",
                    "sha256": "f994ea1720aff5538d6460e6ad88270f5a85a54f19ca05efe2661c2715fbde2a"
                },
                "downloads": -1,
                "filename": "beschi-0.1.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "557e0ff843427a2f1cf712360789b2b5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 37531,
                "upload_time": "2022-03-05T07:35:45",
                "upload_time_iso_8601": "2022-03-05T07:35:45.177047Z",
                "url": "https://files.pythonhosted.org/packages/8d/20/8b7e1301c637710c1af994426b436c20e966971c165439a9e8c3e8618a36/beschi-0.1.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ba5b8b78c207324ae7ad18c5ab83bd10",
                    "sha256": "7af659ef90991a371a9f305e32398b3c6421b2db5a4ad4fa9596e9d559172248"
                },
                "downloads": -1,
                "filename": "beschi-0.1.8.tar.gz",
                "has_sig": false,
                "md5_digest": "ba5b8b78c207324ae7ad18c5ab83bd10",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 39383,
                "upload_time": "2022-03-05T07:35:46",
                "upload_time_iso_8601": "2022-03-05T07:35:46.984040Z",
                "url": "https://files.pythonhosted.org/packages/e8/9a/640c8d8a2517d2dc3081d654aec051080678588b8f03ef2d9c29b6208ebc/beschi-0.1.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}