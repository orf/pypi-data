{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "gaphor@gmail.com, jw@bargsten.org",
            "bugtrack_url": null,
            "classifiers": [
                "Framework :: Pytest",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# pytest-archon\n\n[![build_and_test](https://github.com/jwbargsten/pytest-archon/actions/workflows/tests.yml/badge.svg)](https://github.com/jwbargsten/pytest-archon/actions/workflows/tests.yml)\n\n`pytest-archon` is a little tool that helps you structure (large) Python projects. This\ntool allows you to define architectural boundaries in your code, also known as\n_forbidden dependencies_.\n\nExplicitly defined architectural boundaries helps you keep your code in shape. It avoids\nthe creation of circular dependencies. New people on the project are made aware of the\nstructure through a simple set of rules, instead of lore.\n\n## Installation\n\nThe simple way:\n\n```sh\npip install git+https://github.com/jwbargsten/pytest-archon.git\n```\n\n## Usage\n\n`pytest-archon` can be used to define architectural boundaries from (unit) tests. Because\nthey're unit tests, they can be closely tied to the actual application.\n\nYou can use `pytest-archon` in tests by simply importing the `archrule` function. Using\nthis function you can construct import tests:\n\n```python\nfrom pytest_archon import archrule\n\n\ndef test_rule_basic():\n    (\n        archrule(\"name\", comment=\"some comment\")\n        .match(\"pytest_archon.col*\")\n        .exclude(\"pytest_archon.colgate\")\n        .should_not_import(\"pytest_archon.import_finder\")\n        .should_import(\"pytest_archon.core*\")\n        .check(\"pytest_archon\")\n    )\n```\n\n- To match the modules and constraints,\n  [fnmatch](https://docs.python.org/3/library/fnmatch.html) syntax is used.\n- `.exclude()` is optional\n- `.should_import()` and `.should_not_import()` can be combined and can occur multiple\n  times.\n- `.check()` needs either a module object or a string\n\n## Examples\n\n```python\ndef test_module_boundaries():\n    # you can do:\n    # from packageX.moduleA import functionX\n    # you cannot do\n    # from packageX.moduleA.internal.functionY\n    # so packageX/moduleA/__init__.py contains the exposed API functions,\n    # and only they can be used\n    modules = [\n        \"moduleA\",\n        \"moduleB\",\n    ]\n    for m in modules:\n        # Match all files,\n        # but exclude files from the module you want to check\n        # (because the module itself needs to import its internals).\n        # Make sure that nobody imports internal functions or objects\n        # from the module we are looking at.\n        # Run the rule check on packageX.\n        # But do only check direct imports, not transitive ones\n        # (including transitive imports would mean that we will violate the rule,\n        # because an import of \"module\" will reach \"module.internal.B\" due to transitivity).\n        (\n            archrule(\n                \"respect module boundaries\",\n                comment=\"respect the module boundary and only import from the (sub-)module API\",\n            )\n            .match(\"*\")\n            .exclude(f\"packageX.{m}.*\")\n            .exclude(f\"packageX.{m}\")\n            .should_not_import(f\"packageX.{m}.*\")\n            .check(\"packageX\", only_direct_imports=True)\n        )\n\n\ndef test_domain():\n    # test if the domain model does not import other submodules\n    # (the domain model should be standing on its own and be used by other modules)\n    (\n        archrule(\"domain\", comment=\"domain does not import any other submodules\")\n        .match(\"packageX.domain.*\")\n        .match(\"packageX.domain\")\n        .should_not_import(\"packageX*\")\n        .may_import(\"packageX.domain.*\")\n        .check(\"packageX\")\n    )\n```\n\n## Similar projects\n\n- [Archunit](https://www.archunit.org/) (Java)\n- [Dependency Cruiser](https://github.com/sverweij/dependency-cruiser) (Javascript)\n- [import-linter](https://github.com/seddonym/import-linter) (Python)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "Apache Software License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pytest-archon",
            "package_url": "https://pypi.org/project/pytest-archon/",
            "platform": null,
            "project_url": "https://pypi.org/project/pytest-archon/",
            "project_urls": {
                "homepage": "https://github.com/jwbargsten/pytest-archon"
            },
            "release_url": "https://pypi.org/project/pytest-archon/0.0.1/",
            "requires_dist": [
                "pytest-check",
                "pytest (>=7.2)",
                "coverage ; extra == 'dev'",
                "flake8 ; extra == 'dev'",
                "black ; extra == 'dev'",
                "mypy ; extra == 'dev'"
            ],
            "requires_python": ">=3.8",
            "summary": "Rule your architecture like a real developer",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15919272,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "110f2425a4f6b5c87c2e7a4109d0fde9",
                    "sha256": "384f2d0c736524e8730501e6a8e4b244e81b2496858602f85ce561c3b43de55f"
                },
                "downloads": -1,
                "filename": "pytest_archon-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "110f2425a4f6b5c87c2e7a4109d0fde9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 46227,
                "upload_time": "2022-11-26T08:12:54",
                "upload_time_iso_8601": "2022-11-26T08:12:54.181491Z",
                "url": "https://files.pythonhosted.org/packages/8e/f1/01670d257375cef3eacf6049a25ac739458e25b407052238e56432c6f4fb/pytest_archon-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "30d1130872309c9b5647b80357733b8a",
                    "sha256": "82d8304af77bf08ca982dccd4dc25c0ce8a2271a77a1f4a66e615f1b6e50dc9e"
                },
                "downloads": -1,
                "filename": "pytest-archon-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "30d1130872309c9b5647b80357733b8a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 44065,
                "upload_time": "2022-11-26T08:12:56",
                "upload_time_iso_8601": "2022-11-26T08:12:56.172533Z",
                "url": "https://files.pythonhosted.org/packages/b1/11/671b2148bcf4efb425a12d80a6d70b5b7981072983223a9f55a587b421ac/pytest-archon-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}