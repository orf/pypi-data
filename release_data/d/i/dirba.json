{
    "0.0.10": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://git2.uriit.local/CIAS/dirba.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "http://git2.uriit.local/CIAS/dirba.git"
            },
            "release_url": "https://pypi.org/project/dirba/0.0.10/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.0.10",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "37c2b40b3f4fac23771e5945ae50cecb",
                    "sha256": "04b325d77096415fb5c1d8221bb58843865e4faf6bdd7bd836b24d3984a8ab35"
                },
                "downloads": -1,
                "filename": "dirba-0.0.10.tar.gz",
                "has_sig": false,
                "md5_digest": "37c2b40b3f4fac23771e5945ae50cecb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 11634,
                "upload_time": "2021-01-26T10:41:12",
                "upload_time_iso_8601": "2021-01-26T10:41:12.353762Z",
                "url": "https://files.pythonhosted.org/packages/7a/e7/a22007c86b39364e1f30b21943e1528506e0aa39687430ff795364195b5d/dirba-0.0.10.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.12": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://git2.uriit.local/CIAS/dirba.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "http://git2.uriit.local/CIAS/dirba.git"
            },
            "release_url": "https://pypi.org/project/dirba/0.0.12/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.0.12",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1204d3e10017343352520db5db7305a8",
                    "sha256": "c2fb64a93cd9371998da3c8a55fcf4959d039b328de79f743b33f8788dc5a197"
                },
                "downloads": -1,
                "filename": "dirba-0.0.12.tar.gz",
                "has_sig": false,
                "md5_digest": "1204d3e10017343352520db5db7305a8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 11604,
                "upload_time": "2021-01-26T10:41:13",
                "upload_time_iso_8601": "2021-01-26T10:41:13.671107Z",
                "url": "https://files.pythonhosted.org/packages/aa/d8/0b3845fb9a4d7adabede823c86f261a9ab6fc3fec57d8e32e9ff898c2e2e/dirba-0.0.12.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://git2.uriit.local/CIAS/dirba.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "http://git2.uriit.local/CIAS/dirba.git"
            },
            "release_url": "https://pypi.org/project/dirba/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6a98511365b5c407cad038cf4e2425cc",
                    "sha256": "b7d22fd2f6770f05de1d70ccf45fcb3f9669d33d075f99a03e8325ff5edc77a6"
                },
                "downloads": -1,
                "filename": "dirba-0.0.2-py3.7.egg",
                "has_sig": false,
                "md5_digest": "6a98511365b5c407cad038cf4e2425cc",
                "packagetype": "bdist_egg",
                "python_version": "3.7",
                "requires_python": ">=3.6",
                "size": 21674,
                "upload_time": "2021-01-26T10:41:14",
                "upload_time_iso_8601": "2021-01-26T10:41:14.876440Z",
                "url": "https://files.pythonhosted.org/packages/83/f4/6075daccf0ee73b5bb4128df9c5bcee57a60bb6f312f2afb899699539ffa/dirba-0.0.2-py3.7.egg",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://git2.uriit.local/CIAS/dirba.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "http://git2.uriit.local/CIAS/dirba.git"
            },
            "release_url": "https://pypi.org/project/dirba/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0b7a0be37a682d1ca9446f107b9dc70b",
                    "sha256": "f37a39b66335b108d17c3e21762081fd6a52989bd40c2194ccca04fb7c99a93a"
                },
                "downloads": -1,
                "filename": "dirba-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "0b7a0be37a682d1ca9446f107b9dc70b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 22349,
                "upload_time": "2021-04-16T12:23:02",
                "upload_time_iso_8601": "2021-04-16T12:23:02.974789Z",
                "url": "https://files.pythonhosted.org/packages/cb/0a/640307c03a321727a267011bf2d80724d526837a794e8b3702a808476759/dirba-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://git2.uriit.local/CIAS/dirba.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "http://git2.uriit.local/CIAS/dirba.git"
            },
            "release_url": "https://pypi.org/project/dirba/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "73bb934e1b6c3bacd0e835683d4709cd",
                    "sha256": "315328e6eb03ff780f38ba4e39be03bbf6a3a7edab5a9ac188332ba176ae4ce5"
                },
                "downloads": -1,
                "filename": "dirba-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "73bb934e1b6c3bacd0e835683d4709cd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 22379,
                "upload_time": "2021-04-19T06:00:56",
                "upload_time_iso_8601": "2021-04-19T06:00:56.326877Z",
                "url": "https://files.pythonhosted.org/packages/d0/b4/f4087f85134744fd1faecbf7b1ed693378e38736c625ba494b60dc3e661c/dirba-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2.dev1": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.uriit.ru/CIAS/dirba",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "https://gitlab.uriit.ru/CIAS/dirba"
            },
            "release_url": "https://pypi.org/project/dirba/0.1.2.dev1/",
            "requires_dist": [
                "requests",
                "fastapi (>=0.63.0)",
                "pydantic (>=1.8.1)",
                "python-multipart (>=0.0.5)",
                "uvicorn (>=0.11.3)",
                "aiomisc (>=12.1.0)",
                "aiohttp (<4.0.0,>3.7.0)",
                "aiohttp-asgi (>=0.3.1)",
                "orjson (>=3.5.1)",
                "sentry-sdk (>=0.19.0)",
                "cachetools (>=4.2.1)",
                "asyncache (>=0.1.1)",
                "prometheus-client (<0.11.0,>=0.10.1)",
                "aiokafka (<0.8.0,>=0.7.0) ; extra == 'kafka'",
                "scikit-learn (<0.24,>=0.21.0.1) ; extra == 'validation'",
                "pandas (>=1.0.1) ; extra == 'validation'"
            ],
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.1.2.dev1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cb6c345bd73c6c1a0669beb3500bd04e",
                    "sha256": "4b214fceed0a5aab15e630b431623d6540ff73a640019481add447e155736df4"
                },
                "downloads": -1,
                "filename": "dirba-0.1.2.dev1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cb6c345bd73c6c1a0669beb3500bd04e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 45054,
                "upload_time": "2021-06-25T06:07:52",
                "upload_time_iso_8601": "2021-06-25T06:07:52.930491Z",
                "url": "https://files.pythonhosted.org/packages/a9/ac/7f9be7bc2ffc96cf64992ee8a6a29fc862c31394c2e33ceaca3cfbe8ac87/dirba-0.1.2.dev1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fece247ce5c781a65abddacfdef77780",
                    "sha256": "2669f2e5f2a03cc7d812d40a452ea615c79ac7e11231cdd02a1a62307d27f2cb"
                },
                "downloads": -1,
                "filename": "dirba-0.1.2.dev1.tar.gz",
                "has_sig": false,
                "md5_digest": "fece247ce5c781a65abddacfdef77780",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 50269,
                "upload_time": "2021-06-25T06:07:56",
                "upload_time_iso_8601": "2021-06-25T06:07:56.418559Z",
                "url": "https://files.pythonhosted.org/packages/3c/42/3f0b4baef4b4daf3c2eea698a8ce764737f6a4ec2fc900be2a522410d04d/dirba-0.1.2.dev1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2.dev2": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.uriit.ru/CIAS/dirba",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "https://gitlab.uriit.ru/CIAS/dirba"
            },
            "release_url": "https://pypi.org/project/dirba/0.1.2.dev2/",
            "requires_dist": [
                "requests",
                "fastapi (>=0.63.0)",
                "pydantic (>=1.8.1)",
                "python-multipart (>=0.0.5)",
                "uvicorn (>=0.11.3)",
                "aiomisc (>=12.1.0)",
                "aiohttp (<4.0.0,>3.7.0)",
                "aiohttp-asgi (>=0.3.1)",
                "orjson (>=3.5.1)",
                "sentry-sdk (>=0.19.0)",
                "cachetools (>=4.2.1)",
                "asyncache (>=0.1.1)",
                "prometheus-client (<0.11.0,>=0.10.1)",
                "aiokafka (<0.8.0,>=0.7.0) ; extra == 'kafka'",
                "scikit-learn (<0.24,>=0.21.0.1) ; extra == 'validation'",
                "pandas (>=1.0.1) ; extra == 'validation'"
            ],
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.1.2.dev2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2cd327a9dafe14d42e549bdf9ae33c39",
                    "sha256": "dd61ed97a391c6887d36055b6561f3d0debeed3639993e2cc7b723b3bcb23b50"
                },
                "downloads": -1,
                "filename": "dirba-0.1.2.dev2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2cd327a9dafe14d42e549bdf9ae33c39",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 45026,
                "upload_time": "2021-06-25T06:21:47",
                "upload_time_iso_8601": "2021-06-25T06:21:47.070046Z",
                "url": "https://files.pythonhosted.org/packages/47/09/d4d732b0fbb4bd7965debc053404789ad774f74641d73359ef3e50dae5ce/dirba-0.1.2.dev2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ab6de649441d917dfdaa7e19b4000119",
                    "sha256": "7e347c6c2af33c14eb255b69c208a38446298f77747585467912a118237b762e"
                },
                "downloads": -1,
                "filename": "dirba-0.1.2.dev2.tar.gz",
                "has_sig": false,
                "md5_digest": "ab6de649441d917dfdaa7e19b4000119",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 50248,
                "upload_time": "2021-06-25T06:21:51",
                "upload_time_iso_8601": "2021-06-25T06:21:51.783430Z",
                "url": "https://files.pythonhosted.org/packages/07/0b/77cbd61c9d6c41566f7252854872eeb3754ca65f923ea7548fb2dfd8dcb0/dirba-0.1.2.dev2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2.dev3": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.uriit.ru/CIAS/dirba",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "https://gitlab.uriit.ru/CIAS/dirba"
            },
            "release_url": "https://pypi.org/project/dirba/0.1.2.dev3/",
            "requires_dist": [
                "requests",
                "fastapi (>=0.63.0)",
                "pydantic (>=1.8.1)",
                "python-multipart (>=0.0.5)",
                "uvicorn (>=0.11.3)",
                "aiomisc (>=12.1.0)",
                "aiohttp (<4.0.0,>3.7.0)",
                "aiohttp-asgi (>=0.3.1)",
                "orjson (>=3.5.1)",
                "sentry-sdk (>=0.19.0)",
                "cachetools (>=4.2.1)",
                "asyncache (>=0.1.1)",
                "prometheus-client (<0.11.0,>=0.10.1)",
                "aiokafka (<0.8.0,>=0.7.0) ; extra == 'kafka'",
                "scikit-learn (<0.24,>=0.21.0.1) ; extra == 'validation'",
                "pandas (>=1.0.1) ; extra == 'validation'"
            ],
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.1.2.dev3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "93c6b757b7aede0f061e9a7a2a8c10a8",
                    "sha256": "37af73e7bac55bccee95965ba6990416f88b6dda8f29d9044f3df36870c15b33"
                },
                "downloads": -1,
                "filename": "dirba-0.1.2.dev3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "93c6b757b7aede0f061e9a7a2a8c10a8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 45053,
                "upload_time": "2021-06-25T06:34:32",
                "upload_time_iso_8601": "2021-06-25T06:34:32.221491Z",
                "url": "https://files.pythonhosted.org/packages/f0/fd/c8d47ab7b99d751f3a1f549160217fa9c337510389dc6664078885215fa7/dirba-0.1.2.dev3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "89a522275dffa6694a4321743b889a2d",
                    "sha256": "79d137bf59c7b6f84342569c68a337f2274df3ae1a6f940e8eb799606c4d9a29"
                },
                "downloads": -1,
                "filename": "dirba-0.1.2.dev3.tar.gz",
                "has_sig": false,
                "md5_digest": "89a522275dffa6694a4321743b889a2d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 50395,
                "upload_time": "2021-06-25T06:34:33",
                "upload_time_iso_8601": "2021-06-25T06:34:33.994798Z",
                "url": "https://files.pythonhosted.org/packages/cc/c6/0017708194fc22c8649d4a58332acd81ebad8ed31b589061e15e55786c49/dirba-0.1.2.dev3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Mansur Izert",
            "author_email": "izertmi@uriit.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Dirba\n\n\u041d\u0430\u0431\u043e\u0440 \u0443\u0442\u0438\u043b\u0438\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 ML \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0438 \u0438\u0445 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u0432 kafka.\n\n## \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n\n1. [\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430](#\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430)\n2. [\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 kafka](#\u0440\u0430\u0431\u043e\u0442\u0430-\u0441-kafka)\n    1. [\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 kafka](#\u0447\u0442\u043e-\u0442\u0430\u043a\u043e\u0435-kafka)\n    2. [Consumer](#consumer)\n        1. [\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f](#\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f)\n    3. [Producer](#producer)\n    4. [Runner \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439](#runner-\u0434\u043b\u044f-\u043c\u043e\u0434\u0435\u043b\u0435\u0439)\n        1. [Model](#model)\n        2. [AbstractBaseKafkaRunner](#abstractBaseKafkaRunner)\n        3. [StrictRunner](#strictRunner)\n        4. [AbstractKafkaRunner](#abstractKafkaRunner)\n3. [\u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API](#\u0437\u0430\u043f\u0443\u0441\u043a-\u043c\u043e\u0434\u0435\u043b\u0435\u0439-\u0447\u0435\u0440\u0435\u0437-API)\n4. [\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c\u0438](#\u0440\u0430\u0431\u043e\u0442\u0430-\u0441-\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c\u0438)\n    1. [\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API](#\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439-API)\n    2. [\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API](#\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439-API)\n5. [\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445](#\u0440\u0430\u0431\u043e\u0442\u0430-\u0441-\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438-\u0434\u0430\u043d\u043d\u044b\u0445)\n6. [\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439](#\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f-\u043c\u043e\u0434\u0435\u043b\u0435\u0439)\n\n## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\n\n\u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n\n1. \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 `pip install dirba`. \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f\n   \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c\u0438 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n2. \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 kafka. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 `pip install dirba[kafka]` \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438\n3. \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c `pip install dirba[validation]`\n\n## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 kafka\n\n### \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 kafka\n\nApache Kafka \u2014 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0435\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2013 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e\n\u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0441 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u044f\u043c\u0438 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438.\n\n\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0449\u0435, \u0442\u043e \u044d\u0442\u043e \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0412\u043f\u043e\u043b\u043d\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439\n\u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u2013 \"\u0437\u0430\u0447\u0435\u043c \u043d\u0443\u0436\u043d\u043e \u044d\u0442\u043e \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 ?\"\n\u041d\u0430 \u0434\u0435\u043b\u0435, \u043f\u0440\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c\u0438, \u0432\u0441\u0442\u0430\u0451\u0442 \u0440\u044f\u0434 \u043f\u0440\u043e\u0431\u043b\u0435\u043c:\n\n- \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\n- \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043c\u0435\u0436\u0434\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0434\u043b\u044f \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438)\n- \u043a\u0430\u043a \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 (\u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0447\u0442\u043e-\u0442\u043e \u043e\u0442\u043b\u0430\u0434\u0438\u0442\u044c/\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c)\n- \u043a\u0430\u043a \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n\n\u041f\u0440\u0438 \u043f\u0440\u044f\u043c\u043e\u0439 \u0441\u0445\u0435\u043c\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e HTTP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0443) \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\n\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u0437\u0430\u043c\u0435\u0434\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\n\u043e\u0448\u0438\u0431\u043e\u043a.\n\nKafka \u0436\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0432\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u041e\u043d\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0445\u0440\u0430\u043d\u0438\u0442\n\u0435\u0433\u043e \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0435 \u0437\u0430\u0431\u0435\u0440\u0451\u0442 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.\n\n![\u0441\u0445\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0442\u044b apache kafka](https://www.cloudamqp.com/img/blog/kafka-setup.png)\n\n\u0412 \u0442\u0430\u043a\u043e\u0439 \u0441\u0445\u0435\u043c\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043f\u043e\u043d\u044f\u0442\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u0438\u0442 \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c:\n\n- **Producer** \u2013 \u0432\u043d\u0435\u0448\u043d\u0435\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, *\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435* \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 *\u0432* kafka\n- **Consumer** \u2013 \u0432\u043d\u0435\u0448\u043d\u0435\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, *\u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0435\u0435* \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 *\u0438\u0437* kafka\n- **Broker** \u2013 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 (\u0438\u043d\u0441\u0442\u0430\u043d\u0441) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f `Apache Kafka` (\u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0445 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u043e\u0442 3\u0445 \u0448\u0442\u0443\u043a, \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445\n  \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u0445, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0431\u0435\u0441\u043f\u0435\u0440\u0435\u0431\u043e\u0439\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 (\u0432\u0435\u0434\u044c \u0431\u0435\u0437 kafka \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0435 \u0441\u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0449\u0430\u0442\u044c\u0441\u044f)). \u0412\n  \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0432 **Kafka Cluster**, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c, \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u0438 \u043e\u0431\u0449\u0430\u044e\u0442\u0441\u044f \u0432\u0430\u0448\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u043b\u044e\u0431\u043e\u0435\n  \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u0438\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438)\n- **Topic** \u2013 \"\u0442\u0435\u043c\u0430\", \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u043a\u043b\u044e\u0447, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0430\u0441\u0441\u043e\u0446\u0438\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u0432 kafka \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042d\u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u044e\u0447\n  \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n- **Partition** \u2013 \"\u0447\u0430\u0441\u0442\u044c \u0442\u043e\u043f\u0438\u043a\u0430\", \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0435\u0434\u0438\u043d\u0438\u0446\u0430, \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u0437 *\u0442\u043e\u043f\u0438\u043a\u0430*. \u041a\u043e\u043b-\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439\n  \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043b-\u0432\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439-consumer'\u043e\u0432 (\u0432 \u043e\u0434\u043d\u043e\u043c *\u0442\u043e\u043f\u0438\u043a\u0435* \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c **\n  \u043a\u043e\u043d\u0441\u044c\u044e\u043c\u0435\u0440\u043e\u0432** \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043a\u043e\u043b-\u0432\u043e *\u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439*). \u041a\u0430\u043a \u0431\u044b\u043b\u043e \u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u044f \u2013 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0435\u0434\u0438\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0433\u0443\u0442\n  \u0431\u044b\u0442\u044c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043d\u0430 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f `Apache Kafka`\n\n\u0418\u0442\u043e\u0433\u043e \u043c\u044b \u0438\u043c\u0435\u0435\u043c:\n\n0. \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043d\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 `Kafka Cluster`, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f\n1. \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435-producer, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 `Topic` \u043d\u0430 \u044d\u0442\u043e\u043c\n   \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0435.\n2. \u0414\u0440\u0443\u0433\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435-consumer \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u044d\u0442\u043e\u0433\u043e `Topic` \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0441\u0432\u043e\u0435\u0439\n   \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0435. \u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c, \u043e\u043d\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u0444\u0430\u043a\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e\n   commit-\u0441\u0438\u0433\u043d\u0430\u043b\u0430 (\u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u043c \u0434\u043b\u044f kafka, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e).\n\n#### \u041a\u0430\u043a consumer \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442, \u043a\u0430\u043a\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0440\u0430\u0442\u044c\n\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u043b\u0438 \u0433\u043b\u0430\u0432\u0443 \u0432\u044b\u0448\u0435, \u0442\u043e \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u043b\u0438 \u043f\u043e\u0434\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043c \u043d\u0438 \u0441\u043b\u043e\u0432\u0430 \u043d\u0435 \u0441\u043a\u0430\u0437\u0430\u043d\u043e \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\n\u043a\u043e\u043d\u0441\u044c\u044e\u043c\u0435\u0440 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u043c\u0443 \u0431\u0440\u0430\u0442\u044c \u0438\u0437 kafka. \u0414\u0430, \u0435\u0441\u0442\u044c \u0442\u043e\u043f\u0438\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e \u0432\u0438\u0434\u0443\n\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u043e \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0438\u0445 \u0432 kafka \u043d\u0430\u043a\u043e\u043f\u0438\u043b\u043e\u0441\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0442\u0435\u043d \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 \u0442\u044b\u0441\u044f\u0447 ? \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432\nkafka \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c **\u0433\u0440\u0443\u043f\u043f** (`group`) \u0438 **\u0441\u0434\u0432\u0438\u0433\u043e\u0432** (offset).\n\n- \u0413\u0440\u0443\u043f\u043f\u0430 \u2013 \u044d\u0442\u043e \u043e\u0431\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u0432\u044b\u0434\u0430\u0447\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430.\n  \u0422\u0430\u043a\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 `group_id`.\n- \u0421\u0434\u0432\u0438\u0433 \u2013 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2116 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0430 \u0438\u043b\u0438 \u0438\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430.\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440.\n\n\u041c\u044b \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0430\u043d\u043a\u0435. \u041f\u043e\u043d\u044f\u0442\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0430\u043d\u043a\u0430 \u2013 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0435, \u0430\n\u043f\u043e\u0442\u0435\u0440\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0438\u0445 \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0441\u0430\u043c\u043e \u0441\u043e\u0431\u043e\u0439 \u0432\u0441\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u043f\u0440\u043e kafka \u0438 \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u043e \u0435\u0451 \u0431\u0435\u0440\u0451\u043c.\n\n\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0441\u0435\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u0445), \u043c\u044b \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 3 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u043c\u0438\n\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f `acquiring`. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 REST \u0438\u043b\u0438 gRPC API, \u043a\u043e\u0442\u043e\u0440\u043e\u0435\n\u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u0438 \u0442\u0443\u0442 \u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0451 \u0432 kafka, **\u0430 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442\n\u0447\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 acquiring \u2013 Producer**. \u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435, \u043d\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u043d\u043e, \u043a\u0430\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0433\u043b\u0430\u0432\u043d\u043e\u0435\n\u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u043b\u0438 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443, \u0432 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430. \u041d\u043e \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u043c\u044b **\u0432\u044b\u0434\u0430\u0434\u0438\u043c \u0432\u0441\u0435\u043c\n\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 group_id**, \u0447\u0442\u043e\u0431\u044b \u044f\u0432\u043d\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435.\n\n![\u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 kafka](kafka_work_example.png)\n\n\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0432 kafka, \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u043e\u0445\u043d\u0443\u0442\u044c. \u041a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043c\u044b \u0443\u0436\u0435 \u0438\u0445 \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e\n\u043d\u0430\u0432\u0435\u0440\u043d\u0451\u0442\u0441\u044f. \u0417\u043d\u0430\u0447\u0438\u0442, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0448\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u2013 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441 \u043a\u0443\u0447\u0435\u0439\n\u043b\u043e\u0433\u0438\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043d\u0438\u0445 \u0443 \u043d\u0430\u0441 \u043f\u043e\u0434\u043d\u044f\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 (\u043d\u0430 \u0440\u0438\u0441\u0443\u043d\u043a\u0435 2, \u0430 \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438 \u0441\u0438\u043b\u044c\u043d\u043e\n\u0431\u043e\u043b\u044c\u0448\u0435). \u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f `business logic` **\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f Consumer'\u0430\u043c\u0438**, \u0442.\u043a. \u0434\u043e\u0441\u0442\u0430\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 kafka, \u043c\u044b \u0438\u0445\n\u0442\u043e\u0436\u0435 \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c `group_id`. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 `group_id` **\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d** \u0434\u043b\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 **\n\u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f**. \u0422\u0430\u043a \u043c\u044b \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u043c, \u0447\u0442\u043e \u043e\u0434\u043d\u043e \u0438 \u0442\u043e \u0436\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0431\u043e\u043b\u0435\u0435 1\n\u0440\u0430\u0437\u0430.\n\n\u041d\u0443 \u0438 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 `logger`, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0442\u0430\u043a\u0436\u0435 **\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f Consumer'\u043e\u043c**. \u0414\u043b\u044f \u043d\u0435\u0433\u043e \u0443 \u043d\u0430\u0441 \u0432\u0441\u0435\u0433\u043e-\u043b\u0438\u0448\u044c 1\n\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440, \u0442.\u043a. \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u043c \u043d\u0435 \u043a \u0441\u043f\u0435\u0445\u0443 \u0438 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0438\u043d\u0446\u0438\u0434\u0435\u043d\u0442\u0430\u0445. \u0415\u043c\u0443 \u043c\u044b **\u0432\u044b\u0441\u0442\u0430\u0432\u0438\u043c\n\u0434\u0440\u0443\u0433\u043e\u0439** `group_id`, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u043e\u0442 `business logic`. \u0422\u0435\u043c \u0441\u0430\u043c\u044b\u043c, \u043c\u044b \u0438 \u043b\u043e\u0433\u0433\u0435\u0440\u0443 \u0438 \u0431\u0438\u0437\u043d\u0435\u0441 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043c \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c\n\u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0432\u0435\u0434\u044c \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u0437\u0430\u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c).\n\n### Consumer\n\n\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 Consumer, \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0439\n\u043a\u043b\u0430\u0441\u0441 `runners.kafka_runner.AbstractKafkaConsumer`.\n\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e:\n\n- \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043a\u0430\u0444\u043a\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 `json`).\n  \u0412\u0445\u043e\u0434\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u2013 `pydantic` \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0439 \u0432 `json` \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438. \u0437\u0430 \u0432\u0445\u043e\u0434\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c\n  \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 `InputModel`\n- \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `on_startup`\n- \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `process`\n- ??????\n- PROFIT!!!\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430\n\n```python\nimport os\n\nimport aiomisc\n\nimport dirba.logging_utils\nfrom dirba.runners import kafka as kafka_runner\n\n\nclass ExampleConsumer(kafka_runner.AbstractKafkaConsumer):\n    InputModel = kafka_runner.topic_schemas.LoaderMessage\n\n    async def on_startup(self):\n        print('started up')\n\n    async def process(self, message: InputModel):\n        print('message', message.uid_loaded_data, 'consumed')\n\n\nif __name__ == '__main__':\n    config = kafka_runner.KafkaConfig(input_topic='loaded_data', group_id='example_dirba_consumer',\n                                      bootstrap_servers=os.environ['BOOTSTRAP_SERVERS'])\n    consumer = ExampleConsumer(config, from_topic_begin=False)\n\n    with aiomisc.entrypoint(consumer) as loop:\n        dirba.logging_utils.set_logging(sentry_url=os.environ['SENTRY_URL'])\n\n        loop.run_forever()\n```\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443 \u043d\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f echo \u0441\u0435\u0440\u0432\u0438\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u0437 kafka \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n\n#### \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f\n\n\u0414\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a kafka \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c `KafkaConfig`. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e:\n\n- \u0442\u043e\u043f\u0438\u043a\u0435 `input_topic`, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0443\u0442 \u0441\u0447\u0438\u0442\u0430\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n- \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f `group_id` (\u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f)\n- \u0430\u0434\u0440\u0435\u0441\u0430\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f `bootstrap_servers` (`<ip1>:<port1>,<ip2>:<port2>`, \u0442.\u0435. \u0430\u0434\u0440\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\n  \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u0430\u043c, \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e)\n\n\u0422\u0430\u043a\u0436\u0435, \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e\n\n```\ndirba.logging_utils.set_logging(sentry_url=os.environ['SENTRY_URL'])\n```\n\n\u0413\u0434\u0435, `os.environ['SENTRY_URL']` \u2013 url \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 sentry \u0441\u0435\u0440\u0432\u0438\u0441 (\u0434\u043b\u044f PRODUCTION \u2013 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e,\n\u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u2013 \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e)\n\n#### \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\n\n\u0427\u0442\u043e \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441:\n\n- \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 kafka\n- \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0441\u0445\u0435\u043c\u0435\n- \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u0445.\n- \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0432 sentry\n- \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 sentry\n\n\u0427\u0442\u043e **\u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441**:\n\n- `commit` \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0430\u0442\u043e\u043c\u0430\u0440\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439)\n- \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435\n\n\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u0435\u0439\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u2013 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b-\u0432\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0441 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0442\u0435\u0440\u044e\n\u0434\u0430\u043d\u043d\u044b\u0445 (\u0432 \u043d\u0430\u0448\u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u044f\u0445 \u044d\u0442\u043e \u043c\u0435\u043d\u0435\u0435 0,0001% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u043e \u0432\u044b \u0432\u0441\u0451 \u0435\u0449\u0451 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043e\u0442\u0441\u043b\u0435\u0434\u0438\u0432\n\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 sentry).\n\n### Producer\n\n\u041f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 Consumer~~, \u043e\u0434\u043d\u0430\u043a\u043e, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0441\u0430\u043c \u043f\u043e \u0441\u0435\u0431\u0435 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u0435\u043d~~.\n\n\u0414\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e:\n\n- \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 (output) \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043a\u0430\u0444\u043a\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 json)\n  . \u0412\u0445\u043e\u0434\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u2013 pydantic \u043c\u043e\u0434\u0435\u043b\u044c, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0439 \u0432 json \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438. \u0437\u0430 \u0432\u044b\u0445\u043e\u0434\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442\n  \u043f\u043e\u043b\u0435 \u043a\u043b\u0430\u0441\u0441\u0430 OutputModel\n- \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `on_startup`\n- \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `pack` \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c\n- \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `start`, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443\n\n```python\nimport os\nfrom typing import Any\n\nimport aiomisc\nimport pydantic\n\nimport dirba.logging_utils\nfrom dirba.runners import kafka as kafka_runner\n\n\nclass ExampleMessageSchema(pydantic.BaseModel):\n    id: int\n    message: str\n\n\nclass ExampleProducer(kafka_runner.AbstractKafkaProducer):\n    OutputModel = ExampleMessageSchema\n\n    def pack(self, data: Any) -> OutputModel:\n        return data\n\n    async def on_startup(self):\n        print('started up')\n\n    async def start(self, trigger_start=True):\n        await super(ExampleProducer, self).start(trigger_start=True)\n        for i in range(10):\n            message = ExampleMessageSchema(id=i, message=f'test {i}')\n            await self.send_message(message)\n            print('sent', message)\n\n\nif __name__ == '__main__':\n    config = kafka_runner.KafkaConfig(None, group_id='example_dirba_producer',\n                                      bootstrap_servers=os.environ['BOOTSTRAP_SERVERS'],\n                                      output_topic='test__dirba')\n    producer = ExampleProducer(config)\n\n    with aiomisc.entrypoint(producer) as loop:\n        dirba.logging_utils.set_logging(sentry_url=os.environ['SENTRY_URL'])\n        loop.run_forever()\n```\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u043f\u0430\u043c\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u0432 kafka.\n\n\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043a\u043b\u0430\u0441\u0441 `AbstractKafkaProducer` \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043a\u043e\u0440\u0435\u0435 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u043c (\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0443\u0442 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c\n\u043c\u0435\u0442\u043e\u0434 `start`) \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0432\n\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c \u0441 \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c (\u0441\u043c\u043e\u0442\u0440\u0438 `/examples/example_producer.py` \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438).\n\n\u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u043b\u0438\u0448\u044c \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 robust'\u043d\u043e\u0435 (\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0435 \u043a \u0441\u0431\u043e\u044f\u043c) \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 kafka, \u043e\u0434\u043d\u0430\u043a\u043e \u043d\u0438\u043a\u043e\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435\n\u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u0433\u0438\u043a\u0435.\n\n\u041a\u043e\u043d\u0444\u0438\u0433 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 [producer'e](#producer), \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e `input_topic`, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\n\u0443\u043a\u0430\u0437\u0430\u0442\u044c `output_topic`, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n\n### Runner \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\n**\u0415\u0441\u043b\u0438** \u0432\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0435 **ML** \u043c\u043e\u0434\u0435\u043b\u044c, **\u0442\u043e \u0432\u0430\u043c \u0441\u044e\u0434\u0430**\n\nRunner'\u044b \u2013 \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 kafka (\u043f\u0440\u0438\u043d\u044f\u043b\n\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0437\u0434\u0430\u043b \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435).\n\n\u0412\u0441\u0435 Runner'\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0435\u0439 \u2013 `Model`\n\n#### Model\n\nModel \u2013 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438 \u043e \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\n\u043a\u043e\u043c\u0443-\u043b\u0438\u0431\u043e \u043a\u043b\u0430\u0441\u0441\u0443. \u0418\u043d\u0430\u0447\u0435 \u0433\u043e\u0432\u043e\u0440\u044f \u2013 \u043e\u0431\u0451\u0440\u0442\u043a\u0430 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432.\n\n\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, Model, \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0442\u0440\u043e\u0433\u0438\u0439 API \u0438 \u043f\u0440\u0438\u0441\u043f\u043e\u0441\u043e\u0431\u0438\u0442\u044c \u0435\u0433\u043e \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e\n\u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0435\u0433\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c.\n\n##### AbstractProhibitedModel\n\n`AbstractProhibitedModel` \u2013 \u0447\u0430\u0441\u0442\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 `AbstractModel`. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u2013 \u044f\u0432\u043d\u0430\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043a \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443\n\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0443. \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043b\u044e\u0431\u0430\u044f \u0432\u044b\u0434\u0430\u0432\u0430\u0435\u043c\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043e\u0442 \u0442\u0430\u043a\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438, \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043b\u044f **\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438,\n\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0432** [\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435](#\u0440\u0430\u0431\u043e\u0442\u0430-\u0441-\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c\u0438).\n\n```python\nclass DamboInput(pydantic.BaseModel):\n    text: str\n\n\nclass DamboModel(AbstractProhibitedModel):\n    def __init__(self, category_catalog: CategoryCatalog):\n        super().__init__(category_catalog)\n        self.category_catalog.load_catalog_sync()\n\n    def predict(self, features: DamboInput) -> List[Predict]:\n        return [Predict(score=1, category=i) for i in self.category_catalog.catalog_values]\n\n    def preprocess(self, features: LoaderMessage) -> DamboInput:\n        return DamboInput(text='dambooooooooooooo')\n\n    def author(self) -> Author:\n        return Author(name='dambo', version='0.0.1')\n\n```\n\n\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\n\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443.\n\n**\u0421\u043e\u0432\u0435\u0442\u044b**\n\n- \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u043e\u0442\u043d\u0435\u0441\u043b\u0430 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043a \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c **\u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a**\n- \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445 \u043b\u0443\u0447\u0448\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u043d\u0435 \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n- \u043b\u0443\u0447\u0448\u0435 \u0438\u0437\u0431\u0435\u0433\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0422.\u043a. \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0443\u0441\u043a \u0447\u0435\u0440\u0435\u0437 kafka, \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043f\u0440\u043e\u0449\u0435 \u0431\u0443\u0434\u0435\u0442\n  \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u043e\u0432, \u0447\u0435\u043c \u043c\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438.\n\n#### AbstractBaseKafkaRunner\n\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 kafka \u043c\u043e\u0434\u0435\u043b\u044c\u044e. \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0440\u0430\u0431\u043e\u0442\u044b:\n\n- \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 kafka\n- \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n- \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0438\n- \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 kafka\n\n\u041f\u043e \u0441\u0432\u043e\u0435\u0439 \u0441\u0443\u0442\u0438 \u2013 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 [Consumer](#consumer) \u0438 [Producer](#producer), \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0432\u044b\u0437\u043e\u0432\u0430\n\u043c\u043e\u0434\u0435\u043b\u0438\n\n**\u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0434\u0435\u043f\u043b\u043e\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430**\n\n```python\nimport os\nimport uuid\nfrom typing import Optional\n\nimport aiomisc\n\nfrom dirba.models.abc import Predict\nfrom dirba.models.dambo import DamboModel\nfrom dirba.runners.kafka_runners import AbstractBaseKafkaRunner, KafkaConfig\nfrom dirba.runners.kafka_runners.topic_schemas import LoaderMessage, AnalysisMessage, AnalysisResult,\n\nModelOutput\nfrom dirba.utils.catalogs import CategoryCatalog\n\n\nclass DamboBaseKafkaRunner(AbstractBaseKafkaRunner):\n    InputModel = LoaderMessage\n    OutputModel = AnalysisMessage\n\n    def pack_model_answer(self, message: InputModel, predict: Predict) -> Optional[OutputModel]:\n        input_data = message.dict(include={\"uid_query\", \"query_id\", \"driver_id\", \"category_id\", \"type_id\",\n                                           \"uid_search\", \"uid_filter_link\", \"uid_loader\",\n                                           \"uid_loaded_data\", \"uid_analysis\", })\n\n        model_answer = ModelOutput(category=predict.category, estimate=predict.score)\n        result = AnalysisResult(content_ref=message.result,\n                                model=model_answer,\n                                type_content=message.type_content)\n\n        packed = self.OutputModel(uid_analysis=uuid.uuid4(),\n                                  author=self.model.author(),\n                                  result=result,\n                                  **input_data)\n        return packed\n\n    def is_adorable(self, input_message: InputModel) -> bool:\n        return input_message.type_content == 'text'\n\n    async def on_startup(self):\n        print('started_up')\n\n\nif __name__ == '__main__':\n    config = KafkaConfig(input_topic='loaded_data',\n                         output_topic='dirba_simple_runner_test',\n                         group_id='example_dirba_consumer',\n                         bootstrap_servers=os.environ['BOOTSTRAP_SERVERS'])\n\n    category_catalog = CategoryCatalog(os.environ['CATALOG_URL'])\n    model = DamboModel(category_catalog)\n    runner = DamboBaseKafkaRunner(model, config, from_topic_begin=True)\n\n    with aiomisc.entrypoint(runner) as loop:\n        loop.run_forever()\n```\n\n#### StrictRunner\n\n\u0422\u043e\u0442 \u0436\u0435 `AbstractRunner`, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0435\u043b\u0430\u0435\u0442\n\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435.\n\n**\u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0434\u0435\u043f\u043b\u043e\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430**\n\n```python\nimport logging\nimport os\nfrom random import random\nfrom typing import List\n\nimport aiomisc\n\nfrom dirba.models.abc import Predict\nfrom dirba.models.dambo import DamboModel, DamboInput\nfrom dirba.runners.kafka_runners import AbstractStrictBaseKafkaRunner, KafkaConfig\nfrom dirba.utils.catalogs import CategoryCatalog\n\n\nclass DumbModel(DamboModel):\n    def predict(self, features: DamboInput) -> List[Predict]:\n        if random() > 0.5:\n            return [Predict(score=1, category=i) for i in self.category_catalog.catalog_values]\n        else:\n            return [Predict(score=1, category=-20)]\n\n\nclass DambKafkaRunner(AbstractStrictBaseKafkaRunner):\n\n    def is_adorable(self, input_message: AbstractStrictBaseKafkaRunner.InputModel) -> bool:\n        return input_message.type_content == 'text'\n\n    async def on_startup(self):\n        print('started_up')\n\n\nif __name__ == '__main__':\n    config = KafkaConfig(input_topic='loaded_data',\n                         output_topic='dirba_simple_runner_test',\n                         group_id='example_dirba_consumer',\n                         bootstrap_servers=os.environ['BOOTSTRAP_SERVERS'])\n\n    category_catalog = CategoryCatalog(os.environ['CATALOG_URL'])\n    model = DumbModel(category_catalog)\n    runner = DambKafkaRunner(model, config, from_topic_begin=True,\n                             category_catalog=category_catalog,\n                             produce_incorrect_categories=True)\n\n    with aiomisc.entrypoint(runner, log_level=logging.DEBUG) as loop:\n        loop.run_forever()\n```\n\n#### AbstractKafkaRunner\n\n**\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f**\n\n\u0418\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:\n\n- \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0447\u0435\u0440\u0435\u0437 sentry\n- \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0435\u0442\u0440\u0438\u043a \u0432 prometheus (\u0440\u043e\u0443\u0442 `/metrics/`)\n\n\u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n\n```python\nimport os\nimport time\nfrom random import random\nfrom typing import Iterable\n\nimport aiomisc\n\nimport dirba\nfrom dirba.models.abc import Predict\nfrom dirba.models.dambo import DamboModel, DamboInput\nfrom dirba.runners.kafka_runners import KafkaConfig\nfrom dirba.runners.kafka_runners.runner import AbstractKafkaRunner\nfrom dirba.utils.catalogs import CategoryCatalog\nfrom dirba.utils.metrics.prometheus_exporter import PrometheusExporter\n\n\nclass ExampleRunner(AbstractKafkaRunner):\n    InputModel = AbstractKafkaRunner.InputModel\n    OutputModel = AbstractKafkaRunner.OutputModel\n\n    def is_adorable(self, input_message: InputModel) -> bool:\n        return input_message.type_content == 'text'\n\n    async def on_startup(self):\n        print('started up')\n\n\nclass DumbModel(DamboModel):\n    def predict(self, features: DamboInput) -> Iterable[Predict]:\n        # \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b\n        self.metric.add_label_values(ora='jojo', muda='dio')\n        time.sleep(1)\n        # \u0432 \u0442\u0435\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e predict'a,\n        # \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0438\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430\n        for i in self.category_catalog.catalog_values:\n            if random() > 0.3:\n                self.metric.add_label_values(ora=f'jojo_{i}', muda='dio')\n                yield Predict(score=1, category=i)\n\n\nif __name__ == '__main__':\n    config = KafkaConfig(input_topic='loaded_data',\n                         output_topic='dirba_simple_runner_test',\n                         group_id='example_dirba_runner',\n                         bootstrap_servers=os.environ['BOOTSTRAP_SERVERS'])\n\n    # \u0442.\u043a. \u044d\u0442\u043e \"\u0441\u0442\u0440\u043e\u0433\u0438\u0439\" runner (\u043a\u0430\u043a \u0438 \u043c\u043e\u0434\u0435\u043b\u044c), \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u043c\n    category_catalog = CategoryCatalog(os.environ['CATALOG_URL'])\n    model = DumbModel(category_catalog)\n\n    # from_topic_begin - \u043e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430. \u0412 \u043f\u0440\u043e\u0434\u0435 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 False\n    runner = ExampleRunner(model, config, from_topic_begin=True, category_catalog=category_catalog)\n    # \u0434\u043b\u044f \u043f\u0440\u043e\u043a\u0438\u0434\u044b\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0451\u0440\n    exporter = PrometheusExporter(port=int(os.environ['PORT']), address='0.0.0.0')\n\n    # \u043f\u043e\u0441\u043b\u0435 \u0438\u043d\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 runner'a \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f. \u043d\u0430\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a, \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\n    runner.material_metric.register_labels('ora', 'muda')\n\n    # \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n    dirba.logging_utils.set_logging(sentry_url=os.environ['SENTRY_URL'])\n\n    with aiomisc.entrypoint(runner, exporter) as loop:\n        loop.run_forever()\n```\n\n\u0418\u0437 \u043e\u0442\u043b\u0438\u0447\u0438\u0439 \u2013 \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u0441\u0435\u0440\u0432\u0438\u0441 `PrometheusExporter`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0443 \u043c\u0435\u0442\u0440\u0438\u043a. \u041c\u0435\u0442\u0440\u0438\u043a\u0438\n\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0451\u0440\u0443, \u0438 \u0440\u043e\u0443\u0442\u0443 `/metrics/`. \u0418 \u0434\u0430, \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0451\u0440 \u043c\u043e\u0436\u043d\u043e \u0438 \u043d\u0435\n\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c, \u043d\u043e \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0435 \u0431\u0443\u0434\u0443\u0442. \u041e\u0434\u043d\u0430\u043a\u043e \u044d\u0442\u043e \u043d\u0438\u043a\u043e\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u0435\u0442 \u0440\u0430\u043d\u043d\u0435\u0440.\n\n\u0422\u0430\u043a\u0436\u0435 \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f label'\u043e\u0432 \u043a \u043c\u0435\u0442\u0440\u0438\u043a\u0435 prometheus.\n\n## \u0417\u0430\u043f\u0443\u0441\u043a \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 API\n\nWIP\n\n## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\u043c\u0438\n\n\u0422.\u043a. \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0442\u043e \u043c\u044b \u0433\u0434\u0435-\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u044d\u0442\u0438\n\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0431\u0440\u0430\u0442\u044c. \u0425\u0430\u0440\u0434\u043a\u043e\u0434 \u2013 \u0434\u0435\u043b\u043e \u043d\u0435\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u043d\u043e\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043e\u0431\u0449\u0438\u0439 \u0441\u0435\u0440\u0432\u0438\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f\n\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445. \u0420\u0430\u0437 \u044d\u0442\u043e \u0441\u0435\u0440\u0432\u0438\u0441, \u0442\u043e, \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b \u0438\u043c\u0435\u0442\u044c \u043e\u0431\u0432\u044f\u0437\u043a\u0443 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043d\u0435\u043c\u0443, \u0434\u0430\n\u0435\u0449\u0451 \u0438 \u0441 \u043a\u044d\u0448\u043e\u043c \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e.\n\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c `utils.catalogs.abc.AbstractCatalog`. \u0421\u0430\u043c \u043a\u043b\u0430\u0441\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u0435\u043d\u044c\u043a\u0443\u044e \u043e\u0431\u0432\u044f\u0437\u043a\u0443\n\u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u043c\u0443 HTTP \u0441\u0435\u0440\u0432\u0438\u0441\u0443.\n\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u043d\u043e \u0441 `AbstractCatalog`, \u0442\u043e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e:\n\n- \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c `pydantic` \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\n- \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 `parse_catalog_response` \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439\n  \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 \u043e\u0431\u0432\u044f\u0437\u043a\u0435 \u0432\u043e\u043a\u0440\u0443\u0433 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 *\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439* \u0432 `utils.catalogs.category`.\n\n\u0423 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0435\u0441\u0442\u044c 2 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 API \u2013 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439.\n\n### \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API\n\n```python\nimport asyncio\nimport os\nimport time\nimport logging\n\nfrom dirba.utils.catalogs import CategoryCatalog\n\nlogging.basicConfig(level=logging.DEBUG)\n\ncatalog = CategoryCatalog(os.environ['CATALOG_URL'])\n\n\nasync def async_example():\n    # \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u044d\u0448\u0430\n    start_time = time.time()\n    count = 20\n    for i in range(count):\n        val = await catalog.get_value(catalog_id=14)\n    print(count, 'requests ended up in', time.time() - start_time, 'seconds')\n    print(val)\n\n    await catalog.get_catalog_data()\n\n    # \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u0434\u043b\u044f \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    for i in range(800, 810):\n        val = await catalog.get_value(catalog_id=i)\n        # \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0431\u0435\u0440\u0443\u0442\u0441\u044f \u0438\u0437 \u043a\u044d\u0448\u0430\n        val = await catalog.get_value(catalog_id=i)\n        val = await catalog.get_value(catalog_id=i)\n\n\nif __name__ == '__main__':\n    asyncio.run(async_example())\n```\n\n\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u2013 `get_value`. \u041f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c, \u043e\u043d\u0430 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043a\u044d\u0448 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438\u0437\n\u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 (\u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442\u0435 \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b, \u0430 \u0434\u0430\u043b\u044c\u0448\u0435 \u0432\u0441\u0442\u0443\u043f\u0438\u0442 \u0432 \u0441\u0438\u043b\u0443\n\u043a\u044d\u0448). \u041c\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0451\u043c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e *\u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f*.\n\n\u0418 \u0432 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435 \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u043a\u0430\u043a-\u0442\u043e \u0442\u0430\u043a\n\n### \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 API\n\n```python\nimport os\nimport time\nimport logging\n\nfrom dirba.utils.catalogs import CategoryCatalog\n\nlogging.basicConfig(level=logging.DEBUG)\n\ncatalog = CategoryCatalog(os.environ['CATALOG_URL'])\n\n\ndef sync_example():\n    # \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u044d\u0448\u0430\n    start_time = time.time()\n    count = 20\n    for i in range(count):\n        val = catalog.get_value_sync(catalog_id=14)\n    print(count, 'sync requests ended up in', time.time() - start_time, 'seconds')\n    print(val)\n\n    # \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u0434\u043b\u044f \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    for i in range(800, 810):\n        val = catalog.get_value_sync(catalog_id=i)\n        # \u0432\u0441\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0431\u0435\u0440\u0443\u0442\u0441\u044f \u0438\u0437 \u043a\u044d\u0448\u0430\n        val = catalog.get_value_sync(catalog_id=i)\n        val = catalog.get_value_sync(catalog_id=i)\n\n\nif __name__ == '__main__':\n    sync_example()\n```\n\n\u0420\u0430\u0437\u043d\u0438\u0446\u044b \u043f\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043d\u0435\u0442, \u043e\u0434\u043d\u0430\u043a\u043e \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0432\u0430\u043c \u043c\u043e\u0433\u0443\u0442\n\u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b.\n\n\u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430\n\n## \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 ML \u043c\u043e\u0434\u0435\u043b\u044c, \u0442\u043e \u0443 \u0432\u0430\u0441 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0442\u0430\u043d\u0435\u0442 \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u0432\u043e\u043f\u0440\u043e\u0441, \u043a\u0430\u043a \u0434\u043e\u0441\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0438\u0445\n\u043f\u0440\u043e\u0433\u043e\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 \u043c\u043e\u0434\u0435\u043b\u044c, \u0432\u0435\u0434\u044c \u0432\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043b\u0438\u0448\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440.\n\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0435\u0441\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 `utils.data_loader`. \u041e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u044f\u0445\n\u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 `AbstractDataLoader` \u0441\u043c\u044b\u0441\u043b\u0430 \u043d\u0435 \u0432\u0438\u0436\u0443 (\u0442.\u043a. \u0432\u0441\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0443\u0436\u0435 \u0433\u043e\u0442\u043e\u0432\u044b). \u0421\u043a\u0430\u0436\u0443 \u043b\u0438\u0448\u044c, \u0447\u0442\u043e \u0438\u0437 \u043a\u043e\u0440\u043e\u0431\u043a\u0438\n\u0442\u0430\u043c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0430 `retry` \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u0434\u043b\u044f HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u043c \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0442\u0440\u0430\u0434\u0430\u0442\u044c.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e:\n\n- \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438\n- \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0435 URL \u0434\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430\n- \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\n\n```python\nimport os\n\nfrom dirba.utils.data_loader import TextLoader, HtmlLoader, ImageLoader\n\nif __name__ == '__main__':\n    service_url = os.environ['SERVICE_URL']\n\n    text_loader = TextLoader(service_url)\n    print(text_loader.get_content(entity_id=1))\n\n    html_loader = HtmlLoader(service_url)\n    print(html_loader.get_content(entity_id=1))\n\n    image_loader = ImageLoader(service_url)\n    image = image_loader.get_content(entity_id=1)\n    with open('./tempo.jpg', 'wb') as f:\n        f.write(image[1].content)\n\n```\n\n## \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\nWIP\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.uriit.ru/CIAS/dirba",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dirba",
            "package_url": "https://pypi.org/project/dirba/",
            "platform": "",
            "project_url": "https://pypi.org/project/dirba/",
            "project_urls": {
                "Homepage": "https://gitlab.uriit.ru/CIAS/dirba"
            },
            "release_url": "https://pypi.org/project/dirba/0.1.3/",
            "requires_dist": [
                "requests",
                "fastapi (>=0.63.0)",
                "pydantic (>=1.8.1)",
                "python-multipart (>=0.0.5)",
                "uvicorn (>=0.11.3)",
                "aiomisc (>=12.1.0)",
                "aiohttp (<4.0.0,>3.7.0)",
                "aiohttp-asgi (>=0.3.1)",
                "orjson (>=3.5.1)",
                "sentry-sdk (>=0.19.0)",
                "cachetools (>=4.2.1)",
                "asyncache (>=0.1.1)",
                "prometheus-client (<0.11.0,>=0.10.1)",
                "aiokafka (<0.8.0,>=0.7.0) ; extra == 'kafka'",
                "scikit-learn (<0.24,>=0.21.0.1) ; extra == 'validation'",
                "pandas (>=1.0.1) ; extra == 'validation'"
            ],
            "requires_python": ">=3.6",
            "summary": "Small ML boilerplate",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10740314,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "491387e8939f9cbadd5b20ef7e087e5b",
                    "sha256": "eef68dbb99009a7128c866077e0b42c3ea66839fb3c03eb1286ada8e35b13ca2"
                },
                "downloads": -1,
                "filename": "dirba-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "491387e8939f9cbadd5b20ef7e087e5b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 45002,
                "upload_time": "2021-06-25T06:44:33",
                "upload_time_iso_8601": "2021-06-25T06:44:33.559690Z",
                "url": "https://files.pythonhosted.org/packages/5e/bf/a79037fd92f0603c82ef7a1a6928ae4188126695bdae12da755f09d502b0/dirba-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e84e83cfdded2d6f5be025b637b340fe",
                    "sha256": "a4256bfe5f88194f9724ede5972cc28c15da4d5821996fadeee327a08debab62"
                },
                "downloads": -1,
                "filename": "dirba-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "e84e83cfdded2d6f5be025b637b340fe",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 50403,
                "upload_time": "2021-06-25T06:44:36",
                "upload_time_iso_8601": "2021-06-25T06:44:36.065605Z",
                "url": "https://files.pythonhosted.org/packages/e9/7b/481322cd4a130083b926cee2e018556f2b795ece09bc054e67a05157baf3/dirba-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}