{
    "0.1": {
        "info": {
            "author": "Alexander Nesterov",
            "author_email": "alex19pov31@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Bot kit\n\n#### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0431\u0435\u0437 \u043a\u043d\u043e\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430:\n\n```python\nfrom bot_kit.kit import BotContext\nfrom bot_kit.db import DBManager\nfrom sqlalchemy.ext.declarative import declarative_base\n\ntoken: str = '123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11'\nBaseModel = declarative_base()  # \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0411\u0414\ndb_manager = DBManager('sqlite:///mybase.db', BaseModel)\n\nbot_context = BotContext(token)\nbot_context.set_db_manager(db_manager)\n```\n\n#### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b:\n\n```python\nfrom bot_kit.kit import BotContext\nfrom bot_kit.common import ConfigBot, INIConfig\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBaseModel = declarative_base()  # \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0411\u0414\nconfig = ConfigBot(INIConfig('settings.ini'))\nbot_context = BotContext.init_form_config(config, BaseModel)\n```\n\n#### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043c\u0435\u043d\u044e:\n\n\u041c\u0435\u043d\u044e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 MenuReplyKeyboard \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e\n\u0447\u0435\u0440\u0435\u0437 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 register_menu. \u041f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f\n\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0438 \u043c\u0435\u043d\u044e. \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430 \u043c\u0435\u043d\u044e \u043c\u043e\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0435, \u043f\u043e \u0442\u0430\u043a\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443\n\u043a\u0430\u043a \u0438 \u0432 aiogram \u0438\u043b\u0438 \u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 check.\n\n```python\nfrom bot_kit.kit import BotCommand, MenuReplyKeyboard, ReplyKeyboardButton, ShowMenuButton\nfrom bot_kit.db import DBManager, ModelManager\nfrom aiogram import types\n\nclass FirstCommand(BotCommand):\n    async def execute(self, tg_object: types.Message, *args, **kwargs):\n        \"\"\"\n        self.db_manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0411\u0414\n        self.bc - \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\n        self.bot - \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u043e\u0442\u0430\n        \"\"\"\n        user_manager: ModelManager = self.db_manager.manage(UserModel)\n        user_manager.one(chat_id=tg_object.from_user.id)\n        await tg_object.answer('first command is finished')\n\n\n@bot_context.register_menu(text='\u041c\u0435\u043d\u044e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438')\nclass ConfigMenu(MenuReplyKeyboard):\n    COMMAND1 = ReplyKeyboardButton('\u041a\u043e\u043c\u0430\u043d\u0434\u0430 1', FirstCommand)\n\n    @classmethod\n    def check(cls, tg_object: types.Message) -> bool:\n        \"\"\"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0435\u043d\u044e (\u0435\u0441\u043b\u0438 \u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0434\u043b\u044f \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u0430)\"\"\"\n        return tg_object.text == '/config'\n\n\n@bot_context.register_menu(text='\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e', commands=['start'])\nclass MainMenu(MenuReplyKeyboard):\n    FIRST_BUTTON = ReplyKeyboardButton('\u041a\u043e\u043c\u0430\u043d\u0434\u0430 1', FirstCommand)\n    SECOND_BUTTON = ReplyKeyboardButton('\u041a\u043e\u043c\u0430\u043d\u0434\u0430 2', FirstCommand)\n    SHOW_CONFIG_MENU = ShowMenuButton('\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438', ConfigMenu)\n\n    @classmethod\n    async def before_show(cls, tg_object: types.Message, **kwargs):\n        \"\"\"\n        \u041c\u0435\u0442\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u043a\u0430\u0437\u043e\u043c \u043c\u0435\u043d\u044e\n        cls.bc - \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\n        \"\"\"\n        db_manager: DBManager = cls.bc.get_db_manager()\n        user_manager: ModelManager = db_manager.manage(UserModel)\n        user: UserModel = user_manager.one(chat_id=tg_object.from_user.id)\n        if not user:\n            user_manager.save(UserModel(\n                name=tg_object.from_user.first_name,\n                last_name=tg_object.from_user.last_name,\n                chat_id=tg_object.from_user.id,\n            ))\n```\n\n#### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Inline \u043c\u0435\u043d\u044e:\n\nInline \u043c\u0435\u043d\u044e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0442\u0430\u043a\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \u0447\u0442\u043e \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e, \u043d\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u043c \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442\n\u043a\u043b\u0430\u0441\u0441 MenuInlineKeyboard.\n\n```python\nfrom bot_kit.kit import BotCommand, MenuInlineKeyboard, InlineButton\nfrom aiogram import types\n\n\nclass SomeInlineCommand(BotCommand):\n    async def execute(self, tg_object: types.CallbackQuery, *args, **kwargs):\n        pass\n\n\n@bot_context.register_menu(text='\u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u043c?')\nclass ContextMenu(MenuInlineKeyboard):\n    FIRST_BUTTON = InlineButton('\u041a\u043d\u043e\u043f\u043a\u0430 1', 'some_command_btn', SomeInlineCommand())\n\n    @classmethod\n    def check(cls, tg_object: types.Message) -> bool:\n        return True\n```\n\n#### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u043e\u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u043e\u0439 \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b:\n\n\u041f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u044f\u0442\u044c \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u044b-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0438 BotTask \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d\n\u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0431\u043e\u0442\u0430. \u0418\u043b\u0438 \u0436\u0435 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0437\u0430\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u0432 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440 register_async_timer\n\n```python\n\nfrom bot_kit.kit import BotTask\n\n@bot_context.register_async_timer(60)   # \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043a\u0430\u0436\u0434\u0443\u044e \u043c\u0438\u043d\u0443\u0442\u0443\nasync def one_more_task():\n    pass\n\nclass SimpleTask(BotTask):\n    async def execute(self, *args, **kwargs):\n        \"\"\"\n        self.db_manager - \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0411\u0414\n        self.bc - \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\n        self.bot - \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u043e\u0442\u0430\n        \"\"\"\n        pass\n\nbot_context.add_task(SimpleTask(), 600) # \u0437\u0430\u043f\u0443\u0441\u043a \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0437 \u0432 10 \u043c\u0438\u043d\u0443\u0442\n```\n\n#### \u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430:\n\n\u041d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0431\u043e\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 long polling.\n\n```python\nbot_context.start_polling()\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex19pov31/bot-kit",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "bot-kit",
            "package_url": "https://pypi.org/project/bot-kit/",
            "platform": "",
            "project_url": "https://pypi.org/project/bot-kit/",
            "project_urls": {
                "Homepage": "https://github.com/alex19pov31/bot-kit"
            },
            "release_url": "https://pypi.org/project/bot-kit/0.1/",
            "requires_dist": [
                "aiodns (>=2.0.0)",
                "aiogram (>=2.9.2)",
                "aiohttp (>=3.6.2)",
                "SQLAlchemy (>=1.3.18)"
            ],
            "requires_python": ">=3.6",
            "summary": "Telegram bot kit",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8413643,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "46058760d1db6ba92144a4d5fa98ce18",
                    "sha256": "ba190c3ca2ad4b1392f3f23cfbb5ee945dfcaa02ac2dbafec13aa03fa52c7982"
                },
                "downloads": -1,
                "filename": "bot_kit-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "46058760d1db6ba92144a4d5fa98ce18",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 9265,
                "upload_time": "2020-10-14T22:05:02",
                "upload_time_iso_8601": "2020-10-14T22:05:02.677750Z",
                "url": "https://files.pythonhosted.org/packages/b8/e9/bb381d84931d89b04f0c2a2a41f613153686c7bb0be2e0dff863aa7fd18a/bot_kit-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3421d8c67de63c04ba0ef246177202d7",
                    "sha256": "10cee09136054171936ab97b20b6b40d53f46f229f7b926e14bddc45fb58b3ce"
                },
                "downloads": -1,
                "filename": "bot_kit-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3421d8c67de63c04ba0ef246177202d7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 9749,
                "upload_time": "2020-10-14T22:05:05",
                "upload_time_iso_8601": "2020-10-14T22:05:05.683465Z",
                "url": "https://files.pythonhosted.org/packages/37/f7/5f48550333bc4241b43236bc8234cf0de3ab0b1d48ad4b02ce4ae7f1a59c/bot_kit-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}