{
    "0.0.3": {
        "info": {
            "author": "\u5f20\u658c",
            "author_email": "786017877@163.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "## flask_simpleserialize\n\n* \u4e00\u4e2a\u9002\u7528\u4e8eflask\u6846\u67b6(\u8f7b\u578b\u7684\u3001\u7b80\u5355\u7684)\u5e8f\u5217\u5316\u5de5\u5177\n\n### \u4f7f\u7528\u4ecb\u7ecd\n\n```python\npip install flask-simpleserialize\n```\n\n\u5f53\u524d\u7248\u672c\u4e3a0.0.1\uff08^_^\uff09,\u4ee5\u540e\u8fd8\u4f1a\u7ee7\u7eed\u66f4\u65b0(\u6709\u65f6\u95f4\u5c31\u5199)\n\n\u5b83\u4e0d\u9700\u8981\u4f60\u5728\u4f60\u7684model\u5c42\u5b9e\u4f8b\u4e0a\u9762\u518d\u7ee7\u627f\u554a\u4ec0\u4e48\u7684\uff0c\u5b8c\u5168\u4e0d\u9700\u8981\uff0c\u63a5\u4e0b\u6765\u770b\u64cd\u4f5c\u4e0d\u5e9f\u8bdd\n\n\n\n**\u4e2a\u4eba\u89c9\u5f97\u4e0d\u7ba1\u4f7f\u7528\u4ec0\u4e48\u6846\u67b6\uff0c\u5e8f\u5217\u5316\u8fd9\u4e00\u6b65\u90fd\u5e94\u8be5\u5355\u72ec\u63d0\u51fa\u6765\u3002\u7528\u4f5c\u4e00\u5c42**\n\n\n\nmodel.py\n\n```python\nfrom sqlalchemy import orm, BIGINT, Column, TIMESTAMP, BOOLEAN, VARCHAR, TEXT, Integer, DateTime\nfrom sqlalchemy.dialects.mysql import TINYINT\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\n\nBase = declarative_base()\n\n# model\u7c7b\u5fc5\u987b\u8981\u7ee7\u627fdeclarative_base()\nclass AppletUser(Base):\n    __tablename__ = \"applet_user\"\n\n    id = Column(BIGINT,primary_key=True,info='\u7528\u6237\u4e3b\u952eid')\n    wx_unique_identification = Column(VARCHAR(256),info='wx\u7aef\u4f20\u5165\u7684\u552f\u4e00\u6807\u8bc6',default='')\n    wx_user_nickname = Column(VARCHAR(256),info='wx\u7528\u6237\u7684\u6635\u79f0',default=\"\")\n    # wx_user_nickname = Column(VARCHAR(256),info='wx\u7528\u6237\u7684\u6635\u79f0',default=\"dw{}\".format(client.get_guid()))\n    wx_user_avatar = Column(VARCHAR(256),info='wx\u7528\u6237\u7684\u5934\u50cfurl',default='')\n    wx_user_phone = Column(VARCHAR(256),info='\u7528\u6237\u7535\u8bdd\u53f7\u7801',default='')\n    wx_user_country = Column(VARCHAR(256),info='\u7528\u6237\u6240\u5728\u56fd\u5bb6',default='\u4e2d\u56fd')\n    wx_user_province = Column(VARCHAR(256),info='\u7528\u6237\u6240\u5728\u7701\u4efd/\u5dde',default='\u5317\u4eac')\n    wx_user_city = Column(VARCHAR(256),info='\u7528\u6237\u6240\u5728\u57ce\u5e02',default='\u5317\u4eac')\n    wx_user_gender = Column(TINYINT,info='0\u4e3a\u672a\u77e5,1\u4e3a\u7537\u6027,2\u4e3a\u5973\u6027',default=0)\n    user_memberorder = Column(TINYINT,info='0\u4e3a\u666e\u901a\u7528\u6237,1\u4e3a\u767d\u94f6\u4f1a\u5458,2\u4e3a\u9ec4\u91d1\u4f1a\u5458,3\u4e3a\u94c2\u91d1\u4f1a\u5458,4\u4e3a\u94bb\u77f3\u4f1a\u5458,5\u4e3a\u8d85\u7ea7\u4f1a\u5458',default=0)\n    user_integral = Column(BIGINT, info='\u7528\u6237\u79ef\u5206', default=0)\n    user_balance = Column(BIGINT,info='\u7528\u6237\u4f59\u989d',default=0)\n    is_activate = Column(BOOLEAN,info='\u662f\u5426\u6fc0\u6d3b,\u9ed8\u8ba4\u4e3a\u6fc0\u6d3b\u72b6\u6001',default=False)\n    soft_delete = Column(BOOLEAN, info='\u540e\u53f0\u7cfb\u7edf\u662f\u5426\u8f6f\u5220\u9664\u5220\u9664,True\u4e3a\u5220\u9664,False\u4e3a\u672a\u5220\u9664',default=False)\n    create_time = Column(DateTime, server_default= func.now(), info='\u7528\u6237\u521b\u5efa\u65f6\u95f4')\n    update_time = Column(DateTime, server_default= func.now(), onupdate=func.now(), info='\u7528\u6237\u66f4\u65b0\u65f6\u95f4')\n\n    # TODO \u7531\u4e8ewx\u5b98\u65b9\u4e0d\u4f1a\u5bf9\u7528\u6237\u4ee5\u524d\u7684\u5934\u50cfurl\u8fdb\u884c\u6e05\u9664\uff0c\u4e00\u65e6wx\u7528\u6237\u66f4\u6539\u5934\u50cf\u5c31\u4f1a\u9020\u6210wx\u7528\u6237\u5934\u50cf\u66f4\u6539\u5c0f\u7a0b\u5e8f\u7aef\u4e0d\u4f1a\u66f4\u6539\u7684\u95ee\u9898\uff0c\n    #  \u6240\u4ee5\u5f53\u7528\u6237\u6362\u5934\u50cf\u7684\u65f6\u5019\u5c0f\u7a0b\u5e8f\u4e5f\u8981\u8ddf\u7740\u6362\uff0c\u7279\u5b9a\u4e49\u6b64\u5b57\u6bb5\u7528\u4ee5\u5b58\u50a8\u7528\u6237\u4ee5\u524d\u7684\u5934\u50cf\n    user_previous_avatar_text = Column(TEXT,info='\u5b58\u50a8\u7528\u6237\u4ee5\u524d\u5934\u50cfURL')\n\t\n    \n\n    def __repr__(self):\n        return \"<AppletUser(id='%s',wx_user_nickname='%s')>\"%(self.id,self.wx_user_nickname)\n```\n\n\n\nserialize.py\n\n```python\nfrom flask_simpleserialize import ModelSerialize\nclass UserSerialize(ModelSerialize):\n    class Meta:\n        model = AppletUser\n        serialize_fields = ['id','wx_unique_identification']\n        deserialization_fields = ['create_time']\n\n    def get(self):\n        Users = SessionFactory.session().query(AppletUser).all()\n        data = self.data(Users)\n        return data\n\n```\n\n\u4f60\u53ea\u9700\u8981\u81ea\u5df1\u5199\u4e00\u4e2a\u7c7b\u5bfc\u5165`ModelSerialize`\u6a21\u5757\u7136\u540e\u7ee7\u627f\uff0c\u518d\u5176\u5185\u90e8\u5b9a\u4e49\u4e00\u4e2aMeta\u7c7b(\u5fc5\u987b\u8981\u5b9a\u4e49\u7684\u5466)\uff0cMeta\u7c7b\u91cc\u9762\u5199\u5165model\u5c5e\u6027\uff0c\u5c5e\u6027\u503c\u5c31\u662f\u4f60model\u5b9e\u4f8b\u540d\u79f0(\u4e5f\u662f\u5fc5\u9700\u8981\u5199\u7684)\uff0c\u8fd8\u6709\u518d\u5199\u5165\u4f60\u9700\u8981\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u503c\u3002`serialize_fields`\u4e0e`deserialization_fields`\u540d\u79f0\u662f\u4e0d\u80fd\u66f4\u6539\u7684\u3002\u7136\u540e\u4f60\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u65b9\u6cd5\u5185\u90e8\u6267\u884c\u67e5\u8be2\u8bed\u53e5\uff0c\u5c06\u7ed3\u679c\u4e22\u7ed9`data`\u65b9\u6cd5.\u5269\u4e0b\u7684\u5c31\u4e0d\u7528\u7ba1\u4e86\uff0c`ModelSerialize`\u4f1a\u5168\u90e8\u5e2e\u4f60\u5904\u7406\u597d\u7684\n\n\n\nrouter.py\n\n```python\nfrom serialize import UserSerialize\nfrom flask import Blueprint,request,jsonify\nfrom flasgger import swag_from\n\nuser = Blueprint('user',__name__)\n@hello_rbp.route('/user',methods=[\"GET\"])\n@swag_from('../docs/doc/user.yaml')\ndef get_user():\n    \"\"\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n    \"\"\"\n    user_serialize = UserSerialize()\n    result = user_serialize.get()\n\n    return jsonify(result)\n```\n\n\u8bf7\u770b\u7ed3\u679c\n\n![image-20220127195443704](img/result1.png)\n\n\n\n\n\n\n\n**\u5f53\u7136\u4e86\u5b83\u4e5f\u652f\u6301\u5bf9\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u8fdb\u884c\u66f4\u6539\uff0c\u4f46\u662f\u4f60\u5fc5\u987b\u8981\u5728\u4f60\u5b9a\u4e49\u7684model\u7c7b\u4e2d\u52a0\u5165`cnme`\u65b9\u6cd5\u5e76\u7528`@property`\u88c5\u9970\u5668\u5c06\u5176\u88c5\u9970\u6210`\u5c5e\u6027`**\n\n\u4ee3\u7801\u5982\u4e0b\u6240\u793a\n\n```python\nfrom sqlalchemy import orm, BIGINT, Column, TIMESTAMP, BOOLEAN, VARCHAR, TEXT, Integer, DateTime\nfrom sqlalchemy.dialects.mysql import TINYINT\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\n\nBase = declarative_base()\n\n# \u770b\u5230\u6ca1\u5b83\u8fd8\u662f\u50cf\u4ee5\u524d\u4e00\u6837\nclass AppletUser(Base):\n    __tablename__ = \"applet_user\"\n\n    id = Column(BIGINT,primary_key=True,info='\u7528\u6237\u4e3b\u952eid')\n    wx_unique_identification = Column(VARCHAR(256),info='wx\u7aef\u4f20\u5165\u7684\u552f\u4e00\u6807\u8bc6',default='')\n    wx_user_nickname = Column(VARCHAR(256),info='wx\u7528\u6237\u7684\u6635\u79f0',default=\"\")\n    # wx_user_nickname = Column(VARCHAR(256),info='wx\u7528\u6237\u7684\u6635\u79f0',default=\"dw{}\".format(client.get_guid()))\n    wx_user_avatar = Column(VARCHAR(256),info='wx\u7528\u6237\u7684\u5934\u50cfurl',default='')\n    wx_user_phone = Column(VARCHAR(256),info='\u7528\u6237\u7535\u8bdd\u53f7\u7801',default='')\n    wx_user_country = Column(VARCHAR(256),info='\u7528\u6237\u6240\u5728\u56fd\u5bb6',default='\u4e2d\u56fd')\n    wx_user_province = Column(VARCHAR(256),info='\u7528\u6237\u6240\u5728\u7701\u4efd/\u5dde',default='\u5317\u4eac')\n    wx_user_city = Column(VARCHAR(256),info='\u7528\u6237\u6240\u5728\u57ce\u5e02',default='\u5317\u4eac')\n    wx_user_gender = Column(TINYINT,info='0\u4e3a\u672a\u77e5,1\u4e3a\u7537\u6027,2\u4e3a\u5973\u6027',default=0)\n    user_memberorder = Column(TINYINT,info='0\u4e3a\u666e\u901a\u7528\u6237,1\u4e3a\u767d\u94f6\u4f1a\u5458,2\u4e3a\u9ec4\u91d1\u4f1a\u5458,3\u4e3a\u94c2\u91d1\u4f1a\u5458,4\u4e3a\u94bb\u77f3\u4f1a\u5458,5\u4e3a\u8d85\u7ea7\u4f1a\u5458',default=0)\n    user_integral = Column(BIGINT, info='\u7528\u6237\u79ef\u5206', default=0)\n    user_balance = Column(BIGINT,info='\u7528\u6237\u4f59\u989d',default=0)\n    is_activate = Column(BOOLEAN,info='\u662f\u5426\u6fc0\u6d3b,\u9ed8\u8ba4\u4e3a\u6fc0\u6d3b\u72b6\u6001',default=False)\n    soft_delete = Column(BOOLEAN, info='\u540e\u53f0\u7cfb\u7edf\u662f\u5426\u8f6f\u5220\u9664\u5220\u9664,True\u4e3a\u5220\u9664,False\u4e3a\u672a\u5220\u9664',default=False)\n    create_time = Column(DateTime, server_default= func.now(), info='\u7528\u6237\u521b\u5efa\u65f6\u95f4')\n    update_time = Column(DateTime, server_default= func.now(), onupdate=func.now(), info='\u7528\u6237\u66f4\u65b0\u65f6\u95f4')\n\n    # TODO \u7531\u4e8ewx\u5b98\u65b9\u4e0d\u4f1a\u5bf9\u7528\u6237\u4ee5\u524d\u7684\u5934\u50cfurl\u8fdb\u884c\u6e05\u9664\uff0c\u4e00\u65e6wx\u7528\u6237\u66f4\u6539\u5934\u50cf\u5c31\u4f1a\u9020\u6210wx\u7528\u6237\u5934\u50cf\u66f4\u6539\u5c0f\u7a0b\u5e8f\u7aef\u4e0d\u4f1a\u66f4\u6539\u7684\u95ee\u9898\uff0c\n    #  \u6240\u4ee5\u5f53\u7528\u6237\u6362\u5934\u50cf\u7684\u65f6\u5019\u5c0f\u7a0b\u5e8f\u4e5f\u8981\u8ddf\u7740\u6362\uff0c\u7279\u5b9a\u4e49\u6b64\u5b57\u6bb5\u7528\u4ee5\u5b58\u50a8\u7528\u6237\u4ee5\u524d\u7684\u5934\u50cf\n    user_previous_avatar_text = Column(TEXT,info='\u5b58\u50a8\u7528\u6237\u4ee5\u524d\u5934\u50cfURL')\n\t\n    ########\u5dee\u5f02\u4e4b\u5904##############\n    @property\n    def cname(self):\n        return {'wx_unique_identification':'unique_identification'}\n\n    def __repr__(self):\n        return \"<AppletUser(id='%s',wx_user_nickname='%s')>\"%(self.id,self.wx_user_nickname)\n```\n\n\n\n**`cname`\u5c5e\u6027\u5185\u90e8\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5b57\u5178\u7684key\u4e3a\u539f\u59cb\u5b57\u6bb5\u540d\uff0cvalue\u5219\u4e3a\u5e8f\u5217\u5316\u4e4b\u540e\u7684\u540d\u5b57**\n\n\u5982\u56fe\u6240\u793a\n\n![image-20220127200040550](img/result2.png)\n\n\n\n^_^  \u4ee5\u540e\u4f1a\u7ee7\u7eed\u66f4\u65b0\u6ef4\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/pypa/sampleproject",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flask-simpleserialize",
            "package_url": "https://pypi.org/project/flask-simpleserialize/",
            "platform": "",
            "project_url": "https://pypi.org/project/flask-simpleserialize/",
            "project_urls": {
                "Homepage": "https://github.com/pypa/sampleproject"
            },
            "release_url": "https://pypi.org/project/flask-simpleserialize/0.0.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "\u4e00\u4e2a\u9488\u5bf9\u4e8eflask\u6846\u67b6\u7684\u5e8f\u5217\u5316\u5de5\u5177",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12709288,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f82aed0eb5bc07a72577117bfbeb8920",
                    "sha256": "2f7d537c89a4acf6bf634a86ac2b7b676385773a382418858b66e2596ba2af51"
                },
                "downloads": -1,
                "filename": "flask_simpleserialize-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f82aed0eb5bc07a72577117bfbeb8920",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 5957,
                "upload_time": "2022-01-27T12:14:05",
                "upload_time_iso_8601": "2022-01-27T12:14:05.040569Z",
                "url": "https://files.pythonhosted.org/packages/5b/46/788d26d9a5a1e2b7fc6cb7fd50b29675747a7e500d3b658d77438ac5567a/flask_simpleserialize-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f4c8dffe818ab2b53ea008b05c278bb",
                    "sha256": "d1ed225cd6b76cb2acf6669c110d51f09820a48e60f3cd45afc31dd78c08ff15"
                },
                "downloads": -1,
                "filename": "flask-simpleserialize-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "4f4c8dffe818ab2b53ea008b05c278bb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5281,
                "upload_time": "2022-01-27T12:14:06",
                "upload_time_iso_8601": "2022-01-27T12:14:06.760392Z",
                "url": "https://files.pythonhosted.org/packages/e1/82/7f5c833f6da2f17923a5615d1bd070c802ae306f1b7f758ba4c918b0db3f/flask-simpleserialize-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}