{
    "0.1.0": {
        "info": {
            "author": "Jens Diemer",
            "author_email": "pysmartmeter@jensdiemer.de",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/jedie/pysmartmeter",
            "keywords": "",
            "license": "GPL-3.0-or-later",
            "maintainer": "Jens Diemer",
            "maintainer_email": "pysmartmeter@jensdiemer.de",
            "name": "pysmartmeter",
            "package_url": "https://pypi.org/project/pysmartmeter/",
            "platform": null,
            "project_url": "https://pypi.org/project/pysmartmeter/",
            "project_urls": {
                "Bug Tracker": "https://github.com/jedie/pysmartmeter/issues",
                "Homepage": "https://github.com/jedie/pysmartmeter"
            },
            "release_url": "https://pypi.org/project/pysmartmeter/0.1.0/",
            "requires_dist": [
                "bx_py_utils",
                "paho-mqtt",
                "pyserial",
                "rich",
                "typer"
            ],
            "requires_python": ">=3.9,<4.0.0",
            "summary": "Collect data from Hitchi Smartmeter and expose it via MQTT",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16165474,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3070e3e60211527b073265b92dfd6895",
                    "sha256": "c50968824905de9a3c237f303caaf6224c7822a3208ad48f2c6f7b005d61fdf8"
                },
                "downloads": -1,
                "filename": "pysmartmeter-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3070e3e60211527b073265b92dfd6895",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<4.0.0",
                "size": 37314,
                "upload_time": "2022-11-18T20:05:06",
                "upload_time_iso_8601": "2022-11-18T20:05:06.318883Z",
                "url": "https://files.pythonhosted.org/packages/53/88/188b9b0443a678cf10593f2613a298bca2a2c2ed231f51af74ba5986253f/pysmartmeter-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e0a5a797a918d292f5e83d2a1478016c",
                    "sha256": "d53111b6bce07b797e5656671776af39e0a2a3bc2804b3bb8f32f04a36b20aa6"
                },
                "downloads": -1,
                "filename": "pysmartmeter-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e0a5a797a918d292f5e83d2a1478016c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9,<4.0.0",
                "size": 29807,
                "upload_time": "2022-11-18T20:05:08",
                "upload_time_iso_8601": "2022-11-18T20:05:08.039752Z",
                "url": "https://files.pythonhosted.org/packages/81/43/5acb5182c5f6cd3f47b662bcbbf83d3bfe62cac83af03f572f1424e65881/pysmartmeter-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "Jens Diemer",
            "author_email": "pysmartmeter@jensdiemer.de",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# pysmartmeter\n\nCollect data from Hichi Smartmeter aka `volkszaehler.org` (USB Version) and expose it via MQTT.\n\nIn the end it can looks like the following [Home Assistant](https://www.home-assistant.io/) dashboard screenshot, using [MQTT integration](https://www.home-assistant.io/integrations/mqtt):\n\n![2022-11-21_13-47.png](https://raw.githubusercontent.com/jedie/jedie.github.io/master/screenshots/pysmartmeter/2022-11-21_13-47.png \"2022-11-21_13-47.png\")\n\nWith my \"eBZ DD3\" energy meterby eBZ GmbH the values update live every second ;)\n\n\n## quickstart\n\nInstall minimum requirements, e.g.:\n```bash\n~$ sudo apt install make python3-venv\n```\n\nClone sources and install project:\n```bash\n~$ git clone https://github.com/jedie/pysmartmeter.git\n~$ cd pysmartmeter\n~/pysmartmeter$ make install-poetry\n~/pysmartmeter$ make install\n~/pysmartmeter$ ./cli.sh --help\n+ exec .venv/bin/python -m pysmartmeter --help\nPySmartMeter v0.1.0\n\n Usage: python -m pysmartmeter [OPTIONS] COMMAND [ARGS]...\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --install-completion        [bash|zsh|fish|powershell|pwsh]  Install completion for the specified \u2502\n\u2502                                                              shell.                               \u2502\n\u2502                                                              [default: None]                      \u2502\n\u2502 --show-completion           [bash|zsh|fish|powershell|pwsh]  Show completion for the specified    \u2502\n\u2502                                                              shell, to copy it or customize the   \u2502\n\u2502                                                              installation.                        \u2502\n\u2502                                                              [default: None]                      \u2502\n\u2502 --help                                                       Show this message and exit.          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 check-code-style                                                                                  \u2502\n\u2502 coverage                     Run and show coverage.                                               \u2502\n\u2502 debug-settings               Display (anonymized) MQTT server username and password               \u2502\n\u2502 debug-systemd-service        Just print the systemd service file content                          \u2502\n\u2502 detect-serial                Just print the detected serial port instance                         \u2502\n\u2502 dump                         Just dump serial output                                              \u2502\n\u2502 fix-code-style               Fix code style via darker                                            \u2502\n\u2502 mypy                         Run Mypy (configured in pyproject.toml)                              \u2502\n\u2502 publish-loop                 Publish current data via MQTT (endless loop)                         \u2502\n\u2502 setup-systemd-service        Setup PySmartMeter systemd services and starts it.                   \u2502\n\u2502 store-settings               Store MQTT server settings.                                          \u2502\n\u2502 systemd-status               Call systemd status of PySmartMeter services                         \u2502\n\u2502 systemd-stop                 Stop PySmartMeter systemd services                                   \u2502\n\u2502 test                         Run unittests                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n```\n\nTest if you Hichi Smartmeter with CP2102 USB to UART Bridge Controller will be found, e.g.:\n```bash\n~/pysmartmeter$ ./cli.sh detect-serial\n```\n\nMaybe you didn't have permissions to access the port, e.g.:\n```bash\n~/pysmartmeter$ ./cli.sh dump\n...\ntry: /dev/ttyUSB0 CP2102 USB to UART Bridge Controller - CP2102 USB to UART Bridge Controller USB VID:PID=10C4:EA60\n/dev/ttyUSB0 file mode: 0o20660\n/dev/ttyUSB0 user ID: 0\n/dev/ttyUSB0 user group ID: 20\n/dev/ttyUSB0 user group: 'dialout'\nERROR: [Errno 13] could not open port /dev/ttyUSB0: [Errno 13] Permission denied: '/dev/ttyUSB0'\n...\n```\n\nFix fiy by add the user to the group, e.g.:\n```bash\nsudo usermod -a -G dialout $USER\n```\n\n## publish smartmeter data via MQTT\n\nYou have to store your MQTT settings (host, port, username, password) one time, e.g.:\n```bash\n~/pysmartmeter$ ./cli.sh store-settings\n```\nThis will create a JSON file here: `~/.pysmartmeter`\n\nYou can test reading this settings file with:\n```bash\n~/pysmartmeter$ ./cli.sh debug-settings\n```\n\nSetup systemd service:\n```bash\n~/pysmartmeter$ sudo ./cli.sh setup-systemd-service\n```\nThis will create a systemd service that automaticly starts on every boot.\n\nCheck if service is running:\n```bash\n~/pysmartmeter$ sudo ./cli.sh systemd-status\n```\n\nIf everything is fine: Go to your [Home Assistant and check the MQTT integration](https://www.home-assistant.io/integrations/mqtt/)\nThe device discovery will be made automaticly.\n\n# various links\n\n* https://github.com/pyserial/pyserial\n* https://github.com/eclipse/paho.mqtt.python\n* https://github.com/eclipse/mosquitto\n* https://dewiki.de/Lexikon/OBIS-Kennzahlen (de) | https://www.promotic.eu/en/pmdoc/Subsystems/Comm/PmDrivers/IEC62056_OBIS.htm (en)\n* https://www.photovoltaikforum.com/thread/145886-habe-lesk%C3%B6pfe-mit-usb-%C3%BCber/ (de)\n* https://www.heise.de/tests/Ausprobiert-Guenstiger-IR-Lesekopf-fuer-Smart-Meter-mit-Tastmota-Firmware-7065559.html (de)\n* https://www.home-assistant.io\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/jedie/pysmartmeter",
            "keywords": "",
            "license": "GPL-3.0-or-later",
            "maintainer": "Jens Diemer",
            "maintainer_email": "pysmartmeter@jensdiemer.de",
            "name": "pysmartmeter",
            "package_url": "https://pypi.org/project/pysmartmeter/",
            "platform": null,
            "project_url": "https://pypi.org/project/pysmartmeter/",
            "project_urls": {
                "Bug Tracker": "https://github.com/jedie/pysmartmeter/issues",
                "Homepage": "https://github.com/jedie/pysmartmeter"
            },
            "release_url": "https://pypi.org/project/pysmartmeter/0.2.0/",
            "requires_dist": [
                "bx_py_utils",
                "paho-mqtt",
                "pyserial",
                "rich",
                "typer"
            ],
            "requires_python": ">=3.9,<4.0.0",
            "summary": "Collect data from Hichi Smartmeter and expose it via MQTT",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16165474,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9c352c0092ef2adcc466f7a770625574",
                    "sha256": "b0d722d1b198b5b82e287c004b17e90e527e9857b1b27a2332e4478c316a75fd"
                },
                "downloads": -1,
                "filename": "pysmartmeter-0.2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9c352c0092ef2adcc466f7a770625574",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<4.0.0",
                "size": 39615,
                "upload_time": "2022-12-20T20:22:05",
                "upload_time_iso_8601": "2022-12-20T20:22:05.710331Z",
                "url": "https://files.pythonhosted.org/packages/76/33/10885bddf4bf0a7d59cbb93adb630269b5eed517d7684c00adcb651ffa89/pysmartmeter-0.2.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "575877f7a945ffba40644f914bdae9f4",
                    "sha256": "81d613210d9b5ed4cc70491f197661aa89e6d1ee5abd294cc87c29e2a69b417f"
                },
                "downloads": -1,
                "filename": "pysmartmeter-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "575877f7a945ffba40644f914bdae9f4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9,<4.0.0",
                "size": 32294,
                "upload_time": "2022-12-20T20:22:07",
                "upload_time_iso_8601": "2022-12-20T20:22:07.492907Z",
                "url": "https://files.pythonhosted.org/packages/a3/7a/ab6c6f43245fd5ab7dece65887c14e4fbb83aad59e61b6c5f559186b1719/pysmartmeter-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}