{
    "0.0.1": {
        "info": {
            "author": "Roman Fitzjalen",
            "author_email": "romaactor@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kndahl/neulab",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neulab",
            "package_url": "https://pypi.org/project/neulab/",
            "platform": null,
            "project_url": "https://pypi.org/project/neulab/",
            "project_urls": {
                "Homepage": "https://github.com/kndahl/neulab"
            },
            "release_url": "https://pypi.org/project/neulab/0.0.1/",
            "requires_dist": [
                "numpy",
                "pandas",
                "scipy"
            ],
            "requires_python": "",
            "summary": "Tool for data preprocess in ML.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14579500,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f142613c42df2e0610a3cb93af5a8c6",
                    "sha256": "78b7b1751f430c54ea35ec99927be736849c08530ad209676c60ff55f5b72784"
                },
                "downloads": -1,
                "filename": "neulab-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4f142613c42df2e0610a3cb93af5a8c6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 8767,
                "upload_time": "2022-05-11T14:44:04",
                "upload_time_iso_8601": "2022-05-11T14:44:04.106513Z",
                "url": "https://files.pythonhosted.org/packages/28/71/d397d2b930bab7a4a07b4c7a862c378806b1a46e9107f574088856402b5c/neulab-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Roman Fitzjalen",
            "author_email": "romaactor@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kndahl/neulab",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neulab",
            "package_url": "https://pypi.org/project/neulab/",
            "platform": null,
            "project_url": "https://pypi.org/project/neulab/",
            "project_urls": {
                "Homepage": "https://github.com/kndahl/neulab"
            },
            "release_url": "https://pypi.org/project/neulab/0.0.2/",
            "requires_dist": [
                "numpy",
                "pandas",
                "scipy"
            ],
            "requires_python": "",
            "summary": "Tool for data preprocess in ML.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14579500,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cbee9165eeb1ff1e5d1bc666ef531359",
                    "sha256": "f090ba8e73814edb5908e4af4fe5eefe2bba6285731f754da4cd30696f1b4987"
                },
                "downloads": -1,
                "filename": "neulab-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cbee9165eeb1ff1e5d1bc666ef531359",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 9828,
                "upload_time": "2022-05-13T16:21:10",
                "upload_time_iso_8601": "2022-05-13T16:21:10.231812Z",
                "url": "https://files.pythonhosted.org/packages/13/3b/ee2dd3c202bf546cdc7589d16b76679d00fa24e2964c151fc8b2d9f0c7d8/neulab-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.21": {
        "info": {
            "author": "Roman Fitzjalen",
            "author_email": "romaactor@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kndahl/neulab",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neulab",
            "package_url": "https://pypi.org/project/neulab/",
            "platform": null,
            "project_url": "https://pypi.org/project/neulab/",
            "project_urls": {
                "Homepage": "https://github.com/kndahl/neulab"
            },
            "release_url": "https://pypi.org/project/neulab/0.0.21/",
            "requires_dist": [
                "numpy",
                "pandas",
                "scipy"
            ],
            "requires_python": "",
            "summary": "Tool for data preprocess in ML.",
            "version": "0.0.21",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14579500,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0ed4013120e920f053c0e933bb4b1e13",
                    "sha256": "31cfdc43d67c472b3e2e9ba6e97ee11639b1eb6a569e1f1fbb594e75898d58b3"
                },
                "downloads": -1,
                "filename": "neulab-0.0.21-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0ed4013120e920f053c0e933bb4b1e13",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 9837,
                "upload_time": "2022-05-14T10:04:31",
                "upload_time_iso_8601": "2022-05-14T10:04:31.332217Z",
                "url": "https://files.pythonhosted.org/packages/06/fd/734c807c1971a28b1d63a99cb2648587f6223187145a1996e5d6efc11fcd/neulab-0.0.21-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.22": {
        "info": {
            "author": "Roman Fitzjalen",
            "author_email": "romaactor@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kndahl/neulab",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neulab",
            "package_url": "https://pypi.org/project/neulab/",
            "platform": null,
            "project_url": "https://pypi.org/project/neulab/",
            "project_urls": {
                "Homepage": "https://github.com/kndahl/neulab"
            },
            "release_url": "https://pypi.org/project/neulab/0.0.22/",
            "requires_dist": [
                "numpy",
                "pandas",
                "scipy"
            ],
            "requires_python": "",
            "summary": "Tool for data preprocess in ML.",
            "version": "0.0.22",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14579500,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "96581420433ecde2029b683fcaa5c629",
                    "sha256": "4d69868f526458808ea8ac6c7e8cc86eec5184a4e495169db4048b6e17e755e1"
                },
                "downloads": -1,
                "filename": "neulab-0.0.22-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "96581420433ecde2029b683fcaa5c629",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 10953,
                "upload_time": "2022-05-15T17:59:43",
                "upload_time_iso_8601": "2022-05-15T17:59:43.035089Z",
                "url": "https://files.pythonhosted.org/packages/6c/02/4787b09c354718840f55f29a0d85d39cd63f9f6fa925b8cd093b5cf79daa/neulab-0.0.22-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.23": {
        "info": {
            "author": "Roman Fitzjalen",
            "author_email": "romaactor@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# neulab\nTool for data preprocess in ML.\n\n[![Downloads](https://pepy.tech/badge/neulab)](https://pepy.tech/project/neulab)\n# Installation\n```\npip install neulab\n```\n# Usage\n\n## Algorithms\n### Mean\n#### Algorithm for calculating the average value\n```python\nfrom neulab.Algorithms import Mean\n\nd = {'col1': [0, 1, 2]}\ndf = pd.DataFrame(data=d)\n\nmean = Mean(vector=df.col1)\n\nOutput: 1\n```\n### Median\n#### Algorithm for calculating the median value\n```python\nfrom neulab.Algorithms import Median\nd = {'col1': [0, 1, 2, 3]}\n\ndf = pd.DataFrame(data=d)\nmedian = Median(vector=df.col1)\n\nOutput: 1.5\n```\n### Mode\n#### Mode Calculation Algorithm\n```python\nfrom neulab.Algorithms import Mode\n\nd = {'col1': [0, 1, 2, 3, 1]}\ndf = pd.DataFrame(data=d)\n\nmode = Mode(vector=df.col1)\n\nOutput: 1\n```\n### Standart Deviation\n#### Standard Deviation Algorithm\n```python\nfrom neulab.Algorithms import StdDeviation\n\nd = {'col1': [8.02, 8.16, 3.97, 8.64, 0.84, 4.46, 0.81, 7.74, 8.78, 9.26, 20.46, 29.87, 10.38, 25.71]}\ndf = pd.DataFrame(data=d)\nstd = StdDeviation(df.col1)\n\nOutput: 8.767464705525615\n```\n### Is Symmetric\n#### Detects if vector is symmetric or asymmetric.\n```python\nfrom neulab.Algorithms import IsSymmetric\n\nd = {'col1': [8.02, 8.16, 3.97, 8.64, 0.84, 4.46, 0.81, 7.74, 8.78, 9.26, 20.46, 29.87, 10.38, 25.71]}\ndf = pd.DataFrame(data=d)\nsymmtr = IsSymmetric(vector=df.col1)\n\nOutput: True\n```\n### Euclid metric\n#### Algorithm for calculating the distance using the Euclidean metric\n```python\nfrom neulab.Algorithms import EuclidMertic\n\nd = {'col1': [0, 1, 2], 'col2': [2, 1, 0]}\ndf = pd.DataFrame(data=d)\n\neuqld  = EuclidMertic(vector1=df.col1, vector2=df.col2) \n\nOutput: 2.8284271247461903\n```\n### Manhattan metric\n#### Algorithm for calculating the distance using the Manhattan metric\n```python\nfrom neulab.Algorithms import ManhattanMetric\n\nd = {'col1': [0, 1, 2], 'col2': [2, 1, 0]}\ndf = pd.DataFrame(data=d)\n\nmnht = ManhattanMetric(vector1=df.col1, vector2=df.col2) \n\nOutput: 4.0\n```\n### Max Metric\n#### Algorithm for calculating the distance using the Max metric\n```python\nfrom neulab.Algorithms import MaxMetric\n\nd = {'col1': [0, 1, 2], 'col2': [2, 1, 0]}\ndf = pd.DataFrame(data=d)\n\nmx = MaxMetric(vector1=df.col1, vector2=df.col2)\n\nOutput: 2\n```\n### Correlation Coefficient\n#### Algorithm for calculating the correlation coefficient\n```python\nfrom neulab.Algorithms import CorrelationCoefficient\n\nd = {'col1': [99, 89, 91, 91, 86, 97], 'col2': [58, 48, 54, 54, 44, 56]}\ndf = pd.DataFrame(data=d)\n\ncc = CorrelationCoefficient(vector1=df.col1, vector2=df.col2)\n\nOutput: 0.906843948104356\n```\n\n## Restore value methods\n### You have to send df with NaN value. It is important that there is only one NaN in the table..\nExample:\n```\n   P1  P2  P3  P4   P5\n0   3   4   5   3  4.0\n1   5   5   5   4  3.0\n2   4   3   3   2  5.0\n3   5   4   3   3  NaN\n```\n### Recovery with metrics\n```python\nfrom neulab.RestoreValue import MetricRestore\n\nd = {'P1': [3, 5, 4, 5], 'P2': [4, 5, 3, 4], 'P3': [5, 5, 3, 3], 'P4': [3, 4, 2, 3], 'P5': [4, 3, 5, np.NaN]}\ndf = pd.DataFrame(data=d)\n\n# Euclid\neuclid_m = MetricRestore(df, row_start=0, row_end=9, metric='euclid')\n# Manhattan\nmnht_m = MetricRestore(df, row_start=0, row_end=9, metric='manhattan')\n# Max\nmx_m = MetricRestore(df, row_start=0, row_end=9, metric='max')\n\nOutput: \neuclid_m = 4.13\nmnht_m = 4.1\nmx_m = 4.25\n```\n### Recovery with correlation coefficient\n```python\nfrom neulab.RestoreValue import CorrCoefRestore\n\nd = {'G': [99, 89, 91, 91, 86, 97, np.NaN], 'T': [56, 58, 64, 51, 56, 53, 51], 'B': [91, 89, 91, 91, 84, 86, 91], 'R': [160, 157, 165, 170, 157, 175, 165], 'W': [58, 48, 54, 54, 44, 56, 54]}\ndf = pd.DataFrame(data=d)\n\ncc = CorrCoefRestore(df=df, row_start=0, row_end=9)\n\nOutput: 94.21\n```\n\n## Outliers Detection\n### Simple Outlier Detection Algorithm\n#### Algorithm detects and removes (if autorm is True) rows containing the outlier. Returns cleared dataframe.\n```python\nfrom neulab.OutlierDetection import SimpleOutDetect\n\nd = {'col1': [1, 0, 342, 1, 1, 0, 1, 0, 1, 255, 1, 1, 1, 0, ]}\ndf = pd.DataFrame(data=d)\n\nsd = SimpleOutDetect(dataframe=df, info=False, autorm=True)\n\nOutput: Detected outliers: {'col1': [342, 255]}\n\nindex\tcol1\n0\t   1\n1\t   0\n3\t   1\n4\t   1\n5\t   0 \n6\t   1\n7\t   0\n8\t   1\n10\t   1\n11\t   1\n12\t   1\n13\t   0\n```\n\n### Chauvenet Algorithm\n#### Chauvenet Algorithm detects and removes (if autorm is True) rows containing the outlier. Returns cleared dataframe.\n```python\nfrom neulab.OutlierDetection import Chauvenet\n\nd = {'col1': [8.02, 8.16, 3.97, 8.64, 0.84, 4.46, 0.81, 7.74, 8.78, 9.26, 20.46, 29.87, 10.38, 25.71], 'col2': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}\ndf = pd.DataFrame(data=d)\n\nchvn = Chauvenet(dataframe=df, info=True, autorm=True)\n\nOutput: Detected outliers: {'col1': [29.87, 25.71, 20.46, 0.84, 0.81, 3.97, 4.46, 10.38, 7.74, 9.26]}\n\n\tcol1\tcol2\n0\t8.02\t1\n1\t8.16\t1\n3\t8.64\t1\n8\t8.78\t1\n```\n### Quratile algorithm\n#### Quratile algorithm doest use standart deviation and average mean. Remove all outliers from the vector. Returns cleared dataframe is autorm is True.\n\n```python\nfrom neulab.OutlierDetection import Quratile\n\nd = {'col1': [-6, 0, 1, 2, 4, 5, 5, 6, 7, 100], 'col2': [-1, 0, 1, 2, 0, 0, 1, 0, 50, 13]}\ndf = pd.DataFrame(data=d)\n\nqurtl = Quratile(dataframe=df, info=True, autorm=True)\n\nOutput: Detected outliers: {'col1': [-6, 100], 'col2': [50]}\n\nindex col1\tcol2\n1\t   0\t   0\n2\t   1\t   1\n3\t   2\t   2\n4\t   4\t   0\n5\t   5\t   0\n6\t   5\t   1\n7\t   6\t   0\n```\n### Metric algorithm\n#### An outlier search algorithm using metrics. The metrics calculate the distance between features and then filter using the quantile algorithm. Returns cleared dataframe if autorm is True.\n```python\nfrom neulab.OutlierDetection import DistQuant\n\nd = {'col1': [-6, 0, 1, 2, 4, 5, 5, 6, 7, 100], 'col2': [-1, 0, 1, 2, 0, 0, 1, 0, 50, 13]}\ndf = pd.DataFrame(data=d)\n\nmdist = DistQuant(dataframe=df, metric='manhattan', filter='quantile', info=True, autorm=True)\n\nOutput: Distances: {0: 260.0, 1: 204.0, 2: 198.0, 3: 198.0, 4: 190.0, 5: 190.0, 6: 190.0, 7: 194.0, 8: 566.0, 9: 1014.0}\n\nindex col1\tcol2\n1\t   0\t0\n2\t   1\t1\n3          2    2\n4\t   4\t0\n5\t   5\t0\n6\t   5\t1\n7\t   6\t0\n```\n\n### Dixon\u2019s Q Test\n#### Dixon\u2019s Q test, or just the \u201cQ Test\u201d is a way to find outliers in very small, normally distributed, data sets. Small data sets are usually defined as somewhere between 3 and 7 items. It\u2019s commonly used in chemistry, where data sets sometimes include one suspect observation that\u2019s much lower or much higher than the other values. Keeping an outlier in data affects calculations like the mean and standard deviation, so true outliers should be removed. This test should be used sparingly and never more than once in a data set. Returns cleared dataframe if autorm is True.\n```python\nfrom neulab.OutlierDetection import DixonTest\nd = {'col1': [2131, 180, 188, 177, 181, 185, 189], 'col2': [0, 0, 0, 0, 1, 13, 1]}\ndf = pd.DataFrame(data=d)\nqtest = DixonTest(dataframe=df, q=95, info=True, autorm=True)\n\nOutput:\nDetected outlier: \n   col1  col2\n0  2131     0\nDetected outlier: \n   col1  col2\n5   185    13\nindex \t\tcol1\t\tcol2\n1\t\t180\t\t0\n2\t\t188\t\t0\n3\t\t177\t\t0\n4\t\t181\t\t1\n6\t\t189\t\t1\n```\n\n### CGraph clustering algorithm\n#### Graph based clustering algorithm. The algorithm itself determines the number of clusters. Returns clusters linked in an array. \n##### Arguments:\n###### df - DataFrame\n###### metric - Metric for finding distance (manhattan, euclid, max). Default - euclid.\n###### r - R coefficient is involved in clustering and has a big impact on the result. Default - std.\n###### rnd - Round (numbers after the decimal point). Default 3.\n###### draw - Draw graph. Default - False.\n###### info - Print info. Default - True.\n```python\nimport pandas as pd\nfrom neulab.Clustering import CGraph\nd = {'Age': [18, 33, 42, 24, 19, 25], 'Sex': [0, 1, 1, 0, 2, 2]}\ndf = pd.DataFrame(data=d, index=['A', 'B', 'C', 'D', 'E', 'F'])\n\nclusters = CGraph(df, metric='manhattan', r='std', rnd=3, draw=False, info=True)\n\nOutput:\nDistances: {'A|B': 1.125, 'A|C': 1.5, 'A|D': 0.25, 'A|E': 1.042, 'A|F': 1.292, 'B|C': 0.375, 'B|D': 0.875, 'B|E': 1.083, 'B|F': 0.833, 'C|B': 0.375, 'C|D': 1.25, 'C|E': 1.458, 'C|F': 1.208, 'D|B': 0.875, 'D|C': 1.25, 'D|E': 1.208, 'D|F': 1.042, 'E|B': 1.083, 'E|C': 1.458, 'E|D': 1.208, 'E|F': 0.25}\nR = 0.388\nFound clusters: [['D', 'A'], ['C', 'B'], ['E', 'F']]\n```\n![plot](docs/cgraph.png)\n\n### CGraphMST clustering algorithm\n#### Graph based clustering algorithm.The user himself sets the number of clusters. Returns clusters linked in an array. \n##### Arguments:\n###### df - DataFrame\n###### clst_num - number of clusters.\n###### metric - Metric for finding distance (manhattan, euclid, max). Default - euclid.\n###### rnd - Round (numbers after the decimal point). Default 3.\n###### draw - Draw graph. Default - False.\n###### info - Print info. Default - True.\n```python\nimport pandas as pd\nfrom neulab.Clustering import CGraphMST\n\nd = {'Age': [18, 33, 42, 24, 19, 25], 'Sex': [0, 1, 1, 0, 2, 2]}\ndf = pd.DataFrame(data=d, index=['A', 'B', 'C', 'D', 'E', 'F'])\n\nclusters = CGraphMST(df, clst_num=3, metric='manhattan', rnd=3, draw=True, info=True)\n```\n![plot](docs/mstgraph.png)\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/kndahl/neulab",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neulab",
            "package_url": "https://pypi.org/project/neulab/",
            "platform": null,
            "project_url": "https://pypi.org/project/neulab/",
            "project_urls": {
                "Homepage": "https://github.com/kndahl/neulab"
            },
            "release_url": "https://pypi.org/project/neulab/0.0.23/",
            "requires_dist": [
                "numpy",
                "pandas",
                "scipy",
                "networkx",
                "matplotlib"
            ],
            "requires_python": "",
            "summary": "Tool for data preprocess in ML.",
            "version": "0.0.23",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14579500,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ee47542ada45f20fa69c2810ec1fbd6d",
                    "sha256": "3490c16b35521b74208231634a164908d52e9578b51381514a7cfc554a9da664"
                },
                "downloads": -1,
                "filename": "neulab-0.0.23-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ee47542ada45f20fa69c2810ec1fbd6d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 13473,
                "upload_time": "2022-07-28T16:40:15",
                "upload_time_iso_8601": "2022-07-28T16:40:15.967598Z",
                "url": "https://files.pythonhosted.org/packages/dd/43/8826e4ab3cbeb47c82a0c0b5daef06b69b3a193f83fa7161e92062bfee6a/neulab-0.0.23-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}