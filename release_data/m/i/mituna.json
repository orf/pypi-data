{
    "0.1": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# TUNA \nTuna is a distributed tuning infrastructure that provides pre-compiled kernels for MIOpen customers\nthrough automated Jenkins pipelines and SLURM scalable architecture.\n\n\n## Prerequisites\nInstall python3.9\n```\napt-get update && apt-get install software-properties-common\nadd-apt-repository ppa:deadsnakes/ppa\napt install python3.9\n```\n\nInstall pip for python3.9\n```\nwget https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython3.9 get-pip.py\nrm get-pip.py\n```\n\nInstall MySQL server\n```\napt-get install mysql-server\n```\n\nEnable the service\n```\nsystemctl start mysql\n```\n\nInstall ipmitool\n```\napt-get install ipmitool\n```\n\nSetup passwordless ssh between all machines, for example:\n```\nssh-keygen -t rsa\nssh-copy-id <user>@<ip-address>\nssh <user>@<ip-address>\n```\nFor the tuning cycle, every machine needs to be able to access every other machine through\npasswordless ssh.\n\n\n## Installation\nClone the repo using \n```\ngit clone <repo url>\n```\nEnter the Tuna directory\n```\ncd MITuna\n```\nCreate a virtual envornment, and activate it (by sourcing its `activate` script)\n```\nvirtualenv -p python3.9 myvenv\nsource myvenv/bin/activate\n```\nInstall the required dependencies:\n```\npython3.9 -m pip install -r requirements.txt\n```\nThe above assumes that Tuna lives in the home directory and the virtual environment was created using the command indicated above.\n\nAdd the following environment variables to a local file and then source the file:\n```\nexport TUNA_DB_USER_NAME=root\nexport TUNA_DB_PASSWORD=<password for root>\nexport TUNA_DB_HOSTNAME=localhost\nexport TUNA_DB_NAME=<database_name>\nexport gateway_ip=<gateway_ip>\nexport gateway_port=<gateway_port>\nexport gateway_user=<gateway_user>\n```\n\nAll machines used in the tuning process must have ssh-keys enabled. MITuna needs to\nhave all-to-all machine communication available and passwords must not be required at run-time.\n\nRun the setup scripts:\n```\npython3.9 setup.py develop\n```\n\nThe root tuna folder needs to be appeneded to the PYTHONAPTH:\n```\nexport PYTHONPATH=/<path_to_MITuna>/:$PYTHONPATH\n```\n\nTo create the database run the following script:\n```\n./tuna/db_tables.py\n```\n\nThe installation and setup are now complete. To start a tuning cycle, please follow the steps\ndocumented in [TuningCycle](https://github.com/ROCmSoftwarePlatform/MITuna/blob/develop/doc/TuningCycle.md)\n\n## Code formatting\n\nMITuna used yapf for code formatting:\n```\nyapf -i --style='{based_on_style: google, indent_width: 2}' --recursive tuna/\nyapf -i --style='{based_on_style: google, indent_width: 2}' --recursive tests/\n```\n\n## Static code analysis\n\nIn order for a PR to be accepted the following `pylint` command needs to result in 10/10 analysis:\n```\ncd MITuna/tuna\npylint -f parseable -d duplicate-code --max-args=8 --indent-string '  ' *.py\n```\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ROCmSoftwarePlatform/MITuna.git",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "MITuna",
            "package_url": "https://pypi.org/project/MITuna/",
            "platform": null,
            "project_url": "https://pypi.org/project/MITuna/",
            "project_urls": {
                "Homepage": "https://github.com/ROCmSoftwarePlatform/MITuna.git"
            },
            "release_url": "https://pypi.org/project/MITuna/0.1/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "Tuna is a distributed tuning infrastructure that provides pre-compiled kernels for MIOpen customers through automated Jenkins pipelines and SLURM scalable architecture.",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15387470,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cfa170b71ab0a817c5e360a19ce4a245",
                    "sha256": "bbb5e680f4f97f12733a1e7bd61182671d2286158f4997dd11fcb01acd561207"
                },
                "downloads": -1,
                "filename": "MITuna-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "cfa170b71ab0a817c5e360a19ce4a245",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 89251,
                "upload_time": "2022-08-09T16:12:59",
                "upload_time_iso_8601": "2022-08-09T16:12:59.387435Z",
                "url": "https://files.pythonhosted.org/packages/c6/f9/0b9c056eef8f4a57d6b85320c6b2679a833aa95b9a61dd270d179dc2a360/MITuna-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}