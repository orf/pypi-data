{
    "0.1.0": {
        "info": {
            "author": "Hadrien Leclerc, Lino Galiana",
            "author_email": "leclerc.hadrien@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": ".. role:: raw-html-m2r(raw)\n   :format: html\n\nIntroduction to pynsee package\n==============================\n\n.. image:: https://github.com/InseeFrLab/pynsee/actions/workflows/pkgTests.yml/badge.svg\n   :target: https://github.com/InseeFrLab/pynsee/actions\n   :alt: Build Status\n\n.. image:: https://github.com/InseeFrLab/pynsee/actions/workflows/examples.yml/badge.svg\n   :target: https://github.com/InseeFrLab/pynsee/actions\n   :alt: Examples Tests\n\n.. image:: https://codecov.io/gh/InseeFrLab/pynsee/branch/master/graph/badge.svg?token=TO96FMWRHK\n   :target: https://codecov.io/gh/InseeFrLab/pynsee?branch=master\n   :alt: Codecov test coverage\n\n.. image:: https://readthedocs.org/projects/pynsee/badge/?version=latest\n   :target: https://pynsee.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n   \n.. image:: https://raw.githubusercontent.com/InseeFrLab/pynsee/master/docs/_static/badgepython.svg?token=AP32AXOVNXK5LWKM4OJ5THDAZRHZK\n   :target: https://www.python.org/\n   :alt: Python versions\n   \n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: Code formatting\n\n\n``pynsee`` package contains tools to easily search and download data from INSEE and IGN.\n\n``pynsee`` gives a quick access to more than 150 000 macroeconomic series,\na dozen datasets of local data, numerous sources available on `insee.fr <https://www.insee.fr>`_, \ngeographical limits of administrative areas taken from IGN\nas well as key metadata and SIRENE database containing data on all French companies.\nHave a look at the detailed API page `api.insee.fr <https://api.insee.fr/catalogue/>`_.\n\nThis package is a contribution to reproducible research and public data transparency. \nIt benefits from the developments made by teams working on APIs at INSEE and IGN.\n\nInstallation & API subscription\n-------------------------------\n\nThe files available on `insee.fr <https://www.insee.fr>`_ and IGN data, i.e. the use of `download` and `geodata` modules, do not require authentication.\nCredentials are necessary to access some of the INSEE APIs available through `pynsee` by the modules `macrodata`, `localdata`, `metadata` and `sirene`. \nAPI credentials can be created here : `api.insee.fr <https://api.insee.fr/catalogue/>`_\n\n.. code-block:: python\n\n   # Get the development version from GitHub\n   # git clone https://github.com/InseeFrLab/pynsee.git\n   # cd pynsee\n   # pip install .[full]\n\n   # Subscribe to api.insee.fr and get your credentials!\n   # Save your credentials with init_conn function :      \n   from pynsee.utils.init_conn import init_conn\n   init_conn(insee_key=\"my_insee_key\", insee_secret=\"my_insee_secret\")\n\n   # Beware : any change to the keys should be tested after having cleared the cache\n   # Please do : from pynsee.utils import clear_all_cache; clear_all_cache()\n\nData Search and Collection Advice\n---------------------------------\n\n* **Macroeconomic data** :\n   First, use ``get_dataset_list`` to search what are your datasets of interest and then get the series list with ``get_series_list``.\n   Alternatively, you can make a keyword-based search with ``search_macrodata``, e.g. ``search_macrodata('GDP')``.\n   Then, get the data with ``get_dataset`` or ``get_series``\n* **Local data** : use first ``get_local_metadata``, then get data with ``get_local_data``\n* **Metadata** : e.g. function to get the classification of economic activities (Naf/Nace Rev2) ``get_activity_list`` \n* **Sirene (French companies database)** : use first ``get_dimension_list``, then use ``search_sirene`` with dimensions as filtering variables\n* **Geodata** : get the list of available geographical data with ``get_geodata_list`` and then retrieve it with ``get_geodata``\n* **Files on insee.fr**: get the list of available files on insee.fr with ``get_file_list`` and then download it with ``download_file``\n\nFor further advice, have a look at the documentation and gallery of the `examples <https://pynsee.readthedocs.io/en/latest/examples.html>`_.\n\n\nExample - Population Map\n------------------------\n\n.. image:: https://raw.githubusercontent.com/InseeFrLab/pynsee/master/docs/_static/popfrance.png?token=AP32AXOVNXK5LWKM4OJ5THDAZRHZK\n\n\n.. code-block:: python\n\n    from pynsee.geodata import get_geodata_list, get_geodata, GeoFrDataFrame\n\n    import math\n    import geopandas as gpd\n    import pandas as pd\n    from pandas.api.types import CategoricalDtype\n    import matplotlib.cm as cm\n    import matplotlib.pyplot as plt\n    import descartes\n    \n    import warnings\n    from shapely.errors import ShapelyDeprecationWarning\n    warnings.filterwarnings(\"ignore\", category=ShapelyDeprecationWarning)\n    \n    # get geographical data list\n    geodata_list = get_geodata_list()\n    # get departments geographical limits\n    com = get_geodata('ADMINEXPRESS-COG-CARTO.LATEST:commune')\n    \n    mapcom = gpd.GeoDataFrame(com).set_crs(\"EPSG:3857\")\n    \n    # area calculations depend on crs which fits metropolitan france but not overseas departements\n    # figures should not be considered as official statistics\n    mapcom = mapcom.to_crs(epsg=3035)\n    mapcom[\"area\"] = mapcom['geometry'].area / 10**6\n    mapcom = mapcom.to_crs(epsg=3857)\n\n    mapcom['REF_AREA'] = 'D' + mapcom['insee_dep']\n    mapcom['density'] = mapcom['population'] / mapcom['area']\n    \n    mapcom = GeoFrDataFrame(mapcom)\n    mapcom = mapcom.translate(departement = ['971', '972', '974', '973', '976'],\n                              factor = [1.5, 1.5, 1.5, 0.35, 1.5])\n                              \n    mapcom = mapcom.zoom(departement = [\"75\",\"92\", \"93\", \"91\", \"77\", \"78\", \"95\", \"94\"],\n                     factor=1.5, startAngle = math.pi * (1 - 3 * 1/9))\n    mapcom\n    \n    mapplot = gpd.GeoDataFrame(mapcom)\n    mapplot.loc[mapplot.density < 40, 'range'] = \"< 40\"\n    mapplot.loc[mapplot.density >= 20000, 'range'] = \"> 20 000\"\n\n    density_ranges = [40, 80, 100, 120, 150, 200, 250, 400, 600, 1000, 2000, 5000, 10000, 20000]\n    list_ranges = []\n    list_ranges.append( \"< 40\")\n\n    for i in range(len(density_ranges)-1):\n        min_range = density_ranges[i]\n        max_range = density_ranges[i+1]\n        range_string = \"[{}, {}[\".format(min_range, max_range)\n        mapplot.loc[(mapplot.density >= min_range) & (mapplot.density < max_range), 'range'] = range_string\n        list_ranges.append(range_string)\n\n    list_ranges.append(\"> 20 000\")\n\n    mapplot['range'] = mapplot['range'].astype(CategoricalDtype(categories=list_ranges, ordered=True))\n    \n    fig, ax = plt.subplots(1,1,figsize=[15,15])\n    mapplot.plot(column='range', cmap=cm.viridis,\n    legend=True, ax=ax,\n    legend_kwds={'bbox_to_anchor': (1.1, 0.8),\n                 'title':'density per km2'})\n    ax.set_axis_off()\n    ax.set(title='Distribution of population in France')\n    plt.show()\n\n    fig.savefig('pop_france.svg',\n                format='svg', dpi=1200,\n                bbox_inches = 'tight',\n                pad_inches = 0)\n \n\nHow to avoid proxy issues ?\n---------------------------\n\n.. code-block:: python\n\n   # Use the proxy_server argument of the init_conn function to change the proxy server address   \n   from pynsee.utils.init_conn import init_conn\n   init_conn(insee_key=\"my_insee_key\",\n             insee_secret=\"my_insee_secret\",\n             proxy_server=\"http://my_proxy_server:port\")\n\n   # Beware : any change to the keys should be tested after having cleared the cache\n   # Please do : from pynsee.utils import *; clear_all_cache()\n\nSupport\n-------\n\nFeel free to open an issue with any question about this package using <https://github.com/InseeFrLab/Py-Insee-Data> Github repository.\n\nContributing\n------------\n\nAll contributions, whatever their forms, are welcome. See ``CONTRIBUTING.md``\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://pynsee.readthedocs.io/en/latest/",
            "keywords": "",
            "license": "OPEN LICENCE 2.0/LICENCE OUVERTE 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pynsee",
            "package_url": "https://pypi.org/project/pynsee/",
            "platform": null,
            "project_url": "https://pypi.org/project/pynsee/",
            "project_urls": {
                "Bug Tracker": "https://github.com/InseeFrLab/Py-Insee-Data/issues",
                "Homepage": "https://pynsee.readthedocs.io/en/latest/"
            },
            "release_url": "https://pypi.org/project/pynsee/0.1.0/",
            "requires_dist": [
                "pandas (>=0.24.2)",
                "tqdm (>=4.56.0)",
                "requests (>=2.23)",
                "appdirs (>=1.4.4)",
                "unidecode (>=1.1.0)",
                "shapely (<2.0,>=1.8.0)",
                "urllib3",
                "pathlib",
                "openpyxl ; extra == 'full'",
                "xlrd (>=2.0.1) ; extra == 'full'"
            ],
            "requires_python": ">=3.7",
            "summary": "Tools to Easily Search and Download Data From INSEE and IGN",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15305496,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e4267ffb26339073b18205b3aa4af5e8",
                    "sha256": "b6c2083d7bf941a673758166bc05ab44244024f2d71387d109aa8d978db8c9ec"
                },
                "downloads": -1,
                "filename": "pynsee-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e4267ffb26339073b18205b3aa4af5e8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 9005594,
                "upload_time": "2022-10-04T18:59:54",
                "upload_time_iso_8601": "2022-10-04T18:59:54.118899Z",
                "url": "https://files.pythonhosted.org/packages/68/e6/23f1562bfeffa26d0b0058dbc5d42c853b9dddab00f199433e30e18419f2/pynsee-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "989a4cfda657c12ae47109e5a01b108c",
                    "sha256": "39c9047ce2689fe05acb4cf72c6dbfb0906bd1f1d3b2cd5ce1240feb9d190a52"
                },
                "downloads": -1,
                "filename": "pynsee-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "989a4cfda657c12ae47109e5a01b108c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8968092,
                "upload_time": "2022-10-04T19:00:09",
                "upload_time_iso_8601": "2022-10-04T19:00:09.139961Z",
                "url": "https://files.pythonhosted.org/packages/de/36/5c2cd079600b1f071a8a6b0c4d784aca80d790f6ef597c33e870e9e297b8/pynsee-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}