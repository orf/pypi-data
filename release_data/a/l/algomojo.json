{
    "0.1": {
        "info": {
            "author": "Algomojo",
            "author_email": "support@algomojo.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 3"
            ],
            "description": "\n## ABOUT\nA functional python wrapper for algomojo trading api.\nAlgomojo is a python library for the [Algomojo Free API + Free Algo Trading Platform ](https://algomojo.com/). \nIt allows rapid trading algo development easily, with support for both REST-API interfaces. \nExecute Orders in Reatime, Modify/Cancel Orders, Retrieve Orderbook, Tradebook, Open Positions, Squareoff Positions and much more functionalities. \nFor more details of each API behavior, Pease see the Algomojo API documentation.\n\n\n## License\nAlgomojo  (c) 2020. Licensed under the MIT License.\n\n\n## Documentation\n[Algomojo Rest API documentation ](https://algomojo.com/docs/)\n\n\n\n\n## Installation\nInstall from PyPI\n\n\tpip install Algomojo\n\nAlternatively, install from source. Execute setup.py from the root directory.\npython setup.py install\n\nAlways use the newest version while the project is still in alpha!\n\n\n## Usage Examples\nIn order to call Algomojo trade API, you need to sign up for an trading account with one of the partner broker and obtain API key pairs and enjoy unlimited access to the API based trading.\n Replace api_key and api_secret_key with what you get from the web console.\n\n\n\n\n## Getting Started\n\nAfter downloading package import the package and create the object with api credentials\n\n\n\tfrom algomojo import pyalgomojo as algo\n\n\n\n\n\n## Creating  Object\n\nFor creating an object there are 3 arguments which would be passed\n\n         api_key : str\n             User Api key (logon to algomojo account to find api credentials)\n         api_secret : str\n             User Api secret (logon to algomojo account to find api credentials)\n         Broker : str\n             This takes broker it generally consists 2 letters , EX: alice blue--> ab, tradejini-->tj, zebu-->zb\n\nSample:\n\n\tab=algo.api(api_key=\"20323f062bb71ca6fbb178b4df8ac5z6\",\n\t\t    api_secret=\"686786a302d7364d81badc233f1d22e3\",\n\t\t    broker=\"ab\")\n\n\n\n\n\n\n## Using Object Methods\nobj.method(mandatory_parameters)  or obj.method(madatory_parameters+required_parameters)\n\n\n# Avaliable Methods\n\n### 1. place_order:  \n\n\t\tFunction with mandatory parmeters: \n\t\t\t\tplace_order(ticker,exchange,action,qty)\n\n\t\tFunction with all parametrs:       \n\t\t\t\tplace_order(ticker,exchange,action,qty,order_type,price,discqty,trig_price,\n\t\t\t\t             product_type,strategy_name,api_key,api_secret)\n\n                Sample :        \n\t\t\t\tab.place_order(ticker=\"RELIANCE-EQ\",\n\t\t\t\t\t       exchange=\"NSE\",\n\t\t\t\t\t       action=\"B\",\n\t\t\t\t\t       qty=1)   \n### 2. cancel_order:\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\tcancelorder(client_id,nestordernumber,ticker,exchange)\n\n\t\tFunction with all parameters:\n\t\t\t\tcancelorder(client_id,nestordernumber,ticker,exchange,api_key,api_secret)\n\n\n\t\tSample :          ab.cancel_order(client_id='AB1234',\n\t\t\t\t  \t\t  nestordernumber='201109000000025',\n\t\t\t\t\t\t  ticker=\"RELIANCE-EQ\",\n\t\t\t\t\t\t  exchange=\"NSE\")\n\n### 3. modify_order:\n\n\t\tFuntion with mandatory parameters:  \n\t\t\t     modify_order(client_id,nestordernumber,ticker,exchange,action,price_type,price,qty,symbol_token,filled_qty)\n\n\t\tFunction with all parameters: \n\n\t\t            modify_order(client_id,nestordernumber,ticker,exchange,action,price_type,price,qty,symbol_token,filled_qty,\n\t\t  \t                 product_type,disc_qty,trig_price,api_key,api_secret)\n\n\t\tSample :          \n\t\t              ab.modify_order(client_id='AB1234',\n\t\t\t\t              nestordernumber='201109000000025',\n\t\t\t\t              ticker=\"RELIANCE-EQ\",\n\t\t\t\t              exchange=\"NSE\",\n\t\t\t\t              action=\"B\",\n\t\t\t\t              order_type=\"L\",\n\t\t\t\t              price=\"2000\",\n\t\t\t\t              qty=\"2\",\n\t\t\t\t              symbol_token=\"11184\")\n\n\n\n### 4. place_option_order:\n\n\t\tFuntion with mandatory parameters:  \n\t\t\t     \tplace_option_order(spot_sym,expiry,opt_type,action,qty)\n\n\t\tFunction with all parameters:\n\t\t \t      \tplace_option_order(spot_sym,expiry,opt_type,action,qty,order_type,product_type,price,trig_price,\n\t\t\t                           strike_int,offset,strategy_name,api_key,api_secret)\n\n\t\tSample for tradejini: `\t\t   \n\t\t\t\ttj.place_option_order(spot_sym=\"NIFTY\",\n\t\t\t\t\t\t      expiry=\"19NOV20\",\n\t\t\t\t\t\t      opt_type=\"CE\",\n\t\t\t\t\t\t      action=\"B\",\n\t\t\t\t\t\t      qty=\"75\")\n\n\n\t\tSample for aliceblue:\t\t     \n\t\t\t\tab.place_option_order(spot_sym=\"NIFTY\",\n\t\t\t\t\t\t      expiry=\"20N19\",\n\t\t\t\t\t\t      opt_type=\"CE\",\n\t\t\t\t\t\t      action=\"B\",\n\t\t\t\t\t\t      qty=\"75\")\n\n\n\n### 5. place_bracket_order:\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\tplace_bracket_order(token,exchange,action,qty,target,stoploss)\n\n\t\tFunction with all parameters:          \n\n\t\t\t\tplace_bracket_order(token,exchange,action,qty,target,stoploss,trailingSL,tSLticks,price,trig_price,\n\t\t\t\t\t\t    discqty,SqrOffAbsOrticks,SLAbsOrticks,strategy_name,api_key,api_secret)\n\n\t\tSample:             \n\t\t\t\tab.place_bracket_order(token=\"RELIANCE-EQ\",\n\t\t\t\t\t\t       exchange=\"NSE\",\n\t\t\t\t\t\t       action=\"B\",\n\t\t\t\t\t\t       qty=0,\n\t\t\t\t\t\t       target=1,\n\t\t\t\t\t\t       stoploss=1)                            \n\n\n\n### 6. cancel_co:\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\tcancel_co(self,client_id,nestordernumber)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\tcancel_co(self,client_id,nestordernumber,api_key,api_secret)\n\n\t\tSample:                              \n\t\t\t\t\tab.cancel_co(client_id='AB1234',\n\t\t\t\t\t             nestordernumber='201109000000025')\n\n\n### 7. cancel_bo:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\tcancel_bo(client_id,nestordernumber)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\tcancel_bo(client_id,nestordernumber,status,api_key,api_secret)\n\n\t        Sample:                              \n\t\t\t\t\tab.cancel_bo(client_id='AB1234',\n\t\t                                     nestordernumber='201109000000025')\n\n\n\n\n\n### 8. order_book: \n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\torder_book(client_id)\n\n\t\tFunction with all parameters:       \n\t\t\t\t\torder_book(client_id,api_key,api_secret)\n\n\t\tSample:                              \n\t\t\t\t\tab.order_book(client_id='AB1234')\n\n\n\n### 9. postion_book:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\tposition_book(self,client_id)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\tposition_book(self,client_id,prod_type,api_key,api_secret)\n\n\t\tSample:                             \n\t\t\t\t\tab.position_book(client_id='AB1234')\n\n\n\n\n\n### 10. order_history:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\torder_history(client_id,nestordernumber)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\torder_history(client_id,nestordernumber,api_key,api_secret)\n\n\t\tSample:                              \n\t\t\t\t\tab.order_history(client_id='AB1234',\n\t\t\t\t\t\t\t nestordernumber='201109000000025')\n\n\n\n\n### 11. place_multi_order:\n\n\n\t\tplace_multi_order(order_list)\n\n\t\tSample order_list: \n\t\t\t[{\"ticker\":\"INFY-EQ\",\"exchange\":\"NSE\",\"action\":\"B\",\"qty\":\"1\"},\n\t\t\t{\"ticker\":\"BHEL-EQ\",\"exchange\":\"NSE\",\"action\":\"B\",\"qty\":\"1\"}]\n\n\t\tSample function call:  \n\t\t\tab.place_multi_order(order_list)\n\n\n\n\n### 12. place_multi_bo : \n\n\n\t\tplace_multi_bo(order_list)\n\n\t\tsample order list: \n\t\t\t\t    [{\"ticker\":\"INFY-EQ\",\"exchange\":\"NSE\",\"action\":\"B\",\"qty\":\"1\",\"profit\":\"1\",\"stoploss\":\"1\"},\n\t\t\t\t    {\"ticker\":\"BHEL-EQ\",\"exchange\":\"NSE\",\"action\":\"B\",\"qty\":\"1\",\"profit\":\"1\",\"stoploss\":\"1\"}]\n        \tSample funcion call :     \n\t\t\t            ab.place_multi_bo(order_list)   \n\n\n\n\t13. squareoff:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\t\t     squareoff(client_id, ticker, symbol_token, qty)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\t\t     squareoff(client_id, ticker, symbol_token, qty, exchange_seg, product_type,api_key, api_secret)\n\n\t\tSample:                              ab.squareoff(client_id='AB1234',\n\t\t\t\t\t\t\t\t  ticker='BHEL-EQ',\n\t\t\t\t\t\t\t\t  symbol_token='438',\n\t\t\t\t\t\t\t\t  qty=1,\n\t\t\t\t\t\t\t\t  product_type=='MIS')\n\n\n### 14. partial_convert:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\t\t     partial_convert(client_id, ticker, symbol_token, qty)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\t\t     partial_convert(client_id, ticker, symbol_token, qty, exchange_seg, product_type,api_key, api_secret)\n\n\t\tSample:                              \n\t\t\t\t\t\t     ab.partial_convert(client_id='AB1234',\n\t\t\t\t\t\t     \t\t\tticker='BHEL-EQ',\n\t\t\t\t\t\t\t\t\tsymbol_token='438',\n\t\t\t\t\t\t\t\t\tqty=1,\n\t\t\t\t\t\t\t\t\tproduct_type=='MIS')\n\n\n\n### 15. ltp_cover:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\t\t    ltp_cover(symbol_token, exchange, action, api_key, api_secret)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\t\t    ltp_cover(symbol_token, exchange, action, api_key, api_secret)\n\n\t\tSample:                              \n\t\t\t\t\t\t    ab.ltp_cover(symbol_token='438',\n\t\t\t\t\t\t                 exchange='NSE',\n\t\t\t\t\t\t\t\t action='B')\n\n\n### 16. symbol_info\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\t\t     symbol_info(symbol)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\t\t     symbol_info(symbol, api_key, api_secret)\n\t\tSample:                              \n\t\t\t\t\t\t     ab.symbol_info(symbol=\"BHEL-EQ\")\n\n\n### 17. security_info\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\t\t      security_info(security_dict)\n\n\t\tFunction with all parameters:        \n\t\t\t\t\t\t      security_info(security_dict, api_key, api_secret)\n\n\t\tSample:                              \n\t\t\t\t\t\t     ab.security_info(security_dict={\"uid\":\"AB1234\",\"Exchange\":\"NSE\",\"SrchFor\":\"438\"})\n\n\n### 18. limits:\n\n\n\t\tFuntion with mandatory parameters:   \n\t\t\t\t\t\t     limits(client_id, segment, exchange, product_type)\n\t\tFunction with all parameters:        \n\t\t\t\t\t\t     limits(client_id, segment, exchange, product_type, api_key, api_secret)\n\t\tSample:                              \n\t\t\t\t\t\t      ab.limits(client_id='AB1234',\n\t\t\t\t\t\t      \t\texchange='NSE')\n\n\n\n\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://algomojo.com/docs/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "algomojo",
            "package_url": "https://pypi.org/project/algomojo/",
            "platform": "",
            "project_url": "https://pypi.org/project/algomojo/",
            "project_urls": {
                "Homepage": "https://algomojo.com/docs/"
            },
            "release_url": "https://pypi.org/project/algomojo/0.1/",
            "requires_dist": [
                "requests"
            ],
            "requires_python": "",
            "summary": "A functional python wrapper for algomojo trading api",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13429228,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "76a65c162fb803665fc0cc96ed65b7b4",
                    "sha256": "090afa570cba0b83502332a843340dc8ceba9638bf9a4814321072384753b5b5"
                },
                "downloads": -1,
                "filename": "algomojo-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "76a65c162fb803665fc0cc96ed65b7b4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 6454,
                "upload_time": "2020-11-13T15:07:33",
                "upload_time_iso_8601": "2020-11-13T15:07:33.572102Z",
                "url": "https://files.pythonhosted.org/packages/66/d7/da17835ac164d4c70652d8a027ae1171154f0533c33af2c7f68cb407113e/algomojo-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "35eeafe52263de7930e229bb27f8e5d4",
                    "sha256": "50cdfcc30451e9241298f1ec6a4330647eae3a5ec425fd5e863d12e72f751142"
                },
                "downloads": -1,
                "filename": "algomojo-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "35eeafe52263de7930e229bb27f8e5d4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5946,
                "upload_time": "2020-11-13T15:07:35",
                "upload_time_iso_8601": "2020-11-13T15:07:35.207367Z",
                "url": "https://files.pythonhosted.org/packages/3d/60/f43b9f2865a7db2ba48d8367a8e6cde8952a135b2fe9fa3d02648c14feb1/algomojo-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}