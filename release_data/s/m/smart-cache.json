{
    "1.0.0": {
        "info": {
            "author": "Andrew Gazelka",
            "author_email": "andrew.gazelka@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Smart Cache\n<sub><sup>This is not production ready! There are still likely many bugs and there are several performance improvements which can be made</sup></sub>\n\nThere are several Python caching alternatives, but there is only one to rule them all \ud83d\udc8d.\n\nIntroducing smart cache\u2014apply the `@smart_cache` decorator and all inputs\nwith the same hash will be cached cross-run. Furthermore,\n**the cache will be invalidated if the method bytecode OR the bytecode of method dependencies changes**. This allows for fast rapid prototyping. You do not have to focus on which\nfunctions have been changed, _Smart Cache_ does the work for you.\n\nThe only thing to pay attention to is that your functions are *pure*! If they have \nside effects, smart cache will not work.\n\n## Benchmarks\nRunning the `fib` (cached) and `bad_fib` in `example/example.py` we get after one run. Cached is `O(1)`.\n\n```\ntotal time cached: 0.48ms\ntotal time uncached: 31723.69ms\ndifference:  0\n```\n\nThe first run we get \n```\ntotal time cached: 0.58ms\ntotal time uncached: 31840.58ms\ndifference:  0\n```\n\n## Simple Example\nSuppose we run\n```python\ndef abc():\n    x = 2+2\n    return x\n\n\n@smart_cache\ndef tester():\n    return 1 + abc()\n\n\nif __name__ == \"__main__\":\n    print(tester())\n```\n\nOnly the first time we run this will\nresults not be cached.\n\nSuppose we make a modification to `abc`\n\n```python\ndef abc():\n    x = 2+3\n    return x\n```\n\nAll caches will be invalidated. However, if `abc` were\nchanged to\n\n```python\ndef abc():\n    # this is a comment\n    x = 2+2\n    return x\n```\n\nThe cache will not be invalidated because even though the \ncode changes\u2014none of the byte code changes.\n\nSimilary if we add another function `xyz()`,\n\n```python\n\ndef xyz(a_param):\n    return a_param*2\n```\n\nThe cache will _also_ NOT be invalidated because although\nthe bytecode of the file changes, the bytecode of neither the function `tester`\nor its dependencies change.\n\n## Recursive Functions\nRecursive functions also work as expected!\n```python\n@smart_cache\ndef fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(fib(6))\n```\n\nwill run in `O(n)` time when it is first run\nand `O(1)` the time after that.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/andrewgazelka/smart-cache",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "smart-cache",
            "package_url": "https://pypi.org/project/smart-cache/",
            "platform": "",
            "project_url": "https://pypi.org/project/smart-cache/",
            "project_urls": {
                "Homepage": "https://github.com/andrewgazelka/smart-cache"
            },
            "release_url": "https://pypi.org/project/smart-cache/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python caching library that is persistent and uses bytecode analysis to determine re-evaluation",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10066693,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d1b33daca57a677db2c49006fbc15ee0",
                    "sha256": "e4d18086710584913a10d53f31ce055f515b2a81785f5b1b79d309b9e487bdc2"
                },
                "downloads": -1,
                "filename": "smart_cache-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d1b33daca57a677db2c49006fbc15ee0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 3623,
                "upload_time": "2021-04-14T21:20:45",
                "upload_time_iso_8601": "2021-04-14T21:20:45.658917Z",
                "url": "https://files.pythonhosted.org/packages/29/f5/d48aeb54b4173762ff7f7bea5836a06451ed97cf8333b2dfd084eed246f1/smart_cache-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "142ac08277e753e614f510edf7467277",
                    "sha256": "4701f7158d85f96f96cbb716b73b867281f8b1b09b28d30542c9a0c9f8263505"
                },
                "downloads": -1,
                "filename": "smart_cache-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "142ac08277e753e614f510edf7467277",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 3848,
                "upload_time": "2021-04-14T21:20:47",
                "upload_time_iso_8601": "2021-04-14T21:20:47.029838Z",
                "url": "https://files.pythonhosted.org/packages/b7/a7/8cf1677d7630a90edb8ab95ef254d12185589e642886e22fb3b21e2c6d21/smart_cache-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}