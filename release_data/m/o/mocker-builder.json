{
    "0.1.0": {
        "info": {
            "author": "Tiago G Cunha",
            "author_email": "tikx.batera@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Mocker Builder\nTesting tools for mocking and patching based on pytest_mock mocker features.\n\n### Installation\n```\npip install mocker-builder\n```\n\n### Initializer\nTo start using mucker-builder features just create your Test class, inherit from MockerBuilder class,\nimplement the required abstract method mocker_builder_setup decorating it with the @MockerBuilder.initializer\ndecorator and start building your mocks and fixtures just like that:\n\n```Python\nfrom io import StringIO\nfrom unittest.mock import PropertyMock\nimport pytest\n\nfrom mocker_builder import MockerBuilder\nfrom testing_heroes import my_heroes\nfrom testing_heroes.my_heroes import (\n    Batman,\n    IHero,\n    JusticeLeague,\n    OtherHero,\n    PeakyBlinder,\n    MyHeroes,\n    Robin\n)\n\n\ndef print_io_test():\n    print(\"Ouieh!!!\")\n\nclass Foo(IHero):\n    nickname: str = \"Bob\"\n\n    def eating_banana(self) -> str:\n        return \"have no banana\"\n\n    def wearing_pyjama(self) -> str:\n        return \"have no pyjama\"\n\n    def just_call_for(self) -> str:\n        return \"Bob Foo\"\n\n    def just_says(self) -> str:\n        return \"foo foo\"\n\n\nclass TestMyHeroes(MockerBuilder):\n\n    @MockerBuilder.initializer\n    def mocker_builder_setup(self):\n        # ================== Setting fixtures ===================\n        # TODO We will work on this feature to implement a real fixture\n        self.my_hero = self.add_fixture(\n            content=PeakyBlinder(\n                bananas=12,\n                pyjamas=7,\n                nickname=\"Bellboy\"\n            )\n        )\n        # =================== Setting mocks ======================\n        self.mock_my_heroes_module = self.patch(\n            target=my_heroes.initialize_other_hero\n        )\n        self.mock_my_hero_attribue = self.patch(\n            target=MyHeroes,\n            attribute='_my_hero',\n            mock_configure={\n                'eating_banana.return_value': \"Banana Noooo!\",\n                'just_says.side_effect': [\"Nothing to say!\"]\n            }\n        )\n        self.mock_other_hero = self.patch(\n            target=OtherHero,\n            mock_configure={\n                'return_value.just_says.return_value': \"He feels good!\"\n            }\n        )\n        self.my_hero_batman = self.patch(\n            # XXX or target='main.Batman' to mock the Batman class imported from here.\n            target=Batman,\n            mock_configure={\n                'return_value.nickname': 'Bat Mock',\n                'return_value.eating_banana.return_value': \"doesn't like banana\",\n                'return_value.wearing_pyjama.return_value': \"doesn't wear pyjama\",\n                'return_value.just_call_for.return_value': \"just calls for Mocker\",\n                'return_value.just_says.return_value': \"I'm gonna mock you babe!\",\n            }\n        )\n        self.mock_justice_league__init__ = self.patch(\n            target=JusticeLeague.__init__\n        )\n        # ========================================================\n\n    def test_io(self):\n        self.mock_test_io = self.patch(\n            target='sys.stdout',\n            new_callable=StringIO\n        )\n        print_io_test()\n        assert self.mock_test_io().getvalue() == 'Ouieh!!!\\n'\n\n    def test_mock_my_heroes_class(self):\n        mock_my_heroes_class = self.patch(\n            target=MyHeroes\n        )\n        my_heroes.who_is_the_best_hero()\n        assert mock_my_heroes_class().called\n\n    def test_mock_my_heroes_module(self):\n        self.mock_my_heroes_module.stop()\n        my_heroes.who_is_the_best_hero()\n        assert not self.mock_my_heroes_module().called\n\n        self.mock_my_heroes_module.start()\n        my_heroes.who_is_the_best_hero()\n        assert self.mock_my_heroes_module().called\n\n    def test_mock_my_hero_attribute(self):\n        assert self.mock_my_hero_attribue().eating_banana() == \"Banana Noooo!\"\n        assert self.mock_my_hero_attribue.mock.just_says() == \"Nothing to say!\"\n\n    def test_mock_my_class(self):\n        response = my_heroes.asks_what_other_hero_have_to_say_about_been_hero()\n        assert response == \"He feels good!\"\n\n    def test_my_hero_batman(self):\n        my_heroes.who_is_my_hero(Batman())\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Batman()\n        testing.who_is_my_hero()\n\n        assert self.my_hero_batman.mock.return_value.nickname == 'Bat Mock'\n        assert testing.my_hero.nickname == 'Bat Mock'\n\n    def test_mock_justice_league__init__(self):\n        justce_league = JusticeLeague()\n        assert justce_league.show_heroes() == \"Opss! No heroes over here!\"\n        assert justce_league.what_heroes_does() == \"Eita! Heroes are doing nothing!\"\n\n        self.mock_justice_league__init__.stop()\n\n        justce_league = JusticeLeague()\n        # my_heroes.Batman() is mocked\n        justce_league.join_hero(my_heroes.Batman())\n        justce_league.join_hero(Robin())\n\n        mock_test_io = self.patch(\n            target='sys.stdout',\n            new_callable=StringIO\n        )\n        justce_league.show_heroes()\n        expected = \"\"\"MagicMock just calls for Mocker\nRobin just calls for Little Bastard\\n\"\"\"\n        assert mock_test_io().getvalue() == expected\n\n        justce_league.what_heroes_does()\n        expected += \"\"\"===========================\nBat Mock\ndoesn't like banana\ndoesn't wear pyjama\nI'm gonna mock you babe!\n===========================\nLittle Bastard\nis eating 1 banana(s)\nis wearing 4 pyjama(s)\nI'm gonna have a pint!\\n\"\"\"\n        assert mock_test_io().getvalue() == expected\n\n        mock_test_io.stop()\n        self.mock_justice_league__init__.start()\n\n        justce_league = JusticeLeague()\n        assert justce_league.show_heroes() == \"Opss! No heroes over here!\"\n        assert justce_league.what_heroes_does() == \"Eita! Heroes are doing nothing!\"\n\n    def test_mock_ugly_hero(self):\n\n        assert my_heroes.UGLY_HERO == 'Me'\n\n        mock_ugly_hero = self.patch(\n            target=my_heroes,\n            attribute='UGLY_HERO',\n            mock_configure={\n                'third': 'You',\n                'who_is_the_most_ugly.return_value': 'Me'\n            },\n            first='Batman',\n            second='Robin',\n            call_me_a_hero=lambda: PeakyBlinder().nickname\n        )\n        mock_ugly_hero().configure_mock(\n            fourth='Me again',\n            **{\n                'who_is_my_hero.return_value': Batman().nickname,\n                'who_is_the_most_beautiful.side_effect': ValueError(\"There isn't any beautiful hero\")\n            }\n        )\n\n        assert mock_ugly_hero().first == 'Batman'\n        assert mock_ugly_hero().second == 'Robin'\n        assert mock_ugly_hero().third == 'You'\n        assert mock_ugly_hero().fourth == 'Me again'\n        assert mock_ugly_hero().who_is_the_most_ugly() == 'Me'\n        assert mock_ugly_hero().call_me_a_hero() == \"Tomas Shelby\"\n        assert mock_ugly_hero().who_is_my_hero() == \"Big Fat Bat\"\n\n        with pytest.raises(ValueError) as ex:\n            mock_ugly_hero().who_is_the_most_beautiful()\n        assert \"There isn't any beautiful hero\" == str(ex.value)\n\n    def test_how_can_we_call_for_heores(self):\n        self.mock_justice_league__init__.stop()\n        self.my_hero_batman.stop()\n\n        justce_league = JusticeLeague()\n        # my_heroes.Batman() is mocked but was stopped\n        justce_league.join_hero(my_heroes.Batman())\n        justce_league.join_hero(Robin())\n        assert justce_league.how_can_we_call_for_heores() == [\n            (\"Batman\", \"just calls for Big Fat Bat\"),\n            (\"Robin\", \"just calls for Little Bastard\")\n        ]\n        self.mock_justice_league__init__.start()\n        justce_league = JusticeLeague()\n        assert self.mock_justice_league__init__().called\n        assert justce_league.how_can_we_call_for_heores() == \"Opss! No heroes over here to call for!\"\n\n        self.my_hero_batman.start()\n        self.mock_justice_league__init__.stop()\n\n        justce_league = JusticeLeague()\n        # my_heroes.Batman() is mocked and was started again\n        justce_league.join_hero(my_heroes.Batman())\n        justce_league.join_hero(Robin())\n        assert justce_league.how_can_we_call_for_heores() == [\n            (\"MagicMock\", \"just calls for Mocker\"),\n            (\"Robin\", \"just calls for Little Bastard\")\n        ]\n        assert self.my_hero_batman.mock.called\n\n    @pytest.mark.asyncio\n    async def test_heroes_sleeping(self):\n        justce_league = JusticeLeague()\n        assert self.mock_justice_league__init__().called\n\n        async def hero_names():\n            yield Batman().nickname\n            yield Robin().nickname\n        _hero_names = hero_names()\n\n        async for result in justce_league.are_heroes_sleeping():\n            assert result == \"=== Heroes are awakened ===\"\n\n        self.mock_justice_league__init__.stop()\n        justce_league = JusticeLeague()\n\n        async for result in justce_league.are_heroes_sleeping():\n            _hero_name = await _hero_names.__anext__()\n            print(result, _hero_name)\n            assert result == f\"MagicMock=>({_hero_name}): ZZzzzz\"\n\n    @pytest.mark.asyncio\n    async def test_call_heroes(self):\n        # Remember that JusticeLeague.__init__ still mocked, so calling JusticeLeague() doesn't\n        # initialize JusticeLeague._heroes attribute.\n\n        justce_league = JusticeLeague()\n        assert await justce_league.call_everybody() == \"Uuhmm! Nobody here!\"\n\n        with pytest.raises(AttributeError) as ex:\n            justce_league.join_hero(Batman())\n        assert \"'JusticeLeague' object has no attribute '_heroes'\" == str(ex.value)\n\n        # We just stop mocking JusticeLeague.__init__ to test a different behavior below\n        self.mock_justice_league__init__.stop()\n        del justce_league\n\n        with self.patch(\n            JusticeLeague,\n            '_heroes',\n            create=True,\n            return_value=PropertyMock(spec=list, return_value=[])\n        ):\n\n            justce_league = JusticeLeague()\n            justce_league.join_hero(Batman())\n            # my_heroes.Batman() still mocked\n            justce_league.join_hero(my_heroes.Batman())\n\n            assert await justce_league.call_everybody() == [\n                ('Batman', 'Come on', 'Big Fat Bat'),\n                ('MagicMock', 'Come on', 'Bat Mock')\n            ]\n\n    def test_my_hero_robin(self):\n        my_hero_robin = self.patch(\n            target=Robin(),  # XXX we can mock from object instance! Ouieh!\n            return_value=PropertyMock(\n                nickname='Bastard Mock',\n                eating_banana=lambda: \"eat a lot of bananas\",\n                wearing_pyjama=lambda: \"likes to be naked\",\n                just_call_for=lambda: \"Little Mocker\",\n                just_says=lambda: \"Mock me baby!\"\n            )\n        )\n\n        my_heroes.who_is_my_hero(Robin())\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Robin()\n        testing.who_is_my_hero()\n\n        assert my_hero_robin.mock.called\n        assert my_hero_robin.mock.return_value.nickname == 'Bastard Mock'\n        assert my_hero_robin.mock.return_value.eating_banana() == \"eat a lot of bananas\"\n        assert my_hero_robin.mock.return_value.wearing_pyjama() == \"likes to be naked\"\n        assert my_hero_robin.mock.return_value.just_call_for() == \"Little Mocker\"\n        assert my_hero_robin.mock.return_value.just_says() == \"Mock me baby!\"\n\n    def test_set_result_return_value(self):\n        my_hero_robin = self.patch(\n            target=Robin,\n            return_value=Foo()\n        )\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my hero:\")\n        print(\"--------------------------------------------------------------------------\")\n        my_heroes.who_is_my_hero(Robin())\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Robin()\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with return_value = Foo():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n        assert my_hero_robin.mock.called\n        assert isinstance(my_hero_robin.mock.return_value, Foo)\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Setting mock result return_value=PeakyBlinder()\")\n        print(\"--------------------------------------------------------------------------\")\n        my_hero_robin.set_result(\n            return_value=PeakyBlinder()\n        )\n        assert not isinstance(my_hero_robin.mock.return_value, Foo)\n        assert isinstance(my_hero_robin.mock.return_value, PeakyBlinder)\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.Robin()\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with return_value = PeakyBlinder():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n    def test_set_result_side_effect(self):\n        my_hero_robin = self.patch(\n            target=PeakyBlinder,\n            side_effect=lambda: Foo()\n        )\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my hero:\")\n        print(\"--------------------------------------------------------------------------\")\n        my_heroes.who_is_my_hero(PeakyBlinder())\n\n        testing = MyHeroes()\n        testing.my_hero = my_heroes.PeakyBlinder()\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with side_effect = Foo():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n        assert my_hero_robin.mock.called\n        assert isinstance(testing.my_hero, Foo)\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"\"\"Setting mock result side_effect=[\n    OtherHero(), \n    TypeError('Ops! No hero like that!')\n]\"\"\")\n        print(\"--------------------------------------------------------------------------\")\n        my_hero_robin.set_result(\n            side_effect=[OtherHero(), TypeError(\"Ops! No hero like that!\")]\n        )\n        testing.my_hero = my_heroes.PeakyBlinder()\n\n        assert not isinstance(testing.my_hero, Foo)\n        assert isinstance(testing.my_hero, OtherHero)\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Who is my mocked hero with side_effect = OtherHero():\")\n        print(\"--------------------------------------------------------------------------\")\n        testing.who_is_my_hero()\n\n        print(\"--------------------------------------------------------------------------\")\n        print(\"Testing side_effect = TypeError('Ops! No hero like that!')\")\n        print(\"--------------------------------------------------------------------------\")\n        with pytest.raises(TypeError) as ex:\n            testing.my_hero = my_heroes.PeakyBlinder()\n            testing.who_is_my_hero()\n        assert \"Ops! No hero like that!\" == str(ex.value)\n\n\n```\n\nYou also can add mocks from your test_... methods, but you must declare the mocker_builder_setup method \nand decorate it with the @MockerBuilder.initializer decorator to be able to use MockerBuilder features.\n\n```Python\n...\nclass TestMyHeroes(MockerBuilder):\n\n    @MockerBuilder.initializer\n    def mocker_builder_setup(self):\n        pass\n...\ndef test_io(self):\n    mock_test_io = self.patch(\n        target='sys.stdout',\n        new_callable=StringIO\n    )\n    print_io_test()\n    assert mock_test_io().getvalue() == 'Ouieh!!!\\n'\n```\n\n### The self.patch TMocker.PatchType properties\nThe self.patch method creates a new patch/mock object. It is a patch/mock because by doing:\n```Python\nmy_tested_thing = self.patch(...)\n```\nmy_tested_thing has some properties of a mock.patch object, like start, stop and set_result. \nTo get access to the patched mock we can just:\n```Python\nassert my_tested_thing.mock.called\nOr\nassert my_tested_thing().called\n```\nBoth ways return an MagicMock or an AsyncMock if the tested method is async.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://mocker-builder.readthedocs.io/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "mocker-builder",
            "package_url": "https://pypi.org/project/mocker-builder/",
            "platform": null,
            "project_url": "https://pypi.org/project/mocker-builder/",
            "project_urls": {
                "Homepage": "https://mocker-builder.readthedocs.io/"
            },
            "release_url": "https://pypi.org/project/mocker-builder/0.1.0/",
            "requires_dist": [
                "pytest",
                "pytest-mock"
            ],
            "requires_python": "",
            "summary": "Python library to build mock tests dynamicaly using the mocker feature from pytest-mock lib",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15602676,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f93d39f59c2c4c88b2dd3f0e0f1779a6",
                    "sha256": "ab7037f770b90ca4f7426310a171e81635ecc1ea9b2be88275304fd3fd5f5124"
                },
                "downloads": -1,
                "filename": "mocker_builder-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f93d39f59c2c4c88b2dd3f0e0f1779a6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 13064,
                "upload_time": "2022-10-31T21:18:41",
                "upload_time_iso_8601": "2022-10-31T21:18:41.078040Z",
                "url": "https://files.pythonhosted.org/packages/99/13/c14f609c1d0add0971c21fe9f8df5b71be2235b0346b5d0d635c4e467baf/mocker_builder-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fe7d64f81f84c47a681c1a9ea272d5d2",
                    "sha256": "47641b7818b5e2bac7768486e695501639b2f09635f6e0c625c38a4435443cd7"
                },
                "downloads": -1,
                "filename": "mocker-builder-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "fe7d64f81f84c47a681c1a9ea272d5d2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15557,
                "upload_time": "2022-10-31T21:18:43",
                "upload_time_iso_8601": "2022-10-31T21:18:43.645160Z",
                "url": "https://files.pythonhosted.org/packages/34/c6/268178ffd7c2743adc0ec9b0d9432ac14420fe7e8a349fba8c956861de32/mocker-builder-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}