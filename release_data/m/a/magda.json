{
    "0.1.0": {
        "info": {
            "author": "NeuroSYS Research",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/NeuroSYS-pl/magda",
            "keywords": "magda modular asynchronous parallelizationdirected-graphs acyclic-graphs pipeline python",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "magda",
            "package_url": "https://pypi.org/project/magda/",
            "platform": "",
            "project_url": "https://pypi.org/project/magda/",
            "project_urls": {
                "Homepage": "https://github.com/NeuroSYS-pl/magda"
            },
            "release_url": "https://pypi.org/project/magda/0.1.0/",
            "requires_dist": [
                "pyyaml (<6,>=5.3.1)",
                "ray (<2,>=1.2.0)",
                "pytest (==6.1.*) ; extra == 'test'",
                "pytest-cov (==2.10.*) ; extra == 'test'",
                "pytest-asyncio (==0.14.*) ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Library for building Modular and Asynchronous Graphs with Directed and Acyclic edges (MAGDA)",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11375443,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b299dcd2ba14d883733262684b5fecf",
                    "sha256": "8e04910c0d580be52f95fe28cb6180d72aec2049391270161413761ef77d85cb"
                },
                "downloads": -1,
                "filename": "magda-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8b299dcd2ba14d883733262684b5fecf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 47707,
                "upload_time": "2021-03-23T16:21:14",
                "upload_time_iso_8601": "2021-03-23T16:21:14.686738Z",
                "url": "https://files.pythonhosted.org/packages/34/4e/463d3f9d7a8f9abba8ed7346e9acdb3bca5a5d049c125aab5ff137079756/magda-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cbf388d33e8a340f62c41603b826de69",
                    "sha256": "44e93fdf1883a9fd077b4e58538998ce8ce7229a3793eec7a4f1f48c4b2ac907"
                },
                "downloads": -1,
                "filename": "magda-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "cbf388d33e8a340f62c41603b826de69",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 26866,
                "upload_time": "2021-03-23T16:21:15",
                "upload_time_iso_8601": "2021-03-23T16:21:15.725616Z",
                "url": "https://files.pythonhosted.org/packages/28/18/0c0001f07d53e62cd0d5cea5567903ab17137719bdd5aa12940b32e9aa96/magda-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0rc1": {
        "info": {
            "author": "NeuroSYS Research",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/NeuroSYS-pl/magda",
            "keywords": "magda modular asynchronous parallelizationdirected-graphs acyclic-graphs pipeline python",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "magda",
            "package_url": "https://pypi.org/project/magda/",
            "platform": "",
            "project_url": "https://pypi.org/project/magda/",
            "project_urls": {
                "Homepage": "https://github.com/NeuroSYS-pl/magda"
            },
            "release_url": "https://pypi.org/project/magda/0.2.0rc1/",
            "requires_dist": [
                "colorama (<1,>=0.4)",
                "pyyaml (<6,>=5.3.1)",
                "ray[default] (<2,>=1.5.2)",
                "pytest (==6.1.*) ; extra == 'test'",
                "pytest-cov (==2.10.*) ; extra == 'test'",
                "pytest-asyncio (==0.14.*) ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Library for building Modular and Asynchronous Graphs with Directed and Acyclic edges (MAGDA)",
            "version": "0.2.0rc1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11375443,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0523381d652b8f1cd9f4a22df203242b",
                    "sha256": "c265af5db211c9db9785110fe1e257a92c38e712ee2938ccde5941b0f75f2d38"
                },
                "downloads": -1,
                "filename": "magda-0.2.0rc1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0523381d652b8f1cd9f4a22df203242b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 81355,
                "upload_time": "2021-08-31T10:53:38",
                "upload_time_iso_8601": "2021-08-31T10:53:38.927388Z",
                "url": "https://files.pythonhosted.org/packages/0b/8e/72251907d017e014818c449b2b4ca0409f91761ebd892ca29136d2e8dda7/magda-0.2.0rc1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "906382f26b53a4d15658aeda8f9f3c09",
                    "sha256": "d7a540cadd74d6eda2514224445c692fb9529ed0cb1a1c2ee7d45ba8095912d1"
                },
                "downloads": -1,
                "filename": "magda-0.2.0rc1.tar.gz",
                "has_sig": false,
                "md5_digest": "906382f26b53a4d15658aeda8f9f3c09",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 49834,
                "upload_time": "2021-08-31T10:53:40",
                "upload_time_iso_8601": "2021-08-31T10:53:40.018643Z",
                "url": "https://files.pythonhosted.org/packages/6d/c5/ffebb4b1d9eeb607d55c88edea9a4fb0bcab18799e2872d3c9d3678556a5/magda-0.2.0rc1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0rc2": {
        "info": {
            "author": "NeuroSYS Research",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# MAGDA \ud83d\udc67\n\n*MAGDA* is a Python library intended for **assembling a stream-like architecture** of an application following functional programming principles, by **using predefined interfaces and classes**. *MAGDA* stands for Modular and Asynchronous Graphs with Directed and Acyclic edges, and is the backbone of the library.   \n\nThe library works best when the code can be split into independent operations with clearly defined input and outputs. The main idea is to use *MAGDA* to **process code in a sequential flow**. Think of this as nodes with input/output as edges in directed graphs.\n\n*MAGDA* supports the following operations:  \n&nbsp;&nbsp;&nbsp;&nbsp; :building_construction: &nbsp; building an application pipeline from a configuration file and from code,  \n&nbsp;&nbsp;&nbsp;&nbsp; :clock4: &nbsp; asynchronous and synchronous processing,   \n&nbsp;&nbsp;&nbsp;&nbsp; :scissors:\t&nbsp; dividing modules into groups for the asynchronous pipeline,   \n&nbsp;&nbsp;&nbsp;&nbsp; :dart:\t&nbsp; aggregation of partial results.\n\n*MAGDA* can be applied almost anywhere but is especially well-suited for BigData parallel processing and ML pipelines intended for carrying out multiple, repeatable experiments.\n\n| :open_book: &nbsp; Read more in the documentation on the [GitHub Pages](https://neurosys-pl.github.io/magda/). |\n| :---: |\n\n\n## Installation\n\n###### pip\n```\npip install magda\n```\n\n###### From the repository\n```bash\npip install https://github.com/NeuroSYS-pl/magda/archive/main.zip\n```\n\n## Quickstart\nHaving installed *MAGDA*, a simplistic pipeline can be created with just a few lines of code.\n\n![Pipeline Schema](https://raw.githubusercontent.com/NeuroSYS-pl/magda/main/examples/images/pipeline-schema.png)\n\nThe above pipeline is composed of just 2 modules. The first one sums all numbers from a given list and outputs a single number. And the second module raises that number to a given power.\n\nThere can be implemented **several approaches to building the same pipeline**. \n\n### 1. The simplest `SequentialPipeline`\nEvery pipeline consists of a couple of steps:\n1. Class definition - defining each `Module` (and `Interface`)\n2. Module initialization - getting every `Module` instance, defining its dependencies and parameters\n3. Pipeline creation - defining a pipeline and adding `Modules` to it\n4. Pipeline build\n5. Pipeline run\n\n![Simple Pipeline](https://raw.githubusercontent.com/NeuroSYS-pl/magda/main/examples/images/simple-pipeline.png)\n\n```python\nimport asyncio\nfrom magda.module import Module\nfrom magda.decorators import accept, finalize, expose\nfrom magda.pipeline import SequentialPipeline\n\n\n@finalize\nclass AddingNumbersModule(Module.Runtime):\n    def run(self, data, request):\n        return sum(request)\n\n@accept(AddingNumbersModule)\n@expose()\n@finalize\nclass RaisingToPowerModule(Module.Runtime):\n    def run(self, data, **kwargs):\n        number = data.get(AddingNumbersModule)\n        return number ** self.parameters['power']\n\n\nsum_module = AddingNumbersModule('module_sum')\npower_module = RaisingToPowerModule('module_power')\npower_module.depends_on(sum_module)\npower_module.set_parameters({'power': 2})\n\nbuilder = SequentialPipeline()\nbuilder.add_module(sum_module)\nbuilder.add_module(power_module)\n\nruntime = asyncio.run(builder.build())\nresult = asyncio.run(runtime.run(request=[1, 2, 3]))\nprint(result['module_power'])\n# output: 36\n```\n\n### 2. `SequentialPipeline` with Interfaces\n*MAGDA* Interfaces are just classes encapsulating data passed between modules. However, it's recommended to use them as they straighten the code up, providing more clarity and flexibility. \n\nThe above code can be rewritten as follows:\n\n```python\nimport asyncio\nfrom dataclasses import dataclass\nfrom magda.module import Module\nfrom magda.decorators import accept, produce, finalize, expose\nfrom magda.pipeline import SequentialPipeline\n\n\n@dataclass\nclass Number(Module.Interface):\n    value: int\n\n@dataclass\nclass Power(Module.Interface):\n    number: int\n    power: int = 1\n\n\n@produce(Number)\n@finalize\nclass AddingNumbersModule(Module.Runtime):\n    def run(self, data, request):\n        return Number(sum(request))\n\n@accept(Number)\n@produce(Power)\n@expose()\n@finalize\nclass RaisingToPowerModule(Module.Runtime):\n    def run(self, data, **kwargs):\n        number = data.get(Number).value\n        power = self.parameters['power']\n        return Power(number ** power, power=power)\n\n\nsum_module = AddingNumbersModule('module_sum')\npower_module = RaisingToPowerModule('module_power')\npower_module.depends_on(sum_module)\npower_module.set_parameters({'power': 2})\n\nbuilder = SequentialPipeline()\nbuilder.add_module(sum_module)\nbuilder.add_module(power_module)\n\nruntime = asyncio.run(builder.build())\nresult = asyncio.run(runtime.run(request=[1, 2, 3]))\nprint(result['module_power'])\n# output: Power(number=36, power=2)\n```\n\n### 3. `SequentialPipeline` built from a config file\nIt's also recommended to use configs - `yaml` files that enable to define a pipeline easily. The *Pipeline creation* and *Pipeline build* steps are now replaced by registering `Modules` in the `ModuleFactory` and reading the pipeline from a configuration file.  \n\nThe same pipeline as before can be obtained using the below config:\n\n###### my_config_file.yaml\n```yaml\nmodules:\n  - name: module_sum\n    type: adding-numbers-module\n  - name: module_power\n    type: raising-to-power-module\n    depends_on:\n      - module_sum\n    parameters:\n      power: 2\n```\n\n```python\nimport asyncio\nfrom dataclasses import dataclass\nfrom magda.module import Module\nfrom magda.decorators import accept, produce, finalize, expose\nfrom magda.pipeline import SequentialPipeline\nfrom magda.module.factory import ModuleFactory\nfrom magda.config_reader import ConfigReader\n\n\n@dataclass\nclass Number(Module.Interface):\n    value: int\n\n@dataclass\nclass Power(Module.Interface):\n    number: int\n    power: int = 1\n\n\n@produce(Number)\n@finalize\nclass AddingNumbersModule(Module.Runtime):\n    def run(self, data, request):\n        return Number(sum(request))\n\n@accept(Number)\n@produce(Power)\n@expose()\n@finalize\nclass RaisingToPowerModule(Module.Runtime):\n    def run(self, data, **kwargs):\n        number = data.get(Number).value\n        power = self.parameters['power']\n        return Power(number ** power, power=power)\n\n\nModuleFactory.register('adding-numbers-module', AddingNumbersModule)\nModuleFactory.register('raising-to-power-module', RaisingToPowerModule)\n\nwith open('my_config_file.yaml') as file:\n    config = file.read()\n    runtime = asyncio.run(ConfigReader.read(config, ModuleFactory))\n\nresult = asyncio.run(runtime.run(request=[1, 2, 3]))\nprint(result['module_power'])\n# output: Power(number=36, power=2)\n```\n\n## License\nDistributed under the [Apache-2.0 License](LICENSE).\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/NeuroSYS-pl/magda",
            "keywords": "magda modular asynchronous parallelizationdirected-graphs acyclic-graphs pipeline python",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "magda",
            "package_url": "https://pypi.org/project/magda/",
            "platform": "",
            "project_url": "https://pypi.org/project/magda/",
            "project_urls": {
                "Homepage": "https://github.com/NeuroSYS-pl/magda"
            },
            "release_url": "https://pypi.org/project/magda/0.2.0rc2/",
            "requires_dist": [
                "colorama (<1,>=0.4)",
                "pyyaml (<6,>=5.3.1)",
                "ray[default] (<2,>=1.5.2)",
                "pytest (==6.1.*) ; extra == 'test'",
                "pytest-cov (==2.10.*) ; extra == 'test'",
                "pytest-asyncio (==0.14.*) ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Library for building Modular and Asynchronous Graphs with Directed and Acyclic edges (MAGDA)",
            "version": "0.2.0rc2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11375443,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c55b7c6f7a952b657a422f189e6deb16",
                    "sha256": "3cc58cb844b8732a68fe3493ff2dd967de91e9b1f6e2b2ba6357579c2e139c67"
                },
                "downloads": -1,
                "filename": "magda-0.2.0rc2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c55b7c6f7a952b657a422f189e6deb16",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 81369,
                "upload_time": "2021-09-06T10:06:04",
                "upload_time_iso_8601": "2021-09-06T10:06:04.391037Z",
                "url": "https://files.pythonhosted.org/packages/b5/34/72ce89fb453566f0134a054aed7c5724f710e443b6802d11a06d7cd596c9/magda-0.2.0rc2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "676367680c1e561cfd4e157523dde8ad",
                    "sha256": "aca8eee1cfe241270075b9f913bf056b833a342019f428cfa24d1e58ad052c61"
                },
                "downloads": -1,
                "filename": "magda-0.2.0rc2.tar.gz",
                "has_sig": false,
                "md5_digest": "676367680c1e561cfd4e157523dde8ad",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 49837,
                "upload_time": "2021-09-06T10:06:05",
                "upload_time_iso_8601": "2021-09-06T10:06:05.925309Z",
                "url": "https://files.pythonhosted.org/packages/92/26/25ce146e3f278dc5af96b2c3b68055abb26475140353ee3f4b6aa2030f2d/magda-0.2.0rc2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}