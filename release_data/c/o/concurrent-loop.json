{
    "1.1.2": {
        "info": {
            "author": "",
            "author_email": "KC Lee <lathe-rebuke.0c@icloud.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# README #\n\n### Package overview ###\n\n`concurrent_loop` provides helpers for running functions in a continuous \n  loop in a separate thread or process.\n\n### Installation ###\n\n<pre>\npip install concurrent_loop\n</pre>\n\n### Example usage ###\n\nThe following code creates a class which increments a counter in a looped \nprocess using the `ProcessLoop` class (replace with `ThreadLoop` instead to \nrun in a separate thread rather than process).\n\n<pre>\nfrom concurrent_loop.loops import ProcessLoop\n\n\nclass CounterIterator(object):\n  \"\"\"\n  Iterates a counter in a loop that runs in an independent process.\n  \"\"\"\n  counter = 0  # Value to be incremented\n\n  _concurrent_loop_runner = ProcessLoop(100)  # Set up the controller that\n  # will run any requested function every 100 ms in a separate process.\n\n  def _increment(self, increment_val):\n    \"\"\"\n    Increment the internal counter once and print value. \n\n    This will be run repeatedly in a process.\n\n    Args:\n      increment_val (int): The value to increment the internal counter by.\n    \"\"\"\n    self.counter += increment_val\n    print(self.counter)\n\n  def concurrent_start(self):\n    \"\"\"\n    Run the _increment() function in the process loop.\n    \"\"\"\n    # Increments the internal counter in steps of 2. Arg must be supplied\n    # as a tuple.\n    self._concurrent_loop_runner.start(self._increment, (2,))\n\n  def concurrent_stop(self):\n    \"\"\"\n    Stop the process loop.\n    \"\"\"\n    self._concurrent_loop_runner.stop()\n</pre>\n\nFinally, in the main code:\n\n<pre>\niter = CounterIterator()\n\niter.concurrent_start()\nsleep(1)\niter.concurrent_stop()\n</pre>\n\n### Asynchronous communication with Queue() ###\n\nBoth `multiprocessing.Queue` and `queue.Queue` allow asynchronous \ncommunications with the concurrent loop. However, to ensure correct \nfunctioning of the queue, the following rules must be adhered to:\n\n- The class that calls the `ThreadLoop` or `ProcessLoop` (which is the \n  `CounterIterator` class in above example) must create the `Queue` \n  instance as an instance attribute, and not as a class attribute.\n- The `Queue` instance must be passed into looped function (the \n  `_increment` function in above example) as a function parameter, and \n  not called from the looped function as an attribute.\n\nTo extend the above example so that `_increment` function sends the \ncounter value to a results queue on each loop, we do the following.\n\nImport the queue module (for this example, we'll use the simpler \n`multiprocessing.Queue`):\n\n<pre>\nfrom multiprocessing import Queue\n</pre>\n\nInstantiate a results queue in `CounterIterator.__init__`:\n\n<pre>\nclass CounterIterator(object):\n  _results_q = None\n\n  def __init__(self):\n    self._results_q = Queue()\n</pre>\n\nModify the `_increment` function to put the counter value into the results \nqueue:\n\n<pre>\n  def _increment(self, res_q, increment_val)\n    self.counter += increment_val\n    res_q.put_nowait(self._counter)\n</pre>\n\nPass the results queue from `concurrent_start` method into the `_increment` \nfunction.\n\n<pre>\n  def concurrent_start(self):\n    self._concurrent_loop_runner.start(self._increment, (self._results_q, 2))\n</pre>\n\nDefine a counter getter that gets the counter value from the FIFO results \nqueue:\n\n<pre>\n  @property\n  def counter(self):\n    return self._results_q.get()\n</pre>\n\nIn the main code, to print out the counter value from the first 10 loops:\n\n<pre>\niter = CounterIterator()\n\niter.concurrent_start()\n\nfor _ in range(10):\n  print(iter.counter)\n\niter.concurrent_stop()\n</pre>\n\n### Who do I talk to? ###\n\n* The author: KCLee\n* Email: lathe-rebuke.0c@icloud.com\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "concurrent-loop",
            "package_url": "https://pypi.org/project/concurrent-loop/",
            "platform": null,
            "project_url": "https://pypi.org/project/concurrent-loop/",
            "project_urls": {
                "Homepage": "https://bitbucket.org/kclee/concurrent/src/master/"
            },
            "release_url": "https://pypi.org/project/concurrent-loop/1.1.2/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Helper for running functions in a concurrent loop.",
            "version": "1.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15669626,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "19d8eda6e62ea37a06536e020a194ede",
                    "sha256": "c851f27445a9d78a1412518d0531f3469aaa5732cdd0dfad3678ff48495ffaf8"
                },
                "downloads": -1,
                "filename": "concurrent_loop-1.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "19d8eda6e62ea37a06536e020a194ede",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 17410,
                "upload_time": "2022-11-05T21:06:41",
                "upload_time_iso_8601": "2022-11-05T21:06:41.487951Z",
                "url": "https://files.pythonhosted.org/packages/05/07/6acdd4baf490b742b13676e3ccc33f7dd10b98e6f3ef014b42f8cd46f8ab/concurrent_loop-1.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fa0284e498606640d3d3cdbea7cc3c64",
                    "sha256": "14072b86b58bf6fe75092b9c67f5cb6c56fd9063c9403ef6a75dc3632c624b74"
                },
                "downloads": -1,
                "filename": "concurrent_loop-1.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "fa0284e498606640d3d3cdbea7cc3c64",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 16201,
                "upload_time": "2022-11-05T21:06:42",
                "upload_time_iso_8601": "2022-11-05T21:06:42.770041Z",
                "url": "https://files.pythonhosted.org/packages/0d/da/15f77938181a9f2c610648c0a16307a32850e14b719312982d5b5d5cf346/concurrent_loop-1.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}