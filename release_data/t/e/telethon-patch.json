{
    "0.1": {
        "info": {
            "author": "New-Dev0",
            "author_email": "New-dev0@outlook.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Telethon-Patch\r\n- A Wrap over Telethon (Telegram MtProto Library), providing Layer 139 and additional features.\r\n\r\n## Installation\r\n```bash\r\npip install telethon-patch\r\n```\r\n* (Make Sure, Telethon is not already installed on your system, `telethon-patch` will do that for you!)\r\n\r\n### Usage\r\n- To make telethon-patch to do it's work, add this lines before creating TelegramClient\r\n```python\r\nfrom telethonpatch import apply\r\napply()\r\n```\r\n\r\n## Features\r\n#### Use any Function without Import\r\n```python\r\nawait client.SendReactionRequest(\"chat\", msg.id, reaction=\"\ud83d\udc4d\")\r\n# or (Without 'Request' prefix)\r\nawait client.SendReaction(chat, msg.id, reaction=\"\ud83d\udc4d\")\r\n```\r\n\r\n### Send Button linked to User's profile\r\n```python\r\nfrom telethon.tl.types import Button\r\n\r\nuser = await client.get_input_entity(\"me\")\r\nbutton = Button.mention(\"Open Profile\", user)\r\n\r\nawait client.send_message(\"username\", \"Hey!, Message with mention Button\", buttons=button)\r\n```\r\n\r\n### Chat Join Requests ([In Detail](#eventsjoinrequest))\r\n```python\r\nfrom telethon import events\r\n\r\n@client.on(events.JoinRequest())\r\nasync def example(event):\r\n    ## Approve - User\r\n    await event.approve()\r\n    ## Disapprove user\r\n    await event.reject()\r\n    # or print Info of the user.\r\n    print(await event.get_user())\r\n```\r\n\r\n### Group Call Event ([In Detail](#eventsgroupcall))\r\n```python\r\n@client.on(events.GroupCall())\r\nasync def groupcall(group_call):\r\n    if group_call.started:\r\n        print(\"Group Call Started!\")\r\n        return\r\n    if group_call.ended:\r\n        print(\"Group Call Ended!\")\r\n```\r\n\r\n### Message Extensions\r\n- `message.message_link` - `Message link of message.`\r\n- `message.comment()` - Bound method to comment on channel or thread message.\r\n- `message.react()` - Bound method to react on messages.\r\n\r\n\r\n### Friendly Methods like\r\n > client.start_group_call\r\n\r\n > client.read (instead of send_read_acknowledge)\r\n\r\n\r\n# Events\r\n\r\n## `events.GroupCall`\r\n- Occurs when certain action related to group call happens.\r\n-  `started` - Group call started.\r\n-  `ended` - Group call ended.\r\n-  `scheduled` - Whether a Group call has been scheduled.\r\n\r\n#### Methods\r\n- `.start(title, rtmp_stream, schedule)` - Start a group call\r\n- `.discard()` - End group call.\r\n- `.toggle_record(start, video, video_portrait, title)` - Toggle group call record.\r\n\r\n## `events.JoinRequest`\r\n- Occurs when new chat join request is sent.\r\n- `.invite` - ExportedChatInvite related to join request\r\n- `.about` - User's about.\r\n\r\n#### Methods\r\n- `.approve()` - Approve chat join request of user.\r\n- `.reject()` - Reject chat join request.\r\n- `.get_user()` - Get user sending request.\r\n\r\n### Example of full functioning bot can be find in [examples](/examples)\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/New-dev0/Telethon-Patch",
            "keywords": "telethon,telethon-patch,telegram,mtproto",
            "license": "GNUV3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "telethon-patch",
            "package_url": "https://pypi.org/project/telethon-patch/",
            "platform": null,
            "project_url": "https://pypi.org/project/telethon-patch/",
            "project_urls": {
                "Homepage": "https://github.com/New-dev0/Telethon-Patch"
            },
            "release_url": "https://pypi.org/project/telethon-patch/0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13460124,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "06acf8e8bdad0ab18862940df3949f8c",
                    "sha256": "f31a872347fde3a2e5165923390032c469772e6e8579420d3222c9f17ac5ae87"
                },
                "downloads": -1,
                "filename": "telethon-patch-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "06acf8e8bdad0ab18862940df3949f8c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17354,
                "upload_time": "2022-04-09T04:00:48",
                "upload_time_iso_8601": "2022-04-09T04:00:48.815092Z",
                "url": "https://files.pythonhosted.org/packages/c1/2a/580e515f759968080c5e7d0cadd3820bb2ed4798884ce98941bdfb0fc77f/telethon-patch-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}