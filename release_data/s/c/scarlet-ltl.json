{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "Ritam Raha <ritam.raha18@gmail.com>, Rajarshi Roy <rajarshi008@gmail.com>, Nathanael Fijalkow <nathanael.fijalkow@gmail.com>, Daniel Neider <daniel.neider@uni-oldenburg.de>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "<h1 align=\"center\">\n  <img src=\"https://rajarshi008.github.io/assets/images/scarlet-logo.png\" width=\"60%\">\n </h1>\n\n\n---\n## SCARLET \n\n\nWe solve the problem of learning LTL formulas from a sample consisting of traces partitioned into positive and negative.\nA [paper](https://link.springer.com/chapter/10.1007/978-3-030-99524-9_14) presenting the algorithms behind `Scarlet` was published in TACAS'2022.\n\n## Installation\n\n### Creating Virtual Environments\n\nIt is recommended to install `Scarlet` inside a virtual environment as otherwise the dependencies have to be installed in your machine.\nUsually, a virtual environment can be created and activated using the following command:\n\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n### Installing the tool\n\nNow, you can install the tool, as python package using pip command as follows:\n\n```\npython3 -m pip install Scarlet-ltl\n```\n\n### Input File format:\n\nThe input files consist of traces separated as positives and negatives, separated by `---`.\nEach trace is a sequence of letter separated by `;`. Each letter represents the truth value of atomic propositions.\nAn example of a trace is `1,0,1;0,0,0` which consists of two letters each of which define the values of three propositions (which by default consider to be `p,q,r`). An example sample looks like the following:\n```\n0,0,0;0,1,1;1,0,0;0,0,1;0,1,0\n1,1,0;1,0,1;1,0,0;1,1,1;1,0,1\n1,1,0;0,1,1;1,1,1;1,0,0;1,0,1\n---\n1,0,0;1,0,0;0,1,0;1,1,0;1,1,1\n1,0,0;1,0,0;0,1,0;1,1,0;1,0,0\n0,0,1;1,0,0;1,1,0;1,1,1;1,0,0\n```\n\n## How to run Scarlet:\n\n### Create input file\n\nTo run Scarlet, you have to create an input file with `.trace` extension in the same directory where `venv` folder is located. The input file format is described in the above section.\n\n### Run Scarlet on a particular input file\n\n```\nfrom Scarlet.ltllearner import LTLlearner\nlearner = LTLlearner(input_file = \"input_file_name.trace\")\nlearner.learn()\n```\nThis will run Scarlet on the input trace file.\n\n### Parameters\nYou can call the `LTLlearner` class with additional parameters as follows:\n\n* input_file = the path of the file containing LTL formuas, i.e., `= 'input_file_name.trace'`\n* verbosity = specifying the logging level, i.e., 0 for the basic formula and time, 1 for a bit detailed, 2 for fully detailed execution, `default = 2`\n* timeout = For specifying the timeout, `default = 900`\n* csvname = the name of the output csv file, i.e.,  `= 'output_file_name.csv'`\n* thres = the bound on loss function for noisy data, `default = 0` for perfect classification, has to be a number between zero and one\n\n\n## How to generate trace files from LTL formulas\n\nYou can also generate trace files from given LTL formulas following the instructions below:\n\n### Install dependencies\n\nFor generating benchmarks from a given set of LTL formula, we rely on a python package LTLf2DFA that uses [MONA](https://www.brics.dk/mona/) in its backend. \nAs a result, one needs to install MONA first in order to be able to use this procedure (instructions can be found in the MONA website).\n\n### Create input formula file\n\nFor generating benchmarks, you have to create an input file named `formulas.txt` in the same directory where `venv` folder is located. The formula file should contain a list of formulas (in prefix notation) along with the alphabet.\nAn example of this file is as follows:\n\n```\nG(!(p));p\n->(F(q), U(!(p),q));p,q\nG(->(q, G(!(p))));p,q\n```\n\n### Generate trace files from `formulas.txt`\n\n```\nfrom Scarlet.genBenchmarks import SampleGenerator\ngenerator = SampleGenerator(formula_file= \"formulas.txt\")\ngenerator.generate()\n```\n\n### Parameters\nYou can call the `SampleGenerator` class with additional parameters as follows:\n\n* formula_file = the path of the file containing LTL formuas, `example = 'formulas.txt'`\n* sample_sizes = list of sample_size, i.e., number of positive traces and number of negative traces (separated by comma) in each sample, `default = [(10,10),(50,50)]`\n* trace_lengths = For specifying the length range for each trace in the samples, `default = [(6,6)]`\n* output_folder = For specifying the name of the folder in which samples are generated\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Scarlet-ltl",
            "package_url": "https://pypi.org/project/Scarlet-ltl/",
            "platform": null,
            "project_url": "https://pypi.org/project/Scarlet-ltl/",
            "project_urls": {
                "Homepage": "https://github.com/rajarshi008/Scarlet",
                "Paper": "https://link.springer.com/chapter/10.1007/978-3-030-99524-9_14"
            },
            "release_url": "https://pypi.org/project/Scarlet-ltl/0.0.1/",
            "requires_dist": [
                "lark",
                "graphviz",
                "ltlf2dfa"
            ],
            "requires_python": ">=3.7",
            "summary": "A package for learning LTL formulas from a sample consisting of traces partitioned into positive and negative",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14720216,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f16a3c31c4f53701a8ec0affc90ced25",
                    "sha256": "411b309aaf94b38d38274396859cb62e8b03a0aead6f259000f90537d5c3fd16"
                },
                "downloads": -1,
                "filename": "Scarlet_ltl-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f16a3c31c4f53701a8ec0affc90ced25",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 30153,
                "upload_time": "2022-08-10T17:55:10",
                "upload_time_iso_8601": "2022-08-10T17:55:10.219562Z",
                "url": "https://files.pythonhosted.org/packages/69/36/e93918cc4d0a389e24e92d1bb25ef13082d6942542cae6db1ce24b50d719/Scarlet_ltl-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0f8ac66aef4f250cde955059f0a4784e",
                    "sha256": "5751c0264eb169ed07b02ad177c2bfa6fb33e5b2f7c3efc21390e05c6aae72ea"
                },
                "downloads": -1,
                "filename": "Scarlet-ltl-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "0f8ac66aef4f250cde955059f0a4784e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 30145,
                "upload_time": "2022-08-10T17:55:11",
                "upload_time_iso_8601": "2022-08-10T17:55:11.808568Z",
                "url": "https://files.pythonhosted.org/packages/72/32/8872a01bc56b81e0066ac28051adcb8f652a26dc3dfb8de7a932589ea749/Scarlet-ltl-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}