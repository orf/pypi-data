{
    "0.3.0": {
        "info": {
            "author": "DataJoint",
            "author_email": "info@datajoint.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# DataJoint Elements Interface for external analysis packages\n\n+ This repository serves a few purposes:\n     + Load neurophysiological data into the\n [DataJoint Elements](https://github.com/datajoint/datajoint-elements).\n     + Trigger packages used for neurophysiological data processing.\n     + Functions common to the DataJoint Elements (e.g. search directory tree for data files).\n\n+ See [DataJoint Elements](https://github.com/datajoint/datajoint-elements) for descriptions\n of the `elements` and `workflows` developed as part of this initiative.\n\n# Architecture\n\n+ The functions for each acquisition and analysis package are stored within a separate module.\n\n+ Acquisition packages\n     + `scanimage_utils.py`\n\n+ Analysis packages\n     + `suite2p_loader.py`\n     + `caiman_loader.py`\n     + `run_caiman.py`\n\n# Installation\n\n+ Install `element-interface`:\n     ```\n     pip install element-interface\n     ```\n\n+ This package is to be used in combination with the other DataJoint Elements (e.g. `element-calcium-imaging`).  The installation of packages used for data processing (e.g. `Suite2p`) will be included within the respective DataJoint Element (e.g. `element-calcium-imaging`).\n\n# Usage\n\n+ See the [workflow-calcium-imaging](https://github.com/datajoint/workflow-calcium-imaging) \nand [element-calcium-imaging](https://github.com/datajoint/element-calcium-imaging) \nrepositories for example usage of `element-interface`.\n\n+ ScanImage\n     ```python\n     import scanreader\n     from element_interface import scanimage_utils\n\n     # ScanImage file path\n     scan_filepath = '<imaging_root_data_dir>/subject1/session0/<scan_filename>.tif'\n\n     loaded_scan = scanreader.read_scan(scan_filepath)\n\n     recording_time = scanimage_utils.get_scanimage_acq_time(loaded_scan)\n     header = scanimage_utils.parse_scanimage_header(loaded_scan)\n     ```\n\n+ Suite2p\n     ```python\n     from element_interface import suite2p_loader\n\n     # Directory containing Suite2p output\n     output_dir = '<imaging_root_data_dir>/subject1/session0/suite2p'\n\n     loaded_dataset = suite2p_loader.Suite2p(output_dir)\n     ```\n\n+ Suite2p wrapper functions for triggering analysis\n\n  + Functions to independently run Suite2p's motion correction, segmentation, and deconvolution steps. These functions currently work for single plane tiff files.  If running all Suite2p pre-processing steps concurrently, these functions are not required and one can run `suite2p.run_s2p()`.\n\n  + These wrapper functions were developed primarily because `run_s2p` cannot individually run deconvolution using the `spikedetect` flag ([Suite2p Issue #718](https://github.com/MouseLand/suite2p/issues/718)).\n\n  + Requirements\n    + [ops dictionary](https://suite2p.readthedocs.io/en/latest/settings.html)\n    + [db dictionary](https://github.com/MouseLand/suite2p/blob/4b6c3a95b53e5581dbab1feb26d67878db866068/jupyter/run_pipeline_tiffs_or_batch.ipynb)\n\n  + Note that the ops dictionary returned from the `motion_correction_suite2p` and `segmentation_suite2p` functions is only a subset of the keys generated with the `suite2p.default_ops()` function.\n\n     ```python\n     import element_interface\n     import suite2p\n\n     ops = dict(suite2p.default_ops(), nonrigid=False, two_step_registration=False)\n\n     db = {\n          'h5py': [], # single h5 file path\n          'h5py_key': 'data',\n          'look_one_level_down': False, # search for TIFFs in all subfolders \n          'data_path': ['/test_data'], # list of folders with tiffs                                    \n          'subfolders': [], # choose subfolders of 'data_path'\n          'fast-disk': '/test_data' # string path for storing binary file \n          }\n\n     ops.update(do_registration=1, roidetect=False, spikedetect=False)\n     motion_correction_ops = element_interface.suite2p_trigger.motion_correction_suite2p(ops, db)\n\n     motion_correction_ops.update(do_registration=0, roidetect=True, spikedetect=False)\n     segmentation_ops = element_interface.suite2p_trigger.segmentation_suite2p(motion_correction_ops, db)\n\n     segmentation_ops.update(do_registration=0, roidetect=False, spikedetect=True)\n     spikes = element_interface.suite2p_trigger.deconvolution_suite2p(segmentation_ops, db)\n     ```\n\n\n+ CaImAn\n     ```python\n     from element_interface import caiman_loader\n\n     # Directory containing CaImAn output\n     output_dir = '<imaging_root_data_dir>/subject1/session0/caiman'\n\n     loaded_dataset = caiman_loader.CaImAn(output_dir)\n     ```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/datajoint/element-interface",
            "keywords": "neuroscience calcium-imaging science datajoint",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "element-interface",
            "package_url": "https://pypi.org/project/element-interface/",
            "platform": null,
            "project_url": "https://pypi.org/project/element-interface/",
            "project_urls": {
                "Homepage": "https://github.com/datajoint/element-interface"
            },
            "release_url": "https://pypi.org/project/element-interface/0.3.0/",
            "requires_dist": [
                "numpy (==1.21.0)",
                "dandi"
            ],
            "requires_python": "",
            "summary": "Loaders of neurophysiological data into the DataJoint Elements",
            "version": "0.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15438842,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "092f3b5d14cf54620f0464196acdf364",
                    "sha256": "1ee77d476c5091d2d8d9989d79ac984e9bd348988425c11599bac64ce2d1e5ee"
                },
                "downloads": -1,
                "filename": "element_interface-0.3.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "092f3b5d14cf54620f0464196acdf364",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 17140,
                "upload_time": "2022-10-17T16:31:13",
                "upload_time_iso_8601": "2022-10-17T16:31:13.943511Z",
                "url": "https://files.pythonhosted.org/packages/e2/70/92eb995e20ccee9bc50637558c40cc6aaeb493376370bca5227a1bdcaa37/element_interface-0.3.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d96c0afbd7489def6aa40ebd890745c8",
                    "sha256": "a39339ba20ebdeecc743c17fec3f18cc44c26e895286b3f4ba35cd2ad9137785"
                },
                "downloads": -1,
                "filename": "element-interface-0.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "d96c0afbd7489def6aa40ebd890745c8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15967,
                "upload_time": "2022-10-17T16:31:15",
                "upload_time_iso_8601": "2022-10-17T16:31:15.624277Z",
                "url": "https://files.pythonhosted.org/packages/c1/98/965b2039559928c2c3157f1a896b1a40b1b7ef0792b8c89addf7be5baf38/element-interface-0.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}