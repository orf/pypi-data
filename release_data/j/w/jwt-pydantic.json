{
    "0.0.2": {
        "info": {
            "author": "Adam Powis",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License"
            ],
            "description": "# jwt-pydantic\n\nJWT claim sets are becoming more complex and harder to manage. Writing validators for these claims checks is time consuming.\n\nThis package uses the power of Pydantic models, to make life a bit easier.\n\nWe have also included a Starlette middleware, which can be easily used in FastAPI, as shown [here](#fastapi-middleware).\n\n## Example\n\nLet's say our JWT token has the claims set below:\n```python\nclaims = {\n    \"firstname\": \"David\",\n    \"surname\": \"Bowie\",\n    \"best_album\": \"Hunky Dory\"\n}\n```\n\nWe can use `jwt-pydantic` to simplify the generation and verification of such tokens. First we declare the Pydantic model, by subclassing `JWTPydantic`:\n\n```python\nfrom jwt_pydantic import JWTPyantic\n\nclass MyJWT(JWTPyantic):\n    firstname: str\n    surname: str\n    best_album: str\n```\n\nTo generate a new JWT token, using the claims above, we do the following:\n\n```python\ntoken = MyJWT.new_token(claims=claims, key=\"SECRET_KEY\")\n```\n\nWe can then verify this token easily as follows\n```python\nMyJWT.verify_token(token, key=\"SECRET_KEY\")\n```\n\nWe can also return the decoded JWT token as our Pydantic model, to be used elsewhere:\n```python\ndecoded_jwt = MyJWT(token, key=\"SECRET_KEY\")\nprint(decoded_jwt.firstname)  # David\n```\n\n## FastAPI Middleware\n\nIt is also easy to declare a new JWTPydantic model and use this in middleware, as shown below.\n\n```python\n# main.py\nfrom fastapi import FastAPI\nfrom jwt_pydantic import JWTPyantic, JWTPydanticMiddleware\n\nSECRET_KEY = \"mykey\"\n\nclass MyJWT(JWTPyantic):\n    foo: int\n\napp = FastAPI()\napp.add_middleware(\n    JWTPydanticMiddleware,\n    header_name=\"jwt\",\n    jwt_pydantic_model=MyJWT,\n    jwt_key=SECRET_KEY,\n)\n\n@app.get(\"/\")\ndef homepage():\n    return \"Hello world\"\n```\n\nWe can run this code easily using uvicorn (`uvicorn main:app --reload`), and then using python on a different shell, we can test this to show it in action:\n```python\nimport requests\nrequests.get('http://127.0.0.1:8000/', headers={'jwt': MyJWT.new_token({'foo': 1}, 'mykey')})  # b'Hello World'\n```\n\n## python-jose keyword arguments\n\n`JWTPyantic` uses [python-jose](https://pypi.org/project/python-jose/) to manage the JWT tokens. The extra features that are provided using this package can be easily used through the keyword argument `jose_opts`. For instance, we can add the 'at_hash' claim to our JWT token by specifying the keyword argument `access_token`.\n\n```python\nMyJWT.new_token(\n    claims,\n    SECRET_KEY,\n    jose_opts={\"access_token\": \"1234\"},\n)\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "jwt-pydantic",
            "package_url": "https://pypi.org/project/jwt-pydantic/",
            "platform": null,
            "project_url": "https://pypi.org/project/jwt-pydantic/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/jwt-pydantic/0.0.2/",
            "requires_dist": [
                "httpx",
                "fastapi",
                "pydantic",
                "python-jose",
                "black ; extra == \"test\"",
                "mypy ; extra == \"test\"",
                "pytest ; extra == \"test\"",
                "pytest-cov ; extra == \"test\"",
                "pylint ; extra == \"test\"",
                "types-python-jose==3.3.4 ; extra == \"test\""
            ],
            "requires_python": ">=3.7.2",
            "summary": "Verify JWT claims using the powerful features of Pydantic.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16079535,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "279f9e6c015a03e5bf29801a26a0df90",
                    "sha256": "9e539d20a7292e96e0e720ae59158db9bdec773aade57a3e78b781653388fb9b"
                },
                "downloads": -1,
                "filename": "jwt_pydantic-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "279f9e6c015a03e5bf29801a26a0df90",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7.2",
                "size": 4901,
                "upload_time": "2022-12-12T22:16:25",
                "upload_time_iso_8601": "2022-12-12T22:16:25.995604Z",
                "url": "https://files.pythonhosted.org/packages/5c/fe/02b439abe55867b404c88d0aa4a0062a8d42c0f3bd6c41720a7a98f91c95/jwt_pydantic-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "45e24bcd509bf7470f8353449d9a8f81",
                    "sha256": "8835fbba59e7609b2fc681a9f87e9e3be0b381fd3283fa5c34ace8615b56fd54"
                },
                "downloads": -1,
                "filename": "jwt_pydantic-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "45e24bcd509bf7470f8353449d9a8f81",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7.2",
                "size": 4056,
                "upload_time": "2022-12-12T22:16:27",
                "upload_time_iso_8601": "2022-12-12T22:16:27.605484Z",
                "url": "https://files.pythonhosted.org/packages/88/84/626f7f8eb686c428e61fa84d8bbe9d90174a7aa66712664464fb42381f50/jwt_pydantic-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}