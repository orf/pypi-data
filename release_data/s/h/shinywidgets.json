{
    "0.1.1": {
        "info": {
            "author": "Carson Sievert",
            "author_email": "carson@rstudio.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/rstudio/py-shinywidgets",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinywidgets",
            "package_url": "https://pypi.org/project/shinywidgets/",
            "platform": "any",
            "project_url": "https://pypi.org/project/shinywidgets/",
            "project_urls": {
                "Homepage": "https://github.com/rstudio/py-shinywidgets"
            },
            "release_url": "https://pypi.org/project/shinywidgets/0.1.1/",
            "requires_dist": [
                "ipywidgets (>=7.6.5)",
                "jupyter-core",
                "shiny (>=0.2.0.9007)",
                "python-dateutil (>=2.8.2)"
            ],
            "requires_python": ">=3.7",
            "summary": "Render ipywidgets in Shiny applications",
            "version": "0.1.1",
            "yanked": true,
            "yanked_reason": null
        },
        "last_serial": 16040455,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8ee35732e3c598187322799270dc6cb0",
                    "sha256": "a9fa7a5975c05ae9fe5275438ab3669f87bfb08de59b997774a0c52d83de344c"
                },
                "downloads": -1,
                "filename": "shinywidgets-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8ee35732e3c598187322799270dc6cb0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 1807247,
                "upload_time": "2022-07-27T18:34:08",
                "upload_time_iso_8601": "2022-07-27T18:34:08.720595Z",
                "url": "https://files.pythonhosted.org/packages/88/c1/6f4b079b41a2603c9fc6498b45f2d2440416e3773043c21d28a9514e120e/shinywidgets-0.1.1-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "57bea70f6b299b5dfbac2eddbc0bbf91",
                    "sha256": "5cb105b602eae1c278abf112d0eddb39bfe3f0caf6e847d25bba345a85788f5b"
                },
                "downloads": -1,
                "filename": "shinywidgets-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "57bea70f6b299b5dfbac2eddbc0bbf91",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 1803572,
                "upload_time": "2022-07-27T18:34:11",
                "upload_time_iso_8601": "2022-07-27T18:34:11.016914Z",
                "url": "https://files.pythonhosted.org/packages/13/21/57e21f473c093ba273abf34b6268ed2d178d5222ad144a658a222fc6ff90/shinywidgets-0.1.1.tar.gz",
                "yanked": true,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Carson Sievert",
            "author_email": "carson@rstudio.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/rstudio/py-shinywidgets",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinywidgets",
            "package_url": "https://pypi.org/project/shinywidgets/",
            "platform": "any",
            "project_url": "https://pypi.org/project/shinywidgets/",
            "project_urls": {
                "Bug Tracker": "https://github.com/rstudio/py-shinywidgets/issues",
                "Documentation": "https://github.com/rstudio/py-shinywidgets/",
                "Homepage": "https://github.com/rstudio/py-shinywidgets",
                "Source Code": "https://github.com/rstudio/py-shinywidgets/"
            },
            "release_url": "https://pypi.org/project/shinywidgets/0.1.2/",
            "requires_dist": [
                "ipywidgets (>=7.6.5)",
                "jupyter-core",
                "shiny (>=0.2.0.9007)",
                "python-dateutil (>=2.8.2)"
            ],
            "requires_python": ">=3.7",
            "summary": "Render ipywidgets in Shiny applications",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16040455,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8dd8c9e4fdf541ee297a42330712268e",
                    "sha256": "793354d34b0595508e58026f16256417ee589a2d4628d9e935e82fde6583ff05"
                },
                "downloads": -1,
                "filename": "shinywidgets-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8dd8c9e4fdf541ee297a42330712268e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 1807297,
                "upload_time": "2022-07-27T21:01:16",
                "upload_time_iso_8601": "2022-07-27T21:01:16.238755Z",
                "url": "https://files.pythonhosted.org/packages/ec/3e/55c364150ae023922dd62f5d41dc24a1ce2ce3d11e2ef69516b8c3b550e4/shinywidgets-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a2a3393a76c6a9acfe33536d679ad2fc",
                    "sha256": "efb16a8b86705edd1238140210eb287411724d1308943ff971abc067971a24fd"
                },
                "downloads": -1,
                "filename": "shinywidgets-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "a2a3393a76c6a9acfe33536d679ad2fc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 1803682,
                "upload_time": "2022-07-27T21:01:21",
                "upload_time_iso_8601": "2022-07-27T21:01:21.983054Z",
                "url": "https://files.pythonhosted.org/packages/1c/2b/90cc717a9e8c952e7c39907b00e0bf6ec60ba1a8fc143ee0e2a76fa0bc43/shinywidgets-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Carson Sievert",
            "author_email": "carson@rstudio.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "shinywidgets\n================\n\nRender [ipywidgets](https://ipywidgets.readthedocs.io/en/stable/) inside a\n[Shiny](https://shiny.rstudio.com/py) app.\n\n## Installation\n\n```sh\npip install shinywidgets\n```\n\n## Overview\n\nEvery Shiny app has two main parts: the user interface (UI) and server logic.\n`{shinywidgets}` provides `output_widget()` for defining where to place a widget in the UI\nand `register_widget()` (or `@render_widget`) for supplying a widget-like object to\nthe `output_widget()` container. More technically, widget-like means:\n\n* Any object that subclasses `{ipywidgets}`'s `Widget` class.\n* Some other widget-like object that can be coerced into a `Widget`. Currently, we\n  support objects from `{altair}`, `{bokeh}`, and `{pydeck}`, but [please let us\n  know](https://github.com/rstudio/py-shinywidgets/issues/new) about other packages that we\n  should support.\n\nThe recommended way to incorporate `{shinywidgets}` widgets into Shiny apps is to:\n\n1. Initialize and `register_widget()` _once_ for each widget.\n    * In most cases, initialization should happen when the user session starts (i.e.,\n      the `server` function first executes), but if the widget is slow to initialize and\n      doesn't need to be shown right away, you may want to delay that initialization\n      until it's needed.\n2. Use Shiny's `@reactive.Effect` to reactively modify the widget whenever relevant\n   reactive values change.\n3. Use `{shinywidgets}`'s `reactive_read()` to update other outputs whenever the widget changes.\n    * This way, relevant output(s) invalidate (i.e., recalculate) whenever the relevant\n      widget attributes change (client-side or server-side).\n\nThe following app below uses `{ipyleaflet}` to demonstrate all these concepts:\n\n```py\nfrom shiny import *\nfrom shinywidgets import output_widget, register_widget, reactive_read\nimport ipyleaflet as L\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"zoom\", \"Map zoom level\", value=4, min=1, max=10),\n    output_widget(\"map\"),\n    ui.output_text(\"map_bounds\"),\n)\n\ndef server(input, output, session):\n\n    # Initialize and display when the session starts (1)\n    map = L.Map(center=(52, 360), zoom=4)\n    register_widget(\"map\", map)\n\n    # When the slider changes, update the map's zoom attribute (2)\n    @reactive.Effect\n    def _():\n        map.zoom = input.zoom()\n\n    # When zooming directly on the map, update the slider's value (2 and 3)\n    @reactive.Effect\n    def _():\n        ui.update_slider(\"zoom\", value=reactive_read(map, \"zoom\"))\n\n    # Everytime the map's bounds change, update the output message (3)\n    @output\n    @render.text\n    def map_bounds():\n        b = reactive_read(map, \"bounds\")\n        lat = [b[0][0], b[0][1]]\n        lon = [b[1][0], b[1][1]]\n        return f\"The current latitude is {lat} and longitude is {lon}\"\n\napp = App(app_ui, server)\n```\n\n<div align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/1365941/171508416-1ebe157c-b305-4517-9c89-14891dff8f79.gif\" width=\"70%\">\n</div>\n\nThe style of programming above (display and mutate) is great for efficiently performing\npartial updates to a widget. This is really useful when a widget needs to display lots\nof data and also quickly handle partial updates; for example, toggling the visibility of\na fitted line on a scatterplot with lots of points:\n\n```py\nfrom shiny import *\nfrom shinywidgets import output_widget, register_widget\nimport plotly.graph_objs as go\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Generate some data and fit a linear regression\nn = 10000\nd = np.random.RandomState(0).multivariate_normal([0, 0], [(1, 0.5), (0.5, 1)], n).T\nfit = LinearRegression().fit(d[0].reshape(-1, 1), d[1])\nxgrid = np.linspace(start=min(d[0]), stop=max(d[0]), num=30)\n\napp_ui = ui.page_fluid(\n    output_widget(\"scatterplot\"),\n    ui.input_checkbox(\"show_fit\", \"Show fitted line\", value=True),\n)\n\ndef server(input, output, session):\n\n    scatterplot = go.FigureWidget(\n        data=[\n            go.Scattergl(\n                x=d[0],\n                y=d[1],\n                mode=\"markers\",\n                marker=dict(color=\"rgba(0, 0, 0, 0.05)\", size=5),\n            ),\n            go.Scattergl(\n                x=xgrid,\n                y=fit.intercept_ + fit.coef_[0] * xgrid,\n                mode=\"lines\",\n                line=dict(color=\"red\", width=2),\n            ),\n        ]\n    )\n\n    register_widget(\"scatterplot\", scatterplot)\n\n    @reactive.Effect\n    def _():\n        scatterplot.data[1].visible = input.show_fit()\n\napp = App(app_ui, server)\n```\n\n<div align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/1365941/171507230-4b32ce4a-6e80-43a4-9c71-6a1f3ffe443e.gif\" width=\"70%\">\n</div>\n\n\nThat being said, in a situation where:\n\n* Performant updates aren't important\n* Other outputs don't depend on the widget's state\n* It's convenient to initialize a widget in a reactive context\n\nThen it's ok to reach for `@render_widget()` (instead of `register_widget()`) which\ncreates a reactive context (similar to Shiny's `@render_plot()`, `@render_text()`, etc.)\nwhere each time that context gets invalidated, the output gets redrawn from scratch. In\na simple case like the one below, that redrawing may not be noticable, but if you we're\nto redraw the entire scatterplot above everytime the fitted line was toggled, there'd\nbe noticeable delay.\n\n```py\nfrom shiny import *\nfrom shinywidgets import output_widget, render_widget\nimport ipyleaflet as L\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"zoom\", \"Map zoom level\", value=4, min=1, max=10),\n    output_widget(\"map\")\n)\n\ndef server(input, output, session):\n    @output\n    @render_widget\n    def map():\n        return L.Map(center=(52, 360), zoom=input.zoom())\n\napp = App(app_ui, server)\n```\n\n## Frequently asked questions\n\n### How do I size the widget?\n\n`{ipywidgets}`' `Widget` class has [it's own API for setting inline CSS\nstyles](https://ipywidgets.readthedocs.io/en/stable/examples/Widget%20Styling.html),\nincluding `height` and `width`. So, given a `Widget` instance `w`, you should be able to\ndo something like:\n\n```py\nw.layout.height = \"600px\"\nw.layout.width = \"80%\"\n```\n\n### How do I hide/show a widget?\n\nAs mentioned above, a `Widget` class should have a `layout` attribute, which can be\nused to set all sorts of CSS styles, including display and visibility. So, if you wanted\nto hide a widget and still have space allocated for it:\n\n```py\nw.layout.visibility = \"hidden\"\n```\n\nOr, to not give it any space:\n\n```py\nw.layout.display = \"none\"\n```\n\n### Can I render widgets that contain other widgets?\n\nYes! In fact this a crucial aspect to how packages like `{ipyleaflet}` work. In\n`{ipyleaflet}`'s case, each [individual marker is a widget](https://ipyleaflet.readthedocs.io/en/latest/layers/circle_marker.html) which gets attached to a `Map()` via `.add_layer()`.\n\n### Does `{shinywidgets}` work with Shinylive?\n\nShinylive allows some Shiny apps to be statically served (i.e., run entirely in the\nbrowser). [py-shinylive](https://github.com/rstudio/py-shinylive) does have some special\nsupport for `{shinywidgets}` and it's dependencies, which should make most widgets work\nout-of-the-box.\n\nIn some cases, the package(s) that you want to use may not come pre-bundled with\n`{shinywidgets}`; and in that case, you can [include a `requirements.txt`\nfile](https://shinylive.io/py/examples/#extra-packages) to pre-install those other\npackages\n\n## Troubleshooting\n\nIf after [installing](#installation) `{shinywidgets}`, you have trouble rendering widgets,\nfirst try running the \"hello world\" ipywidgets [example](https://github.com/rstudio/py-shinywidgets/blob/main/examples/ipywidgets/app.py). If that doesn't work, it could be that you have an unsupported version\nof a dependency like `{ipywidgets}` or `{shiny}`.\n\nIf you can run the \"hello world\" example, but \"3rd party\" widget(s) don't work, first\ncheck that the extension is properly configured with `jupyter nbextension list`. Even if\nthe extension is properly configured, it still may not work right away, especially if\nthat widget requires initialization code in a notebook environment. In this case,\n`{shinywidgets}` probably won't work without providing the equivalent setup information to\nShiny. Some known cases of this are:\n\n#### bokeh\n\nTo use `{bokeh}` in notebook, you have to run `bokeh.io.output_notebook()`. The\nequivalent thing in Shiny is to include the following in the UI definition:\n\n```py\nfrom bokeh.resources import Resources\nhead_content(HTML(Resources(mode=\"inline\").render()))\n```\n#### Other widgets?\n\nKnow of another widget that requires initialization code? [Please let us know about\nit](https://github.com/rstudio/py-shinywidgets/issues/new)!\n\n## Development\n\nIf you want to do development on `{shinywidgets}`, run:\n\n```sh\npip install -e .\ncd js && yarn watch\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/rstudio/py-shinywidgets",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "shinywidgets",
            "package_url": "https://pypi.org/project/shinywidgets/",
            "platform": "any",
            "project_url": "https://pypi.org/project/shinywidgets/",
            "project_urls": {
                "Bug Tracker": "https://github.com/rstudio/py-shinywidgets/issues",
                "Documentation": "https://github.com/rstudio/py-shinywidgets/",
                "Homepage": "https://github.com/rstudio/py-shinywidgets",
                "Source Code": "https://github.com/rstudio/py-shinywidgets/"
            },
            "release_url": "https://pypi.org/project/shinywidgets/0.1.3/",
            "requires_dist": [
                "ipywidgets (>=7.6.5)",
                "jupyter-core",
                "shiny (>=0.2.0.9007)",
                "python-dateutil (>=2.8.2)"
            ],
            "requires_python": ">=3.8",
            "summary": "Render ipywidgets in Shiny applications",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16040455,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bfd1783abdf4c55f4e05016d83d97b84",
                    "sha256": "7fb335cc18e2fad5072ad76489bc5bd2a8317dcde094b05906ca6beaaec44d77"
                },
                "downloads": -1,
                "filename": "shinywidgets-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "bfd1783abdf4c55f4e05016d83d97b84",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 1807512,
                "upload_time": "2022-12-08T21:59:08",
                "upload_time_iso_8601": "2022-12-08T21:59:08.626291Z",
                "url": "https://files.pythonhosted.org/packages/b3/3a/22ecdc45952af795738a3cca9ae579bb1e77f90c60bf3a6274f73046e421/shinywidgets-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "abbae513b5a3cce3ab5d0a4f6229af80",
                    "sha256": "6e08b8db54a591fcb567bb9e9d784dfbb3654c86bee08d8f532149f9ca4da005"
                },
                "downloads": -1,
                "filename": "shinywidgets-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "abbae513b5a3cce3ab5d0a4f6229af80",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 1803931,
                "upload_time": "2022-12-08T21:59:10",
                "upload_time_iso_8601": "2022-12-08T21:59:10.478854Z",
                "url": "https://files.pythonhosted.org/packages/0b/6f/2e7537cbc17b6693bb8be2b4eb3eb0f5b6ad029ce27d6cc47db2062e1b44/shinywidgets-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}