{
    "0.1.17.post24": {
        "info": {
            "author": "Zoheir HADID",
            "author_email": "zoheir.hadid@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZoheirHADID/EnergySystemModels",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "EnergySystemModels",
            "package_url": "https://pypi.org/project/EnergySystemModels/",
            "platform": null,
            "project_url": "https://pypi.org/project/EnergySystemModels/",
            "project_urls": {
                "Homepage": "https://github.com/ZoheirHADID/EnergySystemModels"
            },
            "release_url": "https://pypi.org/project/EnergySystemModels/0.1.17.post24/",
            "requires_dist": [
                "pandas",
                "CoolProp (~=6.4.1)",
                "pylab-sdk (~=1.3.2)",
                "matplotlib",
                "tkintertable (~=1.3.3)",
                "numpy (~=1.21.0)",
                "pyqtgraph",
                "thermochem",
                "sip (>=5.0.1)",
                "PyQt-builder (>=1.1.0)",
                "PyQt5 (>=5.15.6)"
            ],
            "requires_python": ">=3.7",
            "summary": "Energy systems models are the mathematical models that are developed in order to represent as reliably as possible various energy-related problems.",
            "version": "0.1.17.post24",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15464947,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dd66594624c6dbd2806ef14f5c3fa591",
                    "sha256": "789a925bd3d8775724a045adbc5f6148fbbb9d43cb26dc6621e9555106256619"
                },
                "downloads": -1,
                "filename": "EnergySystemModels-0.1.17.post24-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dd66594624c6dbd2806ef14f5c3fa591",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 156582,
                "upload_time": "2022-05-22T18:02:07",
                "upload_time_iso_8601": "2022-05-22T18:02:07.604946Z",
                "url": "https://files.pythonhosted.org/packages/da/74/0886d2296f139baf711171c2652c12f1c54b80b1fb545da8f3f7af3ec44e/EnergySystemModels-0.1.17.post24-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.17.post25": {
        "info": {
            "author": "Zoheir HADID",
            "author_email": "zoheir.hadid@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZoheirHADID/EnergySystemModels",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "EnergySystemModels",
            "package_url": "https://pypi.org/project/EnergySystemModels/",
            "platform": null,
            "project_url": "https://pypi.org/project/EnergySystemModels/",
            "project_urls": {
                "Homepage": "https://github.com/ZoheirHADID/EnergySystemModels"
            },
            "release_url": "https://pypi.org/project/EnergySystemModels/0.1.17.post25/",
            "requires_dist": [
                "pandas",
                "CoolProp (~=6.4.1)",
                "pylab-sdk (~=1.3.2)",
                "matplotlib",
                "tkintertable (~=1.3.3)",
                "numpy",
                "pyqtgraph",
                "thermochem",
                "sip",
                "PyQt-builder",
                "PyQt5",
                "scikit-learn"
            ],
            "requires_python": ">=3.7",
            "summary": "Energy systems models are the mathematical models that are developed in order to represent as reliably as possible various energy-related problems.",
            "version": "0.1.17.post25",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15464947,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4a5656250ed3a7eea91bfef46b37b190",
                    "sha256": "3c16f2a599d3eb586be4fd93792dbcfa68d31cc017150c83248965e6c1abe0be"
                },
                "downloads": -1,
                "filename": "EnergySystemModels-0.1.17.post25-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4a5656250ed3a7eea91bfef46b37b190",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 160377,
                "upload_time": "2022-07-30T19:16:32",
                "upload_time_iso_8601": "2022-07-30T19:16:32.004092Z",
                "url": "https://files.pythonhosted.org/packages/2b/18/2ac8c647ff2366d48ad1938a03103271ae631bde74110604602208489e4a/EnergySystemModels-0.1.17.post25-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.17.post26": {
        "info": {
            "author": "Zoheir HADID",
            "author_email": "zoheir.hadid@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZoheirHADID/EnergySystemModels",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "EnergySystemModels",
            "package_url": "https://pypi.org/project/EnergySystemModels/",
            "platform": null,
            "project_url": "https://pypi.org/project/EnergySystemModels/",
            "project_urls": {
                "Homepage": "https://github.com/ZoheirHADID/EnergySystemModels"
            },
            "release_url": "https://pypi.org/project/EnergySystemModels/0.1.17.post26/",
            "requires_dist": [
                "pandas",
                "CoolProp (~=6.4.1)",
                "pylab-sdk (~=1.3.2)",
                "matplotlib",
                "tkintertable (~=1.3.3)",
                "numpy",
                "pyqtgraph",
                "thermochem",
                "sip",
                "PyQt-builder",
                "PyQt5",
                "scikit-learn"
            ],
            "requires_python": ">=3.7",
            "summary": "Energy systems models are the mathematical models that are developed in order to represent as reliably as possible various energy-related problems.",
            "version": "0.1.17.post26",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15464947,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ae3ed3a72a523aa172179277ffb7c5ab",
                    "sha256": "357f4976da6e5fd6fd3bfab4dae3944ab3b692e50e43b89fa922509ac4d71e31"
                },
                "downloads": -1,
                "filename": "EnergySystemModels-0.1.17.post26-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ae3ed3a72a523aa172179277ffb7c5ab",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 160536,
                "upload_time": "2022-10-19T10:04:58",
                "upload_time_iso_8601": "2022-10-19T10:04:58.877274Z",
                "url": "https://files.pythonhosted.org/packages/b1/26/cfb7cd6b1beac3a34783d0764130ce679156f10db302fe35e01cab493f79/EnergySystemModels-0.1.17.post26-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.17.post27": {
        "info": {
            "author": "Zoheir HADID",
            "author_email": "zoheir.hadid@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "- [1. Thermodynamic Cycles Package](#1-thermodynamic-cycles-package)\n  * [1.1. Fluid Source](#11-fluid-source)\n    + [1.1.1. Input parameters](#111-Input-parameters)\n  * [1.2. Sink](#12-sink)\n  * [1.3. Compressor](#13-compressor)\n    + [1.3.1. Compressor model](#131-compressor-model)\n  * [1.4. Water Heat Storage] (#14-water-heat-storage)\n    + [1.4.1. Mixed Tank](#141-mixed-tank)\n\n- [2. AHU modules](#2-ahu-modules)\n  * [2.1 Fresh AHU Example](#21-fresh-ahu-exemple)\n- [3. Chiller Example](#3-Chiller-Example)\n  * [3.1. Launch Chiller Application (Tkinter GUI)](#31-Launch-Chiller-Application-(Tkinter-GUI))\n  * [3.2. Create Oriented-Object Chiller](#32-Create-Oriented-Object-Chiller)\n\n\n# 1. Thermodynamic Cycles Package\n## 1.1. Fluid Source\n### 1.1.1. Input parameters\n\n| Symbol   |      Description      |  SI Units | Used Units |\n|----------|:-------------:|------:|------:|\n| Ti_degC |  Inlet temerature | K | \u00c2\u00b0C |\n| fluid |  Fluid/Refrigerant name    |  String |\"air\",\"ammonia\",\"R134a\",...|\n| F_kgs, F_Sm3s, F_m3s, F_Sm3h, F_m3h, F_kgh | Input Flow rate |   kg/s | kg/s, Sm3/s, m3/s, Sm3/h, m3/h, kg/h |\n| Pi_bar | Inlet Pressure |   Pa | bara |\n\n``` python\nfrom ThermodynamicCycles.Source import Source\n\n#Create Compressor Object\nSOURCE=Source.Object()\n\n#Data Input\nSOURCE.Pi_bar=1.01325\nSOURCE.fluid=\"air\"\nSOURCE.F_kgs=1\n#SOURCE.F_Sm3s=2937.482966/3600 #SOURCE.F_m3s=2480.143675/3600\n#SOURCE.F_Sm3h=1 #SOURCE.F_m3h=2480.143675 #SOURCE.F_kgh=3600\n\n#Calculate Object\nSOURCE.calculate()\n\n#Data output\nprint(SOURCE.df)\n```\n## 1.2. Sink\n\n### 1.2.1. Test Sink\n``` python\nfrom ThermodynamicCycles.Sink import Sink\n#from ThermodynamicCycles.Connect import Fluid_connect\n\n#Create Sink object\nSINK=Sink.Object()\n\n#Fluid_connect(SINK.Inlet,SOURCE.Outlet) \nSINK.Inlet.fluid=\"air\"\nSINK.Inlet.F_kgs=0.334\nSINK.Inlet.P=101325\nSINK.Inlet.h=420000\n\n#calculate SINK\nSINK.calculate()\n\n#Print result\n\nprint(SINK.df)\nprint(SINK.To_degC)\n```\n### Output data\n\n## 1.3. Compressor\n### 1.3.1. Compressor model\n\n```python\n\nfrom ThermodynamicCycles.Source import Source\nfrom ThermodynamicCycles.Compressor import Compressor\nfrom ThermodynamicCycles.Sink import Sink\nfrom ThermodynamicCycles.Connect import Fluid_connect\n\n#Create Compressor Object with Source and fluid Sink\nSOURCE=Source.Object()\nCOMP=Compressor.Object()\nSINK=Sink.Object()\n\n#Data Input\nSOURCE.Ti_degC=20\nSOURCE.fluid=\"air\"\nSOURCE.Pi_bar=1\nSOURCE.F_Sm3h=500 # is not considered if  COMP.Qcomp is not None\n\nCOMP.eta_is=0.80\nCOMP.Tdischarge_target=80 # (discharge temperature in degC, after cooler)\nCOMP.HP=7.5*100000 # discharge pressure in Pa\nCOMP.Qcomp=48745.761 # if Energy Power is given (W) the Mass flow rate is recalculated\n\n\n#Calculate and Connect Objects\nSOURCE.calculate()\nFluid_connect(COMP.Inlet,SOURCE.Outlet)\nCOMP.calculate()\nFluid_connect(SINK.Inlet,COMP.Outlet)\nSINK.calculate()\n\n#Data output (print DataFrame)\nprint(SOURCE.df)\nprint(COMP.df)\nprint(SINK.df)\n\n```\n\n\n<img src=\"https://render.githubusercontent.com/render/math?math=\\eta_{is} = 0.8\">\n# EnergySystemModels\nEnergy System Models for Energy Efficiency Calculation\n\n## 1.4. Water Heat Storage\n### 1.4.1. Mixed Tank\n```python\nfrom ThermodynamicCycles import MixedStorage\nfrom ThermodynamicCycles.Source import Source\nfrom ThermodynamicCycles.Sink import Sink\nfrom ThermodynamicCycles.Connect import Fluid_connect\n\n\n#lecture d'un fichier excel\n#pip install pandas\nimport pandas as pd\nimport os\ndata=pd.read_excel( os.path.join(os.path.dirname(__file__), 'HotWaterStorage.xlsx'))\ndata['Timestamp'] = pd.to_datetime(data['Timestamp'], unit=\"%d/%m/%y %H:%M:%S\")\nrows = data.shape[0]\nprint(rows)\nprint(data.columns)\n\n#initialiser les table de sortie\ndf_result=pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)\ndf_source=pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)\ndf_str=pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)\ndf_sink=pd.DataFrame(data=None, index=None, columns=None, dtype=None, copy=False)\n\n#CreateTank Object with Source and fluid Sink\nSOURCE=Source.Object()\nSINK=Sink.Object()\nSTR=MixedStorage.Object()\n\n#param\u00c3\u00a8tres\nSTR.V=4\nSTR.Tinit_degC=40\nSTR.t=1*3600 #in seconde\n\nfor r in range(1, rows):\n#Data Input\n    SOURCE.Ti_degC=data[\"TdegC\"][r] \n    SOURCE.fluid=\"water\"\n    SOURCE.Pi_bar=1\n    SOURCE.F_m3h=data[\"F_m3h\"][r] \n\n    SOURCE.Timestamp=data[\"Timestamp\"][r]\n    STR.Timestamp=data[\"Timestamp\"][r]\n    SINK.Timestamp=data[\"Timestamp\"][r]\n\n    #calcul du pas de temps\n    Timestamp=data[\"Timestamp\"][r] \n    dt=(data[\"Timestamp\"][r]-data[\"Timestamp\"][r-1]).total_seconds()\n    #print(dt)\n    STR.t=dt\n\n    SOURCE.calculate()\n    Fluid_connect(STR.Inlet,SOURCE.Outlet)\n    STR.calculate()\n    Fluid_connect(SINK.Inlet,STR.Outlet)\n    SINK.calculate()\n\n    df_str=df_str.append(STR.df.T)\n    df_source=df_source.append(SOURCE.df.T)\n    df_sink=df_sink.append(SINK.df.T)\n  \n# Add new column to the DataFrame\ndf_result=df_str.merge(df_sink, on=['Timestamp']).merge(df_source, on=['Timestamp'])\nprint(df_result)\n\nwith pd.ExcelWriter('output_WaterStorage.xlsx') as writer:                #Cr\u00c3\u00a9ation d'un fichier de sortie + Ecriture\n    df_result.to_excel(writer, sheet_name='Feuille output',index=False)\n    data.to_excel(writer, sheet_name='Feuille input',index=False)\n\n####PLOT#####\n\n# Import Library\n\nimport matplotlib.pyplot as plt\ndf_result.index=df_result['Timestamp']\n\n# to set the plot size\nplt.figure(figsize=(16, 8), dpi=100)\n\n# Plot\ndf_result[\"str_Ti_degC\"].plot(marker=\"o\",label='Tentr\u00c3\u00a8e (\u00c2\u00b0C)', color='orange')\ndf_result[\"str_T_degC\"].plot(marker=\"o\",label='Tsortie (\u00c2\u00b0C)')\ndf_result[\"cumul_Qstr_kWh\"].plot(marker=\"o\",label='Energie stock\u00c3\u00a9e cumul\u00c3\u00a9e (kWh)')\ndf_result[\"Qstr_kW\"].plot(marker=\"o\",label='Puissance de stockage (kW)')\n\n# Labelling \n\nplt.xlabel(\"Date\")\nplt.ylabel(\"kWh, kW et \u00c2\u00b0C\")\nplt.legend()\nplt.grid()\nplt.title(\"Stockage d'\u00c3\u00a9nergie thermique\")\n\n# Display\n\nplt.show()\n```\n\n# 2. AHU modules\n# 2.1 Fresh AHU Example\n\n``` python\n\n# =============================================================================\n# AHU Model (Fresh air + Heating Coil + humidifier)\n# =============================================================================\n\n#module de calcul des prop d'air humide\nfrom AHU import FreshAir\n#Heating Coil Component\nfrom AHU import HeatingCoil\n#composant Humidifier (vapeur ou adiabatique)\nfrom AHU.Humidification import Humidifier\n# connexion entre les composants\nfrom AHU.Connect import Air_connect\n\n##########Cr\u00c3\u00a9ation des Objects\nAN=FreshAir.Object()\nBC=HeatingCoil.Object()\nHMD=Humidifier.Object()\n\n    \n#R\u00c3\u00a9cup\u00c3\u00a9ration des donn\u00c3\u00a9es entr\u00c3\u00a9es par l'utilisateur\n        #AN\nAN.m_vol=3000 #m3/h\n#print(\"AN.m_vol = \",AN.m_vol)\nAN.T=14 #\u00c2\u00b0C\nAN.HR_FreshAir=71 # %\n    #BC\nBC.T_out_target=15 #\u00c2\u00b0C\n    #Humidifier\nHMD.HA_out_target=8 #g/Kg dry air\n\n    #calculate les propri\u00c3\u00a9t\u00c3\u00a9s d'air neuf; !important\nAN.calculate()\n\nAir_connect(BC.Inlet,AN.Outlet)\nBC.calculate()\n    \n\nAir_connect(HMD.Inlet,BC.Outlet)\n    \nHMD.HumidType=\"vapeur\" #par default : Humdificateur adiabatique\nHMD.calculate()\n\n\n#enregistrer les r\u00c3\u00a9sultats du module d'air neuf\n\n#Absolute Humidity  g/kg_as\n\nprint(\"Fresh Air Absolute Humidity  g/kg_as\",round(AN.HA,1))\n# print(\"HA_FreshAir[r-1] = \",HA_FreshAir[r-1])\n#Sat Vapor Pressure  \" Pa\"\n\nprint(\"Fresh Air Sat Vapor Pressure   Pa\",round(AN.Pvsat,0))\n#Wet-Bulb Temperature  \u00c2\u00b0C\n\nprint(\"Fresh Air Wet-Bulb Temperature  \u00c2\u00b0C\",round(AN.T_hum,1))\n#Specific Enthalpy  KJ/Kg_as\n\nprint(\"Fresh Air Specific Enthalpy  KJ/Kg_as\",round(AN.h,3))\n\n#enregistrer les r\u00c3\u00a9sultats de la Coil de pr\u00c3\u00a9chauffage\n\n# Specific Enthalpy KJ/Kg_as\nprint(\"Heating Coil Specific Enthalpy KJ/Kg_as\",round(BC.h_out,1))\n# Thermal Power  kW\"\nprint(\"Heating Coil Thermal Power  kW\",round(BC.Qth,1))\n# Relative Humidity %\"\nprint(\"Heating Coil Relative Humidity %\",round(BC.HR_out,1))\n    \nprint(\"Humidifier Steam mass flow rate Kg/s\",round(HMD.m_water,3))  \nprint(\"Humidifier Dry air mass flow rate Kg/s\",round(HMD.m_as,3)) \n\n# =============================================================================\n# End AHU Model\n# =============================================================================\n\n```\n\n# 3. Chiller Example\n\n## 3.1. Launch Chiller Application (Tkinter GUI)\n``` python\nfrom TkinterGUI import Chiller\n``` \n## 3.2. Create Oriented-Object Chiller\n\n``` python\n# =============================================================================\n# Chiller Model (Evaporator + Compressor + Desuperheater + Condenser + Expansion_Valve)\n# =============================================================================\n\n# #ThermodynamicCycles\nimport CoolProp.CoolProp as CP\nfrom ThermodynamicCycles.Evaporator import Evaporator\nfrom ThermodynamicCycles.Compressor import Compressor\nfrom ThermodynamicCycles.Desuperheater import Desuperheater\nfrom ThermodynamicCycles.Expansion_Valve import Expansion_Valve\nfrom ThermodynamicCycles.Condenser import Condenser\nfrom ThermodynamicCycles.Connect import Fluid_connect\n\n###############Create chiller component object ##################\nEVAP=Evaporator.Object()\nCOMP=Compressor.Object()\nDESURCH=Desuperheater.Object()\nCOND=Condenser.Object()\nDET=Expansion_Valve.Object()\n###############################################################\n\n########################Cycle Inlet Parameters########################\n#***************Evaporator parameters*******\nfluid=\"R134a\"\nEVAP.fluid=fluid\nEVAP.Inlet.F_kgs=1 #Kg/s\n# T or P evap :\nEVAP.LP_bar=2.930154 #bar\n#EVAP.Ti_degC=0 #Tevap \nEVAP.surchauff=2 #superheating\nEVAP.Inlet.h= CP.PropsSI('H','P',1*1e5,'T',40+273.15,fluid)   #initialisation pour le calcul en boucle\n#******************compresseur parameters***********\n\n# give HP or Tcond\n#COMP.HP=1e5*10 #Pa\nCOMP.Tcond_degC=40\nCOMP.eta_is=0.8 # isentropic efficiency\nCOMP.Tdischarge_target=80 #\u00c2\u00b0C compressor outlet temperature, neglected if compressor is not cooled\nCOMP.Qcomp==100000 #in (W) If this value is given, the mass flow rate is calculated /Write None if not used  #in (W) If this value is given, the mass flow rate is calculated\n#*************** Condenser parameters**************\nCOND.subcooling=2 #\u00c2\u00b0C subcooling\n\n\n#calculation algorithme\nEVAP.calculate() # evaporator initialisation\nFluid_connect(COMP.Inlet,EVAP.Outlet)\nCOMP.calculate()\nFluid_connect(DESURCH.Inlet,COMP.Outlet)\nDESURCH.calculate()\nFluid_connect(COND.Inlet, DESURCH.Outlet)\nCOND.calculate()\nFluid_connect(DET.Inlet,COND.Outlet)\nFluid_connect(DET.Outlet,EVAP.Inlet)\nDET.calculate()\nFluid_connect(EVAP.Inlet,DET.Outlet)\nEVAP.calculate() # recalculate evaporator\n\n# Cycle performance\nEER=EVAP.Qevap/COMP.Qcomp\nprint(\"EER=\"+str(round(EER,1))+\" \")\nQcondTot=COND.Qcond+DESURCH.Qdesurch\nprint(\"QcondTot=\"+str(round(QcondTot/1000,1))+\" kW\")\nCOP=QcondTot/COMP.Qcomp\nprint(\"COP=\"+str(round(COP,1))+\" \")\n\n# ####### Print Results#######################\"\nprint(COMP.df)\nprint(EVAP.df)\nprint(DESURCH.df)\nprint(COND.df)\nprint(DET.df)\n\n# =============================================================================\n# End Chiller Model\n# =============================================================================\n```\n\n\n# 3. Pinch Analysis \n\n``` python\n\nfrom PinchAnalysis.PinchCalculation import PinchCalculation\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n#DataFrame Input Data\ndf=pd.DataFrame({'id': [1, 2, 3, 4],\n                   'name': ['stream1', 'stream2', 'stream3', 'stream4'],\n                   'Ti': [200, 50, 125, 45],\n                 'To': [50, 250, 124, 195],\n                 'mCp': [3, 2,300,4],\n                 'dTmin2': [5, 5, 10, 10],\n                 'integration': [True, True, True, True]\n                 })\n\n\n#Pinch Calculation\nT, plot_GCC, plot_ccf,plot_ccc,utilite_froide,utilite_chaude=PinchCalculation(df)\n\n#Print the results\nprint(\"T\",T)\nprint(\"GCC\",plot_GCC[:,0])\nprint(\"ccf\",plot_ccf[:,0])\nprint(\"ccc\",plot_ccc[:,0])\nprint(\"utilite_froide\",utilite_froide)\nprint(\"uilite_chaude\",utilite_chaude)\n\n\n# Plot the results\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\nax1.plot(plot_ccf[:,0],T, color='tab:blue')\nax1.plot(plot_ccc[:,0],T, color='tab:red')\nax2.plot(plot_GCC[:,0],T, color='tab:orange')\nax1.set(xlabel='kW', ylabel='Temperature (\u00c2\u00b0C)')\nax2.set(xlabel='kW')\nax1.grid(True)\nax2.grid(True)\nplt.show()\n\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ZoheirHADID/EnergySystemModels",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "EnergySystemModels",
            "package_url": "https://pypi.org/project/EnergySystemModels/",
            "platform": null,
            "project_url": "https://pypi.org/project/EnergySystemModels/",
            "project_urls": {
                "Homepage": "https://github.com/ZoheirHADID/EnergySystemModels"
            },
            "release_url": "https://pypi.org/project/EnergySystemModels/0.1.17.post27/",
            "requires_dist": [
                "pandas",
                "CoolProp (~=6.4.1)",
                "pylab-sdk (~=1.3.2)",
                "matplotlib",
                "tkintertable (~=1.3.3)",
                "numpy",
                "pyqtgraph",
                "thermochem",
                "sip",
                "PyQt-builder",
                "PyQt5",
                "scikit-learn"
            ],
            "requires_python": ">=3.7",
            "summary": "Energy systems models are the mathematical models that are developed in order to represent as reliably as possible various energy-related problems.",
            "version": "0.1.17.post27",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15464947,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e5b5e2e754e99d51d44b2d8af47a55ef",
                    "sha256": "d81a3e4f816ec45081d3ae97eac421da0be4a5e28bc9c35e90291ca9e9c69c24"
                },
                "downloads": -1,
                "filename": "EnergySystemModels-0.1.17.post27-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e5b5e2e754e99d51d44b2d8af47a55ef",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 160710,
                "upload_time": "2022-10-19T19:33:52",
                "upload_time_iso_8601": "2022-10-19T19:33:52.227459Z",
                "url": "https://files.pythonhosted.org/packages/d8/81/eb894cfe443806eaa9e644b7e32494c66742fc1d39220fda6b474fd7433a/EnergySystemModels-0.1.17.post27-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}