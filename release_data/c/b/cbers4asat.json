{
    "0.5": {
        "info": {
            "author": "Gabriel Russo",
            "author_email": "gabrielrusso@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Scientific/Engineering :: GIS"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/gabriel-russo/cbers4asat",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cbers4asat",
            "package_url": "https://pypi.org/project/cbers4asat/",
            "platform": null,
            "project_url": "https://pypi.org/project/cbers4asat/",
            "project_urls": {
                "Homepage": "https://github.com/gabriel-russo/cbers4asat"
            },
            "release_url": "https://pypi.org/project/cbers4asat/0.5/",
            "requires_dist": [
                "geopandas (>=0.9)",
                "requests (>=2.25.1)",
                "pandas (>=1.3.5)"
            ],
            "requires_python": "",
            "summary": "Biblioteca Python para consultar o cat\u00e1logo e realizar opera\u00e7\u00f5es com dados do CBERS4A",
            "version": "0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14840483,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0f398b651732c83fbed2bce8ced95426",
                    "sha256": "7c7ecfb30253761899f62f4058584911c4d186eac2e6a7f652b1cac05bc0989a"
                },
                "downloads": -1,
                "filename": "cbers4asat-0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0f398b651732c83fbed2bce8ced95426",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 11581,
                "upload_time": "2022-08-12T00:16:54",
                "upload_time_iso_8601": "2022-08-12T00:16:54.207472Z",
                "url": "https://files.pythonhosted.org/packages/57/85/d55a405ccec0efb0bbce02a35a7e557ef6e0eff63933d9444bbbf453c7c3/cbers4asat-0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "08f181704975f956bdf0c0e088e19489",
                    "sha256": "18b18eb47f6f58ea3ddb728b83a80f01656e20d6570b1e98e242488eb44f1f21"
                },
                "downloads": -1,
                "filename": "cbers4asat-0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "08f181704975f956bdf0c0e088e19489",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11171,
                "upload_time": "2022-08-12T00:16:56",
                "upload_time_iso_8601": "2022-08-12T00:16:56.219429Z",
                "url": "https://files.pythonhosted.org/packages/06/13/91d5675ffdd3b3a8a238d41e39af7fa483a481aedc91c87d564dc6ba9104/cbers4asat-0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.6": {
        "info": {
            "author": "Gabriel Russo",
            "author_email": "gabrielrusso@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9",
                "Topic :: Scientific/Engineering :: GIS"
            ],
            "description": "# Cbers4asat\n\n## Descri\u00e7\u00e3o\nBiblioteca Python para consultar o cat\u00e1logo e realizar opera\u00e7\u00f5es com dados do CBERS4A e AMAZONIA1.\n\n [![Latest Version](https://img.shields.io/pypi/v/cbers4asat?style=plastic)](https://pypi.python.org/pypi/cbers4asat/)\n [![Latest Version](https://img.shields.io/pypi/l/cbers4asat?style=plastic)](https://pypi.python.org/pypi/cbers4asat/)\n [![Latest Version](https://img.shields.io/pypi/pyversions/cbers4asat?style=plastic)](https://pypi.python.org/pypi/cbers4asat/)\n [![Latest Version](https://img.shields.io/pypi/dm/cbers4asat?style=plastic)](https://pypi.python.org/pypi/cbers4asat/)\n\n> [Read this README in english](https://github.com/gabriel-russo/cbers4asat/blob/master/en-US_README.md) :us:\n\n## Download da biblioteca com pip\n\n`pip install cbers4asat`\n\n## Sum\u00e1rio\n* [Descri\u00e7\u00e3o](#descri\u00e7\u00e3o)\n* [Documenta\u00e7\u00e3o](#descri\u00e7\u00e3o-m\u00e9todos)\n* [Exemplos b\u00e1sicos](#exemplos)\n    * [Buscando produtos com bounding box](#buscando-produtos-com-bounding-box)\n    * [Buscando produtos com \u00f3rbita e ponto](#buscando-produtos-com-\u00f3rbita-e-ponto)\n    * [Download de produtos](#download-de-produtos)\n    * [Converter cole\u00e7\u00e3o de produtos para GeoDataFrame](#converter-cole\u00e7\u00e3o-de-produtos-para-geodataframe)\n    * [Download de produtos no GeoDataFrame ](#download-de-produtos-no-geodataframe)\n* [Contribui\u00e7\u00e3o](#contribui\u00e7\u00e3o)\n* [Lista de melhorias](#lista-de-melhorias)\n* [Licen\u00e7a](#licen\u00e7a)\n\n## Descri\u00e7\u00e3o: M\u00e9todos\n\n- query: *Fazer uma busca na API*\n  - Par\u00e2metros:\n    - **location** -> `List[float] | Tuple(int, int)` : Bouding box ou \u00d3rbita ponto da \u00e1rea de interesse\n    - **initial_date**: -> `date` : Data inicial da busca\n    - **end_date** -> `date` : Data limite da busca\n    - **cloud** -> `int` : Porcentagem m\u00e1xima de nuvem da busca\n    - **limit** -> `int` : Limite de quantidade de produtos que ir\u00e3o ser retornados na busca\n    - **collections** (*Opcional*) -> `List[str]` : Cole\u00e7\u00e3o(\u00f5es) de imagens.\n----\n  - download: *Baixar banda(s) das cenas retornadas do m\u00e9todo `query`*\n    - Par\u00e2metros:\n      - **products** -> `Dict | GeoDataFrame` : As cenas retornadas da API\n      - **bands** -> `List[str]` : Banda(s) escolhida(s) dentre as dispon\u00edveis da cena\n      - **threads** (*Opcional*) -> `int` : Limite de threads para o download paralelo\n      - **outdir** (*Opcional*) -> `str` : Caminho onde ir\u00e1 ser salvo as bandas\n      - **with_folder** (*Opcional*) -> `bool` : Chave para ativar o agrupamento das bandas baixadas em subpastas\n----\n  - to_geodataframe: *Transformar dicion\u00e1rio no formato GeoJSON em GeoDataFrame*\n    - Par\u00e2metros:\n      - **products** -> `Dict` : Os produtos retornados da API\n      - **crs** (*Opcional*)-> `str` : Sistema de refer\u00eancia (ex: EPSG:4326)\n----\n## Exemplos\n\n### Buscando produtos com Bounding Box:\n```python\n# Importar biblioteca do cbers4asat e datetime\nfrom cbers4asat import Cbers4aAPI\nfrom datetime import date\n\n# (Requisito apenas para download) \n# Login utilizado no http://www2.dgi.inpe.br/catalogo/explore\n# Pode ser adicionado depois com o setter: api.user('meu@email.com')\napi = Cbers4aAPI('seu.login@email.com')\n\n# Bouding Box escolhido\nbbox = [-63.92944335937501,\n        -8.819260401678381,\n        -63.79211425781251,\n        -8.722218306198739]\n\n# Intervalo de data para a busca\ndata_inicial = date(2021, 8, 25)\ndata_final = date(2021, 9, 25)\n\n# Fazer uma busca no cat\u00e1logo e exibir resultados\nprodutos = api.query(location=bbox, \n                     initial_date=data_inicial, \n                     end_date=data_final, \n                     cloud=100, \n                     limit=100,\n                     collections=['AMAZONIA1_WFI_L2_DN','CBERS4A_WPM_L4_DN']) #Opcional\n\nprint(produtos)\n# {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'id': 'AMAZONIA1_WFI03901620210911CB11', ...\n```\n\n### Buscando produtos com \u00f3rbita e ponto:\n```python\nfrom cbers4asat import Cbers4aAPI\nfrom datetime import date\n\napi = Cbers4aAPI('seu.login@email.com')\n\n# \u00d3rbita ponto (respectivamente) escolhida\npath_row = (229, 124)\n\ndata_inicial = date(2021, 8, 25)\ndata_final = date(2021, 9, 25)\n\nprodutos = api.query(location=path_row, \n                     initial_date=data_inicial, \n                     end_date=data_final, \n                     cloud=100, \n                     limit=100,\n                     collections=['AMAZONIA1_WFI_L2_DN','CBERS4A_WPM_L4_DN'])\n\nprint(produtos)\n# {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'id': 'CBERS4A_WPM22912420210830', ...\n```\n\n### Download de produtos:\n```python\nfrom cbers4asat import Cbers4aAPI\nfrom datetime import date\n\napi = Cbers4aAPI('seu.login@email.com')\n\npath_row = (229, 124)\n\ndata_inicial = date(2021, 8, 25)\ndata_final = date(2021, 9, 25)\n\nprodutos = api.query(location=path_row, \n                     initial_date=data_inicial, \n                     end_date=data_final, \n                     cloud=100, \n                     limit=1,\n                     collections=['CBERS4A_WPM_L4_DN'])\n\n# Bandas escolhidas: vermelha, verde e azul\n# Output do download \u00e9 opcional e caso omitido ser\u00e1 usado o diret\u00f3rio atual\napi.download(products=produtos, \n             bands=['red','green','blue'], \n             threads=3, # Numero de downloads simult\u00e2neos\n             outdir='./downloads',\n             with_folder=True) # Agrupar bandas de uma cena(s) em subpasta(s) no diret\u00f3rio ./downloads\n\n# O diret\u00f3rio downloads ficar\u00e1 assim com o with_folder=true :\n # downloads/\n # +- CBERS4A_WPM22912420210830/\n # ++- CBERS_4A_WPM_20210830_229_124_L4_BAND3.tif\n # ++- CBERS_4A_WPM_20210830_229_124_L4_BAND2.tif\n # ++- CBERS_4A_WPM_20210830_229_124_L4_BAND1.tif\n```\n\n### Converter cole\u00e7\u00e3o de produtos para GeoDataFrame:\n\n```python\nfrom cbers4asat import Cbers4aAPI\nfrom datetime import date\nimport geopandas as gpd\n\napi = Cbers4aAPI('seu.login@email.com')\n\npath_row = (229, 124)\n\ndata_inicial = date(2021, 8, 25)\ndata_final = date(2021, 9, 25)\n\nprodutos = api.query(location=path_row, \n                     initial_date=data_inicial, \n                     end_date=data_final, \n                     cloud=100, \n                     limit=3,\n                     collections=['CBERS4A_WPM_L4_DN'])\n\n# Converter os produtos para GeoDataFrame\ngdf = api.to_geodataframe(produtos, 'EPSG:4674')\n\nprint(gdf.to_string())\n```\n### Download de produtos no GeoDataFrame:\n\n```python\nfrom cbers4asat import Cbers4aAPI\nfrom datetime import date\nimport geopandas as gpd\n\napi = Cbers4aAPI('seu.login@email.com')\n\nbbox = [-63.92944335937501,\n        -8.819260401678381,\n        -63.79211425781251,\n        -8.722218306198739]\n\ndata_inicial = date(2021, 8, 25)\ndata_final = date(2021, 9, 25)\n\nprodutos = api.query(location=bbox, \n                     initial_date=data_inicial, \n                     end_date=data_final, \n                     cloud=100, \n                     limit=3,\n                     collections=['CBERS4A_WPM_L4_DN'])\n\ngdf = api.to_geodataframe(produtos)\n\n# Utiliza a mesma l\u00f3gica que o download de produtos no formato dicion\u00e1rio\napi.download(products=gdf, bands=['red'], outdir='./downloads', with_folder=False)\n```\n\n## Contribui\u00e7\u00e3o\n\nConvido qualquer pessoa a participar contribuindo com c\u00f3digo, relatando bugs, \ncorrigindo bugs, escrevendo documenta\u00e7\u00e3o e tutoriais e discutindo o futuro deste projeto.\n\nPara mais informa\u00e7\u00f5es de como contribuir ao projeto, leia [ao manual de contribui\u00e7\u00e3o](https://github.com/gabriel-russo/cbers4asat/blob/master/CONTRIBUTING.md)\n\n## Lista de melhorias:\n\n- [ ] Testes unit\u00e1rios\n- [ ] Filtros e ordena\u00e7\u00e3o para produtos no formato Dicion\u00e1rio\n- [ ] Filtro de cobertura de nuvem por intervalo\n- [ ] Salvar em GeoJSON\n- [ ] M\u00e9todo para mostrar Thumbnail das cenas\n\n# Licen\u00e7a\nCopyright (c) 2022 Gabriel Russo\n\nCopyright (c) 2020 Sandro Klippel\n\nO uso \u00e9 fornecido sob a Licen\u00e7a do MIT. Veja em [LICENSE](https://github.com/gabriel-russo/cbers4asat/blob/master/LICENSE)\npara mais detalhes.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/gabriel-russo/cbers4asat",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cbers4asat",
            "package_url": "https://pypi.org/project/cbers4asat/",
            "platform": null,
            "project_url": "https://pypi.org/project/cbers4asat/",
            "project_urls": {
                "Homepage": "https://github.com/gabriel-russo/cbers4asat"
            },
            "release_url": "https://pypi.org/project/cbers4asat/0.6/",
            "requires_dist": [
                "geopandas (>=0.9)",
                "requests (>=2.25.1)",
                "pandas (>=1.3.5)"
            ],
            "requires_python": "",
            "summary": "Biblioteca Python para consultar o cat\u00e1logo e realizar opera\u00e7\u00f5es com dados do CBERS4A",
            "version": "0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14840483,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d2d49a96e652e9710aaa5a17e6bab02e",
                    "sha256": "5bd48da53875936e3af36c7e7f8f78dccfa00cf2e348ac69f2c10addd21ad13f"
                },
                "downloads": -1,
                "filename": "cbers4asat-0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d2d49a96e652e9710aaa5a17e6bab02e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 11900,
                "upload_time": "2022-08-22T19:59:18",
                "upload_time_iso_8601": "2022-08-22T19:59:18.442309Z",
                "url": "https://files.pythonhosted.org/packages/a3/47/15987d94342c0eea75fea607a08d48813d5389020ae5c390c2b2ff1579f5/cbers4asat-0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "11330945fcceba205e31142b20f2a668",
                    "sha256": "4b81eac39c8b2239ec222d5bd6805722e8ad8126264861c76f4f2b1afd4491c7"
                },
                "downloads": -1,
                "filename": "cbers4asat-0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "11330945fcceba205e31142b20f2a668",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 11688,
                "upload_time": "2022-08-22T19:59:20",
                "upload_time_iso_8601": "2022-08-22T19:59:20.702868Z",
                "url": "https://files.pythonhosted.org/packages/5f/c1/1c88afebebdc8d2bbb1a3c649613eb7422e3076e77a101c63cf2c3f5bef1/cbers4asat-0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}