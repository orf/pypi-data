{
    "0.1": {
        "info": {
            "author": "ShiYan",
            "author_email": "2229029156@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Natural Language :: Chinese (Simplified)",
                "Natural Language :: Chinese (Traditional)",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description": "# gcn for prediction of protein interactions\n\n\u5229\u7528\u5404\u79cd\u56fe\u795e\u7ecf\u7f51\u7edc\u8fdb\u884clink prediction of protein interactions\u3002\n\n**Guide**\n\n- [Intro](#Intro)\n- [Model](#Model)\n- [Dataset](#Dataset)\n- [Install](#install)\n- [Cite](#Cite)\n- [Reference](#reference)\n\n## Intro\n\n\u76ee\u524d\u4e3b\u8981\u5b9e\u73b0\u57fa\u4e8e\u3010data/yeast/yeast.edgelist\u3011\u4e0b\u7684\u86cb\u767d\u8d28\u6570\u636e\u8fdb\u884clink prediction\u3002\n\n## Model\n### \u6a21\u578b\n\u6a21\u578b\u4e3b\u8981\u4f7f\u7528\u56fe\u795e\u7ecf\u7f51\u7edc\uff0c\u5982gae\u3001vgae\u7b49\n* 1.GCNModelVAE(src/vgae)\uff1a\u56fe\u5377\u79ef\u81ea\u7f16\u7801\u548c\u53d8\u5206\u56fe\u5377\u79ef\u81ea\u7f16\u7801(config\u4e2d\u53ef\u914d\u7f6e\u4f7f\u7528\u81ea\u7f16\u7801\u6216\u53d8\u5206\u81ea\u7f16\u7801)\uff0c\u5229\u7528gae/vgae\u4f5c\u4e3a\u7f16\u7801\u5668\uff0cInnerProductDecoder\u4f5c\u89e3\u7801\u5668\u3002 [Variational Graph Auto-Encoders](https://arxiv.org/pdf/1611.07308.pdf) \u3002\n\n    ![image](https://raw.githubusercontent.com/jiangnanboy/gcn_for_prediction_of_protein_interactions/master/image/vgae.png)\n* 2.GCNModelARGA(src/arga)\uff1a\u5bf9\u6297\u6b63\u5219\u5316\u56fe\u81ea\u7f16\u7801\uff0c\u5229\u7528gae/vgae\u4f5c\u4e3a\u751f\u6210\u5668\uff1b\u4e00\u4e2a\u4e09\u5c42\u524d\u9988\u7f51\u7edc\u4f5c\u5224\u522b\u5668\u3002 [Adversarially Regularized Graph Autoencoder for Graph Embedding](https://arxiv.org/pdf/1802.04407v2.pdf) \u3002\n\n    ![image](https://raw.githubusercontent.com/jiangnanboy/gcn_for_prediction_of_protein_interactions/master/image/arga.png)\n* 3.GATModelVAE(src/graph_att_gae)\uff1a\u57fa\u4e8e\u56fe\u6ce8\u610f\u529b\u7684\u56fe\u5377\u79ef\u81ea\u7f16\u7801\u548c\u53d8\u5206\u56fe\u5377\u79ef\u81ea\u7f16\u7801(config\u4e2d\u53ef\u914d\u7f6e\u4f7f\u7528\u81ea\u7f16\u7801\u6216\u53d8\u5206\u81ea\u7f16\u7801)\uff0c\u5229\u7528gae/vgae\u4f5c\u4e3a\u7f16\u7801\u5668\uff0cInnerProductDecoder\u4f5c\u89e3\u7801\u5668\u3002\u8fd9\u662f\u6211\u5728\u4ee5\u4e0a\u30101\u3011\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u4e00\u5c42\u56fe\u6ce8\u610f\u529b\u5c42\uff0c\u5173\u4e8e\u56fe\u6ce8\u610f\u529b\u53ef\u89c1\u3010Reference\u3011\u4e2d\u7684\u3010GRAPH ATTENTION NETWORKS\u3011\u3002\n* 4.GATModelGAN(src/graph_att_gan)\uff1a\u57fa\u4e8e\u56fe\u6ce8\u610f\u529b\u7684\u5bf9\u6297\u6b63\u5219\u5316\u56fe\u81ea\u7f16\u7801\uff0c\u5229\u7528gae/vgae\u4f5c\u4e3a\u751f\u6210\u5668\uff1b\u4e00\u4e2a\u4e09\u5c42\u524d\u9988\u7f51\u7edc\u4f5c\u5224\u522b\u5668\uff0c\u8fd9\u662f\u6211\u5728\u4ee5\u4e0a\u30102\u3011\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u4e00\u5c42\u56fe\u6ce8\u610f\u529b\u5c42\uff0c\u5173\u4e8e\u56fe\u6ce8\u610f\u529b\u53ef\u89c1\u3010Reference\u3011\u4e2d\u7684\u3010GRAPH ATTENTION NETWORKS\u3011\u3002\n* 5.NHGATModelVAE(src/graph_nheads_att_gae)\uff1a\u57fa\u4e8e\u56fe\u591a\u5934\u6ce8\u610f\u529b\u7684\u56fe\u5377\u79ef\u81ea\u7f16\u7801\u548c\u53d8\u5206\u56fe\u5377\u79ef\u81ea\u7f16\u7801(config\u4e2d\u53ef\u914d\u7f6e\u4f7f\u7528\u81ea\u7f16\u7801\u6216\u53d8\u5206\u81ea\u7f16\u7801)\uff0c\u5229\u7528gae/vgae\u4f5c\u4e3a\u7f16\u7801\u5668\uff0cInnerProductDecoder\u4f5c\u89e3\u7801\u5668\u3002\u6b64\u65b9\u6cd5\u662f\u5728\u30103\u3011\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u5c06\u56fe\u6ce8\u610f\u529b\u5c42\u6539\u4e3a\u591a\u5934\u6ce8\u610f\u529b\u5c42\u3002\n* 6.NHGATModelGAN(src/graph_nheads_att_gan)\uff1a\u57fa\u4e8e\u56fe\u591a\u5934\u6ce8\u610f\u529b\u7684\u5bf9\u6297\u6b63\u5219\u5316\u56fe\u81ea\u7f16\u7801\uff0c\u5229\u7528gae/vgae\u4f5c\u4e3a\u751f\u6210\u5668\uff1b\u4e00\u4e2a\u4e09\u5c42\u524d\u9988\u7f51\u7edc\u4f5c\u5224\u522b\u5668\uff0c\u6b64\u65b9\u6cd5\u5728\u30104\u3011\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u5c06\u56fe\u6ce8\u610f\u529b\u5c42\u6539\u4e3a\u591a\u5934\u6ce8\u610f\u529b\u5c42\u3002\n\n#### Usage\n- \u76f8\u5173\u53c2\u6570\u7684\u914d\u7f6econfig\u89c1\u6bcf\u4e2a\u6a21\u578b\u6587\u4ef6\u5939\u4e2d\u7684config.cfg\u6587\u4ef6\uff0c\u8bad\u7ec3\u548c\u9884\u6d4b\u65f6\u4f1a\u52a0\u8f7d\u6b64\u6587\u4ef6\u3002\n\n- \u8bad\u7ec3\u53ca\u9884\u6d4b\n\n  ##### 1.GCNModelVAE(src/vgae)\n     \n     (1).\u8bad\u7ec3\n    ```\n    from src.vgae.train import Train\n    train = Train()\n    train.train_model('config.cfg')\n    ```\n  ```\n    Epoch: 0001 train_loss =  1.84734 val_roc_score =  0.76573 average_precision_score =  0.68083 time= 0.80005\n    Epoch: 0002 train_loss =  1.83824 val_roc_score =  0.87289 average_precision_score =  0.86317 time= 0.80361\n    Epoch: 0003 train_loss =  1.80761 val_roc_score =  0.87641 average_precision_score =  0.86590 time= 0.80121\n    Epoch: 0004 train_loss =  1.77976 val_roc_score =  0.87737 average_precision_score =  0.86656 time= 0.79843\n    Epoch: 0005 train_loss =  1.76685 val_roc_score =  0.87759 average_precision_score =  0.86664 time= 0.79843\n    Epoch: 0006 train_loss =  1.71661 val_roc_score =  0.87767 average_precision_score =  0.86667 time= 0.80479\n    Epoch: 0007 train_loss =  1.67656 val_roc_score =  0.87775 average_precision_score =  0.86670 time= 0.80509\n    Epoch: 0008 train_loss =  1.62324 val_roc_score =  0.87785 average_precision_score =  0.86679 time= 0.80446\n    Epoch: 0009 train_loss =  1.57730 val_roc_score =  0.87781 average_precision_score =  0.86680 time= 0.80424\n    Epoch: 0010 train_loss =  1.51882 val_roc_score =  0.87789 average_precision_score =  0.86675 time= 0.80852\n    Epoch: 0011 train_loss =  1.46346 val_roc_score =  0.87792 average_precision_score =  0.86678 time= 0.80625\n    Epoch: 0012 train_loss =  1.37688 val_roc_score =  0.87795 average_precision_score =  0.86684 time= 0.80474\n    Epoch: 0013 train_loss =  1.31243 val_roc_score =  0.87795 average_precision_score =  0.86685 time= 0.80574\n    Epoch: 0014 train_loss =  1.25133 val_roc_score =  0.87791 average_precision_score =  0.86677 time= 0.80267\n    Epoch: 0015 train_loss =  1.19762 val_roc_score =  0.87802 average_precision_score =  0.86693 time= 0.80540\n    Epoch: 0016 train_loss =  1.15079 val_roc_score =  0.87812 average_precision_score =  0.86698 time= 0.80784\n    Epoch: 0017 train_loss =  1.09600 val_roc_score =  0.87802 average_precision_score =  0.86688 time= 0.79920\n    Epoch: 0018 train_loss =  1.05011 val_roc_score =  0.87820 average_precision_score =  0.86711 time= 0.80777\n    Epoch: 0019 train_loss =  1.00610 val_roc_score =  0.87840 average_precision_score =  0.86714 time= 0.80412\n    Epoch: 0020 train_loss =  0.95014 val_roc_score =  0.87838 average_precision_score =  0.86713 time= 0.80210\n    \n    test roc score: 0.8814614254330005\n    test ap score: 0.8708329314774368\n    ```\n      \n    (2).\u9884\u6d4b\n\n    ```\n    from src.vgae.predict import Predict\n  \n    predict = Predict()\n    predict.load_model_adj('config_cfg')\n    # \u4f1a\u8fd4\u56de\u539f\u59cb\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u548c\u7ecf\u8fc7\u6a21\u578b\u7f16\u7801\u540e\u7684hidden embedding\u7ecf\u8fc7\u5185\u79ef\u89e3\u7801\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5f97\u51falink prediction.\n    adj_orig, adj_rec = predict.predict()\n    ```\n  \n  ##### 2.GCNModelARGA(src/arga)\n     \n     (1).\u8bad\u7ec3\n    ```\n    from src.arga.train import Train\n    train = Train()\n    train.train_model('config.cfg')\n    ```\n  ```\n    Epoch: 0001 train_loss =  2.08252 val_roc_score =  0.75422 average_precision_score =  0.66179 time= 0.80230\n    Epoch: 0002 train_loss =  2.03940 val_roc_score =  0.86953 average_precision_score =  0.85636 time= 0.79571\n    Epoch: 0003 train_loss =  2.00348 val_roc_score =  0.87872 average_precision_score =  0.86847 time= 0.79245\n    Epoch: 0004 train_loss =  1.97120 val_roc_score =  0.87997 average_precision_score =  0.86995 time= 0.79640\n    Epoch: 0005 train_loss =  1.93477 val_roc_score =  0.88017 average_precision_score =  0.87027 time= 0.79548\n    Epoch: 0006 train_loss =  1.89215 val_roc_score =  0.88046 average_precision_score =  0.87038 time= 0.79972\n    Epoch: 0007 train_loss =  1.84537 val_roc_score =  0.88072 average_precision_score =  0.87058 time= 0.79561\n    Epoch: 0008 train_loss =  1.78754 val_roc_score =  0.88063 average_precision_score =  0.87049 time= 0.79802\n    Epoch: 0009 train_loss =  1.72469 val_roc_score =  0.88053 average_precision_score =  0.87043 time= 0.79486\n    Epoch: 0010 train_loss =  1.65402 val_roc_score =  0.88063 average_precision_score =  0.87049 time= 0.79423\n    Epoch: 0011 train_loss =  1.57884 val_roc_score =  0.88052 average_precision_score =  0.87045 time= 0.79348\n    Epoch: 0012 train_loss =  1.49870 val_roc_score =  0.88049 average_precision_score =  0.87046 time= 0.79649\n    Epoch: 0013 train_loss =  1.42083 val_roc_score =  0.88056 average_precision_score =  0.87046 time= 0.79063\n    Epoch: 0014 train_loss =  1.34764 val_roc_score =  0.88060 average_precision_score =  0.87056 time= 0.79889\n    Epoch: 0015 train_loss =  1.27635 val_roc_score =  0.88038 average_precision_score =  0.87043 time= 0.79485\n    Epoch: 0016 train_loss =  1.20521 val_roc_score =  0.88050 average_precision_score =  0.87058 time= 0.79927\n    Epoch: 0017 train_loss =  1.13763 val_roc_score =  0.88035 average_precision_score =  0.87045 time= 0.79072\n    Epoch: 0018 train_loss =  1.07326 val_roc_score =  0.88035 average_precision_score =  0.87049 time= 0.79284\n    Epoch: 0019 train_loss =  1.01548 val_roc_score =  0.88023 average_precision_score =  0.87044 time= 0.78869\n    Epoch: 0020 train_loss =  0.96069 val_roc_score =  0.88014 average_precision_score =  0.87037 time= 0.79441\n   \n    test roc score: 0.8798092171308727\n    test ap score: 0.8700487009596252\n    ```\n      \n    (2).\u9884\u6d4b\n\n    ```\n    from src.arga.predict import Predict\n  \n    predict = Predict()\n    predict.load_model_adj('config_cfg')\n    # \u4f1a\u8fd4\u56de\u539f\u59cb\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u548c\u7ecf\u8fc7\u6a21\u578b\u7f16\u7801\u540e\u7684hidden embedding\u7ecf\u8fc7\u5185\u79ef\u89e3\u7801\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5f97\u51falink prediction.\n    adj_orig, adj_rec = predict.predict()\n    ```\n  \n  ##### 3.GATModelVAE(src/graph_att_gae)\n    (1).\u8bad\u7ec3\n    ```\n    from src.graph_att_gae.train import Train\n    train = Train()\n    train.train_model('config.cfg')\n    ```\n    ```\n    Epoch: 0001 train_loss =  1.83611 val_roc_score =  0.73571 average_precision_score =  0.62940 time= 0.81406\n    Epoch: 0002 train_loss =  1.83237 val_roc_score =  0.87094 average_precision_score =  0.85831 time= 0.81499\n    Epoch: 0003 train_loss =  1.82761 val_roc_score =  0.87429 average_precision_score =  0.86431 time= 0.81297\n    Epoch: 0004 train_loss =  1.78672 val_roc_score =  0.87509 average_precision_score =  0.86525 time= 0.80870\n    Epoch: 0005 train_loss =  1.76815 val_roc_score =  0.87523 average_precision_score =  0.86550 time= 0.81497\n    Epoch: 0006 train_loss =  1.72495 val_roc_score =  0.87523 average_precision_score =  0.86551 time= 0.81070\n    Epoch: 0007 train_loss =  1.69047 val_roc_score =  0.87593 average_precision_score =  0.86601 time= 0.80948\n    Epoch: 0008 train_loss =  1.63153 val_roc_score =  0.87573 average_precision_score =  0.86593 time= 0.80709\n    Epoch: 0009 train_loss =  1.57143 val_roc_score =  0.87551 average_precision_score =  0.86580 time= 0.80653\n    Epoch: 0010 train_loss =  1.50240 val_roc_score =  0.87587 average_precision_score =  0.86594 time= 0.81233\n    Epoch: 0011 train_loss =  1.44139 val_roc_score =  0.87567 average_precision_score =  0.86589 time= 0.80861\n    Epoch: 0012 train_loss =  1.37266 val_roc_score =  0.87557 average_precision_score =  0.86571 time= 0.80932\n    Epoch: 0013 train_loss =  1.32811 val_roc_score =  0.87578 average_precision_score =  0.86597 time= 0.80686\n    Epoch: 0014 train_loss =  1.30064 val_roc_score =  0.87607 average_precision_score =  0.86603 time= 0.80962\n    Epoch: 0015 train_loss =  1.25788 val_roc_score =  0.87592 average_precision_score =  0.86611 time= 0.80796\n    Epoch: 0016 train_loss =  1.23810 val_roc_score =  0.87607 average_precision_score =  0.86617 time= 0.80750\n    Epoch: 0017 train_loss =  1.18570 val_roc_score =  0.87594 average_precision_score =  0.86613 time= 0.80911\n    Epoch: 0018 train_loss =  1.14961 val_roc_score =  0.87607 average_precision_score =  0.86626 time= 0.81035\n    Epoch: 0019 train_loss =  1.10372 val_roc_score =  0.87593 average_precision_score =  0.86598 time= 0.81094\n    Epoch: 0020 train_loss =  1.05262 val_roc_score =  0.87605 average_precision_score =  0.86613 time= 0.81442\n   \n    test roc score: 0.8758194438300309\n    test ap score: 0.8629482273490456\n    ```\n      \n    (2).\u9884\u6d4b\n\n    ```\n    from src.graph_att_gae.predict import Predict\n  \n    predict = Predict()\n    predict.load_model_adj('config_cfg')\n    # \u4f1a\u8fd4\u56de\u539f\u59cb\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u548c\u7ecf\u8fc7\u6a21\u578b\u7f16\u7801\u540e\u7684hidden embedding\u7ecf\u8fc7\u5185\u79ef\u89e3\u7801\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5f97\u51falink prediction.\n    adj_orig, adj_rec = predict.predict()\n    ```\n  \n  ##### 4.GATModelGAN(src/graph_att_gan)\n    (1).\u8bad\u7ec3\n    ```\n    from src.graph_att_gan.train import Train\n    train = Train()\n    train.train_model('config.cfg')\n    ```\n    ```\n    Epoch: 0001 train_loss =  3.24637 val_roc_score =  0.77403 average_precision_score =  0.68203 time= 0.81267\n    Epoch: 0002 train_loss =  3.21157 val_roc_score =  0.87269 average_precision_score =  0.86088 time= 0.81181\n    Epoch: 0003 train_loss =  3.15047 val_roc_score =  0.87391 average_precision_score =  0.86203 time= 0.81182\n    Epoch: 0004 train_loss =  3.08302 val_roc_score =  0.87457 average_precision_score =  0.86271 time= 0.81055\n    Epoch: 0005 train_loss =  3.03024 val_roc_score =  0.87410 average_precision_score =  0.86226 time= 0.81125\n    Epoch: 0006 train_loss =  2.95011 val_roc_score =  0.87450 average_precision_score =  0.86264 time= 0.81162\n    Epoch: 0007 train_loss =  2.82191 val_roc_score =  0.87460 average_precision_score =  0.86275 time= 0.81088\n    Epoch: 0008 train_loss =  2.73079 val_roc_score =  0.87442 average_precision_score =  0.86256 time= 0.80648\n    Epoch: 0009 train_loss =  2.61711 val_roc_score =  0.87454 average_precision_score =  0.86268 time= 0.81021\n    Epoch: 0010 train_loss =  2.50720 val_roc_score =  0.87480 average_precision_score =  0.86288 time= 0.80921\n    Epoch: 0011 train_loss =  2.42761 val_roc_score =  0.87506 average_precision_score =  0.86298 time= 0.81137\n    Epoch: 0012 train_loss =  2.36874 val_roc_score =  0.87497 average_precision_score =  0.86282 time= 0.81466\n    Epoch: 0013 train_loss =  2.29911 val_roc_score =  0.87504 average_precision_score =  0.86291 time= 0.81193\n    Epoch: 0014 train_loss =  2.21190 val_roc_score =  0.87526 average_precision_score =  0.86297 time= 0.80965\n    Epoch: 0015 train_loss =  2.12611 val_roc_score =  0.87511 average_precision_score =  0.86290 time= 0.81013\n    Epoch: 0016 train_loss =  2.03527 val_roc_score =  0.87528 average_precision_score =  0.86314 time= 0.81365\n    Epoch: 0017 train_loss =  1.96965 val_roc_score =  0.87524 average_precision_score =  0.86309 time= 0.81125\n    Epoch: 0018 train_loss =  1.90381 val_roc_score =  0.87515 average_precision_score =  0.86312 time= 0.80971\n    Epoch: 0019 train_loss =  1.85955 val_roc_score =  0.87487 average_precision_score =  0.86288 time= 0.80996\n    Epoch: 0020 train_loss =  1.81664 val_roc_score =  0.87483 average_precision_score =  0.86293 time= 0.81270\n\n    test roc score: 0.8826745834179653\n    test ap score: 0.8715261230395998\n    ```\n      \n    (2).\u9884\u6d4b\n\n    ```\n    from src.graph_att_gan.predict import Predict\n  \n    predict = Predict()\n    predict.load_model_adj('config_cfg')\n    # \u4f1a\u8fd4\u56de\u539f\u59cb\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u548c\u7ecf\u8fc7\u6a21\u578b\u7f16\u7801\u540e\u7684hidden embedding\u7ecf\u8fc7\u5185\u79ef\u89e3\u7801\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5f97\u51falink prediction.\n    adj_orig, adj_rec = predict.predict()\n    ```\n  \n  ##### 5.NHGATModelVAE(src/graph_nheads_att_gae)\n    (1).\u8bad\u7ec3\n    ```\n    from src.graph_nheads_att_gae.train import Train\n    train = Train()\n    train.train_model('config.cfg')\n    ```\n    ```\n    Epoch: 0001 train_loss =  1.85570 val_roc_score =  0.80750 average_precision_score =  0.72917 time= 0.84645\n    Epoch: 0002 train_loss =  1.78607 val_roc_score =  0.88103 average_precision_score =  0.87114 time= 0.84186\n    Epoch: 0003 train_loss =  1.68021 val_roc_score =  0.88117 average_precision_score =  0.87144 time= 0.84135\n    Epoch: 0004 train_loss =  1.52555 val_roc_score =  0.88115 average_precision_score =  0.87141 time= 0.84212\n    Epoch: 0005 train_loss =  1.38254 val_roc_score =  0.88070 average_precision_score =  0.87098 time= 0.83917\n    Epoch: 0006 train_loss =  1.40003 val_roc_score =  0.88106 average_precision_score =  0.87134 time= 0.84185\n    Epoch: 0007 train_loss =  1.31239 val_roc_score =  0.88081 average_precision_score =  0.87110 time= 0.83766\n    Epoch: 0008 train_loss =  1.17827 val_roc_score =  0.88102 average_precision_score =  0.87134 time= 0.84063\n    Epoch: 0009 train_loss =  1.08710 val_roc_score =  0.88086 average_precision_score =  0.87126 time= 0.84173\n    Epoch: 0010 train_loss =  1.01816 val_roc_score =  0.88136 average_precision_score =  0.87162 time= 0.84121\n    Epoch: 0011 train_loss =  0.95128 val_roc_score =  0.88128 average_precision_score =  0.87133 time= 0.84128\n    Epoch: 0012 train_loss =  0.87212 val_roc_score =  0.88127 average_precision_score =  0.87142 time= 0.84218\n    Epoch: 0013 train_loss =  0.80497 val_roc_score =  0.88134 average_precision_score =  0.87154 time= 0.84077\n    Epoch: 0014 train_loss =  0.75538 val_roc_score =  0.88088 average_precision_score =  0.87120 time= 0.83701\n    Epoch: 0015 train_loss =  0.70903 val_roc_score =  0.88063 average_precision_score =  0.87073 time= 0.83698\n    Epoch: 0016 train_loss =  0.68525 val_roc_score =  0.88035 average_precision_score =  0.87055 time= 0.83837\n    Epoch: 0017 train_loss =  0.66079 val_roc_score =  0.87995 average_precision_score =  0.87053 time= 0.83806\n    Epoch: 0018 train_loss =  0.65187 val_roc_score =  0.87924 average_precision_score =  0.86958 time= 0.84210\n    Epoch: 0019 train_loss =  0.64572 val_roc_score =  0.87929 average_precision_score =  0.86995 time= 0.84069\n    Epoch: 0020 train_loss =  0.64103 val_roc_score =  0.87951 average_precision_score =  0.87026 time= 0.83967\n\n    test roc score: 0.877033361471422\n    test ap score: 0.867286248500891\n    ```\n      \n    (2).\u9884\u6d4b\n\n    ```\n    from src.graph_nheads_att_gae.predict import Predict\n  \n    predict = Predict()\n    predict.load_model_adj('config_cfg')\n    # \u4f1a\u8fd4\u56de\u539f\u59cb\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u548c\u7ecf\u8fc7\u6a21\u578b\u7f16\u7801\u540e\u7684hidden embedding\u7ecf\u8fc7\u5185\u79ef\u89e3\u7801\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5f97\u51falink prediction.\n    adj_orig, adj_rec = predict.predict()\n    ```\n  \n    ##### 6.NHGATModelGAN(src/graph_nheads_att_gan)\n    (1).\u8bad\u7ec3\n    ```\n    from src.graph_nheads_att_gan.train import Train\n    train = Train()\n    train.train_model('config.cfg')\n    ```\n    ```\n    Epoch: 0001 train_loss =  3.24091 val_roc_score =  0.77050 average_precision_score =  0.66992 time= 0.85475\n    Epoch: 0002 train_loss =  3.18022 val_roc_score =  0.87671 average_precision_score =  0.86657 time= 0.84643\n    Epoch: 0003 train_loss =  3.09047 val_roc_score =  0.87715 average_precision_score =  0.86704 time= 0.84354\n    Epoch: 0004 train_loss =  2.95696 val_roc_score =  0.87695 average_precision_score =  0.86698 time= 0.84279\n    Epoch: 0005 train_loss =  2.87052 val_roc_score =  0.87747 average_precision_score =  0.86741 time= 0.84714\n    Epoch: 0006 train_loss =  2.88739 val_roc_score =  0.87742 average_precision_score =  0.86727 time= 0.84777\n    Epoch: 0007 train_loss =  2.78251 val_roc_score =  0.87757 average_precision_score =  0.86748 time= 0.84134\n    Epoch: 0008 train_loss =  2.65458 val_roc_score =  0.87766 average_precision_score =  0.86745 time= 0.84429\n    Epoch: 0009 train_loss =  2.60484 val_roc_score =  0.87798 average_precision_score =  0.86780 time= 0.84680\n    Epoch: 0010 train_loss =  2.56642 val_roc_score =  0.87806 average_precision_score =  0.86766 time= 0.84952\n    Epoch: 0011 train_loss =  2.49832 val_roc_score =  0.87826 average_precision_score =  0.86771 time= 0.84535\n    Epoch: 0012 train_loss =  2.38511 val_roc_score =  0.87799 average_precision_score =  0.86763 time= 0.84903\n    Epoch: 0013 train_loss =  2.28920 val_roc_score =  0.87781 average_precision_score =  0.86762 time= 0.84161\n    Epoch: 0014 train_loss =  2.23039 val_roc_score =  0.87791 average_precision_score =  0.86761 time= 0.84422\n    Epoch: 0015 train_loss =  2.14044 val_roc_score =  0.87782 average_precision_score =  0.86750 time= 0.84063\n    Epoch: 0016 train_loss =  2.05134 val_roc_score =  0.87774 average_precision_score =  0.86754 time= 0.84043\n    Epoch: 0017 train_loss =  1.95402 val_roc_score =  0.87745 average_precision_score =  0.86740 time= 0.84461\n    Epoch: 0018 train_loss =  1.89405 val_roc_score =  0.87714 average_precision_score =  0.86720 time= 0.84435\n    Epoch: 0019 train_loss =  1.83182 val_roc_score =  0.87690 average_precision_score =  0.86693 time= 0.84567\n    Epoch: 0020 train_loss =  1.74144 val_roc_score =  0.87683 average_precision_score =  0.86717 time= 0.84130\n\n    test roc score: 0.8767371798715641\n    test ap score: 0.8680650766563964\n    ```\n      \n    (2).\u9884\u6d4b\n\n    ```\n    from src.graph_nheads_att_gan.predict import Predict\n  \n    predict = Predict()\n    predict.load_model_adj('config_cfg')\n    # \u4f1a\u8fd4\u56de\u539f\u59cb\u7684\u56fe\u90bb\u63a5\u77e9\u9635\u548c\u7ecf\u8fc7\u6a21\u578b\u7f16\u7801\u540e\u7684hidden embedding\u7ecf\u8fc7\u5185\u79ef\u89e3\u7801\u7684\u90bb\u63a5\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u8fd9\u4e24\u4e2a\u77e9\u9635\u8fdb\u884c\u6bd4\u5bf9\uff0c\u5f97\u51falink prediction.\n    adj_orig, adj_rec = predict.predict()\n    ```\n  \n## Dataset\n\n   \u6570\u636e\u6765\u81ea\u9175\u6bcd\u86cb\u767d\u8d28\u76f8\u4e92\u4f5c\u7528[yeast](http://snap.stanford.edu/deepnetbio-ismb/ipynb/yeast.edgelist) \u3002\n   \u6570\u636e\u96c6\u7684\u683c\u5f0f\u5982\u4e0b\uff0c\u5177\u4f53\u53ef\u89c1[data](data/yeast/yeast.edgelist)\u3002\n   ```\n    YLR418C\tYOL145C\n    YOL145C\tYLR418C\n    YLR418C\tYOR123C\n    YOR123C\tYLR418C\n    ......         ......\n   ```\n\n## Install\n* \u5b89\u88c5\uff1apip install GCN4LP\n* \u4e0b\u8f7d\u6e90\u7801\uff1a\n```\ngit clone https://github.com/jiangnanboy/gcn_for_prediction_of_protein_interactions.git\ncd gcn_for_prediction_of_protein_interactions\npython setup.py install\n```\n\n\n\u901a\u8fc7\u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u7684\u4efb\u4f55\u4e00\u79cd\u5b8c\u6210\u5b89\u88c5\u90fd\u53ef\u4ee5\u3002\u5982\u679c\u4e0d\u60f3\u5b89\u88c5\uff0c\u53ef\u4ee5\u4e0b\u8f7d[github\u6e90\u7801\u5305](https://github.com/jiangnanboy/gcn_for_prediction_of_protein_interactions/archive/refs/heads/main.zip)\n\n## Cite\n\n\u5982\u679c\u4f60\u5728\u7814\u7a76\u4e2d\u4f7f\u7528\u4e86GCN4LP\uff0c\u8bf7\u6309\u5982\u4e0b\u683c\u5f0f\u5f15\u7528\uff1a\n\n```latex\n@software{GCN4LP,\n  author = {Shi Yan},\n  title = {GCN4LP: gcn for prediction of protein interactions},\n  year = {2021},\n  url = {https://github.com/jiangnanboy/gcn_for_prediction_of_protein_interactions},\n}\n```    \n\n## Reference\n\n* [Variational Graph Auto-Encoders](https://arxiv.org/pdf/1611.07308.pdf)\n* https://github.com/zfjsail/gae-pytorch/blob/master/gae/utils.py\n* https://github.com/tkipf/gae/tree/master/gae\n* http://snap.stanford.edu/deepnetbio-ismb/ipynb/Graph+Convolutional+Prediction+of+Protein+Interactions+in+Yeast.html\n* [Adversarially Regularized Graph Autoencoder for Graph Embedding](https://arxiv.org/pdf/1802.04407v2.pdf)\n* https://github.com/pyg-team/pytorch_geometric\n* [GRAPH ATTENTION NETWORKS](https://arxiv.org/pdf/1710.10903.pdf)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/jiangnanboy/gcn_for_prediction_of_protein_interactions",
            "keywords": "NLP,Link Prediction,gcn for prediction of protein interactions",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "GCN4LP",
            "package_url": "https://pypi.org/project/GCN4LP/",
            "platform": "Windows",
            "project_url": "https://pypi.org/project/GCN4LP/",
            "project_urls": {
                "Homepage": "https://github.com/jiangnanboy/gcn_for_prediction_of_protein_interactions"
            },
            "release_url": "https://pypi.org/project/GCN4LP/0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "gcn for prediction of protein interactions",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12026125,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "df9957d811c23ea556c93ee2deed94d6",
                    "sha256": "ba0388926ae197a78504f571fd246dbb9c264b419729d5dfca682a087166c7b8"
                },
                "downloads": -1,
                "filename": "GCN4LP-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "df9957d811c23ea556c93ee2deed94d6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 45411,
                "upload_time": "2021-11-15T12:22:52",
                "upload_time_iso_8601": "2021-11-15T12:22:52.689486Z",
                "url": "https://files.pythonhosted.org/packages/b5/2f/2435ebcd37aa1159836e8b1ef9054d4523cc5e531d86343fc81fa64801b2/GCN4LP-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}