{
    "0.0.1a0": {
        "info": {
            "author": "",
            "author_email": "Albert Lionelle <lionelle+neugs-utils@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Northeastern University Grade Scope Utility \r\n\r\nIn progress gradescope utility used for alternative grading schemes, including mastery grading and standards grading. Additionally, contains utility functions used to make the grading process easier.\r\n\r\n## Features\r\n\r\n### Tier Mastery Grading: \r\n\r\nFocuses on mastery based grading in grading tiers, meaning\r\ngrades are corrected, so only the tests are passed in order based on groups. If any\r\ntest in a group stops, so does all grading until the previous group is fixed. \r\n\r\nCommon tiers are (COMMON_ONE, COMMON_TWO, COMMON_THREE, COMMON_FOUR) which is\r\n\"Learning\", \"Approaching\", \"Meets\", \"Exceeds\". To tag a test in a tier use the\r\ntier decorator. An example of a common test setup with tier grading would be as follows\r\n\r\n\r\n#### Example:\r\n\r\n```python\r\n    from gradescope_utils.autograder_utils.decorators import number, tags\r\n    from neugs_utils import tier, COMMON_ONE, COMMON_TWO, COMMON_THREE\r\n\r\n    class TestOne(unittest.TestCase):\r\n        @tier(COMMON_THREE)\r\n        @tags(\"Learning\")  #tags should come *after* tiers if they are used at all\r\n        @number(3.0)\r\n        def test_random(self):\r\n            result = 6\r\n            for i in (6, 5, 61):\r\n                self.assertEqual(result, i, \"this is my message, that display due to TWO failing\")\r\n\r\n        @tier(COMMON_TWO)\r\n        @number(2.0)\r\n        def test_approaching(self):\r\n            result = 3\r\n            self.assertEqual(result, 5, \"this should fail\")\r\n\r\n        @tier(COMMON_TWO)\r\n        @number(2.0)\r\n        def test_some_other_approaching(self):\r\n            result = 5\r\n            self.assertEqual(result, 5, \"this should pass\")\r\n\r\n        @tier(COMMON_ONE)\r\n        @number(1.0)\r\n        def test_valid(self):\r\n            self.assertEqual(5, 5, \"really!\")\r\n\r\n        @tier(COMMON_ONE)\r\n        @number(1.1)\r\n        def test_valid2(self):\r\n            self.assertEqual(6, 6, \"really!\")\r\n```\r\n\r\nGiven the example above, and assuming default points of 1 point per tier, the above student would earn\r\n1 point, and will be encouraged to submit again to completed Tier Two and Tier 3\r\n\r\n\r\nIn run_test.py make sure to change JSONTestRunner to TierMasteryJSONTestRunner\r\n```python        \r\n    \r\nimport unittest\r\nfrom neugs_utils import TierMasteryJSONTestRunner\r\n\r\nif __name__ == '__main__':\r\n    suite = unittest.defaultTestLoader.discover('tests')\r\n    with open('/autograder/results/results.json', 'w') as f:\r\n        TierMasteryJSONTestRunner(visibility='visible', stream=f).run(suite)\r\n```\r\n\r\n### Utilities:\r\n\r\nThere are also a number of additional utility functions added in common_tests.py and context_managers.py. These are meant to be for utility to help with common grading tasks. \r\n\r\n\r\nThis module is still in early stages of development! \r\n\r\n## Todo:\r\n* Add standards based grading / tagging\r\n* Add module to help with external languages (c/cpp)\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "gradescope,grading",
            "license": "The MIT License (MIT)  Copyright (c) 2022 Albert Lionelle  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neugs-utils",
            "package_url": "https://pypi.org/project/neugs-utils/",
            "platform": null,
            "project_url": "https://pypi.org/project/neugs-utils/",
            "project_urls": {
                "Source": "https://github.com/lionelle/neugs-utils"
            },
            "release_url": "https://pypi.org/project/neugs-utils/0.0.1a0/",
            "requires_dist": [
                "gradescope-utils (>=0.3.1)",
                "pycodestyle",
                "coverage (>=5.0.3) ; extra == 'tests'"
            ],
            "requires_python": ">=3.6",
            "summary": "Alternative Grading Options for Gradescope autograder",
            "version": "0.0.1a0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16078291,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b70c6b826a6cd53c21d92bf7b70671d",
                    "sha256": "90242a04197e5aefeebb5bda5c5c73820c135655068e1b78593add6d087b2c13"
                },
                "downloads": -1,
                "filename": "neugs_utils-0.0.1a0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9b70c6b826a6cd53c21d92bf7b70671d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8799,
                "upload_time": "2022-12-12T20:05:27",
                "upload_time_iso_8601": "2022-12-12T20:05:27.559207Z",
                "url": "https://files.pythonhosted.org/packages/e6/95/623f76fb3528d899fcec6e240ed287e7362f7398acbd1556ecf8408180b4/neugs_utils-0.0.1a0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9cd488a5023193b959e6c07b41767fdc",
                    "sha256": "fc64e31a943c57be86199e8fc600646a460f3daac356a3558c3d04f45f181320"
                },
                "downloads": -1,
                "filename": "neugs_utils-0.0.1a0.tar.gz",
                "has_sig": false,
                "md5_digest": "9cd488a5023193b959e6c07b41767fdc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8737,
                "upload_time": "2022-12-12T20:05:29",
                "upload_time_iso_8601": "2022-12-12T20:05:29.101568Z",
                "url": "https://files.pythonhosted.org/packages/c3/b7/b98d299b00ae715e237dd118698a8f47dae843e2d2378169e3f2d073271b/neugs_utils-0.0.1a0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}