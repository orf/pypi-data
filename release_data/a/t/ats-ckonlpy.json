{
    "0.0.2": {
        "info": {
            "author": "suchoi",
            "author_email": "su.choi@niccompany.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.8"
            ],
            "description": "# customized KoNLPy\n\n\ud55c\uad6d\uc5b4 \uc790\uc5f0\uc5b4\ucc98\ub9ac\ub97c \ud560 \uc218 \uc788\ub294 \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0, KoNLPy\uc758 customized version\uc785\ub2c8\ub2e4. \n\ncustomized_KoNLPy\ub294 \ud655\uc2e4\ud788 \uc54c\uace0 \uc788\ub294 \ub2e8\uc5b4\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uac70\uce58\uc9c0 \uc54a\uace0 \uc8fc\uc5b4\uc9c4 \uc5b4\uc808\uc744 \uc544\ub294 \ub2e8\uc5b4\ub4e4\ub85c \ud1a0\ud06c\ub098\uc774\uc9d5 / \ud488\uc0ac\ud310\ubcc4\uc744 \ud558\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 template \uae30\ubc18 \ud1a0\ud06c\ub098\uc774\uc9d5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n\n    \uc0ac\uc804: {'\uc544\uc774\uc624\uc544\uc774': 'Noun', '\ub294': 'Josa'}\n    \ud0ec\ud50c\ub9bf: Noun + Josa\n\n\uc704\uc640 \uac19\uc740 \ub2e8\uc5b4 \ub9ac\uc2a4\ud2b8\uc640 \ud0ec\ud50c\ub9bf\uc774 \uc788\ub2e4\uba74 '\uc544\uc774\uc624\uc544\uc774\ub294' \uc774\ub77c\ub294 \uc5b4\uc808\uc740 [('\uc544\uc774\uc624\uc544\uc774', 'Noun'), ('\ub294', 'Josa')]\ub85c \ubd84\ub9ac\ub429\ub2c8\ub2e4.\n\n## Install\n\n    $ git clone https://github.com/lovit/customized_konlpy.git\n\n    $ pip install customized_konlpy\n\n### Requires\n\n- JPype >= 0.6.1\n- KoNLPy >= 0.4.4\n\n## Usage\n\n### Part of speech tagging\n\nKoNLPy\uc640 \ub3d9\uc77c\ud558\uac8c Twitter.pos(phrase)\ub97c \uc785\ub825\ud569\ub2c8\ub2e4. \uac01 \uc5b4\uc808\ubcc4\ub85c \uc0ac\uc6a9\uc790 \uc0ac\uc804\uc5d0 \uc54c\ub824\uc9c4 \ub2e8\uc5b4\uac00 \uc778\uc2dd\ub418\uba74 customized_tagger\ub85c \uc5b4\uc808\uc744 \ubd84\ub9ac\ud558\uba70, \uc0ac\uc6a9\uc790 \uc0ac\uc804\uc5d0 \uc54c\ub824\uc9c0\uc9c0 \uc54a\uc740 \ub2e8\uc5b4\ub85c \uad6c\uc131\ub41c \uc5b4\uc808\uc740 \ud2b8\uc704\ud130 \ud615\ud0dc\uc18c \ubd84\uc11d\uae30\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4. \n\n```python\ntwitter.pos('\uc6b0\ub9ac\uc544\uc774\uc624\uc544\uc774\ub294 \uc774\ubed0\uc694')\n```\n\n    [('\uc6b0\ub9ac', 'Noun'), ('\uc544\uc774\uc624', 'Noun'), ('\uc544\uc774', 'Noun'), ('\ub294', 'Josa'), ('\uc774\ubed0', 'Adjective'), ('\uc694', 'Eomi')] \n\n'\uc544\uc774\uc624\uc544\uc774'\uac00 \uc54c\ub824\uc9c4 \ub2e8\uc5b4\uac00 \uc544\ub2c8\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ud2b8\uc704\ud130 \ubd84\uc11d\uae30\uc5d0\uc11c \ub2e8\uc5b4\ub97c \uc81c\ub300\ub85c \uc778\uc2dd\ud558\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \uc544\ub798\uc758 \uc0ac\uc6a9\uc790 \uc0ac\uc804\uc73c\ub85c \ub2e8\uc5b4 \ucd94\uac00\ub97c \ud55c \ub4a4 \ub3d9\uc77c\ud55c \uc791\uc5c5\uc744 \uc218\ud589\ud558\uba74 \uc544\ub798\uc640 \uac19\uc740 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n```python\ntwitter.pos('\uc6b0\ub9ac\uc544\uc774\uc624\uc544\uc774\ub294 \uc774\ubed0\uc694')\n``` \n\n    [('\uc6b0\ub9ac', 'Modifier'), ('\uc544\uc774\uc624\uc544\uc774', 'Noun'), ('\ub294', 'Josa'), ('\uc774\ubed0', 'Adjective'), ('\uc694', 'Eomi')]\n\n```python\ntwitter.pos('\ud2b8\uc640\uc774\uc2a4tt\ub294 \uc88b\uc544\uc694')\n```\n    [('\ud2b8\uc640\uc774\uc2a4', 'Noun'), ('tt', 'Noun'), ('\ub294', 'Josa'), ('\uc88b', 'Adjective'), ('\uc544\uc694', 'Eomi')]\n\n### Add words to dictioanry\n\nckonlpy.tag\uc758 Twitter\ub294 add_dictionary\ub97c \ud1b5\ud558\uc5ec str \ud639\uc740 list of str \ud615\uc2dd\uc758 \uc0ac\uc6a9\uc790 \uc0ac\uc804\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n```python\nfrom ckonlpy.tag import Twitter\n\ntwitter.add_dictionary('\uc544\uc774\uc624\uc544\uc774', 'Noun')\ntwitter.add_dictionary(['\ud2b8\uc640\uc774\uc2a4', 'tt'], 'Noun')\n```\n\n\ud2b8\uc704\ud130 \ud55c\uad6d\uc5b4 \ubd84\uc11d\uae30\uc5d0\uc11c \uc774\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud488\uc0ac (\ub2e8\uc5b4 \ud074\ub798\uc2a4)\ub97c \ucd94\uac00\ud558\uace0 \uc2f6\uc744 \uacbd\uc6b0\uc5d0\ub294 \ubc18\ub4dc\uc2dc force=True\ub85c \uc124\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. \n\n```python\ntwitter.add_dictionary('lovit', 'Name', force=True)\n```\n\n### Add template to customized tagger\n\n\ud604\uc7ac \uc0ac\uc6a9\uc911\uc778 \ud0ec\ud50c\ub9bf \uae30\ubc18 \ud1a0\ud06c\ub098\uc774\uc800\ub294 \ucf54\ub4dc \uc0ac\uc6a9 \uc911 \ud0ec\ud50c\ub9bf\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc0ac\uc6a9\uc911\uc778 \ud0ec\ud50c\ub9bf\uc758 \ub9ac\uc2a4\ud2b8\ub294 \uc544\ub798\ucc98\ub7fc \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n```python\ntwitter.template_tagger.templates\n```\n\n    [('Noun', 'Josa'), ('Modifier', 'Noun'), ('Modifier', 'Noun', 'Josa')]\n\n\ud0ec\ud50c\ub9bf\uc740 tuple of str \ud615\uc2dd\uc73c\ub85c \uc785\ub825\ud569\ub2c8\ub2e4. \n\n```python\ntwitter.template_tagger.add_a_template(('Noun', 'Noun', 'Josa'))\n```\n\n### Set templates tagger selector\n\nTemplates\ub97c \uc774\uc6a9\ud558\uc5ec\ub3c4 \ud6c4\ubcf4\uac00 \uc5ec\ub7ec \uac1c \ub098\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \uac1c \ud6c4\ubcf4 \uc911\uc5d0\uc11c best \ub97c \uc120\ud0dd\ud558\ub294 \ud568\uc218\ub97c \uc9c1\uc811 \ub514\uc790\uc778 \ud560 \uc218 \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ucc98\ub7fc \uba87 \uac1c\uc758 \uc810\uc218 \uae30\uc900\uc744 \ub9cc\ub4e4\uace0, \uac01 \uae30\uc900\uc758 weight\ub97c \ubd80\uc5ec\ud558\ub294 \ubc29\uc2dd\uc740 \ud2b8\uc704\ud130 \ubd84\uc11d\uae30\uc5d0\uc11c \uc774\uc6a9\ud558\ub294 \ubc29\uc2dd\uc778\ub370, \uc9c1\uad00\uc801\uc774\uace0 \ud29c\ub2dd \uac00\ub2a5\ud574\uc11c \ub9e4\uc6b0 \uc88b\uc740 \ubc29\uc2dd\uc774\ub77c \uc0dd\uac01\ud569\ub2c8\ub2e4.\n\n```python\nmy_weights = [\n    ('num_nouns', -0.1),\n    ('num_words', -0.2),\n    ('no_noun', -1),\n    ('len_sum_of_nouns', 0.2)\n]\n\ndef my_evaluate_function(candidate):\n    num_nouns = len([word for word, pos, begin, e in candidate if pos == 'Noun'])\n    num_words = len(candidate)\n    has_no_nouns = (num_nouns == 0)\n    len_sum_of_nouns = 0 if has_no_nouns else sum(\n        (len(word) for word, pos, _, _ in candidate if pos == 'Noun'))\n\n    scores = (num_nouns, num_words, has_no_nouns, len_sum_of_nouns)\n    score = sum((score * weight for score, (_, weight) in zip(scores, my_weights)))\n    return score\n```\n\n\uc704\uc758 \uc608\uc81c\ucc98\ub7fc my_weights \uc640 my_evaluate_function \ud568\uc218\ub97c \uc815\uc758\ud558\uc5ec twitter.set_evaluator()\uc5d0 \uc785\ub825\ud558\uba74, \ud574\ub2f9 \ud568\uc218 \uae30\uc900\uc73c\ub85c best candidate\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4.\n\n```python\ntwitter.set_evaluator(my_weights, my_evaluate_function)\n```\n\n### Postprocessor\n\npasswords, stopwords, passtags, \ub2e8\uc5b4 \uce58\ud658\uc744 \uc704\ud55c \ud6c4\ucc98\ub9ac\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\npasswords \uc5d0 \ub4f1\ub85d\ub41c \ub2e8\uc5b4, (\ub2e8\uc5b4, \ud488\uc0ac)\ub9cc \ucd9c\ub825\ub429\ub2c8\ub2e4.\n\n```python\nfrom ckonlpy.tag import Postprocessor\n\npasswords = {'\uc544\uc774\uc624\uc544\uc774', ('\uc815\ub9d0', 'Noun')}\npostprocessor = Postprocessor(twitter, passwords = passwords)\npostprocessor.pos('\uc6b0\ub9ac\uc544\uc774\uc624\uc544\uc774\ub294 \uc815\ub9d0 \uc774\ubed0\uc694')\n# [('\uc544\uc774\uc624\uc544\uc774', 'Noun'), ('\uc815\ub9d0', 'Noun')]\n```\n\nstopwords \uc5d0 \ub4f1\ub85d\ub41c \ub2e8\uc5b4, (\ub2e8\uc5b4, \ud488\uc0ac)\ub294 \ucd9c\ub825\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \n\n```python\nstopwords = {'\ub294'}\npostprocessor = Postprocessor(twitter, stopwords = stopwords)\npostprocessor.pos('\uc6b0\ub9ac\uc544\uc774\uc624\uc544\uc774\ub294 \uc815\ub9d0 \uc774\ubed0\uc694')\n# [('\uc6b0\ub9ac', 'Modifier'), ('\uc544\uc774\uc624\uc544\uc774', 'Noun'), ('\uc815\ub9d0', 'Noun'), ('\uc774\ubed0', 'Adjective'), ('\uc694', 'Eomi')]\n```\n\n\ud2b9\uc815 \ud488\uc0ac\ub97c \uc9c0\uc815\ud558\uba74, \ud574\ub2f9 \ud488\uc0ac\ub9cc \ucd9c\ub825\ub429\ub2c8\ub2e4. \n\n```python\npasstags = {'Noun'}\npostprocessor = Postprocessor(twitter, passtags = passtags)\npostprocessor.pos('\uc6b0\ub9ac\uc544\uc774\uc624\uc544\uc774\ub294 \uc815\ub9d0 \uc774\ubed0\uc694')\n# [('\uc544\uc774\uc624\uc544\uc774', 'Noun'), ('\uc815\ub9d0', 'Noun')]\n```\n\n\uce58\ud658\ud560 \ub2e8\uc5b4, (\ub2e8\uc5b4, \ud488\uc0ac)\ub97c dict \ud615\uc2dd\uc73c\ub85c \uc815\uc758\ud558\uba74 tag \uc5d0\uc11c \ub2e8\uc5b4\uac00 \uce58\ud658\ub418\uc5b4 \ucd9c\ub825\ub429\ub2c8\ub2e4.\n\n```python\nreplace = {'\uc544\uc774\uc624\uc544\uc774': '\uc544\uc774\ub3cc', ('\uc774\ubed0', 'Adjective'): '\uc608\uc058\ub2e4'}\npostprocessor = Postprocessor(twitter, replace = replace)\npostprocessor.pos('\uc6b0\ub9ac\uc544\uc774\uc624\uc544\uc774\ub294 \uc815\ub9d0 \uc774\ubed0\uc694')\n# [('\uc6b0\ub9ac', 'Modifier'), ('\uc544\uc774\ub3cc', 'Noun'), ('\ub294', 'Josa'), ('\uc815\ub9d0', 'Noun'), ('\uc608\uc058\ub2e4', 'Adjective'), ('\uc694', 'Eomi')]\n```\n\n\uc5f0\uc18d\ub41c \ub2e8\uc5b4\ub97c \ud558\ub098\uc758 \ub2e8\uc5b4\ub8e8 \ubb36\uae30 \uc704\ud574\uc11c nested tuple \uc774\ub098 tuple of str \ud615\uc2dd\uc758 ngram \uc744 \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. tuple of str \uc758 \ud615\uc2dd\uc73c\ub85c \uc785\ub825\ub41c ngram \uc740 Noun \uc73c\ub85c \uc778\uc2dd\ub429\ub2c8\ub2e4.\n\n```python\nngrams = [(('\ubbf8\uc2a4', '\ud568\ubb34\ub77c\ube44'), 'Noun'), ('\ubc14\ub78c', '\uc758', '\ub098\ub77c')]\npostprocessor = Postprocessor(twitter, ngrams = ngrams)\npostprocessor.pos('\ubbf8\uc2a4 \ud568\ubb34\ub77c\ube44\ub294 \uc7ac\ubc0c\ub294 \ub4dc\ub77c\ub9c8\uc785\ub2c8\ub2e4')\n# [('\ubbf8\uc2a4 - \ud568\ubb34\ub77c\ube44', 'Noun'), ('\ub294', 'Josa'), ('\uc7ac\ubc0c\ub294', 'Adjective'), ('\ub4dc\ub77c\ub9c8', 'Noun'), ('\uc785\ub2c8', 'Adjective'), ('\ub2e4', 'Eomi')]\n```\n\n### Loading wordset\n\nutils \uc5d0\ub294 stopwords, passwords, replace word pair \ub97c \ud30c\uc77c\ub85c \uc800\uc7a5\ud558\uc600\uc744 \uacbd\uc6b0, \uc774\ub97c \uc190\uc27d\uac8c \ubd88\ub7ec\uc624\ub294 \ud568\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\nload_wordset \uc740 set of str \ud639\uc740 set of tuple \uc744 return \ud569\ub2c8\ub2e4. \uc608\uc2dc\uc758 passwords.txt \uc758 \ub0b4\uc6a9\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ub2e8\uc5b4\uc758 \ud488\uc0ac\ub294 \ud55c \uce78 \ub744\uc5b4\uc4f0\uae30\ub85c \uad6c\ubd84\ud569\ub2c8\ub2e4. stopwords.txt \ub3c4 \ub3d9\uc77c\ud55c \ud3ec\uba67\uc785\ub2c8\ub2e4.\n\n    \uc544\uc774\uc624\uc544\uc774\n    \uc544\uc774\uc624\uc544\uc774 Noun\n    \uacf5\uc5f0\n\nload_wordset \uc744 \uc774\uc6a9\ud558\ub294 \uc608\uc2dc\ucf54\ub4dc \uc785\ub2c8\ub2e4.\n\n```python\nfrom ckonlpy.utils import load_wordset\n\npasswords = load_wordset('./passwords.txt')\nprint(passwords) # {('\uc544\uc774\uc624\uc544\uc774', 'Noun'), '\uc544\uc774\uc624\uc544\uc774', '\uacf5\uc5f0'}\n\nstopwords = load_wordset('./stopwords.txt')\nprint(stopwords) # {'\uc740', '\ub294', ('\uc774', 'Josa')}\n```\n\n\uce58\ud658\ud560 \ub2e8\uc5b4\uc30d\uc740 tap \uad6c\ubd84\uc774 \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uce58\ud658\ub420 \ub2e8\uc5b4\uc5d0 \ud488\uc0ac \ud0dc\uadf8\uac00 \uc788\uc744 \uacbd\uc6b0 \ud55c \uce78 \ub744\uc5b4\uc4f0\uae30\ub85c \uad6c\ubd84\ud569\ub2c8\ub2e4.\n\n    str\\tstr\n    str str\\tstr\n\n\uc544\ub798\ub294 replacewords.txt \uc758 \uc608\uc2dc\uc785\ub2c8\ub2e4.\n\n    \uc544\ube60\t\uc544\ubc84\uc9c0\n    \uc5c4\ub9c8 Noun\t\uc5b4\uba38\ub2c8\n\nload_replace_wordpair \uc744 \uc774\uc6a9\ud558\ub294 \uc608\uc2dc\ucf54\ub4dc \uc785\ub2c8\ub2e4.\n\n```python\nfrom ckonlpy.utils import load_replace_wordpair\n\nreplace = load_replace_wordpair('./replacewords.txt')\nprint(replace) # {'\uc544\ube60': '\uc544\ubc84\uc9c0', ('\uc5c4\ub9c8', 'Noun'): '\uc5b4\uba38\ub2c8'}\n```\n\nngram \ub2e8\uc5b4\ub4e4\uc758 \uac01 \ub2e8\uc5b4\ub294 \ud55c \uce78 \ub744\uc5b4\uc4f0\uae30\ub85c, ngram \uc758 \ud488\uc0ac\ub294 tap \uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n    str str\n    str str\\tstr\n\n\uc544\ub798\ub294 ngrams.txt \uc758 \uc608\uc2dc\uc785\ub2c8\ub2e4.\n\n    \ubc14\ub78c \uc758 \ub098\ub77c\n    \ubbf8\uc2a4 \ud568\ubb34\ub77c\ube44\tNoun\n\nload_ngram \uc744 \uc774\uc6a9\ud558\ub294 \uc608\uc2dc\ucf54\ub4dc \uc785\ub2c8\ub2e4.\n\n```python\nfrom ckonlpy.utils import load_ngram\n\nngrams = load_ngram('./ngrams.txt')\nprint(ngrams) # [('\ubc14\ub78c', '\uc758', '\ub098\ub77c'), (('\ubbf8\uc2a4', '\ud568\ubb34\ub77c\ube44'), 'Noun')]\n```\n\n## 0.0.6+ vs 0.0.5x\n\n0.0.5x \uc5d0\uc11c\uc758 \ubcc0\uc218\uc640 \ud568\uc218\uc758 \uc774\ub984, \ubcc0\uc218\uc758 \ud0c0\uc785 \uc77c\ubd80\ub97c \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n| \ubcc0\uacbd \uc804 | \ubcc0\uacbd \ud6c4 |\n| --- | --- |\n| ckonlpy.tag.Twitter._loaded_twitter_default_dictionary | ckonlpy.tag.Twitter.use_twitter_dictionary |\n| ckonlpy.tag.Twitter._dictionary | ckonlpy.tag.Twitter.dictionary |\n| ckonlpy.tag.Twitter._customized_tagger | ckonlpy.tag.Twitter.template_tagger |\n| ckonlpy.tag.Postprocessor.tag | ckonlpy.tag.Postprocessor.pos |\n| ckonlpy.custom_tag.SimpleSelector | ckonlpy.custom_tag.SimpleEvalator |\n| ckonlpy.custom_tag.SimpleSelector.score | ckonlpy.custom_tag.SimpleEvalator.evaluate |\n| ckonlpy.tag.Twitter.set_selector | ckonlpy.tag.AbstractTagger.set_evaluator |\n| ckonlpy.custom_tag.SimpleSelector.weight | ckonlpy.custom_tag.SimpleEvaluator.weight |\n\n| \ubcc0\uacbd \ud6c4 | \ubcc0\uacbd \uc774\uc720 |\n| --- | --- |\n| ckonlpy.tag.Twitter.use_twitter_dictionary | konlpy.tag.Twitter \uc758 \uc0ac\uc804 \uc0ac\uc6a9 \uc720\ubb34 |\n| ckonlpy.tag.Twitter.dictionary | public \uc73c\ub85c \ubcc0\ud658\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n| ckonlpy.tag.Twitter.template_tagger | Template \uae30\ubc18\uc73c\ub85c \uc791\ub3d9\ud558\ub294 tagger \uc784\uc744 \uba85\uc2dc\ud558\uace0, public \uc73c\ub85c \ubcc0\ud658\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n| ckonlpy.tag.Postprocessor.pos | \uae30\ubcf8 tagger \uc758 \uacb0\uacfc\ub97c \ud6c4\ucc98\ub9ac\ud558\ub294 \uae30\ub2a5\uc774\uae30 \ub54c\ubb38\uc5d0 \ub3d9\uc77c\ud55c \ud568\uc218\uba85\uc73c\ub85c \ud1b5\uc77c\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n| ckonlpy.custom_tag.SimpleEvalator | \ud074\ub798\uc2a4 \uc774\ub984\uc744 Selector \uc5d0\uc11c Evaluator \ub85c \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n| ckonlpy.custom_tag.SimpleEvalator.evaluate | \ud488\uc0ac\uc5f4 \ud6c4\ubcf4\uc758 \uc810\uc218 \uacc4\uc0b0 \ubd80\ubd84\uc744 score --> evaluate \ub85c \ud568\uc218\uba85\uc744 \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n| ckonlpy.tag.AbstractTagger.set_evaluator | \ud488\uc0ac\uc5f4 \ud6c4\ubcf4\uc758 \uc810\uc218 \uacc4\uc0b0 \ud568\uc218\ub97c \uc124\uc815\ud558\ub294 \ud568\uc218\uc758 \uc774\ub984\uc744 \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \ud568\uc218\ub294 ckonlpy.tag.Twitter \uc5d0\uc11c ckonlpy.tag.AbstractTagger \ub85c \uc774\ub3d9\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n| ckonlpy.custom_tag.SimpleEvaluator.weight | {str:float} \ud615\uc2dd\uc758 weight \ub97c [(str, float)] \ud615\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4 |\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/whfh3900/ats_ckonlpy.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ats-ckonlpy",
            "package_url": "https://pypi.org/project/ats-ckonlpy/",
            "platform": null,
            "project_url": "https://pypi.org/project/ats-ckonlpy/",
            "project_urls": {
                "Homepage": "https://github.com/whfh3900/ats_ckonlpy.git"
            },
            "release_url": "https://pypi.org/project/ats-ckonlpy/0.0.2/",
            "requires_dist": [
                "Jpype1 (>=0.6.1)",
                "konlpy (>=0.4.4)"
            ],
            "requires_python": "",
            "summary": "KoNLPy wrapping package",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15332665,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "47c94c24db8440a4001788ed97ceeefa",
                    "sha256": "5c2b2eb9bc5ceeee66b658ed5d1bd3e5d56fd1f4461bf5513036ed8812a9814e"
                },
                "downloads": -1,
                "filename": "ats_ckonlpy-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "47c94c24db8440a4001788ed97ceeefa",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 1039989,
                "upload_time": "2022-10-07T09:13:08",
                "upload_time_iso_8601": "2022-10-07T09:13:08.597040Z",
                "url": "https://files.pythonhosted.org/packages/89/cb/e306aeaa423ca1ef404cbb8928f33d3eb9a12e3035a383ce1ce3a0e871ee/ats_ckonlpy-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f5fe80d0bfab708e740d275a568e5c61",
                    "sha256": "d078aa5cd1329ea0073ee9752d5e0fb455c702b5ed6a68e08936f2117a9a5f47"
                },
                "downloads": -1,
                "filename": "ats_ckonlpy-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "f5fe80d0bfab708e740d275a568e5c61",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 1037703,
                "upload_time": "2022-10-07T09:13:13",
                "upload_time_iso_8601": "2022-10-07T09:13:13.460178Z",
                "url": "https://files.pythonhosted.org/packages/bc/28/d16dd7f62ba4da26dcfd670684f907d8daaeecf8dbd3fecb5fa5f38a2195/ats_ckonlpy-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}