{
    "0.0.1": {
        "info": {
            "author": "=?utf-8?q?Simon_W=C3=B6rpel?=",
            "author_email": "simon.woerpel@medienrevolte.de",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.10"
            ],
            "description": "# ftm-geocoder\n\nBatch parse and geocode addresses from\n[followthemoney entities](https://followthemoney.readthedocs.io/en/latest/).\nSimply geocoding just address strings works as well, of course.\n\nThere are as well some parsing / normalization helpers.\n\n## Features\n- Parse/normalize addresses via [libpostal](https://github.com/openvenues/libpostal)\n- Geocoding via [geopy](https://geopy.readthedocs.io/en/stable/)\n- Cache geocoding results in a sql database (using [dataset](https://github.com/pudo/dataset))\n- Optional fallback geocoders when preferred geocoder doesn't match\n- Create, update and merge [`Address`](https://followthemoney.readthedocs.io/en/latest/model.html#address) entities for ftm data\n\n## Usage\n\n### command line\n\nThe command line interface is designed for piping input / output streams, but\nfor each command a `-i <input_file>` and `-o <output_file>` can be used as well.\n\nGeocode an input stream of ftm entities with nominatim and google maps as\nfallback (geocoders are tried in the given order):\n\n    cat entitis.ftm.ijson | ftmgeo geocode -g nominatim -g google > entities_geocoded.ftm.ijson\n\nThis looks for the [address prop](https://followthemoney.readthedocs.io/en/latest/types.html#type-address)\non input entities and creates address entities with reference to the input\nentities. The output contains all entities from the input stream plus newly\ncreated addresses.\n\nIf an input entity is itself an [Address entity](https://followthemoney.readthedocs.io/en/latest/model.html#address),\nit will be geocoded as well and their props (country, city, ...) will be merged\nwith the geocoder result.\n\nDuring the process, addresses are parsed and normalized and looked up in the\naddress cache database before actual geocoding. After geocoding, new addresses\nare added to the cache database.\n\nGeocoders can be set via `GEOCODERS` and default to `nominatim`\n\n### geocoding just address strings\n\n**csv format (for all csv input streams)**\nfirst column `address`, optional second column `country` (name or code) and\nthird `language` for postal context\n\nTo ftm address entities:\n\n    cat addresses.csv | ftmgeo geocode --input-format=csv > addresses.ftm.ijson\n\nTo csv:\n\n    cat addresses.csv | ftmgeo geocode --input-format=csv --output-format=csv > addresses.csv\n\n### formatting / normalization\n\n    cat addresses.txt | ftmgeo format-line > clean_addresses.csv\n\nGenerate address entities (without geocoding):\n\n    cat entities.ftm.ijson | ftmgeo map > entities.ftm.ijson\n    cat addresses.csv | ftmgeo map --input-format=csv > addresses.ftm.ijson\n\n### database cache\n\nDuring geocoding, addresses are first looked up in the local cache, and new\ngeocoding results are added.\n\nIgnore cache during geocoding (new results are still written to it):\n\n    ftmgeo geocode --no-cache ...\n\nExport cache:\n\n    ftmgeo cache iterate > geocoded_addresses.ftm.ijsonl\n    ftmgeo cache iterate --output-format=csv > geocoded_addresses.csv\n\nPopulate cache:\n\n*csv input:*\n`address_id,canonical_id,original_line,result_line,country,lat,lon,geocoder,geocoder_place_id`\n\noptional field: `geocoder_raw` - json of geocoder response\n\n    cat geocoded_addresses.csv | ftmgeo cache populate\n\n\n## Configuration\n\n**geocoders**\n\nDefault geocoders: env var `GEOCODERS`\nThey are used in the given order\n\nMake sure to configure the geocoders as needed for `geopy` (endpoints, api keys, ...):\n\n`export FTMGEO_<GEOCODERNAME>_<SETTING>=...`\n\n**Persistent cache**\n\nThe cache database is set via `FTM_STORE_URI` (so it is the same as the ftm store, if any)\n\n## Installation\n\nRequired external is [libpostal](https://github.com/openvenues/pypostal), see installation instructions there.\n\nOnce `libpostal` is installed on your system, you can install:\n\n    pip install ftm-geocoder\n\n## Testing\n\n    make install\n    make test\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/simonwoerpel/ftm-geocode",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ftm-geocode",
            "package_url": "https://pypi.org/project/ftm-geocode/",
            "platform": null,
            "project_url": "https://pypi.org/project/ftm-geocode/",
            "project_urls": {
                "Homepage": "https://github.com/simonwoerpel/ftm-geocode"
            },
            "release_url": "https://pypi.org/project/ftm-geocode/0.0.1/",
            "requires_dist": [
                "dataset",
                "fingerprints",
                "followthemoney",
                "followthemoney-store",
                "geopy",
                "lazy-import",
                "postal",
                "pycountry",
                "pydantic",
                "pyicu",
                "structlog",
                "typer",
                "zavod"
            ],
            "requires_python": "",
            "summary": "Bath parse and geocode addresses from followthemoney entities",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15847165,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ee828af8d5e276ee030fb240fd0b1aaf",
                    "sha256": "5219e1ce25de22b4224da8a5ca22b30c0c4a77cfe7d66efe10b861fb45ebf56f"
                },
                "downloads": -1,
                "filename": "ftm_geocode-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ee828af8d5e276ee030fb240fd0b1aaf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 25571,
                "upload_time": "2022-11-22T00:16:01",
                "upload_time_iso_8601": "2022-11-22T00:16:01.644741Z",
                "url": "https://files.pythonhosted.org/packages/e4/d7/9e1f47ac26bd2006147f086b0fafae8d2b3af47ecce2eda1b85fb5aa3d7a/ftm_geocode-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "80afddc6b31175783f0b713667292a1b",
                    "sha256": "6ee62f747f02b65d1172e64b45fb0f846e1a29b7446497f6b1ed18dfb0473679"
                },
                "downloads": -1,
                "filename": "ftm-geocode-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "80afddc6b31175783f0b713667292a1b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24703,
                "upload_time": "2022-11-22T00:16:03",
                "upload_time_iso_8601": "2022-11-22T00:16:03.657564Z",
                "url": "https://files.pythonhosted.org/packages/62/cd/e0aa6c89b7173de3ea2d7f1fc903512aff71767b4720b6632abfa67046ae/ftm-geocode-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}