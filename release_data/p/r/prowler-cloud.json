{
    "0.0.0rc1": {
        "info": {
            "author": "",
            "author_email": "Toni de la Fuente <toni@blyx.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "<p align=\"center\">\n  <img align=\"center\" src=\"docs/images/prowler-pro-dark.png#gh-dark-mode-only\" width=\"150\" height=\"36\">\n  <img align=\"center\" src=\"docs/images/prowler-pro-light.png#gh-light-mode-only\" width=\"15%\" height=\"15%\">\n</p>\n<p align=\"center\">\n  <b><i>&nbsp&nbsp&nbspExplore the Pro version of Prowler at <a href=\"https://prowler.pro\">prowler.pro</a></i></b>\n</p>\n<hr>\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/3985464/113734260-7ba06900-96fb-11eb-82bc-d4f68a1e2710.png\" />\n</p>\n<p align=\"center\">\n  <a href=\"https://discord.gg/UjSMCVnxSB\"><img alt=\"Discord Shield\" src=\"https://img.shields.io/discord/807208614288818196\"></a>\n  <a href=\"https://hub.docker.com/r/toniblyx/prowler\"><img alt=\"Docker Pulls\" src=\"https://img.shields.io/docker/pulls/toniblyx/prowler\"></a>\n  <a href=\"https://hub.docker.com/r/toniblyx/prowler\"><img alt=\"Docker\" src=\"https://img.shields.io/docker/cloud/build/toniblyx/prowler\"></a>\n  <a href=\"https://hub.docker.com/r/toniblyx/prowler\"><img alt=\"Docker\" src=\"https://img.shields.io/docker/image-size/toniblyx/prowler\"></a>\n  <a href=\"https://gallery.ecr.aws/o4g1s5r6/prowler\"><img width=\"120\" height=19\" alt=\"AWS ECR Gallery\" src=\"https://user-images.githubusercontent.com/3985464/151531396-b6535a68-c907-44eb-95a1-a09508178616.png\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler\"><img alt=\"Repo size\" src=\"https://img.shields.io/github/repo-size/prowler-cloud/prowler\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler\"><img alt=\"Lines\" src=\"https://img.shields.io/tokei/lines/github/prowler-cloud/prowler\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler/issues\"><img alt=\"Issues\" src=\"https://img.shields.io/github/issues/prowler-cloud/prowler\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler/releases\"><img alt=\"Version\" src=\"https://img.shields.io/github/v/release/prowler-cloud/prowler?include_prereleases\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler/releases\"><img alt=\"Version\" src=\"https://img.shields.io/github/release-date/prowler-cloud/prowler\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler\"><img alt=\"Contributors\" src=\"https://img.shields.io/github/contributors-anon/prowler-cloud/prowler\"></a>\n  <a href=\"https://github.com/prowler-cloud/prowler\"><img alt=\"License\" src=\"https://img.shields.io/github/license/prowler-cloud/prowler\"></a>\n  <a href=\"https://twitter.com/ToniBlyx\"><img alt=\"Twitter\" src=\"https://img.shields.io/twitter/follow/toniblyx?style=social\"></a>\n</p>\n\n<p align=\"center\">\n  <i>Prowler</i> is an Open Source security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains more than 200 controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custome security frameworks.\n</p>\n\n## Table of Contents\n\n- [Description](#description)\n- [Features](#features)\n- [High level architecture](#high-level-architecture)\n- [Requirements and Installation](#requirements-and-installation)\n- [Usage](#usage)\n- [Screenshots](#screenshots)\n- [Advanced Usage](#advanced-usage)\n- [Security Hub integration](#security-hub-integration)\n- [CodeBuild deployment](#codebuild-deployment)\n- [Allowlist](#allowlist-or-remove-a-fail-from-resources)\n- [Fix](#how-to-fix-every-fail)\n- [Troubleshooting](#troubleshooting)\n- [Extras](#extras)\n- [Forensics Ready Checks](#forensics-ready-checks)\n- [GDPR Checks](#gdpr-checks)\n- [HIPAA Checks](#hipaa-checks)\n- [Trust Boundaries Checks](#trust-boundaries-checks)\n- [Multi Account and Continuous Monitoring](util/org-multi-account/README.md)\n- [Custom Checks](#custom-checks)\n- [Third Party Integrations](#third-party-integrations)\n- [Full list of checks and groups](/LIST_OF_CHECKS_AND_GROUPS.md)\n- [License](#license)\n\n## Description\n\nProwler is a command line tool that helps you with AWS security assessment, auditing, hardening and incident response.\n\nIt follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has more than 100 additional checks including related to GDPR, HIPAA, PCI-DSS, ISO-27001, FFIEC, SOC2 and others.\n\nRead more about [CIS Amazon Web Services Foundations Benchmark v1.2.0 - 05-23-2018](https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf)\n\n## Features\n\n+200 checks covering security best practices across all AWS regions and most of AWS services and related to the next groups:\n\n- Identity and Access Management [group1]\n- Logging  [group2]\n- Monitoring [group3]\n- Networking [group4]\n- CIS Level 1 [cislevel1]\n- CIS Level 2 [cislevel2]\n- Extras *see Extras section* [extras]\n- Forensics related group of checks [forensics-ready]\n- GDPR [gdpr] Read more [here](#gdpr-checks)\n- HIPAA [hipaa] Read more [here](#hipaa-checks)\n- Trust Boundaries [trustboundaries] Read more [here](#trust-boundaries-checks)\n- Secrets\n- Internet exposed resources\n- EKS-CIS\n- Also includes PCI-DSS, ISO-27001, FFIEC, SOC2, ENS (Esquema Nacional de Seguridad of Spain).\n- AWS FTR [FTR] Read more [here](#aws-ftr-checks)\n\nWith Prowler you can:\n\n- Get a direct colorful or monochrome report\n- A HTML, CSV, JUNIT, JSON or JSON ASFF (Security Hub) format report\n- Send findings directly to Security Hub\n- Run specific checks and groups or create your own\n- Check multiple AWS accounts in parallel or sequentially\n- And more! Read examples below\n\n## High level architecture\n\nYou can run Prowler from your workstation, an EC2 instance, Fargate or any other container, Codebuild, CloudShell and Cloud9.\n\n![Prowler high level architecture](https://user-images.githubusercontent.com/3985464/109143232-1488af80-7760-11eb-8d83-726790fda592.jpg)\n## Requirements and Installation\n\nProwler has been written in bash using AWS-CLI underneath and it works in Linux, Mac OS or Windows with cygwin or virtualization. Also requires `jq` and `detect-secrets` to work properly.\n\n- Make sure the latest version of AWS-CLI is installed. It works with either v1 or v2, however _latest v2 is recommended if using new regions since they require STS v2 token_, and other components needed, with Python pip already installed.\n\n- For Amazon Linux (`yum` based Linux distributions and AWS CLI v2):\n    ```\n    sudo yum update -y\n    sudo yum remove -y awscli\n    curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n    unzip awscliv2.zip\n    sudo ./aws/install\n    sudo yum install -y python3 jq git\n    sudo pip3 install detect-secrets==1.0.3\n    git clone https://github.com/prowler-cloud/prowler\n    ```\n- For Ubuntu Linux (`apt` based Linux distributions and AWS CLI v2):\n    ```\n    sudo apt update\n    sudo apt install python3 python3-pip jq git zip\n    pip install detect-secrets==1.0.3\n    curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n    unzip awscliv2.zip\n    sudo ./aws/install\n    git clone https://github.com/prowler-cloud/prowler\n    ```\n\n    > NOTE: detect-secrets Yelp version is no longer supported, the one from IBM is mantained now. Use the one mentioned below or the specific Yelp version 1.0.3 to make sure it works as expected (`pip install detect-secrets==1.0.3`):\n    ```sh\n    pip install \"git+https://github.com/ibm/detect-secrets.git@master#egg=detect-secrets\"\n    ```\n\n    AWS-CLI can be also installed it using other methods, refer to official documentation for more details: <https://aws.amazon.com/cli/>, but `detect-secrets` has to be installed using `pip` or `pip3`.\n\n- Once Prowler repository is cloned, get into the folder and you can run it:\n\n    ```sh\n    cd prowler\n    ./prowler\n    ```\n\n- Since Prowler users AWS CLI under the hood, you can follow any authentication method as described [here](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-precedence). Make sure you have properly configured your AWS-CLI with a valid Access Key and Region or declare AWS variables properly (or instance profile/role):\n\n    ```sh\n    aws configure\n    ```\n\n    or\n\n    ```sh\n    export AWS_ACCESS_KEY_ID=\"ASXXXXXXX\"\n    export AWS_SECRET_ACCESS_KEY=\"XXXXXXXXX\"\n    export AWS_SESSION_TOKEN=\"XXXXXXXXX\"\n    ```\n\n- Those credentials must be associated to a user or role with proper permissions to do all checks. To make sure, add the AWS managed policies, SecurityAudit and ViewOnlyAccess, to the user or role being used.  Policy ARNs are:\n\n    ```sh\n    arn:aws:iam::aws:policy/SecurityAudit\n    arn:aws:iam::aws:policy/job-function/ViewOnlyAccess\n    ```\n\n    > Additional permissions needed: to make sure Prowler can scan all services included in the group *Extras*, make sure you attach also the custom policy [prowler-additions-policy.json](https://github.com/prowler-cloud/prowler/blob/master/iam/prowler-additions-policy.json) to the role you are using. If you want Prowler to send findings to [AWS Security Hub](https://aws.amazon.com/security-hub), make sure you also attach the custom policy [prowler-security-hub.json](https://github.com/prowler-cloud/prowler/blob/master/iam/prowler-security-hub.json).\n\n## Usage\n\n1. Run the `prowler` command without options (it will use your environment variable credentials if they exist or will default to using the `~/.aws/credentials` file and run checks over all regions when needed. The default region is us-east-1):\n\n    ```sh\n    ./prowler\n    ```\n\n    Use `-l` to list all available checks and the groups (sections) that reference them. To list all groups use `-L` and to list content of a group use `-l -g <groupname>`.\n\n    If you want to avoid installing dependencies run it using Docker:\n\n    ```sh\n    docker run -ti --rm --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest\n    ```\n\n    In case you want to get reports created by Prowler use docker volume option like in the example below:\n    ```sh\n    docker run -ti --rm -v /your/local/output:/prowler/output --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest -g hipaa -M csv,json,html\n    ```\n\n1. For custom AWS-CLI profile and region, use the following: (it will use your custom profile and run checks over all regions when needed):\n\n    ```sh\n    ./prowler -p custom-profile -r us-east-1\n    ```\n\n1. For a single check use option `-c`:\n\n    ```sh\n    ./prowler -c check310\n    ```\n\n    With Docker:\n\n    ```sh\n    docker run -ti --rm --name prowler --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest \"-c check310\"\n    ```\n\n    or multiple checks separated by comma:\n\n    ```sh\n    ./prowler -c check310,check722\n    ```\n\n    or all checks but some of them:\n\n    ```sh\n    ./prowler -e check42,check43\n    ```\n\n    or for custom profile and region:\n\n    ```sh\n    ./prowler -p custom-profile -r us-east-1 -c check11\n    ```\n\n    or for a group of checks use group name:\n\n    ```sh\n    ./prowler -g group1 # for iam related checks\n    ```\n\n    or exclude some checks in the group:\n\n    ```sh\n    ./prowler -g group4 -e check42,check43\n    ```\n\n    Valid check numbers are based on the AWS CIS Benchmark guide, so 1.1 is check11 and 3.10 is check310\n\n### Regions\n\nBy default, Prowler scans all opt-in regions available, that might take a long execution time depending on the number of resources and regions used. Same applies for GovCloud or China regions. See below Advance usage for examples.\n\nProwler has two parameters related to regions: `-r` that is used query AWS services API endpoints (it uses `us-east-1` by default and required for GovCloud or China) and the option `-f` that is to filter those regions you only want to scan. For example if you want to scan Dublin only use `-f eu-west-1` and if you want to scan Dublin and Ohio `-f eu-west-1,us-east-1`, note the regions are separated by a comma deliminator (it can be used as before with `-f 'eu-west-1,us-east-1'`).\n\n## Screenshots\n\n- Sample screenshot of default console report first lines of command `./prowler`:\n\n    <img width=\"900\" src=\"https://user-images.githubusercontent.com/3985464/141444529-84640bed-be0b-4112-80a2-2a43e3ebf53f.png\">\n\n- Sample screenshot of the html output `-M html`:\n\n    <img width=\"900\" alt=\"Prowler html\" src=\"https://user-images.githubusercontent.com/3985464/141443976-41d32cc2-533d-405a-92cb-affc3995d6ec.png\">\n\n- Sample screenshot of the Quicksight dashboard, see [quicksight-security-dashboard.workshop.aws](https://quicksight-security-dashboard.workshop.aws/):\n\n    <img width=\"900\" alt=\"Prowler with Quicksight\" src=\"https://user-images.githubusercontent.com/3985464/128932819-0156e838-286d-483c-b953-fda68a325a3d.png\">\n\n- Sample screenshot of the junit-xml output in CodeBuild `-M junit-xml`:\n\n    <img width=\"900\" src=\"https://user-images.githubusercontent.com/3985464/113942824-ca382b00-9801-11eb-84e5-d7731548a7a9.png\">\n\n### Save your reports\n\n1. If you want to save your report for later analysis thare are different ways, natively (supported text, mono, csv, json, json-asff, junit-xml and html, see note below for more info):\n\n    ```sh\n    ./prowler -M csv\n    ```\n\n    or with multiple formats at the same time:\n\n    ```sh\n    ./prowler -M csv,json,json-asff,html\n    ```\n\n    or just a group of checks in multiple formats:\n\n    ```sh\n    ./prowler -g gdpr -M csv,json,json-asff\n    ```\n\n    or if you want a sorted and dynamic HTML report do:\n\n    ```sh\n    ./prowler -M html\n    ```\n\n    Now `-M` creates a file inside the prowler `output` directory named `prowler-output-AWSACCOUNTID-YYYYMMDDHHMMSS.format`. You don't have to specify anything else, no pipes, no redirects.\n\n    or just saving the output to a file like below:\n\n    ```sh\n    ./prowler -M mono > prowler-report.txt\n    ```\n\n    To generate JUnit report files, include the junit-xml format. This can be combined with any other format. Files are written inside a prowler root directory named `junit-reports`:\n\n    ```sh\n    ./prowler -M text,junit-xml\n    ```\n\n    >Note about output formats to use with `-M`: \"text\" is the default one with colors, \"mono\" is like default one but monochrome, \"csv\" is comma separated values, \"json\" plain basic json (without comma between lines) and \"json-asff\" is also json with Amazon Security Finding Format that you can ship to Security Hub using `-S`.\n\n    To save your report in an S3 bucket, use `-B` to define a custom output bucket along with `-M` to define the output format that is going to be uploaded to S3:\n\n    ```sh\n    ./prowler -M csv -B my-bucket/folder/\n    ```\n    >In the case you do not want to use the assumed role credentials but the initial credentials to put the reports into the S3 bucket, use `-D` instead of `-B`. Make sure that the used credentials have s3:PutObject permissions in the S3 path where the reports are going to be uploaded.\n\n    When generating multiple formats and running using Docker, to retrieve the reports, bind a local directory to the container, e.g.:\n\n    ```sh\n    docker run -ti --rm --name prowler --volume \"$(pwd)\":/prowler/output --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY --env AWS_SESSION_TOKEN toniblyx/prowler:latest -M csv,json\n    ```\n\n1. To perform an assessment based on CIS Profile Definitions you can use cislevel1 or cislevel2 with `-g` flag, more information about this [here, page 8](https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf):\n\n    ```sh\n    ./prowler -g cislevel1\n    ```\n\n1. If you want to run Prowler to check multiple AWS accounts in parallel (runs up to 4 simultaneously `-P 4`) but you may want to read below in Advanced Usage section to do so assuming a role:\n\n    ```sh\n    grep -E '^\\[([0-9A-Aa-z_-]+)\\]'  ~/.aws/credentials | tr -d '][' | shuf |  \\\n    xargs -n 1 -L 1 -I @ -r -P 4 ./prowler -p @ -M csv  2> /dev/null  >> all-accounts.csv\n    ```\n\n1. For help about usage run:\n\n    ```\n    ./prowler -h\n    ```\n\n## Advanced Usage\n\n### Assume Role:\n\nProwler uses the AWS CLI underneath so it uses the same authentication methods. However, there are few ways to run Prowler against multiple accounts using IAM Assume Role feature depending on eachg use case. You can just set up your custom profile inside `~/.aws/config` with all needed information about the role to assume then call it with `./prowler -p your-custom-profile`. Additionally you can use `-A 123456789012` and `-R RemoteRoleToAssume` and Prowler will get those temporary credentials using `aws sts assume-role`, set them up as environment variables and run against that given account. To create a role to assume in multiple accounts easier eather as CFN Stack or StackSet, look at [this CloudFormation template](iam/create_role_to_assume_cfn.yaml) and adapt it.\n\n```sh\n./prowler -A 123456789012 -R ProwlerRole\n```\n\n```sh\n./prowler -A 123456789012 -R ProwlerRole -I 123456\n```\n\n> *NOTE 1 about Session Duration*: By default it gets credentials valid for 1 hour (3600 seconds). Depending on the mount of checks you run and the size of your infrastructure, Prowler may require more than 1 hour to finish. Use option `-T <seconds>`  to allow up to 12h (43200 seconds). To allow more than 1h you need to modify *\"Maximum CLI/API session duration\"* for that particular role, read more [here](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session).\n\n> *NOTE 2 about Session Duration*: Bear in mind that if you are using roles assumed by role chaining there is a hard limit of 1 hour so consider not using role chaining if possible, read more about that, in foot note 1 below the table [here](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html).\n\nFor example, if you want to get only the fails in CSV format from all checks regarding RDS without banner from the AWS Account 123456789012 assuming the role RemoteRoleToAssume and set a fixed session duration of 1h:\n\n```sh\n./prowler -A 123456789012 -R RemoteRoleToAssume -T 3600 -b -M cvs -q -g rds\n```\nor with a given External ID:\n```sh\n./prowler -A 123456789012 -R RemoteRoleToAssume -T 3600 -I 123456 -b -M cvs -q -g rds\n```\n\n### Assume Role and across all accounts in AWS Organizations or just a list of accounts:\n\nIf you want to run Prowler or just a check or a group across all accounts of AWS Organizations you can do this:\n\nFirst get a list of accounts that are not suspended:\n```\nACCOUNTS_IN_ORGS=$(aws organizations list-accounts --query Accounts[?Status==`ACTIVE`].Id --output text)\n```\nThen run Prowler to assume a role (same in all members) per each account, in this example it is just running one particular check:\n```\nfor accountId in $ACCOUNTS_IN_ORGS; do ./prowler -A $accountId -R RemoteRoleToAssume -c extra79; done\n```\nUsing the same for loop it can be scanned a list of accounts with a variable like `ACCOUNTS_LIST='11111111111 2222222222 333333333'`\n\n### Get AWS Account details from your AWS Organization:\n\nFrom Prowler v2.8, you can get additional information of the scanned account in CSV and JSON outputs. When scanning a single account you get the Account ID as part of the output. Now, if you have AWS Organizations and are scanning multiple accounts using the assume role functionality, Prowler can get your account details like Account Name, Email, ARN, Organization ID and Tags and you will have them next to every finding in the CSV and JSON outputs.\nIn order to do that you can use the new option `-O <management account id>`, requires `-R <role to assume>` and also needs permissions `organizations:ListAccounts*` and `organizations:ListTagsForResource`. See the following sample command:\n```\n./prowler -R ProwlerScanRole -A 111111111111 -O 222222222222 -M json,csv\n```\nIn that command Prowler will scan the account `111111111111` assuming the role `ProwlerScanRole` and getting the account details from the AWS Organizatiosn management account `222222222222` assuming the same role `ProwlerScanRole` for that and creating two reports with those details in JSON and CSV.\n\nIn the JSON output below (redacted) you can see tags coded in base64 to prevent breaking CSV or JSON due to its format:\n\n```json\n  \"Account Email\": \"my-prod-account@domain.com\",\n  \"Account Name\": \"my-prod-account\",\n  \"Account ARN\": \"arn:aws:organizations::222222222222:account/o-abcde1234/111111111111\",\n  \"Account Organization\": \"o-abcde1234\",\n  \"Account tags\": \"\\\"eyJUYWdzIjpasf0=\\\"\"\n```\nThe additional fields in CSV header output are as follow:\n\n```csv\nACCOUNT_DETAILS_EMAIL,ACCOUNT_DETAILS_NAME,ACCOUNT_DETAILS_ARN,ACCOUNT_DETAILS_ORG,ACCOUNT_DETAILS_TAGS\n```\n\n### GovCloud\n\nProwler runs in GovCloud regions as well. To make sure it points to the right API endpoint use `-r` to either `us-gov-west-1` or `us-gov-east-1`. If not filter region is used it will look for resources in both GovCloud regions by default:\n```sh\n./prowler -r us-gov-west-1\n```\n> For Security Hub integration see below in Security Hub section.\n\n### Custom folder for custom checks\n\nFlag `-x /my/own/checks` will include any check in that particular directory (files must start by check). To see how to write checks see [Add Custom Checks](#add-custom-checks) section.\n\nS3 URIs are also supported as custom folders for custom checks, e.g. `s3://bucket/prefix/checks`. Prowler will download the folder locally and run the checks as they are called with default execution,`-c` or `-g`.\n>Make sure that the used credentials have s3:GetObject permissions in the S3 path where the custom checks are located.\n\n### Show or log only FAILs\n\nIn order to remove noise and get only FAIL findings there is a `-q` flag that makes Prowler to show and log only FAILs.\nIt can be combined with any other option.\nWill show WARNINGS when a resource is excluded, just to take into consideration.\n\n```sh\n# -q option combined with -M csv -b\n./prowler -q -M csv -b\n```\n\n### Set the entropy limit for detect-secrets\n\nSets the entropy limit for high entropy base64 strings from environment variable `BASE64_LIMIT`. Value must be between 0.0 and 8.0, defaults is 4.5.\nSets the entropy limit for high entropy hex strings from environment variable `HEX_LIMIT`. Value must be between 0.0 and 8.0, defaults is 3.0.\n\n```sh\nexport BASE64_LIMIT=4.5\nexport HEX_LIMIT=3.0\n```\n### Run Prowler using AWS CloudShell\n\nAn easy way to run Prowler to scan your account is using AWS CloudShell. Read more and learn how to do it [here](util/cloudshell/README.md).\n\n## Security Hub integration\n\nSince October 30th 2020 (version v2.3RC5), Prowler supports natively and as **official integration** sending findings to [AWS Security Hub](https://aws.amazon.com/security-hub). This integration allows Prowler to import its findings to AWS Security Hub. With Security Hub, you now have a single place that aggregates, organizes, and prioritizes your security alerts, or findings, from multiple AWS services, such as Amazon GuardDuty, Amazon Inspector, Amazon Macie, AWS Identity and Access Management (IAM) Access Analyzer, and AWS Firewall Manager, as well as from AWS Partner solutions and from Prowler for free.\n\nBefore sending findings to Prowler, you need to perform next steps:\n1. Since Security Hub is a region based service, enable it in the region or regions you require. Use the AWS Management Console or using the AWS CLI with this command if you have enough permissions:\n    - `aws securityhub enable-security-hub --region <region>`.\n2. Enable Prowler as partner integration integration. Use the AWS Management Console or using the AWS CLI with this command if you have enough permissions:\n    - `aws securityhub enable-import-findings-for-product --region <region> --product-arn arn:aws:securityhub:<region>::product/prowler/prowler` (change region also inside the ARN).\n    - Using the AWS Management Console:\n    ![Screenshot 2020-10-29 at 10 26 02 PM](https://user-images.githubusercontent.com/3985464/97634660-5ade3400-1a36-11eb-9a92-4a45cc98c158.png)\n3. As mentioned in section \"Custom IAM Policy\", to allow Prowler to import its findings to AWS Security Hub you need to add the policy below to the role or user running Prowler:\n    - [iam/prowler-security-hub.json](iam/prowler-security-hub.json)\n\nOnce it is enabled, it is as simple as running the command below (for all regions):\n\n```sh\n./prowler -M json-asff -S\n```\nor for only one filtered region like eu-west-1:\n```sh\n./prowler -M json-asff -q -S -f eu-west-1\n```\n> Note 1: It is recommended to send only fails to Security Hub and that is possible adding `-q` to the command.\n\n> Note 2: Since Prowler perform checks to all regions by defaults you may need to filter by region when runing Security Hub integration, as shown in the example above. Remember to enable Security Hub in the region or regions you need by calling `aws securityhub enable-security-hub --region <region>` and run Prowler with the option `-f <region>` (if no region is used it will try to push findings in all regions hubs).\n\n> Note 3: to have updated findings in Security Hub you have to run Prowler periodically. Once a day or every certain amount of hours.\n\nOnce you run findings for first time you will be able to see Prowler findings in Findings section:\n\n![Screenshot 2020-10-29 at 10 29 05 PM](https://user-images.githubusercontent.com/3985464/97634676-66c9f600-1a36-11eb-9341-70feb06f6331.png)\n\n### Security Hub in GovCloud regions\n\nTo use Prowler and Security Hub integration in GovCloud there is an additional requirement, usage of `-r` is needed to point the API queries to the right API endpoint. Here is a sample command that sends only failed findings to Security Hub in region `us-gov-west-1`:\n```\n./prowler -r us-gov-west-1 -f us-gov-west-1 -S -M csv,json-asff -q\n```\n\n### Security Hub in China regions\n\nTo use Prowler and Security Hub integration in China regions there is an additional requirement, usage of `-r` is needed to point the API queries to the right API endpoint. Here is a sample command that sends only failed findings to Security Hub in region `cn-north-1`:\n```\n./prowler -r cn-north-1 -f cn-north-1 -q -S -M csv,json-asff\n```\n\n## CodeBuild deployment\n\nEither to run Prowler once or based on a schedule this template makes it pretty straight forward. This template will create a CodeBuild environment and run Prowler directly leaving all reports in a bucket and creating a report also inside CodeBuild basedon the JUnit output from Prowler. Scheduling can be cron based like `cron(0 22 * * ? *)` or rate based like `rate(5 hours)` since CloudWatch Event rules (or Eventbridge) is used here.\n\nThe Cloud Formation template that helps you doing that is [here](https://github.com/prowler-cloud/prowler/blob/master/util/codebuild/codebuild-prowler-audit-account-cfn.yaml).\n\n> This is a simple solution to monitor one account. For multiples accounts see [Multi Account and Continuous Monitoring](util/org-multi-account/README.md).\n\n## Allowlist or remove a fail from resources\n\nSometimes you may find resources that are intentionally configured in a certain way that may be a bad practice but it is all right with it, for example an S3 bucket open to the internet hosting a web site, or a security group with an open port needed in your use case. Now you can use `-w allowlist_sample.txt` and add your resources as `checkID:resourcename` as in this command:\n\n```\n./prowler -w allowlist_sample.txt\n```\n\nS3 URIs are also supported as allowlist file, e.g. `s3://bucket/prefix/allowlist_sample.txt`\n>Make sure that the used credentials have s3:GetObject permissions in the S3 path where the allowlist file is located.\n\nDynamoDB table ARNs are also supported as allowlist file, e.g. `arn:aws:dynamodb:us-east-1:111111222222:table/allowlist`\n>Make sure that the table has `account_id` as partition key and `rule` as sort key, and that the used credentials have `dynamodb:PartiQLSelect` permissions in the table.\n><p align=\"left\"><img src=\"https://user-images.githubusercontent.com/38561120/165769502-296f9075-7cc8-445e-8158-4b21804bfe7e.png\" alt=\"image\" width=\"397\" height=\"252\" /></p>\n\n>The field `account_id` can contains either an account ID or an `*` (which applies to all the accounts that use this table as a whitelist). As in the traditional allowlist file, the `rule` field must contain `checkID:resourcename` pattern.\n><p><img src=\"https://user-images.githubusercontent.com/38561120/165770610-ed5c2764-7538-44c2-9195-bcfdecc4ef9b.png\" alt=\"image\" width=\"394\" /></p>\n\n\n\nAllowlist option works along with other options and adds a `WARNING` instead of `INFO`, `PASS` or `FAIL` to any output format except for `json-asff`.\n\n## How to fix every FAIL\n\nCheck your report and fix the issues following all specific guidelines per check in <https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf>\n\n## Troubleshooting\n\n### STS expired token\n\nIf you are using an STS token for AWS-CLI and your session is expired you probably get this error:\n\n```sh\nA client error (ExpiredToken) occurred when calling the GenerateCredentialReport operation: The security token included in the request is expired\n```\n\nTo fix it, please renew your token by authenticating again to the AWS API, see next section below if you use MFA.\n\n### Run Prowler with MFA protected credentials\n\nTo run Prowler using a profile that requires MFA you just need to get the session token before hand. Just make sure you use this command:\n\n```sh\naws --profile <YOUR_AWS_PROFILE> sts get-session-token --duration 129600 --serial-number <ARN_OF_MFA> --token-code <MFA_TOKEN_CODE> --output text\n```\n\nOnce you get your token you can export it as environment variable:\n\n```sh\nexport AWS_PROFILE=YOUR_AWS_PROFILE\nexport AWS_SESSION_TOKEN=YOUR_NEW_TOKEN\nAWS_SECRET_ACCESS_KEY=YOUR_SECRET\nexport AWS_ACCESS_KEY_ID=YOUR_KEY\n```\n\nor set manually up your `~/.aws/credentials` file properly.\n\nThere are some helpfull tools to save time in this process like [aws-mfa-script](https://github.com/asagage/aws-mfa-script) or [aws-cli-mfa](https://github.com/sweharris/aws-cli-mfa).\n\n### AWS Managed IAM Policies\n\n[ViewOnlyAccess](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_view-only-user)\n- Use case: This user can view a list of AWS resources and basic metadata in the account across all services. The user cannot read resource content or metadata that goes beyond the quota and list information for resources.\n- Policy description: This policy grants List*, Describe*, Get*, View*, and Lookup* access to resources for most AWS services. To see what actions this policy includes for each service, see [ViewOnlyAccess Permissions](https://console.aws.amazon.com/iam/home#policies/arn:aws:iam::aws:policy/job-function/ViewOnlyAccess)\n\n[SecurityAudit](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_security-auditor)\n- Use case: This user monitors accounts for compliance with security requirements. This user can access logs and events to investigate potential security breaches or potential malicious activity.\n- Policy description: This policy grants permissions to view configuration data for many AWS services and to review their logs. To see what actions this policy includes for each service, see [SecurityAudit Permissions](https://console.aws.amazon.com/iam/home#policies/arn:aws:iam::aws:policy/SecurityAudit)\n\n### Custom IAM Policy\n\n[Prowler-Additions-Policy](iam/prowler-additions-policy.json)\n\nSome new and specific checks require Prowler to inherit more permissions than SecurityAudit and ViewOnlyAccess to work properly. In addition to the AWS managed policies, \"SecurityAudit\" and \"ViewOnlyAccess\", the user/role you use for checks may need to be granted a custom policy with a few more read-only permissions (to support additional services mostly). Here is an example policy with the additional rights, \"Prowler-Additions-Policy\" (see below bootstrap script for set it up):\n\n- [iam/prowler-additions-policy.json](iam/prowler-additions-policy.json)\n\n[Prowler-Security-Hub Policy](iam/prowler-security-hub.json)\n\nAllows Prowler to import its findings to [AWS Security Hub](https://aws.amazon.com/security-hub). More information in [Security Hub integration](#security-hub-integration):\n\n- [iam/prowler-security-hub.json](iam/prowler-security-hub.json)\n\n### Bootstrap Script\n\nQuick bash script to set up a \"prowler\" IAM user with \"SecurityAudit\" and \"ViewOnlyAccess\" group with the required permissions (including \"Prowler-Additions-Policy\"). To run the script below, you need user with administrative permissions; set the `AWS_DEFAULT_PROFILE` to use that account:\n\n```sh\nexport AWS_DEFAULT_PROFILE=default\nexport ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' | tr -d '\"')\naws iam create-group --group-name Prowler\naws iam create-policy --policy-name Prowler-Additions-Policy --policy-document file://$(pwd)/iam/prowler-additions-policy.json\naws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::aws:policy/SecurityAudit\naws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::aws:policy/job-function/ViewOnlyAccess\naws iam attach-group-policy --group-name Prowler --policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/Prowler-Additions-Policy\naws iam create-user --user-name prowler\naws iam add-user-to-group --user-name prowler --group-name Prowler\naws iam create-access-key --user-name prowler\nunset ACCOUNT_ID AWS_DEFAULT_PROFILE\n```\n\nThe `aws iam create-access-key` command will output the secret access key and the key id; keep these somewhere safe, and add them to `~/.aws/credentials` with an appropriate profile name to use them with Prowler. This is the only time they secret key will be shown.  If you lose it, you will need to generate a replacement.\n\n> [This CloudFormation template](iam/create_role_to_assume_cfn.yaml) may also help you on that task.\n\n## Extras\n\nWe are adding additional checks to improve the information gather from each account, these checks are out of the scope of the CIS benchmark for AWS, but we consider them very helpful to get to know each AWS account set up and find issues on it.\n\nSome of these checks look for publicly facing resources may not actually be fully public due to other layered controls like S3 Bucket Policies, Security Groups or Network ACLs.\n\nTo list all existing checks in the extras group run the command below:\n\n```sh\n./prowler -l -g extras\n```\n\n>There are some checks not included in that list, they are experimental or checks that takes long to run like `extra759` and `extra760` (search for secrets in Lambda function variables and code).\n\nTo check all extras in one command:\n\n```sh\n./prowler -g extras\n```\n\nor to run just one of the checks:\n\n```sh\n./prowler -c extraNUMBER\n```\n\nor to run multiple extras in one go:\n\n```sh\n./prowler -c extraNumber,extraNumber\n```\n\n\n## Forensics Ready Checks\n\nWith this group of checks, Prowler looks if each service with logging or audit capabilities has them enabled to ensure all needed evidences are recorded and collected for an eventual digital forensic investigation in case of incident. List of checks part of this group (you can also see all groups with `./prowler -L`). The list of checks can be seen in the group file at:\n\n[groups/group8_forensics](groups/group8_forensics)\n\nThe `forensics-ready` group of checks uses existing and extra checks. To get a forensics readiness report, run this command:\n\n```sh\n./prowler -g forensics-ready\n```\n\n## GDPR Checks\n\nWith this group of checks, Prowler shows result of checks related to GDPR, more information [here](https://github.com/prowler-cloud/prowler/issues/189). The list of checks can be seen in the group file at:\n\n[groups/group9_gdpr](groups/group9_gdpr)\n\nThe `gdpr` group of checks uses existing and extra checks. To get a GDPR report, run this command:\n\n```sh\n./prowler -g gdpr\n```\n\n## AWS FTR Checks\n\nWith this group of checks, Prowler shows result of checks related to the AWS Foundational Technical Review, more information [here](https://apn-checklists.s3.amazonaws.com/foundational/partner-hosted/partner-hosted/CVLHEC5X7.html). The list of checks can be seen in the group file at:\n\n[groups/group25_ftr](groups/group25_FTR)\n\nThe `ftr` group of checks uses existing and extra checks. To get a AWS FTR report, run this command:\n\n```sh\n./prowler -g ftr\n```\n\n## HIPAA Checks\n\nWith this group of checks, Prowler shows results of controls related to the \"Security Rule\" of the Health Insurance Portability and Accountability Act aka [HIPAA](https://www.hhs.gov/hipaa/for-professionals/security/index.html) as defined in [45 CFR Subpart C - Security Standards for the Protection of Electronic Protected Health Information](https://www.law.cornell.edu/cfr/text/45/part-164/subpart-C) within [PART 160 - GENERAL ADMINISTRATIVE REQUIREMENTS](https://www.law.cornell.edu/cfr/text/45/part-160) and [Subpart A](https://www.law.cornell.edu/cfr/text/45/part-164/subpart-A) and [Subpart C](https://www.law.cornell.edu/cfr/text/45/part-164/subpart-C) of PART 164 - SECURITY AND PRIVACY\n\nMore information on the original PR is [here](https://github.com/prowler-cloud/prowler/issues/227).\n\n### Note on Business Associate Addendum's (BAA)\n\nUnder the HIPAA regulations, cloud service providers (CSPs) such as AWS are considered business associates. The Business Associate Addendum (BAA) is an AWS contract that is required under HIPAA rules to ensure that AWS appropriately safeguards protected health information (PHI). The BAA also serves to clarify and limit, as appropriate, the permissible uses and disclosures of PHI by AWS, based on the relationship between AWS and our customers, and the activities or services being performed by AWS. Customers may use any AWS service in an account designated as a HIPAA account, but they should only process, store, and transmit protected health information (PHI) in the HIPAA-eligible services defined in the Business Associate Addendum (BAA). For the latest list of HIPAA-eligible AWS services, see [HIPAA Eligible Services Reference](https://aws.amazon.com/compliance/hipaa-eligible-services-reference/).\n\nMore information on AWS & HIPAA can be found [here](https://aws.amazon.com/compliance/hipaa-compliance/)\n\nThe list of checks showed by this group is as follows, they will be mostly relevant for Subsections [164.306 Security standards: General rules](https://www.law.cornell.edu/cfr/text/45/164.306) and [164.312 Technical safeguards](https://www.law.cornell.edu/cfr/text/45/164.312). Prowler is only able to make checks in the spirit of the technical requirements outlined in these Subsections, and cannot cover all procedural controls required. They be found in the group file at:\n\n[groups/group10_hipaa](groups/group10_hipaa)\n\nThe `hipaa` group of checks uses existing and extra checks. To get a HIPAA report, run this command:\n\n```sh\n./prowler -g hipaa\n```\n\n## Trust Boundaries Checks\n\n### Definition and Terms\n\nThe term \"trust boundary\" is originating from the threat modelling process and the most popular contributor Adam Shostack and author of \"Threat Modeling: Designing for Security\" defines it as following ([reference](https://adam.shostack.org/uncover.html)):\n\n> Trust boundaries are perhaps the most subjective of all: these represent the border between trusted and untrusted elements. Trust is complex. You might trust your mechanic with your car, your dentist with your teeth, and your banker with your money, but you probably don't trust your dentist to change your spark plugs.\n\nAWS is made to be flexible for service links within and between different AWS accounts, we all know that.\n\nThis group of checks helps to analyse a particular AWS account (subject) on existing links to other AWS accounts across various AWS services, in order to identify untrusted links.\n\n### Run\nTo give it a quick shot just call:\n\n```sh\n./prowler -g trustboundaries\n```\n\n### Scenarios\n\nCurrently, this check group supports two different scenarios:\n\n1. Single account environment: no action required, the configuration is happening automatically for you.\n2. Multi account environment: in case you environment has multiple trusted and known AWS accounts you maybe want to append them manually to [groups/group16_trustboundaries](groups/group16_trustboundaries) as a space separated list into `GROUP_TRUSTBOUNDARIES_TRUSTED_ACCOUNT_IDS` variable, then just run prowler.\n\n### Coverage\n\nCurrent coverage of Amazon Web Service (AWS) taken from [here](https://docs.aws.amazon.com/whitepapers/latest/aws-overview/introduction.html):\n| Topic                           | Service    | Trust Boundary                                                            |\n|---------------------------------|------------|---------------------------------------------------------------------------|\n| Networking and Content Delivery | Amazon VPC | VPC endpoints connections ([extra786](checks/check_extra786))             |\n|                                 |            | VPC endpoints allowlisted principals ([extra787](checks/check_extra787))  |\n\nAll ideas or recommendations to extend this group are very welcome [here](https://github.com/prowler-cloud/prowler/issues/new/choose).\n\n### Detailed Explanation of the Concept\n\nThe diagrams depict two common scenarios, single account and multi account environments.\nEvery circle represents one AWS account.\nThe dashed line represents the trust boundary, that separates trust and untrusted AWS accounts.\nThe arrow simply describes the direction of the trust, however the data can potentially flow in both directions.\n\nSingle Account environment assumes that only the AWS account subject to this analysis is trusted. However, there is a chance that two VPCs are existing within that one AWS account which are still trusted as a self reference.\n![single-account-environment](/docs/images/prowler-single-account-environment.png)\n\nMulti Account environments assumes a minimum of two trusted or known accounts. For this particular example all trusted and known accounts will be tested. Therefore `GROUP_TRUSTBOUNDARIES_TRUSTED_ACCOUNT_IDS` variable in [groups/group16_trustboundaries](groups/group16_trustboundaries) should include all trusted accounts Account #A, Account #B, Account #C, and Account #D in order to finally raise Account #E and Account #F for being untrusted or unknown.\n![multi-account-environment](/docs/images/prowler-multi-account-environment.png)\n\n## Custom Checks\nUsing  `./prowler -c extra9999 -a` you can build your own on-the-fly custom check by specifying the AWS CLI command to execute.\n> Omit the \"aws\" command and only use its parameters within quotes and do not nest quotes in the aws parameter, --output text is already included in the check.\n>\nHere is an example of a check to find SGs with inbound port 80:\n\n```sh\n./prowler -c extra9999 -a 'ec2 describe-security-groups --filters Name=ip-permission.to-port,Values=80 --query SecurityGroups[*].GroupId[]]'\n```\n\nIn order to add any new check feel free to create a new extra check in the extras group or other group. To do so, you will need to follow these steps:\n\n1. Follow structure in file `checks/check_sample`\n2. Name your check with a number part of an existing group or a new one\n3. Save changes and run it as `./prowler -c extraNN`\n4. Send me a pull request! :)\n\n## Add Custom Groups\n\n1. Follow structure in file `groups/groupN_sample`\n1. Name your group with a non existing number\n1. Save changes and run it as `./prowler -g extraNN`\n1. Send me a pull request! :)\n\n- You can also create a group with only the checks that you want to perform in your company, for instance a group named `group9_mycompany` with only the list of checks that you care or your particular compliance applies.\n\n## Third Party Integrations\n\n### Telegram\n\nJavier Pecete has done an awesome job integrating Prowler with Telegram, you have more details here <https://github.com/i4specete/ServerTelegramBot>\n\n### Cloud Security Suite\n\nThe guys of SecurityFTW have added Prowler in their Cloud Security Suite along with other cool security tools <https://github.com/SecurityFTW/cs-suite>\n\n## License\n\nProwler is licensed as Apache License 2.0 as specified in each file. You may obtain a copy of the License at\n<http://www.apache.org/licenses/LICENSE-2.0>\n\n**I'm not related anyhow with CIS organization, I just write and maintain Prowler to help companies over the world to make their cloud infrastructure more secure.**\n\nIf you want to contact me visit <https://blyx.com/contact> or follow me on Twitter <https://twitter.com/prowler-cloud> my DMs are open.\n\n\n## Prowler 3.0\n### Project Structure\n```\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 check\n\u2502   \u2514\u2500\u2500 check.py\n\u251c\u2500\u2500 poc.py\n\u2514\u2500\u2500 providers\n    \u2514\u2500\u2500 aws\n        \u251c\u2500\u2500 aws_provider.py\n        \u2514\u2500\u2500 services\n            \u2514\u2500\u2500 iam\n                \u251c\u2500\u2500 iam_disable_30_days_credentials\n                \u2502   \u251c\u2500\u2500 iam_disable_30_days_credentials.metadata.json\n                \u2502   \u2514\u2500\u2500 iam_disable_30_days_credentials.py\n                \u2514\u2500\u2500 iam_service.py\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "Sergio Garcia <sergio@verica.io>, Nacho Rivera <nacho@verica.io>, Pepe Fagoaga <pepe@verica.io>",
            "name": "prowler-cloud",
            "package_url": "https://pypi.org/project/prowler-cloud/",
            "platform": null,
            "project_url": "https://pypi.org/project/prowler-cloud/",
            "project_urls": {
                "Changelog": "https://github.com/prowler-cloud/prowler/releases",
                "Documentation": "https://github.com/prowler-cloud/prowler/blob/master/README.md",
                "Homepage": "https://github.com/prowler-cloud/prowler",
                "Issue tracker": "https://github.com/prowler-cloud/prowler/issues"
            },
            "release_url": "https://pypi.org/project/prowler-cloud/0.0.0rc1/",
            "requires_dist": [
                "azure-mgmt-storage (~=21.0.0)",
                "colorama (~=0.4.4)",
                "boto3 (~=1.26.17)",
                "arnparse (~=0.0.2)",
                "botocore (~=1.29.18)",
                "pydantic (~=1.9.1)",
                "shodan (~=1.28.0)",
                "detect-secrets (~=1.4.0)",
                "alive-progress (~=2.4.1)",
                "tabulate (~=0.9.0)",
                "azure-identity (~=1.12.0)",
                "azure-storage-blob (~=12.14.1)",
                "msgraph-core (~=0.2.2)",
                "azure-mgmt-subscription (~=3.1.1)",
                "azure-mgmt-authorization (~=3.0.0)",
                "azure-mgmt-security (~=3.0.0)"
            ],
            "requires_python": ">=3.9",
            "summary": "Prowler is an Open Source security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains more than 240 controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custom security frameworks.",
            "version": "0.0.0rc1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15956593,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2c91f204cfadc7023754653b5cd08885",
                    "sha256": "aa099f44c1ae38a2885e809d887227f4647b6f903ef5e5f151187f3ae7b326c5"
                },
                "downloads": -1,
                "filename": "prowler_cloud-0.0.0rc1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2c91f204cfadc7023754653b5cd08885",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 27202,
                "upload_time": "2022-12-01T15:21:14",
                "upload_time_iso_8601": "2022-12-01T15:21:14.364525Z",
                "url": "https://files.pythonhosted.org/packages/e8/f5/68b6eb47e0c1e36faea4540b5e147faff9bb82d49e6fa0eaf67d7017324d/prowler_cloud-0.0.0rc1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f8318e932bfc50135c5bc753ee2c022f",
                    "sha256": "6616ea88f7e6258c233bf6332e9b4c1d405c848db36f14c6e8814056a6c149f5"
                },
                "downloads": -1,
                "filename": "prowler-cloud-0.0.0rc1.tar.gz",
                "has_sig": false,
                "md5_digest": "f8318e932bfc50135c5bc753ee2c022f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55258,
                "upload_time": "2022-12-01T15:21:16",
                "upload_time_iso_8601": "2022-12-01T15:21:16.336499Z",
                "url": "https://files.pythonhosted.org/packages/a2/87/ad3df5e052adc0d8bae2d5f714d3d7b04ed8f7651d8fc6e074e50254d776/prowler-cloud-0.0.0rc1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}