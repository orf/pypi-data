{
    "0.0.1b0": {
        "info": {
            "author": "Digital Observatory",
            "author_email": "digitalobservatory@qut.edu.au",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUT-Digital-Observatory/youte",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "youte",
            "package_url": "https://pypi.org/project/youte/",
            "platform": null,
            "project_url": "https://pypi.org/project/youte/",
            "project_urls": {
                "Bug Tracker": "https://github.com/QUT-Digital-Observatory/youte/issues",
                "Homepage": "https://github.com/QUT-Digital-Observatory/youte"
            },
            "release_url": "https://pypi.org/project/youte/0.0.1b0/",
            "requires_dist": [
                "click (>=8.0.3)",
                "requests (>=2.27.1)",
                "tqdm (>=4.64.0)",
                "python-dateutil (>=2.8.2)",
                "configobj (>=5.0.6)"
            ],
            "requires_python": ">=3.8",
            "summary": "Command-line tool to collect video metadata and comments from Youtube API",
            "version": "0.0.1b0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15863871,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "96fdb52dcbf0df977520f4ee886a6572",
                    "sha256": "b1174b5c927a44d03fd568e1b2f362e52c4101e716b057befb89ddaedc3be073"
                },
                "downloads": -1,
                "filename": "youte-0.0.1b0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "96fdb52dcbf0df977520f4ee886a6572",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 19664,
                "upload_time": "2022-09-02T05:59:43",
                "upload_time_iso_8601": "2022-09-02T05:59:43.257012Z",
                "url": "https://files.pythonhosted.org/packages/50/e0/d3f516046d6daa3173d30715e9cba71c79ce7216bc1cc04d5ea070cefb69/youte-0.0.1b0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "88008603b4e145314e81fa88f287f91f",
                    "sha256": "5099d386284202eae568bc243779bc15665eedb1990895e6fe1c47ce5a99eb1f"
                },
                "downloads": -1,
                "filename": "youte-0.0.1b0.tar.gz",
                "has_sig": false,
                "md5_digest": "88008603b4e145314e81fa88f287f91f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 22280,
                "upload_time": "2022-09-02T05:59:46",
                "upload_time_iso_8601": "2022-09-02T05:59:46.286010Z",
                "url": "https://files.pythonhosted.org/packages/29/8e/8b6765b4ccdd5f36ddf4eff384e2fef4f06292d069763b1c1aa5f590cc03/youte-0.0.1b0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Digital Observatory",
            "author_email": "digitalobservatory@qut.edu.au",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUT-Digital-Observatory/youte",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "youte",
            "package_url": "https://pypi.org/project/youte/",
            "platform": null,
            "project_url": "https://pypi.org/project/youte/",
            "project_urls": {
                "Bug Tracker": "https://github.com/QUT-Digital-Observatory/youte/issues",
                "Homepage": "https://github.com/QUT-Digital-Observatory/youte"
            },
            "release_url": "https://pypi.org/project/youte/0.0.2/",
            "requires_dist": [
                "click (>=8.0.3)",
                "requests (>=2.27.1)",
                "tqdm (>=4.64.0)",
                "python-dateutil (>=2.8.2)",
                "configobj (>=5.0.6)"
            ],
            "requires_python": ">=3.8",
            "summary": "Command-line tool to collect video metadata and comments from Youtube API",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15863871,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b1a04871d62622baacf96124b63a27c",
                    "sha256": "d10607cfe85100f98cfe48a9afa083430209e25abc9ac22739419d25fd8f162b"
                },
                "downloads": -1,
                "filename": "youte-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8b1a04871d62622baacf96124b63a27c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 20379,
                "upload_time": "2022-09-06T23:09:29",
                "upload_time_iso_8601": "2022-09-06T23:09:29.520256Z",
                "url": "https://files.pythonhosted.org/packages/80/e0/0c6029457624ef546b57a93dd51d77f772fe5194e5166337bec2893f2754/youte-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "24d52da4d00eeb53cc0055dfcaeb6b7d",
                    "sha256": "dbab110827f1ba2a25e1edb48ed3c71ed3ac7becd9ad07906eb7c3fd24a99c04"
                },
                "downloads": -1,
                "filename": "youte-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "24d52da4d00eeb53cc0055dfcaeb6b7d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 23392,
                "upload_time": "2022-09-06T23:09:31",
                "upload_time_iso_8601": "2022-09-06T23:09:31.682149Z",
                "url": "https://files.pythonhosted.org/packages/e0/32/138f8bd3a1c5983542b9ac22610d8d12d4d5ea10e06801aab939fb3a8741/youte-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Digital Observatory",
            "author_email": "digitalobservatory@qut.edu.au",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUT-Digital-Observatory/youte",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "youte",
            "package_url": "https://pypi.org/project/youte/",
            "platform": null,
            "project_url": "https://pypi.org/project/youte/",
            "project_urls": {
                "Bug Tracker": "https://github.com/QUT-Digital-Observatory/youte/issues",
                "Homepage": "https://github.com/QUT-Digital-Observatory/youte"
            },
            "release_url": "https://pypi.org/project/youte/0.1.0/",
            "requires_dist": [
                "click (>=8.0.3)",
                "requests (>=2.27.1)",
                "tqdm (>=4.64.0)",
                "python-dateutil (>=2.8.2)",
                "configobj (>=5.0.6)"
            ],
            "requires_python": ">=3.8",
            "summary": "Command-line tool to collect video metadata and comments from Youtube API",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15863871,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "39bb38d79d455bb95af5867d3fe79f48",
                    "sha256": "c7240697852f97639e87c8b7d483d42c674de16991cbd12d9113aa441360203a"
                },
                "downloads": -1,
                "filename": "youte-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "39bb38d79d455bb95af5867d3fe79f48",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 20648,
                "upload_time": "2022-09-21T06:02:49",
                "upload_time_iso_8601": "2022-09-21T06:02:49.739582Z",
                "url": "https://files.pythonhosted.org/packages/83/e1/141c73dfd4f28087d459a92b17499b6e415a99101b06a6bc1e0f52df5db7/youte-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a6758cb113286b15e19337313c09ffea",
                    "sha256": "82afc026b73e1dc543f788d78ab4c7e83c9d4cd0bdfa58ef47b938fd7ec73b52"
                },
                "downloads": -1,
                "filename": "youte-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a6758cb113286b15e19337313c09ffea",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 23879,
                "upload_time": "2022-09-21T06:02:52",
                "upload_time_iso_8601": "2022-09-21T06:02:52.157350Z",
                "url": "https://files.pythonhosted.org/packages/30/aa/0ef2566ff6f34ec87263cc59667d2a68daccadccb9c4661fb70df28f6269/youte-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0": {
        "info": {
            "author": "Digital Observatory",
            "author_email": "digitalobservatory@qut.edu.au",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Programming Language :: Python :: 3.8"
            ],
            "description": "# youte  \n\nA command line utility to get YouTube video metadata and comments from YouTube Data API.\n\n## Installation\n\n```shell\npython -m pip install youte\n```  \n\n## YouTube API key  \n\nTo get data from YouTube API, you will need a YouTube API key. Follow YouTube [instructions](https://developers.google.com/youtube/v3/getting-started) to obtain a YouTube API key if you do not already have one.\n\n## Configure API key (recommended)\n\nYou can save your API key in the youte config file for reuse. To do so, run:\n\n```shell  \nyoute config add-key\n```  \n\nThe interactive prompt will ask you to input your API key and name it. The name is used to identify the key, and can be anything you choose.\n\nThe prompt will also ask if you want to set the given key as default.\n\nWhen running queries, if no API key or name is specified, `youte` will automatically use the default key.\n\n### Manually set a key as default  \n\nIf you want to manually set an existing key as a default, run:  \n\n```shell  \nyoute config set-default <name-of-existing-key>\n```\n\nNote that what is passed to this command is the _name_ of the API key, not the API key itself. It follows that the API key has to be first added to the config file using `youte config add-key`. If you use a name that has not been added to the config file, an error will be raised.\n\n#### See the list of all keys  \n\nTo see the list of all keys, run:  \n\n```shell  \nyoute config list-keys\n```  \n\nThe default key, if there is one, will have an asterisk next to it.\n\n#### Remove a key\n\nTo remove a stored key, run:\n\n```shell\nyoute config remove <name-of-key>\n```\n\n#### About the config file  \n\nyoute's config file is stored in a central place whose exact location depends on the running operating system:  \n\n- Linux/Unix: ~/.config/youte/   \n- Mac OS X: ~/Library/Application Support/youte/\n- Windows: C:\\Users\\\\\\<user>\\\\AppData\\Roaming\\youte\n\n## Search  \n\n```commandline  \nUsage: youte search [OPTIONS] QUERY [OUTPUT]\n\n  Do a YouTube search.\n\n  QUERY: search query\n\n  OUTPUT: name of json file to store output data\n\nOptions:\n  --from TEXT                     Start date (YYYY-MM-DD)\n  --to TEXT                       End date (YYYY-MM-DD)\n  --type TEXT                     Type of resource to search for  [default:\n                                  video]\n  --name TEXT                     Specify an API name added to youte config\n  --key TEXT                      Specify a YouTube API key\n  --order [date|rating|relevance|title|videoCount|viewCount]\n                                  Sort results  [default: date]\n  --safe-search [none|moderate|strict]\n                                  Include or exclude restricted content\n                                  [default: none]\n  --video-duration [any|long|medium|short]\n                                  Include videos of a certain duration\n  --channel-type [any|show]       Restrict search to a particular type of\n                                  channel\n  --video-type [any|episode|movie]\n                                  Search a particular type of videos\n  --caption [any|closedCaption|none]\n                                  Filter videos based on if they have captions\n  --definition, --video-definition [any|high|standard]\n                                  Include videos by definition\n  --dimension, --video-dimension [any|2d|3d]\n                                  Search 2D or 3D videos\n  --embeddable, --video-embeddable [any|true]\n                                  Search only embeddable videos\n  --license, --video-license [any|creativeCommon|youtube]\n                                  Include videos with a certain license\n  --max-results INTEGER RANGE     Maximum number of results returned per page\n                                  [default: 50; 0<=x<=50]\n  --resume TEXT                   Resume progress from this file\n  --to-csv PATH                   Tidy data to CSV file\n  --help                          Show this message and exit.\n\n```  \n\n### Example  \n\n```commandline  \nyoute search 'study with me' --from 2022-08-01 --to 2022-08-07\n\nyoute search gaza --from 2022-07-25 --name user_2 --safe-search moderate --order=title gaza.json\n```\n\n### Arguments and options  \n\n#### `QUERY`  \n\nThe terms to search for. You can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that match one of several search terms. If the terms contain spaces, the entire QUERY value has to be wrapped in quotes.  \n\n```commandline  \nyoute search \"koala|australia zoo -kangaroo\"\n```  \n\nIf you are looking for exact phrases, the exact phrases can be wrapped in double quotes, then wrapped again in single quotes.  \n\n```commandline  \nyoute search '\"australia zoo\"' aussie_zoo.jsonl\n```  \n\n#### `OUTPUT` (optional)\n\nPath of the output file where raw JSON responses will be stored. Must have `.json` file endings (e.g., `.json` or `.jsonl`). If the output file already exists, `youte` will **_update_** the existing file, instead of overwriting it.\n\nIf no OUTPUT argument is passed, results will be printed to the terminal.\n\n#### `--from` (optional)  \n\nStart date limit for the search results returned - the results returned by the API should only contain videos created on or after this date (UTC time, which is the default time zone for the YouTube API). Has to be in ISO format (YYYY-MM-DD).\n\n#### `--to` (optional)  \n\nEnd date limit for the search results returned - the results returned by the API should only contain videos created on or before this date (UTC time, which is the default time zone for the YouTube API). Has to be in ISO format (YYYY-MM-DD).\n\n#### `--name` (optional)  \n\nName of the API key, if you don't want to use the default API key or if no default API key has been set.  \n\nThe API key name has to be added to the config file first using `youte config add-key`.  \n\n#### `--key` (optional)\n\nThe API key to use, if you want to use a key not configured with youte.\n\n#### `--type` (optional)\n\nType of Youtube resource to retrieve. Can be one type or a comma-separated list of acceptable types, which are `channel`, `playlist`, `video`.\n\n#### `--order` (optional)\n\nSpecify how results will be sorted.\n\n- `date`: Resources are sorted in reverse chronological order based on the date they were created (default value).\n- `rating`: Resources are sorted from highest to lowest rating.\n- `relevance`: Resources are sorted based on their relevance to the search query.\n- `title` \u2013 Resources are sorted alphabetically by title.\n- `videoCount` \u2013 Channels are sorted in descending order of their number of uploaded videos.\n- `viewCount` \u2013 Resources are sorted from highest to lowest number of views. For live broadcasts, videos are sorted by number of concurrent viewers while the broadcasts are ongoing.\n\n#### `--safe-search` (optional)\n\nSpecify whether restricted content is included or exclude.\n\n#### `--video-duration` (optional)\n\nInclude videos of a certain duration.\n\n#### `--channel-type` (optional)\n\nRestrict search to a particular type of channel. `--type` has to include `channel`.\n\n#### `--caption` (optional)\n\nRestrict search to videos with or without captions. `--type` has to include `video`.\n\n#### `--definition` (optional)\n\nRestrict search to videos with a certain definition. `--type` has to include `video`.\n\n#### `--dimension` (optional)\n\nRestrict search to 2D or 3D videos. `--type` has to include `video`.\n\n#### `--embeddable` (optional)\n\nOnly search for embeddable videos. `--type` has to include `video`.\n\n#### `--license` (optional)\n\nOnly include videos with a certain licence.\n\n#### `--max-results` (optional)\n\nMaximum number of results returned per page. The default value is 50.\n\n#### `--resume` (optional)\n\nResume progress from a progress file.\n\nSearching is very expensive in terms of API quota (100 units per search results page). Therefore, `youte` saves the progress of a search so that if you exit the program prematurely, you can choose to resume the search to avoid wasting valuable quota.\n\nWhen you exit the program in the middle of a search, a prompt will ask if you want to save progress. If yes, all search page tokens are stored to a database in the **.youte.history** folder inside your current directory. \n\nThe name of the progress file is printed on the terminal, as demonstrated below:\n\n```commandline\nDo you want to save your current progress? [y/N]: y\nProgress saved at /home/boyd/Documents/youte/.youte.history/search_1669178310.db\nTo resume progress, run the same youte search command and add `--resume search_1669178310`\n```\n\nTo resume progress of this query, run the same query again and add `--resume <NAME OF PROGRESS>`. \n\nYou can also run `youte list-history` to see the list of resumable progress files found in ***.youte.history*** folder inside your current directory.\n\n#### `--to-csv` (optional)  \n\nTidy results into a CSV file.\n\n## Hydrate a list of IDs\n\n`youte hydrate` takes a list of resource IDs, and get the full data associated with them.\n\n```commandline  \nUsage: youte hydrate [OPTIONS] [ITEMS]...\n\n  Hydrate YouTube resource IDs.\n\n  Get all metadata for a list of resource IDs. By default, the function hydrates video IDs.\n\n  All IDs passed in the command must be of one kind.\n\n  OUTPUT: name of JSON file to store output\n\n  ITEMS: ID(s) of item as provided by YouTube\n\nOptions:\n  -o, --output FILENAME\n  -f, --file-path TEXT            Get IDs from file\n  --kind [videos|channels|comments]\n                                  Sort results  [default: videos]\n  --name TEXT                     Specify an API name added to youte config\n  --key TEXT                      Specify a YouTube API key\n  --to-csv PATH                   Tidy data to CSV file\n  --help                          Show this message and exit.\n\n``` \n\n### Examples  \n\n```commandline\n# one video\nyoute hydrate _KrKdj50mPk\n\n# two video\nyoute hydrate _KrKdj50mPk hpwPciW74b8 --output videos.json\n\n# hydrate channel information and use IDs from a text file\nyoute hydrate -f channel_ids.txt --kind channel\n```\n\n### Arguments and options  \n\n#### `ITEMS`\n\nYouTube resource IDs. If there are multiple IDs, separate each one with a space.\n\nThe IDs should all belong to one type, i.e. either video, channel, or comment. For example, you cannot mix both video AND channel IDs in one command.\n\n#### `-f` or `--file-path`  \n\nIf you want to use IDs from a text file, specify this option with the path to the text file (e.g., `.csv` or `.txt`). The text file should contain a line-separated list of IDs. \n\nOne file should contain one type of IDs.\n\n#### `--kind` \n\nSpecify which kind of resources the IDs are. The default value is `videos`.\n\n## Get all comments of a video or all replies to a top-level comment thread  \n\n```commandline  \nUsage: youte get-comments [OPTIONS] [ITEMS]...\n\n  Get YouTube comments by video IDs or thread IDs.\n\n  OUTPUT: name of JSON file to store output\n\n  ITEMS: ID(s) of item as provided by YouTube\n\nOptions:\n  -o, --output FILENAME\n  -f, --file-path TEXT   Get IDs from file\n  -t, --by-thread        Get all replies to a parent comment\n  -v, --by-video         Get all comments for a video ID\n  --name TEXT            Specify an API name added to youte config\n  --key TEXT             Specify a YouTube API key\n  --to-csv PATH          Tidy data to CSV file\n  --help                 Show this message and exit.\n```  \n\n### Example  \n\n```  \n# get comments on a video\nyoute get-comments -v comments_for_videos.json WOoQOd33ZTY\n\n# get replies to a thread\nyoute get-comments -t replies.json UgxkjPsKbo2pUEAJju94AaABAg\n```  \n\n### Arguments and options  \n\n#### `ITEMS`\n\nVideo or comment thread IDs (unique identifiers provided by YouTube). If there are multiple IDs, separate each one with a space.\n\nThe IDs should all belong to one type, i.e. either video or comment thread. You cannot mix both video AND comment thread IDs in one command.\n\n#### `-f` or `--file-path`  \n\nIf you want to use IDs from a text file, specify this option with the path to the text file (e.g., `.csv` or `.txt`). The text file should contain a line-separated list of IDs.\n\nOne file should contain one type of IDs (i.e. either video or comment thread). You cannot add both video and comment thread IDs in the same file.\n\n#### `--by-thread`, `--by-video`  \n\n- Get all replies to a comment thread (`--by-thread`, `-t`)  \n- Get all comments on a video (`--by-video`, `-v`)  \n\nIf none of these flags are passed, the `get-comments` command works similarly to `hydrate` - getting full data for a list of comment IDs.\n\nOnly one flag can be used in one command.\n\n## Tidy JSON responses  \n\n```commandline  \nUsage: youte tidy [OPTIONS] FILEPATH OUTPUT\n\n  Tidy raw JSON response into relational SQLite databases\n\nOptions:\n  --help  Show this message and exit.\n```  \n\nThe `tidy` command will detect the type of resources in the JSON file (i.e. video, channel, search results, or comments) and process the data accordingly. It's important that each JSON file contains just **one** type of resource.  \n\n\n### Database schemas\n\n`youte tidy` processes JSON data into different schemas depending on the type of resource in the JSON file. Here are the schema names with their corresponding YouTube resources.\n\n| Resource                             | Schema         |\n|--------------------------------------|----------------|\n| Search results (from `youte search`) | search_results |\n| Videos                               | videos         |\n| Channels                             | channels       |\n| Comment threads (top-level comments) | comments       |\n| Replies to comment threads           | comments       |\n\n## Dehydrate\n\n```commandline  \nUsage: youte dehydrate [OPTIONS] INFILE\n\n  Extract an ID list from a file of YouTube resources\n\n  INFILE: JSON file of YouTube resources\n\nOptions:\n  -o, --output FILENAME  Output text file to store IDs in\n  --help                 Show this message and exit.\n```\n\n## YouTube API Quota system and youte handling of quota \n\nMost often, there is a limit to how many requests you can make to YouTube API per day. YouTube Data API uses a quota system, whereby each request costs a number of units depending on the endpoint the request is made to.\n\nFor example:  \n\n- search endpoint costs 100 units per request  \n- video, channel, commentThread, and comment endpoints each costs 1 unit per request  \n\nFree accounts get an API quota cap of 10,000 units per project per day, which resets at midnight Pacific Time.\n\nAt present, you can only check your quota usage on the [Quotas](https://console.developers.google.com/iam-admin/quotas?pli=1&project=google.com:api-project-314373636293&folder=&organizationId=) page in the API Console. It is not possible to monitor quota usage via metadata returned in the API response.   \n\n`youte` does not monitor quota usage. However, it handles errors when quota is exceeded by sleeping until quota reset time. \n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/QUT-Digital-Observatory/youte",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "youte",
            "package_url": "https://pypi.org/project/youte/",
            "platform": null,
            "project_url": "https://pypi.org/project/youte/",
            "project_urls": {
                "Bug Tracker": "https://github.com/QUT-Digital-Observatory/youte/issues",
                "Homepage": "https://github.com/QUT-Digital-Observatory/youte"
            },
            "release_url": "https://pypi.org/project/youte/1.0.0/",
            "requires_dist": [
                "click (>=8.0.3)",
                "requests (>=2.27.1)",
                "tqdm (>=4.64.0)",
                "python-dateutil (>=2.8.2)",
                "configobj (>=5.0.6)"
            ],
            "requires_python": ">=3.8",
            "summary": "Command-line tool to collect video metadata and comments from Youtube API",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15863871,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e6bb234bb6f72014cc58eb7e2dd9cfe2",
                    "sha256": "06039b7e41f14d03ad3ea8311ebb59ae4538ee0e8b11ca1a8042e876f46a036d"
                },
                "downloads": -1,
                "filename": "youte-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e6bb234bb6f72014cc58eb7e2dd9cfe2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 21578,
                "upload_time": "2022-11-23T07:28:01",
                "upload_time_iso_8601": "2022-11-23T07:28:01.019626Z",
                "url": "https://files.pythonhosted.org/packages/56/61/7d797737ac32bf8a1d6f158d71e117222322eed69f435f67bd66f685b539/youte-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "79e041df8ae8325f27daa972adaebd65",
                    "sha256": "14db94571be671a7230d8a764547d21f494e27dbc0d0080b67004597ed33f2ca"
                },
                "downloads": -1,
                "filename": "youte-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "79e041df8ae8325f27daa972adaebd65",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 27084,
                "upload_time": "2022-11-23T07:28:03",
                "upload_time_iso_8601": "2022-11-23T07:28:03.484878Z",
                "url": "https://files.pythonhosted.org/packages/52/79/c86867ab558603990e48edf15a82ffe03db17304024a512028face7283dc/youte-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}