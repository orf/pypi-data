{
    "0.0.10": {
        "info": {
            "author": "Welt Xing",
            "author_email": "xingcy@smail.nju.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kaslanarian/PyDyNet",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "Welt Xing",
            "maintainer_email": "xingcy@smail.nju.edu.cn",
            "name": "pydynet",
            "package_url": "https://pypi.org/project/pydynet/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydynet/",
            "project_urls": {
                "Homepage": "https://github.com/Kaslanarian/PyDyNet"
            },
            "release_url": "https://pypi.org/project/pydynet/0.0.10/",
            "requires_dist": [
                "numpy"
            ],
            "requires_python": "",
            "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
            "version": "0.0.10",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15499612,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "34d801f661a414a277b02a121d103d68",
                    "sha256": "c845704eaf77a537beefa695069ada161dc6dd58f0dac64979461baff3e147b2"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.10-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "34d801f661a414a277b02a121d103d68",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 32513,
                "upload_time": "2022-10-23T07:22:55",
                "upload_time_iso_8601": "2022-10-23T07:22:55.456266Z",
                "url": "https://files.pythonhosted.org/packages/32/70/2c7dcf6fdc71631c8038b6532578957ea1bc3925a688b1113015c8a8e051/pydynet-0.0.10-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5d6343d4d4edf4200a7684f9d8c3f572",
                    "sha256": "8d3663e572dc05799462ba5be61f8a65153c03d735291b42fcfbef7887758ec2"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.10.tar.gz",
                "has_sig": false,
                "md5_digest": "5d6343d4d4edf4200a7684f9d8c3f572",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 30895,
                "upload_time": "2022-10-23T07:22:57",
                "upload_time_iso_8601": "2022-10-23T07:22:57.384258Z",
                "url": "https://files.pythonhosted.org/packages/05/13/d320c2e9d01e801d3f5f549b48023fa540d2e27add9922ece28b82fad33d/pydynet-0.0.10.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4": {
        "info": {
            "author": "Welt Xing",
            "author_email": "xingcy@smail.nju.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kaslanarian/PyDyNet",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "Welt Xing",
            "maintainer_email": "xingcy@smail.nju.edu.cn",
            "name": "pydynet",
            "package_url": "https://pypi.org/project/pydynet/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydynet/",
            "project_urls": {
                "Homepage": "https://github.com/Kaslanarian/PyDyNet"
            },
            "release_url": "https://pypi.org/project/pydynet/0.0.4/",
            "requires_dist": [
                "numpy"
            ],
            "requires_python": "",
            "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15499612,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c5e7ef641bdb93fe2889a2fd3c5bea92",
                    "sha256": "842e08d11b3510fe2c8bfe625af6e371d60790bd7b7b281ab9244c2af8887cb6"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c5e7ef641bdb93fe2889a2fd3c5bea92",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 23349,
                "upload_time": "2022-07-22T04:31:17",
                "upload_time_iso_8601": "2022-07-22T04:31:17.088719Z",
                "url": "https://files.pythonhosted.org/packages/79/93/d9cddbc5e56e6d41bd7a3f08b6a82bbae716395c49a7a295aea7a18f5706/pydynet-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "dc7e6ac45757dd44f39acd7839737e04",
                    "sha256": "bf810be6181ecbf0afa2dcec9fbdf830a6aa80b0d99886344f5f8594710e9e3c"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "dc7e6ac45757dd44f39acd7839737e04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 22022,
                "upload_time": "2022-07-22T04:31:19",
                "upload_time_iso_8601": "2022-07-22T04:31:19.112893Z",
                "url": "https://files.pythonhosted.org/packages/f2/9b/5e392e04a93821c90cbf0ccdd9824e61fc9193c433aaf0f83377e89d978b/pydynet-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.6": {
        "info": {
            "author": "Welt Xing",
            "author_email": "xingcy@smail.nju.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kaslanarian/PyDyNet",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "Welt Xing",
            "maintainer_email": "xingcy@smail.nju.edu.cn",
            "name": "pydynet",
            "package_url": "https://pypi.org/project/pydynet/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydynet/",
            "project_urls": {
                "Homepage": "https://github.com/Kaslanarian/PyDyNet"
            },
            "release_url": "https://pypi.org/project/pydynet/0.0.6/",
            "requires_dist": [
                "numpy"
            ],
            "requires_python": "",
            "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15499612,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f5742635c1aa7071ad8f4615935c08a4",
                    "sha256": "d0cd9a066f592cc5fdbd41a37675fc2fccf0c15a26a2ee6a7f9f1e79f4815e26"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f5742635c1aa7071ad8f4615935c08a4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 24065,
                "upload_time": "2022-07-28T16:14:06",
                "upload_time_iso_8601": "2022-07-28T16:14:06.517351Z",
                "url": "https://files.pythonhosted.org/packages/b8/fd/8705d1c0286c0a66778d5899ba99aeec3192850d953448d8bcf03c65e2b9/pydynet-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d0e19914ffc6e3b33acbb41dda0053c7",
                    "sha256": "eea12fbc90a03035f028bc7e6bc2118a4aad3f3e6a836f5763c197959edfdb05"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "d0e19914ffc6e3b33acbb41dda0053c7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 22619,
                "upload_time": "2022-07-28T16:14:08",
                "upload_time_iso_8601": "2022-07-28T16:14:08.953217Z",
                "url": "https://files.pythonhosted.org/packages/c3/fe/a0436b21b499766a49bd8ae71d16907c81f3d2ddf5250794b05314cc36fe/pydynet-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "Welt Xing",
            "author_email": "xingcy@smail.nju.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kaslanarian/PyDyNet",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "Welt Xing",
            "maintainer_email": "xingcy@smail.nju.edu.cn",
            "name": "pydynet",
            "package_url": "https://pypi.org/project/pydynet/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydynet/",
            "project_urls": {
                "Homepage": "https://github.com/Kaslanarian/PyDyNet"
            },
            "release_url": "https://pypi.org/project/pydynet/0.0.7/",
            "requires_dist": [
                "numpy",
                "cupy"
            ],
            "requires_python": "",
            "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15499612,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "45e28ca3d8ed428b594a020c656343ea",
                    "sha256": "abda096f3fe50bd9d08309c1411da844caced6c10955534905c38ab9621a282d"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "45e28ca3d8ed428b594a020c656343ea",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 27083,
                "upload_time": "2022-08-09T11:55:57",
                "upload_time_iso_8601": "2022-08-09T11:55:57.074674Z",
                "url": "https://files.pythonhosted.org/packages/f0/61/b24cb22c26e694ef02b03de7f537532872a645a036b3993398b4b5674091/pydynet-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "12235940db6ca00b79d4698196383457",
                    "sha256": "33caca119adf368b5f330dda72f2083d1e540620e0d196abd0997a96cd3579a1"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "12235940db6ca00b79d4698196383457",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 25895,
                "upload_time": "2022-08-09T11:55:59",
                "upload_time_iso_8601": "2022-08-09T11:55:59.566954Z",
                "url": "https://files.pythonhosted.org/packages/1b/59/2a8932b7b2ab0964c1724ae3d8a2f479c9f18fa09f9a6fd140985055ea56/pydynet-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.8": {
        "info": {
            "author": "Welt Xing",
            "author_email": "xingcy@smail.nju.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kaslanarian/PyDyNet",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "Welt Xing",
            "maintainer_email": "xingcy@smail.nju.edu.cn",
            "name": "pydynet",
            "package_url": "https://pypi.org/project/pydynet/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydynet/",
            "project_urls": {
                "Homepage": "https://github.com/Kaslanarian/PyDyNet"
            },
            "release_url": "https://pypi.org/project/pydynet/0.0.8/",
            "requires_dist": [
                "numpy",
                "cupy"
            ],
            "requires_python": "",
            "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
            "version": "0.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15499612,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0aee9b5a95e9cf8e3e94ffc250249243",
                    "sha256": "c566f38f6dbcdef5bf7d6d925025b2ec716433d9efd4454962f98320f43a81ca"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0aee9b5a95e9cf8e3e94ffc250249243",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 29459,
                "upload_time": "2022-08-18T11:30:17",
                "upload_time_iso_8601": "2022-08-18T11:30:17.758158Z",
                "url": "https://files.pythonhosted.org/packages/50/b0/36a17ac103324c1cafb794b024f381d0f0655f5c566c1d276f6a4f8ebdfd/pydynet-0.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "029f66772b460215131a3e32847463eb",
                    "sha256": "c94d58fc5085f1c8647c3721d685bc921b036935d12fc3b16e71a13f8d6cebf6"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "029f66772b460215131a3e32847463eb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 28144,
                "upload_time": "2022-08-18T11:30:19",
                "upload_time_iso_8601": "2022-08-18T11:30:19.708716Z",
                "url": "https://files.pythonhosted.org/packages/c8/63/cfa436d99265c57fa230b6dde50871635c145cb3b7ab7a8e2bb504f2567c/pydynet-0.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.9": {
        "info": {
            "author": "Welt Xing",
            "author_email": "xingcy@smail.nju.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# PyDyNet\uff1aNeuron Network(DNN, CNN, RNN, etc) implementation using Numpy based on Autodiff\n\n\u524d\u4f5c\uff1a[PyNet: Use NumPy to build neuron network](https://github.com/Kaslanarian/PyNet)\u3002\u5728\u90a3\u91cc\u6211\u4eec\u57fa\u4e8e\u6c42\u5bfc\u89c4\u5219\u5b9e\u73b0\u4e86\u5168\u8fde\u63a5\u7f51\u7edc\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5411\u5f53\u4eca\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u770b\u9f50\uff0c\u5b9e\u73b0\u5c5e\u4e8e\u81ea\u5df1\u7684DL\u6846\u67b6\u3002\n\n**PyDyNet\u5df2\u88ab\u591a\u4e2a\u6280\u672f\u516c\u4f17\u53f7\u548c\u793e\u533a\u5206\u4eab**\uff1a[\u5c45\u7136\u7528Numpy\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6](https://segmentfault.com/a/1190000042108301).\n\n[![Downloads](https://pepy.tech/badge/pydynet)](https://pepy.tech/project/pydynet)\n[![Downloads](https://static.pepy.tech/personalized-badge/pydynet?period=month&units=international_system&left_color=grey&right_color=orange&left_text=downloads/month)](https://pepy.tech/project/pydynet)\n![](https://img.shields.io/pypi/l/pydynet)\n![](https://img.shields.io/pypi/implementation/numpy)\n![](https://img.shields.io/github/stars/Kaslanarian/PyDyNet?style=social)\n![](https://img.shields.io/github/forks/Kaslanarian/PyDyNet?style=social)\n\n## Update\n\n- 5.10: ver 0.0.1 \u4fee\u6539\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\u65b9\u5f0f\uff1a\u52a0\u5165reduction\u673a\u5236\uff0c\u52a0\u5165Embedding;\n- 5.15: ver 0.0.2 \u91cd\u6784\u4e86RNN, LSTM\u548cGRU\uff0c\u652f\u6301\u53cc\u5411;\n- 5.16: ver 0.0.2 \u5141\u8bb8PyDyNet\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u5e93\u5b89\u88c5\uff1b\u5f00\u59cb\u624b\u518c\u7684\u64b0\u5199(\u57fa\u4e8eSphinx).\n- 5.29: ver 0.0.3 \u52a0\u5165\u4e86Dataset\u548cDataloader\uff0c\u73b0\u5728\u53ef\u4ee5\u50cfPyTorch\u4e00\u6837\u5b9a\u4e49\u6570\u636e\u96c6\u548c\u5206\u5272\u6570\u636e\u96c6\uff0c\u5177\u4f53\u53c2\u8003[data.py](/pydynet/data.py)\u4e2d\u7684`train_loader`\u51fd\u6570\uff1b\n- 5.30: ver 0.0.3 \u5c06\u4e00\u7ef4\u5377\u79ef\u7b97\u6cd5\u9000\u5316\u6210\u57fa\u4e8e\u5faa\u73af\u7684im2col\uff0c\u65b0\u7248\u672cNumPy\u4f3c\u4e4e\u4e0d\u662f\u5f88\u652f\u6301strided\u4e0a\u6570\u7ec4\u7684\u9b54\u6539\uff1b\n- 7.22: ver 0.0.4/0.05 \u589e\u52a0\u4e86Module\u7c7b\u548cParameter\u7c7b\uff0c\u5c06\u6a21\u5757\u91cd\u7ec4\u3001\u589e\u52a0\u591a\u79cdPytorch\u652f\u6301\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff1b\u6b63\u5728\u64b0\u5199\u65b0\u7684Manual\uff1b\n- 7.28: ver 0.0.6 \u52a0\u5165no_grad\u65b9\u6cd5\uff0c\u53ef\u4ee5\u50cfpytorch\u4e00\u6837\u7981\u6b62\u81ea\u52a8\u5fae\u5206\uff0c\u6bd4\u5982`@no_grad()`\u548c`with no_grad()`\uff0c\u8be6\u89c1[autograd.py](/pydynet/autograd.py);\n- 8.09: ver 0.0.7 \u57fa\u4e8e[cupy](https://cupy.dev/)\uff0cPyDyNet\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u663e\u5361\u52a0\u901f\u8bad\u7ec3\uff0c\u7528\u6cd5\u4e0ePyTorch\u4e00\u81f4\uff0c\u8be6\u89c1[tests](./tests)\u4e2d`cu*.py`\uff1b\n- 8.18: ver 0.0.8 \u52a0\u5165\u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565\uff0c\u5b9e\u73b0\u4e86\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u81ea\u52a8\u8c03\u8282\u5b66\u4e60\u7387\uff1b\n- ...\n\n## Overview\n\nPyDyNet\u4e5f\u662f\u7eafNumPy(0.0.7\u7248\u672c\u540e\u52a0\u5165CuPy\uff0c\u5176\u7528\u6cd5\u548cNumPy\u4e00\u81f4)\u5b9e\u73b0\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u8bed\u6cd5\u53d7PyTorch\u7684\u542f\u53d1\uff0c\u5927\u81f4\u7ed3\u6784\u5982\u4e0b\uff1a\n\n```mermaid\ngraph BT\n   N(numpy.ndarray/cupy.ndarray) ----> ds(Dataset) ----> Data(DataLoader)--> Mission\n   N --> A(Tensor) --Eager execution--> B(Basic operators: add, exp, etc)\n   B -.Autograd-.-> A\n   B --> CO(Complex operators:softmax,etc)\n   --> f(Function:linear, conv2d, etc) \n   --> M(Basic Module:Linear,Conv2d,etc)\n   --> CM(Advanced Module:CNN,RNN,etc)\n   --> Mission(PyDyNet)\n   N --> GD(Optimizer:SGD, Adam, etc) ----> LS(lr_scheduler:StepLR, etc)--> Mission\n```\n\n\u865a\u7ebf\u8868\u793a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7`no_grad`\u6765\u5173\u95ed\u81ea\u52a8\u5fae\u5206\u529f\u80fd\u3002\n\n\u6587\u4ef6\u7ed3\u6784\n\n```bash\npydynet\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 autograd.py       # \u5fae\u5206\u63a7\u5236\u6a21\u5757\n\u251c\u2500\u2500 cuda.py           # cuda\u529f\u80fd\u6a21\u5757\n\u251c\u2500\u2500 data.py           # \u6570\u636e\u96c6\u6a21\u5757\n\u251c\u2500\u2500 nn                # \u795e\u7ecf\u7f51\u7edc\u6a21\u5757\n\u2502   \u251c\u2500\u2500 __init__.py   \n\u2502   \u251c\u2500\u2500 functional.py # \u51fd\u6570\u7c7b\n\u2502   \u251c\u2500\u2500 init.py       # \u521d\u59cb\u5316\u6a21\u5757\n\u2502   \u251c\u2500\u2500 modules\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 activation.py # \u6fc0\u6d3b\u51fd\u6570\n\u2502   \u2502   \u251c\u2500\u2500 batchnorm.py  # BN\n\u2502   \u2502   \u251c\u2500\u2500 conv.py       # \u5377\u79ef\u548c\u6c60\u5316\n\u2502   \u2502   \u251c\u2500\u2500 dropout.py    # Dropout\n\u2502   \u2502   \u251c\u2500\u2500 linear.py     # \u7ebf\u6027\u5c42\n\u2502   \u2502   \u251c\u2500\u2500 loss.py       # \u635f\u5931\u51fd\u6570\u7c7b\n\u2502   \u2502   \u251c\u2500\u2500 module.py     # Module\u57fa\u7c7b\uff0c\u5305\u62ecSequential\n\u2502   \u2502   \u2514\u2500\u2500 rnn.py        # RNN\n\u2502   \u2514\u2500\u2500 parameter.py      # \u53c2\u6570\u5316\u7c7b\n\u251c\u2500\u2500 optim\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 lr_scheduler.py   # \u5b66\u4e60\u7387\u8870\u51cf\u7b56\u7565\n\u2502   \u2514\u2500\u2500 optimizer.py      # \u4f18\u5316\u5668\u7c7b\n\u2514\u2500\u2500 tensor.py             # \u5f20\u91cf\u7c7b\n```\n\n\u6211\u4eec\u5b9e\u73b0\u4e86\uff1a\n\n1. \u5c06NumPy\u6570\u7ec4\u5305\u88c5\u6210\u5177\u6709\u68af\u5ea6\u7b49\u4fe1\u606f\u7684\u5f20\u91cf(Tensor):\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   from pydynet import Tensor\n\n   x = Tensor(1., requires_grad=True)\n   print(x.data) # 1.\n   print(x.ndim, x.shape, x.is_leaf) # 0, (), True\n   ```\n   </p>\n   </details>\n\n2. \u5c06NumPy\u6570\u7ec4\u7684\u8ba1\u7b97(\u5305\u62ec\u6570\u5b66\u8fd0\u7b97\u3001\u5207\u7247\u3001\u5f62\u72b6\u53d8\u6362\u7b49)\u62bd\u8c61\u6210\u57fa\u7840\u7b97\u5b50(Basic operators)\uff0c\u5e76\u5bf9\u90e8\u5206\u8fd0\u7b97\u52a0\u4ee5\u91cd\u8f7d\uff1a\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet\n   from pydynet import Tensor\n\n   x = Tensor([1, 2, 3])\n   y = pydynet.exp(x) + x\n   z = pydynet.sum(x)\n   print(z.data) # 36.192...\n   ```\n   </p>\n   </details>\n\n3. \u624b\u52a8\u7f16\u5199\u57fa\u7840\u7b97\u5b50\u7684\u68af\u5ea6\uff0c\u5b9e\u73b0\u548cPyTorch\u76f8\u540c\u7684\u52a8\u6001\u56fe\u81ea\u52a8\u5fae\u5206\u673a\u5236(Autograd)\uff0c\u4ece\u800c\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet\n   from pydynet import Tensor\n\n   x = Tensor([1., 2., 3.], requires_grad=True)\n   y = pydynet.log(x) + x\n   z = pydynet.sum(y)\n\n   z.backward()\n   print(x.grad) # [2., 1.5, 1.33333333]\n   ```\n   </p>\n   </details>\n\n4. \u57fa\u4e8e\u57fa\u7840\u7b97\u5b50\u5b9e\u73b0\u66f4\u9ad8\u7ea7\u7684\u7b97\u5b50(Complex operators)\uff0c\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u624b\u52a8\u7f16\u5199\u5bfc\u6570\uff1a\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet\n\n   def simple_sigmoid(x: pydynet.Tensor):\n       return 1 / (1 + pydynet.exp(-x))\n   ```\n   </p>\n   </details>\n\n5. \u5b9e\u73b0\u4e86Mudule\uff0c\u5305\u62ec\u6fc0\u6d3b\u51fd\u6570\uff0c\u635f\u5931\u51fd\u6570\u7b49\uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5b9a\u4e49\u795e\u7ecf\u7f51\u7edc\uff0c\u635f\u5931\u51fd\u6570\u9879\uff1a\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   import pydynet.nn as nn\n   import pydynet.nn.functional as F\n\n   n_input = 64\n   n_hidden = 128\n   n_output = 10\n\n   class Net(nn.Module):\n       def __init__(self) -> None:\n           super().__init__()\n           self.fc1 = nn.Linear(n_input, n_hidden)\n           self.fc2 = nn.Linear(n_hidden, n_output)\n\n       def forward(self, x):\n           x = self.fc1(x)\n           x = F.sigmoid(x)\n           return self.fc2(x)\n\n   net = Net()\n   loss = nn.CrossEntropyLoss()\n   l = loss(net(X), y)\n   l.backward()\n   ```\n   </p>\n   </details>\n\n6. \u5b9e\u73b0\u4e86\u591a\u79cd\u4f18\u5316\u5668\u548c\u5b66\u4e60\u7387\u8870\u51cf\u7b56\u7565\uff0c\u4ece\u800c\u5b9e\u73b0\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\uff1b\u5176\u4e2d\u4f18\u5316\u5668\u548cPyTorch\u4e00\u6837\u652f\u6301\u6743\u503c\u8870\u51cf\uff0c\u5373\u6b63\u5219\u5316\uff1a\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   from pydynet.optim import Adam, StepLR\n\n   ...\n   net = Net()\n   optimizer = Adam(net.parameters(), lr=0.01)\n   lr_scheduler = StepLR(optimizer, step_size=10)\n\n   for epoch in range(EPOCHES):\n       for data in data_loader:\n           train(...)\n           optimizer.step()\n       lr_scheduler.step()\n   ```\n   </p>\n   </details>\n7. \u5b9e\u73b0\u4e86Dataset\u548cDataLoader\u5bf9\u6570\u636e\u96c6\u8fdb\u884c\u52a0\u8f7d\u4e0e\u5212\u5206\uff1a\n   <details><summary>Example</summary>\n   <p>\n\n   ```python\n   from pydynet.data import Dataset, DataLoader\n   \n   class TrainSet(Dataset):\n       def __init__(self, X, y) -> None:\n           self.data = X\n           self.target = y\n\n       def __getitem__(self, index):\n           return self.data[index], self.target[index]\n\n       def __len__(self):\n           return len(self.data)\n\n    data_loader = DataLoader(TrainSet(X, y), batch_size, shuffle)\n   ```\n   </p>\n   </details>\n8. Dropout\u673a\u5236\uff0cBatch Normalization\u673a\u5236\uff0c\u4ee5\u53ca\u5c06\u7f51\u7edc\u5212\u5206\u6210\u8bad\u7ec3\u9636\u6bb5\u548c\u8bc4\u4f30\u9636\u6bb5\uff1b\n9.  \u57fa\u4e8eim2col\u9ad8\u6548\u5b9e\u73b0Conv1d, Conv2d, max_pool1d\u548cmax_pool2d\uff0c\u4ece\u800c\u5b9e\u73b0CNN\uff1b\n10. \u652f\u6301\u591a\u5c42\u7684**\u53cc\u5411**RNN\uff0cLSTM\u548cGRU\uff1b\n11. \u591a\u79cd\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u5305\u62ecKaiming\u548cXavier\uff1b\n12. \u57fa\u4e8ecupy\u5b9e\u73b0\u4e86\u663e\u5361\u8ba1\u7b97\u548c\u8bad\u7ec3\uff1a\n    <details><summary>Example</summary>\n    <p>\n\n    ```python\n    from pydynet import Tensor\n       \n    x = Tensor([1., 2., 3.], device='cuda')\n    y = Tensor([1., 2., 3.], device='cuda')\n    z = (x * y).sum()\n\n    w = Tensor([1., 2., 3.]) # CPU\u4e0a\u7684Tensor\n    x * w # \u62a5\u9519\n    ```\n    </p>\n    </details>\n\n## Install\n\n```bash\npip install pydynet\n```\n\n\u6216\u672c\u5730\u5b89\u88c5\n\n```bash\ngit clone https://github.com/Kaslanarian/PyDyNet\ncd PyDyNet\npython setup.py install\n```\n\n\u5b89\u88c5\u6210\u529f\u540e\u5c31\u53ef\u4ee5\u8fd0\u884c\u4e0b\u9762\u7684\u4f8b\u5b50\n\n## Example\n\n[tests](./tests)\u4e2d\u662f\u4e00\u4e9b\u4f8b\u5b50\u3002\n\n### AutoDiff\n\n[autodiff.py](tests/autodiff.py)\u5229\u7528\u81ea\u52a8\u5fae\u5206\uff0c\u5bf9\u4e00\u4e2a\u51f8\u51fd\u6570\u8fdb\u884c\u68af\u5ea6\u4e0b\u964d\uff1a\n\n![ad](src/autodiff.png)\n\n### DNN\n\n[DNN.py](tests/DNN.py)\u4f7f\u7528\u5168\u8fde\u63a5\u7f51\u7edc\u5bf9`sklearn`\u63d0\u4f9b\u7684\u6570\u5b57\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7c7b\uff0c\u8bad\u7ec3\u53c2\u6570\n\n- \u7f51\u7edc\u7ed3\u6784\uff1aLinear(64->64) + Sigmoid + Linear(64->10)\uff1b\n- \u635f\u5931\u51fd\u6570\uff1aCross Entropy Loss\uff1b\n- \u4f18\u5316\u5668\uff1aAdam(lr=0.01)\uff1b\n- \u8bad\u7ec3\u8f6e\u6b21\uff1a50\uff1b\n- \u6279\u5927\u5c0f(Batch size)\uff1a32.\n\n\u8bad\u7ec3\u635f\u5931\uff0c\u8bad\u7ec3\u51c6\u786e\u7387\u548c\u6d4b\u8bd5\u51c6\u786e\u7387\uff1a\n\n<img src=\"src/DNN.png\" alt=\"dnn\" style=\"zoom:67%;\" />\n\n### CNN\n\n[CNN.py](tests/CNN.py)\u4f7f\u7528\u4e09\u79cd\u7f51\u7edc\u5bf9`fetch_olivetti_faces`\u4eba\u8138(64\u00d764)\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7c7b\u5e76\u8fdb\u884c\u6027\u80fd\u5bf9\u6bd4\uff1a\n\n1. Linear + Sigmoid + Linear;\n2. Conv1d + MaxPool1d + Linear + ReLU + Linear;\n3. Conv2d + MaxPool2d + Linear + ReLU + Linear.\n\n\u5176\u4f59\u53c2\u6570\u76f8\u540c\uff1a\n\n- \u635f\u5931\u51fd\u6570\uff1aCross Entropy Loss\uff1b\n- \u4f18\u5316\u5668\uff1aAdam(lr=0.01)\uff1b\n- \u8bad\u7ec3\u8f6e\u6b21\uff1a50\uff1b\n- \u6279\u5927\u5c0f(Batch size)\uff1a32.\n\n\u5b66\u4e60\u6548\u679c\u5bf9\u6bd4\uff1a\n\n<img src=\"src/CNN.png\" alt=\"cnn\" style=\"zoom:67%;\" />\n\n## Droput & BN\n\n[dropout_BN.py](tests/dropout_BN.py)\u4f7f\u7528\u4e09\u79cd\u7f51\u7edc\u5bf9`fetch_olivetti_faces`\u4eba\u8138(64\u00d764)\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7c7b\u5e76\u8fdb\u884c\u6027\u80fd\u5bf9\u6bd4\uff1a\n\n1. Linear + Sigmoid + Linear;\n2. Linear + Dropout(0.05) + Sigmoid + Linear;\n3. Linear + BN + Sigmoid + Linear.\n\n\u5176\u4f59\u53c2\u6570\u76f8\u540c\uff1a\n\n- \u635f\u5931\u51fd\u6570\uff1aCross Entropy Loss\uff1b\n- \u4f18\u5316\u5668\uff1aAdam(lr=0.01)\uff1b\n- \u8bad\u7ec3\u8f6e\u6b21\uff1a50\uff1b\n- \u6279\u5927\u5c0f(Batch size)\uff1a32.\n\n\u5b66\u4e60\u6548\u679c\u5bf9\u6bd4\uff1a\n\n<img src=\"src/dropout_BN.png\" alt=\"BN\" style=\"zoom:67%;\" />\n\n## RNN\n\n[RNN.py](tests/RNN.py)\u4e2d\u662f\u4e00\u4e2a\u7528\u53cc\u5411\u5355\u5c42GRU\u5bf9`sklearn`\u7684\u6570\u5b57\u56fe\u7247\u6570\u636e\u96c6\u8fdb\u884c\u5206\u7c7b\uff1a\n\n<img src=\"src/RNN.png\" alt=\"RNN\" style=\"zoom:67%;\" />\n\n## cuda\u76f8\u5173\n\n[cuDNN.py](tests/cuDNN.py), [cuCNN.py](tests/cuCNN.py), [cuDropoutBN.py](tests/cuDropoutBN.py), [cuRNN.py](tests/cuRNN.py)\u5206\u522b\u662f\u4e0a\u9762\u56db\u79cd\u7f51\u7edc\u7684cuda\u7248\u672c\uff0c\u5e76\u5bf9\u7f51\u7edc\u8fdb\u884c\u4e86\u76f8\u5e94\u7684\u4fee\u6539\uff0c\u4e3b\u8981\u662f\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528PyDyNet\u7684\u663e\u5361\u529f\u80fd\uff0c\u4e14\u5df2\u7ecf\u5728\u65e0\u663e\u5361\u548c\u6709\u663e\u5361\u7684\u73af\u5883\u4e0b\u90fd\u901a\u8fc7\u4e86\u6d4b\u8bd5\u3002\n\n|  Net  |         Dataset          |        Parameters        |   CPU time   |   GPU time   |\n| :---: | :----------------------: | :----------------------: | :----------: | :----------: |\n|  FC   |     Digits (1970\u00d764)     | batch_size=128, epoch=50 | 30.8s\u00b1392ms  | 22.4s\u00b1298ms  |\n| CNN1d | OlivettiFaces (400\u00d74096) | batch_size=64, epoch=50  | 8.76s\u00b168.7ms | 4.49s\u00b116.3ms |\n| CNN2d | OlivettiFaces (400\u00d74096) | batch_size=64, epoch=50  | 14.1s\u00b1285ms  |  4.54s\u00b149ms  |\n\n\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u4e8e\u8d8a\u5e9e\u5927\u7684\u7f51\u7edc\uff08\u66f4\u5bbd\uff0c\u66f4\u6df1\uff0c\u5377\u79ef\uff09\uff0cGPU\u52a0\u901f\u6548\u679c\u66f4\u597d\u3002\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Kaslanarian/PyDyNet",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "Welt Xing",
            "maintainer_email": "xingcy@smail.nju.edu.cn",
            "name": "pydynet",
            "package_url": "https://pypi.org/project/pydynet/",
            "platform": null,
            "project_url": "https://pypi.org/project/pydynet/",
            "project_urls": {
                "Homepage": "https://github.com/Kaslanarian/PyDyNet"
            },
            "release_url": "https://pypi.org/project/pydynet/0.0.9/",
            "requires_dist": [
                "numpy",
                "cupy"
            ],
            "requires_python": "",
            "summary": "Neuron network(DNN, CNN, RNN, etc) implementation using Numpy based on autodiff",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15499612,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "425c72e7515c88ccc507df777a16dc5e",
                    "sha256": "f5865cf7728c16adea0eb36b4f3d3d9e5d7632edc264d59313a3018d7b584650"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "425c72e7515c88ccc507df777a16dc5e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 30838,
                "upload_time": "2022-10-21T13:06:19",
                "upload_time_iso_8601": "2022-10-21T13:06:19.549884Z",
                "url": "https://files.pythonhosted.org/packages/d1/a2/e5739dc33d40e3840257dd9a4f9427f8947acf496fd714d29b31fe476a98/pydynet-0.0.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "dcc26342cdc603562f70bcac6d36b4e4",
                    "sha256": "61fe843a7b63200d6f8b9ca43aca774e8730e7b6ac6f192765c6e5993dc2755a"
                },
                "downloads": -1,
                "filename": "pydynet-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "dcc26342cdc603562f70bcac6d36b4e4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 29513,
                "upload_time": "2022-10-21T13:06:21",
                "upload_time_iso_8601": "2022-10-21T13:06:21.831480Z",
                "url": "https://files.pythonhosted.org/packages/06/05/4c9e7841fb01f92b3b5337be183fe226c0fd85e01503cef19448278b13d2/pydynet-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}