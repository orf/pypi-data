{
    "0.1.1": {
        "info": {
            "author": "Vladimir Kirievskiy",
            "author_email": "vladimir@kirievskiy.ru",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3.8",
                "Topic :: Scientific/Engineering"
            ],
            "description": "# aiohttp-clean-jwt\n**\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 \u0434\u043b\u044f aiohttp**\n\n\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u0435\u043d\u0438\u044f - [aiohttp-jwt](https://github.com/hzlmn/aiohttp-jwt)\n\n\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u043b\u043e\u0445\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430, \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0435\u043d\u0430 \u043c\u0430\u043b\u043e\u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c \u0438 \u0443\u0436\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0437\u0430\u0431\u0440\u043e\u0448\u0435\u043d\u043d\u043e\u0439.\n\n____\n## \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430:\n```\npip install aiohttp_clean_jwt\n```\n\n## \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\n\n```python\nfrom aiohttp import web\nfrom aiohttp.web import Application, Request, Response\nfrom aiohttp_clean_jwt import get_token, json_response, middleware_factory\n\nJWT_SECRET = 'top_secret_word'\nJWT_ALGORITHM = 'HS256'\nJWT_EXP_DELTA_SECONDS = 360\nJWT_AUTH_SCHEME = 'Bearer'\n\n\nasync def get_user_id(login: str, password: str) -> int:\n    \"\"\" \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0431\u0430\u0437\u0443.\"\"\"\n    if login == 'vasya' and password == 'qwerty':\n        return 12345\n\n\nasync def sign_in(request: Request) -> Response:\n    \"\"\" \u0420\u0443\u0447\u043a\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \"\"\"\n    try:\n        login = request.rel_url.query['login']\n        password = request.rel_url.query['password']\n    except KeyError:\n        raise web.HTTPUnauthorized(reason='Missing credentials')\n\n    user_id = await get_user_id(login=login, password=password)\n    if user_id is not None:\n        jwt_token = get_token({'user_id': str(user_id)},\n                              expiration_s=JWT_EXP_DELTA_SECONDS,\n                              algorithm=JWT_ALGORITHM,\n                              secret=JWT_SECRET)\n\n        return json_response({'token': jwt_token})\n    else:\n        raise web.HTTPUnauthorized(reason='Wrong credentials')\n\n# \u0412\u0441\u0435 \u0440\u0443\u0447\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c\u0438.\n# \u0427\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0443\u0447\u043a\u0443 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0439, \u0435\u0435 \u043d\u0443\u0436\u043d\u043e \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0432 whitelist.\n# \u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c \u0440\u0443\u0447\u043a\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432 /login \u0442\u043e\u043a\u0435\u043d \u0447\u0435\u0440\u0435\u0437\n# HTTP HEADER \"Authorization: Bearer\"\n\n\nasync def stub1(request: Request) -> Response:\n    \"\"\" \u041f\u0440\u0438\u0432\u0430\u0442\u043d\u0430\u044f \u0440\u0443\u0447\u043a\u0430 1\"\"\"\n    user_id = request.rel_url.query['user_id']\n    result = {'user_id': user_id, 'handler': 'stub1'}\n\n    return json_response(result)\n\n\nasync def stub2(request: Request) -> Response:\n    \"\"\" \u041f\u0440\u0438\u0432\u0430\u0442\u043d\u0430\u044f \u0440\u0443\u0447\u043a\u0430 2\"\"\"\n    user_id = request.rel_url.query['user_id']\n    result = {'user_id': user_id, 'handler': 'stub2'}\n\n    return json_response(result)\n\n\nasync def public(request: Request) -> Response:\n    \"\"\" \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u0430\u044f \u0440\u0443\u0447\u043a\u0430\"\"\"\n    result = {'user_id': 'anonymous', 'handler': 'public'}\n\n    return json_response(result)\n\n\nif __name__ == '__main__':\n    app = Application(middlewares=middleware_factory(\n        whitelist=['/login', '/public'],\n        secret=JWT_SECRET,\n        algorithm=JWT_ALGORITHM,\n        auth_scheme=JWT_AUTH_SCHEME,\n    ))\n\n    app.add_routes([web.get('/login', sign_in), web.get('/public', public),\n                    web.get('/stub1', stub1), web.get('/stub2', stub2)])\n\n    web.run_app(app=app)\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitflic.ru/project/vlakir/aiohttp-clean-jwt.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiohttp-clean-jwt",
            "package_url": "https://pypi.org/project/aiohttp-clean-jwt/",
            "platform": null,
            "project_url": "https://pypi.org/project/aiohttp-clean-jwt/",
            "project_urls": {
                "Homepage": "https://gitflic.ru/project/vlakir/aiohttp-clean-jwt.git"
            },
            "release_url": "https://pypi.org/project/aiohttp-clean-jwt/0.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "jwt authentication for aiohttp",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14199399,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "11b2bb05cab4e449b5be2c3ccb216085",
                    "sha256": "2788dc98b5e0f0732e7d44fd90562ec33dc23a9501c6eb5db82bab45ed5d5679"
                },
                "downloads": -1,
                "filename": "aiohttp_clean_jwt-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "11b2bb05cab4e449b5be2c3ccb216085",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 16634,
                "upload_time": "2022-06-21T14:01:18",
                "upload_time_iso_8601": "2022-06-21T14:01:18.719716Z",
                "url": "https://files.pythonhosted.org/packages/cf/47/6a8f11eae7423ac71b200106361ca59f2dadbcc9af9d955b3d5ae899e703/aiohttp_clean_jwt-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fdf16df0acd1bb2ba72490aaffdfd754",
                    "sha256": "a152ff8a1aed79e728e42629453dcf543f50f4376fe5f7418ff8a45ccb519549"
                },
                "downloads": -1,
                "filename": "aiohttp_clean_jwt-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "fdf16df0acd1bb2ba72490aaffdfd754",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16187,
                "upload_time": "2022-06-21T14:01:21",
                "upload_time_iso_8601": "2022-06-21T14:01:21.293373Z",
                "url": "https://files.pythonhosted.org/packages/0d/14/f64e4e846948131a6010a86ca0741aa1f4fb8de4ea43d27bcdd4c61491dd/aiohttp_clean_jwt-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}