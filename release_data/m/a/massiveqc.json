{
    "0.0.6": {
        "info": {
            "author": "shimw6828",
            "author_email": "shimw6828@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: POSIX",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Bio-Informatics"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shimw6828/MassiveQC",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "MassiveQC",
            "package_url": "https://pypi.org/project/MassiveQC/",
            "platform": null,
            "project_url": "https://pypi.org/project/MassiveQC/",
            "project_urls": {
                "Homepage": "https://github.com/shimw6828/MassiveQC"
            },
            "release_url": "https://pypi.org/project/MassiveQC/0.0.6/",
            "requires_dist": [
                "scikit-learn",
                "shap",
                "pysradb",
                "xopen",
                "NumPy",
                "Pandas (>=1.3.2)",
                "fastparquet",
                "more-itertools",
                "tqdm"
            ],
            "requires_python": ">=3.7",
            "summary": "Tools for QC massive RNA-seq samples",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15663651,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b981b6bd1f05cd13ade92192ad4acd47",
                    "sha256": "7f6323459d85e8f91eb6ad417f4417b49b0f4b87a20bc07edec4338be472bf41"
                },
                "downloads": -1,
                "filename": "MassiveQC-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b981b6bd1f05cd13ade92192ad4acd47",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 37409,
                "upload_time": "2022-11-05T06:38:48",
                "upload_time_iso_8601": "2022-11-05T06:38:48.039221Z",
                "url": "https://files.pythonhosted.org/packages/41/29/5dc459a0b9f4649cadeff72f4d0b87baa9c467539ab7f18be15c5deb8452/MassiveQC-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f013380972c61bf8910cd96992bf84a2",
                    "sha256": "48a82680feed410ec711b0e3db05459b375bdc2a5a97e3323dd88481452b2dee"
                },
                "downloads": -1,
                "filename": "MassiveQC-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "f013380972c61bf8910cd96992bf84a2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 29257,
                "upload_time": "2022-11-05T06:38:49",
                "upload_time_iso_8601": "2022-11-05T06:38:49.565061Z",
                "url": "https://files.pythonhosted.org/packages/1a/df/f44e8ada6aea50dccd18080805ff38a7a9a7a10f717c5cf87192933a5d4f/MassiveQC-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "shimw6828",
            "author_email": "shimw6828@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: POSIX",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Bio-Informatics"
            ],
            "description": "# MassiveQC\n\n## Overview\n\nThe MassiveQC is a python-based tool for quality control of massive RNA-seq data. It mainly consists of the following parts\n* Interpret input files and download sequencing files\n* Check fastq files, filter unqualified read and fastq files.\n* Align all sample batches and use multiple tools to analyze sample features.\n* Identify outliers using isolation forests on sample features.\n\n## Dependencies\nMassiveQC is implemented in [Python 3.10](https://www.python.org/downloads/).\n\n\n### System requirements\n* Linux or Mac  \n* Python 3.7 or later\n\n### Prerequisites\nMassiveQC has the following dependencies:\n\nPython package:\n* [scikit-learn](https://scikit-learn.org/), a Python module for machine learning.\n* [shap](https://github.com/slundberg/shap), a game theoretic approach to explain the output of any machine learning model.\n* [pysradb](https://github.com/saketkc/pysradb), a Python package for retrieving metadata and downloading datasets from SRA/ENA/GEO.\n* [xopen](https://__github__.com/pycompression/xopen), a Python-based package for fast processing of compressed files..  \n* [NumPy](https://numpy.org/), a fundamental package for scientific computing with Python.    \n* [Pandas](https://pandas.pydata.org/) >= 1.3.5, a fast, powerful and flexible open source data analysis and manipulation tool.\n* [fastparquet](https://github.com/dask/fastparquet/), a python implementation of the parquet format, aiming integrate into python-based big data work-flows.\n* [more-itertools](https://pypi.org/project/more-itertools/), provides additional building blocks, recipes, and routines for working with Python iterables.\n* [tqdm](https://github.com/tqdm/tqdm), a Fast, Extensible Progress Bar for Python and CLI.\n\nSoftware:\n* [Atropos](https://github.com/jdidion/atropos), atropos is tool for specific, sensitive, and speedy trimming of NGS reads.\n* [FastQ Screen](https://www.bioinformatics.babraham.ac.uk/projects/fastq_screen/), A tool for multi-genome mapping and quality control.\n* [HISAT2](http://daehwankimlab.github.io/hisat2/), a fast and sensitive alignment program for mapping next-generation sequencing reads.\n* [samtools](https://subread.sourceforge.net/featureCounts.html), a highly efficient general-purpose read summarization program.\n* [bamtools](https://subread.sourceforge.net/featureCounts.html), a highly efficient general-purpose read summarization program.\n* [featureCounts](https://subread.sourceforge.net/featureCounts.html), a highly efficient general-purpose read summarization program.\n\n\nTo install using pip\n```\npip3 install MassiveQC\n```\nAlternatively, if you use conda:\n```\nconda install -c bioconda MassiveQC\n```\nThis step will install all the dependencies. If you have an existing environment with a lot of pre-installed packages, conda might be slow. Please consider creating a new enviroment for MassiveQC:\nTo create a new environment based on the environment.yaml:\n```\nconda env create -f environment.yml\n```\nOr for a basic environment and downloading optional dependencies as needed:\n```\nconda create -n MassiveQC -c bioconda python=3 MassiveQC\n```\n\n## Usage\nFor users running locally, we provide the `MultiQC` to automate parallel processing.\n```\nusage: MultiQC [-h] [-c CONF] -i INPUT [-a ASCP_KEY] -f FASTQ_SCREEN_CONFIG -g GTF -x HT2_IDX [-k KNOWN_SPLICESITE_INFILE]\n               -p PICARD -r REF_FLAT -o OUTDIR [-w WORKERS] [-t THREADS] [-d DOWNLOAD] [--only_download] [--skip_download]\n               [--remove_fastq] [--remove_bam]\n\n...\n\noptions:\n  -h, --help            show this help message and exit\n  -c CONF, --conf CONF\n  -i INPUT, --input INPUT\n                        Input file, containing two columns srx and srr\n  -a ASCP_KEY, --ascp_key ASCP_KEY\n                        Locate aspera key. Default $HOME/.aspera/connect/etc/asperaweb_id_dsa.openssh\n  -f FASTQ_SCREEN_CONFIG, --fastq_screen_config FASTQ_SCREEN_CONFIG\n                        Path to the fastq_screen conf file, can be download from fastq_screen website\n  -g GTF, --gtf GTF     Path to the GTF file with annotations\n  -x HT2_IDX, --ht2-idx HT2_IDX\n                        Hisat2 index filename prefix\n  -k KNOWN_SPLICESITE_INFILE, --known-splicesite-infile KNOWN_SPLICESITE_INFILE\n                        Hisat2 splicesite file, provide a list of known splice sites\n  -p PICARD, --picard PICARD\n                        Path to picard.jar\n  -r REF_FLAT, --ref_flat REF_FLAT\n                        Path to refflat file\n  -o OUTDIR, --outdir OUTDIR\n                        Path to result output directory. If it doesn't exist, it will be created automatically\n  -w WORKERS, --workers WORKERS\n                        The number of simultaneous tasks\n  -t THREADS, --THREADS THREADS\n                        The number of threads for tools like Hisat2 in one task\n  -d DOWNLOAD, --download DOWNLOAD\n                        Path to SRA fastq files. The default is $OUTDIR/download\n  --only_download       Only run the download step\n  --skip_download       Skip the download step\n  --remove_fastq        Don't remain the fastq after running hisat2\n  --remove_bam          Don't remain the bam after running FeatureCounts\n```\n\nIn the example, Users need to provide multiple files:\n* `asperaweb_id_dsa.openssh` is the aspera key in [IBM aspera](https://www.ibm.com/products/aspera).\n* `fastq_screen.conf` is the reference for [FastQ Screen](https://www.bioinformatics.babraham.ac.uk/projects/fastq_screen/). It can be downloaded with `fastq_screen --get_genomes`.\n* `dmel.genome` is Hisat2 index. Need to be created by the users.\n* `dmel_r6-11.refflat` is created from gtf, Generated using the code below\n* `picard.jar` can be download [here](https://github.com/broadinstitute/picard/releases)\n```\n# Generate refflat file\ngtfToGenePred -genePredExt dmel-all-r6.11.gtf \\\n-ignoreGroupsWithoutExons /dev/stdout| awk 'BEGIN { OFS=\"\\t\"} \\\n{print $12, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10}' >  dmel_r6-11.refflat\n```\nUsers can optionally specify parameters using a conf file like `example/example_conf.txt`.\n\n```\n# Use conf file\nMultiQC -c example/example_conf.txt -i example/input.txt\n\n# Without conf file\nMultiQC -a ~/miniconda3/etc/asperaweb_id_dsa.openssh \\\n-f ~/FastQ_Screen_Genomes/fastq_screen.conf \\\n-g example/dmel-all-r6.11.gtf \\\n-x example/dmel.genome \\\n-k example/splicesites.dmel.txt \\\n-p example/picard.jar \\\n-r example/dmel_r6-11.refflat \\\n-o ~/project/MassiveQC \\\n-i example/input.txt\n```\n\nFor users running on cluster (PBS or Slurm), we provide `SingleQC` and `IsoDetect` for single sample. Users can batch process samples according to their platform.\n\n```\nusage: SingleQC [-h] [-c CONF] -s SRR [-a ASCP_KEY] -f FASTQ_SCREEN_CONFIG -g GTF -x HT2_IDX [-k KNOWN_SPLICESITE_INFILE] -p\n                PICARD -r REF_FLAT -o OUTDIR [-t THREADS] [-d DOWNLOAD] [--only_download] [--skip_download] [--remove_fastq]\n                [--remove_bam]\n\n...\n\noptions:\n  -h, --help            show this help message and exit\n  -c CONF, --conf CONF\n  -s SRR, --srr SRR     SRR id\n  -a ASCP_KEY, --ascp_key ASCP_KEY\n                        Locate aspera key. Default $HOME/.aspera/connect/etc/asperaweb_id_dsa.openssh\n  -f FASTQ_SCREEN_CONFIG, --fastq_screen_config FASTQ_SCREEN_CONFIG\n                        Path to the fastq_screen conf file, can be download from fastq_screen website\n  -g GTF, --gtf GTF     Path to the GTF file with annotations\n  -x HT2_IDX, --ht2-idx HT2_IDX\n                        Hisat2 index filename prefix\n  -k KNOWN_SPLICESITE_INFILE, --known-splicesite-infile KNOWN_SPLICESITE_INFILE\n                        Hisat2 splicesite file, provide a list of known splice sites\n  -p PICARD, --picard PICARD\n                        Path to picard.jar\n  -r REF_FLAT, --ref_flat REF_FLAT\n                        Path to refflat file\n  -o OUTDIR, --outdir OUTDIR\n                        Path to result output directory. If it doesn't exist, it will be created automatically\n  -t THREADS, --THREADS THREADS\n                        The number of threads for tools like Hisat2 in one task\n  -d DOWNLOAD, --download DOWNLOAD\n                        Path to SRA fastq files. The default is $OUTDIR/download\n  --only_download       Only run the download step\n  --skip_download       Skip the download step\n  --remove_fastq        Don't remain the fastq after running hisat2\n  --remove_bam          Don't remain the bam after running FeatureCounts\n```\n\nHere we provide an example on a PBS.\n```\n# create the outdir and pbs directory\ncd ~/github/MassiveQC/example # my work directory\nmkdir -p results/\nmkdir -p results/pbs\n\n# Generate pbs script and submit using for loop \nfunction ProcessOne {\n  SingleQC -c example_conf.txt -s $1 --only_download\n  # conda activate in pbs or slurm will be failed, see https://github.com/conda/conda/issues/5071\n  echo \"cd ~/github/MassiveQC/example; SingleQC -c example_conf.txt -s $1 --remove_fastq --remove_bam\" > results/pbs/${1}.pbs\n  qsub -q batch -V -l nodes=1:ppn=2 results/pbs/${1}.pbs -o results/pbs/ -e results/pbs/\n}\nexport -f ProcessOne\nsed \"/^ *#/d\" input.txt|sed \"1d\"|cut -f2 |parallel --ungroup --verbose -j 3 ProcessOne {}\n\n\n\n# After all scripts have been run, start building the feature matrix\n# Get started with outlier filtering\n# the feature data file in results/Features\nIsoDetect -i input.txt -o results/\n# the filter result file is results/result.csv\n```\nWe provide the test file in example directory\n## Input/Output\n### Input\nThe main input of MassiveQC is a file contains a list of SRX and SRR id. For example:\n```\nsrx srr\nSRX3783112  SRR6826933\nSRX17839866 SRR21851295\nSRX17839866 SRR21851296\nSRX018864   SRR039433\n```\nMassiveQC will process and feature extraction for each srr, then merge the features through srx, and finally identify qualified srx samples.\n\nUsers can also provide only srr, so that massiveQC will filter only on srr\n```\nsrr\nSRR6826933\nSRR21851295\nSRR21851296\nSRR039433\n```\n\n### Output\nMassiveQC will generate multiple result files under the OUTDIR folder, the path tree is as follows.\n```\nOUTDIR\n-Bam\n-Count\n-download # the downloaded fastq file\n-QC_dir # the fastq file after quality control\n-Feature # Sample features\n -aln_stats\n -atropos\n -count_summary\n -DoneSample\n -fastq_screen\n -genebody_coverage\n -hisat2\n -layout\n -markduplicates\n -rnaseqmetrics\n -strand\n-result.csv # The result file, containing inlier and outlier samples.\n```\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shimw6828/MassiveQC",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "MassiveQC",
            "package_url": "https://pypi.org/project/MassiveQC/",
            "platform": null,
            "project_url": "https://pypi.org/project/MassiveQC/",
            "project_urls": {
                "Homepage": "https://github.com/shimw6828/MassiveQC"
            },
            "release_url": "https://pypi.org/project/MassiveQC/0.0.7/",
            "requires_dist": [
                "scikit-learn",
                "shap",
                "pysradb",
                "xopen",
                "NumPy",
                "Pandas (>=1.3.2)",
                "fastparquet",
                "more-itertools",
                "tqdm"
            ],
            "requires_python": ">=3.7",
            "summary": "Tools for QC massive RNA-seq samples",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15663651,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d6de6eb289ecefc78296102cd2b1a391",
                    "sha256": "9e73deb6110c5b201b72df007c71bdf6a204f118f43c6ccf74bcdce06abe7051"
                },
                "downloads": -1,
                "filename": "MassiveQC-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d6de6eb289ecefc78296102cd2b1a391",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 37406,
                "upload_time": "2022-11-05T08:24:29",
                "upload_time_iso_8601": "2022-11-05T08:24:29.858814Z",
                "url": "https://files.pythonhosted.org/packages/0b/a3/f436dffc017a0eadb8a69bea88131d095ebee6a8d3ecf996e029296f060e/MassiveQC-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2d0dabeb016e04ed393f282549d3c155",
                    "sha256": "64339308e48b59700f4384e8fe1b4f5f77c82d4888e517662cde329805bb77e5"
                },
                "downloads": -1,
                "filename": "MassiveQC-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "2d0dabeb016e04ed393f282549d3c155",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 29235,
                "upload_time": "2022-11-05T08:24:32",
                "upload_time_iso_8601": "2022-11-05T08:24:32.417719Z",
                "url": "https://files.pythonhosted.org/packages/0d/dd/eb7adee6c242a2b87772d63390da2c5abee906f6e092e6611e72d19c9163/MassiveQC-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}