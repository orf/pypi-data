{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python",
                "Programming Language :: Rust"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/wasmtime/0.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "655075969ef16a6926afe733e21c62ed",
                    "sha256": "ad052caeefb97620390e2b0df3e01e14d3a3025ac9b3f0ae17b56f07887b7c47"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.1-cp36-cp36m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "655075969ef16a6926afe733e21c62ed",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 1237453,
                "upload_time": "2019-08-15T12:26:33",
                "upload_time_iso_8601": "2019-08-15T12:26:33.651107Z",
                "url": "https://files.pythonhosted.org/packages/40/92/a78bef1d3e34345d48960fbaa977b673dca06bd9d5147f0c141ec201bfdc/wasmtime-0.0.1-cp36-cp36m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d6f3e7a97c10d0011fbd00fa099cc459",
                    "sha256": "990fb985044123a1265e81e2d6b6b6b6c0a6639b3ae65aa5b46fb419211800b2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.1-cp36-cp36m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "d6f3e7a97c10d0011fbd00fa099cc459",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 1954067,
                "upload_time": "2019-08-15T12:26:37",
                "upload_time_iso_8601": "2019-08-15T12:26:37.258887Z",
                "url": "https://files.pythonhosted.org/packages/a4/27/a2091cc2eacf618afe3f2068de8a44d3042de2d4ee215637975f2f33c06d/wasmtime-0.0.1-cp36-cp36m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "991a51dc58271dedfe9ddbd05ef91406",
                    "sha256": "d7b92c0b4572ebf0a5599590bbeed194fac8df33ea29ff030ffddfbc99d8b78e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.1-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "991a51dc58271dedfe9ddbd05ef91406",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 1168260,
                "upload_time": "2019-08-15T12:26:39",
                "upload_time_iso_8601": "2019-08-15T12:26:39.807979Z",
                "url": "https://files.pythonhosted.org/packages/11/e3/0edfa2673d660ae7b71bdf08339d033b8d3a1f7ba804a23c79efef09788f/wasmtime-0.0.1-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bc8f77c558b947b1be6865397dfb8a27",
                    "sha256": "16c1c02bf094efbe5396b756fd98a199f06f021e4105fabf75a58151fc1b136b"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.1-cp37-cp37m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "bc8f77c558b947b1be6865397dfb8a27",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2472632,
                "upload_time": "2019-08-15T12:26:42",
                "upload_time_iso_8601": "2019-08-15T12:26:42.472074Z",
                "url": "https://files.pythonhosted.org/packages/6d/d8/f497747f799fd2e5d3aaf7a355644aad8498914e91d1beed192f9053563c/wasmtime-0.0.1-cp37-cp37m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "31faa44b3c075a2c3282bc5667700416",
                    "sha256": "f62b063b1186866e91a0eb6554b8cc2ddbd3ef0fa50e8dc357d3452a8d77202f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.1-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "31faa44b3c075a2c3282bc5667700416",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2334170,
                "upload_time": "2019-08-15T12:26:45",
                "upload_time_iso_8601": "2019-08-15T12:26:45.560061Z",
                "url": "https://files.pythonhosted.org/packages/0e/19/19c478c363a4359807e77ab07f2d7d2ae48cab4b233724b6784f87dbdb86/wasmtime-0.0.1-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.0.2": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python",
                "Programming Language :: Rust"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/wasmtime/0.0.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a7835f3a1d77c99c057d137935f23789",
                    "sha256": "9157a882c71f0753cc051ceb66bfa0ffad9db04380e87057c83f8f761f04a5a7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.2-cp36-cp36m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "a7835f3a1d77c99c057d137935f23789",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 1434747,
                "upload_time": "2019-08-18T20:59:39",
                "upload_time_iso_8601": "2019-08-18T20:59:39.751162Z",
                "url": "https://files.pythonhosted.org/packages/cb/f7/9896e53a228add7a165f9c6c8646a99fc85c8f33320141d18528ebf97a09/wasmtime-0.0.2-cp36-cp36m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "996c974d654cdf3a3a63eb2abcc9c836",
                    "sha256": "9a4d883a96646ad36c8720d8a73252e8015c062bce5d839f13f354bb0d2a1df0"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.2-cp36-cp36m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "996c974d654cdf3a3a63eb2abcc9c836",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2156118,
                "upload_time": "2019-08-18T21:00:28",
                "upload_time_iso_8601": "2019-08-18T21:00:28.464795Z",
                "url": "https://files.pythonhosted.org/packages/7d/e1/e4fd07cd12c97269a8801b99c71bdee8547e80334de44b7eb49c4db0e582/wasmtime-0.0.2-cp36-cp36m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9596a82d3f95118835f5bdb4874e9ef6",
                    "sha256": "b1fbab513d4099719917afe093581f5ec2972734c69fc31059beea190b039409"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.2-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "9596a82d3f95118835f5bdb4874e9ef6",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 1312973,
                "upload_time": "2019-08-18T21:00:43",
                "upload_time_iso_8601": "2019-08-18T21:00:43.749908Z",
                "url": "https://files.pythonhosted.org/packages/61/d6/2848d5d14f760ec15926c528a8a542a01f341ee413c8f00dce0e4ab7dd25/wasmtime-0.0.2-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3445afa1e679dce28bf6cc365483bf70",
                    "sha256": "9677911068eabe02e9621a5bfe08c485ad4d2c505bfb9ca5b68fe00d5e345238"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.2-cp37-cp37m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "3445afa1e679dce28bf6cc365483bf70",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 1434620,
                "upload_time": "2019-08-18T21:01:00",
                "upload_time_iso_8601": "2019-08-18T21:01:00.402778Z",
                "url": "https://files.pythonhosted.org/packages/4a/04/2284ea3fed58245480aa60454c24a553a4c532a7a0f8af6248dd49b16932/wasmtime-0.0.2-cp37-cp37m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cb19a81b65d1c45af4dd46f7865c1c86",
                    "sha256": "e53f77b65120e9497c6a85710760a0a4e094589ce115e462e2a39e35f3e5b573"
                },
                "downloads": -1,
                "filename": "wasmtime-0.0.2-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "cb19a81b65d1c45af4dd46f7865c1c86",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 1312768,
                "upload_time": "2019-08-18T21:01:16",
                "upload_time_iso_8601": "2019-08-18T21:01:16.047432Z",
                "url": "https://files.pythonhosted.org/packages/40/19/b27f4d201c14d8a32c7f03d47ad063465fd950929466e4f43a0868fe4c96/wasmtime-0.0.2-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.11.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python",
                "Programming Language :: Rust"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/wasmtime/0.11.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.11.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b0a5a3f87b0428458573b81dea4c0646",
                    "sha256": "89e7ae566ca0d9f77f87278587216e84b7f6f8b8c52e6bc7037d8c4742be9fb1"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "b0a5a3f87b0428458573b81dea4c0646",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2512534,
                "upload_time": "2020-02-09T15:57:34",
                "upload_time_iso_8601": "2020-02-09T15:57:34.188761Z",
                "url": "https://files.pythonhosted.org/packages/d4/5b/487f3a7b5c5cd6ebfc1865f38b25e591544f240a99de62f36acab889d702/wasmtime-0.11.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5d153d483e08c098059a65f641d16420",
                    "sha256": "51ad0d2980121f0bcc3437dfb52e47e7cc364bf21dda0faea2a62c59012a8fbf"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp36-cp36m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "5d153d483e08c098059a65f641d16420",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 3331972,
                "upload_time": "2020-02-09T15:57:36",
                "upload_time_iso_8601": "2020-02-09T15:57:36.146782Z",
                "url": "https://files.pythonhosted.org/packages/8d/e7/11916c0ea72203ffe8c26806b63d1ba0966de74c629772e5cb60b632a3f9/wasmtime-0.11.0-cp36-cp36m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c11987d2c059fdc307044842eba5e3bf",
                    "sha256": "85f5660ee7ce7bf5326d0621fb577c16cf8f6c47fb4a14d69c83a209d14a60c2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "c11987d2c059fdc307044842eba5e3bf",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2126358,
                "upload_time": "2020-02-09T15:57:37",
                "upload_time_iso_8601": "2020-02-09T15:57:37.720942Z",
                "url": "https://files.pythonhosted.org/packages/e9/fd/4f1f54a1be7c5a808600970648b018d6456c50e9ce5d920770054eb9c7fc/wasmtime-0.11.0-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7a98095cdcf0d5617288b612219a8758",
                    "sha256": "c536a812ade44d3cfe6d45e2989ebcbf7ad14ea89b6bcf8f2d4094940c0e56fb"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7a98095cdcf0d5617288b612219a8758",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2512395,
                "upload_time": "2020-02-09T15:57:39",
                "upload_time_iso_8601": "2020-02-09T15:57:39.521322Z",
                "url": "https://files.pythonhosted.org/packages/fc/f6/d6daf169f60177119e5ef1d9f487b09a5b962819b54672053c35fd875325/wasmtime-0.11.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1551b250c4f4f153ab783b25fa3151d3",
                    "sha256": "cf34d16099d15b0299ff6369db330e83cc7cb0908f8b9943939d4ca79e70c752"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp37-cp37m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "1551b250c4f4f153ab783b25fa3151d3",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 3331952,
                "upload_time": "2020-02-09T15:57:41",
                "upload_time_iso_8601": "2020-02-09T15:57:41.292687Z",
                "url": "https://files.pythonhosted.org/packages/d6/eb/6d880b4f895e32592eb60c30621c6ba6f7607e97da47cf4ada4586d429f4/wasmtime-0.11.0-cp37-cp37m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e8577a9a74e642ce69d3057a50214fcb",
                    "sha256": "93e1740b85d92829b558c83b13dfc1bd39fc3e999636587715203a2bc0e4845f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "e8577a9a74e642ce69d3057a50214fcb",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2126148,
                "upload_time": "2020-02-09T15:57:42",
                "upload_time_iso_8601": "2020-02-09T15:57:42.978183Z",
                "url": "https://files.pythonhosted.org/packages/f4/27/b3f2780ea2eb034ce3c73b41c057e9d031bbb705f190d097fefe704560bc/wasmtime-0.11.0-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bd8ff64d157d53222cc38bc797a80e3d",
                    "sha256": "7f5ac2b12b7c925cc88010181901cb57602879b155e4ecc4097a71c68878fc9f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "bd8ff64d157d53222cc38bc797a80e3d",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2512393,
                "upload_time": "2020-02-09T15:57:44",
                "upload_time_iso_8601": "2020-02-09T15:57:44.529316Z",
                "url": "https://files.pythonhosted.org/packages/1d/81/9d9a2c3f040917bb3c7cdb51190e2766a6b64f0b3da8af75f2858e866f79/wasmtime-0.11.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8f613944662e5d503fcc8ba65c95724e",
                    "sha256": "7ece4a145eb70efbe83febaf2caf93f1affd3de182d60cfee41e559557f43013"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp38-cp38-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "8f613944662e5d503fcc8ba65c95724e",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 3331945,
                "upload_time": "2020-02-09T15:57:46",
                "upload_time_iso_8601": "2020-02-09T15:57:46.983674Z",
                "url": "https://files.pythonhosted.org/packages/58/e0/064ffc65484f9070065eaacc5b597a7198106a6364d187a3b199832fd834/wasmtime-0.11.0-cp38-cp38-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d4acd36f6e1d4dee4e036fa9fe64d649",
                    "sha256": "7cfb7cc405858f03d08a121b2b6d2c3cad66d6e72d94cb73d7783b41867f0d1e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.11.0-cp38-cp38-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "d4acd36f6e1d4dee4e036fa9fe64d649",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2126162,
                "upload_time": "2020-02-09T15:57:48",
                "upload_time_iso_8601": "2020-02-09T15:57:48.454781Z",
                "url": "https://files.pythonhosted.org/packages/3f/6a/b95aac9713fad221698c021f46e4ce30681cbbd940ba4a707ee6e027a0cb/wasmtime-0.11.0-cp38-cp38-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.12.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python",
                "Programming Language :: Rust"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/wasmtime/0.12.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.12.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c99b632159ca811038388314934328f3",
                    "sha256": "164338e6dca1e8ea56c91423e12117a13776c2bac2e455d080176c159dead154"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "c99b632159ca811038388314934328f3",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2501812,
                "upload_time": "2020-02-26T22:49:07",
                "upload_time_iso_8601": "2020-02-26T22:49:07.754930Z",
                "url": "https://files.pythonhosted.org/packages/ab/0c/acdc042cbaeb5caf9c5d1cebf1c93b70c57a30f96f77267fb9d90df0868f/wasmtime-0.12.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c8d4985ed44fe909022bcb4370715383",
                    "sha256": "b1c730a5cd1846bcb7b270c6bfa51f99f5ae0b705ab21d17f4c2f33e2a42af26"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp36-cp36m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "c8d4985ed44fe909022bcb4370715383",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 3320945,
                "upload_time": "2020-02-26T22:49:09",
                "upload_time_iso_8601": "2020-02-26T22:49:09.526468Z",
                "url": "https://files.pythonhosted.org/packages/bd/61/22ae4670cd51d730d477149e9014a3d5354f11998ae8a52fce8428bafaba/wasmtime-0.12.0-cp36-cp36m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f8eb15dd22efff59b4f89600becc7937",
                    "sha256": "8a2f3bce61c15c310f6a7e5f579438ecbaac489d0dae112d439f3b0cec723fa0"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "f8eb15dd22efff59b4f89600becc7937",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2123333,
                "upload_time": "2020-02-26T22:49:13",
                "upload_time_iso_8601": "2020-02-26T22:49:13.086016Z",
                "url": "https://files.pythonhosted.org/packages/6d/bb/e15281987e3a8954ece36b615c3d1064211e27d5dad79bfaf2ef016e457d/wasmtime-0.12.0-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e1662446d786bf96606d6e642091523c",
                    "sha256": "fe544625fc6426ed4191e540037ba91393cd73b6ea89753d8245af140bd8d345"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "e1662446d786bf96606d6e642091523c",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2501696,
                "upload_time": "2020-02-26T22:49:14",
                "upload_time_iso_8601": "2020-02-26T22:49:14.874855Z",
                "url": "https://files.pythonhosted.org/packages/b3/b7/4103faecb36ee52b0c14962c51e788b8a866c7a8494368db53602fef0bf7/wasmtime-0.12.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1ba08f61b928dab6561aeac0c940f08e",
                    "sha256": "6b0cf688eadf020712439d982815c77452ef6264877510b40f2f8f18ab195484"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp37-cp37m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "1ba08f61b928dab6561aeac0c940f08e",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 3320929,
                "upload_time": "2020-02-26T22:49:16",
                "upload_time_iso_8601": "2020-02-26T22:49:16.538726Z",
                "url": "https://files.pythonhosted.org/packages/ed/f7/643e13189f09f6eed9d44389082c254d0820fbf34e3e7ac69ecc78542a01/wasmtime-0.12.0-cp37-cp37m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e8f05b74448845c94824b57fc83adb79",
                    "sha256": "a6a6cffb15ae1336416180d6db232b8140cee9f4061e73a252bad8a3b8a13775"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "e8f05b74448845c94824b57fc83adb79",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2123088,
                "upload_time": "2020-02-26T22:49:18",
                "upload_time_iso_8601": "2020-02-26T22:49:18.214358Z",
                "url": "https://files.pythonhosted.org/packages/3a/0a/3a256aeb9aa89b92b13d01d9ac69206212a70152baed417ccecd078e2099/wasmtime-0.12.0-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4af361bd4f6bf7b6c291e82d8a3335bd",
                    "sha256": "89dd253487afabc8cc680448925cbc16c9f8a915d0067a423ccfe026e7273f40"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "4af361bd4f6bf7b6c291e82d8a3335bd",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2501656,
                "upload_time": "2020-02-26T22:49:19",
                "upload_time_iso_8601": "2020-02-26T22:49:19.734265Z",
                "url": "https://files.pythonhosted.org/packages/6a/df/eb34e7da60b13a0c1c48723369c39bb02713f49262031ad4590eff6f349c/wasmtime-0.12.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c2250cf07d8fd5d05736749646717757",
                    "sha256": "b2e6351073a9e56504b4fca697124fb56129f24815a443e58e74fe99e516bc53"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp38-cp38-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "c2250cf07d8fd5d05736749646717757",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 3320924,
                "upload_time": "2020-02-26T22:49:21",
                "upload_time_iso_8601": "2020-02-26T22:49:21.695135Z",
                "url": "https://files.pythonhosted.org/packages/89/31/9ff7a57a71eee9e66bc00fe109f1de180b364919a08febfc7bff5a0185c0/wasmtime-0.12.0-cp38-cp38-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "09ec3e710dcef1c8723f663f3fddfcd3",
                    "sha256": "d8b64672e1066e4f2b149eb83b918f0c35cdfa31ff4cd58d59de8b78e59c1ff9"
                },
                "downloads": -1,
                "filename": "wasmtime-0.12.0-cp38-cp38-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "09ec3e710dcef1c8723f663f3fddfcd3",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2123100,
                "upload_time": "2020-02-26T22:49:23",
                "upload_time_iso_8601": "2020-02-26T22:49:23.185013Z",
                "url": "https://files.pythonhosted.org/packages/5f/59/71fbb7bc904e3e787d05e4080cece1f0a4132c44cd2ecf53bff264e85640/wasmtime-0.12.0-cp38-cp38-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.15.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python",
                "Programming Language :: Rust"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/wasmtime/0.15.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.15.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "961566cc59d9b35c6f1d8f8ee673fb99",
                    "sha256": "a2fdd5bbac4db3e4667c5ab84ba63d02b8eac464df85393cc9bce860b93ff1cd"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "961566cc59d9b35c6f1d8f8ee673fb99",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2426665,
                "upload_time": "2020-03-31T21:56:11",
                "upload_time_iso_8601": "2020-03-31T21:56:11.909816Z",
                "url": "https://files.pythonhosted.org/packages/ce/c1/04b1413c06e3bd3846b069507561aff2da7c420df0cd504e94a5d8b7a79a/wasmtime-0.15.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "59b1e1f3e7fb7fb8b75869f659a9d3ab",
                    "sha256": "3c41282c4c352ca5d4af769df1fcb80e7d0d4d3ea61f7c5ede6402adfe7c676f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp36-cp36m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "59b1e1f3e7fb7fb8b75869f659a9d3ab",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 3259588,
                "upload_time": "2020-03-31T21:56:13",
                "upload_time_iso_8601": "2020-03-31T21:56:13.404796Z",
                "url": "https://files.pythonhosted.org/packages/d3/85/6af8430856949b2ec625916f8d2a0b776ec603a71f22b6ad782db4769134/wasmtime-0.15.0-cp36-cp36m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1c5db20b36bad393f2dcc6a6fec06b7f",
                    "sha256": "65adc7fc93b43f670e7995c0dc2311214268ac81263f5cd3024516c177c08d10"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "1c5db20b36bad393f2dcc6a6fec06b7f",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2068757,
                "upload_time": "2020-03-31T21:56:14",
                "upload_time_iso_8601": "2020-03-31T21:56:14.415657Z",
                "url": "https://files.pythonhosted.org/packages/be/de/e6d80feb03c18943d352f976bb00de1a9356a06aba7027ad06c26c177d1b/wasmtime-0.15.0-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e790a0ecc8429926c69b9103ba0808bb",
                    "sha256": "51be50c80b225003c801b31569d840e00a1bb77baff27f523df46e11caa09079"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "e790a0ecc8429926c69b9103ba0808bb",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2426581,
                "upload_time": "2020-03-31T21:56:15",
                "upload_time_iso_8601": "2020-03-31T21:56:15.624061Z",
                "url": "https://files.pythonhosted.org/packages/cc/b0/982a4d0098ef7cfb2ace0a42a72191bb84e414cbbe45e422558ff789ec1c/wasmtime-0.15.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0e49ebded15ec7e3def7692d57ef925e",
                    "sha256": "88a5a34e57537f7f66b7f2b58be583ca576918d459bfc9c7d785cc7d44f881f3"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp37-cp37m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "0e49ebded15ec7e3def7692d57ef925e",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 3259570,
                "upload_time": "2020-03-31T21:56:17",
                "upload_time_iso_8601": "2020-03-31T21:56:17.665926Z",
                "url": "https://files.pythonhosted.org/packages/4a/e6/5d941fbc39c9b69377dbb431dd1f733391037a48939ae4fc7cfa35e69985/wasmtime-0.15.0-cp37-cp37m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a61c00ffed46264637c3efd694eebe25",
                    "sha256": "5f1a3defd70ece22cbff7e06cf69c83727915a8efd78c7a09b9db3371ffc73b4"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "a61c00ffed46264637c3efd694eebe25",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2068512,
                "upload_time": "2020-03-31T21:56:18",
                "upload_time_iso_8601": "2020-03-31T21:56:18.954704Z",
                "url": "https://files.pythonhosted.org/packages/0e/24/728dda354ffdbf85a4dde35d3f6d876ea06f056ac53ac27300bc73722cfc/wasmtime-0.15.0-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "80b689d4610832760ece1dcb3f41988d",
                    "sha256": "df96344193c2f10a6441d6f4c8e7afc76ccc49890a77be633f01ada846073ab6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "80b689d4610832760ece1dcb3f41988d",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2426615,
                "upload_time": "2020-03-31T21:56:20",
                "upload_time_iso_8601": "2020-03-31T21:56:20.288207Z",
                "url": "https://files.pythonhosted.org/packages/94/45/dc2a61dbc3b5a09594b44f9a58fa43e42319486239d670ab4c4cf1a15676/wasmtime-0.15.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bcb4835e32dc2cfe7f34e80daf8c32d5",
                    "sha256": "6810040754dcd77f034d2af17f5935faa326554d71e944b94d32fae6d1d65c42"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp38-cp38-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "bcb4835e32dc2cfe7f34e80daf8c32d5",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 3259565,
                "upload_time": "2020-03-31T21:56:21",
                "upload_time_iso_8601": "2020-03-31T21:56:21.846843Z",
                "url": "https://files.pythonhosted.org/packages/48/55/4d8b99b2de1f8f49814db7b4a0c94dfdfad7b38e1bdec047bd39cb765154/wasmtime-0.15.0-cp38-cp38-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ef99f92159a8308b9efec50c9ad508ec",
                    "sha256": "d42683c57133b1c0b67b011e61f871e756a45193ad6545e45b416502530b8857"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.0-cp38-cp38-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "ef99f92159a8308b9efec50c9ad508ec",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2068515,
                "upload_time": "2020-03-31T21:56:23",
                "upload_time_iso_8601": "2020-03-31T21:56:23.316200Z",
                "url": "https://files.pythonhosted.org/packages/8a/62/8a05ceb285eee4f99f91f8722aeb7b1109bf585e3ba19aed49c6f8d73140/wasmtime-0.15.0-cp38-cp38-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.15.1": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.15.1/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'"
            ],
            "requires_python": ">=2.7",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.15.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d59752eb2f24d25d64d07eab59d1d8ac",
                    "sha256": "35f52560d130cf43facf1156b7d3f6630b86330e8e993bc3cde7ffceb8f2d9e1"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.1-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "d59752eb2f24d25d64d07eab59d1d8ac",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 2470555,
                "upload_time": "2020-04-01T19:12:02",
                "upload_time_iso_8601": "2020-04-01T19:12:02.288141Z",
                "url": "https://files.pythonhosted.org/packages/3e/2e/82d962340efc51944b66dde9cdd80a385cfb18f662cfb78de9641e5411f1/wasmtime-0.15.1-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "529fa7da6978cd93b493432b6699969a",
                    "sha256": "57d98b8d061ac81389df62db6fe26f2a57d804dd20137bcff9c0bdbbd500040c"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.1-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "529fa7da6978cd93b493432b6699969a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 3379211,
                "upload_time": "2020-04-01T19:12:03",
                "upload_time_iso_8601": "2020-04-01T19:12:03.832086Z",
                "url": "https://files.pythonhosted.org/packages/d0/3d/a1da00c15556b496ff4499dfdb5784a350c7267d6a197a44da8e72346a6e/wasmtime-0.15.1-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b86ce4c687e37e2b2ba720d7650e7ad",
                    "sha256": "a6ee0a2eca67ba4bb5c57c46a40ad3ad54a8bd9315c849213ee705f125249310"
                },
                "downloads": -1,
                "filename": "wasmtime-0.15.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "9b86ce4c687e37e2b2ba720d7650e7ad",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 2130707,
                "upload_time": "2020-04-01T19:12:05",
                "upload_time_iso_8601": "2020-04-01T19:12:05.093469Z",
                "url": "https://files.pythonhosted.org/packages/f3/31/5ab14fc1a241867bb14a517d19271ca560d0515e8a2e48ea1b792569f18b/wasmtime-0.15.1-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.16.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.16.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'"
            ],
            "requires_python": ">=2.7",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.16.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b5a7fd076284b13902de1b9b078a5c56",
                    "sha256": "03ba43a3b80dfdb991e072ab1d680c0b6cda029c3bed763e52a8104dd707b3af"
                },
                "downloads": -1,
                "filename": "wasmtime-0.16.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "b5a7fd076284b13902de1b9b078a5c56",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 2938300,
                "upload_time": "2020-04-30T02:01:34",
                "upload_time_iso_8601": "2020-04-30T02:01:34.255231Z",
                "url": "https://files.pythonhosted.org/packages/ba/3d/a5462781865287fc3d7f1eacfb43cd516e5b57d40900de61555ec3b893c7/wasmtime-0.16.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "83b357dbc7543c9cd0b8550665df964d",
                    "sha256": "304f908ab116b03011257afb8ff71deccbdcc190c70f77069cbd8c97182f18f9"
                },
                "downloads": -1,
                "filename": "wasmtime-0.16.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "83b357dbc7543c9cd0b8550665df964d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 3917564,
                "upload_time": "2020-04-30T02:01:35",
                "upload_time_iso_8601": "2020-04-30T02:01:35.600870Z",
                "url": "https://files.pythonhosted.org/packages/32/09/ca100a0fb118ef88218a0411b5b17da140cd057a865c8e18cad9d840fd07/wasmtime-0.16.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7850c2486b2222f14748a1096e9b8ac8",
                    "sha256": "ab0427c417adf87e787723d517dabd08dc26c54d196ff4dbc577e99a9f702326"
                },
                "downloads": -1,
                "filename": "wasmtime-0.16.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "7850c2486b2222f14748a1096e9b8ac8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 2542588,
                "upload_time": "2020-04-30T02:01:37",
                "upload_time_iso_8601": "2020-04-30T02:01:37.179291Z",
                "url": "https://files.pythonhosted.org/packages/53/d6/955294fa8c190597da8dcab7e37c04cb9ff698d3fd4a177709bff97e79f1/wasmtime-0.16.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.16.1": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.16.1/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'"
            ],
            "requires_python": ">=2.7",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.16.1",
            "yanked": true,
            "yanked_reason": "Buggy release"
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "87a926816edf1479eb259112e05e3384",
                    "sha256": "39960d891136525ebb188aed4e385ee345cbb65c7a86aa9cc1acdf4551da6d88"
                },
                "downloads": -1,
                "filename": "wasmtime-0.16.1-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "87a926816edf1479eb259112e05e3384",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 3033094,
                "upload_time": "2020-05-22T22:33:51",
                "upload_time_iso_8601": "2020-05-22T22:33:51.143709Z",
                "url": "https://files.pythonhosted.org/packages/1f/39/fbf62ee1ed7b16e4aacfe04b49eb0148cf64b714fce7b0f624d279b122ad/wasmtime-0.16.1-py3-none-macosx_10_13_x86_64.whl",
                "yanked": true,
                "yanked_reason": "Buggy release"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cbdb675833d8304d734766fddc1890ed",
                    "sha256": "0c66b145d412152c6d74db17dfbb837c4606509ace99d1581707e461710d7f8c"
                },
                "downloads": -1,
                "filename": "wasmtime-0.16.1-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "cbdb675833d8304d734766fddc1890ed",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 4046669,
                "upload_time": "2020-05-22T22:33:52",
                "upload_time_iso_8601": "2020-05-22T22:33:52.461935Z",
                "url": "https://files.pythonhosted.org/packages/c3/6d/6c5ee14cc9c301db63b5928ae130498ac2895eba3bd6197b3f0f736dd9a8/wasmtime-0.16.1-py3-none-manylinux1_x86_64.whl",
                "yanked": true,
                "yanked_reason": "Buggy release"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8709f86ce44f512a82da74f0370efaed",
                    "sha256": "09d1928817b30147931c2979a9ea5443d879ad81004d56e63c3ee4fbcfe7efd5"
                },
                "downloads": -1,
                "filename": "wasmtime-0.16.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "8709f86ce44f512a82da74f0370efaed",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=2.7",
                "size": 2660683,
                "upload_time": "2020-05-22T22:33:54",
                "upload_time_iso_8601": "2020-05-22T22:33:54.119503Z",
                "url": "https://files.pythonhosted.org/packages/a9/f2/2f037e35a84c191e750f0c1070b62a2fc5031510d377b0656b630d2a1a58/wasmtime-0.16.1-py3-none-win_amd64.whl",
                "yanked": true,
                "yanked_reason": "Buggy release"
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.17.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.17.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.17.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cf02386734ba5320cb1c3fc1ff97f61d",
                    "sha256": "acdad4a59fa704094d4946155936b9be7a70883bdcb37a2a5f527be176786fd6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.17.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cf02386734ba5320cb1c3fc1ff97f61d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 6877595,
                "upload_time": "2020-06-03T14:03:29",
                "upload_time_iso_8601": "2020-06-03T14:03:29.635647Z",
                "url": "https://files.pythonhosted.org/packages/02/ff/6f533675769102aa742915930c748ab65ef71263117c55e03107f7e6d080/wasmtime-0.17.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "60317db1d5cf7dc6e71ee62f2ff443c6",
                    "sha256": "1e6c2c73b693f1b449219d4be2fc905eb7b07a7480fcea1bd48c25b601ae934b"
                },
                "downloads": -1,
                "filename": "wasmtime-0.17.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "60317db1d5cf7dc6e71ee62f2ff443c6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3075430,
                "upload_time": "2020-06-03T14:03:31",
                "upload_time_iso_8601": "2020-06-03T14:03:31.304452Z",
                "url": "https://files.pythonhosted.org/packages/21/1a/3ab4a00fa5f1ef49f6748a323790e0e7731b57b637d095831f26ccc2ef5a/wasmtime-0.17.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f215996452464da2c29970d849d82f57",
                    "sha256": "53132ddd5c9068c9f0a4c393e1287c303047bed306004df1bbf97863dc2b13b2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.17.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "f215996452464da2c29970d849d82f57",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4096946,
                "upload_time": "2020-06-03T14:03:32",
                "upload_time_iso_8601": "2020-06-03T14:03:32.682781Z",
                "url": "https://files.pythonhosted.org/packages/e1/92/aad71581d24c182e2645f1c397df09a6747f1f31f5abe8a99fb374dbb703/wasmtime-0.17.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6d91e36fb79ba4201b5f4e643779b976",
                    "sha256": "e5b60287cfed4781bea9ec849e4965cb9f05aa0c60bcc0707e31e69da1b13d52"
                },
                "downloads": -1,
                "filename": "wasmtime-0.17.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "6d91e36fb79ba4201b5f4e643779b976",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 2688818,
                "upload_time": "2020-06-03T14:03:34",
                "upload_time_iso_8601": "2020-06-03T14:03:34.147328Z",
                "url": "https://files.pythonhosted.org/packages/f6/b1/8faa35d7372d6b91abb0a30ecf05e82318723bd3f62973a8ed3618e5c539/wasmtime-0.17.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.18.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.18.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.18.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a0bb501a2e9ce845abf02888d4ea36d7",
                    "sha256": "ac3ebf6cb24305289800348141841dcab7da6f3adfaf82f5f5bba7c2ee0b98c4"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a0bb501a2e9ce845abf02888d4ea36d7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7100721,
                "upload_time": "2020-06-17T20:59:20",
                "upload_time_iso_8601": "2020-06-17T20:59:20.718786Z",
                "url": "https://files.pythonhosted.org/packages/bc/b5/e9ba9aa4135a3e198455f12734207935f0d82fc1b24c0dfc86918cc604f7/wasmtime-0.18.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "41561a6d0ec39d182119123dae7ac52b",
                    "sha256": "cd150778fb99c0e46d755c610c7030e70cc4b74ca1d4a1698bf37da61198985d"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "41561a6d0ec39d182119123dae7ac52b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3182897,
                "upload_time": "2020-06-17T20:59:22",
                "upload_time_iso_8601": "2020-06-17T20:59:22.465630Z",
                "url": "https://files.pythonhosted.org/packages/a8/dd/4ef99896417c187b265ef72e4508680562202f758001b21411db59769752/wasmtime-0.18.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7fe236c2ce8335c07f14626492f81805",
                    "sha256": "08069ccd96db2006fd253191f50204a46589f981921dab9cef91eeab3e6bb81e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7fe236c2ce8335c07f14626492f81805",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4192359,
                "upload_time": "2020-06-17T20:59:24",
                "upload_time_iso_8601": "2020-06-17T20:59:24.056330Z",
                "url": "https://files.pythonhosted.org/packages/a7/88/1665b8e5fc7bec472908c68a9a19294a225a97a28a31a0cb9552ae77bd0c/wasmtime-0.18.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f957e7d25d37e838e1dc289173f17b0",
                    "sha256": "17ffcc547fd6bf95f11b8b9bbe42cc7dae7e348f77127e8d8fba1235b9014d91"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "4f957e7d25d37e838e1dc289173f17b0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 2774079,
                "upload_time": "2020-06-17T20:59:25",
                "upload_time_iso_8601": "2020-06-17T20:59:25.630776Z",
                "url": "https://files.pythonhosted.org/packages/7d/15/2fed277ca9e509b75f18e6ce446c9118f06e8a8acb53753ca41fbdeb59a0/wasmtime-0.18.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.18.1": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.18.1/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.18.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "086865a8cfd4962d640aaec1e7a38d51",
                    "sha256": "86dac3aefba479d2ee9819724cd71e6892b2b8ae4c0a5f082b2f370dc796b279"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "086865a8cfd4962d640aaec1e7a38d51",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7204646,
                "upload_time": "2020-06-24T14:09:45",
                "upload_time_iso_8601": "2020-06-24T14:09:45.507484Z",
                "url": "https://files.pythonhosted.org/packages/b1/7a/e1d156a8443313d2914bd80858eb9d65c17365044e3bd701e42b4818b4bd/wasmtime-0.18.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "73c958946509fbcdd2d479bb4b6dd94b",
                    "sha256": "9cb2a2f4c81ba2f57da8f9b02d6739b1f3f7d0024e66e88f041d9ed520bf0913"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.1-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "73c958946509fbcdd2d479bb4b6dd94b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3187798,
                "upload_time": "2020-06-24T14:09:47",
                "upload_time_iso_8601": "2020-06-24T14:09:47.371953Z",
                "url": "https://files.pythonhosted.org/packages/f9/eb/95fd734f862e76203ff5f40cdbe6e5bd13872f36d1baabd61a4014751b6c/wasmtime-0.18.1-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d944918758bc93d7620440a087c39379",
                    "sha256": "b3d331f0dcf49978c5a0c105423f3bf52af7e7c15ace1474adabda851e8de971"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.1-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "d944918758bc93d7620440a087c39379",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4287312,
                "upload_time": "2020-06-24T14:09:49",
                "upload_time_iso_8601": "2020-06-24T14:09:49.120019Z",
                "url": "https://files.pythonhosted.org/packages/00/be/3ea40f51827f2401d7aa64072f82816e6e8dd7793ef79c77ec697a233258/wasmtime-0.18.1-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d554a518199cca6f803fb005570653e7",
                    "sha256": "c09a685a4e0c200c508f3b4111071d6085a79c6855a249c1b850601554bc8786"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "d554a518199cca6f803fb005570653e7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 2779394,
                "upload_time": "2020-06-24T14:09:50",
                "upload_time_iso_8601": "2020-06-24T14:09:50.483895Z",
                "url": "https://files.pythonhosted.org/packages/7e/fa/d2e9fb3ef0ae0dbf53824bce8423c815963c56508839e0cace49251da6c2/wasmtime-0.18.1-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.18.2": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.18.2/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.18.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4a50a337f5318dbf4aecd2561f4bea21",
                    "sha256": "8d3a4c8e2ad622bb265d2d6a8e936a4dfc203a2d1cd04518c0e6c2e528435256"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4a50a337f5318dbf4aecd2561f4bea21",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7306759,
                "upload_time": "2020-07-08T14:07:50",
                "upload_time_iso_8601": "2020-07-08T14:07:50.907922Z",
                "url": "https://files.pythonhosted.org/packages/d1/ff/0015858fba00d01df5a9696692bade817b74ff58be06b0c2b7d661df8303/wasmtime-0.18.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2e1377b8afd7b07f30f09b401d7990e4",
                    "sha256": "baa0800a42050d7a175e83e1b8820e12f63226300f0fbd59a7b963cd30337adf"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.2-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "2e1377b8afd7b07f30f09b401d7990e4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3254336,
                "upload_time": "2020-07-08T14:07:52",
                "upload_time_iso_8601": "2020-07-08T14:07:52.601148Z",
                "url": "https://files.pythonhosted.org/packages/c7/12/b6ba1660bd68cbafc7cae10e4579308a591ed35dc5ab05714a318955e31b/wasmtime-0.18.2-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a1c51a7439704aabf9e5e4b202e9ed54",
                    "sha256": "0f4690164f7848f09da94dad3c2b9e8f00db77b310f7d1acc2d0d0f084710d1f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.2-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "a1c51a7439704aabf9e5e4b202e9ed54",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4346924,
                "upload_time": "2020-07-08T14:07:54",
                "upload_time_iso_8601": "2020-07-08T14:07:54.124312Z",
                "url": "https://files.pythonhosted.org/packages/7a/bb/a47218960c86541900254fec7b5361548614e39fccc9b01647bd6d3ddf23/wasmtime-0.18.2-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a255c9c932795dcea4207dad3bd72ca1",
                    "sha256": "4c2adef4d45c11cbadcf8c028c32634b98c0f3965f039e09e025de29f49378bb"
                },
                "downloads": -1,
                "filename": "wasmtime-0.18.2-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "a255c9c932795dcea4207dad3bd72ca1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 2820152,
                "upload_time": "2020-07-08T14:07:55",
                "upload_time_iso_8601": "2020-07-08T14:07:55.395357Z",
                "url": "https://files.pythonhosted.org/packages/29/67/78c9a6789091b6586e20485a259da416d5076e6c07edae297aeff92646d6/wasmtime-0.18.2-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.19.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.19.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.19.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7a4e03fcaf1bf66343fbc1ab8abbf556",
                    "sha256": "def3773817a8923fc71ac1d677a939685b576bc47ac0a1905541f8176eea9049"
                },
                "downloads": -1,
                "filename": "wasmtime-0.19.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7a4e03fcaf1bf66343fbc1ab8abbf556",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7425127,
                "upload_time": "2020-07-17T21:46:37",
                "upload_time_iso_8601": "2020-07-17T21:46:37.220403Z",
                "url": "https://files.pythonhosted.org/packages/87/cd/a06c039a846d5bdbd057f7086ae6101e9d1bc30ec162b3ba13edd45251e4/wasmtime-0.19.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ea86f0fdf49ac0b4fff1864d792730e4",
                    "sha256": "843ce6e737ef97bce411a34285d10fcbf14d5834b1020a798b7b8c5de5ce60e8"
                },
                "downloads": -1,
                "filename": "wasmtime-0.19.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "ea86f0fdf49ac0b4fff1864d792730e4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3295202,
                "upload_time": "2020-07-17T21:46:38",
                "upload_time_iso_8601": "2020-07-17T21:46:38.678978Z",
                "url": "https://files.pythonhosted.org/packages/b3/5b/34ddd80c640b1afdee69f56967f82d49c1de1127f39fc39337798ee6ea31/wasmtime-0.19.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5ba3742e875efca63854e9673838d891",
                    "sha256": "b2b761379d0ce612754437b5dea351ce7371155803dae328f5265335611af3f9"
                },
                "downloads": -1,
                "filename": "wasmtime-0.19.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "5ba3742e875efca63854e9673838d891",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4395848,
                "upload_time": "2020-07-17T21:46:40",
                "upload_time_iso_8601": "2020-07-17T21:46:40.267723Z",
                "url": "https://files.pythonhosted.org/packages/8e/fd/3b03dd2ade7cc19fd0ce2b792b2abae26e4a557335d189639ff2fc4f97b8/wasmtime-0.19.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "146a11deab53b03918accb70ac638166",
                    "sha256": "e986d1a5e9b30fc02ece9cfd55d44d01be0f4e2debd6b32cf52cee37d9b8c6a2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.19.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "146a11deab53b03918accb70ac638166",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 2866606,
                "upload_time": "2020-07-17T21:46:41",
                "upload_time_iso_8601": "2020-07-17T21:46:41.822122Z",
                "url": "https://files.pythonhosted.org/packages/cb/ea/8379e841de3cbaafb0e7d239efe20bc36ab7b3acfd7b76d94b6e846f69b2/wasmtime-0.19.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.20.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.20.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.20.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bc64916d01a71e6eecc142021c5c8867",
                    "sha256": "2f0712303a87159269c0c46c8ad0f10b3bf3b737f886973f46ef09e6c24a65a6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.20.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "bc64916d01a71e6eecc142021c5c8867",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7688239,
                "upload_time": "2020-09-29T22:08:54",
                "upload_time_iso_8601": "2020-09-29T22:08:54.523282Z",
                "url": "https://files.pythonhosted.org/packages/97/cf/b6720740b772c49d77bcc947825d35935d32ef8a189f1907fa617e1a9c3c/wasmtime-0.20.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "749b226b124337b0f5214a3238084a01",
                    "sha256": "3ee4c20fdda3d0515c4b35cba85ae11a4793242dcd73a12f2b26026004e64f0e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.20.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "749b226b124337b0f5214a3238084a01",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3416870,
                "upload_time": "2020-09-29T22:08:56",
                "upload_time_iso_8601": "2020-09-29T22:08:56.076273Z",
                "url": "https://files.pythonhosted.org/packages/bd/9b/9498d3de2a95095a5fee09915fa6b2bdf9d6ce0ff1ea0fd6382f7d5ff9df/wasmtime-0.20.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "36b6f1880a3ac981465b5a5b56b6a593",
                    "sha256": "0e104825ddea44a721228570613384263b47014e5339f5d682c49ff335beb43f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.20.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "36b6f1880a3ac981465b5a5b56b6a593",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4491101,
                "upload_time": "2020-09-29T22:08:57",
                "upload_time_iso_8601": "2020-09-29T22:08:57.595210Z",
                "url": "https://files.pythonhosted.org/packages/b5/c5/03a825e5d241ff52d9e9da4cdb848ffa4067ccbf5e4b4c5a027551125f94/wasmtime-0.20.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b57384d91bb8c6ae674141331aece47b",
                    "sha256": "391dcb15fa74dfb1b98996f0ab5a6d1ed8f97cc79524ca8e3650d7811ea7646e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.20.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "b57384d91bb8c6ae674141331aece47b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3004483,
                "upload_time": "2020-09-29T22:08:59",
                "upload_time_iso_8601": "2020-09-29T22:08:59.114369Z",
                "url": "https://files.pythonhosted.org/packages/76/92/abcde5b72f97077811829d2d62c73e04cdd50b9c2d2a407664d80b81b602/wasmtime-0.20.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.21.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.21.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.21.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b7595b3fcf8fd4d95640795ebd7dc27d",
                    "sha256": "62eab89e7f60ab919eabf97526638be41ff158941a5a7dc2275079360cf04262"
                },
                "downloads": -1,
                "filename": "wasmtime-0.21.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b7595b3fcf8fd4d95640795ebd7dc27d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7838734,
                "upload_time": "2020-11-05T15:57:42",
                "upload_time_iso_8601": "2020-11-05T15:57:42.022080Z",
                "url": "https://files.pythonhosted.org/packages/c3/e9/623143bc54fcfbafad8e323d43f495c20401c4f2ffd51234d60a1cb8448c/wasmtime-0.21.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d10098cd7156b6cf9cea7e4fd2105a98",
                    "sha256": "2bc335325b5f145c33045ba41e1372d5716e574cca60b07bf13600ad49617ee1"
                },
                "downloads": -1,
                "filename": "wasmtime-0.21.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "d10098cd7156b6cf9cea7e4fd2105a98",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3492267,
                "upload_time": "2020-11-05T15:57:43",
                "upload_time_iso_8601": "2020-11-05T15:57:43.632431Z",
                "url": "https://files.pythonhosted.org/packages/a0/10/c64d980546d5c07f294daa66513c481682981c26df7a407fe0f6e80ca332/wasmtime-0.21.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5870a42cb986fb60b74bf5498073c5f4",
                    "sha256": "5fb7f6c1444cbeb14d28f29d18d50cb4220820b7d3a82b2a05c020b6e55b700e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.21.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "5870a42cb986fb60b74bf5498073c5f4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4652535,
                "upload_time": "2020-11-05T15:57:44",
                "upload_time_iso_8601": "2020-11-05T15:57:44.816222Z",
                "url": "https://files.pythonhosted.org/packages/0c/89/0ed12ac1ab836c6b7114f21eba12c750bc0c442f7580255386708cf773d7/wasmtime-0.21.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e0bc8b80501448691176ed4fbb466bbe",
                    "sha256": "d50a1486fc3542afdd1ccb109efc6d72fa2900834e535cbdfd6ebcf575e9a708"
                },
                "downloads": -1,
                "filename": "wasmtime-0.21.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "e0bc8b80501448691176ed4fbb466bbe",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3034579,
                "upload_time": "2020-11-05T15:57:46",
                "upload_time_iso_8601": "2020-11-05T15:57:46.517186Z",
                "url": "https://files.pythonhosted.org/packages/f3/c5/31869e288426e5727d9f7de5a427a7095482727235f821a740cf075194d0/wasmtime-0.21.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.22.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.22.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.22.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "842db1d40b827f51993fcac1bc4726f6",
                    "sha256": "8b38cf31bf14f205796fd15c6285d8d09502298845e0ae19bbf9f6c8c5f618f4"
                },
                "downloads": -1,
                "filename": "wasmtime-0.22.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "842db1d40b827f51993fcac1bc4726f6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8256495,
                "upload_time": "2021-01-14T15:41:45",
                "upload_time_iso_8601": "2021-01-14T15:41:45.756358Z",
                "url": "https://files.pythonhosted.org/packages/b5/14/8ae2955478eab1fc2c1ff673c9adedbccf90101057f6dee641695af2ee61/wasmtime-0.22.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0175fc0d6ade9b9f4d35a6f5833e4705",
                    "sha256": "64d6f079086e37e1481a670ac26cef7faa319c22b5dbeffb063d1f7f4729ef7e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.22.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "0175fc0d6ade9b9f4d35a6f5833e4705",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3723027,
                "upload_time": "2021-01-14T15:41:47",
                "upload_time_iso_8601": "2021-01-14T15:41:47.135009Z",
                "url": "https://files.pythonhosted.org/packages/58/83/10a81dde5277f5d3a519bda79dba7271af8729d6aeef5f95f8799b9e230e/wasmtime-0.22.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "12885a885e57e35566a0bcc73b6f6b5d",
                    "sha256": "ef3af275710e4af98df0f4e8ff9046a9fb9d5a98d7a93f17c4a548d574108126"
                },
                "downloads": -1,
                "filename": "wasmtime-0.22.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "12885a885e57e35566a0bcc73b6f6b5d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4892518,
                "upload_time": "2021-01-14T15:41:48",
                "upload_time_iso_8601": "2021-01-14T15:41:48.299779Z",
                "url": "https://files.pythonhosted.org/packages/63/af/eb9d27386dbad980cc28ac1d4a6d3f5f419bf5dc8844cb4b1028f15e8ee9/wasmtime-0.22.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ed5544587ae3049835c020cbb2c329b2",
                    "sha256": "1e6337b4e18080226075944d9ba92231ec7361444f29c3ae0018fa00bf562ae7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.22.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "ed5544587ae3049835c020cbb2c329b2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3208955,
                "upload_time": "2021-01-14T15:41:49",
                "upload_time_iso_8601": "2021-01-14T15:41:49.526938Z",
                "url": "https://files.pythonhosted.org/packages/f2/a9/90da5b7a3a603b09d31dab185eb03d30dc9cf1993e960766db2712eea182/wasmtime-0.22.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.23.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.23.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.23.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5e7de44c9fac38379a5c94d87dae7127",
                    "sha256": "dab64081e2f268c2b9e9f0b9da763d26a1fe0e420d95b1c79e24429995aefc79"
                },
                "downloads": -1,
                "filename": "wasmtime-0.23.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5e7de44c9fac38379a5c94d87dae7127",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8286871,
                "upload_time": "2021-02-18T15:25:47",
                "upload_time_iso_8601": "2021-02-18T15:25:47.157955Z",
                "url": "https://files.pythonhosted.org/packages/31/0d/ffcc4a9e5946ee320db0641afbf3baed158d3041da3c484c50fb9ae89864/wasmtime-0.23.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fcd94f009cf78065e83e93ca0b6606f1",
                    "sha256": "ced64430b4a43fc675198970310dbd5072c8f90e235151b3157ea69c9801a1a4"
                },
                "downloads": -1,
                "filename": "wasmtime-0.23.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "fcd94f009cf78065e83e93ca0b6606f1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3724874,
                "upload_time": "2021-02-18T15:25:48",
                "upload_time_iso_8601": "2021-02-18T15:25:48.758807Z",
                "url": "https://files.pythonhosted.org/packages/cb/5d/a80a6b6b29ae9b90c150d232ca2b9566c733817d3a9d0347822fe7d6b088/wasmtime-0.23.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "75a92f118e02331a64a5336f203486b8",
                    "sha256": "1bc41a46c56fcd3836a9c019f31881015a690c2527b4ec791992db30ac55172f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.23.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "75a92f118e02331a64a5336f203486b8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4893661,
                "upload_time": "2021-02-18T15:25:49",
                "upload_time_iso_8601": "2021-02-18T15:25:49.893703Z",
                "url": "https://files.pythonhosted.org/packages/43/8f/7a22b8e70b2e6c23d25f162c0d5733492b1d39897bf4e4a012a4b9c23e23/wasmtime-0.23.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e21ccb02bb1eeefcfd8e3c66e057fbf7",
                    "sha256": "fdb7f4fb95f293ea9444f94299aba02967324adb56a89d97db958971a05b856f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.23.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "e21ccb02bb1eeefcfd8e3c66e057fbf7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3211316,
                "upload_time": "2021-02-18T15:25:51",
                "upload_time_iso_8601": "2021-02-18T15:25:51.328519Z",
                "url": "https://files.pythonhosted.org/packages/2f/f1/12e903d10ad04b8639266bb8ed003c8b25e65b0a59e476c20a39cb688101/wasmtime-0.23.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.24.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.24.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.24.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "290b6e200ffa086c2acf500298b2ca54",
                    "sha256": "ff5820d655d8a746ecaf7b783d2e1376217701fccb18ae4625b98671bbe3c2e4"
                },
                "downloads": -1,
                "filename": "wasmtime-0.24.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "290b6e200ffa086c2acf500298b2ca54",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8134280,
                "upload_time": "2021-03-05T14:59:05",
                "upload_time_iso_8601": "2021-03-05T14:59:05.813795Z",
                "url": "https://files.pythonhosted.org/packages/38/b0/3311d811eefaa427299dbb98b00841a0b9a94e41f0ec980d346ad89ac9f6/wasmtime-0.24.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9cf04238eb8965ecdb2ed34676ae3b5b",
                    "sha256": "a26a683bb6e96ae4ee95bf101cce33b3776866a952506a73213ad7e261f8fff2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.24.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "9cf04238eb8965ecdb2ed34676ae3b5b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3662338,
                "upload_time": "2021-03-05T14:59:07",
                "upload_time_iso_8601": "2021-03-05T14:59:07.351182Z",
                "url": "https://files.pythonhosted.org/packages/2b/97/daf3458ced9bc664c0ae5a379f62dbbdf737c359e3f419946e566516dfc6/wasmtime-0.24.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "edcb58cab85a40bccf85c043da9d680b",
                    "sha256": "6b993019b3f380557f9c0fff6781134cd6a282709a450e76665fc987e83b8487"
                },
                "downloads": -1,
                "filename": "wasmtime-0.24.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "edcb58cab85a40bccf85c043da9d680b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4798438,
                "upload_time": "2021-03-05T14:59:08",
                "upload_time_iso_8601": "2021-03-05T14:59:08.498901Z",
                "url": "https://files.pythonhosted.org/packages/6e/1e/99e8296973630086e6343deb8fb0273fe1ab84a384855584301d9d93e6b0/wasmtime-0.24.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2ee242efbc5db601b7f894586af2be6d",
                    "sha256": "0dbe4bc6b5be910923378334ed0ba0b84f6bc5bf2de67e0f9018d2f856a40279"
                },
                "downloads": -1,
                "filename": "wasmtime-0.24.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "2ee242efbc5db601b7f894586af2be6d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3153879,
                "upload_time": "2021-03-05T14:59:09",
                "upload_time_iso_8601": "2021-03-05T14:59:09.902960Z",
                "url": "https://files.pythonhosted.org/packages/62/98/dfe3e4944f450c1b292941307d5172f16cbbc2c9c283651b24c793f15ca3/wasmtime-0.24.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.25.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.25.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.25.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "42ca58990761cdafd75a8cbcc2f01b9e",
                    "sha256": "7b327ed9fa2e7f40130eaa4d21864621eca6632a614fc135e9e83223718cb6d9"
                },
                "downloads": -1,
                "filename": "wasmtime-0.25.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "42ca58990761cdafd75a8cbcc2f01b9e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8244625,
                "upload_time": "2021-03-16T22:00:32",
                "upload_time_iso_8601": "2021-03-16T22:00:32.631587Z",
                "url": "https://files.pythonhosted.org/packages/2d/28/327ce0e0801366e0a9031364d20fdffba7c645fdc8624be7f65a2b708697/wasmtime-0.25.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0df10a41e2e6de2327e13b56f56e2a87",
                    "sha256": "29b343743e6459b9e3e590b451f9827e086ce8a8010587d3e82424ea50b3d419"
                },
                "downloads": -1,
                "filename": "wasmtime-0.25.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "0df10a41e2e6de2327e13b56f56e2a87",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3705993,
                "upload_time": "2021-03-16T22:00:34",
                "upload_time_iso_8601": "2021-03-16T22:00:34.535233Z",
                "url": "https://files.pythonhosted.org/packages/49/8c/d2da06f4ab03e3f5530d9b1d051e23907d13675267fc577a1c9cbfd69e18/wasmtime-0.25.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9fca10d21f6c38e84761d837db92e14b",
                    "sha256": "b11df5c5a7e58ddda8890afa1aa96c0b672ce38462eca13f67a41cb7956226fa"
                },
                "downloads": -1,
                "filename": "wasmtime-0.25.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "9fca10d21f6c38e84761d837db92e14b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4872096,
                "upload_time": "2021-03-16T22:00:36",
                "upload_time_iso_8601": "2021-03-16T22:00:36.254821Z",
                "url": "https://files.pythonhosted.org/packages/f1/97/a83bcf0394e48fa7bb7c26233b5798817ffe0f0aa948e5b6772a0c2addd8/wasmtime-0.25.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9cb0c62ce56d7abd1cfbee2f9af1ad7a",
                    "sha256": "277ec0d2a780fe72a6d79dcbf08be26d99a8e4c53b1f3668a8397865be944e84"
                },
                "downloads": -1,
                "filename": "wasmtime-0.25.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "9cb0c62ce56d7abd1cfbee2f9af1ad7a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3195013,
                "upload_time": "2021-03-16T22:00:37",
                "upload_time_iso_8601": "2021-03-16T22:00:37.872790Z",
                "url": "https://files.pythonhosted.org/packages/c5/40/cc42e85cc9722f2ba4db9e55e8664c048cd117278333132e2f4f736c2f38/wasmtime-0.25.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.26.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.26.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.26.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3dd5de8b820c270488ac33e212580fbf",
                    "sha256": "4543973f49033dfcd0578389f2a74fa3f087bb2707d2913b8c81e5b7d069f3f7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.26.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3dd5de8b820c270488ac33e212580fbf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8944344,
                "upload_time": "2021-04-05T20:34:22",
                "upload_time_iso_8601": "2021-04-05T20:34:22.406894Z",
                "url": "https://files.pythonhosted.org/packages/3e/11/c82388ba83e76450f34af250ed0959906a845c94dec3c457227ffcd534ef/wasmtime-0.26.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f66da8498df32d0549225d5865401ba4",
                    "sha256": "e3e79183b1424b926a5e1d891d58eafb88197f8e8eb8ba4eb63c5efcf685d7be"
                },
                "downloads": -1,
                "filename": "wasmtime-0.26.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "f66da8498df32d0549225d5865401ba4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4349117,
                "upload_time": "2021-04-05T20:34:25",
                "upload_time_iso_8601": "2021-04-05T20:34:25.013959Z",
                "url": "https://files.pythonhosted.org/packages/7b/e1/498b961e7025f3427a1486099041e7d99f9f510dbb301a365c8aaf55a928/wasmtime-0.26.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "319420e9bdf9c518dfd3f39d1af19bf4",
                    "sha256": "10dc80dd28fafb369962be66636d82272c23b56aa8f19857d6e88592ddc06d92"
                },
                "downloads": -1,
                "filename": "wasmtime-0.26.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "319420e9bdf9c518dfd3f39d1af19bf4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5626696,
                "upload_time": "2021-04-05T20:34:26",
                "upload_time_iso_8601": "2021-04-05T20:34:26.645667Z",
                "url": "https://files.pythonhosted.org/packages/2d/9c/4df0d927e460a0bec0c20d90441d86eedb5836485377c69113b3d06a87ef/wasmtime-0.26.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1b8336de3f7032e862e8db5ba112a5fb",
                    "sha256": "0bc2bab0c28dff73b701537a153c211d590d4af0e082454d10df03f22d0ff6c2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.26.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "1b8336de3f7032e862e8db5ba112a5fb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3774649,
                "upload_time": "2021-04-05T20:34:28",
                "upload_time_iso_8601": "2021-04-05T20:34:28.198787Z",
                "url": "https://files.pythonhosted.org/packages/4e/4b/8206d6ae46645a8ca9ea254f6f5608d329c1245967eace4ac51c240cc7be/wasmtime-0.26.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.27.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.27.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.27.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "134a90f900e16d9777d2697478b13cbc",
                    "sha256": "0d0d20786385b2a4f1435b6b0480ac534cfadd8fd93908bb5001619c9623ef31"
                },
                "downloads": -1,
                "filename": "wasmtime-0.27.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "134a90f900e16d9777d2697478b13cbc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 9034550,
                "upload_time": "2021-05-22T00:23:53",
                "upload_time_iso_8601": "2021-05-22T00:23:53.657857Z",
                "url": "https://files.pythonhosted.org/packages/b9/94/dcd3c5f8d81f2e32fde03e416080bbe07033816a1b418851086a1417ebd2/wasmtime-0.27.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "703f9231e104f13ffc702fa4b09f68ed",
                    "sha256": "242100c859e65af1563ffe11c749c2ead5b970d7878acd0ae095a3cdb69c95da"
                },
                "downloads": -1,
                "filename": "wasmtime-0.27.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "703f9231e104f13ffc702fa4b09f68ed",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4403731,
                "upload_time": "2021-05-22T00:23:55",
                "upload_time_iso_8601": "2021-05-22T00:23:55.449859Z",
                "url": "https://files.pythonhosted.org/packages/f2/22/c4defff2bd9b6340bb284279685175bfd6efe17f29729621bbd62418f434/wasmtime-0.27.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "460043e6eac88ca50f8a2aa83f70121f",
                    "sha256": "945b9a874b38fc3e69a2efce0c8e2af7059e305f288a4ce1c0978d993ddf9d79"
                },
                "downloads": -1,
                "filename": "wasmtime-0.27.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "460043e6eac88ca50f8a2aa83f70121f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5675586,
                "upload_time": "2021-05-22T00:23:57",
                "upload_time_iso_8601": "2021-05-22T00:23:57.016895Z",
                "url": "https://files.pythonhosted.org/packages/f4/ca/fcf17aadcb1e108bd6f40d412313c1c255a6af4a8f703568e22a2dd978bd/wasmtime-0.27.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "319e3e7b8d8bee8d40abaf12cf3bfc5b",
                    "sha256": "8b783a2569e068ba87e6d8a5204fa3118cc84778ce250a444757e4b8c7ae2e53"
                },
                "downloads": -1,
                "filename": "wasmtime-0.27.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "319e3e7b8d8bee8d40abaf12cf3bfc5b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3808165,
                "upload_time": "2021-05-22T00:23:58",
                "upload_time_iso_8601": "2021-05-22T00:23:58.221472Z",
                "url": "https://files.pythonhosted.org/packages/4b/9f/d62402357de1b770e5a3690e9486f4b0afebd6770bcfde2259d0a2bc4ff7/wasmtime-0.27.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.28.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.28.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.28.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dc1a5e4ee8157b5ed6a53431a201d96e",
                    "sha256": "77fc3e46c344a13264e412edd06d1ef7013d8373659557c90be443cd3a32cb7d"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dc1a5e4ee8157b5ed6a53431a201d96e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8936530,
                "upload_time": "2021-06-09T20:22:49",
                "upload_time_iso_8601": "2021-06-09T20:22:49.345790Z",
                "url": "https://files.pythonhosted.org/packages/77/50/d0aad0aaa40481cb2bc8593de300c6b5e131162fac78d0a70a4957222edd/wasmtime-0.28.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5f3ecfc3a12499cec0a48ec7e6e67613",
                    "sha256": "a7bf4276da716503e06acff9205320489ba158d0f7add34856d7f08c465a5134"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "5f3ecfc3a12499cec0a48ec7e6e67613",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4364195,
                "upload_time": "2021-06-09T20:22:51",
                "upload_time_iso_8601": "2021-06-09T20:22:51.228866Z",
                "url": "https://files.pythonhosted.org/packages/e2/42/bc2d2cc7d1e51a35a45cd39e43ea37088f7aa902771527b8a391844586a2/wasmtime-0.28.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6f09cf50be77a6e36417e7d8a20b3695",
                    "sha256": "5adfc66b3c057a30f0bed2efa199d92081a213891fdf32f33a3d44fca07b650e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "6f09cf50be77a6e36417e7d8a20b3695",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5610507,
                "upload_time": "2021-06-09T20:22:52",
                "upload_time_iso_8601": "2021-06-09T20:22:52.994915Z",
                "url": "https://files.pythonhosted.org/packages/31/5c/81e36171ae595a614af14dca5b18bf397c5c2ef62c71b1d58d4850c35264/wasmtime-0.28.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "083addb1f47e0bbeff79b92adfa4fad7",
                    "sha256": "9963c78fbd123fc1e9cc42b2399446a96180019499d5690795381a0e422544c1"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "083addb1f47e0bbeff79b92adfa4fad7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3768804,
                "upload_time": "2021-06-09T20:22:54",
                "upload_time_iso_8601": "2021-06-09T20:22:54.463932Z",
                "url": "https://files.pythonhosted.org/packages/e5/30/2d13da0d67f240c0984ef67c665c63ca13c8ffd9f16bd9b272eed04a021e/wasmtime-0.28.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.28.1": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.28.1/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.28.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "86725730efdb9b7b0762927a40518860",
                    "sha256": "69f76bc4824000de0f5181751646125837c154c22c913547290c53b7c15d0925"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "86725730efdb9b7b0762927a40518860",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 9101063,
                "upload_time": "2021-07-26T16:15:06",
                "upload_time_iso_8601": "2021-07-26T16:15:06.056420Z",
                "url": "https://files.pythonhosted.org/packages/c5/5c/d6674a6bd064b1e3b98ff720dce5e20d32fc678c36b6d194faa70168df4e/wasmtime-0.28.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1ccccbba2a57b311ba27db490165abaf",
                    "sha256": "2786369b7dc122484486bb238ad80729931c251962cbbade8f71007d75f286b2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.1-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "1ccccbba2a57b311ba27db490165abaf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4514437,
                "upload_time": "2021-07-26T16:15:08",
                "upload_time_iso_8601": "2021-07-26T16:15:08.294278Z",
                "url": "https://files.pythonhosted.org/packages/39/03/5f6c9992f888e982e483b5b410a386f79c0df5533c8193e899c858921fc6/wasmtime-0.28.1-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ff43865688b06a2190628d64ac5e9327",
                    "sha256": "c5537300f1d6764224d03f899e76f54fdcf662e0e658e4205a1a7f1d8fbefa94"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.1-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "ff43865688b06a2190628d64ac5e9327",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5685610,
                "upload_time": "2021-07-26T16:15:09",
                "upload_time_iso_8601": "2021-07-26T16:15:09.849953Z",
                "url": "https://files.pythonhosted.org/packages/6d/1f/ca0a1128856ce1ec7211f2dda392d05dbdadd80a4b91eba1441f1ef6e3d5/wasmtime-0.28.1-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "64f8383a1ef16320385535e63e48f79a",
                    "sha256": "ec6fe32e062e42e3dead1180a52fab2b188a39b1e9438b1f0edb3cad008f903e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.28.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "64f8383a1ef16320385535e63e48f79a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3863485,
                "upload_time": "2021-07-26T16:15:11",
                "upload_time_iso_8601": "2021-07-26T16:15:11.510789Z",
                "url": "https://files.pythonhosted.org/packages/81/79/3fb5143f881af90b25da9814461046ab7b1ba2b6879ff8e649e0ca04c938/wasmtime-0.28.1-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.29.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.29.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.29.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "20ebd408a8c4ddc14b3494128a23e64a",
                    "sha256": "f5699cffbe6b79cbcc219274b8502501afd00dd0789ebb46383fc1bdc5c7aacd"
                },
                "downloads": -1,
                "filename": "wasmtime-0.29.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "20ebd408a8c4ddc14b3494128a23e64a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 9096983,
                "upload_time": "2021-08-03T17:34:13",
                "upload_time_iso_8601": "2021-08-03T17:34:13.630739Z",
                "url": "https://files.pythonhosted.org/packages/e7/52/4e01836a14a4e4d447ec9bbfd1e6c9c4771c9de8e09c679293f11d607097/wasmtime-0.29.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "81eeba39ffb0b14f2db4c8d9612b714f",
                    "sha256": "c07e89da4e924a4917dde210421fcef367ed7204ab14e15c7fd7c6141e7e5dc9"
                },
                "downloads": -1,
                "filename": "wasmtime-0.29.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "81eeba39ffb0b14f2db4c8d9612b714f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4501623,
                "upload_time": "2021-08-03T17:34:16",
                "upload_time_iso_8601": "2021-08-03T17:34:16.187180Z",
                "url": "https://files.pythonhosted.org/packages/13/97/e7a42ed18aa64dd8aa796c2f0f8d373f2960bc7321be37e70b1c9ab1a578/wasmtime-0.29.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7f95a2049d56fa35e13e05ee9229829e",
                    "sha256": "6612c2d1d91e336e113de3730bdb2a956a33e52e92d1cbc7d40274307ea86b9d"
                },
                "downloads": -1,
                "filename": "wasmtime-0.29.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7f95a2049d56fa35e13e05ee9229829e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5682829,
                "upload_time": "2021-08-03T17:34:17",
                "upload_time_iso_8601": "2021-08-03T17:34:17.730789Z",
                "url": "https://files.pythonhosted.org/packages/c8/86/96a17c1f879dfe0b2c635d3b619a397cd158ecdbdc5483ceedda2025e467/wasmtime-0.29.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6c64bfb99ce6d10d0fabacba889e360b",
                    "sha256": "a686e94df017d570c806a53ea27602c9c3b0397b011d286fd86746f65646be79"
                },
                "downloads": -1,
                "filename": "wasmtime-0.29.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "6c64bfb99ce6d10d0fabacba889e360b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3859241,
                "upload_time": "2021-08-03T17:34:19",
                "upload_time_iso_8601": "2021-08-03T17:34:19.591353Z",
                "url": "https://files.pythonhosted.org/packages/be/56/0c3239eab61a69da0924c82375c85f7034013bf76b901659aa12b5d15637/wasmtime-0.29.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "0.30.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.30.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.30.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f1eb26eadb97a1b4893c080f2e325474",
                    "sha256": "8b2b85d80408f8090997be9c5db8d6e2724d8967f7f357879a410b7ce7be0ae8"
                },
                "downloads": -1,
                "filename": "wasmtime-0.30.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f1eb26eadb97a1b4893c080f2e325474",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 8942266,
                "upload_time": "2021-09-17T19:17:07",
                "upload_time_iso_8601": "2021-09-17T19:17:07.768224Z",
                "url": "https://files.pythonhosted.org/packages/1c/cc/615374204bd360eaa2e7b426ea9dcd6e8692c5cbae67082295fc5e925ba5/wasmtime-0.30.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "551523413c786e164e06a7d4d5f0edf2",
                    "sha256": "5728a9555a1042c49a331db189f95ce158ae440ef9fbc98b71a39b5b9201cff8"
                },
                "downloads": -1,
                "filename": "wasmtime-0.30.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "551523413c786e164e06a7d4d5f0edf2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4395380,
                "upload_time": "2021-09-17T19:17:11",
                "upload_time_iso_8601": "2021-09-17T19:17:11.123648Z",
                "url": "https://files.pythonhosted.org/packages/96/06/38ddb3d3f7ab199ef8c1e313f6451a6d1b19137519542fb82c0e0aa4b419/wasmtime-0.30.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a06e17aaa0268f4decc60f556ed229ce",
                    "sha256": "9f6a83ead797430e1a63ef5fcd5e93cd2013f0dc67600c4130cf9a7f269ef748"
                },
                "downloads": -1,
                "filename": "wasmtime-0.30.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "a06e17aaa0268f4decc60f556ed229ce",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5580156,
                "upload_time": "2021-09-17T19:17:13",
                "upload_time_iso_8601": "2021-09-17T19:17:13.338868Z",
                "url": "https://files.pythonhosted.org/packages/ee/19/24bad181bfd97b5bc67dcf50297a0ecbe5ff8458bd05215520a481bcb36a/wasmtime-0.30.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "443c33c84180f780a224cb116cac0d68",
                    "sha256": "ca6fc2faf2658569d397ed386a435dbdb7d325eef58535ef24bb25d525f6d2fa"
                },
                "downloads": -1,
                "filename": "wasmtime-0.30.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "443c33c84180f780a224cb116cac0d68",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3756434,
                "upload_time": "2021-09-17T19:17:15",
                "upload_time_iso_8601": "2021-09-17T19:17:15.453169Z",
                "url": "https://files.pythonhosted.org/packages/59/c4/e83b323e69512bf6502a90ec2a8b64b0277b9ece0646aa0f63057900a406/wasmtime-0.30.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.31.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.31.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.31.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f1c7a86e4057959b9d451e4d37675d5",
                    "sha256": "c2ce482529a4ec9078e11dad65468ba762f26c037a1fc83e347bec78e9dd2705"
                },
                "downloads": -1,
                "filename": "wasmtime-0.31.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4f1c7a86e4057959b9d451e4d37675d5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3476270,
                "upload_time": "2021-10-29T15:30:38",
                "upload_time_iso_8601": "2021-10-29T15:30:38.883741Z",
                "url": "https://files.pythonhosted.org/packages/ea/75/68d8c0d2b234db442a926518388b9a3e986a5488d0e2eeff36d516ad3a2b/wasmtime-0.31.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ea442b0288dbd29f85f3d9b7b77811e3",
                    "sha256": "702a3a7d7ab7dc2a17bea0315ffe168561ecd37a4ea0fb92b58b02d0c04ba554"
                },
                "downloads": -1,
                "filename": "wasmtime-0.31.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "ea442b0288dbd29f85f3d9b7b77811e3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4097190,
                "upload_time": "2021-10-29T15:30:40",
                "upload_time_iso_8601": "2021-10-29T15:30:40.623934Z",
                "url": "https://files.pythonhosted.org/packages/48/de/3f2d13c028795d40a2a6d649c2fc4e23769890de0b3ddddfeee748f9b3b9/wasmtime-0.31.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e5fdb9ea02fa7731a6329158d762db94",
                    "sha256": "f042f05795c38356bb08bc3f4849a8b4930d7f3b917c58bc450d353be22d87f6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.31.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "e5fdb9ea02fa7731a6329158d762db94",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5308345,
                "upload_time": "2021-10-29T15:30:42",
                "upload_time_iso_8601": "2021-10-29T15:30:42.611596Z",
                "url": "https://files.pythonhosted.org/packages/a2/23/786ff087d7eb639d7c2b7bc6a4a582a3026eb2fc7625fd21218401798307/wasmtime-0.31.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "61d5a4f5dffeecbb996efec4b7c33ef6",
                    "sha256": "9137726b431abeec2d25fa733b95f977e57ad8cbee68c7e3b681ef4b2a21f5e2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.31.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "61d5a4f5dffeecbb996efec4b7c33ef6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5142194,
                "upload_time": "2021-10-29T15:30:44",
                "upload_time_iso_8601": "2021-10-29T15:30:44.528980Z",
                "url": "https://files.pythonhosted.org/packages/e0/72/22a2d47ac7716f658f6b807860c5ee1b7d769e210252cf59b6bfad4fac80/wasmtime-0.31.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b0152168aed44a9bffdd29d498084437",
                    "sha256": "55ef72f4ec7eb77029b665688d4e8338b87eb905ee336a714a687c5750d5f6c7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.31.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "b0152168aed44a9bffdd29d498084437",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3476275,
                "upload_time": "2021-10-29T15:30:45",
                "upload_time_iso_8601": "2021-10-29T15:30:45.957540Z",
                "url": "https://files.pythonhosted.org/packages/87/9f/f01efffb6dc34d1dd6fe89be2c4ec8c35bdacae01e9fca038f471a7076cc/wasmtime-0.31.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.32.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.32.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.32.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "73a04100605f2b3ee8105b1ec64d023e",
                    "sha256": "4a212a3a27fa5f9bbc05f2655bd7027b96881195df76dba3a9541915f8ad0cf9"
                },
                "downloads": -1,
                "filename": "wasmtime-0.32.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "73a04100605f2b3ee8105b1ec64d023e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3496384,
                "upload_time": "2021-12-13T22:56:55",
                "upload_time_iso_8601": "2021-12-13T22:56:55.133335Z",
                "url": "https://files.pythonhosted.org/packages/0d/22/690c39997af7315ea8092d0d7b7799cd905157d83ec08a67169035b1d862/wasmtime-0.32.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c4918bfb237e5f29846730821c51d248",
                    "sha256": "bdc30df14cdea3de1abb83917e2643a6cba6228d8cba17d0eb13cf2fd0c70d37"
                },
                "downloads": -1,
                "filename": "wasmtime-0.32.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "c4918bfb237e5f29846730821c51d248",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4132138,
                "upload_time": "2021-12-13T22:56:56",
                "upload_time_iso_8601": "2021-12-13T22:56:56.800041Z",
                "url": "https://files.pythonhosted.org/packages/70/8f/1fecb24854c29e6899b061aef2c445c8d7d248adb573ed8abceea26464f6/wasmtime-0.32.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "db2fefda11ff9e539521dd77e9b39c2d",
                    "sha256": "2912ebc2902398eaa7fc97bfc4b52966de40e6dcfca06be15d6a4f2d8f775995"
                },
                "downloads": -1,
                "filename": "wasmtime-0.32.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "db2fefda11ff9e539521dd77e9b39c2d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5342856,
                "upload_time": "2021-12-13T22:56:58",
                "upload_time_iso_8601": "2021-12-13T22:56:58.746579Z",
                "url": "https://files.pythonhosted.org/packages/a8/54/feb52cddf5a770a616afae23fa124f6e99a8959c9170f9fb7235e2da00b6/wasmtime-0.32.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e247d68f3c918c6a48604a06d35de85f",
                    "sha256": "24a35b9ff6553693e05a98193da289833f49c763c39d738656bbeda57dd55c01"
                },
                "downloads": -1,
                "filename": "wasmtime-0.32.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "e247d68f3c918c6a48604a06d35de85f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5160211,
                "upload_time": "2021-12-13T22:57:00",
                "upload_time_iso_8601": "2021-12-13T22:57:00.364883Z",
                "url": "https://files.pythonhosted.org/packages/10/11/077bb3657545a4a7ed2a65e8dbef9176e59de089f59cbb17cc110ac129d5/wasmtime-0.32.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d998c7cead9df49c2459ebb96e99a82d",
                    "sha256": "0ccfb109d2c9f3bdcf771151ac937abeea80f60e22a4ca7849de33ff579ff41f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.32.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "d998c7cead9df49c2459ebb96e99a82d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3496390,
                "upload_time": "2021-12-13T22:57:01",
                "upload_time_iso_8601": "2021-12-13T22:57:01.778321Z",
                "url": "https://files.pythonhosted.org/packages/e6/d4/2c5c90f0eeec13adc9fce39ba0ba95a7a8e34c12653c03b469681cad2366/wasmtime-0.32.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.33.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.33.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.33.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0dff72131568f992ad164afd5dd1485a",
                    "sha256": "ee47bf00702fcaaa398b534764e19abab755498f57d16882fddb61d38607c5a8"
                },
                "downloads": -1,
                "filename": "wasmtime-0.33.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0dff72131568f992ad164afd5dd1485a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3494479,
                "upload_time": "2022-01-07T21:01:51",
                "upload_time_iso_8601": "2022-01-07T21:01:51.124357Z",
                "url": "https://files.pythonhosted.org/packages/98/31/3dcda7a99f0546deaafc6e9d9495376aa227c33a3a5eab936b6b78b0cf95/wasmtime-0.33.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d9152544368cd07320b1b89cddc32e07",
                    "sha256": "8adcfbbc6d7874404a45d801fa3835a6ac316360c2ed7f6851fc805ddb1b4e6e"
                },
                "downloads": -1,
                "filename": "wasmtime-0.33.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "d9152544368cd07320b1b89cddc32e07",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4128697,
                "upload_time": "2022-01-07T21:01:52",
                "upload_time_iso_8601": "2022-01-07T21:01:52.701159Z",
                "url": "https://files.pythonhosted.org/packages/fb/65/96f331093934ba5191cd1985d232ae7ca4455b4af41cc52c0e41c78ebda3/wasmtime-0.33.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4a8c166dab1695de1e9fe98c52f4aaf5",
                    "sha256": "d76bc8f90c606cf451865a56cea8f4ce50bc8b41191b5bdcfee77a41dab5c819"
                },
                "downloads": -1,
                "filename": "wasmtime-0.33.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "4a8c166dab1695de1e9fe98c52f4aaf5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5342487,
                "upload_time": "2022-01-07T21:01:54",
                "upload_time_iso_8601": "2022-01-07T21:01:54.623940Z",
                "url": "https://files.pythonhosted.org/packages/57/f8/0f855da63b0755856e7b6f740c631f271254a7564bbf35cc883b24580245/wasmtime-0.33.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "776ee7a495935e9941a6c5907910638e",
                    "sha256": "5324f9978f904404bc6424f4dcdd927f812752ff77fc03450ae288024776c0ed"
                },
                "downloads": -1,
                "filename": "wasmtime-0.33.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "776ee7a495935e9941a6c5907910638e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5165133,
                "upload_time": "2022-01-07T21:01:56",
                "upload_time_iso_8601": "2022-01-07T21:01:56.171055Z",
                "url": "https://files.pythonhosted.org/packages/37/a1/b82b30f0e21fdeee01c05b43fb73241d4602212858754f27805ba502f34c/wasmtime-0.33.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "37ba5b2d139576fc34228e5486e67033",
                    "sha256": "3629a0077af0e8abf5d601be5f6d518fae2604d94062d50a83766e7e47335b4c"
                },
                "downloads": -1,
                "filename": "wasmtime-0.33.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "37ba5b2d139576fc34228e5486e67033",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3494487,
                "upload_time": "2022-01-07T21:01:57",
                "upload_time_iso_8601": "2022-01-07T21:01:57.781153Z",
                "url": "https://files.pythonhosted.org/packages/45/b6/099fbe67458d2fdd5a5e326cf47c1e0234a7de8dea116daba83340232447/wasmtime-0.33.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.34.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.34.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.34.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f84383397ef9fc77231688cd4e31ddf8",
                    "sha256": "0d65ab263f89ca2e8be9b970b2645e59c1e0cb6bccddafd3aca1e9d21692260c"
                },
                "downloads": -1,
                "filename": "wasmtime-0.34.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f84383397ef9fc77231688cd4e31ddf8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3473299,
                "upload_time": "2022-02-10T17:02:37",
                "upload_time_iso_8601": "2022-02-10T17:02:37.941670Z",
                "url": "https://files.pythonhosted.org/packages/f6/13/421744128e4ed07ec2344e5e48d8ace42473f922b4940191a484441014c9/wasmtime-0.34.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f42c56cd674867ecd919ba4bce4c9dc6",
                    "sha256": "1927b3b259d97837b3159e1a77d125342636ac7b9e9c1cacd0dca777405034b3"
                },
                "downloads": -1,
                "filename": "wasmtime-0.34.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "f42c56cd674867ecd919ba4bce4c9dc6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4104469,
                "upload_time": "2022-02-10T17:02:39",
                "upload_time_iso_8601": "2022-02-10T17:02:39.826108Z",
                "url": "https://files.pythonhosted.org/packages/de/74/d7fe4695d2e98506a1d0da54fa19d01be1750a5643ea93cb47aebc9497f7/wasmtime-0.34.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a331011d0f5e9d606796f30cb1419c3f",
                    "sha256": "f88bd6b61d9c22f263dbcfa9a0df8c84093f302ac20843c075ab2784278613ed"
                },
                "downloads": -1,
                "filename": "wasmtime-0.34.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "a331011d0f5e9d606796f30cb1419c3f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5438283,
                "upload_time": "2022-02-10T17:02:41",
                "upload_time_iso_8601": "2022-02-10T17:02:41.543039Z",
                "url": "https://files.pythonhosted.org/packages/e6/ca/bea0a85dc387110270b6ed3bfddc619fa194bc85c66afd3a465bb7886dc1/wasmtime-0.34.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "aceb12c58ee932688068a6bd90349fa1",
                    "sha256": "97aa225a9c61273249c9f0f7881d02a45cec2ece3d562abfd3622928a28bd060"
                },
                "downloads": -1,
                "filename": "wasmtime-0.34.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "aceb12c58ee932688068a6bd90349fa1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5237492,
                "upload_time": "2022-02-10T17:02:43",
                "upload_time_iso_8601": "2022-02-10T17:02:43.023996Z",
                "url": "https://files.pythonhosted.org/packages/9b/ee/3e2676c0a584b8202b85d1d0757de6b79c27118db744a59f3d6fe84427a2/wasmtime-0.34.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e29e5df72dd1895343acf03d13732b3f",
                    "sha256": "063a01fea9e3aed3873b0ffe2aaee289362159dd8ddc5a34e907f25e743ee249"
                },
                "downloads": -1,
                "filename": "wasmtime-0.34.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "e29e5df72dd1895343acf03d13732b3f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3473307,
                "upload_time": "2022-02-10T17:02:44",
                "upload_time_iso_8601": "2022-02-10T17:02:44.332887Z",
                "url": "https://files.pythonhosted.org/packages/e6/4e/cb7dc5e7096d99e6aa967c86c2770d8da454e0d64fb152b7c0a7b97bee4e/wasmtime-0.34.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.35.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.35.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.35.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "08ef353dbf6f5ccafa8ef8d31f9c795c",
                    "sha256": "d9b933bf28f6ccec4339c494bb6eb5d13a88b1f853d8b2aa1b02dc8c489ecde4"
                },
                "downloads": -1,
                "filename": "wasmtime-0.35.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "08ef353dbf6f5ccafa8ef8d31f9c795c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3330237,
                "upload_time": "2022-03-08T15:29:42",
                "upload_time_iso_8601": "2022-03-08T15:29:42.843914Z",
                "url": "https://files.pythonhosted.org/packages/76/00/7af00b05106910d9845911ccfcd6b43de905f6ef1afa25b418a929a2ce15/wasmtime-0.35.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8bdbb608230017d27771ec7df7c890f6",
                    "sha256": "bd43f1683772cf99a74ccccb6fc8f6e5816071ded58aaff2fca30cfdda80ba68"
                },
                "downloads": -1,
                "filename": "wasmtime-0.35.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "8bdbb608230017d27771ec7df7c890f6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3943374,
                "upload_time": "2022-03-08T15:29:44",
                "upload_time_iso_8601": "2022-03-08T15:29:44.914049Z",
                "url": "https://files.pythonhosted.org/packages/7d/30/083b985c61055d886c51c76942c9b2175c7a13ba14f7c3cad2635696e7a2/wasmtime-0.35.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4261c2692410b4e7cf15196dee11ed5c",
                    "sha256": "4440e4bdd0331133252ea62fd7f76cc716a5bf52d85b4c0cc575104332b87510"
                },
                "downloads": -1,
                "filename": "wasmtime-0.35.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "4261c2692410b4e7cf15196dee11ed5c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5203268,
                "upload_time": "2022-03-08T15:29:46",
                "upload_time_iso_8601": "2022-03-08T15:29:46.527604Z",
                "url": "https://files.pythonhosted.org/packages/1d/2c/6ee0ca2c6059f9800de80c5c9cac5019dc8f221cf662be8f581e10261a9a/wasmtime-0.35.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2c878c59317eded1b91a12343614d2b2",
                    "sha256": "9a58d4934c52a1619e86cd21b483cde1aa0435904866095d2b1b2cf363e45163"
                },
                "downloads": -1,
                "filename": "wasmtime-0.35.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "2c878c59317eded1b91a12343614d2b2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4995080,
                "upload_time": "2022-03-08T15:29:48",
                "upload_time_iso_8601": "2022-03-08T15:29:48.669354Z",
                "url": "https://files.pythonhosted.org/packages/35/87/d8bb6b930926a28662fa14dd20c110df3efcd554b52dc088d51bf08938b6/wasmtime-0.35.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a0e600621d9ec30063f6cfdf73c26f87",
                    "sha256": "362d8e7f3a738a0e9fa03740fefdfae1e786ca78af7325d23d8a02ffedbf70e6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.35.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "a0e600621d9ec30063f6cfdf73c26f87",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3330243,
                "upload_time": "2022-03-08T15:29:49",
                "upload_time_iso_8601": "2022-03-08T15:29:49.900114Z",
                "url": "https://files.pythonhosted.org/packages/45/2f/1f9b2274be2b6763f1580c59c320670ab1f80c2c2f53a6d4f2635ffd33f9/wasmtime-0.35.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.36.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.36.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.36.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5e99b115dcd510ca99b8618104c5fe98",
                    "sha256": "016c90d93d084565ea8f3078fc3720b12257e43d02ffdce682589d3f2cbf79cb"
                },
                "downloads": -1,
                "filename": "wasmtime-0.36.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5e99b115dcd510ca99b8618104c5fe98",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3266309,
                "upload_time": "2022-04-26T15:44:10",
                "upload_time_iso_8601": "2022-04-26T15:44:10.000068Z",
                "url": "https://files.pythonhosted.org/packages/e9/54/6f77a15301bd70209a9bd5fd4c0c5d3bc1fa4837da5356fb2a66677e20f1/wasmtime-0.36.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "72b522848e8b2848fbaf9dadb0effb67",
                    "sha256": "21ce28c3143ccf44cdc99b0e15c4cdce4253f682d6d099f299364a6b7a197fc6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.36.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "72b522848e8b2848fbaf9dadb0effb67",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3873382,
                "upload_time": "2022-04-26T15:44:11",
                "upload_time_iso_8601": "2022-04-26T15:44:11.976905Z",
                "url": "https://files.pythonhosted.org/packages/2c/f5/942a1400a34a8b8b1818f4918b2b1b8408305136aa3d8bedc578dc02fdda/wasmtime-0.36.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bc8a983459fc09a2bb128bde4b97565f",
                    "sha256": "5d4efa7168422a7f290d311655c7d23b4e5d08504baecdbe356befe005e667f3"
                },
                "downloads": -1,
                "filename": "wasmtime-0.36.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "bc8a983459fc09a2bb128bde4b97565f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5125876,
                "upload_time": "2022-04-26T15:44:13",
                "upload_time_iso_8601": "2022-04-26T15:44:13.264884Z",
                "url": "https://files.pythonhosted.org/packages/8a/31/972a01728f7e47eb297d80e11932971b78d16921f6c6ac910f62fceb2810/wasmtime-0.36.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c5ffd7fb4012949695815da0caef48a5",
                    "sha256": "7ef98f87469a15c7e19052f4dbff65b06ecabac3bec29ce366e67d278f74eb0f"
                },
                "downloads": -1,
                "filename": "wasmtime-0.36.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "c5ffd7fb4012949695815da0caef48a5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4939529,
                "upload_time": "2022-04-26T15:44:15",
                "upload_time_iso_8601": "2022-04-26T15:44:15.020444Z",
                "url": "https://files.pythonhosted.org/packages/95/f9/e0785a4fac7a53cc5d5903e4d9f7e5672f06fe4f148ecdc0be5bb6e2ebab/wasmtime-0.36.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ef49af742177c8723769ce406062a3c5",
                    "sha256": "cf1fa53cad9cf5acfc1f0780ce8b938faa824ea4d005ae11a6e6f6099168893c"
                },
                "downloads": -1,
                "filename": "wasmtime-0.36.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "ef49af742177c8723769ce406062a3c5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3266316,
                "upload_time": "2022-04-26T15:44:16",
                "upload_time_iso_8601": "2022-04-26T15:44:16.768958Z",
                "url": "https://files.pythonhosted.org/packages/31/10/736e1dde82107899082dbaf3d15b6a0921c404b90d37ac710c0cf5d40657/wasmtime-0.36.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.37.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.37.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.37.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "be7842c644254a6b5e4db1103fd546d8",
                    "sha256": "c34d0e62c01b5232c1a015a19d8c5881b00e6c7c35d71fc146618783e689aaa7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.37.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "be7842c644254a6b5e4db1103fd546d8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3156122,
                "upload_time": "2022-06-15T15:43:41",
                "upload_time_iso_8601": "2022-06-15T15:43:41.839219Z",
                "url": "https://files.pythonhosted.org/packages/06/8e/414f3504ee1db428dd9aa3fc1a0c35ee707ce6e1e7d84dd8511c510ee6c4/wasmtime-0.37.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b51f9a48a8173dd99b125d13ba5a6351",
                    "sha256": "b04d8ce26a2d871c890014649a03af789722ff47e7efac8cbb96b065db3337a2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.37.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "b51f9a48a8173dd99b125d13ba5a6351",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3827567,
                "upload_time": "2022-06-15T15:43:43",
                "upload_time_iso_8601": "2022-06-15T15:43:43.695529Z",
                "url": "https://files.pythonhosted.org/packages/c3/4f/daf647a082a5ba3dc60754561cc012b78f2ef9f9240e9f94ce8ad56d8f5e/wasmtime-0.37.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "63adcf32d192283731c2fd72561c8345",
                    "sha256": "5de906ddf2fb73f6847e7c9b6cec65f7ca86a6fb38b35c9e30e8c9de4f397427"
                },
                "downloads": -1,
                "filename": "wasmtime-0.37.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "63adcf32d192283731c2fd72561c8345",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5124889,
                "upload_time": "2022-06-15T15:43:45",
                "upload_time_iso_8601": "2022-06-15T15:43:45.771835Z",
                "url": "https://files.pythonhosted.org/packages/3b/2c/c44dfe6140a1ab45380a56de816555785f88b144ead3b86e8a4346eb3f3a/wasmtime-0.37.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f4a78cd2cad300976ea8cddd253f9eed",
                    "sha256": "c8a8cd87fc73c8987a9e5245e59ca716bf17581a090419f59591ff49a3e98fa1"
                },
                "downloads": -1,
                "filename": "wasmtime-0.37.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "f4a78cd2cad300976ea8cddd253f9eed",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5012516,
                "upload_time": "2022-06-15T15:43:47",
                "upload_time_iso_8601": "2022-06-15T15:43:47.778718Z",
                "url": "https://files.pythonhosted.org/packages/4d/e6/b569722eb0b6acdcae4b90c3741e89c925bf9eeeb8cee26b62c36b6fd6d0/wasmtime-0.37.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "52889da484b90edb50a0372fd9b212c5",
                    "sha256": "1e30cd0c6dd3d6b44da1bba9b686ebee4b45cb9c573c02c51d7d4646139c4d63"
                },
                "downloads": -1,
                "filename": "wasmtime-0.37.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "52889da484b90edb50a0372fd9b212c5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3156129,
                "upload_time": "2022-06-15T15:43:49",
                "upload_time_iso_8601": "2022-06-15T15:43:49.998731Z",
                "url": "https://files.pythonhosted.org/packages/64/62/366e77bbc229723ed8dfe7a049882488ff3501f8a667c99a42abe68ad185/wasmtime-0.37.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.38.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.38.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.38.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1e0dd96d3210ac388b7533c28df3b844",
                    "sha256": "69df8e73817a8483454fef71f5eca37f970e7dcd89ef4c4c6eba0bcfa9807c67"
                },
                "downloads": -1,
                "filename": "wasmtime-0.38.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1e0dd96d3210ac388b7533c28df3b844",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3221343,
                "upload_time": "2022-06-21T17:19:47",
                "upload_time_iso_8601": "2022-06-21T17:19:47.407890Z",
                "url": "https://files.pythonhosted.org/packages/6c/aa/98cbb06db20e276237de195a3eec676d624e9280dee335db723affd8db58/wasmtime-0.38.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3ae76af1c5544bd5582011e5d0d4d083",
                    "sha256": "78c283a25dce82665634e421ae369a0b11e3ff39bd3f621ebb5c266afa59a2d7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.38.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "3ae76af1c5544bd5582011e5d0d4d083",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3898530,
                "upload_time": "2022-06-21T17:19:49",
                "upload_time_iso_8601": "2022-06-21T17:19:49.495409Z",
                "url": "https://files.pythonhosted.org/packages/5e/e1/2aec232249520671a9a97aec60233b009c53f6a38f6357c6affdb0fb5d8b/wasmtime-0.38.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3769ee5878b75181e725c617d9ddf0b6",
                    "sha256": "cb5ef3225da353c95f9ec721e61979ed57299fbcffbc4ecdbe5e9cc699035066"
                },
                "downloads": -1,
                "filename": "wasmtime-0.38.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "3769ee5878b75181e725c617d9ddf0b6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5134743,
                "upload_time": "2022-06-21T17:19:51",
                "upload_time_iso_8601": "2022-06-21T17:19:51.441026Z",
                "url": "https://files.pythonhosted.org/packages/21/d6/43cc06924b87211a357eb78f894a39a731d34853293e5f63ebf923791e52/wasmtime-0.38.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "85b38ba9fe06fd350d31dabf71fcdf2d",
                    "sha256": "63bd31ce0d7db5968da51316f49d64081b9f0aff04df2a063b39df475a5f1bc2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.38.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "85b38ba9fe06fd350d31dabf71fcdf2d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5049672,
                "upload_time": "2022-06-21T17:19:52",
                "upload_time_iso_8601": "2022-06-21T17:19:52.869577Z",
                "url": "https://files.pythonhosted.org/packages/b3/a0/36ada9294db939a1f4401527fc0b17f9d29aa574b81f2831c0e3a328b6af/wasmtime-0.38.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7018c55f138d598257f2fc1d4dd4e42b",
                    "sha256": "30d2210fb66cf8bf19b25b8beac6d8a848dd9f963ae31cd5f39a1e157f868dcc"
                },
                "downloads": -1,
                "filename": "wasmtime-0.38.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "7018c55f138d598257f2fc1d4dd4e42b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3221351,
                "upload_time": "2022-06-21T17:19:54",
                "upload_time_iso_8601": "2022-06-21T17:19:54.246638Z",
                "url": "https://files.pythonhosted.org/packages/df/6c/051f6b5e496c3a4a69eaa6af3afc07e38292e62991e50674ed756ced760f/wasmtime-0.38.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.39.1": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.39.1/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.39.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5fe9a70cae5d8cb81fbc6754e1628e62",
                    "sha256": "c72e8301368e86aa48f53a02665d2a7b971dab059667fb1997f3ba9f1d15a6e5"
                },
                "downloads": -1,
                "filename": "wasmtime-0.39.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5fe9a70cae5d8cb81fbc6754e1628e62",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3318981,
                "upload_time": "2022-07-21T20:33:27",
                "upload_time_iso_8601": "2022-07-21T20:33:27.278897Z",
                "url": "https://files.pythonhosted.org/packages/69/f1/9d9879c9f4b5b1eb08cd24029f2ad2a7fa9b0ce87ad4d410a49b801ca0fe/wasmtime-0.39.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9ac895d4bdcf05fe0aa90c5a04ba4837",
                    "sha256": "867cc33313bfe1f5fe14f849ebbd87921626e8df3d569b0cc06f9d84e0363215"
                },
                "downloads": -1,
                "filename": "wasmtime-0.39.1-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "9ac895d4bdcf05fe0aa90c5a04ba4837",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4005797,
                "upload_time": "2022-07-21T20:33:29",
                "upload_time_iso_8601": "2022-07-21T20:33:29.818833Z",
                "url": "https://files.pythonhosted.org/packages/4e/c7/885aa7f6a15b6a959db9a608a6854733fd230cb5f0b91cd4e9d3f3b799ce/wasmtime-0.39.1-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7e8b09c7fb797e19fdc2f65582b55798",
                    "sha256": "48c33ff2ca3af5e35cdde3863d29992562a389a122f7c3f0063120426a9313cd"
                },
                "downloads": -1,
                "filename": "wasmtime-0.39.1-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7e8b09c7fb797e19fdc2f65582b55798",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5314935,
                "upload_time": "2022-07-21T20:33:31",
                "upload_time_iso_8601": "2022-07-21T20:33:31.648973Z",
                "url": "https://files.pythonhosted.org/packages/b4/68/9c2458bdd4004f3baa3709e993c4ebc0dea0117816cf1c36751ecd3d6dde/wasmtime-0.39.1-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4a42fd1e46972e3687c57e3bb370cb89",
                    "sha256": "c9dd8ae260020ffe635c0f617fd58e4a6f663b79c5c7c9daeae4b40ae504c803"
                },
                "downloads": -1,
                "filename": "wasmtime-0.39.1-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "4a42fd1e46972e3687c57e3bb370cb89",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5241953,
                "upload_time": "2022-07-21T20:33:33",
                "upload_time_iso_8601": "2022-07-21T20:33:33.712970Z",
                "url": "https://files.pythonhosted.org/packages/95/9c/e950bb3c92e89d95e99236594b7c267c9d41ee53a8f98da438850195ce60/wasmtime-0.39.1-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0c6adb954b2ea5ee05e3918b3754e6df",
                    "sha256": "5c91dde02e2ed4433a95e0a341f462c86d4cb41caf15af0c3a92534aa62256f2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.39.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "0c6adb954b2ea5ee05e3918b3754e6df",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3318988,
                "upload_time": "2022-07-21T20:33:36",
                "upload_time_iso_8601": "2022-07-21T20:33:36.374588Z",
                "url": "https://files.pythonhosted.org/packages/df/da/09f23ce95fef47c8c24d07930eaf4e8a99b2ba7e8dbadcc729af3e5cc046/wasmtime-0.39.1-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.40.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/0.40.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "flake8 (==4.0.1) ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "0.40.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b39e1d425d20d389bf7565333d2031b8",
                    "sha256": "1d3f62b8ab859ee6504250c6d48106358af47c1631d61df0639932fa5b121fac"
                },
                "downloads": -1,
                "filename": "wasmtime-0.40.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b39e1d425d20d389bf7565333d2031b8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3348830,
                "upload_time": "2022-08-30T14:50:29",
                "upload_time_iso_8601": "2022-08-30T14:50:29.734551Z",
                "url": "https://files.pythonhosted.org/packages/6e/3c/6160d9dfa38ad9f8a5da70fa53e163cf8689ac5d746a0778da89840558db/wasmtime-0.40.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7c13888702593f6469cb2471def370d7",
                    "sha256": "369f69eba3ec98803bc6196c6dee34dec1bc2b54e8f36bff8d55f2dd14818494"
                },
                "downloads": -1,
                "filename": "wasmtime-0.40.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7c13888702593f6469cb2471def370d7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4052046,
                "upload_time": "2022-08-30T14:50:31",
                "upload_time_iso_8601": "2022-08-30T14:50:31.873038Z",
                "url": "https://files.pythonhosted.org/packages/52/6c/f232a5e1f6d9255cb4e562bc29928c4d372daf1a6a0939e719d4326bb6c2/wasmtime-0.40.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f27845446d14a7af2c7129068d4726c",
                    "sha256": "6a1db0a7a890b2be7e9f829ee514343550d0011d55cdf87cafaee0bbcfddcfbf"
                },
                "downloads": -1,
                "filename": "wasmtime-0.40.0-py3-none-macosx_11_0_arm64.whl",
                "has_sig": false,
                "md5_digest": "4f27845446d14a7af2c7129068d4726c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3585524,
                "upload_time": "2022-08-30T14:50:34",
                "upload_time_iso_8601": "2022-08-30T14:50:34.096662Z",
                "url": "https://files.pythonhosted.org/packages/f3/e7/d848ce16b35b011f7281c67aa31b271b31867c2c6cd1b465b762a9190a6f/wasmtime-0.40.0-py3-none-macosx_11_0_arm64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9831853b47450a2b6e21a110230397b6",
                    "sha256": "d0193d8ea939075a8b2bfe4228b99684fb9d8a6673295ecbbf50736bfcaf90e6"
                },
                "downloads": -1,
                "filename": "wasmtime-0.40.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "9831853b47450a2b6e21a110230397b6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5315764,
                "upload_time": "2022-08-30T14:50:35",
                "upload_time_iso_8601": "2022-08-30T14:50:35.840914Z",
                "url": "https://files.pythonhosted.org/packages/39/3b/326b5ba0233ed327dc1a01daf020576237718c6b4cea45baa15cfe4343b2/wasmtime-0.40.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "80ddce855c942f608e8877608c822d75",
                    "sha256": "cbdadf697198d995241a994f26883ab7538c67d5330da991a39655f9ccef6841"
                },
                "downloads": -1,
                "filename": "wasmtime-0.40.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "80ddce855c942f608e8877608c822d75",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5198847,
                "upload_time": "2022-08-30T14:50:37",
                "upload_time_iso_8601": "2022-08-30T14:50:37.866232Z",
                "url": "https://files.pythonhosted.org/packages/e9/6a/dd3fa4bb980eb6f6315642c1e97e558af18d4b4566b6c24a369714f6f136/wasmtime-0.40.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9afed746d1a17ec1d7c5af3386128edb",
                    "sha256": "7e128c26f11ae0c71861c75618c99a6dbbedd982462cd29f57422b440f6cab76"
                },
                "downloads": -1,
                "filename": "wasmtime-0.40.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "9afed746d1a17ec1d7c5af3386128edb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3348838,
                "upload_time": "2022-08-30T14:50:40",
                "upload_time_iso_8601": "2022-08-30T14:50:40.369067Z",
                "url": "https://files.pythonhosted.org/packages/d9/16/e45d8650b1d4e3873dab3b4f27055bda0128d4a09bcc412f2aad355100bb/wasmtime-0.40.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.9.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python",
                "Programming Language :: Rust"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": "",
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/wasmtime/0.9.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "",
            "version": "0.9.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c0ed10a0f883b1b8d271a86c0b78014d",
                    "sha256": "27af1736b2a02d4811fafcdc7ab472439f16513246f9badb89702850793e14ae"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "c0ed10a0f883b1b8d271a86c0b78014d",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2216464,
                "upload_time": "2020-01-10T03:04:55",
                "upload_time_iso_8601": "2020-01-10T03:04:55.118782Z",
                "url": "https://files.pythonhosted.org/packages/ec/c8/cbb35d3a980acaac910bc6c9df1e034c29fb56836f316f7fa5dc4d32234c/wasmtime-0.9.0-cp36-cp36m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "204304e5c21f5fb4cc7d1498b4105bb2",
                    "sha256": "fb1f4a8ed602d7d6956814e48c4789d2cc3d80600abd1be4fa33faa24f90acf2"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp36-cp36m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "204304e5c21f5fb4cc7d1498b4105bb2",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 2999634,
                "upload_time": "2020-01-10T03:04:57",
                "upload_time_iso_8601": "2020-01-10T03:04:57.048240Z",
                "url": "https://files.pythonhosted.org/packages/84/2b/7ebe5e9a5742db94461e8546822298612b3472684c3495c7a0d48942fad3/wasmtime-0.9.0-cp36-cp36m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fc8adc411d119d7b129eb7638910b48d",
                    "sha256": "4827025b572ff9b3b7aeca2a69bc7bbe9fbef570e78aa426f352f2449df4e242"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "fc8adc411d119d7b129eb7638910b48d",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 1855121,
                "upload_time": "2020-01-10T03:04:59",
                "upload_time_iso_8601": "2020-01-10T03:04:59.025976Z",
                "url": "https://files.pythonhosted.org/packages/f6/fa/cb7f5fc60b4c62776d4c7ab30d72db50fd2ccb7f45fc06548aaa70f00b7c/wasmtime-0.9.0-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "75290e448aab26ec6bdb7f43663baf3e",
                    "sha256": "e5359f4c3276994c9982f088e5fac24708111ac82a8416ebcbeeb35b6240e2cb"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "75290e448aab26ec6bdb7f43663baf3e",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2216199,
                "upload_time": "2020-01-10T03:05:01",
                "upload_time_iso_8601": "2020-01-10T03:05:01.222782Z",
                "url": "https://files.pythonhosted.org/packages/d8/88/4a027e224c8188d2d836364edcd6bece7a16bf59b7a300693b5a80b79290/wasmtime-0.9.0-cp37-cp37m-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fc83cd276e4f5692a3f51f0d50741f55",
                    "sha256": "5a85d208a51a8f1594d729485e0b9a231e659393787bc0b1fd5c350b80cf77a7"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp37-cp37m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "fc83cd276e4f5692a3f51f0d50741f55",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 2999619,
                "upload_time": "2020-01-10T03:05:03",
                "upload_time_iso_8601": "2020-01-10T03:05:03.244473Z",
                "url": "https://files.pythonhosted.org/packages/eb/55/8203bb92b5f177a18ae1d54acffaabc870c13d93d6712a7650fc37c216c1/wasmtime-0.9.0-cp37-cp37m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b25d579b3deba98e918d668bc9cf0af0",
                    "sha256": "cebc7edfa412a43ebbb3b613ec23195d4ddf92387934dec750d415ffac329be0"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "b25d579b3deba98e918d668bc9cf0af0",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 1854937,
                "upload_time": "2020-01-10T03:05:04",
                "upload_time_iso_8601": "2020-01-10T03:05:04.910168Z",
                "url": "https://files.pythonhosted.org/packages/71/9e/4d43eb3fc0475afbc7bfa08e69fe58c6aba57e6f9fea9624d7a3e7098974/wasmtime-0.9.0-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f7845f9f22d89014654b3ae2a53e50b0",
                    "sha256": "7cedee9e6a2272976492f2dad7685bbff24cb5e4e0746c2bf57db6990c1b60f3"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "f7845f9f22d89014654b3ae2a53e50b0",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2216177,
                "upload_time": "2020-01-10T03:05:06",
                "upload_time_iso_8601": "2020-01-10T03:05:06.628275Z",
                "url": "https://files.pythonhosted.org/packages/f7/51/d5b67b6ac4d5447f7292ab5feda4839c322fe37de41bb1673de82e515a27/wasmtime-0.9.0-cp38-cp38-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ea95f70722edbf2dbe617d45ae0f8ffe",
                    "sha256": "7ec74a15817dc07aa88f343f64a08cb337b6401b799683768af7e5036801bb8b"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp38-cp38-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "ea95f70722edbf2dbe617d45ae0f8ffe",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 2999613,
                "upload_time": "2020-01-10T03:05:08",
                "upload_time_iso_8601": "2020-01-10T03:05:08.240410Z",
                "url": "https://files.pythonhosted.org/packages/9f/84/a2d9383abf4e0c5f789b9d1972753d6c6b3c7a3a1642b7a4ee6289b21592/wasmtime-0.9.0-cp38-cp38-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "47aaca3a482255c307db8a1cf84330e7",
                    "sha256": "18a8585a483d8c9084e08a408081a5e25ba2c4e08861cac41073056793a87c89"
                },
                "downloads": -1,
                "filename": "wasmtime-0.9.0-cp38-cp38m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "47aaca3a482255c307db8a1cf84330e7",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 1854944,
                "upload_time": "2020-01-10T03:05:09",
                "upload_time_iso_8601": "2020-01-10T03:05:09.927338Z",
                "url": "https://files.pythonhosted.org/packages/a6/a7/ad0815345a32a5f608de312c61573a4e8131e34398b80066b32866bfb1c5/wasmtime-0.9.0-cp38-cp38m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": [
            {
                "aliases": [
                    "CVE-2021-39218"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.26.0 and before version 0.30.0 is affected by a memory unsoundness vulnerability. There was an invalid free and out-of-bounds read and write bug when running Wasm that uses `externref`s in Wasmtime. To trigger this bug, Wasmtime needs to be running Wasm that uses `externref`s, the host creates non-null `externrefs`, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where there are no live references at this safepoint, and there is a safepoint with live references earlier in this frame's function. Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as `externref`s that needed to be rooted for GC. At the *next* GC, it would be determined that nothing was referencing these bogus `externref`s (because nothing could ever reference them, because they are not really `externref`s) and then Wasmtime would deallocate them and run `<ExternRef as Drop>::drop` on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes. Even though support for `externref`s (via the reference types proposal) is enabled by default, unless you are creating non-null `externref`s in your host code or explicitly triggering GCs, you cannot be affected by this bug. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-321",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-321",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39219"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. Wasmtime before version 0.30.0 is affected by a type confusion vulnerability. As a Rust library the `wasmtime` crate clearly marks which functions are safe and which are `unsafe`, guaranteeing that if consumers never use `unsafe` then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of `Linker::func_*` APIs. These APIs were previously not sound when one `Engine` was used to create the `Linker` and then a different `Engine` was used to create a `Store` and then the `Linker` was used to instantiate a module into that `Store`. Cross-`Engine` usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type. Triggering this bug requires using at least two `Engine` values in an embedding and then additionally using two different values with a `Linker` (one at the creation time of the `Linker` and another when instantiating a module with the `Linker`). It's expected that usage of more-than-one `Engine` in an embedding is relatively rare since an `Engine` is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small. The fix implemented is to change this behavior to `panic!()` in Rust instead of silently allowing it. Using different `Engine` instances with a `Linker` is a programmer bug that `wasmtime` catches at runtime. This bug has been patched and users should upgrade to Wasmtime version 0.30.0. If you cannot upgrade Wasmtime and are using more than one `Engine` in your embedding it's recommended to instead use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-322",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-322",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-39216"
                ],
                "details": "Wasmtime is an open source runtime for WebAssembly & WASI. In Wasmtime from version 0.19.0 and before version 0.30.0 there was a use-after-free bug when passing `externref`s from the host to guest Wasm content. To trigger the bug, you have to explicitly pass multiple `externref`s from the host to a Wasm instance at the same time, either by passing multiple `externref`s as arguments from host code to a Wasm function, or returning multiple `externref`s to Wasm from a multi-value return function defined in the host. If you do not have host code that matches one of these shapes, then you are not impacted. If Wasmtime's `VMExternRefActivationsTable` became filled to capacity after passing the first `externref` in, then passing in the second `externref` could trigger a garbage collection. However the first `externref` is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first `externref`, which at this point has already been freed. We have reason to believe that the effective impact of this bug is relatively small because usage of `externref` is currently quite rare. The bug has been fixed, and users should upgrade to Wasmtime 0.30.0. If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.",
                "fixed_in": [
                    "0.30.0"
                ],
                "id": "PYSEC-2021-320",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-320",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            },
            {
                "aliases": [
                    "CVE-2021-32629"
                ],
                "details": "Cranelift is an open-source code generator maintained by Bytecode Alliance. It translates a target-independent intermediate representation into executable machine code. There is a bug in 0.73 of the Cranelift x64 backend that can create a scenario that could result in a potential sandbox escape in a Wasm program. This bug was introduced in the new backend on 2020-09-08 and first included in a release on 2020-09-30, but the new backend was not the default prior to 0.73. The recently-released version 0.73 with default settings, and prior versions with an explicit build flag to select the new backend, are vulnerable. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, under a specific set of circumstances. If those circumstances occur, the bug could allow access to memory addresses upto 2GiB before the start of the Wasm program heap. If the heap bound is larger than 2GiB, then it would be possible to read memory from a computable range dependent on the size of the heaps bound. The impact of this bug is highly dependent on heap implementation, specifically: * if the heap has bounds checks, and * does not rely exclusively on guard pages, and * the heap bound is 2GiB or smaller * then this bug cannot be used to reach memory from another Wasm program heap. The impact of the vulnerability is mitigated if there is no memory mapped in the range accessible using this bug, for example, if there is a 2 GiB guard region before the Wasm program heap. The bug in question performs a sign-extend instead of a zero-extend on a value loaded from the stack, when the register allocator reloads a spilled integer value narrower than 64 bits. This interacts poorly with another optimization: the instruction selector elides a 32-to-64-bit zero-extend operator when we know that an instruction producing a 32-bit value actually zeros the upper 32 bits of its destination register. Hence, we rely on these zeroed bits, but the type of the value is still i32, and the spill/reload reconstitutes those bits as the sign extension of the i32\u2019s MSB. The issue would thus occur when: * An i32 value in a Wasm program is greater than or equal to 0x8000_0000; * The value is spilled and reloaded by the register allocator due to high register pressure in the program between the value\u2019s definition and its use; * The value is produced by an instruction that we know to be \u201cspecial\u201d in that it zeroes the upper 32 bits of its destination: add, sub, mul, and, or; * The value is then zero-extended to 64 bits in the Wasm program; * The resulting 64-bit value is used. Under these circumstances there is a potential sandbox escape when the i32 value is a pointer. The usual code emitted for heap accesses zero-extends the Wasm heap address, adds it to a 64-bit heap base, and accesses the resulting address. If the zero-extend becomes a sign-extend, the program could reach backward and access memory up to 2GiB before the start of its heap. In addition to assessing the nature of the code generation bug in Cranelift, we have also determined that under specific circumstances, both Lucet and Wasmtime using this version of Cranelift may be exploitable. See referenced GitHub Advisory for more details.",
                "fixed_in": [
                    "0.27.0"
                ],
                "id": "PYSEC-2021-87",
                "link": "https://osv.dev/vulnerability/PYSEC-2021-87",
                "source": "osv",
                "summary": null,
                "withdrawn": null
            }
        ]
    },
    "1.0.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/1.0.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "flake8 (==4.0.1) ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0511e7daf5ac1e9d05436c6f9b488538",
                    "sha256": "04217ebe4dfb4027eb175c96a53858b9346709750b191396972d2b39ec518b8a"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0511e7daf5ac1e9d05436c6f9b488538",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3373384,
                "upload_time": "2022-09-21T15:51:21",
                "upload_time_iso_8601": "2022-09-21T15:51:21.426352Z",
                "url": "https://files.pythonhosted.org/packages/77/1d/ac2c127053818fff5364ae92b039561a01bd90c669658744fdaf4adfc53f/wasmtime-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ec01a9531d9a1fbe48bd873a68c34a0f",
                    "sha256": "8e71057b75019b6e7b908ef090fe10810fbf2206af33d41ae01ce579f463a9f9"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "ec01a9531d9a1fbe48bd873a68c34a0f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4110018,
                "upload_time": "2022-09-21T15:51:24",
                "upload_time_iso_8601": "2022-09-21T15:51:24.058678Z",
                "url": "https://files.pythonhosted.org/packages/11/9c/f419a37d28c9fa53bfc1f5e8910b164b090d84ea1a02fbd6ac9cd869d855/wasmtime-1.0.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e18a44b9c133f1c6801e4cf559f22db9",
                    "sha256": "6e00e6c6e2084e9bf1e86228a6cc9a48c3e2ecb3fedd487a8a17560a20b07b65"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.0-py3-none-macosx_11_0_arm64.whl",
                "has_sig": false,
                "md5_digest": "e18a44b9c133f1c6801e4cf559f22db9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3650613,
                "upload_time": "2022-09-21T15:51:26",
                "upload_time_iso_8601": "2022-09-21T15:51:26.188221Z",
                "url": "https://files.pythonhosted.org/packages/e0/3c/5155528fca7a81a5c5a832b8041ed2513d1da0d784b82caee433cd2b7765/wasmtime-1.0.0-py3-none-macosx_11_0_arm64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bddce6a34d369d9375852cbabb97fb4d",
                    "sha256": "b7687c643ad175164829803c53ff0647001932133b6f694604f0bbd2b83fae0b"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "bddce6a34d369d9375852cbabb97fb4d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5395014,
                "upload_time": "2022-09-21T15:51:28",
                "upload_time_iso_8601": "2022-09-21T15:51:28.651452Z",
                "url": "https://files.pythonhosted.org/packages/76/f4/4e7a816a27b34e5ef89e6691f9a81e28ecbfd5da9a0c4e231d2fe908519f/wasmtime-1.0.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5ee856bb3f3129e45dc139745f59c528",
                    "sha256": "28091f690096b3ecdd44463d56be21b111c0762b54ce6ed2831e4e43ec71b069"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "5ee856bb3f3129e45dc139745f59c528",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5282667,
                "upload_time": "2022-09-21T15:51:31",
                "upload_time_iso_8601": "2022-09-21T15:51:31.517766Z",
                "url": "https://files.pythonhosted.org/packages/54/68/f4da81935b880f043286bf6c2d8e7efe5764ad341f513e81eef812335bd4/wasmtime-1.0.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "92d3db2d07afccea3a63e3dbe32b01fa",
                    "sha256": "8618cde9c40a82480e538869c9c7888a0e67416f32829f2a449f15eae7760b15"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "92d3db2d07afccea3a63e3dbe32b01fa",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3373392,
                "upload_time": "2022-09-21T15:51:34",
                "upload_time_iso_8601": "2022-09-21T15:51:34.363876Z",
                "url": "https://files.pythonhosted.org/packages/45/de/086b9ed9290486ed41c3421f183448a516529c9a9c46db750c624c568daa/wasmtime-1.0.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/1.0.1/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "flake8 (==4.0.1) ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8526c4433048e5a898b8db4c637b0506",
                    "sha256": "20c1df95a3506408dcf2116502720e7cb248f1e98122b868932dbc9bbacb4ebd"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8526c4433048e5a898b8db4c637b0506",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3373451,
                "upload_time": "2022-09-27T19:29:25",
                "upload_time_iso_8601": "2022-09-27T19:29:25.517646Z",
                "url": "https://files.pythonhosted.org/packages/ae/ae/5e4bf2bd3a1e53ed71af09fdf1f57ed2f28eeb6c3d970595d1263a976bac/wasmtime-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "27aedeaa879c4f25c6fcc60a7bde302f",
                    "sha256": "9ccb42db2511b49c805b23a87e7c191d34112a9568292d475ec966204ac42bc3"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.1-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "27aedeaa879c4f25c6fcc60a7bde302f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4110083,
                "upload_time": "2022-09-27T19:29:27",
                "upload_time_iso_8601": "2022-09-27T19:29:27.480988Z",
                "url": "https://files.pythonhosted.org/packages/7c/e3/2465796a63c3b51403fa878f8be6937300f688f15a3d88dd1ddf7df58a03/wasmtime-1.0.1-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e8e507436441c76b7ab4984634a2774b",
                    "sha256": "439960f6fb2a48482c8f7beaa2b491ce684f1599d9bfdd519b5320305edc2f39"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.1-py3-none-macosx_11_0_arm64.whl",
                "has_sig": false,
                "md5_digest": "e8e507436441c76b7ab4984634a2774b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3650679,
                "upload_time": "2022-09-27T19:29:29",
                "upload_time_iso_8601": "2022-09-27T19:29:29.031069Z",
                "url": "https://files.pythonhosted.org/packages/ea/20/fba86e1320641614e211269b5e56a35f47b56432fd0158d66124e436933b/wasmtime-1.0.1-py3-none-macosx_11_0_arm64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7fd72edc44a960367d4bcc3cd1ce23ed",
                    "sha256": "b257ec11ba6d39e3cd9eed4f90c4633bcf3b964219948254244347236fe45172"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.1-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7fd72edc44a960367d4bcc3cd1ce23ed",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5395080,
                "upload_time": "2022-09-27T19:29:31",
                "upload_time_iso_8601": "2022-09-27T19:29:31.143819Z",
                "url": "https://files.pythonhosted.org/packages/39/38/b955b844fa19667f598b371c57ebc1a583c14d94dd2beb91087cff29cfa8/wasmtime-1.0.1-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f32c52bd2a739dde7899f813ad58c0ef",
                    "sha256": "f34ac6db5f91ab359566f531dca7c53d2e63f657d5b10ec9cf53d1c29ac718c0"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.1-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "f32c52bd2a739dde7899f813ad58c0ef",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5282731,
                "upload_time": "2022-09-27T19:29:32",
                "upload_time_iso_8601": "2022-09-27T19:29:32.861211Z",
                "url": "https://files.pythonhosted.org/packages/b2/3d/88527b5b8af0ec8e3dc409a825b6e3d73b6a5b026f21768b8216dae3ce93/wasmtime-1.0.1-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a7d241036c6499fc64f03150d954cf4a",
                    "sha256": "0ae7e2d43a5d9da72a884a695049d7b1773717ba059bdb0ad0369e5c1e03a388"
                },
                "downloads": -1,
                "filename": "wasmtime-1.0.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "a7d241036c6499fc64f03150d954cf4a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3373458,
                "upload_time": "2022-09-27T19:29:34",
                "upload_time_iso_8601": "2022-09-27T19:29:34.301956Z",
                "url": "https://files.pythonhosted.org/packages/9d/90/2331311802e31dcccc1531cc2107c3ec6aedec3b67850e12c6aac7d9d95a/wasmtime-1.0.1-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.0": {
        "info": {
            "author": "The Wasmtime Project Developers",
            "author_email": "hello@bytecodealliance.org",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Programming Language :: Rust",
                "Topic :: Software Development :: Compilers",
                "Topic :: Software Development :: Interpreters"
            ],
            "description": "<div align=\"center\">\n  <h1><code>wasmtime-py</code></h1>\n\n  <p>\n    <strong>Python embedding of\n    <a href=\"https://github.com/bytecodealliance/wasmtime\">Wasmtime</a></strong>\n  </p>\n\n  <strong>A <a href=\"https://bytecodealliance.org/\">Bytecode Alliance</a> project</strong>\n\n  <p>\n    <a href=\"https://github.com/bytecodealliance/wasmtime-py/actions?query=workflow%3ACI\">\n      <img src=\"https://github.com/bytecodealliance/wasmtime-py/workflows/CI/badge.svg\" alt=\"CI status\"/>\n    </a>\n    <a href=\"https://pypi.org/project/wasmtime/\">\n      <img src=\"https://img.shields.io/pypi/v/wasmtime.svg\" alt=\"Latest Version\"/>\n    </a>\n    <a href=\"https://pypi.org/project/wasmtime/\">\n      <img src=\"https://img.shields.io/pypi/pyversions/wasmtime.svg\" alt=\"Latest Version\"/>\n    </a>\n    <a href=\"https://bytecodealliance.github.io/wasmtime-py/\">\n      <img src=\"https://img.shields.io/badge/docs-main-green\" alt=\"Documentation\"/>\n    </a>\n    <a href=\"https://bytecodealliance.github.io/wasmtime-py/coverage/\">\n      <img src=\"https://img.shields.io/badge/coverage-main-green\" alt=\"Code Coverage\"/>\n    </a>\n  </p>\n\n</div>\n\n## Installation\n\nTo install `wasmtime-py`, run this command in your terminal:\n\n```bash\n$ pip install wasmtime\n```\n\nThe package currently supports 64-bit builds of Python 3.6+ on x86\\_64 Windows,\nmacOS, and Linux\n\n## Usage\n\nIn this example, we compile and instantiate a WebAssembly module and use it from Python:\n\n```python\nfrom wasmtime import Store, Module, Instance, Func, FuncType\n\nstore = Store()\nmodule = Module(store.engine, \"\"\"\n  (module\n    (func $hello (import \"\" \"hello\"))\n    (func (export \"run\") (call $hello))\n  )\n\"\"\")\n\ndef say_hello():\n    print(\"Hello from Python!\")\nhello = Func(store, FuncType([], []), say_hello)\n\ninstance = Instance(store, module, [hello])\nrun = instance.exports(store)[\"run\"]\nrun(store)\n```\n\nBe sure to check out the [`examples` directory], which has other usage patterns\nas well as the [full API documentation][apidoc] of the `wasmtime-py` package.\n\n[`examples` directory]: https://github.com/bytecodealliance/wasmtime-py/tree/main/examples\n[apidoc]: https://bytecodealliance.github.io/wasmtime-py/\n\nIf your WebAssembly module works this way, then you can also import the WebAssembly module\ndirectly into Python without explicitly compiling and instantiating it yourself:\n\n```python\n# Import the custom loader for `*.wasm` files\nimport wasmtime.loader\n\n# Assuming `your_wasm_file.wasm` is in the python load path...\nimport your_wasm_file\n\n# Now you're compiled and instantiated and ready to go!\nprint(your_wasm_file.run())\n```\n\n## Contributing\n\nSee [`CONTRIBUTING.md`](./CONTRIBUTING.md).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bytecodealliance/wasmtime-py",
            "keywords": "",
            "license": "Apache-2.0 WITH LLVM-exception",
            "maintainer": "",
            "maintainer_email": "",
            "name": "wasmtime",
            "package_url": "https://pypi.org/project/wasmtime/",
            "platform": null,
            "project_url": "https://pypi.org/project/wasmtime/",
            "project_urls": {
                "Bug Tracker": "https://github.com/bytecodealliance/wasmtime-py/issues",
                "Documentation": "https://bytecodealliance.github.io/wasmtime-py/",
                "Homepage": "https://github.com/bytecodealliance/wasmtime-py",
                "Source Code": "https://github.com/bytecodealliance/wasmtime-py"
            },
            "release_url": "https://pypi.org/project/wasmtime/2.0.0/",
            "requires_dist": [
                "coverage ; extra == 'testing'",
                "flake8 (==4.0.1) ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pycparser ; extra == 'testing'",
                "pytest-flake8 ; extra == 'testing'",
                "pytest-mypy ; extra == 'testing'"
            ],
            "requires_python": ">=3.6",
            "summary": "A WebAssembly runtime powered by Wasmtime",
            "version": "2.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15510689,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "62895a688ee8625a5c73644c887bf0ad",
                    "sha256": "61148a89f3f8580d4b0dae354d5cc3ec5eda5c459b7c8d1a5e9d68897873c973"
                },
                "downloads": -1,
                "filename": "wasmtime-2.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "62895a688ee8625a5c73644c887bf0ad",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3406555,
                "upload_time": "2022-10-24T15:36:54",
                "upload_time_iso_8601": "2022-10-24T15:36:54.909334Z",
                "url": "https://files.pythonhosted.org/packages/05/5a/bab5052e31e9c2540a61edf9dce51fb0e8403fc09a1fe718884c030debee/wasmtime-2.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1cf3bda04e6935c7e59be78ada78cea8",
                    "sha256": "d52ee9c07fa2234bfb916ea02a779d9719cf8e28b55f44f56589effa44ef20c8"
                },
                "downloads": -1,
                "filename": "wasmtime-2.0.0-py3-none-macosx_10_13_x86_64.whl",
                "has_sig": false,
                "md5_digest": "1cf3bda04e6935c7e59be78ada78cea8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 4125232,
                "upload_time": "2022-10-24T15:36:57",
                "upload_time_iso_8601": "2022-10-24T15:36:57.401267Z",
                "url": "https://files.pythonhosted.org/packages/17/41/e903b67ef13f20e4d405bde36fb33859055c48a4d7a743ba36f3594234ce/wasmtime-2.0.0-py3-none-macosx_10_13_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "532836547cf2a6611f59fa7206678eca",
                    "sha256": "2800e2e2c15c3f82fd1462a2651685330d7e0ef4d5e3d7072cc5b85a76aec18c"
                },
                "downloads": -1,
                "filename": "wasmtime-2.0.0-py3-none-macosx_11_0_arm64.whl",
                "has_sig": false,
                "md5_digest": "532836547cf2a6611f59fa7206678eca",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3661170,
                "upload_time": "2022-10-24T15:36:59",
                "upload_time_iso_8601": "2022-10-24T15:36:59.657263Z",
                "url": "https://files.pythonhosted.org/packages/3b/2d/07e3dc8c2659d4c072e3040e9372b9047743ae8f5d9e7c8c04840c6d7191/wasmtime-2.0.0-py3-none-macosx_11_0_arm64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7c0a4587c5fc190f3ef669725a5b170b",
                    "sha256": "7cedb79b27fac6e1278fc348549912786281e7f6fe64a7cf248d4b9e34b8b42f"
                },
                "downloads": -1,
                "filename": "wasmtime-2.0.0-py3-none-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "7c0a4587c5fc190f3ef669725a5b170b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5442229,
                "upload_time": "2022-10-24T15:37:02",
                "upload_time_iso_8601": "2022-10-24T15:37:02.375488Z",
                "url": "https://files.pythonhosted.org/packages/11/27/1be9091b9d4eff981edcb2a9126b05ce0083596a9743e922c422f234dc89/wasmtime-2.0.0-py3-none-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "479d563a8828e299661d8852c2678307",
                    "sha256": "e00050e7ae18098b50439ab75e1fb77e67f2aa34bedc8b15687887cca978d818"
                },
                "downloads": -1,
                "filename": "wasmtime-2.0.0-py3-none-manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "479d563a8828e299661d8852c2678307",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 5297711,
                "upload_time": "2022-10-24T15:37:04",
                "upload_time_iso_8601": "2022-10-24T15:37:04.276629Z",
                "url": "https://files.pythonhosted.org/packages/82/55/9d705275d795a41309d6489287b995bd5e60255b84ffcd2236defd4134c8/wasmtime-2.0.0-py3-none-manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1d5ab138594ffad376f59b5d82b55449",
                    "sha256": "05c34641d78ba27ae2b97879a7bcee691f6b5ef6ac7943e59f8c8371ddd1751b"
                },
                "downloads": -1,
                "filename": "wasmtime-2.0.0-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "1d5ab138594ffad376f59b5d82b55449",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 3406563,
                "upload_time": "2022-10-24T15:37:06",
                "upload_time_iso_8601": "2022-10-24T15:37:06.007158Z",
                "url": "https://files.pythonhosted.org/packages/a0/29/b2f5f5644a0d9ee0968703cb4e9ececef3a2ccae238b36da1e50a6091ec4/wasmtime-2.0.0-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}