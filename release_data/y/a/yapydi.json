{
    "0.1.2": {
        "info": {
            "author": "",
            "author_email": "Kaiping Zou <zoukaiping@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# YAPYDI: Yet Another Python Dependency Injection\n\nWhy? Just need a simpler DI, checked some existing ones, not a fun, so developed this one.\n\nWhy DI in python? Well, it is NOT for everyone. It is always an good idea for loose coupling for\nuser and implmentation. \n\n## How to use it\n### Basic usage\n```python\nfrom yapydi import enable_di, bean, injected, Injected\n\n@bean()\ndef world() -> str:\n    return \"World\"\n    \n@injected\ndef hello_world(world : str = Injected[str]):\n    print(\"Hello {}!\".format(world))\n\n@enable_di\ndef main():\n    hello_world()\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n### Advanced usage\n\n\n```python\nfrom yapydi import enable_di, bean, BeanRegistry\n\n@bean(name=\"my_bean_name\")\ndef world() -> str:\n    return \"World\"\n\ndef hello_world():\n    registry = BeanRegistry.get_instance()\n    print(\"Hello {}!\".format(registry.one_by_name(\"my_bean_name\")))\n\n@enable_di\ndef main():\n    hello_world()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nCheck more details inside * injection_test.py * please.\n\n## How does it work\nDoing bean definition and injection with annotation power. @bean() annotation will get the bean to be registered. \n@enable_di will init the beans, and @injected will be hooked so the injection can happen. BeanRegistry is the only place\nfor retrieve beans by name type or both.\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "yapydi",
            "package_url": "https://pypi.org/project/yapydi/",
            "platform": null,
            "project_url": "https://pypi.org/project/yapydi/",
            "project_urls": {
                "Homepage": "https://github.com/ColinZou/yapydi",
                "Source Code": "https://github.com/ColinZou/yapydi"
            },
            "release_url": "https://pypi.org/project/yapydi/0.1.2/",
            "requires_dist": null,
            "requires_python": ">=3.10",
            "summary": "Yet Another Python Dependency Injection",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15828297,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d3cde7c699fb2ba0b6e0a17e748ce8a0",
                    "sha256": "8977057feb39baeef1841614aae2290875891e5893fd958c0232656c45b19dee"
                },
                "downloads": -1,
                "filename": "yapydi-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d3cde7c699fb2ba0b6e0a17e748ce8a0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 25583,
                "upload_time": "2022-11-20T01:38:32",
                "upload_time_iso_8601": "2022-11-20T01:38:32.247311Z",
                "url": "https://files.pythonhosted.org/packages/92/eb/2995855426506f02f8d4fb340656fc5e0b9495f547b9ce36a38ec00884d8/yapydi-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}