{
    "0.1.1": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.1/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f71d700f6b0070dd7d93c74407b1ea0f",
                    "sha256": "38d963b5a403acaf22028b547d461526288ebba765e8d8f59ff5b23f961c67cf"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f71d700f6b0070dd7d93c74407b1ea0f",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 235312,
                "upload_time": "2022-10-21T14:13:51",
                "upload_time_iso_8601": "2022-10-21T14:13:51.328636Z",
                "url": "https://files.pythonhosted.org/packages/79/51/80e55bf94b9577d407d1e9cf57eae4e3b73b876b25e42fe097451dc03997/autoprognosis-0.1.1-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8982fd10967915e9479b2db3b8b4bb6c",
                    "sha256": "8c85a55d33fcb1eaf9b25c18d8c05f27b617beab2c68f41026f3cd9c49962ce3"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.1-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "8982fd10967915e9479b2db3b8b4bb6c",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 232982,
                "upload_time": "2022-10-21T14:13:07",
                "upload_time_iso_8601": "2022-10-21T14:13:07.335459Z",
                "url": "https://files.pythonhosted.org/packages/59/c9/e2ff1a97b83a532cc92c67df78d36f6e0af607eab9dc1f40a177ee5c7f01/autoprognosis-0.1.1-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.2/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "58d9bc96779d7ada6772d80492968426",
                    "sha256": "f3099f960f05c197a1fb36e72c5183513a00c2402312ab38ea4d51f3b9e14ce1"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.2-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "58d9bc96779d7ada6772d80492968426",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 234814,
                "upload_time": "2022-10-22T13:40:10",
                "upload_time_iso_8601": "2022-10-22T13:40:10.697405Z",
                "url": "https://files.pythonhosted.org/packages/8c/bd/cd9e273bfc477d64c61948d5c000fe56f13489f02d4eb552589ceb475f98/autoprognosis-0.1.2-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cb3d3adddb2c66eb33edeb2d61e94e4a",
                    "sha256": "ee5f9086ab36c2ad5957cd699736a94f23baa84454d0788a65aa91037960f2eb"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.2-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "cb3d3adddb2c66eb33edeb2d61e94e4a",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 232474,
                "upload_time": "2022-10-22T13:39:31",
                "upload_time_iso_8601": "2022-10-22T13:39:31.242967Z",
                "url": "https://files.pythonhosted.org/packages/b7/38/520172f953d08555e28f332730cc9fafeb47d58bde42c1825718e79623fe/autoprognosis-0.1.2-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.3/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6320ec587acae1a64d733a142466f878",
                    "sha256": "5320d2f6a3b7ad3a12745e211966882660f47cc071ac908cc0119eda5c3dcc70"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.3-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6320ec587acae1a64d733a142466f878",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 235641,
                "upload_time": "2022-10-23T19:21:17",
                "upload_time_iso_8601": "2022-10-23T19:21:17.002083Z",
                "url": "https://files.pythonhosted.org/packages/0a/fa/57178cc38e1bdcd4902cf3484a31d594abdf2abaf598214875cdc7e339b4/autoprognosis-0.1.3-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f965de36494e0855c0d6ac2877199208",
                    "sha256": "d334c2de23731434a591ef1f1b89e077082e85e4d6fe5be47be5086df409e5c5"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.3-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "f965de36494e0855c0d6ac2877199208",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 235659,
                "upload_time": "2022-10-23T19:24:16",
                "upload_time_iso_8601": "2022-10-23T19:24:16.007923Z",
                "url": "https://files.pythonhosted.org/packages/6d/0d/1211537a77ef1e7ddee02cbd67bb840a042950f60c6065c1cafbac2522ad/autoprognosis-0.1.3-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.4/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "pydantic",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "py ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "17b2db3d65ca68757589c14bdcabb841",
                    "sha256": "70ddd4876db2067ba964f125b9d66c4c7fb94ddaa7720f472f5134741bfa37e7"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.4-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "17b2db3d65ca68757589c14bdcabb841",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 249909,
                "upload_time": "2022-10-26T17:58:50",
                "upload_time_iso_8601": "2022-10-26T17:58:50.517164Z",
                "url": "https://files.pythonhosted.org/packages/8d/e0/aa3348a261dc4d77ba866464d4fb58bcf31633211253af457241563cd442/autoprognosis-0.1.4-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a5764f6a790218ef4bfdcc1cbcb12822",
                    "sha256": "b7d1d53635745d8482ba75c75cdb9498f4043fa7e8254b6560826c553217d22e"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.4-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "a5764f6a790218ef4bfdcc1cbcb12822",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 247469,
                "upload_time": "2022-10-26T17:58:11",
                "upload_time_iso_8601": "2022-10-26T17:58:11.769066Z",
                "url": "https://files.pythonhosted.org/packages/0b/b5/77c8d740130c88da6390c1193577bec8e18871a6573f473bcfe44f4452be/autoprognosis-0.1.4-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.5": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.5/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "pydantic",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "py ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "00c8f8a2220b4b55df0efcb35cf6fd4c",
                    "sha256": "4c405ed8ac33cdd1db5f3742074c5ff3740f77bafd25b67d1cbf2acdd0e0cc62"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.5-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "00c8f8a2220b4b55df0efcb35cf6fd4c",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 250084,
                "upload_time": "2022-11-06T11:59:42",
                "upload_time_iso_8601": "2022-11-06T11:59:42.833583Z",
                "url": "https://files.pythonhosted.org/packages/3b/1e/4d2c7abde70b3b2c9b19fe445c67686932f229ddcfe6c7c494a4793b4f05/autoprognosis-0.1.5-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a19e6e884de733a72faa44e849fc1196",
                    "sha256": "28810277d337cb4cb05c71c5aa44614ef42f0fac00f84bcff2cf0d1ea77dc5f5"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.5-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "a19e6e884de733a72faa44e849fc1196",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 247583,
                "upload_time": "2022-11-06T11:58:57",
                "upload_time_iso_8601": "2022-11-06T11:58:57.547574Z",
                "url": "https://files.pythonhosted.org/packages/08/02/73bc77f7c1de44be9ea4c724756b3435c108d375105353d1ccb904ac6bc9/autoprognosis-0.1.5-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.6": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.6/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "pyod",
                "pydantic",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "py ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c56042a53943b32bb5b0928d55332621",
                    "sha256": "81f46d450999f9867a2b40c373d0fcb62c5329afd1d337dd9a51c4103d58ba2a"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.6-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c56042a53943b32bb5b0928d55332621",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 259280,
                "upload_time": "2022-11-08T20:20:34",
                "upload_time_iso_8601": "2022-11-08T20:20:34.981243Z",
                "url": "https://files.pythonhosted.org/packages/e9/3a/0cc95463e30d1ae7613997def711245353051d24c5accda80ecca1e845a0/autoprognosis-0.1.6-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3efd50c40ab2a29ae210c3787dccb0fa",
                    "sha256": "7110ead81d0b89da8af2919b86fbc8a0a47b6a74ff1ffd9df2e98d7022c84a2e"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.6-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "3efd50c40ab2a29ae210c3787dccb0fa",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 256711,
                "upload_time": "2022-11-08T20:31:24",
                "upload_time_iso_8601": "2022-11-08T20:31:24.007749Z",
                "url": "https://files.pythonhosted.org/packages/71/b6/18c1f1f236fc345300267ace32897337d76866d204fc02b77ee555147849/autoprognosis-0.1.6-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.7": {
        "info": {
            "author": "vanderschaarlab",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Healthcare Industry",
                "License :: OSI Approved :: BSD License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description": "# AutoPrognosis - A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.\n\n\n<div align=\"center\">\n\n\n[![Test In Colab](https://img.shields.io/badge/Tutorial-Model%20Search-orange)](https://colab.research.google.com/drive/1sFVnnxjRMCNVIn-Ikc--Ja44U0Ll4joY?usp=sharing)\n[![Test In Colab](https://img.shields.io/badge/Tutorial-Build%20a%20Demonstrator-orange)](https://colab.research.google.com/drive/1ZwjD9RkosCtboyblH4C8sQV1DuGY1H2X?usp=sharing)\n[![Tests](https://github.com/vanderschaarlab/autoprognosis/actions/workflows/test.yml/badge.svg)](https://github.com/vanderschaarlab/autoprognosis/actions/workflows/test.yml)\n[![Tests R](https://github.com/vanderschaarlab/autoprognosis/actions/workflows/test_R.yml/badge.svg)](https://github.com/vanderschaarlab/autoprognosis/actions/workflows/test_R.yml)\n[![Tutorials](https://github.com/vanderschaarlab/autoprognosis/actions/workflows/test_tutorials.yml/badge.svg)](https://github.com/vanderschaarlab/autoprognosis/actions/workflows/test_tutorials.yml)\n\n[![arXiv](https://img.shields.io/badge/arXiv-2210.12090-b31b1b.svg)](https://arxiv.org/abs/2210.12090)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://github.com/vanderschaarlab/autoprognosis/blob/main/LICENSE)\n[![about](https://img.shields.io/badge/about-The%20van%20der%20Schaar%20Lab-blue)](https://www.vanderschaar-lab.com/)\n\n</div>\n\n\n![image](https://github.com/vanderschaarlab/autoprognosis/raw/main/docs/arch.png \"AutoPrognosis\")\n\n## :key: Features\n\n- :rocket:Automatically learns ensembles of pipelines for classification, regression or survival analysis tasks.\n- :cyclone: Easy to extend pluginable architecture.\n- :fire: Interpretability and uncertainty quantification tools.\n- :adhesive_bandage: Data imputation using [HyperImpute](https://github.com/vanderschaarlab/hyperimpute).\n- :zap: Build demonstrators using [Streamlit](https://streamlit.io/).\n- :notebook: [Python](#high_brightness-tutorials) and [R tutorials](https://github.com/vanderschaarlab/autoprognosis/tree/main/tutorials/bindings/R) available.\n## :rocket:Installation\n\n#### Using pip\n\nThe library can be installed from PyPI using\n```bash\n$ pip install autoprognosis\n```\nor from source, using\n```bash\n$ pip install .\n```\n### Redis (Optional, but recommended)\nAutoPrognosis can use Redis as a backend to improve the performance and quality of the searches.\n\nFor that, install the redis-server package following the steps described on the [official site](https://redis.io/topics/quickstart).\n\n## :boom: Sample Usage\n\n__Advanced Python tutorials__ can be found in the [Python tutorials section](#high_brightness-tutorials).\n\n\n__R examples__ can be found in the [R tutorials section](https://github.com/vanderschaarlab/autoprognosis/tree/main/tutorials/bindings/R).\n\nList the available classifiers\n```python\nfrom autoprognosis.plugins.prediction.classifiers import Classifiers\nprint(Classifiers().list_available())\n```\n\nCreate a study for classifiers\n```python\nfrom pathlib import Path\n\nfrom sklearn.datasets import load_breast_cancer\n\nfrom autoprognosis.studies.classifiers import ClassifierStudy\nfrom autoprognosis.utils.serialization import load_model_from_file\nfrom autoprognosis.utils.tester import evaluate_estimator\n\n\nX, Y = load_breast_cancer(return_X_y=True, as_frame=True)\n\ndf = X.copy()\ndf[\"target\"] = Y\n\nworkspace = Path(\"workspace\")\nstudy_name = \"example\"\n\nstudy = ClassifierStudy(\n    study_name=study_name,\n    dataset=df,  # pandas DataFrame\n    target=\"target\",  # the label column in the dataset\n    num_iter=100,  # how many trials to do for each candidate\n    timeout=60,  # seconds\n    classifiers=[\"logistic_regression\", \"lda\", \"qda\"],\n    workspace=workspace,\n)\n\nstudy.run()\n\noutput = workspace / study_name / \"model.p\"\nmodel = load_model_from_file(output)\n\n# <model> contains the optimal architecture, but the model is not trained yet. You need to call fit() to use it.\n# This way, we can further benchmark the selected model on the training set.\nmetrics = evaluate_estimator(model, X, Y)\n\nprint(f\"model {model.name()} -> {metrics['clf']}\")\n\n# Train the model\nmodel.fit(X, Y)\n\n# Predict the probabilities of each class using the model\nmodel.predict_proba(X)\n```\n\nList the available regressors\n```python\nfrom autoprognosis.plugins.prediction.regression import Regression\nprint(Regression().list_available())\n```\n\nRegression study\n```python\n# stdlib\nfrom pathlib import Path\n\n# third party\nimport pandas as pd\n\n# autoprognosis absolute\nfrom autoprognosis.utils.serialization import load_model_from_file\nfrom autoprognosis.utils.tester import evaluate_regression\nfrom autoprognosis.studies.regression import RegressionStudy\n\n# Load dataset\ndf = pd.read_csv(\n    \"https://archive.ics.uci.edu/ml/machine-learning-databases/00291/airfoil_self_noise.dat\",\n    header=None,\n    sep=\"\\\\t\",\n)\nlast_col = df.columns[-1]\ny = df[last_col]\nX = df.drop(columns=[last_col])\n\ndf = X.copy()\ndf[\"target\"] = y\n\n# Search the model\nworkspace = Path(\"workspace\")\nworkspace.mkdir(parents=True, exist_ok=True)\n\nstudy_name=\"regression_example\"\nstudy = RegressionStudy(\n    study_name=study_name,\n    dataset=df,  # pandas DataFrame\n    target=\"target\",  # the label column in the dataset\n    num_iter=10,  # how many trials to do for each candidate. Default: 50\n    num_study_iter=2,  # how many outer iterations to do. Default: 5\n    timeout=50,  # timeout for optimization for each classfier. Default: 600 seconds\n    regressors=[\"linear_regression\", \"xgboost_regressor\"],\n    workspace=workspace,\n)\n\nstudy.run()\n\n# Test the model\noutput = workspace / study_name / \"model.p\"\n\nmodel = load_model_from_file(output)\n# <model> contains the optimal architecture, but the model is not trained yet. You need to call fit() to use it.\n# This way, we can further benchmark the selected model on the training set.\n\nmetrics = evaluate_regression(model, X, y)\n\nprint(f\"Model {model.name()} score: {metrics['str']}\")\n\n# Train the model\nmodel.fit(X, y)\n\n\n# Predict using the model\nmodel.predict(X)\n```\n\nList available survival analysis estimators\n```python\nfrom autoprognosis.plugins.prediction.risk_estimation import RiskEstimation\nprint(RiskEstimation().list_available())\n```\n\nSurvival analysis study\n```python\n# stdlib\nimport os\nfrom pathlib import Path\n\n# third party\nimport numpy as np\nfrom pycox import datasets\n\n# autoprognosis absolute\nfrom autoprognosis.studies.risk_estimation import RiskEstimationStudy\nfrom autoprognosis.utils.serialization import load_model_from_file\nfrom autoprognosis.utils.tester import evaluate_survival_estimator\n\ndf = datasets.gbsg.read_df()\ndf = df[df[\"duration\"] > 0]\n\nX = df.drop(columns = [\"duration\"])\nT = df[\"duration\"]\nY = df[\"event\"]\n\neval_time_horizons = np.linspace(T.min(), T.max(), 5)[1:-1]\n\nworkspace = Path(\"workspace\")\nstudy_name = \"example_risks\"\n\nstudy = RiskEstimationStudy(\n    study_name=study_name,\n    dataset=df,\n    target=\"event\",\n    time_to_event=\"duration\",\n    time_horizons=eval_time_horizons,\n    num_iter=10,\n    num_study_iter=1,\n    timeout=10,\n    risk_estimators=[\"cox_ph\", \"survival_xgboost\"],\n    score_threshold=0.5,\n    workspace=workspace,\n)\n\nstudy.run()\n\noutput = workspace / study_name / \"model.p\"\n\nmodel = load_model_from_file(output)\n# <model> contains the optimal architecture, but the model is not trained yet. You need to call fit() to use it.\n# This way, we can further benchmark the selected model on the training set.\n\nmetrics = evaluate_survival_estimator(model, X, T, Y, eval_time_horizons)\n\nprint(f\"Model {model.name()} score: {metrics['clf']}\")\n\n# Train the model\nmodel.fit(X, T, Y)\n\n# Predict using the model\nmodel.predict(X, eval_time_horizons)\n```\n\n## :high_brightness: Tutorials\n\n### Plugins\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1QO7K3JqW8l4pgVSLxjVezTu5IfD9yHB-?usp=sharing) [ Imputation ](tutorials/plugins/tutorial_00_imputation_plugins.ipynb) \n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1WQGZXQkQs0Wg5stB9fk-RvYey35ADIZu?usp=sharing)[ Preprocessing](tutorials/plugins/tutorial_01_preprocessing_plugins.ipynb)\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1WTzO_2hqaEOvvATHPSIcW220xc1WaJlC?usp=sharing)[ Classification](tutorials/plugins/tutorial_02_classification_plugins.ipynb)\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/17bLtKUjN8ilHw4Cm7-53kiC0vCJO_pVb?usp=sharing)[ Pipelines](tutorials/plugins/tutorial_03_pipelines.ipynb)\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1K0yVwm4jQrXRbMKJ-em7tTYgHXWtoK5c?usp=sharing)[ Interpretability](tutorials/plugins/tutorial_04_interpretability.ipynb)\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1bY4CbiqMe2uoqeUu2d49aIdYRbtP156X?usp=sharing)[ Survival Analysis](tutorials/plugins/tutorial_05_survival_analysis_plugins.ipynb)\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1UK6WbsviT5nOQ_BAHSFYIjhpKtwppnUU?usp=sharing)[ Regression](tutorials/plugins/tutorial_06_regression_plugins.ipynb)\n\n### AutoML\n - [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1-lPuQAtjHESl32ahFQYsFl8ujAnDWxEJ?usp=sharing)[ Classification tasks](tutorials/automl/tutorial_00_classification_study.ipynb)\n - [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/16UDaA3F5JGw_YVY8XlYqWjfxcUV1OHJo?usp=sharing)[ Classification tasks with imputation](tutorials/automl/tutorial_01_automl_classification_with_imputation.ipynb)\n - [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1DtZCqebhaYdKB3ci5dr3hT0KvZPaTUOi?usp=sharing)[ Survival analysis tasks](tutorials/automl/tutorial_02_survival_analysis_study.ipynb)\n - [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1sFVnnxjRMCNVIn-Ikc--Ja44U0Ll4joY?usp=sharing)[ Survival analysis tasks with imputation](tutorials/automl/tutorial_03_automl_survival_analysis_with_imputation.ipynb)\n- [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1HLhWI-tRZn4e9ijQ6iEIuppuDszgWkCC?usp=sharing)[ Regression tasks](tutorials/automl/tutorial_04_regression.ipynb)\n\n### Building a demonstrator\n - [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1lqbElEVJa2Q0JDsXPgb8K_QUTDcZvUQq?usp=sharing)[ Classification demonstrator](tutorials/demonstrators/tutorial_00_build_a_demonstrator_classification.ipynb)\n - [![Test In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1ZwjD9RkosCtboyblH4C8sQV1DuGY1H2X?usp=sharing)[ Survival analysis demonstrator](tutorials/demonstrators/tutorial_01_build_a_demonstrator_survival_analysis.ipynb)\n\n## :zap: Plugins\n\n### Imputation methods\n```python\nfrom autoprognosis.plugins.imputers import  Imputers\n\nimputer = Imputers().get(<NAME>)\n```\n\n| Name | Description |\n|--- | --- | \n|**hyperimpute**|Iterative imputer using both regression and classification methods based on linear models, trees, XGBoost, CatBoost and neural nets| \n|**mean**|Replace the missing values using the mean along each column with [`SimpleImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html)| \n|**median**|Replace the missing values using the median along each column with [`SimpleImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html) |\n|**most_frequent**|Replace the missing values using the most frequent value along each column with [`SimpleImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html)|\n|**missforest**|Iterative imputation method based on Random Forests using [`IterativeImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer) and [`ExtraTreesRegressor`](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html)| \n|**ice**| Iterative imputation method based on regularized linear regression using [`IterativeImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer) and [`BayesianRidge`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.BayesianRidge.html)| \n|**mice**| Multiple imputations based on ICE using [`IterativeImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer) and [`BayesianRidge`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.BayesianRidge.html)| \n|**softimpute**|  [`Low-rank matrix approximation via nuclear-norm regularization`](https://jmlr.org/papers/volume16/hastie15a/hastie15a.pdf)| [`plugin_softimpute.py`](src/hyperimpute/plugins/imputers/plugin_softimpute.py)|\n|**EM**|Iterative procedure which uses other variables to impute a value (Expectation), then checks whether that is the value most likely (Maximization) - [`EM imputation algorithm`](https://joon3216.github.io/research_materials/2019/em_imputation.html)|\n|**gain**|[`GAIN: Missing Data Imputation using Generative Adversarial Nets`](https://arxiv.org/abs/1806.02920)|\n\n\n### Preprocessing methods\n```python\nfrom autoprognosis.plugins.preprocessors import Preprocessors\n\npreprocessor = Preprocessors().get(<NAME>)\n```\n| Name | Description |\n|--- | --- | \n| **maxabs_scaler**  | Scale each feature by its maximum absolute value. [`MaxAbsScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MaxAbsScaler.html)|\n| **scaler** |Standardize features by removing the mean and scaling to unit variance. - [`StandardScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler)|\n|**feature_normalizer** | Normalize samples individually to unit norm. [`Normalizer`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.Normalizer.html#sklearn.preprocessing.Normalizer)|\n|**normal_transform** |Transform features using quantiles information.[`QuantileTransformer`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.QuantileTransformer.html#sklearn.preprocessing.QuantileTransformer)|\n|**uniform_transform** |Transform features using quantiles information.[`QuantileTransformer`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.QuantileTransformer.html#sklearn.preprocessing.QuantileTransformer)|\n|**minmax_scaler** |Transform features by scaling each feature to a given range.[`MinMaxScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html#sklearn.preprocessing.MinMaxScaler)|\n\n\n### Classification\n```python\nfrom autoprognosis.plugins.prediction.classifiers import Classifiers\n\nclassifier = Classifiers().get(<NAME>)\n```\n\n| Name | Description |\n|--- | --- | \n| **neural_nets**  | PyTorch based neural net classifier.|\n| **logistic_regression**  | [`LogisticRegression`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)|\n| **catboost**  |Gradient boosting on decision trees - [`CatBoost`](https://catboost.ai/)|\n| **random_forest**  | A random forest classifier. [`RandomForestClassifier`](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)|\n| **tabnet**  |[`TabNet : Attentive Interpretable Tabular Learning`](https://github.com/dreamquark-ai/tabnet)|\n| **xgboost**  |[`XGBoostClassifier`](https://xgboost.readthedocs.io/en/stable/)|\n\n\n### Survival Analysis\n```python\nfrom autoprognosis.plugins.prediction.risk_estimation import RiskEstimation\n\npredictor = RiskEstimation().get(<NAME>)\n```\n\n| Name | Description |\n|--- | --- | \n| **survival_xgboost**  | [`XGBoost Survival Embeddings`](https://github.com/loft-br/xgboost-survival-embeddings)|\n| **loglogistic_aft**  | [` Log-Logistic AFT model`](https://lifelines.readthedocs.io/en/latest/fitters/regression/LogLogisticAFTFitter.html)|\n| **deephit**  | [`DeepHit: A Deep Learning Approach to Survival Analysis with Competing Risks`](https://github.com/chl8856/DeepHit)|\n| **cox_ph**  | [`Cox\u2019s proportional hazard model`](https://lifelines.readthedocs.io/en/latest/fitters/regression/CoxPHFitter.html)|\n| **weibull_aft**  | [`Weibull AFT model.`](https://lifelines.readthedocs.io/en/latest/fitters/regression/WeibullAFTFitter.html)|\n| **lognormal_aft**  | [`Log-Normal AFT model`](https://lifelines.readthedocs.io/en/latest/fitters/regression/LogNormalAFTFitter.html)|\n| **coxnet**  | [`CoxNet is a Cox proportional hazards model also referred to as DeepSurv`](https://github.com/havakv/pycox)|\n\n### Regression\n```python\nfrom autoprognosis.plugins.prediction.regression import Regression\n\nregressor = Regression().get(<NAME>)\n```\n\n| Name | Description |\n|--- | --- | \n| **tabnet_regressor**  |[`TabNet : Attentive Interpretable Tabular Learning`](https://github.com/dreamquark-ai/tabnet)|\n| **catboost_regressor**  |Gradient boosting on decision trees - [`CatBoost`](https://catboost.ai/)|\n| **random_forest_regressor**  |[`RandomForestRegressor`](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html)|\n| **xgboost_regressor**  |[`XGBoostClassifier`](https://xgboost.readthedocs.io/en/stable/)|\n| **neural_nets_regression**  |PyTorch-based neural net regressor.|\n| **linear_regression**  |[`LinearRegression`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)|\n\n\n### Explainers\n```python\nfrom autoprognosis.plugins.explainers import Explainers\n\nexplainer = Explainers().get(<NAME>)\n```\n| Name | Description |\n|--- | --- | \n| **risk_effect_size**  | Feature importance using Cohen's distance between probabilities|\n| **lime**  |[`Lime: Explaining the predictions of any machine learning classifier`](https://github.com/marcotcr/lime)|\n| **symbolic_pursuit**  |[`Symbolic Pursuit`](Learning outside the black-box: at the pursuit of interpretable models)|\n| **shap_permutation_sampler**  |[`SHAP Permutation Sampler`](https://shap.readthedocs.io/en/latest/generated/shap.explainers.Permutation.html)|\n| **kernel_shap**  |[`SHAP KernelExplainer`](https://shap-lrjball.readthedocs.io/en/latest/generated/shap.KernelExplainer.html)|\n| **invase**  |[`INVASE: Instance-wise Variable Selection`](https://github.com/vanderschaarlab/invase)|\n\n\n\n### Uncertainty\n```python\nfrom autoprognosis.plugins.uncertainty import UncertaintyQuantification\nmodel = UncertaintyQuantification().get(<NAME>)\n```\n| Name | Description |\n|--- | --- | \n| **cohort_explainer**  ||\n| **conformal_prediction**  ||\n| **jackknife**  ||\n\n\n## :hammer: Test\nAfter installing the library, the tests can be executed using `pytest`\n```bash\n$ pip install .[testing]\n$ pytest -vxs -m \"not slow\"\n```\n\n## Citing\nIf you use this code, please cite the associated paper:\n\n```\n@misc{https://doi.org/10.48550/arxiv.2210.12090,\n  doi = {10.48550/ARXIV.2210.12090},\n  url = {https://arxiv.org/abs/2210.12090},\n  author = {Imrie, Fergus and Cebere, Bogdan and McKinney, Eoin F. and van der Schaar, Mihaela},\n  keywords = {Machine Learning (cs.LG), Artificial Intelligence (cs.AI), FOS: Computer and information sciences, FOS: Computer and information sciences},\n  title = {AutoPrognosis 2.0: Democratizing Diagnostic and Prognostic Modeling in Healthcare with Automated Machine Learning},\n  publisher = {arXiv},\n  year = {2022},\n  copyright = {Creative Commons Attribution 4.0 International}\n}\n```\n\n## References\n1. [AutoPrognosis: Automated Clinical Prognostic Modeling via Bayesian Optimization with Structured Kernel Learning](https://arxiv.org/abs/1802.07207)\n2. [Prognostication and Risk Factors for Cystic Fibrosis via Automated Machine Learning](https://www.nature.com/articles/s41598-018-29523-2)\n3. [Cardiovascular Disease Risk Prediction using Automated Machine Learning: A Prospective Study of 423,604 UK Biobank Participants](https://www.ncbi.nlm.nih.gov/pubmed/31091238)\n\n\n\n\n\n",
            "description_content_type": "text/markdown; charset=UTF-8",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.vanderschaar-lab.com/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autoprognosis",
            "package_url": "https://pypi.org/project/autoprognosis/",
            "platform": "any",
            "project_url": "https://pypi.org/project/autoprognosis/",
            "project_urls": {
                "Homepage": "https://www.vanderschaar-lab.com/"
            },
            "release_url": "https://pypi.org/project/autoprognosis/0.1.7/",
            "requires_dist": [
                "numpy (>=1.20)",
                "pandas (>=1.3)",
                "torch (>=1.10)",
                "scikit-learn (>=1.0)",
                "scipy (>=1.3.2)",
                "pyod",
                "pydantic",
                "seaborn",
                "matplotlib",
                "cloudpickle",
                "lifelines",
                "loguru",
                "redis",
                "optuna",
                "joblib",
                "importlib-metadata ; python_version < \"3.8\"",
                "setuptools ; extra == 'testing'",
                "bandit ; extra == 'testing'",
                "black ; extra == 'testing'",
                "black-nb ; extra == 'testing'",
                "darglint ; extra == 'testing'",
                "doc8 ; extra == 'testing'",
                "flake8 ; extra == 'testing'",
                "isort ; extra == 'testing'",
                "nbconvert ; extra == 'testing'",
                "nbformat ; extra == 'testing'",
                "pytest ; extra == 'testing'",
                "pytest-benchmark ; extra == 'testing'",
                "pytest-cov ; extra == 'testing'",
                "pytest-xdist[psutil] ; extra == 'testing'",
                "pytest-xprocess ; extra == 'testing'",
                "py ; extra == 'testing'",
                "pre-commit ; extra == 'testing'",
                "tabulate ; extra == 'testing'",
                "click ; extra == 'testing'",
                "optuna ; extra == 'testing'",
                "pycox ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "A system for automating the design of predictive modeling pipelines tailored for clinical prognosis.",
            "version": "0.1.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15773997,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a4d6d2ca00c591d028a64361d8b9014f",
                    "sha256": "489933ab51059aa49af9736d2d4c3e0741bd6d9e69f0e95d743fd3ac7cd2ac8a"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.7-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a4d6d2ca00c591d028a64361d8b9014f",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 260797,
                "upload_time": "2022-11-15T11:59:44",
                "upload_time_iso_8601": "2022-11-15T11:59:44.571111Z",
                "url": "https://files.pythonhosted.org/packages/54/54/fd776448fccb27b8853ef360d41233a827101e3d7875389cfbf61c48ebe8/autoprognosis-0.1.7-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2145b23a9fd4a09181d65c9e22b23bd5",
                    "sha256": "e91aaa91bbb7c843b309223d7b965edfee7d70d7add16145e6d69c35fdf4e0be"
                },
                "downloads": -1,
                "filename": "autoprognosis-0.1.7-py2.py3-none-macosx_10_14_x86_64.whl",
                "has_sig": false,
                "md5_digest": "2145b23a9fd4a09181d65c9e22b23bd5",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 258205,
                "upload_time": "2022-11-15T11:59:12",
                "upload_time_iso_8601": "2022-11-15T11:59:12.958670Z",
                "url": "https://files.pythonhosted.org/packages/1e/a0/39ec859080a269925c811b72ea5036bebab323ed2f70b79c0eabb5ca3ff5/autoprognosis-0.1.7-py2.py3-none-macosx_10_14_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}