{
    "1.0a0": {
        "info": {
            "author": "Intel AIA/AIPC Team",
            "author_email": "feng.tian@intel.com, haihao.shen@intel.com,hanwen.chang@intel.com, penghui.cheng@intel.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description": "# Intel\u00ae Extension for Transformers: Accelerating Transformer-based Models on Intel Platforms\nIntel\u00ae Extension for Transformers is an innovative toolkit to accelerate Transformer-based models on Intel platforms. The toolkit helps developers to improve the productivity through ease-of-use model compression APIs by extending Hugging Face transformers APIs. The compression infrastructure leverages Intel\u00ae Neural Compressor which provides a rich set of model compression techniques: quantization, pruning, distillation and so on. The toolkit provides Transformers-accelerated Libraries and Neural Engine to demonstrate the performance of extremely compressed models, and therefore significantly improve the inference efficiency on Intel platforms. Some of the key features have been published in NeurIPS 2021 and 2022.\n\n## What does Intel\u00ae Extension for Transformers offer?\nThis toolkit helps developers to improve the productivity of inference deployment by extending Hugging Face transformers APIs for Transformer-based models in natural language processing (NLP) domain. With extremely compressed models, the toolkit can greatly improve the inference efficiency on Intel platforms.\n\n- Model Compression\n\n    |Framework          |Quantization |Pruning/Sparsity |Distillation |Neural Architecture Search |\n    |-------------------|:-----------:|:---------------:|:-----------:|:-------------------------:|\n    |PyTorch            |&#10004;     |&#10004;         |&#10004;     |&#10004;                   |\n    |TensorFlow         |&#10004;     |&#10004;         |&#10004;     |Stay tuned :star:          |\n\n- Data Augmentation for NLP Datasets\n- Transformers-accelerated Neural Engine\n- Transformers-accelerated Libraries\n- Domain Algorithms\n    |Length Adaptive Transformer |\n    |:--------------------------:|\n    |PyTorch &#10004;            |\n\n- Architecture of Intel\u00ae Extension for Transformers\n<img src=\"docs/imgs/arch.png\" width=691 height=444 alt=\"arch\">\n</br>\n\n## Installation\n#### Install Dependency\n```bash\npip install -r requirements.txt\n```\n\n#### Install Intel\u00ae Extension for Transformers\n```bash\ngit clone https://github.com/intel/intel-extension-for-transformers.git intel_extension_for_transformers\ncd intel_extension_for_transformers\ngit submodule update --init --recursive\npython setup.py install\n```\n\n## Getting Started\n### Quantization\n```python\nfrom intel_extension_for_transformers import QuantizationConfig, metric, objectives\nfrom intel_extension_for_transformers.optimization.trainer import NLPTrainer\n\n# Replace transformers.Trainer with NLPTrainer\n# trainer = transformers.Trainer(...)\ntrainer = NLPTrainer(...)\nmetric = metrics.Metric(name=\"eval_f1\", is_relative=True, criterion=0.01)\nq_config = QuantizationConfig(\n    approach=\"PostTrainingStatic\",\n    metrics=[metric],\n    objectives=[objectives.performance]\n)\nmodel = trainer.quantize(quant_config=q_config)\n```\n\nPlease refer to [quantization document](docs/quantization.md) for more details.\n\n### Pruning\n```python\nfrom intel_extension_for_transformers import PrunerConfig, PruningConfig\nfrom intel_extension_for_transformers.optimization.trainer import NLPTrainer\n\n# Replace transformers.Trainer with NLPTrainer\n# trainer = transformers.Trainer(...)\ntrainer = NLPTrainer(...)\nmetric = metrics.Metric(name=\"eval_accuracy\")\npruner_config = PrunerConfig(prune_type='BasicMagnitude', target_sparsity_ratio=0.9)\np_conf = PruningConfig(pruner_config=[pruner_config], metrics=metric)\nmodel = trainer.prune(pruning_config=p_conf)\n```\n\nPlease refer to [pruning document](docs/pruning.md) for more details.\n\n### Distillation\n```python\nfrom intel_extension_for_transformers import DistillationConfig, Criterion\nfrom intel_extension_for_transformers.optimization.trainer import NLPTrainer\n\n# Replace transformers.Trainer with NLPTrainer\n# trainer = transformers.Trainer(...)\nteacher_model = ... # exist model\ntrainer = NLPTrainer(...)\nmetric = metrics.Metric(name=\"eval_accuracy\")\nd_conf = DistillationConfig(metrics=metric)\nmodel = trainer.distill(distillation_config=d_conf, teacher_model=teacher_model)\n```\n\nPlease refer to [distillation document](docs/distillation.md) for more details.\n\n### Data Augmentation\nData augmentation provides the facilities to generate synthesized NLP dataset for further model optimization. The data augmentation supports text generation on popular fine-tuned models like GPT, GPT2, and other text synthesis approaches from [nlpaug](https://github.com/makcedward/nlpaug).\n\n```python\nfrom intel_extension_for_transformers.preprocessing.data_augmentation import DataAugmentation\naug = DataAugmentation(augmenter_type=\"TextGenerationAug\")\naug.input_dataset = \"original_dataset.csv\" # example: https://huggingface.co/datasets/glue/viewer/sst2/train\naug.column_names = \"sentence\"\naug.output_path = os.path.join(self.result_path, \"test2.cvs\")\naug.augmenter_arguments = {'model_name_or_path': 'gpt2-medium'}\naug.data_augment()\nraw_datasets = load_dataset(\"csv\", data_files=aug.output_path, delimiter=\"\\t\", split=\"train\")\n```\n\nPlease refer to [data augmentation document](docs/data_augmentation.md) for more details.\n\n### Quantized Length Adaptive Transformer\nQuantized Length Adaptive Transformer leverages sequence-length reduction and low-bit representation techniques to further enhance model inference performance, enabling adaptive sequence-length sizes to accommodate different computational budget requirements with an optimal accuracy efficiency tradeoff.\n```python\nfrom intel_extension_for_transformers import QuantizationConfig, DynamicLengthConfig, metric, objectives\nfrom intel_extension_for_transformers.optimization.trainer import NLPTrainer\n\n# Replace transformers.Trainer with NLPTrainer\n# trainer = transformers.Trainer(...)\ntrainer = NLPTrainer(...)\nmetric = metrics.Metric(name=\"eval_f1\", is_relative=True, criterion=0.01)\nq_config = QuantizationConfig(\n    approach=\"PostTrainingStatic\",\n    metrics=[metric],\n    objectives=[objectives.performance]\n)\n# Apply the length config\ndynamic_length_config = DynamicLengthConfig(length_config=length_config)\ntrainer.set_dynamic_config(dynamic_config=dynamic_length_config)\n# Quantization\nmodel = trainer.quantize(quant_config=q_config)\n```\n\nPlease refer to paper [QuaLA-MiniLM](https://arxiv.org/pdf/2210.17114.pdf) and [code](examples/optimization/pytorch/huggingface/question-answering/dynamic) for details\n\n\n### Transformers-accelerated Neural Engine\nTransformers-accelerated Neural Engine is one of reference deployments that Intel\u00ae Extension for Transformers provides. Neural Engine aims to demonstrate the optimal performance of extremely compressed NLP models by exploring the optimization opportunities from both HW and SW.\n\n```python\nfrom intel_extension_for_transformers.backends.neural_engine.compile import compile\n# /path/to/your/model is a TensorFlow pb model or ONNX model\nmodel = compile('/path/to/your/model')\ninputs = ... # [input_ids, segment_ids, input_mask]\nmodel.inference(inputs)\n```\n\nPlease refer to [example](examples/deployment/neural_engine/sparse/distilbert_base_uncased/) in [Transformers-accelerated Neural Engine](examples/deployment/) and paper [Fast Distilbert on CPUs](https://arxiv.org/abs/2211.07715) for more details.\n\n### Transformers-accelerated Libraries\nTransformers-accelerated Libraries is a high-performance operator computing library implemented by assembly. Transformers-accelerated Libraries contains a JIT domain, a kernel domain, and a scheduling proxy framework.\n\n```C++\n#include \"interface.hpp\"\n  ...\n  operator_desc op_desc(ker_kind, ker_prop, eng_kind, ts_descs, op_attrs);\n  sparse_matmul_desc spmm_desc(op_desc);\n  sparse_matmul spmm_kern(spmm_desc);\n  std::vector<const void*> rt_data = {data0, data1, data2, data3, data4};\n  spmm_kern.execute(rt_data);\n```\nPlease refer to [Transformers-accelerated Libraries](intel_extension_for_transformers/backends/neural_engine/Kernels/README.md) for more details.\n\n\n## System Requirements\n### Validated Hardware Environment\nIntel\u00ae Extension for Transformers supports systems based on [Intel 64 architecture or compatible processors](https://en.wikipedia.org/wiki/X86-64) that are specifically optimized for the following CPUs:\n\n* Intel Xeon Scalable processor (formerly Cascade Lake, Icelake)\n* Future Intel Xeon Scalable processor (code name Sapphire Rapids)\n\n### Validated Software Environment\n\n* OS version: CentOS 8.4, Ubuntu 20.04  \n* Python version: 3.7, 3.8, 3.9, 3.10  \n\n<table class=\"docutils\">\n<thead>\n  <tr>\n    <th>Framework</th>\n    <th>TensorFlow</th>\n    <th>Intel TensorFlow</th>\n    <th>PyTorch</th>\n    <th>IPEX</th>\n  </tr>\n</thead>\n<tbody>\n  <tr align=\"center\">\n    <th>Version</th>\n    <td class=\"tg-7zrl\"><a href=https://github.com/tensorflow/tensorflow/tree/v2.10.0>2.10.0</a><br>\n    <a href=https://github.com/tensorflow/tensorflow/tree/v2.9.1>2.9.1</a><br>\n    <td class=\"tg-7zrl\"><a href=https://github.com/Intel-tensorflow/tensorflow/tree/v2.10.0>2.10.0</a><br>\n    <a href=https://github.com/Intel-tensorflow/tensorflow/tree/v2.9.1>2.9.1</a><br>\n    <td class=\"tg-7zrl\"><a href=https://download.pytorch.org/whl/torch_stable.html>1.13.0+cpu</a><br>\n    <a href=https://download.pytorch.org/whl/torch_stable.html>1.12.0+cpu</a><br>\n    <td class=\"tg-7zrl\"><a href=https://github.com/intel/intel-extension-for-pytorch/tree/1.11.0>1.13.0</a><br>\n    <a href=https://github.com/intel/intel-extension-for-pytorch/tree/v1.10.0>1.12.0</a></td>\n  </tr>\n</tbody>\n</table>\n\n\n## Selected Publications/Events\n* NeurIPS'2022: [Fast Distilbert on CPUs](https://arxiv.org/abs/2211.07715) (Nov 2022)\n* NeurIPS'2022: [QuaLA-MiniLM: a Quantized Length Adaptive MiniLM](https://arxiv.org/abs/2210.17114) (Nov 2022)\n* Blog published by Alibaba: [Deep learning inference optimization for Address Purification](https://zhuanlan.zhihu.com/p/552484413) (Aug 2022)\n* NeurIPS'2021: [Prune Once for All: Sparse Pre-Trained Language Models](https://arxiv.org/abs/2111.05754) (Nov 2021)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/intel/",
            "keywords": "quantization,auto-tuning,post-training static quantization,post-training dynamic quantization,quantization-aware training,tuning strategy",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "intel-extension-for-transformers",
            "package_url": "https://pypi.org/project/intel-extension-for-transformers/",
            "platform": null,
            "project_url": "https://pypi.org/project/intel-extension-for-transformers/",
            "project_urls": {
                "Homepage": "https://github.com/intel/"
            },
            "release_url": "https://pypi.org/project/intel-extension-for-transformers/1.0a0/",
            "requires_dist": [
                "numpy",
                "transformers (>=4.12.0)",
                "packaging"
            ],
            "requires_python": ">=3.7.0",
            "summary": "Repository of Intel\u00ae Extension for Transformers",
            "version": "1.0a0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15874341,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d071e37c207760f317ff50c517ce9e91",
                    "sha256": "ef837615978662a907f9ed032a8019070df048ac8ce0f2ccb4f122975d4949b4"
                },
                "downloads": -1,
                "filename": "intel_extension_for_transformers-1.0a0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "d071e37c207760f317ff50c517ce9e91",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": ">=3.7.0",
                "size": 37373687,
                "upload_time": "2022-11-24T02:45:28",
                "upload_time_iso_8601": "2022-11-24T02:45:28.352620Z",
                "url": "https://files.pythonhosted.org/packages/ce/71/f5afa8fb9c1f649dc2515b1bceeb2e9652afdb5141e8fce0cf320a4b8b2a/intel_extension_for_transformers-1.0a0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0110eb343aa6efbdbe8fdc1e73471db9",
                    "sha256": "ac4f75446b9aefeb1829b3d57a00d040da9b73a3fcab0fb032571c94caaad738"
                },
                "downloads": -1,
                "filename": "intel_extension_for_transformers-1.0a0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "0110eb343aa6efbdbe8fdc1e73471db9",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": ">=3.7.0",
                "size": 37375926,
                "upload_time": "2022-11-24T02:24:34",
                "upload_time_iso_8601": "2022-11-24T02:24:34.332544Z",
                "url": "https://files.pythonhosted.org/packages/55/13/9f345f716a00fd32a03aa6a684a09a6af987833204fc91c78ed5ea382a39/intel_extension_for_transformers-1.0a0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "630df57e14bef2713d1c68dc4a5b9492",
                    "sha256": "7c83d538e4f719a92a01a5cbd113a51cb8050de10f2cd79936ba4962918ec33f"
                },
                "downloads": -1,
                "filename": "intel_extension_for_transformers-1.0a0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "630df57e14bef2713d1c68dc4a5b9492",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": ">=3.7.0",
                "size": 37657345,
                "upload_time": "2022-11-23T15:53:03",
                "upload_time_iso_8601": "2022-11-23T15:53:03.253630Z",
                "url": "https://files.pythonhosted.org/packages/86/ea/8b79326381a03c32ead4a8ff4669a193a3358a8f2fca5709b22d50a4f7e7/intel_extension_for_transformers-1.0a0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8f7e7700aaed43ed8b8dfbf62fa50daf",
                    "sha256": "87f6a38df6d809dcd727dbf5b0481b427b608fa1e580131e4cb929d2fd618ea7"
                },
                "downloads": -1,
                "filename": "intel_extension_for_transformers-1.0a0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "8f7e7700aaed43ed8b8dfbf62fa50daf",
                "packagetype": "bdist_wheel",
                "python_version": "cp39",
                "requires_python": ">=3.7.0",
                "size": 37373666,
                "upload_time": "2022-11-24T02:37:03",
                "upload_time_iso_8601": "2022-11-24T02:37:03.976188Z",
                "url": "https://files.pythonhosted.org/packages/6f/12/603ac40e63bbb10723d120d2627ad1c88ed068ac252b5c965981d9d421af/intel_extension_for_transformers-1.0a0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cfef24c03f580d18e0de71c4ca748981",
                    "sha256": "4788e5bb3537daadfb04b8910b1fd6e5e28c8b7b919be7c63f58d354e7e7d8d1"
                },
                "downloads": -1,
                "filename": "intel_extension_for_transformers-1.0a0.tar.gz",
                "has_sig": false,
                "md5_digest": "cfef24c03f580d18e0de71c4ca748981",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7.0",
                "size": 151586,
                "upload_time": "2022-11-23T15:53:06",
                "upload_time_iso_8601": "2022-11-23T15:53:06.165181Z",
                "url": "https://files.pythonhosted.org/packages/c1/cc/4f7d1fe237f2fc0f67719e627a6a13805d17f7a74bb6b1b573dcd96fa422/intel_extension_for_transformers-1.0a0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}