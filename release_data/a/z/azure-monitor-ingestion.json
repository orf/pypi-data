{
    "1.0.0b1": {
        "info": {
            "author": "Microsoft Corporation",
            "author_email": "azpysdkhelp@microsoft.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Azure Monitor Ingestion client library for Python\n\nThe Azure Monitor Ingestion client library is used to send custom logs to [Azure Monitor][azure_monitor_overview].\n\nThis library allows you to send data from virtually any source to supported built-in tables or to custom tables \nthat you create in Log Analytics workspace. You can even extend the schema of built-in tables with custom columns.\n\n**Resources:**\n\n- [Source code][source]\n- [Package (PyPI)][package]\n- [API reference documentation][python-ingestion-ref-docs]\n- [Service documentation][azure_monitor_overview]\n- [Samples][samples]\n- [Change log][changelog]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended on 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Prerequisites\n\n- Python 3.6 or later\n- An [Azure subscription][azure_subscription]\n- An [Azure Log Analytics workspace][azure_monitor_create_using_portal].\n- A [Data Collection Endpoint][data_collection_endpoint]\n- A [Data Collection Rule][data_collection_rule]\n\n### Install the package\n\nInstall the Azure Monitor Ingestion client library for Python with [pip][pip]:\n\n```bash\npip install azure-monitor-ingestion\n```\n\n\n### Create the client\n\nAn authenticated client is required to upload Logs to Azure Monitor. The library includes both synchronous and asynchronous forms of the clients. To authenticate, create an instance of a token credential. Use that instance when creating a `LogsIngestionClient`. The following examples use `DefaultAzureCredential` from the [azure-identity](https://pypi.org/project/azure-identity/) package.\n\n#### Synchronous clients\n\nConsider the following example, which creates synchronous clients for uploading logs:\n\n```python\nimport os\nfrom azure.identity import DefaultAzureCredential\nfrom azure.monitor.ingestion import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\nlogs_client = LogsIngestionClient(endpoint, credential)\n```\n\n#### Asynchronous clients\n\nThe asynchronous forms of the client APIs are found in the `.aio`-suffixed namespace. For example:\n\n```python\nimport os\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.monitor.ingestion.aio import LogsIngestionClient\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\nlogs_client = LogsIngestionClient(endpoint, credential)\n```\n\n## Key concepts\n\n### Data Collection Endpoint\n\nData Collection Endpoints (DCEs) allow you to uniquely configure ingestion settings for Azure Monitor. [This \narticle][data_collection_endpoint] provides an overview of data collection endpoints including their contents and \nstructure and how you can create and work with them.\n\n### Data Collection Rule\n\nData collection rules (DCR) define data collected by Azure Monitor and specify how and where that data should be sent or\nstored. The REST API call must specify a DCR to use. A single DCE can support multiple DCRs, so you can specify a\ndifferent DCR for different sources and target tables.\n\nThe DCR must understand the structure of the input data and the structure of the target table. If the two don't match,\nit can use a transformation to convert the source data to match the target table. You may also use the transform to\nfilter source data and perform any other calculations or conversions.\n\nFor more details, refer to [Data collection rules in Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview).\n\n### Log Analytics Workspace Tables\n\nCustom logs can send data to any custom table that you create and to certain built-in tables in your Log Analytics \nworkspace. The target table must exist before you can send data to it. The following built-in tables are currently supported:\n\n- [CommonSecurityLog](https://docs.microsoft.com/azure/azure-monitor/reference/tables/commonsecuritylog)\n- [SecurityEvents](https://docs.microsoft.com/azure/azure-monitor/reference/tables/securityevent)\n- [Syslog](https://docs.microsoft.com/azure/azure-monitor/reference/tables/syslog)\n- [WindowsEvents](https://docs.microsoft.com/azure/azure-monitor/reference/tables/windowsevent)\n\n## Examples\n\n- [Upload custom logs](#upload-custom-logs)\n\n### Upload custom logs\n\nThis example shows uploading logs to Azure monitor.\n\n```python\nimport os\nfrom azure.monitor.ingestion import LogsIngestionClient, UploadLogsStatus\nfrom azure.identity import DefaultAzureCredential\n\nendpoint = os.environ['DATA_COLLECTION_ENDPOINT']\ncredential = DefaultAzureCredential()\n\nclient = LogsIngestionClient(endpoint=endpoint, credential=credential, logging_enable=True)\n\nrule_id = os.environ['LOGS_DCR_RULE_ID']\nbody = [\n      {\n        \"Time\": \"2021-12-08T23:51:14.1104269Z\",\n        \"Computer\": \"Computer1\",\n        \"AdditionalContext\": \"context-2\"\n      },\n      {\n        \"Time\": \"2021-12-08T23:51:14.1104269Z\",\n        \"Computer\": \"Computer2\",\n        \"AdditionalContext\": \"context\"\n      }\n    ]\n\nresponse = client.upload(rule_id=rule_id, stream_name=os.environ['LOGS_DCR_STREAM_NAME'], logs=body)\nif response.status != UploadLogsStatus.SUCCESS:\n    failed_logs = response.failed_logs_index\n    print(failed_logs)\n```\n\n## Troubleshooting\n\nEnable the `azure.monitor.ingestion` logger to collect traces from the library.\n\n### General\n\nMonitor Ingestion client library will raise exceptions defined in [Azure Core][azure_core_exceptions].\n\n### Logging\n\nThis library uses the standard [logging][python_logging] library for logging. Basic information about HTTP sessions, such as URLs and headers, is logged at the `INFO` level.\n\n### Optional configuration\n\nOptional keyword arguments can be passed in at the client and per-operation level. The `azure-core` [reference documentation][azure_core_ref_docs] describes available configurations for retries, logging, transport protocols, and more.\n\n## Next steps\n\nTo learn more about Azure Monitor, see the [Azure Monitor service documentation][azure_monitor_overview].\n\n### Samples\n\nThe following code samples show common scenarios with the Azure Monitor Ingestion client library.\n\n#### Logs Ingestion samples\n\n- [Upload a list of logs](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/sample_send_small_logs.py) ([async sample](https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/samples/async_samples/sample_send_small_logs_async.py))\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit [cla.microsoft.com][cla].\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct]. For more information see the [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or comments.\n\n<!-- LINKS -->\n\n[azure_core_exceptions]: https://aka.ms/azsdk/python/core/docs#module-azure.core.exceptions\n[azure_core_ref_docs]: https://aka.ms/azsdk/python/core/docs\n[azure_monitor_overview]: https://docs.microsoft.com/azure/azure-monitor/\n[azure_subscription]: https://azure.microsoft.com/free/python/\n[changelog]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-ingestion/CHANGELOG.md\n[package]: https://aka.ms/azsdk-python-monitor-ingestion-pypi\n[pip]: https://pypi.org/project/pip/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[python-ingestion-ref-docs]: https://aka.ms/azsdk/python/monitor-ingestion/docs\n[samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/monitor/azure-monitor-ingestion/samples\n[source]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/monitor/azure-monitor-ingestion/\n[data_collection_endpoint]: https://docs.microsoft.com//azure/azure-monitor/essentials/data-collection-endpoint-overview\n[data_collection_rule]: https://docs.microsoft.com/azure/azure-monitor/essentials/data-collection-rule-overview\n\n[cla]: https://cla.microsoft.com\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n\n\n# Release History\n\n## 1.0.0b1 (2022-07-15)\n\n  ## Features\n  - Version (1.0.0b1) is the first preview of our efforts to create a user-friendly and Pythonic client library for Azure Monitor Ingestion.\n    For more information about this, and preview releases of other Azure SDK libraries, please visit https://azure.github.io/azure-sdk/releases/latest/python.html.\n  - Added `~azure.monitor.ingestion.LogsIngestionClient` to send logs to Azure Monitor along with `~azure.monitor.ingestion.aio.LogsIngestionClient`.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Azure/azure-sdk-for-python",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "azure-monitor-ingestion",
            "package_url": "https://pypi.org/project/azure-monitor-ingestion/",
            "platform": null,
            "project_url": "https://pypi.org/project/azure-monitor-ingestion/",
            "project_urls": {
                "Homepage": "https://github.com/Azure/azure-sdk-for-python"
            },
            "release_url": "https://pypi.org/project/azure-monitor-ingestion/1.0.0b1/",
            "requires_dist": [
                "msrest (>=0.6.19)",
                "azure-core (<2.0.0,>=1.24.0)"
            ],
            "requires_python": ">=3.6",
            "summary": "Microsoft Azure Monitor Ingestion Client Library for Python",
            "version": "1.0.0b1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14449278,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f761c3cba73dcbb50ee1a623fa552196",
                    "sha256": "cb08c97825078f90b6ebd50e214f32730ac32baf5d3b9fdad64c2cdbd24e1311"
                },
                "downloads": -1,
                "filename": "azure_monitor_ingestion-1.0.0b1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f761c3cba73dcbb50ee1a623fa552196",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26230,
                "upload_time": "2022-07-15T20:31:44",
                "upload_time_iso_8601": "2022-07-15T20:31:44.774901Z",
                "url": "https://files.pythonhosted.org/packages/bc/47/7a4c4d250efc02aca6d0d91a7676981645d34d1bdc801da50bb980fd4570/azure_monitor_ingestion-1.0.0b1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "517edcdf6acf47b14933047182c9ada0",
                    "sha256": "b5be7f8375626cab6c5cf09dc782ee7983fae1f59d18ac4645c44625d2c8322d"
                },
                "downloads": -1,
                "filename": "azure-monitor-ingestion-1.0.0b1.zip",
                "has_sig": false,
                "md5_digest": "517edcdf6acf47b14933047182c9ada0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 44392,
                "upload_time": "2022-07-15T20:31:47",
                "upload_time_iso_8601": "2022-07-15T20:31:47.240908Z",
                "url": "https://files.pythonhosted.org/packages/6c/9b/884bbbab2bc6f6b6e8f50bf710002a44fce71a38cb1f93cc43ea1c72e795/azure-monitor-ingestion-1.0.0b1.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}