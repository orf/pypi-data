{
    "0.2": {
        "info": {
            "author": "Mirko Brombin",
            "author_email": "send@mirko.pm",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description": "# FVS\nFile Versioning System with hash comparison and data storage to create unlinked \nstates that can be deleted\n\n> \u26a0\ufe0f This is currently a Beta.\n\n### Why FVS?\nThe main reason for this project is for the purpose of personal knowledge and \nunderstanding of the versioning system. The second reason is to make a simple\nand easy-to-implement versioning system for [Bottles](https://github.com/bottlesdevs/Bottles).\n\nThere are plenty of other versioning systems out there, but all of these \nprovide features that I wouldn't need in my projects. The purpose of FVS is to \nalways remain as clear and simple as possible, providing only the functionality \nof organizing file versions into states, ie recovery points that take advantage \nof deduplication to minimize space consumption.\n\n### Dependencies\nFVS only need the `orjson` python package.\n\n### Concept\nWith the following images, we can see the basic concept of FVS and how it works.\n\nIn the following examples we will investigate only the first file cell, the\nothers follow the same concept and should be easy to understand.\n\n![](data/cnpt_1.png)\n\nAs you can see, the first file was added, removed and re-added but FVS always \nkept only one copy of that file as it was always the same version.\n\n![](data/cnpt_2.png)\n\nThe example above shows a different timeline. In State #4 a new file has been \nadded in the same place as the one in State #1 but since it is a different \nfile, FVS is keeping two files in its storage.\n\nSince the second version of the file is used only by State #4, if we were to \nrestore one of the previous States, FVS will permanently delete that file as \nit is not necessary for the other States, this is because FVS per concept \ndoes not allow travel to the future, so all the States after the restored one \nare deleted.\n\n### Install\n```bash\npython setup.py install  # --user for user-local install\n```\n\n### CLI usage\n```bash\n> mkdir repo ; cd repo\n> fvs init  \n# with custom path: fvs init --path <path>\n# with compression turned on: fvs init --use-compression\nInitialized FVS repository in /your/location/repo\n\n> touch hello.txt\n> fvs commit -m \"First state\"  # -i=<pattern> -i=<pattern2> to ignore files\nCommitting...\nCommitted state 0\n\n> echo \"Hello world!\" >> hello.txt\n> fvs commit -m \"Second state\"\nCommitting...\nCommitted state 1\n\n> fvs states\n-   0 First state\n- \u2794 1 Second state\n\n> fvs restore -s 0\nRestored state 0\n\n> fvs active\nActive state is 0\n```\n\n### Lib usage\n\n```python\nfrom fvs import FVSRepo\n\n# create a new repo or point to an existing one\nrepo = FVSRepo(\"just/one/path\")\n\n# add some new files\nwith open(\"test/hello.txt\", \"w\") as f:\n    f.write(\"Hello world!\")\n    \nwith open(\"test/ciao.txt\", \"w\") as f:\n    f.write(\"Ciao!\")\n\n# commit the changes\nrepo.commit(\"My first state!\")\n\n# add some more files\nwith open(\"test/test.txt\", \"w\") as f:\n    f.write(\"Hello world again!\")\n\nwith open(\"test/test.ignore\", \"w\") as f:\n    f.write(\"This time nobody will see this!\")\n\n# commit the changes ignoring files with .ignore extension\nrepo.commit(\"My second state!\", ignore=[\"*.ignore\"])\n\n# restore the state 1\nrepo.restore_state(1)\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mirkobrombin/FVS",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "FVS",
            "package_url": "https://pypi.org/project/FVS/",
            "platform": null,
            "project_url": "https://pypi.org/project/FVS/",
            "project_urls": {
                "Bug Tracker": "https://github.com/mirkobrombin/FVS/issues",
                "Homepage": "https://github.com/mirkobrombin/FVS"
            },
            "release_url": "https://pypi.org/project/FVS/0.2/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "File Versioning System with hash comparison, deduplication and data storage to create unlinked states that can be deleted",
            "version": "0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14519538,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5e4fe49023c439eeee88b6656cadf8da",
                    "sha256": "017728df3de9059e89ebad4812bcad81a61f75ea35ffc29b6eb7664b228fcebb"
                },
                "downloads": -1,
                "filename": "FVS-0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "5e4fe49023c439eeee88b6656cadf8da",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 14027,
                "upload_time": "2022-07-22T19:18:50",
                "upload_time_iso_8601": "2022-07-22T19:18:50.132837Z",
                "url": "https://files.pythonhosted.org/packages/1c/86/a7889429a244dbd1847bd5ecc1840cc2c5bdff3869a1932c269d1b6a25d9/FVS-0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}