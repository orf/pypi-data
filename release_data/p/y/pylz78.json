{
    "0.0.1": {
        "info": {
            "author": "Pedro Carvalho",
            "author_email": "ptcar@pteco.dev",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ptcar2009/ALG2-TP1",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pylz78",
            "package_url": "https://pypi.org/project/pylz78/",
            "platform": "",
            "project_url": "https://pypi.org/project/pylz78/",
            "project_urls": {
                "Homepage": "https://github.com/ptcar2009/ALG2-TP1"
            },
            "release_url": "https://pypi.org/project/pylz78/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "lz78 compressor in python",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 9229576,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "38f66a38671a430e43d6e645388e8485",
                    "sha256": "00eda302f32ba536ef33ff0bb0cc86564ea4e0fa249a26ec5d5d780bf256678d"
                },
                "downloads": -1,
                "filename": "pylz78-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "38f66a38671a430e43d6e645388e8485",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 6867,
                "upload_time": "2021-01-26T01:46:48",
                "upload_time_iso_8601": "2021-01-26T01:46:48.124909Z",
                "url": "https://files.pythonhosted.org/packages/e1/a0/57b2bbb564e171b0b374a68699d0aaf93238d34d4a3ef862e2e3ebe3dd73/pylz78-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "dcbe28273502009980a81d9c87c08536",
                    "sha256": "6944d7ed85b681b5d001cab29286739b002d196a45de79660fa3b25258206999"
                },
                "downloads": -1,
                "filename": "pylz78-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "dcbe28273502009980a81d9c87c08536",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 6168,
                "upload_time": "2021-01-26T01:46:49",
                "upload_time_iso_8601": "2021-01-26T01:46:49.441261Z",
                "url": "https://files.pythonhosted.org/packages/5a/24/0850c87a80bf9ff53c3e1f59cd31ea72f7f16b8f8e57f2f2e44d97bb6e76/pylz78-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Pedro Carvalho",
            "author_email": "ptcar@pteco.dev",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Trabalho Pr\u00e1tico 1\n\n## Algoritmos 2 - DCC - ICEx - UFMG\n\n### Pedro Tavares de Carvalho\n\nEsse trabalho tem como objetivo a implementa\u00e7\u00e3o de um compressor/decompressor padr\u00e3o `lz78`, utilizando uma trie compacta como estrutura auxiliar. Esse algoritmo de compress\u00e3o implica na representa\u00e7\u00e3o do texto como um conjunto de prefixos em ordem, identificando cada sequ\u00eancia como um prefixo existente acoplado a um caractere novo do texto.\n\nEm pseudoc\u00f3digo, o algoritmo se d\u00e1 assim:\n\n```pseudocode\ndef encodeLZ78(texto):\n\tprefixos = map()\n\tprefixos.add('', 0)\n\tcadeia = ''\n\tindice = 1\n\tfor caractere in texto:\n\t\tif cadeia + caractere in prefixos: \t// se a cadeia com o caractere\n        \t\t\t\t\t\t\t\t\t// j\u00e1 existe nos prefixos\n\t\t\tcadeia = cadeia + caractere \t// adicione mais um caractere\n            \t\t\t\t\t\t\t\t// \u00e0 cadeia\n\t\t\tcontinue\n\t\tsaida(caractere, prefixos[cadeia]) \t// caso n\u00e3o exista, \n\t\t\t\t\t\t\t\t\t\t\t// adicione \u00e0 sa\u00edda a nova\n                                            // sequencia que tem que ser\n                                            // impressa\n\n\t\tprefixos.add(cadeia + caractere, indice) \t// adicione o prefixo\n\t\t\t\t\t\t\t\t\t\t\t\t\t// atual \u00e0 cadeia\n\t\tindice = indice + 1 // aumente o \u00edndice\n\t\tcadeia = ''\n```\n\nNo caso dessa implementa\u00e7\u00e3o, o mapa `prefixos` de dar\u00e1 por uma trie compacta, por\u00e9m a l\u00f3gica da compress\u00e3o continua a mesma.\n\nEssa substitui\u00e7\u00e3o tem como objetivo diminuir a mem\u00f3ria gasta com guardar os prefixos j\u00e1 existentes, pois um mapa tem que guardar os prefixos completos, por\u00e9m a trie compacta \u00e9 constru\u00edda de forma a utilizar os prefixos como parte da indexa\u00e7\u00e3o da mesma, diminuindo a repeti\u00e7\u00e3o de prefixos comuns.\n\nA decompress\u00e3o, por\u00e9m, traz alguma dificuldade. Apesar de algoritmicamente simples, ela exige acesso aos \u00edndices j\u00e1 concebidos, e com a estrutura da trie esse acesso possui complexidade alta, $\\mathcal O(n)$, dado que a busca por \u00edndices \u00e9 basicamente uma busca em profundidade/largura o que incapacita a mesma de fazer o processo de decompress\u00e3o eficientemente.\n\n## Implementa\u00e7\u00e3o\n\n Em um primeiro momento, foi implementado o algoritmo com um dicion\u00e1rio como estrutura auxiliar, apenas para prova de contexto. Essa implementa\u00e7\u00e3o foi relativamente simples.\n\n## Trie\n\nEm termos da implementa\u00e7\u00e3o da trie, os algoritmos foram baseados nos vistos em sala de aula, implementados \u00e0 risca. \n\n### Inser\u00e7\u00e3o\n\nO algoritmo de inser\u00e7\u00e3o \u00e9 descrito abaixo\n\n```pseudocode\ndef inserir(node, palavra, valor):\n\tindice_final, filho = node.comparar_prefixos(palavra)\n\tif !filho:\n    \tnode.adicionar_filho(palavra, nova_folha(valor))\n    \tif node.is_folha:\n    \t\tnode.adicionar_filho('', nova_folha(node.valor))\n    \t\tnode.is_folha = false\n    \t\tnode.valor = Null\n    else if indice_final == palavra.tamanho():\n    \tinserir(filho, palavra[:indice_final], valor)\n    else:\n    \ttemp = filho\n    \tnode.remover(filho)\n    \tchave_resto_filho = filho.chave[:indice_final]\n    \tno = novo_no()\n    \tfilho.chave = filho.chave[indice_final:]\n    \tnode.adicionar_filho(chave_resto_filho, no)\n    \tno.adicionar_filho(filho.chave, filho)\n    \tno.adicionar_filho(palavra[indicie_final:], nova_folha(valor))\n```\n\nA especifica\u00e7\u00e3o do funcionamento est\u00e1 no c\u00f3digo, mas se entende que existem tr\u00eas casos:\n\n1. Caso, ao adicionar uma palavra ao n\u00f3, essa palavra n\u00e3o compartilhe prefixos com os filhos desse n\u00f3, crie um n\u00f3 filho com a palavra como valor.\n   1. Nesse caso ainda, se o n\u00f3 no qual a palavra est\u00e1 sendo adicionada era uma folha, est\u00e3o crie outro n\u00f3 filho, com a sequ\u00eancia vazia como valor.\n2. Caso dentre os filhos exista um prefixo da palavra em quest\u00e3o, adicione o resto dessa palavra ao filho.\n3. Caso um dos filhos compartilhe um prefixo com a palavra em quest\u00e3o, crie um novo n\u00f3 com o prefixo compartilhado, e adicione dois n\u00f3s a esse, com o resto da palavra e o resto do prefixo.\n\nEsse algoritmo constr\u00f3i a trie a partir de um n\u00f3 vazio, com o seu valor colocado como a cadeia vazia.\n\n### Remo\u00e7\u00e3o\n\nComo n\u00e3o havia necessidade de remo\u00e7\u00e3o de itens da estrutura, a remo\u00e7\u00e3o n\u00e3o foi implementada.\n\n### Busca\n\nA busca se d\u00e1 de forma simples. A cada n\u00f3, acha a chave que compartilha um prefixo com a palavra a ser buscada. Se essa chave n\u00e3o existir, retorne -1. Se ela existir, repita a busca com o n\u00f3 correspondente \u00e0 chave, e com a palavra sem o prefixo da chave.\n\n## Compress\u00e3o\n\nA compress\u00e3o foi feita respeitando o pseudoc\u00f3digo descrito na introdu\u00e7\u00e3o do relat\u00f3rio, apenas substituindo o mapa utilizado para os prefixos pela implementa\u00e7\u00e3o de trie compacta e implementando a sa\u00edda como uma sa\u00edda bin\u00e1ria.\n\nA sa\u00edda do c\u00f3digo gera um arquivo em que os \u00edndices de cada prefixo e os caracteres correspondentes a ele possuem um n\u00famero espec\u00edfico de *bytes*, passado como par\u00e2metro pela interface de linha de comando.\n\n## Decompress\u00e3o\n\nA estrutura de dados utilizada na decompress\u00e3o foi simplesmente um vetor de cadeias. A estrutura \u00e9 \u00f3tima pois inser\u00e7\u00e3o e acesso \u00e9 $\\mathcal O(1)$, e a utiliza\u00e7\u00e3o de mem\u00f3ria n\u00e3o \u00e9 t\u00e3o grande.\n\n## Interface com o usu\u00e1rio\n\nA interface com o usu\u00e1rio foi feita utilizando a biblioteca `argparse`, da biblioteca *default* da linguagem.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ptcar2009/ALG2-TP1",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pylz78",
            "package_url": "https://pypi.org/project/pylz78/",
            "platform": "",
            "project_url": "https://pypi.org/project/pylz78/",
            "project_urls": {
                "Homepage": "https://github.com/ptcar2009/ALG2-TP1"
            },
            "release_url": "https://pypi.org/project/pylz78/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "lz78 compressor in python",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 9229576,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e7a2d5030816d4437e2e64a84b3bd33d",
                    "sha256": "29666886fd2801e1d7ee57e9a94512117713a4a1503e132784e108caa60cb875"
                },
                "downloads": -1,
                "filename": "pylz78-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e7a2d5030816d4437e2e64a84b3bd33d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 7465,
                "upload_time": "2021-01-26T01:49:33",
                "upload_time_iso_8601": "2021-01-26T01:49:33.779040Z",
                "url": "https://files.pythonhosted.org/packages/88/0e/1c79299d6fe02880e09b5e5eeb001568b62edbe186e8189abb23b79cfa6b/pylz78-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8655944008ed6f03482ba0c1cc0cd43a",
                    "sha256": "1c11eb66a1aa7178d4edfc271ff9ca34006a487569fed3ff165990ce53b53257"
                },
                "downloads": -1,
                "filename": "pylz78-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8655944008ed6f03482ba0c1cc0cd43a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 6344,
                "upload_time": "2021-01-26T01:49:35",
                "upload_time_iso_8601": "2021-01-26T01:49:35.318488Z",
                "url": "https://files.pythonhosted.org/packages/1b/1d/af4f54f5a4159748f259272ff5c6604924337c27fe4168570e8184649006/pylz78-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}