{
    "1.1.1": {
        "info": {
            "author": "\u738b\u6587\u7693(wangwenhao)",
            "author_email": "DATA-OG@139.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/wangwenhao-DATA-OG/scorecardpyEC",
            "keywords": "score card,scorecardpy",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "scorecardpyEC",
            "package_url": "https://pypi.org/project/scorecardpyEC/",
            "platform": "",
            "project_url": "https://pypi.org/project/scorecardpyEC/",
            "project_urls": {
                "Homepage": "https://github.com/wangwenhao-DATA-OG/scorecardpyEC"
            },
            "release_url": "https://pypi.org/project/scorecardpyEC/1.1.1/",
            "requires_dist": [
                "scorecardpy (>=0.1.8)",
                "pandas (>=0.25.1)",
                "numpy (>=1.17.4)"
            ],
            "requires_python": ">=3.4",
            "summary": "\u4e3a\u8bc4\u5206\u5361\u9879\u76eehttps://github.com/ShichenXie/scorecardpy\u63d0\u4f9b\u5e38\u7528\u7684\u989d\u5916\u7684\u5de5\u5177\u7ec4\u4ef6\u3002\u53ef\u4ee5\u5e2e\u52a9\u8bc4\u5206\u5361\u5f00\u53d1\u4eba\u5458\u63d0\u9ad8\u5f00\u53d1\u6548\u7387",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15532786,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ece31e92cdea34feb244448c145031de",
                    "sha256": "d9a2253698d88e2453684e03b63db0f02e3c61c9d53e4e8cf9cf96a95348d998"
                },
                "downloads": -1,
                "filename": "scorecardpyEC-1.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ece31e92cdea34feb244448c145031de",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.4",
                "size": 23813,
                "upload_time": "2021-12-05T12:59:57",
                "upload_time_iso_8601": "2021-12-05T12:59:57.213028Z",
                "url": "https://files.pythonhosted.org/packages/a9/d4/b69a413a5cdcf9ddb6f00efc7c0a0ba98afe5b808d29ab6914fe9213e601/scorecardpyEC-1.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bee543ee9b2785acf212d48f73b68484",
                    "sha256": "ec3eba0df707821f05155f9dbb4e549e1f49256b09c2584a8261f6ee34604a80"
                },
                "downloads": -1,
                "filename": "scorecardpyEC-1.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "bee543ee9b2785acf212d48f73b68484",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.4",
                "size": 29719,
                "upload_time": "2021-12-05T12:59:59",
                "upload_time_iso_8601": "2021-12-05T12:59:59.194912Z",
                "url": "https://files.pythonhosted.org/packages/7e/01/518b170efb0f5f10c04c9fbfc2b6e8356ca44bcd3409ef30e0395493cb0f/scorecardpyEC-1.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.2": {
        "info": {
            "author": "\u738b\u6587\u7693(wangwenhao)",
            "author_email": "DATA-OG@139.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# scorecardpyEC\r\n\r\n# \u529f\u80fd\u63cf\u8ff0\uff08Function Description\uff09\r\n    \u4e3a\u8bc4\u5206\u5361\u9879\u76eehttps://github.com/ShichenXie/scorecardpy\u63d0\u4f9b\u989d\u5916\u7684\u5de5\u5177\u7ec4\u4ef6\u3002\u53ef\u4ee5\u5e2e\u52a9\u8bc4\u5206\u5361\u5f00\u53d1\u4eba\u5458\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\r\n    1.\u4e3awoe\u5206\u7bb1\u548cwoe\u8f6c\u6362\u63d0\u4f9b\u5185\u5b58\u4f18\u5316\u548c\u591a\u8fdb\u7a0b\u8ba1\u7b97\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u5f97\u8d85\u9ad8\u7ef4\u7279\u5f81\u7684\u5206\u7bb1\u548cwoe\u8f6c\u6362\u5f97\u4ee5\u8fd0\u884c\u51fa\u7ed3\u679c\uff0c\u5e76\u63d0\u5347\u8fd0\u884c\u901f\u5ea6\r\n    2.\u901a\u8fc7\u6837\u672c\u6743\u91cd\u8c03\u6574\u5206\u7bb1\u4fe1\u606f\r\n    3.\u63d0\u4f9b\u5f3a\u5236\u5355\u8c03\u5206\u7bb1\u7684\u51fd\u6570\u3002\u901a\u8fc7\u5bfb\u627e\u6700\u4f18\u7684count_distr_limit\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u5408\u5e76\u4e0d\u5355\u8c03\u7684\u76f8\u90bb\u7bb1\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u7cbe\u7ec6\u7684\u5408\u5e76\u7bb1\uff0c\u4f7f\u5f97\u5408\u5e76\u7bb1\u64cd\u4f5c\u6240\u5e26\u6765\u7684\u4fe1\u606f\u635f\u5931\u51cf\u5c11\u3002\r\n    4.\u63d0\u4f9b\u4e1a\u52a1\u5408\u7406\u524d\u63d0\u4e0b\u5408\u5e76missing\u5206\u7bb1\u7684\u51fd\u6570\uff0c\u907f\u514d\u4e86\u5199\u5927\u91cfbreaks\u7684\u7e41\u7410\u3002 \r\n    5.\u63d0\u4f9b\u4e1a\u52a1\u5408\u7406\u524d\u63d0\u4e0b\u5408\u5e76\u7279\u6b8a\u503c\u5206\u7bb1\u7684\u51fd\u6570\uff0c\u907f\u514d\u4e86\u5199\u5927\u91cfbreaks\u7684\u7e41\u7410\u3002 \r\n    \r\n    Function Description\r\n    Providing some enhanced components for famous score card project https://github.com/ShichenXie/scorecardpy .These enhanced components can promote work efficiency.\r\n    1.Providing memory optimization and multiprocess computing solution to scorecardpy.woebin and scorecardpy.woebin_ply.It make woe_bin and woebin_ply transforming feasible under hyper-high dimensional data and lift computing speed.\r\n    2.Adjusting infomations of bin by sample weights.\r\n    3.Providing a forcing monotonic bin function.It makes merging bins more carefully and reduces infomation loss that instead of merging two neighbouring non-monotonic bins,searching optimal count_distr_limit to get monotonic bin.\r\n    4.Providing a merging missing bin function under according with business that aviods writting many breaks.\r\n    5.Providing a merging special value bin function under according with business that aviods writting many breaks.\r\n\r\n# \u5b89\u88c5\uff08Install\uff09\r\npip install scorecardpyEC\r\n\r\n# \u4f7f\u7528\u8bf4\u660e \uff08Usage\uff09:\r\n```\r\nimport sys\r\nsys.path.append('./')\r\nfrom Bin import ECBin\r\nimport numpy as np\r\nimport pandas as pd\r\nimport scorecardpy as sc\r\nclass Test_SCEC():\r\n    def test_x2bin():\r\n        test_data = pd.DataFrame({'x1':[1,0,0.5,-1,np.nan],'x2':[1,0.4,np.nan,0,4]})\r\n        test_bins={}\r\n        test_bins['x1'] = pd.DataFrame({'variable':['x1','x1','x1','x1']\r\n                                        ,'bin':['[0,0.4)%,%missing','-1','[0.4,0.7)','[0.7,Inf)']})   \r\n        test_bins['x2'] = pd.DataFrame({'variable':['x2','x2','x2','x2']\r\n                                        ,'bin':['missing','[0,1.0)','[1.0,2.0)','[2.0,Inf)']})\r\n        tmp = test_data.apply(lambda s:ECBin.x2bin(s,test_bins[s.name]))\r\n        print(pd.concat(test_bins))\r\n        print(test_data)\r\n        print(tmp)\r\n        \r\n        \r\n    def test_adj_bin_with_weight():\r\n        dat = sc.germancredit().iloc[:,np.arange(-6,0)]\r\n        np.random.seed(0)\r\n        dat['weight'] = np.random.randint(1,4,1000)\r\n        \r\n        dat.loc[dat.index.isin(np.arange(0,100)),'number.of.existing.credits.at.this.bank']=np.nan\r\n        dat.to_excel('dat.xlsx')\r\n        sv = {'number.of.existing.credits.at.this.bank':[1]}\r\n        bins = sc.woebin(dat.loc[:,dat.columns!='weight'], y=\"creditability\",special_values=sv)\r\n        new_bins = ECBin.adj_bin_with_weight(bins,dat,y=\"creditability\",ylabel={'good':'good','bad':'bad'})\r\n        pd.concat(bins).to_excel('bins.xlsx')\r\n        pd.concat(new_bins).to_excel('new_bins.xlsx')\r\n        \r\n    def test_get_monotonic_info():\r\n        dat = sc.germancredit()\r\n        bins = sc.woebin(dat, y=\"creditability\")\r\n        pd.concat(bins).to_excel('bins.xlsx')\r\n        no_monotonic,increasing,decreasing = ECBin.get_monotonic_info(bins,['present.residence.since'\r\n                            ,'savings.account.and.bonds'\r\n                            ,'installment.rate.in.percentage.of.disposable.income'\r\n                            ,'number.of.existing.credits.at.this.bank'\r\n                            ,'age.in.years'\r\n                            ,'duration.in.month'\r\n                            ,'credit.amount'])\r\n        print(no_monotonic,increasing,decreasing)\r\n        \r\n    def test_woebin_mp():\r\n        dat = sc.germancredit()\r\n        # dat['weight'] = np.random.randint(1,4,1000)\r\n        # ,weight='weight'\r\n        bins1 = ECBin.woebin_mp(dat, y=\"creditability\",step=10,ylabel={'good':'good','bad':'bad'})\r\n        pd.concat(bins1).to_excel('bins1.xlsx')\r\n        \r\n        bins2= sc.woebin(dat,y=\"creditability\")\r\n        pd.concat(bins2).to_excel('bins2.xlsx')\r\n        \r\n    def test_make_monotonic_bins_mp():\r\n        dat = sc.germancredit()\r\n        bins,_ = ECBin.make_monotonic_bins_mp(dat, y=\"creditability\",ylabel={'good':'good','bad':'bad'},step=5)\r\n        pd.concat(bins).to_excel('bins.xlsx')\r\n        \r\n    def test_woevalue_mp():\r\n        dat = sc.germancredit()\r\n        from sklearn.model_selection import train_test_split\r\n        X = dat.loc[:,dat.columns!='creditability']\r\n        y = dat['creditability']\r\n        X_train,X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\r\n        \r\n        dats={'train':X_train,'test':X_test}\r\n        bins = ECBin.woebin_mp(pd.concat([X_train,y_train],axis=1), y=\"creditability\",step=10,ylabel={'good':'good','bad':'bad'})\r\n        woe_dats = ECBin.woevalue_mp(dats,bins,step=4)\r\n        print(woe_dats['train'])\r\n        print(woe_dats['test'])\r\n\r\n        \r\n    def test_exp_imp_sc():\r\n        dat = sc.germancredit()\r\n        X = dat.iloc[:,0:4]\r\n        y = dat.creditability.apply(lambda a:1 if a=='bad' else 0)\r\n        dat = pd.concat([X,y],axis=1)\r\n        bins = ECBin.woebin_mp(dat, y=\"creditability\",step=10)\r\n        X = sc.woebin_ply(X, bins)\r\n        X = X.rename(columns=X.columns.to_series().apply(lambda x:x.replace('_woe','')))\r\n        from statsmodels.genmod.generalized_linear_model import GLM\r\n        import statsmodels.api as sm\r\n        from statsmodels.genmod.families import Binomial\r\n        from statsmodels.genmod.families.links import logit \r\n        glm = GLM(y, sm.add_constant(X),family = Binomial(link=logit))\r\n        clf = glm.fit()  \r\n        clf.intercept_=[clf.params.const]\r\n        clf.coef_=[clf.params[1:]]\r\n        card = sc.scorecard(bins, clf,X.columns,basepoints_eq0=True)\r\n        print(card)\r\n        print('=======================')\r\n        ECBin.export_scorecard(card,'sc.xlsx')\r\n        card = ECBin.import_scorecard('sc.xlsx')\r\n        print(card)\r\n        \r\n    def test_merge_missing_breaks():\r\n        dat = sc.germancredit()\r\n        X = dat.iloc[:,0:4]\r\n        X = X.apply(lambda x: x.astype(str) if x.dtype.name=='category' else x)\r\n        np.random.seed(1)\r\n        X.iloc[np.random.randint(X.shape[0],size=10),0]=np.nan\r\n        X.iloc[np.random.randint(X.shape[0],size=20),1]=np.nan\r\n        X.iloc[np.random.randint(X.shape[0],size=30),2]=np.nan\r\n        X.iloc[np.random.randint(X.shape[0],size=40),3]=np.nan\r\n        y = dat.creditability.apply(lambda a:1 if a=='bad' else 0)\r\n        dat = pd.concat([X,y],axis=1)\r\n        ######not merging####\r\n        sv = {'purpose':['furniture/equipment%,%business','education%,%others']\r\n              ,'duration.in.month':[4,5]}\r\n        bins1 = sc.woebin(dat, y=\"creditability\",special_values=sv)\r\n        pd.concat(bins1).to_excel('base.xlsx')  \r\n        \r\n        #######sample1##################\r\n        ECBin.merge_missing(bins1,missing_count_distr_limit_default=0.03,rule_default='first',merge_with_special_value_default=False)\r\n        pd.concat(bins1).to_excel('bins_missing_merge_first.xlsx')\r\n        \r\n        \r\n        #######sample2##################\r\n        bins1 = sc.woebin(dat, y=\"creditability\",special_values=sv)\r\n        ECBin.merge_missing(bins1,missing_count_distr_limit_default=0.03,rule_default='nearly',merge_with_special_value_default=False)\r\n        pd.concat(bins1).to_excel('bins_missing_merge_nearly.xlsx')\r\n        \r\n        \r\n        #######sample3###############\r\n        missing_count_distr_limit={'purpose':0.05,'credit.history':0.04}\r\n        rule={'purpose':'nearly','credit.history':'last'}\r\n        merge_with_special_value=['purpose']\r\n        bins1 = sc.woebin(dat, y=\"creditability\",special_values=sv)\r\n        ECBin.merge_missing(bins1\r\n                      ,missing_count_distr_limit=missing_count_distr_limit\r\n                      ,rule=rule\r\n                      ,merge_with_special_value=merge_with_special_value)\r\n        pd.concat(bins1).to_excel('bins_missing_merge_comb.xlsx')\r\n        \r\n    def test_merge_special_values():\r\n        dat = sc.germancredit()\r\n        X = dat.iloc[:,0:3]\r\n        X = X.apply(lambda x: x.astype(str) if x.dtype.name=='category' else x)\r\n        np.random.seed(1)\r\n        X.iloc[np.random.randint(X.shape[0],size=20),0]=np.nan\r\n        y = dat.creditability.apply(lambda a:1 if a=='bad' else 0)\r\n        dat = pd.concat([X,y],axis=1)\r\n        ######not merging####\r\n        sv = {'duration.in.month':[4,5]\r\n              ,'credit.history':['delay in paying off in the past']}\r\n        bins1 = sc.woebin(dat, y=\"creditability\",special_values=sv)\r\n        pd.concat(bins1).to_excel('base.xlsx')\r\n        \r\n        #######sample1##################\r\n        ECBin.merge_special_values(bins1,special_value_count_distr_limit={'status.of.existing.checking.account':0.02},special_value_count_distr_limit_default=0.01)\r\n        pd.concat(bins1).to_excel('merge_special_values.xlsx')\r\n    \r\nif __name__ == '__main__':\r\n    Test_SCEC.test_x2bin()\r\n    Test_SCEC.test_adj_bin_with_weight()\r\n    Test_SCEC.test_get_monotonic_info()\r\n    Test_SCEC.test_woebin_mp()\r\n    Test_SCEC.test_make_monotonic_bins_mp()\r\n    Test_SCEC.test_woevalue_mp()\r\n    Test_SCEC.test_exp_imp_sc()\r\n    Test_SCEC.test_merge_missing_breaks()\r\n    Test_SCEC.test_merge_special_values()\r\n```\r\n# \u6587\u6863\u548cAPI Documnt and API\r\n## ECBin\r\n### x2bin\r\n        '''\r\n        \u5c06\u4e00\u4e2a\u5411\u91cf\uff08\u7279\u5f81\u9879\uff09\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u6309\u7167\u5206\u7bb1\u4fe1\u606f\u8fdb\u884c\u8f6c\u6362\u3002\r\n        \u5982\u679c\u9700\u8981\u5c06\u5168\u90e8\u7279\u5f81\u8f6c\u6362\u6210\u5206\u7bb1\u6807\u7b7e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\uff1a\r\n        all_df.apply(lambda s:ECBin.x2bin(s,all_bin[s.name]))\r\n        \r\n        Transform a vector (or a feature) to bin label with information of woe_bin.\r\n        If transofming all futures to bin label,uses:\r\n         all_data.apply(lambda s:ECBin.x2bin(s,all_bin[s.name]))   \r\n        \r\n        Parameters    \r\n        ----------\r\n        x:pandas.Series\r\n        \u4e00\u4e2a\u5411\u91cf\uff08\u7279\u5f81\u9879\uff09 \r\n        a vector(or a feature)\r\n        \r\n        binx:pandas.DataFrame\r\n        x\u6240\u5bf9\u5e94\u7684\u5206\u7bb1\u4fe1\u606f\u3002scorecardpy.woebin()\u8fd4\u56de\u503c\u7684\u4e00\u4e2a\u5143\u7d20\u3002\r\n        Information of bin according with x,an item returned by scorecardpy.woebin().\r\n        \r\n        Returns\r\n        ----------\r\n        pandas.Series\r\n        \u8f6c\u6362\u540e\u7684\u5206\u7bb1\u6807\u7b7e\r\n        transformed bin label\r\n        \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_x2bin()\r\n        \r\n        '''\r\n### adj_bin_with_weight\r\n        '''\r\n        \u6309\u7167\u6837\u672c\u6743\u91cd\uff0c\u628a\u5404\u5206\u7bb1\u7684\u6837\u672c\u6570\u8fdb\u884c\u8fd8\u539f\u3002\r\n        \u7528\u6743\u91cd\u8fd8\u539f\u5e76\u4e0d\u662f\u6539\u53d8\u5206\u7bb1\u7684breaks\u3002\u5b83\u53ea\u662f\u6539\u53d8count\uff0ccount_distr\uff0cgood\uff0cbad\uff0cbadprob\uff0c\u800cbin,woe,bin_iv,total_iv,breaks,is_special_values\u5b57\u6bb5\u4fdd\u6301\u539f\u503c\u4e0d\u53d8\r\n        \u5176\u76ee\u7684\u662f\u4f9d\u636e\u91c7\u6837\u7684\u6743\u91cd\u6765\u8fd8\u539f\u771f\u5b9e\u7684\u6982\u7387\u3002\r\n        \u4f7f\u7528\u6b64\u65b9\u6cd5\u65f6\u5e94\u8be5\u6ce8\u610f\uff0c\u5982\u679c\u91c7\u6837\u7684\u6743\u91cd\u53ea\u662f\u4f9d\u636e\u597d\u574f\u6807\u7b7e\uff0c\u800c\u4e0d\u662f\u4f9d\u636e\u8be5\u7279\u5f81\uff0c\u5219\u8fd8\u539f\u53ef\u80fd\u4e0d\u7cbe\u786e\uff0c\u56e0\u4e3a\u5bf9\u8be5\u7279\u5f81\u6765\u8bf4\uff0c\u5176\u62bd\u6837\u7684\u6982\u7387\u53ef\u80fd\u4e0e\u597d\u574f\u6807\u7b7e\u7684\u62bd\u6837\u6982\u7387\u5e76\u4e0d\u4e00\u81f4\u3002\r\n        \r\n        Restore the sample count to original data as weight.\r\n        It`s not changing breaks of bin but changing count,count_distr,good,bad,badprob only and keeping the value of bin,woe,bin_iv,total_iv,breaks,is_special_values.\r\n        The target is restoring true probability with sample weight.\r\n        Note: when sampling if not depending on variables but depending on bad or good flag only,the restoring result may be inexact,due to the sampling probability of the variable is not same with the flag`s of good or bad.\r\n        \r\n        Parameters    \r\n        ----------\r\n        bins:dict\r\n        scorecardpy.woebin()\u7684\u8fd4\u56de\u503c\r\n        bins returned by scorecardpy.woebin()\r\n        \r\n        dat:Pandas.DataFrame\r\n        \u5168\u90e8\u7279\u5f81\u5217 + Y\u6807\u7b7e\u5217 + \u6743\u91cd\u5217\r\n        all features add y and weight columns\r\n        \r\n        y:str\r\n        y\u6807\u7b7e\u7684\u5217\u540d\uff0c\u9ed8\u8ba4\u4e3a'y'\r\n        the name of good or bad target column.Default 'y'\r\n        \r\n        weight\uff1astr\r\n        \u6743\u91cd\u7684\u5217\u540d\u3002\u9ed8\u8ba4 'weight'\r\n        the name of weight column. Default 'weight' \r\n              \r\n        ylabel:dict \r\n        dict\u4e2d\u5fc5\u987b\u5305\u542b\u4e24\u4e2akey\uff0cgood\uff1a\u597d\u6837\u672c\u70b9\u7684\u6807\u8bb0\u3002bad\uff1a\u574f\u6837\u672c\u70b9\u7684\u6807\u8bb0\u3002 \u9ed8\u8ba4 {'good':0,'bad':1}\r\n        Two keys must be in dict,good:the flag of good sample.bad:the flag of bad sample.Default is {'good':0,'bad':1}\r\n        \r\n        \r\n        Returns\r\n        ----------\r\n        dict\r\n        \u6309\u6743\u91cd\u8c03\u6574\u540e\u7684\u5206\u7bb1\r\n        the bins adjusted with weight\r\n        \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_adj_bin_with_weight()\r\n     \r\n        '''\r\n### get_monotonic_info\r\n        '''\r\n        \u8fd4\u56dewoe_bin\u7684\u5404\u4e2a\u7279\u5f81\u7684\u5355\u8c03\u6027\u60c5\u51b5\r\n        \r\n        Parameters    \r\n        ----------\r\n        bins:dict\r\n        scorecardpy.woebin()\u7684\u8fd4\u56de\u503c\r\n        value returned by scorecardpy.woebin()\r\n        \r\n        cols:array\r\n        \u9700\u8981\u8003\u5bdf\u5355\u8c03\u6027\u7684\u5217\u540d\u7684\u96c6\u5408\u3002\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u610f\u5373bins\u4e2d\u6240\u6709\u7684\u5217 \r\n        columns list to be calculated for monotonic.Default is None that means all columns in bins is included\r\n        \r\n        Returns\r\n        ----------\r\n        tuple(array,array,array)\r\n        \u5206\u522b\u8fd4\u56de\u975e\u5355\u8c03\u6027\u7684\u5217\u540d\uff0c\u5355\u8c03\u9012\u589e\u7684\u5217\u540d\uff0c\u5355\u8c03\u9012\u51cf\u7684\u5217\u540d\r\n        tuple(no_monotonic_columns,increasing_columns,decreasing_columns)\r\n        \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_get_monotonic_info()\r\n     \r\n        ''' \r\n        \r\n### woebin_mp\r\n        '''\r\n        scorecardpy.woebin()\u7684\u591a\u8fdb\u7a0b\u7248\u672c\uff0c\u652f\u6301windows\u3002\u8fd4\u56de\u503c\u540cscorecardpy.woebin()\r\n        \r\n        Parameters    \r\n        ----------\r\n        dt:dataframe\r\n        \u540cscorecardpy.woebin\u7684dt\r\n        same with dt in parameters list of scorecardpy.woebin\r\n               \r\n        y:str\r\n        \u540cscorecardpy.woebin\u7684y\r\n        same with y in parameters list of scorecardpy.woebin\r\n        \r\n        x:array\r\n        \u540cscorecardpy.woebin\u7684x\r\n        same with x in parameters list of scorecardpy.woebin\r\n        \r\n        breaks_list:dict\r\n        \u540cscorecardpy.woebin\u7684breaks_list\r\n        same with breaks_list parameters list of scorecardpy.woebin\r\n        \r\n        special_values:dict\r\n        \u540cscorecardpy.woebin\u7684special_values\r\n        same with special_values parameters list of scorecardpy.woebin\r\n        \r\n        stop_limit:float\r\n        \u540cscorecardpy.woebin\u7684stop_limit\r\n        same with stop_limit parameters list of scorecardpy.woebin\r\n        \r\n        count_distr_limit:float\r\n        \u540cscorecardpy.woebin\u7684count_distr_limit\r\n        same with count_distr_limit parameters list of scorecardpy.woebin\r\n        \r\n        bin_num_limit:int\r\n        \u540cscorecardpy.woebin\u7684bin_num_limit\r\n        same with bin_num_limit parameters list of scorecardpy.woebin\r\n        \r\n        no_cores:int\r\n        \u4f7f\u7528\u7684CPU\u6838\u6570\u3002\u9ed8\u8ba4\u4e3aos.cpu_count()-1\u3002\u5b9e\u9645\u4f7f\u7528CPU\u6838\u6570\u53ef\u80fd\u4f1a\u5c11\u4e8eno_cores\uff0c\u89c1step\r\n        used cpu cores number.Default is os.cpu_count()-1.The actually used cpu cores may be less than no_cores,seeing step\r\n        \r\n        method:str\r\n        \u540cscorecardpy.woebin\u7684method\r\n        same with method parameters list of scorecardpy.woebin\r\n        \r\n        weight:str\r\n        \u6743\u91cd\u7684\u5217\u540d\u3002\u9ed8\u8ba4\u4e3aNone\u3002\u5982\u679c\u4e0d\u4e3aNone\uff0c\u5219ECBin.woebin_mp\u8fd0\u884c\u51fa\u5206\u7bb1\u7ed3\u679c\u540e\u4f1a\u81ea\u52a8\u8c03\u7528ECBin.adj_bin_with_weight\r\n        \u6ce8\uff1a\u7528\u6743\u91cd\u8fd8\u539f\u5e76\u4e0d\u4f1a\u6539\u53d8\u5206\u7bb1\u7684breaks\u3002\u5b83\u53ea\u4f1a\u6539\u53d8count\uff0ccount_distr\uff0cgood\uff0cbad\uff0cbadprob\uff0c\u800cbin,woe,bin_iv,total_iv,breaks,is_special_values\u5b57\u6bb5\u4fdd\u6301\u539f\u503c\u4e0d\u53d8\uff0c\u53c2\u8003ECBin.adj_bin_with_weight\u7684weight\u53c2\u6570\r\n        \r\n        The column name of weight.Default is None.If not None,call ECBin.adj_bin_with_weight after getting the result of woe_bin.\r\n        Note:It`s not changing breaks of bin but changing count,count_distr,good,bad,badprob only and keeping the value of bin,woe,bin_iv,total_iv,breaks,is_special_values.\r\n        see the weight parameter of ECBin.adj_bin_with_weight\r\n        \r\n        step:int\r\n        \u6bcf\u4e2a\u8fdb\u7a0b\u4e00\u6b21\u6267\u884c\u7684\u7279\u5f81\u6570\u91cf\u3002\u9ed8\u8ba4\u4e3a50\r\n        \u5b83\u7684\u4f5c\u7528\u662f\u5e73\u8861\u5185\u5b58\u5f00\u9500\u548c\u8fdb\u7a0b\u5207\u6362\u3002step\u8d8a\u9ad8\u5185\u5b58\u5f00\u9500\u8d8a\u5927\uff0c\u4f46\u8fdb\u7a0b\u5207\u6362\u6b21\u6570\u8d8a\u5c11\u3002\u5982\u679c\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u539f\u7406\u4e0d\u4e86\u89e3\uff0c\u5219\u4e0d\u9700\u8981\u8c03\u6574\u8be5\u53c2\u6570\uff0c\u4fdd\u7559\u9ed8\u8ba4\u503c\u5373\u53ef\u3002\r\n        cpu\u7684\u5b9e\u9645\u4f7f\u7528\u6838\u6570\u4e0d\u4ec5\u4e0eno_cores\u6709\u5173\uff0c\u8fd8\u4e0estep\u6709\u5173\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679cstep=50\uff0c\u6709500\u4e2a\u7279\u5f81\uff0c\u5982\u679cno_cores>10\uff0c\u5219\u5b9e\u9645\u53ea\u4f7f\u7528\u4e8610\u4e2a\u6838cpu\u3002\u5982\u679cno_cores<10\uff0c\u5219\u5b9e\u9645\u4f7f\u7528\u7684\u6838\u6570\u4e3ano_cores\u6240\u8bbe\u5b9a\u7684\u503c\u3002\r\n        \r\n        The number of features excuted by one process.Default is 50.\r\n        It is used to make balance between memory usage and process swap.The bigger step value bring bigger memory usage and less process swap.If not understanding theory of program running,keeping the default value is a good choice.\r\n        The number of cpu cores depends on no_cores and step.For example. If step is 50,the number of features is 500,only 10 cores are used when no_cores >10 and no_cores core are used when no_cores<10.\r\n        \r\n        \r\n        ylabel:dict\r\n        \u597d\u574f\u6807\u7b7e\u7684\u6807\u8bc6\uff0c\u9ed8\u8ba4\u4e3a\uff1a{'good':0,'bad':1}\r\n        The identity of good or bad.Default is {'good':0,'bad':1}\r\n        \r\n        kwargs:dict\r\n        scorecardpy.woebin\u7684\u5176\u4ed6\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7kwargs\u4f20\u5165\r\n        The other parameters in scorecardpy.woebin is packed in kwargs\r\n        \r\n        Returns\r\n        ----------\r\n        dict\r\n        \u540cscorecardpy.woebin\u7684\u8fd4\u56de\u503c\r\n        same with the value returned by scorecardpy.woebin\r\n        \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_woebin_mp()\r\n     \r\n        '''\r\n\r\n### make_monotonic_bins_mp\r\n        '''\r\n        \u63d0\u4f9b\u591a\u8fdb\u7a0b\u7684\u5f3a\u5236\u5355\u8c03\u5206\u7bb1\u7684\u51fd\u6570\u3002\r\n        \u901a\u8fc7\u5bfb\u627e\u6700\u4f18\u7684count_distr_limit\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u5408\u5e76\u4e0d\u5355\u8c03\u7684\u76f8\u90bb\u7bb1\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u7cbe\u7ec6\u7684\u5408\u5e76\u7bb1\uff0c\u4f7f\u5f97\u5408\u5e76\u7bb1\u6240\u5e26\u6765\u7684\u4fe1\u606f\u635f\u5931\u51cf\u5c11\u3002\r\n        \r\n        Providing a forcing monotonic bin function.It makes merging bins more carefully and reduces infomation loss that Instead of merging two neighbouring non-monotonic bins,searching optimal count_distr_limit to get monotonic bin.\r\n        \r\n        Parameters    \r\n        ----------\r\n        dt:dataframe\r\n        \u540cscorecardpy.woebin\u7684dt\r\n        same with dt in parameters list of scorecardpy.woebin\r\n               \r\n        y:str\r\n        \u540cscorecardpy.woebin\u7684y\r\n        same with y in parameters list of scorecardpy.woebin\r\n        \r\n        x:array\r\n        \u540cscorecardpy.woebin\u7684x\r\n        same with x in parameters list of scorecardpy.woebin\r\n        \r\n        breaks_list:dict\r\n        \u540cscorecardpy.woebin\u7684breaks_list\r\n        same with breaks_list parameters list of scorecardpy.woebin\r\n        \r\n        special_values:dict\r\n        \u540cscorecardpy.woebin\u7684special_values\r\n        same with special_values parameters list of scorecardpy.woebin\r\n        \r\n        stop_limit:float\r\n        \u540cscorecardpy.woebin\u7684stop_limit\r\n        same with stop_limit parameters list of scorecardpy.woebin\r\n        \r\n        bin_num_limit:int\r\n        \u540cscorecardpy.woebin\u7684bin_num_limit\r\n        same with bin_num_limit parameters list of scorecardpy.woebin\r\n        \r\n        no_cores:int\r\n        \u4f7f\u7528\u7684CPU\u6838\u6570\u3002\u9ed8\u8ba4\u4e3aos.cpu_count()-1\u3002\u5b9e\u9645\u4f7f\u7528CPU\u6838\u6570\u53ef\u80fd\u4f1a\u5c11\u4e8eno_cores\uff0c\u89c1step\r\n        used cpu cores number.Default is os.cpu_count()-1.The actually used cpu cores may be less than no_cores,seeing step\r\n        \r\n        method:str\r\n        \u540cscorecardpy.woebin\u7684method\r\n        same with method parameters list of scorecardpy.woebin\r\n        \r\n        weight:str\r\n        \u6743\u91cd\u7684\u5217\u540d\u3002\u9ed8\u8ba4\u4e3aNone\u3002\u5982\u679c\u4e0d\u4e3aNone\uff0c\u5219ECBin.woebin_mp\u8fd0\u884c\u51fa\u5206\u7bb1\u7ed3\u679c\u540e\u4f1a\u81ea\u52a8\u8c03\u7528ECBin.adj_bin_with_weight\r\n        \u6ce8\uff1a\u7528\u6743\u91cd\u8fd8\u539f\u5e76\u4e0d\u4f1a\u6539\u53d8\u5206\u7bb1\u7684breaks\u3002\u5b83\u53ea\u4f1a\u6539\u53d8count\uff0ccount_distr\uff0cgood\uff0cbad\uff0cbadprob\uff0c\u800cbin,woe,bin_iv,total_iv,breaks,is_special_values\u5b57\u6bb5\u4fdd\u6301\u539f\u503c\u4e0d\u53d8\uff0c\u53c2\u8003ECBin.adj_bin_with_weight\u7684weight\u53c2\u6570\r\n        \r\n        The column name of weight.Default is None.If not None,calling ECBin.adj_bin_with_weight after getting the result of woe_bin.\r\n        Note:It`s not changing breaks of bin but changing count,count_distr,good,bad,badprob only and keeping the value of bin,woe,bin_iv,total_iv,breaks,is_special_values.\r\n        see the weight parameter of ECBin.adj_bin_with_weight\r\n        \r\n        step:int\r\n        \u6bcf\u4e2a\u8fdb\u7a0b\u4e00\u6b21\u6267\u884c\u7684\u7279\u5f81\u6570\u91cf\u3002\u9ed8\u8ba4\u4e3a50\r\n        \u5b83\u7684\u4f5c\u7528\u662f\u5e73\u8861\u5185\u5b58\u5f00\u9500\u548c\u8fdb\u7a0b\u5207\u6362\u3002step\u8d8a\u9ad8\u5185\u5b58\u5f00\u9500\u8d8a\u5927\uff0c\u4f46\u8fdb\u7a0b\u5207\u6362\u6b21\u6570\u8d8a\u5c11\u3002\u5982\u679c\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u539f\u7406\u4e0d\u4e86\u89e3\uff0c\u5219\u4e0d\u9700\u8981\u8c03\u6574\u8be5\u53c2\u6570\uff0c\u4fdd\u7559\u9ed8\u8ba4\u503c\u5373\u53ef\u3002\r\n        cpu\u7684\u5b9e\u9645\u4f7f\u7528\u6838\u6570\u4e0d\u4ec5\u4e0eno_cores\u6709\u5173\uff0c\u8fd8\u4e0estep\u6709\u5173\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679cstep=50\uff0c\u6709500\u4e2a\u7279\u5f81\uff0c\u5982\u679cno_cores>10\uff0c\u5219\u5b9e\u9645\u53ea\u4f7f\u7528\u4e8610\u4e2a\u6838cpu\u3002\u5982\u679cno_cores<10\uff0c\u5219\u5b9e\u9645\u4f7f\u7528\u7684\u6838\u6570\u4e3ano_cores\u6240\u8bbe\u5b9a\u7684\u503c\u3002\r\n        \r\n        The number of features excuted by one process.Default is 50.\r\n        It is used to make balance between memory usage and process swap.The bigger step value bring bigger memory usage and less process swap.If not understanding theory of program running,keeping the default value is a good choice.\r\n        The number of cpu cores depends on no_cores and step.For example. If step is 50,the number of features is 500,only 10 cores are used when no_cores >10 and no_cores core are used when no_cores<10.\r\n        \r\n        \r\n        ylabel:dict\r\n        \u597d\u574f\u6807\u7b7e\u7684\u6807\u8bc6\uff0c\u9ed8\u8ba4\u4e3a\uff1a{'good':0,'bad':1}\r\n        The identity of good or bad.Default is {'good':0,'bad':1}\r\n        \r\n        \r\n        min_distr_limit:float \r\n        \u6700\u5c0f\u7684count_distr_limit\u3002\u9ed8\u8ba4\u4e3a0.02\r\n        The min of count_distr_limit.Default is 0.02\r\n        \r\n        max_distr_limit:float\r\n        \u6700\u5927\u7684count_distr_limit\u3002\u9ed8\u8ba4\u4e3a0.2\r\n        The max of count_distr_limit.Default is 0.2\r\n        \r\n        distr_step:float\r\n        \u5f53\u8fd8\u6709\u7279\u5f81\u662f\u4e0d\u5355\u8c03\u7684\u5206\u7bb1\u65f6\uff0c\u5728\u4e0a\u4e00\u6b21\u7684count_distr_limit\u7684\u57fa\u7840\u4e0a\u52a0\u4e0adistr_step\u540e\uff0c\u5bf9\u4e0d\u5355\u8c03\u7684\u7279\u5f81\u91cd\u65b0\u8fdb\u884c\u5206\u7bb1\u8fd0\u7b97\u3002\u9ed8\u8ba4\u503c\u4e3a0.01\r\n        When having remaining non-monotonic variable bins,caculate bins again for this variable with adding distr_step to count_distr_limit last time.  Default is 0.01\r\n\r\n        kwargs:dict\r\n        scorecardpy.woebin\u7684\u5176\u4ed6\u53c2\u6570\u53ef\u4ee5\u901a\u8fc7kwargs\u4f20\u5165\r\n        The other parameters in scorecardpy.woebin is packed in kwargs\r\n        \r\n        Returns\r\n        ----------\r\n        dict\r\n        \u540cscorecardpy.woebin\u7684\u8fd4\u56de\u503c\r\n        same with the value returned by scorecardpy.woebin \r\n        \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_make_monotonic_bins_mp()\r\n        \r\n        '''\r\n        \r\n### woevalue_mp\r\n        '''\r\n        \u591a\u8fdb\u7a0b\u7684woe\u8f6c\u6362\u51fd\u6570\u3002\r\n\r\n        Parameters\r\n        ----------\r\n        dats : dict\r\n            \u591a\u4e2a\u6570\u636e\u96c6.\u4f8b\u5982{'train':train_df,'test':test_df}\r\n            many datas,e.g.{'train':train_df,'test':test_df}\r\n            \r\n        bins : dict\r\n            woebin\r\n            \r\n        step:int\r\n            \u6bcf\u4e2a\u8fdb\u7a0b\u4e00\u6b21\u6267\u884c\u7684\u7279\u5f81\u6570\u91cf\u3002\u9ed8\u8ba4\u4e3a50\r\n            \u5b83\u7684\u4f5c\u7528\u662f\u5e73\u8861\u5185\u5b58\u5f00\u9500\u548c\u8fdb\u7a0b\u5207\u6362\u3002step\u8d8a\u9ad8\u5185\u5b58\u5f00\u9500\u8d8a\u5927\uff0c\u4f46\u8fdb\u7a0b\u5207\u6362\u6b21\u6570\u8d8a\u5c11\u3002\u5982\u679c\u5bf9\u7a0b\u5e8f\u8fd0\u884c\u539f\u7406\u4e0d\u4e86\u89e3\uff0c\u5219\u4e0d\u9700\u8981\u8c03\u6574\u8be5\u53c2\u6570\uff0c\u4fdd\u7559\u9ed8\u8ba4\u503c\u5373\u53ef\u3002\r\n            cpu\u7684\u5b9e\u9645\u4f7f\u7528\u6838\u6570\u4e0d\u4ec5\u4e0eno_cores\u6709\u5173\uff0c\u8fd8\u4e0estep\u6709\u5173\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5982\u679cstep=50\uff0c\u6709500\u4e2a\u7279\u5f81\uff0c\u5982\u679cno_cores>10\uff0c\u5219\u5b9e\u9645\u53ea\u4f7f\u7528\u4e8610\u4e2a\u6838cpu\u3002\u5982\u679cno_cores<10\uff0c\u5219\u5b9e\u9645\u4f7f\u7528\u7684\u6838\u6570\u4e3ano_cores\u6240\u8bbe\u5b9a\u7684\u503c\u3002\r\n        \r\n            The number of features excuted by one process.Default is 50.\r\n            It is used to make balance between memory usage and process swap.The bigger step value bring bigger memory usage and less process swap.If not understanding theory of program running,keeping the default value is a good choice.\r\n            The number of cpu cores depends on no_cores and step.For example. If step is 50,the number of features is 500,only 10 cores are used when no_cores >10 and no_cores core are used when no_cores<10.\r\n        \r\n        no_cores:int\r\n            \u4f7f\u7528\u7684CPU\u6838\u6570\u3002\u9ed8\u8ba4\u4e3aos.cpu_count()-1\u3002\u5b9e\u9645\u4f7f\u7528CPU\u6838\u6570\u53ef\u80fd\u4f1a\u5c11\u4e8eno_cores\uff0c\u89c1step\r\n            used cpu cores number.Default is os.cpu_count()-1.The actually used cpu cores may be less than no_cores,seeing step\r\n\r\n        Returns\r\n        -------\r\n        woe_dats : dict\r\n            \u8f6c\u5316\u540e\u7684\u5168\u90e8\u6570\u636e\u96c6\r\n            transformed all dats\r\n            \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_woevalue_mp()\r\n\r\n        '''\r\n        \r\n### bins2iv\r\n        '''\r\n        \u4ecewoe_bin\u4e2d\u63d0\u53d6\u51fa\u5404\u4e2a\u7279\u5f81\u7684iv\u503c\r\n        Getting IV of variables from woebin\r\n\r\n        Parameters\r\n        ----------\r\n        bins : dict\r\n            \u540cscorecardpy.woebin\u7684\u8fd4\u56de\u503c\r\n            same with the value returned by scorecardpy.woebin \r\n\r\n        Returns\r\n        -------\r\n        ivs : pandas.Series\r\n            \u7279\u5f81\u7684IV\u503c\r\n            IV of variables\r\n        '''\r\n        \r\n### merge_missing\r\n        '''\r\n        \u5408\u5e76missing\u7684\u51fd\u6570\u3002\u5c06\u5c0f\u4e8emissing_count_distr_limit\u7684missing\u5206\u7bb1\u5408\u5e76\u5230\u5176\u4ed6\u5206\u7bb1\u4e2d\r\n        A function for merging missing.Merge the missing bin less than missing_count_distr_limit to other bins.\r\n\r\n        Parameters\r\n        ----------\r\n        bins : dict\r\n            \u539f\u59cb\u7684\u5f85\u5408\u5e76missing\u7684woebin.\u8be5\u65b9\u6cd5\u6267\u884c\u5b8c\u540ebins\u4f1a\u88ab\u66f4\u6539\r\n            Original woebin to be merged with missing bin.The bins will be updated after running this function\r\n            \r\n            \r\n        cols : list\r\n            \u9700\u8981\u5408\u5e76\u7684\u7279\u5f81\u540d\u3002\u9ed8\u8ba4\u662fNone\uff0c\u5373bins\u4e2d\u5168\u90e8\u7684\u7279\u5f81\r\n            The columns to be merged.The default is None means that all features in bins is included\r\n            \r\n        missing_count_distr_limit : dict, optional\r\n            {'\u7279\u5f81':\u6700\u5c0f\u7f3a\u5931\u503c\u5360\u6bd4,...}\uff0c\u5982\u679c\u4e00\u4e2a\u7279\u5f81\u7684\u7f3a\u5931\u503c\u5360\u6bd4\u5c0f\u4e8e\u6307\u5b9a\u7684\u503c\uff0c\u5219\u8be5\u7279\u5f81\u7684\u7f3a\u5931\u5206\u7bb1\u5c06\u88ab\u5408\u5e76\u5230\u5176\u4ed6\u5206\u7bb1\u3002\u5982\u679c\u7279\u5f81\u4e0d\u5728\u8be5dict\u91cc\uff0c\u5219\u5176\u6700\u5c0f\u7684missing\u5360\u6bd4\u4e3amissing_count_distr_limit_default\u3002\u9ed8\u8ba4\u503c\u662fNone\uff0c\u4ee3\u8868\u6240\u6709\u5217\u7684\u6700\u5c0f\u5360\u6bd4\u5168\u90e8\u4e3amissing_count_distr_limit_default\u3002\r\n            {'col':min distribution of missing value,...}.If the missing distribution is less than the pointting value,this missing bin of the feature will be merged to other bin.If a feature not in dict,the min distribution of missing value of that feature is set by missing_count_distr_limit_default. The default is None means that the min distribution of all features is missing_count_distr_limit_default\r\n            \r\n        missing_count_distr_limit_default : float, optional\r\n            \u5982\u679c\u4e00\u4e2a\u7279\u5f81\u6ca1\u6709\u5728missing_count_distr_limit\u88ab\u6307\u5b9a\u5176\u6700\u5c0f\u7f3a\u5931\u503c\u5360\u6bd4\uff0c\u5219\u5176\u4e3amissing_count_distr_limit_default\u3002\u9ed8\u8ba4\u503c\u662f0.01\r\n            If not pointted in missing_count_distr_limit,the min distribution of this feature equals missing_count_distr_limit_default. The default is 0.01.\r\n            \r\n        rule : dict, optional\r\n            {'\u7279\u5f81':'\u89c4\u5219',...}\uff0c\u6bcf\u4e2a\u7279\u5f81\u7684\u5408\u5e76\u89c4\u5219\u3002rule\u7684\u53d6\u503c\u6709{'first','last','nearly'}\u3002'first':\u4e0e\u7b2c\u4e00\u4e2a\u5206\u7bb1\u5408\u5e76\u3002'last':\u4e0e\u6700\u540e\u4e00\u4e2a\u5206\u7bb1\u5408\u5e76\u3002'nearly':'\u4e0e\u6982\u7387\u6700\u63a5\u8fd1\u7684\u4e00\u4e2a\u5206\u7bb1\u5408\u5e76'\u3002\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u4e0d\u5728rule\u4e2d\uff0c\u5219\u5176\u89c4\u5219\u88ab\u8bbe\u7f6e\u6210rule_default\u3002\u9ed8\u8ba4\u503c\u4e3aNone\uff0c\u5373\u6240\u6709\u7279\u5f81\u7684rule\u5168\u90e8\u4e3arule_default\u3002\r\n            {'col':'rule',...},the merge rule for every feature. The permitted value of rule are in {'first','last','nearly'}.'first':merge with first bin.'last':merge with last bin.'nearly':merge with bin has a nearest probility with missing bin.If not being in rule,the feature is set by rule_default. The default is None means that the rule of all features is rule_default.\r\n            \r\n        rule_default : str, optional\r\n            rule_default\u7684\u53d6\u503c\u6709{'first','last','nearly'}\u3002\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u6ca1\u6709\u88ab\u914d\u7f6e\u5728rule\u4e2d\uff0c\u5219\u5176rule\u4e3arule_default\u6240\u6307\u5b9a\u7684\u503c\u3002\u9ed8\u8ba4\u4e3a'first'\r\n            The permitted value of rule_default are in {'first','last','nearly'}.If not set in rule,the rule of this feature are set by rule_default.The default is 'first'.\r\n            \r\n        merge_with_special_value : list, optional\r\n            \u5982\u679c\u5141\u8bb8missing\u5206\u7bb1\u4e0e\u5176\u4ed6\u975emissing\u7684\u7279\u6b8a\u503c\u5206\u7bb1\u5408\u5e76\uff0c\u5219\u8bb0\u5f55\u5728merge_with_special_value\u5217\u8868\u91cc\u3002\u6ce8\uff1a\u5141\u8bb8\u4e0e\u7279\u6b8a\u503c\u5206\u7bb1\u5408\u5e76\u662f\u6307\uff1a\u5728\u8ba1\u7b97\u5408\u5e76\u65f6\uff0c\u7279\u6b8a\u503c\u5206\u7bb1\u4e0e\u975e\u7279\u6b8a\u503c\u5206\u7bb1\u90fd\u53c2\u4e0e\u8ba1\u7b97\u3002\u5e76\u4e0d\u662f\u6307\u53ea\u5728\u7279\u6b8a\u503c\u5206\u7bb1\u91cc\u9009\u53d6\u5f85\u5408\u5e76\u7684\u5206\u7bb1\u3002\u9ed8\u8ba4\u662fNone\uff0c\u5373\u6240\u6709\u7279\u5f81\u662f\u5426\u5141\u8bb8\u4e0e\u7279\u6b8a\u503c\u5408\u5e76\u5168\u90e8\u7531merge_with_special_value_default\u8bbe\u7f6e\u3002\r\n            if permitting missing bins to merge with non-missing special values bins,record the feature in merge_with_special_value.Note:What merging with special values bins means is that used by specical values bins and non specical values bins rather than only by specical values for calculating. The default is None means all features are set by merge_with_special_value_default to decide merging with special values or not.\r\n            \r\n        merge_with_special_value_default : boolean, optional\r\n            \u5982\u679c\u7279\u5f81\u6ca1\u6709\u51fa\u73b0\u5728merge_with_special_value\u4e2d\uff0c\u5219\u662f\u5426\u53ef\u4ee5\u5c06missing\u5206\u7bb1\u5408\u5e76\u5230\u5176\u4ed6\u975emissing\u7684\u7279\u6b8a\u503c\u5206\u7bb1\u5c31\u7531merge_with_special_value_default\u6307\u5b9a\uff0cTrue\u4e3a\u53ef\u4ee5\u5408\u5e76\u5230\u7279\u6b8a\u503c\u5206\u7bb1\uff0cFalse\u4e3a\u4e0d\u53ef\u4ee5\u3002\u9ed8\u8ba4\u4e3aFalse\r\n            If not in merge_with_special_value,permitting missing bin to be merged with non-missing special value bin is set by merge_with_special_value_default.True:merge with special value bin.False:not merge with special value bin. The default is False.\r\n\r\n        Returns \r\n        -------\r\n        None.\r\n        \u8be5\u65b9\u6cd5\u6267\u884c\u5b8c\u540ebins\u4f1a\u88ab\u66f4\u6539\r\n        The bins will be updated after running this function.\r\n        \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_merge_missing_breaks()\r\n\r\n        '''\r\n        \r\n### merge_special_values\r\n        '''\r\n        \u5408\u5e76\u7279\u6b8a\u503c\u3002\u5f53\u7279\u6b8a\u503c\u7684\u5360\u6bd4\u5c0f\u4e8e\u6307\u5b9a\u503c\u65f6\uff0c\u5c06\u5176\u5408\u5e76\u5230\u4e0e\u5176\u574f\u5ba2\u7387\u63a5\u8fd1\u7684\u5206\u7bb1\r\n        Merge special values.When the count_distr of special values less than a value you point,merge to a bin having a nearly badprob with special values\r\n\r\n        Parameters\r\n        ----------\r\n        bins : dict\r\n            \u539f\u59cb\u7684\u5f85\u5408\u5e76missing\u7684woebin.\u8be5\u65b9\u6cd5\u6267\u884c\u5b8c\u540ebins\u4f1a\u88ab\u66f4\u6539\r\n            Original woebin to be merged with missing bin.The bins will be updated after running this function\r\n            \r\n        cols : array,list\r\n            \u9700\u8981\u5408\u5e76\u7684\u7279\u5f81\u540d\u3002\u9ed8\u8ba4\u662fNone\uff0c\u5373bins\u4e2d\u5168\u90e8\u7684\u7279\u5f81\r\n            The columns to be merged.The default is None means that all variables in bins are included.\r\n            \r\n        special_value_count_distr_limit : dict, optional\r\n            {\u7279\u5f81\u540d:\u6700\u5c0f\u5360\u6bd4,...}.\u6307\u5b9a\u6bcf\u4e2a\u5217\u7684\u6700\u5c0f\u5360\u6bd4\uff0c\u5f53\u5c0f\u4e8e\u8be5\u5360\u6bd4\u65f6\uff0c\u8be5\u5217\u5c31\u9700\u8981\u88ab\u5408\u5e76\u3002\u6ca1\u6709\u51fa\u73b0\u5728\u8fd9\u4e2adict\u91cc\u7684\u7279\u5f81\uff0c\u5219\u6700\u5c0f\u5360\u6bd4\u4e3aspecial_value_count_distr_limit_default\u3002\u9ed8\u8ba4\u662fNone\uff0c\u5373\u6240\u6709\u7279\u5f81\u7684\u6700\u5c0f\u5360\u6bd4\u5168\u90e8\u4e3aspecial_value_count_distr_limit_default\u3002\r\n            {col_name:min of count_distr,...}.Point a value for every columns individually.When less than this value,this feature need to be merged.The min distribution of column not in dict is special_value_count_distr_limit_default.The default is None means that the min value of distribution of all columns is set by special_value_count_distr_limit_default.\r\n            \r\n        special_value_count_distr_limit_default : int, optional\r\n            \u9ed8\u8ba4\u7684\u6700\u5c0f\u7279\u6b8a\u503c\u5360\u6bd4\uff0c\u5982\u679c\u6ca1\u6709\u5728special_value_count_distr_limit\u4e2d\u6307\u5b9a\u8be5\u5217\u7684\u6700\u5c0f\u7279\u6b8a\u503c\u5360\u6bd4\uff0c\u5219\u8be5\u5217\u7684\u6700\u5c0f\u7279\u6b8a\u503c\u5360\u6bd4\u4e3aspecial_value_count_distr_limit_default\u3002\u9ed8\u8ba4\u662f0.01\r\n            If not pointting a min of special value count_distr to a feature,it will be set to special_value_count_distr_limit_default . The default is 0.01.\r\n\r\n        Returns\r\n        -------\r\n        None.\r\n        \u8be5\u65b9\u6cd5\u6267\u884c\u5b8c\u540ebins\u4f1a\u88ab\u66f4\u6539\r\n        The bins will be updated after running this function.\r\n            \r\n        Examples\r\n        -----------\r\n        see also Test_SCEC.test_merge_special_values()\r\n\r\n        '''\r\n\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/wangwenhao-DATA-OG/scorecardpyEC",
            "keywords": "score card,scorecardpy",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "scorecardpyEC",
            "package_url": "https://pypi.org/project/scorecardpyEC/",
            "platform": null,
            "project_url": "https://pypi.org/project/scorecardpyEC/",
            "project_urls": {
                "Homepage": "https://github.com/wangwenhao-DATA-OG/scorecardpyEC"
            },
            "release_url": "https://pypi.org/project/scorecardpyEC/1.1.2/",
            "requires_dist": null,
            "requires_python": ">=3.4",
            "summary": "\u4e3a\u8bc4\u5206\u5361\u9879\u76eehttps://github.com/ShichenXie/scorecardpy\u63d0\u4f9b\u5e38\u7528\u7684\u989d\u5916\u7684\u5de5\u5177\u7ec4\u4ef6\u3002\u53ef\u4ee5\u5e2e\u52a9\u8bc4\u5206\u5361\u5f00\u53d1\u4eba\u5458\u63d0\u9ad8\u5f00\u53d1\u6548\u7387",
            "version": "1.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15532786,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "da318028d70ad9554b4364c81ca0e724",
                    "sha256": "2c2854b4156641afb1871536b0b99a053a8b08752f9259b11a67089be861a41a"
                },
                "downloads": -1,
                "filename": "scorecardpyEC-1.1.2.win-amd64.zip",
                "has_sig": false,
                "md5_digest": "da318028d70ad9554b4364c81ca0e724",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.4",
                "size": 95889,
                "upload_time": "2022-10-26T06:09:13",
                "upload_time_iso_8601": "2022-10-26T06:09:13.398147Z",
                "url": "https://files.pythonhosted.org/packages/7b/66/cf76cca1088f24a98cf4f240fabe41a47f468976b8e4613b8ba7f1ba7890/scorecardpyEC-1.1.2.win-amd64.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}