{
    "0.1.1.dev2": {
        "info": {
            "author": "Yu-Lun Chiang",
            "author_email": "chiangyulun0914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.1dev2.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/allenyummy/KeyExtractor.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "KeyExtractor",
            "package_url": "https://pypi.org/project/KeyExtractor/",
            "platform": "",
            "project_url": "https://pypi.org/project/KeyExtractor/",
            "project_urls": {
                "Download": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.1dev2.tar.gz",
                "Homepage": "https://github.com/allenyummy/KeyExtractor.git"
            },
            "release_url": "https://pypi.org/project/KeyExtractor/0.1.1.dev2/",
            "requires_dist": [
                "torch (==1.7.1)",
                "flair (==0.8.0post1)",
                "transformers (==4.5.0)",
                "ckip-transformers (==0.2.3)"
            ],
            "requires_python": ">=3.6",
            "summary": "KeyExtractor performs keyword extraction for chinese documents with state-of-the-art transformer models.",
            "version": "0.1.1.dev2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10413602,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "31d1ce901c178e29cd3804eb2037b120",
                    "sha256": "e70e606195ca31e77239b85cff1ed60b72af72e211bcc88f602689463c1c0436"
                },
                "downloads": -1,
                "filename": "KeyExtractor-0.1.1.dev2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "31d1ce901c178e29cd3804eb2037b120",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 34761,
                "upload_time": "2021-05-14T13:46:35",
                "upload_time_iso_8601": "2021-05-14T13:46:35.487393Z",
                "url": "https://files.pythonhosted.org/packages/16/96/dbfd86ba98984e72be13b5fcf30b84c080edbd1960515f809418fa84117f/KeyExtractor-0.1.1.dev2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4d0b110a169a72bc76d04ab1ec412b37",
                    "sha256": "43f2a28c54a52910183220bb00d0f45dec7f3e987e34c11c1c3bed04ff710945"
                },
                "downloads": -1,
                "filename": "KeyExtractor-0.1.1.dev2.tar.gz",
                "has_sig": false,
                "md5_digest": "4d0b110a169a72bc76d04ab1ec412b37",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 31254,
                "upload_time": "2021-05-14T13:46:38",
                "upload_time_iso_8601": "2021-05-14T13:46:38.165378Z",
                "url": "https://files.pythonhosted.org/packages/95/3b/44553d38e129c4bf7480ea3c19a23ad3996f680e3f744590f8e39b995f55/KeyExtractor-0.1.1.dev2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1.dev3": {
        "info": {
            "author": "Yu-Lun Chiang",
            "author_email": "chiangyulun0914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.1.dev3.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/allenyummy/KeyExtractor.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "KeyExtractor",
            "package_url": "https://pypi.org/project/KeyExtractor/",
            "platform": "",
            "project_url": "https://pypi.org/project/KeyExtractor/",
            "project_urls": {
                "Download": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.1.dev3.tar.gz",
                "Homepage": "https://github.com/allenyummy/KeyExtractor.git"
            },
            "release_url": "https://pypi.org/project/KeyExtractor/0.1.1.dev3/",
            "requires_dist": [
                "torch (==1.7.1)",
                "flair (==0.8.0post1)",
                "transformers (==4.5.0)",
                "ckip-transformers (==0.2.3)",
                "spacy (==3.0.6) ; extra == 'spa'",
                "spacy-transformers (==1.0.2) ; extra == 'spa'",
                "pytest (==6.2.3) ; extra == 'test'",
                "pytest-mock (==3.5.1) ; extra == 'test'",
                "pytest-cov (==2.11.1) ; extra == 'test'"
            ],
            "requires_python": ">=3.6",
            "summary": "KeyExtractor performs keyword extraction for chinese documents with state-of-the-art transformer models.",
            "version": "0.1.1.dev3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10413602,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "796fed284914c0417d47a8d0d2992876",
                    "sha256": "fe23597e0d2a980656469e546d69908d2a68332de4619b088428d208cde9e1bc"
                },
                "downloads": -1,
                "filename": "KeyExtractor-0.1.1.dev3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "796fed284914c0417d47a8d0d2992876",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 34882,
                "upload_time": "2021-05-17T02:03:33",
                "upload_time_iso_8601": "2021-05-17T02:03:33.883131Z",
                "url": "https://files.pythonhosted.org/packages/2e/b7/77586d775df68e0ddc8990c7443b5ddec45afbb3e11c334f70e0599a7dd2/KeyExtractor-0.1.1.dev3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "71f62558390276a473fba308b963054b",
                    "sha256": "10eeab190d13da6fef5b227e365b203eca83cb00d8f74e4c720b6526483eaa97"
                },
                "downloads": -1,
                "filename": "KeyExtractor-0.1.1.dev3.tar.gz",
                "has_sig": false,
                "md5_digest": "71f62558390276a473fba308b963054b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 31505,
                "upload_time": "2021-05-17T02:03:36",
                "upload_time_iso_8601": "2021-05-17T02:03:36.178066Z",
                "url": "https://files.pythonhosted.org/packages/ec/14/e27dfe5ba4cd1607abca02f38736c3dad5f7ed89f8eb8a81397a16a20c0c/KeyExtractor-0.1.1.dev3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2a1.dev1": {
        "info": {
            "author": "Yu-Lun Chiang",
            "author_email": "chiangyulun0914@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Topic :: Software Development :: Build Tools"
            ],
            "description": "[![PyPI - Python](https://img.shields.io/badge/python-3.6%20|%203.7%20|%203.8-blue.svg)](https://pypi.org/project/KeyExtractor/)\n[![PyPI - License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/allenyummy/KeyExtractor/blob/main/LICENSE)\n[![PyPI - PyPi](https://img.shields.io/pypi/v/KeyExtractor)](https://pypi.org/project/KeyExtractor/)\n<!-- [![Build](https://img.shields.io/github/workflow/status/MaartenGr/keyBERT/Code%20Checks/master)](https://pypi.org/project/keybert/) -->\n<!-- [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1OxpgwKqSzODtO3vS7Xe1nEmZMCAIMckX?usp=sharing) -->\n\n# KeyExtractor\nKeyExtractor \u662f\u4e00\u500b\u5341\u5206\u7c21\u55ae\u4e14\u597d\u7528\u7684\u95dc\u9375\u5b57\u8a5e\u62bd\u53d6\u5668\uff0c\u8a72\u6a21\u7d44\u900f\u904e Transformer-based \u6a21\u578b\uff0c\u4ee5\u96f6\u8a13\u7df4\u7684\u65b9\u5f0f\uff0c\u62bd\u53d6\u4e2d\u6587\u6587\u4ef6\u4e4b\u95dc\u9375\u5b57\u8a5e\uff0c\u7121\u9700\u6a19\u8a18\u8cc7\u6599\u8207GPU\u8cc7\u6e90\u5373\u53ef\u64cd\u4f5c\u3002\n\nKeyExtractor performs keyword extraction for chinese documents with state-of-the-art transformer models without training and labeled data.\n\n<a name=\"toc\"/></a>\n## Table of Contents\n* [About the Project](#about)\n* [Getting Started](#gettingstarted)\n    * [Installation](#installation)\n    * [Example](#example)\n    * [Basic Usage](#usage)\n    * [Tokenizer](#tokenizer)\n    * [Embeddings](#embeddings)\n    * [Logger](#logger)\n\n<a name=\"about\"/></a>\n## About\n[Go Back](#toc)\n\n\u5728\u4f01\u696d\u5373\u5c07\u6eff\u7b2c\u4e00\u500b\u5e74\u982d\uff0c\u611f\u53d7\u5230\u7684\u6587\u5316\u8207\u5b78\u8853\u754c\u5dee\u7570\u751a\u5927\uff0c\u6bd4\u5982\u8aaa\u5728\u4e2d\u7814\u9662\u6642\uff0c\u5927\u5bb6\u8ffd\u6c42\u7684\u662f\u66f4\u597d\u66f4\u5b8c\u5584\u7684\u6a21\u578b\u6216\u6f14\u7b97\u6cd5\uff0c\u70ba\u4e86\u80fd\u5920\u8207\u7d93\u5178\u8ad6\u6587\u4e0a\u7684\u6a21\u578b\u6216\u6f14\u7b97\u6cd5\u8f03\u52c1\uff0c\u5927\u5bb6\u7121\u4e0d\u4f7f\u7528\u76f8\u540c\u3001\u516c\u958b\u4e14\u4e7e\u6de8\u7684\u6a19\u8a18\u8cc7\u6599\u96c6\uff0c\u4e26\u5be6\u4f5c\u81ea\u5df1\u7684\u6a21\u578b\uff0c\u8dd1\u51fa\u5404\u7a2e\u5be6\u9a57\u6578\u64da\uff0c\u8b49\u660e\u6a21\u578b\u4e4b\u9593\u7684\u512a\u52a3\u52dd\u6557\u3002\u6709\u8da3\u7684\u662f\uff0c\u5f7c\u6b64\u5dee\u8ddd\u5f80\u5f80\u5728\u4e0d\u5230 1% \u4e4b\u5167\uff0c\u4e0d\u96e3\u60f3\u50cf\u70ba\u4f55\u90a3\u9ebc\u96e3\u6295\u7a3f\u4e0a\u9802\u5c16\u7814\u8a0e\u6703\u4e86\u5427\uff01\n\n\u800c\u5728\u4f01\u696d\u88e1\uff0c\u6bcf\u500b\u6848\u5b50\u6709\u5404\u81ea\u7368\u7279\u7684\u68b3\u7406\u908f\u8f2f\uff0c\u8207\u5176\u76f8\u61c9\u7684\u8cc7\u6599\u96c6\uff0c\u800c\u4e14\u591a\u534a\u662f\u4e0d\u5b8c\u6574\u4e14\u9aaf\u9ad2\u7684\u8cc7\u6599\uff0c\u751a\u81f3\uff0c\u9019\u4e9b\u8cc7\u6599\u9023\u6a19\u8a18\u90fd\u6c92\u6709\uff0c\u5c0e\u81f4\u5728\u5c0e\u5165 AI/NLP \u6280\u8853\u6642\uff0c\u8def\u9014\u56f0\u96e3\u91cd\u91cd\uff0c\u5927\u6982\u5728\u6e05\u7406\u8cc7\u6599\u968e\u6bb5\u3001\u6216\u662f\u4eba\u5de5\u6a19\u8a18\u8cc7\u6599\u968e\u6bb5\u6642\u5c31\u9663\u4ea1\u4e86\uff0c\u9051\u8ad6\u4f7f\u7528\u6700\u65b0\u7a4e\u7684\u6280\u8853\u3002\n\n\u56e0\u70ba\u4e0a\u8ff0\u73fe\u8c61\uff0c\u4f01\u696d\u5728\u654f\u6377\u958b\u767c\u7684\u72c0\u614b\u4e0b\uff0c\u6642\u5e38\u4f7f\u7528 Rule-Based \u7684\u65b9\u5f0f\u89e3\u6c7a\uff0c\u4e45\u800c\u4e45\u4e4b\uff0c\u5e7e\u4e4e\u5f88\u5c11\u5c0e\u5165\u65b0\u7a4e\u7684\u6280\u8853\uff0c\u63a5\u8457\u4e00\u500b\u6848\u5b50\u4e00\u500b\u6848\u5b50\u5c31\u9019\u9ebc\u904e\u53bb\u4e86\u3002\u8eab\u70ba\u521d\u5165\u793e\u6703\u7684\u6211\u4f86\u8aaa\uff0c\u4e0d\u592a\u7fd2\u6163\u9019\u6a23\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u82e5\u8981\u6709\u6240\u7a81\u7834\uff0c\u6211\u4ecd\u7136\u5f97\u9762\u81e8\u8cc7\u6599\u96c6\u4e00\u6a23\u9aaf\u9ad2\u3001\u4e00\u6a23\u6c92\u6709\u6a19\u8a18\u3001\u4e00\u6a23\u4e0d\u5b8c\u6574\uff0c\u90a3\u6211\u8a72\u600e\u9ebc\u8fa6\u5462\uff1f\n\n\u9019\u662f\u6211\u63a5\u624b\u7684\u7b2c\u4e8c\u500b\u6848\u5b50\uff1a\u65b0\u805e\u95b1\u8b80\uff0c\u7121\u6a19\u8a18\u8cc7\u6599\u3002\u6211\u5c07\u6b64\u6848\u5b50\u5176\u4e2d\u4e00\u90e8\u4efd\u62c9\u51fa\u4f86\u4f5c\u6210\u516c\u958b\u5957\u4ef6\uff1a\u65b0\u805e\u95dc\u9375\u5b57\u8a5e\u62bd\u53d6\u5668\uff0c\u7d66\u5b9a\u4e00\u7bc7\u4e2d\u6587\u65b0\u805e\uff0c\u7d93\u7531\u6a21\u7d44\uff0c\u751f\u51fa\u82e5\u5e72\u95dc\u9375\u5b57\u3002\n\n2018\u5e74\u672b\uff0c\u9810\u8a13\u7df4\u8207\u5fae\u8abf\u6a5f\u5236\u64c4\u7372\u4eba\u5fc3\uff0c\u4fbf\u4e00\u8def\u76db\u884c\u81f3\u4eca\u3002\u70ba\u4e86\u6487\u958b\u5c0d\u6a19\u8a18\u8cc7\u6599\u7684\u4f9d\u8cf4\uff0c\u6211\u6487\u958b\u5fae\u8abf\u6a5f\u5236\uff0c\u50c5\u63a1\u7528\u9810\u8a13\u7df4\u6a5f\u5236\u3002\u9810\u8a13\u7df4\u6a21\u578b\u4f7f\u7528\u4e2d\u7814\u9662ckip\u5be6\u9a57\u5ba4\u7684\u6a21\u578b\uff0c\u4e26\u5c07\u5176\u7576\u4f5c\u8a5e\u5411\u91cf\u62bd\u53d6\u5668\uff0c\u63a5\u8457\u4f7f\u7528 Cosine Similarity \u53bb\u4e00\u4e00\u6bd4\u8f03\u6587\u672c\u8207\u5404\u500b\u5019\u9078\u5b57\u8a5e\u7684\u5411\u91cf\u593e\u89d2\uff0c\u4f5c\u70ba\u5224\u65b7\u662f\u5426\u70ba\u95dc\u9375\u5b57\u8a5e\u7684\u4f9d\u64da\u3002\n\n\u4e0a\u8ff0\u7684\u60f3\u6cd5\u6e90\u81ea\u65bc [KeyBERT](https://github.com/MaartenGr/KeyBERT)\uff0c\u4f46\u662f\u56e0\u70ba\u5b83\u6c92\u6709\u652f\u63f4\u4e2d\u6587\u548c\u4e2d\u6587\u65b7\u8a5e\uff0c\u624d\u8b93\u6211\u60f3\u81ea\u5df1\u52d5\u624b\u505a\u4e00\u500b\u5957\u4ef6\u51fa\u4f86\u3002\n\n<a name=\"gettingstarted\"></a>\n## Getting Started\n[Go Back](#toc)\n\n<a name=\"installation\"></a>\n### Installation\n\nPrepare virtual environment by conda.\n```\n$ conda create --name [env_name] python=3.8\n$ conda activate [env_name]\n```\n\nInstallation can be done using [pypi KeyExtractor](https://pypi.org/project/KeyExtractor/).\n```\n$ pip install KeyExtractor\n```\n\n<a name=\"example\"/></a>\n### Example\n```\n$ PYTHONPATH=./::./src python example/example.py\n```\n\n<a name=\"usage\"/></a>\n### Basic Usage\n[Go Back](#toc)\n\n* Single Document\n\nInput text should be tokenized as properly as possible before extracting keywords from it.\n```\nfrom KeyExtractor.utils import tokenization as tk\n\ntokenizer = tk.TokenizerFactory(name=\"ckip-transformers-albert-tiny\")\ntext = \"\"\"\n    \u76e3\u7763\u5b78\u7fd2\u662f\u6a5f\u5668\u5b78\u7fd2\u4efb\u52d9\uff0c\u5b83\u5b78\u7fd2\u57fa\u65bc\u7bc4\u4f8b\u8f38\u5165-\u7bc4\u4f8b\u8f38\u51fa\u7d44\u5408\uff0c\u5c07\u8f38\u5165\u6620\u5c04\u5230\u8f38\u51fa\u7684\u51fd\u6578\u3002\n    [1]\u5b83\u5f9e\u6a19\u8a18\u7684\u8a13\u7df4\u6578\u64da\uff08\u7531\u4e00\u7d44\u8a13\u7df4\u7bc4\u4f8b\u7d44\u6210\uff09\u4e2d\u63a8\u65b7\u51fa\u51fd\u6578\u3002\n    [2]\u5728\u76e3\u7763\u5b78\u7fd2\u4e2d\uff0c\u6bcf\u500b\u7bc4\u4f8b\u90fd\u662f\u4e00\u5c0d\uff0c\u7531\u8f38\u5165\u5c0d\u8c61\uff08\u901a\u5e38\u662f\u77e2\u91cf\uff09\u548c\u671f\u671b\u7684\u8f38\u51fa\u503c\uff08\u4e5f\u7a31\u70ba\u76e3\u7763\u4fe1\u865f\uff09\u7d44\u6210\u3002\n    \u76e3\u7763\u5b78\u7fd2\u6f14\u7b97\u6cd5\u5206\u6790\u8a13\u7df4\u6578\u64da\u4e26\u7522\u751f\u4e00\u500b\u63a8\u65b7\u51fd\u6578\uff0c\u8a72\u51fd\u6578\u53ef\u7528\u65bc\u6620\u5c04\u65b0\u7bc4\u4f8b\u3002\n    \u6700\u4f73\u65b9\u6848\u5c07\u4f7f\u6f14\u7b97\u6cd5\u80fd\u5920\u6b63\u78ba\u78ba\u5b9a\u672a\u898b\u5be6\u4f8b\u7684\u985e\u6a19\u7c64\u3002\n    \u9019\u5c31\u8981\u6c42\u5b78\u7fd2\u7b97\u6cd5\u4ee5\u201c\u5408\u7406\u201d\u7684\u65b9\u5f0f\u5c07\u8a13\u7df4\u6578\u64da\u63a8\u5ee3\u5230\u770b\u4e0d\u898b\u7684\u60c5\u6cc1\uff08\u898b\u6b78\u7d0d\u504f\u5dee\uff09\u3002\n\"\"\"\ntokenized_text = tokenizer.tokenize(text_list)[0]  ## Return nested list of tokenized results\n```\n\nExtract Keywords from document tokenized before.\n\n```\nfrom KeyExtractor.core import KeyExtractor\nke = KeyExtractor(embedding_method_or_model=\"ckiplab/bert-base-chinese\")\nkeywords = ke.extract_keywords(tokenized_text, n_gram=1, top_n=5)\n```\n\nReturn keywords as a list of struct.KeyStruct.\n\n```\n>>> [print(key) for key in keywords]\n[ID]: 29\n[KEYWORD]: ['\u5b78\u7fd2']\n[SCORE]: 0.7103\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 33\n[KEYWORD]: ['\u5c0d\u8c61']\n[SCORE]: 0.6965\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 31\n[KEYWORD]: ['\u7bc4\u4f8b']\n[SCORE]: 0.6923\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 28\n[KEYWORD]: ['\u76e3\u7763']\n[SCORE]: 0.6849\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 46\n[KEYWORD]: ['\u5206\u6790']\n[SCORE]: 0.6834\n[EMBEDDINGS]: torch.Size([768])\n```\n\nN-gram could be 2 or 3 or more.\n```\nkeywords = ke.extract_keywords(tokenized_text, n_gram=2, top_n=5)\n\n>>> [print(key) for key in keywords]\n[ID]: 30\n[KEYWORD]: ['\u4e2d', '\u7bc4\u4f8b']\n[SCORE]: 0.8059\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 31\n[KEYWORD]: ['\u7bc4\u4f8b', '\u8f38\u5165']\n[SCORE]: 0.8006\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 28\n[KEYWORD]: ['\u76e3\u7763', '\u5b78\u7fd2']\n[SCORE]: 0.7888\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 32\n[KEYWORD]: ['\u8f38\u5165', '\u5c0d\u8c61']\n[SCORE]: 0.7825\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 29\n[KEYWORD]: ['\u5b78\u7fd2', '\u4e2d']\n[SCORE]: 0.7816\n[EMBEDDINGS]: torch.Size([768])\n```\n\nIt could add custom stopwords that you think they must not be keyword candidates. They would be removed in the preprocessing stage.\n\n```\nkeywords = ke.extract_keywords(tokenized_text, stopwords=[\"\u4e2d\", \"\u5c0d\u8c61\"], n_gram=2, top_n=5)\n\n>>> [print(key) for key in keywords]\n[ID]: 28\n[KEYWORD]: ['\u5b78\u7fd2', '\u7bc4\u4f8b']\n[SCORE]: 0.8039\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 29\n[KEYWORD]: ['\u7bc4\u4f8b', '\u8f38\u5165']\n[SCORE]: 0.8006\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 27\n[KEYWORD]: ['\u76e3\u7763', '\u5b78\u7fd2']\n[SCORE]: 0.7888\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 24\n[KEYWORD]: ['\u63a8\u65b7\u51fa', '\u51fd\u6578']\n[SCORE]: 0.7738\n[EMBEDDINGS]: torch.Size([768])\n\n[ID]: 18\n[KEYWORD]: ['\u8a13\u7df4', '\u6578\u64da']\n[SCORE]: 0.7677\n[EMBEDDINGS]: torch.Size([768])\n```\n\nAlso, we have default zh-cn/zh-tw stopwords (`load_default` is set to `True`). You can check them in the `utils/stopwords/zh/`. If you don't want them as stopwords, just simply set `load_default` to `False`.\n\n* Multiple Documents\n\nYou can feel safe to send multiple documents into tokenizer. They can process multiple documents more efficiently than processing single document at one time.\n\n```\nfrom KeyExtractor.utils import tokenization as tk\n\ntokenizer = tk.TokenizerFactory(name=\"ckip-transformers-albert-tiny\")\ntext = \"\"\"\n    \u76e3\u7763\u5b78\u7fd2\u662f\u6a5f\u5668\u5b78\u7fd2\u4efb\u52d9\uff0c\u5b83\u5b78\u7fd2\u57fa\u65bc\u7bc4\u4f8b\u8f38\u5165-\u7bc4\u4f8b\u8f38\u51fa\u7d44\u5408\uff0c\u5c07\u8f38\u5165\u6620\u5c04\u5230\u8f38\u51fa\u7684\u51fd\u6578\u3002\n    [1]\u5b83\u5f9e\u6a19\u8a18\u7684\u8a13\u7df4\u6578\u64da\uff08\u7531\u4e00\u7d44\u8a13\u7df4\u7bc4\u4f8b\u7d44\u6210\uff09\u4e2d\u63a8\u65b7\u51fa\u51fd\u6578\u3002\n    [2]\u5728\u76e3\u7763\u5b78\u7fd2\u4e2d\uff0c\u6bcf\u500b\u7bc4\u4f8b\u90fd\u662f\u4e00\u5c0d\uff0c\u7531\u8f38\u5165\u5c0d\u8c61\uff08\u901a\u5e38\u662f\u77e2\u91cf\uff09\u548c\u671f\u671b\u7684\u8f38\u51fa\u503c\uff08\u4e5f\u7a31\u70ba\u76e3\u7763\u4fe1\u865f\uff09\u7d44\u6210\u3002\n    \u76e3\u7763\u5b78\u7fd2\u6f14\u7b97\u6cd5\u5206\u6790\u8a13\u7df4\u6578\u64da\u4e26\u7522\u751f\u4e00\u500b\u63a8\u65b7\u51fd\u6578\uff0c\u8a72\u51fd\u6578\u53ef\u7528\u65bc\u6620\u5c04\u65b0\u7bc4\u4f8b\u3002\n    \u6700\u4f73\u65b9\u6848\u5c07\u4f7f\u6f14\u7b97\u6cd5\u80fd\u5920\u6b63\u78ba\u78ba\u5b9a\u672a\u898b\u5be6\u4f8b\u7684\u985e\u6a19\u7c64\u3002\n    \u9019\u5c31\u8981\u6c42\u5b78\u7fd2\u7b97\u6cd5\u4ee5\u201c\u5408\u7406\u201d\u7684\u65b9\u5f0f\u5c07\u8a13\u7df4\u6578\u64da\u63a8\u5ee3\u5230\u770b\u4e0d\u898b\u7684\u60c5\u6cc1\uff08\u898b\u6b78\u7d0d\u504f\u5dee\uff09\u3002\n\"\"\"\ntext2 = \"\u8a50\u6b3a\u72af\u5433\u6731\u50b3\u752b\u7372\u91cb\u53c8\u548c\u540c\u5925\u6797\u5fd7\u6210\u5047\u5192\u6aa2\u8b66\u4eba\u54e1\uff0c\u5411\u65b0\u71df\u5e02\u9ec3\u59d3\u5a66\u4eba\u8a50\u8ca1\u4e00\u767e\u516b\u5341\u842c\u5143\uff0c\u4e8b\u5f8c\u9ec3\u5a66\u9a5a\u89ba\u4e0a\u7576\u5831\u8b66\u8655\u7406\uff0c\u532f\u5bc4\u7684\u5e33\u6236\u88ab\u5217\u8b66\u793a\u5e33\u6236\uff0c\u51cd\u7d50\u8cc7\u91d1\u5f80\u8fd4\uff1b\u56db\u65e5\u5169\u5acc\u518d\u5192\u540d\u8981\u9ec3\u5a66\u9818\u4e94\u5341\u842c\u73fe\u91d1\u4ea4\u4ed8\uff0c\u88ab\u57cb\u4f0f\u7684\u8b66\u54e1\u7576\u5834\u63ea\u4f4f\u3002\"\n\ntext_list = [text1, text2]\ntokenized_text_list = tokenizer.tokenize(text_list)  ## Return nested list\n\nfor tokenized_text in tokenized_text_list:\n    keywords = ke.extract_keywords(tokenized_text, n_gram=2, top_n=5)\n    for key in keywords:\n        print(key)\n```\n\n[Go Back](#toc)\n\n<a name=\"tokenizer\"/></a>\n### Tokenizer\n\nI use as ckip-transformers as my backbone tokenizer. Please check details from this [repo](https://github.com/ckiplab/ckip-transformers).\n\n<a name=\"embeddings\"/></a>\n### Embeddings\n\nI use flair framework to get word and document embeddings from `ckiplab/bert-base-chinese`. Their model could be seen in huggingface model hub [here](https://huggingface.co/ckiplab/bert-base-chinese). Feel free to get your own pretrained model or another one.\n\n<a name=\"logger\"/></a>\n### Logger\n\nIf you want to check details of operation, you can set up logger.level as logging.DEBUG. \n\n**Github Repos**:  \n* https://github.com/MaartenGr/KeyBERT\n* https://github.com/flairNLP/flair\n* https://github.com/ckiplab/ckip-transformers\n\n[Go Back](#toc)\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.2a1.dev1.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/allenyummy/KeyExtractor.git",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "KeyExtractor",
            "package_url": "https://pypi.org/project/KeyExtractor/",
            "platform": "",
            "project_url": "https://pypi.org/project/KeyExtractor/",
            "project_urls": {
                "Download": "https://github.com/allenyummy/KeyExtractor/archive/refs/tags/0.1.2a1.dev1.tar.gz",
                "Homepage": "https://github.com/allenyummy/KeyExtractor.git"
            },
            "release_url": "https://pypi.org/project/KeyExtractor/0.1.2a1.dev1/",
            "requires_dist": [
                "torch (==1.7.1)",
                "flair (==0.8.0post1)",
                "transformers (==4.5.0)",
                "ckip-transformers (==0.2.3)",
                "spacy (==3.0.6) ; extra == 'spa'",
                "spacy-transformers (==1.0.2) ; extra == 'spa'",
                "pytest (==6.2.3) ; extra == 'test'",
                "pytest-mock (==3.5.1) ; extra == 'test'",
                "pytest-cov (==2.11.1) ; extra == 'test'"
            ],
            "requires_python": ">=3.6",
            "summary": "KeyExtractor performs keyword extraction for chinese documents with state-of-the-art transformer models.",
            "version": "0.1.2a1.dev1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10413602,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "07d0d1edae43c662c74a41e1a7db5deb",
                    "sha256": "f031afd03980af840ff3bca17f6cb43bf0cc34035d554b38c38a11207cfd2445"
                },
                "downloads": -1,
                "filename": "KeyExtractor-0.1.2a1.dev1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "07d0d1edae43c662c74a41e1a7db5deb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 36377,
                "upload_time": "2021-05-20T07:32:04",
                "upload_time_iso_8601": "2021-05-20T07:32:04.182402Z",
                "url": "https://files.pythonhosted.org/packages/cc/cc/91aa71667ff2a5b1c22f7fc542f952f8232dd65c744782a6619c87ef5454/KeyExtractor-0.1.2a1.dev1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "80c9e7a776b0b2698f601e416983b37c",
                    "sha256": "451f19ceac375d408d2b3aa3df7a86dcfcff314f1580b40f3124c54270f02e41"
                },
                "downloads": -1,
                "filename": "KeyExtractor-0.1.2a1.dev1.tar.gz",
                "has_sig": false,
                "md5_digest": "80c9e7a776b0b2698f601e416983b37c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 32874,
                "upload_time": "2021-05-20T07:32:06",
                "upload_time_iso_8601": "2021-05-20T07:32:06.718525Z",
                "url": "https://files.pythonhosted.org/packages/91/64/30fad0fefc1e9fd074cd489ce221cd739c03780867b756e6734e941e2f0b/KeyExtractor-0.1.2a1.dev1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}