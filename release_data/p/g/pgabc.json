{
    "1.0": {
        "info": {
            "author": "WangMIN",
            "author_email": "pgabc@sina.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HewayPg",
            "keywords": "indicator",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pgabc",
            "package_url": "https://pypi.org/project/pgabc/",
            "platform": "",
            "project_url": "https://pypi.org/project/pgabc/",
            "project_urls": {
                "Homepage": "https://github.com/HewayPg"
            },
            "release_url": "https://pypi.org/project/pgabc/1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data calulation",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7915080,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fda22e3b38ee356dea4ad63a9f1aef35",
                    "sha256": "47f6625f366d344b9985f9e0f43f2dd66c07443548c00856942f9fa332db1a10"
                },
                "downloads": -1,
                "filename": "pgabc-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "fda22e3b38ee356dea4ad63a9f1aef35",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 29419,
                "upload_time": "2020-07-19T00:51:07",
                "upload_time_iso_8601": "2020-07-19T00:51:07.455624Z",
                "url": "https://files.pythonhosted.org/packages/3c/9c/cdb9dfb87f55c2beff6d529cbb81794943a0cfad9d59d95bd03faca32d49/pgabc-1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1": {
        "info": {
            "author": "WangMIN",
            "author_email": "pgabc@sina.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HewayPg",
            "keywords": "indicator",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pgabc",
            "package_url": "https://pypi.org/project/pgabc/",
            "platform": "",
            "project_url": "https://pypi.org/project/pgabc/",
            "project_urls": {
                "Homepage": "https://github.com/HewayPg"
            },
            "release_url": "https://pypi.org/project/pgabc/1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data calulation",
            "version": "1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7915080,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "150afdf2a57a2306912d83f59f596576",
                    "sha256": "3394c1a7a73bdae879277b519ba2c350d755a5100efbcd9bae88e1bb913466b7"
                },
                "downloads": -1,
                "filename": "pgabc-1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "150afdf2a57a2306912d83f59f596576",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 29406,
                "upload_time": "2020-07-19T01:52:21",
                "upload_time_iso_8601": "2020-07-19T01:52:21.879225Z",
                "url": "https://files.pythonhosted.org/packages/18/05/cdf5091ec61426adf9ec702188e2302e692ccfc175363e53db15ed059d3e/pgabc-1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.11": {
        "info": {
            "author": "WangMin",
            "author_email": "pgabc@sina.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HewayPg",
            "keywords": "indicator",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pgabc",
            "package_url": "https://pypi.org/project/pgabc/",
            "platform": "",
            "project_url": "https://pypi.org/project/pgabc/",
            "project_urls": {
                "Homepage": "https://github.com/HewayPg"
            },
            "release_url": "https://pypi.org/project/pgabc/1.11/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data calulation",
            "version": "1.11",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7915080,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "eed1697fdd07a9d0e1d4414ed03eb4e3",
                    "sha256": "c1f8a69422ee8039da458ec3624c2f0d2b81d60a942493d346b0cbeae7e7d1db"
                },
                "downloads": -1,
                "filename": "pgabc-1.11.tar.gz",
                "has_sig": false,
                "md5_digest": "eed1697fdd07a9d0e1d4414ed03eb4e3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 26968,
                "upload_time": "2020-07-19T02:39:00",
                "upload_time_iso_8601": "2020-07-19T02:39:00.408509Z",
                "url": "https://files.pythonhosted.org/packages/90/c1/90eba28a109c36e4a6b07a972db7b1a591564440786c965144a4493c39ce/pgabc-1.11.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.12": {
        "info": {
            "author": "WangMin",
            "author_email": "pgabc@sina.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HewayPg",
            "keywords": "indicator",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pgabc",
            "package_url": "https://pypi.org/project/pgabc/",
            "platform": "",
            "project_url": "https://pypi.org/project/pgabc/",
            "project_urls": {
                "Homepage": "https://github.com/HewayPg"
            },
            "release_url": "https://pypi.org/project/pgabc/1.12/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data calulation",
            "version": "1.12",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7915080,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cb58f8eed61d2a40102129f9af6963ba",
                    "sha256": "c0eaf96768ffb1c146ec5f9c7e5a0f8ec8e25ba6447e66a8d34e756fd8b3ebbd"
                },
                "downloads": -1,
                "filename": "pgabc-1.12.tar.gz",
                "has_sig": false,
                "md5_digest": "cb58f8eed61d2a40102129f9af6963ba",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 26840,
                "upload_time": "2020-07-19T02:52:35",
                "upload_time_iso_8601": "2020-07-19T02:52:35.353972Z",
                "url": "https://files.pythonhosted.org/packages/1f/04/16944daef9ad8ee0dbfb4efc8cde7c1908ea8c92a515895633828ab34d82/pgabc-1.12.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.12.1": {
        "info": {
            "author": "WangMin",
            "author_email": "pgabc@sina.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "## pgabc\u4e3a\u6570\u636e\u5206\u6790\u63d0\u4f9b\u5404\u79cd\u5e2e\u52a9\n\n## \u9700\u8981\u5b89\u88c5pandas numpy talib \n\n\n##\u7c7b\u5185\u5bb9\uff1a\n##class Indicator():\n##    \"\"\"\u6570\u636e\u6307\u6570\u51fd\u6570 \u53ef\u53d8\u5217host_nv ,user_wm,passwd_wm,db_wm,chareset_wm\u6765\u9002\u5e94\u4e0d\u540c\u8981\u6c42\"\"\"\n##    period = 6    #\u7cfb\u6570\n##    weight = 0.2\n##    k = 12\n##    ts_code = '000001.SZ'\n##    time_temp = datetime.datetime.now() - datetime.timedelta(days=0)\n##    given_dt = time_temp.strftime('%Y%m%d')\n##    def __init__(self,df_wm,start_dt,end_dt):   \n##        self.df_wm = df_wm\n##        self.start_dt = start_dt\n##        self.end_dt = end_dt\n##        #self.cho_dt = self.cho_dt\n\n##    def ma(self):\n##        #\u8fd4\u56de\u662f\u7684DATA \u53ef\u4ee5\u7528data.iloc[-1].ma_5\u7b49\u65b9\u5f0f\u83b7\u5f97\u6570\u636e,\u53ef\u4ee5\u76f4\u63a5\u7528ma_wm[1]\u6765\u5f97\u5230\u6700\u540e\u4e00\u4e2a\u6570\u636e\n##        data = self.df_wm[(self.df_wm['ts_code']==self.ts_code)&(self.df_wm['trade_date']>=self.start_dt)&(self.df_wm['trade_date']<=self.given_dt)] \n##        data.drop_duplicates(subset=['ts_code','trade_date'],keep='first',inplace=True)  #\u53bb\u91cd\n##        data = data.reset_index()   #\u91cd\u65b0\u6392\n##        data['ma_{}'.format(str(self.k))] = data.close.rolling(self.k).mean()    #5\u65e5\u6536\u76d8\u4ef7\u5747\u503c\n##        print(data.tail())\n##        ma_wm = data.iloc[-1]['ma_{}'.format(str(self.k))]\n##        return data,ma_wm\n##   ...\n\n\n## \u4e3b\u8981\u6307\u6807\n     ma(self,k:int = 10):\n        #index_1\n\n     ema(self,k:int = 10):\n        #index_2\n\n     rsi_wm(self,period:int = 6):\n        #index_3  \u4e0d\u63a8\u8350\n        #RSI\u76f8\u5bf9\u5f3a\u5f31\u6307\u6807\n        #\u76f8\u5bf9\u5f3a\u5f31\u6307\u6570\uff08RSI\uff09\u662f\u901a\u8fc7\u6bd4\u8f83\u4e00\u6bb5\u65f6\u671f\u5185\u7684\u5e73\u5747\u6536\u76d8\u6da8\u6570\u548c\u5e73\u5747\u6536\u76d8\u8dcc\u6570\u6765\u5206\u6790\u5e02\u573a\u4e70\u6cbd\u76d8\u7684\u610f\u5411\u548c\u5b9e\u529b\uff0c\u4ece\u800c\u4f5c\u51fa\u672a\u6765\u5e02\u573a\u7684\u8d70\u52bf\n    \n     sma(self,k:int = 5):\n        #index_4\n        #\u8ba1\u7b97PRICE_WM K\u5929\u7684\u7b80\u5355\u5e73\u5747\u6570\n\n     wma(self,timeperiod:int=30):\n        #index_5 wma     \n    \n     ewma(self,period:int = 5,exponential:float = 0.2):\n        #index_6\n        # \u8ba1\u7b97PRICE_WM \u671f\u6570\u4e3aPERIOD\u5929,EXPONENTIAL\u6743\u6570\u7684\u6307\u6570\u52a0\u6743\u5e73\u5747\u6570\n    \n     momentum(self,period:int = 19):\n        #index_7\n        #momentum trading strategy \u52a8\u91cf\u4ea4\u6613\u7b56\u7565 \u73b0\u4ef7\u6bd4PERIOND_WM\u524d\u7684\u4ef7\u5dee\n\n     macd(self,period1:int = 12,period2:int = 26,period3:int=9):\n        #index_8\n\n     kdj(self,n:int = 9,m1:int = 3,m2:int = 3):\n        #index_9\n        #kdj 9,3,3 \u6570\u636e\n\n     bias(self,n1:int = 6,n2:int = 12,n3:int = 24):\n        #index_10\n        #bias\u6307\u6807  6,12,24\n        #N\u671fBIAS=(\u5f53\u65e5\u6536\u76d8\u4ef7-N\u671f\u5e73\u5747\u6536\u76d8\u4ef7)/N\u671f\u5e73\u5747\u6536\u76d8\u4ef7*100%\n\n     wr(self,n1:int = 10,n2:int = 6):\n        #index_11\n        #\u5a01\u5ec9\u6307\u6807\n\n     obv(self,n:int = 30):\n        #index_12\n\n     boll(self):\n        #index_13 \n        #\u5e03\u6797\u7ebf\u6307\u6807\uff0c\u5373BOLL\u6307\u6807\uff0c\u5176\u82f1\u6587\u5168\u79f0\u662f\u201cBollinger Bands\u201d\n\n     sun_moon(self):\n        #index_14\n        #\u751f\u6210\u9633\u7ebf\u9634\u7ebf\u6807\u5fd7\uff0c\u9633\u7ebf\u4e3aTrue ,\u9634\u7ebf\u4e3aFalse \n\n     k_form(self):\n        #index_15\n        #\u751f\u6210K\u7ebf\u5b9e\u4f53\u5360HIGH-LOW\u7684\u6bd4\u91cd*100\n\n     ma_group(self):\n        #index_16 ma\n        #\u751f\u6210\u6570\u636e\u7684\n\n     sma_ta(self,timeperiod:int = 30):\n        #index_17 sma\n        #SMA \uff08\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\uff09\uff08\u53c2\u65701\uff1a\u6536\u76d8\u4ef7\u5e8f\u5217\uff0c\u53c2\u65702\uff1a\u65f6\u95f4\u5468\u671f\uff08\u5747\u7ebf\u7684\u8ba1\u7b97\u957f\u5ea6 \u5373 \u51e0\u65e5\u5747\u7ebf\uff09\uff09\n\n     atr(self,timeperiod:int = 14):\n        #index_18\n        #ATR\uff08\u5e73\u5747\u771f\u5b9e\u6ce2\u5e45\uff09\n        #\uff08\u53c2\u65701\uff1a\u6700\u9ad8\u4ef7\u5e8f\u5217\uff0c\u53c2\u65702\uff1a\u6700\u4f4e\u4ef7\u5e8f\u5217\uff0c\u53c2\u65703\uff1a\u6536\u76d8\u4ef7\u5e8f\u5217\uff0c\u53c2\u65704\uff1a\u65f6\u95f4\u5468\u671f\uff09\n\n     ht_trendline(self):\n        #inex_19 ht_trendline\n        #HT_TRENDLINE - Hilbert Transform - Instantaneous Trendline\n\n     kama(self,timeperiod:int=30):\n        #index_20 kama\n        #KAMA - Kaufman Adaptive Moving Average\n\n     var(self,timeperiod:int = 5,nbdev:int = 1):\n        #index_21 var\n        #MAMA - MESA Adaptive Moving Average\n\n     tsf(self,timeperiod:int=14):\n        #index_22 var\n        #TSF - Time Series Forecast\n\n     dema(self,timeperiod:int = 30):\n        #index_23 dema\n        #DEMA - Double Exponential Moving Average\n\n     midpoint(self,timeperiod:int=14):\n        #MIDPOINT - MidPoint over period\n        #index_26 minpoint\n\n     midprice(self,timeperiod:int=14):\n        #index_27 midprice\n        #MIDPRICE - Midpoint Price over period\n\n     sar(self):\n        #index_28 sar\n        #SAR - Parabolic SAR\n\n     sarext(self):\n        #index_29 sarext\n        #SAREXT - Parabolic SAR - Extended\n\n     t3(self,timeperiod:int = 5):\n        #index_30 t3\n        #T3 - Triple Exponential Moving Average (T3)\n\n     tema(self,timeperiod:int=30):\n        #index_31 tema\n        #TEMA - Triple Exponential Moving Average\n\n     trima(self,timeperiod:int=30):\n        #index_32 tirma\n        #TRIMA - Triangular Moving Average\n\n     wma1(self,timeperiod:int = 30):\n        #index_33 wma\n        #WMA - Weighted Moving Average\n\n     adx(self,timeperiod:int = 14):\n        #index_34 adx\n        #ADX - Average Directional Movement Index\n        #NOTE: The ADX function has an unstable period.\n\n     adxr(self,timeperiod:int=14):\n        #index_35 adxr\n        #ADXR - Average Directional Movement Index Rating\n        #NOTE: The ADXR function has an unstable period.\n\n     apo(self,fastperiod:int=12,slowperiod:int=26):\n        #index_36 apo\n        #APO - Absolute Price Oscillator\n\n     aroon(self,timeperiod:int=14):\n        #index_37 aroon\n        #AROON - Aroon\n\n     aroonosc(self,timeperiod:int=14):\n        #index_38 aroonosc\n        #AROONOSC - Aroon Oscillator\n\n     bop(self):\n        #index_39 bop\n        #BOP - Balance Of Power\n\n     cci(self,timeperiod:int = 14):\n        #index_40 cci\n        #CCI - Commodity Channel Index\n\n     cmo(self,timeperiod:int=14):\n        #index_41 cmo\n        #CMO - Chande Momentum Oscillator\n\n     dx(self,timeperiod:int=14):\n        #index_42 dx \n        #DX - Directional Movement Index\n\n     macd_t(self,fastperiod:int=12,slowperiod:int=26,signalperiod:int=9):\n        #index_43 macd\n        #MACD - Moving Average Convergence/Divergence\n\n     macdext(self,fastperiod:int=12,slowperiod:int=26,signalperiod:int=9):\n        #index_44 macdext\n        #MACDEXT - MACD with controllable MA type\n\n     macdfix(self,signalperiod:int=9):\n        #index_45 macdfix\n        #MACDFIX - Moving Average Convergence/Divergence Fix 12/26\n\n     mfi(self,timeperiod:int=14):\n        #index_46 mfi\n        #MFI - Money Flow Index\n\n     minus_di(self,timeperiod:int=14):\n        #index_47 minus_di\n        #MINUS_DI - Minus Directional Indicator\n\n     minus_dm(self,timeperiod:int=14):\n        #index_48 minus_dm\n        #MINUS_DM - Minus Directional Movement\n\n     mom(self,timeperiod:int=10):\n        #index_49 mom\n        #MOM - Momentum\n\n     plus_di(self,timeperiod:int=14):\n        #index_50 plus_di\n        #PLUS_DI - Plus Directional Indicator\n\n     plus_dm(self,timeperiod:int=14):\n        #index_51 plus_dm\n        #PLUS_DM - Plus Directional Movement\n\n     ppo(self,fastperiod:int=12,slowperiod:int=26):\n        #index_52 ppo\n        #PPO - Percentage Price Oscillator\n\n     roc(self,timeperiod:int=10):\n        #index_53 roc\n        #ROC - Rate of change : ((price/prevPrice)-1)*100\n\n     rocp(self,timeperiod:int=10):\n        #index_54 rocp\n        #ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice\n\n     rocr(self,timeperiod:int=10):\n        #index_55 rocr\n        #ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice\n\n     rocr100(self,timeperiod:int=10):\n        #index_56 rocr100\n        #ROCR100 - Rate of change ratio 100 scale: (price/prevPrice)*100\n\n     rsi(self,timeperiod:int=14):\n        #index_57 rsi\n    \n     stoch(self,fastk_period:int=5,slowk_period:int=3,slowd_period:int=3):\n        #index_58 stoch\n        #STOCH - Stochastic\n\n     stochf(self,fastk_period:int=5,fastd_period:int=3):\n        #index_59 stochf\n        #STOCHF - Stochastic Fast\n\n     stochrsi(self,timeperiod:int=14,fastk_period:int=5,fastd_period:int=3):\n        #index_60 stochrsi\n        #STOCHRSI - Stochastic Relative Strength Index\n\n     trix(self,timeperiod:int=30):\n        #index_61 trix\n        #TRIX - 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA\n\n     ultosc(self,timeperiod1:int=7,timeperiod2:int=14,timeperiod3:int=28):\n        #index_62 stochf\n        #ULTOSC - Ultimate Oscillator  \n\n     willr(self,timeperiod:int=14):\n        #index_63 stochf\n        #WILLR - Williams' %R \n\n     ad(self):\n        #index_64 ad\n        #AD - Chaikin A/D Line\n\n     ad(self,fastperiod:int=3,slowperiod:int=10):\n        #index_65 adosc\n        #ADOSC - Chaikin A/D Oscillator\n\n     obv_ta(self):\n        #index_66 obv\n        #OBV - On Balance Volume\n\n     ht_dcperiod(self):\n        #index_67 ht_dcperiod\n        #HT_DCPERIOD - Hilbert Transform - Dominant Cycle Period\n\n     ht_dcphase(self):\n        #index_68 ht_dcphase    NNN\n        #HT_DCPHASE - Hilbert Transform - Dominant Cycle Phase\n\n     ht_phasor(self):\n        #index_69 ht_phasor  NNNN\n        #HT_PHASOR - Hilbert Transform - Phasor Components\n\n     ht_sine(self):\n        #index_70 ht_sine  NNN\n        #HT_SINE - Hilbert Transform - SineWave\n\n     ht_trendmode(self):\n        #index_71 ht_trendmode\n        #HT_TRENDMODE - Hilbert Transform - Trend vs Cycle Mode\n\n     avgprice(self):\n        #index_72 AVGPRICE\n        #AVGPRICE - Average Price\n\n     medprice(self):\n        #index_73 MEDPRICE\n        #MEDPRICE - Median Price\n\n     typprice(self):\n        #index_74 TYPPRICE\n        #TYPPRICE - Typical Price\n\n     wclprice(self):\n        #index_75 WCLPRICE\n        #WCLPRICE - Weighted Close Price\n\n     atr(self,timeperiod:int=14):\n        #index_76 atr\n        #ATR - Average True Range\n\n     natr(self,timeperiod:int=14):\n        #index_77 aatr\n        #NATR - Normalized Average True Range\n\n     trange(self):\n        #index_78 trange\n        #TRANGE - True Range\n\n     cdl2crows(self):\n        #index_79 cdl2crows \n\n     cdl3blackcrows(self):\n        #index_80 cdl3blackcrows\n        #CDL3BLACKCROWS - Three Black Crows\n\n     cdl3inside(self):\n        #index_81 cdl3blackcrows\n        #CDL3INSIDE - Three Inside Up/Down \n\n     cdl3linestrike(self):\n        #index_82 cdl3cdl3linestrike\n        #CDL3INSIDE - Three Inside Up/Down  \n\n     cdl3outside(self):\n        #index_83 cdl3outside\n\n     cdl3starstinsouth(self):\n        #index_84 CDL3STARSINSOUTH\n        #CDL3STARSINSOUTH - Three Stars In The South\n\n     cdl3whitesoldiers(self):\n        #index_85  CDL3WHITESOLDIERS\n        #CDL3WHITESOLDIERS - Three Advancing White Soldiers\n\n     cdlabandonedbaby(self):\n        #index_86  CDLABANDONEDBABY\n        #CDLABANDONEDBABY - Abandoned Baby\n\n     cdladvanceblock(self):\n        #index_87 CDLADVANCEBLOCK\n        #CDLADVANCEBLOCK - Advance Block\n\n     cdlbelthold(self):\n        #index_88 CDLBELTHOLD\n        #CDLBELTHOLD - Belt-hold\n\n     cdlbreakaway(self):\n        #index_89 CDLBREAKAWAY\n        #CDLBREAKAWAY - Breakaway\n\n     cdlclosingmarubozu(self):\n        #index_90 CDLCLOSINGMARUBOZU\n        #CDLCLOSINGMARUBOZU - Closing Marubozu\n\n     cdlconcealbabyswall(self):\n        #index_91 CDLCLOSINGMARUBOZU\n        #CDLCONCEALBABYSWALL - Concealing Baby Swallow\n\n     cdlcounterattack(self):\n        #index_92 CDLCOUNTERATTACK\n        #CDLCOUNTERATTACK - Counterattack\n\n     cdldarkcloundcover(self):\n        #index_93 CDLDARKCLOUDCOVER\n        #CDLDARKCLOUDCOVER - Dark Cloud Cover\n\n     cdldoji(self):\n        #index_94 CDLDOJI \n        #CDLDOJI - Doji\n    \n     cdldojistar(self):\n        #index_95 CDLDOJI \n        #CDLDOJISTAR - Doji Star\n\n     cdldragonflydoji(self):\n        #index_96 CDLDRAGONFLYDOJI\n        #CDLDRAGONFLYDOJI - Dragonfly Doji\n\n     cdlengulfing(self):\n        #index_97 CDLDRAGONFLYDOJI\n        #CDLENGULFING - Engulfing Pattern\n\n     cdleveningdojistar(self):\n        #index_98 CDLEVENINGDOJISTAR\n        #CDLEVENINGDOJISTAR - Evening Doji Star\n\n     cdleveningstar(self):\n        #index_99 CDLEVENINGSTAR \n        #CDLEVENINGSTAR - Evening Star\n\n     cdlgapsidesidewhite(self):\n        #index_100 CDLGAPSIDESIDEWHITE \n        #CDLGAPSIDESIDEWHITE - Up/Down-gap side-by-side white lines\n\n     cdlgravestonedoji(self):\n        #index_101 CDLGRAVESTONEDOJI - Gravestone Doji\n        #CDLGRAVESTONEDOJI - Gravestone Doji\n\n     cdlhammer(self):\n        #index_102 CDLHAMMER  \n        #CDLHAMMER - Hammer\n\n     cdlhangingman(self):\n        #index_103 CDLHANGINGMAN  \n        #CDLHANGINGMAN - Hanging Man\n\n     cdlharami(self):\n        #index_104 CDLHARAMI \n        #CDLHARAMI - Harami Pattern\n\n     cdlharamicross(self):\n        #index_105 CDLHARAMICROSS \n        #CDLHARAMICROSS - Harami Cross Pattern\n\n     cdlhighwave(self):\n        #index_106 CDLHIGHWAVE \n        #CDLHIGHWAVE - High-Wave Candle\n\n     cdlhikkake(self):\n        #index_107 CDLHIKKAKE\n        #CDLHIKKAKE - Hikkake Pattern\n\n     cdlhikkakemod(self):\n        #index_108 CDLHIKKAKEMOD \n        #CDLHIKKAKEMOD - Modified Hikkake Pattern\n\n     cdlhomingpigeon(self):\n        #index_109 CDLHOMINGPIGEON  \n        #CDLHOMINGPIGEON - Homing Pigeon\n\n     cdlidentical3crows(self):\n        #index_110 CDLIDENTICAL3CROWS  \n        #CDLIDENTICAL3CROWS - Identical Three Crows\n\n     cdlinneck(self):\n        #index_111 CDLINNECK \n        #CDLINNECK - In-Neck Pattern\n\n     cdlinvertedhammer(self):\n        #index_112 CDLINVERTEDHAMMER  \n        #CDLINVERTEDHAMMER - Inverted Hammer\n\n     cdlkicking(self):\n        #index_113 CDLKICKING - Kicking\n        #CDLKICKING - Kicking\n\n     cdlkickingbylegngth(self):\n        #index_114 CDLKICKINGBYLENGTH   \n        #CDLKICKINGBYLENGTH - Kicking - bull/bear determined by the longer marubozu\n\n     cdlladderbottom(self):\n        #index_115 CDLLADDERBOTTOM  \n        #CDLLADDERBOTTOM - Ladder Bottom\n\n     cdllongleggeddoji(self):\n        #index_116 CDLLONGLEGGEDDOJI  \n        #CDLLONGLEGGEDDOJI - Long Legged Doji\n\n     cdllongline(self):\n        #index_117 CDLLONGLINE  \n        #CDLLONGLINE - Long Line Candle\n\n     cdlmarubozu(self):\n        #index_118 CDLMARUBOZU  \n        #CDLMARUBOZU - Marubozu\n\n     cdlmatchinglow(self):\n        #index_119 CDLMATCHINGLOW - Matching Low\n        #CDLMARUBOZU - Marubozu\n\n     cdlmathold(self):\n        #index_119 CDLMATCHINGLOW - Matching Low\n        #CDLMATHOLD - Mat Hold\n\n     cdlmorningdojistar(self):\n        #index_120 CDLMORNINGDOJISTAR \n        #CDLMORNINGDOJISTAR - Morning Doji Star\n\n     cdlmorningstar(self):\n        #index_121 CDLMORNINGSTAR \n        #CDLMORNINGSTAR - Morning Star\n\n     cdlonneck(self):\n        #index_122 CDLONNECK - On-Neck Pattern\n        #CDLONNECK - On-Neck Pattern\n\n     cdlpiercting(self):\n        #index_123 CDLPIERCING - Piercing Pattern\n        #CDLPIERCING - Piercing Pattern\n\n     cdlrickshawman(self):\n        #index_124 CDLRICKSHAWMAN \n        #CDLRICKSHAWMAN - Rickshaw Man\n\n     cdlrisefall3methods(self):\n        #index_125 CDLRISEFALL3METHODS  \n        #CDLRISEFALL3METHODS - Rising/Falling Three Methods\n\n     cdlseparatinglines(self):\n        #index_126 CDLSEPARATINGLINES  \n        #CDLSEPARATINGLINES - Separating Lines\n\n     cdlshootingstar(self):\n        #index_127 CDLSHOOTINGSTAR  \n        #CDLSHOOTINGSTAR - Shooting Star\n\n     cdlshortline(self):\n        #index_128 CDLSHORTLINE - Short Line Candle\n        #CDLSHORTLINE - Short Line Candle\n\n     cdlspinningtop(self):\n        #index_129 CDLSPINNINGTOP - Spinning Top\n        #CDLSPINNINGTOP - Spinning Top\n\n     cdlstalledpattern(self):\n        #index_130 CDLSTALLEDPATTERN - Stalled Pattern\n        #CDLSTALLEDPATTERN - Stalled Pattern\n\n     cdlsticksandwich(self):\n        #index_131 CDLSTICKSANDWICH  \n        #CDLSTICKSANDWICH - Stick Sandwich\n\n     cdltakuri(self):\n        #index_132 CDLTAKURI\n        #CDLTAKURI - Takuri (Dragonfly Doji with very long lower shadow)\n\n     cdltasukigap(self):\n        #index_132 CDLTASUKIGAP  \n        #CDLTASUKIGAP - Tasuki Gap\n\n     cdlthrusting(self):\n        #index_133 CDLTHRUSTING  \n        #CDLTHRUSTING - Thrusting Pattern\n\n     cdltristar(self):\n        #index_134 CDLTRISTAR  \n        #CDLTRISTAR - Tristar Pattern\n\n     cdlunique3river(self):\n        #index_135 CDLUNIQUE3RIVER  \n        #CDLUNIQUE3RIVER - Unique 3 River\n\n     cdlupsidegap2crows(self):\n        #index_136 CDLUPSIDEGAP2CROWS  \n        #CDLUPSIDEGAP2CROWS - Upside Gap Two Crows\n\n     cdlxsidegap3methods(self):\n        #index_137 CDLXSIDEGAP3METHODS  \n        #CDLXSIDEGAP3METHODS - Upside/Downside Gap Three Methods\n\n     beta(self,timeperiod:int=5):\n        #index_138 BETA \n        #BETA - Beta\n\n     correl(self,timeperiod:int=30):\n        #index_139 CORREL            \n        #CORREL - Pearson's Correlation Coefficient (r)\n\n     linearreg(self,timeperiod:int=14):\n        #index_140 LINEARREG\n        #LINEARREG - Linear Regression\n\n     linearreg_angle(self,timeperiod:int=14):\n        #index_141 LINEARREG_ANGLE\n        #LINEARREG_ANGLE - Linear Regression Angle\n\n     linearreg_intercept(self,timeperiod:int=14):\n        #index_142 LINEARREG_INTERCEPT \n        #LINEARREG_INTERCEPT - Linear Regression Intercept\n\n     linearreg_slope(self,timeperiod:int=14):\n        #index_143 LINEARREG_SLOPE \n        #LINEARREG_SLOPE - Linear Regression Slope\n\n     stddev(self,timeperiod:int=5,nbdev:int=1):\n        #index_144 STDDEV\n        #STDDEV - Standard Deviation\n\n     tsf(self,timeperiod:int=14):\n        #index_145 TSF \n        #TSF - Time Series Forecast\n\n     var_ta(self,timeperiod:int=5,nbdev:int=1):\n        #index_146 VAR \n        #VAR - Variance\n\n     acos(self):\n        #index_147 ACOS \n        #ACOS - Vector Trigonometric ACos\n\n     asin(self):\n        #index_148 ASIN \n        #ASIN - Vector Trigonometric ASin\n\n     atan(self):\n        #index_149 ATAN \n        #ATAN - Vector Trigonometric ATan\n\n     ceil(self):\n        #index_150 CEIL\n        #CEIL - Vector Ceil\n\n     cos(self):\n        #index_151 COS\n        #COS - Vector Trigonometric Cos\n\n     cosh(self):\n        #index_152 COSH \n        #COSH - Vector Trigonometric Cosh\n\n     exp(self):\n        #index_152 EXP\n        #EXP\n\n     floor(self):\n        #index_153 FLOOR \n        #FLOOR - Vector Floor\n\n     ln(self):\n        #index_154 LN \n        #LN - Vector Log Natural\n\n     log10(self):\n        #index_155 LOG10 \n        #LOG10 - Vector Log10\n\n     sin(self):\n        #index_156 SIN\n        #SIN - Vector Trigonometric Sin\n\n     sinh(self):\n        #index_157 SINH \n        #SINH - Vector Trigonometric Sinh\n\n     sqrt(self):\n        #index_158 SQRT \n        #SQRT - Vector Square Root\n\n     tan(self):\n        #index_159 TAN \n        #TAN - Vector Trigonometric Tan\n\n     tanh(self):\n        #index_160 TANH \n        #TANH - Vector Trigonometric Tanh\n\n     add(self):\n        #index_161  ADD \n        #ADD - Vector Arithmetic Add\n\n     div(self):\n        #index_162 DIV \n        #DIV - Vector Arithmetic Div\n\n     max(self,timeperiod:int=30):\n        #index_163 MAX \n\n     maxindex(self,timeperiod:int=30):\n        #index_164 MAXINDEX \n        #MAXINDEX - Index of highest value over a specified period\n\n     min(self,timeperiod:int=30):\n        #index_165 MIN \n        #MIN - Lowest value over a specified period\n\n     minindex(self,timeperiod:int=30):\n        #index_166 MININDEX \n        #MININDEX - Index of lowest value over a specified period\n\n     minmax(self,timeperiod:int=30):\n        #index_167 MINMAX \n        #MINMAX - Lowest and highest values over a specified period\n\n     minmaxindex(self,timeperiod:int=30):\n        #index_168 MINMAXINDEX \n        #MINMAXINDEX - Indexes of lowest and highest values over a specified period\n\n     mult(self):\n        #index_169 MULT - Vector Arithmetic Mult\n        #MULT - Vector Arithmetic Mult\n\n     sub(self):\n        #index_170 SUB \n        #SUB - Vector Arithmetic Substraction\n\n     sum(self,timeperiod:int=30):\n        #index_171 SUM \n        #SUM - Summation\n\n## \u5e94\u7528\n\n##\u5b89\u88c5 pip install pgabc\n\n##\u4f7f\u7528\u4e3e\u4f8b\n\n##  import pgabc.indicator as pg_indicator\n## pg = pg_indicator.Indicator(df,start_dt,end_dt)     #\u5f15\u5165\u7c7b  df \u662f\u6570\u636epandas\u683c\u5f0f \uff0c \u4e00\u822c\u6709 trade_date,ts_code,open,high,low,close,vol \u7b49\u5185\u5bb9\n## pg.ts_code = '600999.SH'                            #\u9009\u5b9a\u80a1\u7968\n## pg.given_dt = '20200701'                            #\u8bbe\u5b9a\u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u662f\u5f53\u524d\u65e5\u671f\n## df = pg.ema(k=12)                                   #\u751f\u621012\u65e5ema\u6570\u636e",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HewayPg",
            "keywords": "indicator",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pgabc",
            "package_url": "https://pypi.org/project/pgabc/",
            "platform": "",
            "project_url": "https://pypi.org/project/pgabc/",
            "project_urls": {
                "Homepage": "https://github.com/HewayPg"
            },
            "release_url": "https://pypi.org/project/pgabc/1.12.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data calulation",
            "version": "1.12.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7915080,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ce5c8fd9f57c2b3d41098744b791727f",
                    "sha256": "242e484af22e47272b3eff11f766a9f5a9c0dd9d62dafa530bff186272faed6d"
                },
                "downloads": -1,
                "filename": "pgabc-1.12.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ce5c8fd9f57c2b3d41098744b791727f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 53738,
                "upload_time": "2020-08-08T13:25:49",
                "upload_time_iso_8601": "2020-08-08T13:25:49.090619Z",
                "url": "https://files.pythonhosted.org/packages/ee/57/f187c49c5ecb99a48ead8f0657ed6cf42a80875e726663a71ec92248a7ee/pgabc-1.12.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}