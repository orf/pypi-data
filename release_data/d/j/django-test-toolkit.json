{
    "1.0.0": {
        "info": {
            "author": "normal-wls",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/TencentBlueKing/django-test-toolkit",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "django-test-toolkit",
            "package_url": "https://pypi.org/project/django-test-toolkit/",
            "platform": null,
            "project_url": "https://pypi.org/project/django-test-toolkit/",
            "project_urls": {
                "Homepage": "https://github.com/TencentBlueKing/django-test-toolkit"
            },
            "release_url": "https://pypi.org/project/django-test-toolkit/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Toolkit for test based on Django",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13671103,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1a98a07bfd8f1470ddcc81447a8e9bfd",
                    "sha256": "9bc65d1d41aaf26542231a961a5550bc3184161fbe3f0ebe18187ee3dd32e6e1"
                },
                "downloads": -1,
                "filename": "django-test-toolkit-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "1a98a07bfd8f1470ddcc81447a8e9bfd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 14699,
                "upload_time": "2022-03-30T07:29:38",
                "upload_time_iso_8601": "2022-03-30T07:29:38.264454Z",
                "url": "https://files.pythonhosted.org/packages/6b/aa/06a973ddbcbfd17c10d829057d488adcb2b69691a54929a700aadd2c1bd9/django-test-toolkit-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.0": {
        "info": {
            "author": "normal-wls",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Django Test Toolkit\n\n\u57fa\u4e8eDjango\u63d0\u4f9b\u7684\u4e00\u6b3e\u6d4b\u8bd5\u5de5\u5177\u7bb1\u3002\n\n## Features\n- \u652f\u6301\u6a21\u578b\u6d4b\u8bd5\u6570\u636e\u751f\u6210\n  - \u652f\u6301\u6839\u636e\u5bf9\u5e94\u6570\u636e\u6a21\u578b\u5feb\u901f\u751f\u6210\u6d4b\u8bd5\u6570\u636e\n  - \u652f\u6301\u81ea\u5b9a\u4e49\u6a21\u578b\u5b57\u6bb5\u751f\u6210\u65b9\u5f0f\n  - \u652f\u6301\u914d\u7f6e\u6570\u636e\u751f\u6210\u65f6\u9ed8\u8ba4\u503c\u7684\u91c7\u7528\u6bd4\u4f8b\n  - \u652f\u6301\u914d\u7f6e\u552f\u4e00\u5b57\u6bb5\u6570\u636e\u751f\u6210\u91cd\u590d\u503c\u65f6\u7684\u91cd\u8bd5\u6b21\u6570\n- \u652f\u6301\u5feb\u901f\u7ec4\u5408\u591a\u79cd\u751f\u547d\u5468\u671f\u94a9\u5b50\n  - \u5185\u7f6eaccount\u3001blueking\u548cdrf\u7b49\u591a\u79cd\u94a9\u5b50\n  - \u652f\u6301\u5feb\u901f\u81ea\u5b9a\u4e49\u94a9\u5b50\u5e76\u7ec4\u5408\u4f7f\u7528\n\n## Quick Start\n\n#### \u6570\u636e\u751f\u6210\u793a\u4f8b\n\n**\u5b9a\u4e49\u6a21\u578b\u6570\u636e\u751f\u6210\u5de5\u5382\u7c7b**\n\n\u6700\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u57fa\u4e8e\u5b57\u6bb5\u8fdb\u884c\u751f\u6210\uff1a\n\n``` python\nfrom django_test_toolkit.data_generation.faker_generator import DjangoModelFakerFactory\n\nclass ClockedTaskFactory(DjangoModelFakerFactory):\n    class Meta:\n        model = ClockedTask\n```\n\n\u5982\u679c\u9700\u8981\u5bf9Model\u4e2d\u7684\u7279\u5b9a\u5b57\u6bb5\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u53ef\u4ee5\u5bf9Factory\u7c7b\u8fdb\u884c\u4fee\u6539\uff1a\n\n``` python\nimport factory\n\nclass ClockedTaskFactory(DjangoModelFakerFactory):\n    # \u5f00\u53d1\u8005\u81ea\u5b9a\u4e49\u7279\u5b9a\u5b57\u6bb5\u503c\n    notify_receivers = \"fixed value\"\n    # \u5916\u952e\u5b57\u6bb5\u9700\u8981\u8fdb\u884c\u6307\u5b9a\n    foreign_field = factory.SubFactory(ForeignModelFactory)\n    \n    class Meta:\n        model = ClockedTask\n```\n\n**\u901a\u8fc7\u5de5\u5382\u7c7b\u5feb\u901f\u751f\u6210\u6570\u636e\u5e76\u63d2\u5165\u6d4b\u8bd5\u6570\u636e\u5e93**\n\n``` python\nclocked_tasks = ClockedTaskFactory.create_batch(10)\n```\n\n\u6b64\u65f6\u4f1a\u8fd4\u56de10\u4e2aclocked_tasks\u5bf9\u8c61\uff0c\u53ef\u4f9b\u540e\u7eed\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\u8be5\u6b65\u9aa4\u53ef\u4ee5\u5728\u6d4b\u8bd5\u51c6\u5907\u9636\u6bb5\u8fdb\u884c\uff0c\u5982\u5728setUpTestData\u7b49\u3002\n\n#### \u63a5\u53e3\u6d4b\u8bd5\u793a\u4f8b\uff08\u5185\u7f6e\u751f\u547d\u5468\u671fMixin\u4f7f\u7528\uff09\n\n``` python\nfrom django_test_toolkit.testcases import ToolkitApiTestCase\nfrom django_test_toolkit.mixins.account import SuperUserMixin\nfrom django_test_toolkit.mixins.blueking import LoginExemptMixin, StandardResponseAssertionMixin\nfrom django_test_toolkit.mixins.drf import DrfPermissionExemptMixin\n\nclass ClockedTaskTestCase(\n    ToolkitApiTestCase,\n    SuperUserMixin,\n    LoginExemptMixin,\n    DrfPermissionExemptMixin,\n    StandardResponseAssertionMixin,\n):\n    # DrfPermissionExemptMixin\u9700\u8981\u6307\u5b9a\uff0c\u7528\u4e8e\u8c41\u514d\u5bf9\u5e94\u6743\u9650\u8ba4\u8bc1\n    VIEWSET_PATH = \"gcloud.clocked_task.viewset.ClockedTaskViewSet\"\n    \n    @classmethod\n    def setUpTestData(cls):\n        super().setUpTestData()\n        # \u751f\u6210\u6570\u636e\u5e76\u63d2\u5165\u6570\u636e\u5e93\n        cls.clocked_tasks = ClockedTaskFactory.create_batch(10)\n        # \u5f00\u53d1\u8005\u81ea\u5b9a\u4e49\u6570\u636e\u51c6\u5907\u903b\u8f91...\n    \n    def test_list_action_fetch_all_objects(self):\n        url = reverse(\"clocked_task-list\")\n        response = self.client.get(url)\n        # \u7531StandardResponseAssertionMixin\u63d0\u4f9b\uff0c\u7528\u4e8e\u5feb\u901f\u5224\u65ad\u662f\u5426\u7b26\u5408\u84dd\u9cb8\u6807\u51c6\u4e0b\u8bf7\u6c42\u6210\u529f\u7684\u8fd4\u56de\u683c\u5f0f\n        self.assertStandardSuccessResponse(response)\n        # \u5224\u65adlist\u63a5\u53e3\u8fd4\u56de\u6761\u6570\u662f\u5426\u7b49\u4e8e\u6570\u636e\u751f\u6210\u7684\u6761\u6570\n        self.assertEqual(len(response.data[\"data\"]), len(self.clocked_tasks))\n\n    def test_retrieve_action_fetch_specific_object(self):\n        # \u83b7\u53d6\u751f\u6210\u7684\u7b2c\u4e00\u6761\u6570\u636e\u7684id\n        test_clocked_task = self.clocked_tasks[0]\n        url = reverse(\"clocked_task-detail\", args=[test_clocked_task.id])\n        response = self.client.get(url)\n        self.assertStandardSuccessResponse(response)\n        # \u5224\u65adretrieve\u63a5\u53e3\u8bf7\u6c42\u7684\u6570\u636e\u662f\u5426\u7b26\u5408\u9884\u671f\n        self.assertEqual(test_clocked_task.task_name, response.data[\"data\"][\"task_name\"])\n    \n```\n\n**\u6ce8\u610f\uff1adjango_test_toolkit.testcases\u4e2d\u7684ToolkitApiTestCase\u6216ToolkitTestCase\u9700\u8981\u653e\u5728\u7ee7\u627f\u987a\u5e8f\u7684\u7b2c\u4e00\u4f4d\uff0c\u5c06\u5404\u4e2a\u751f\u547d\u5468\u671f\u76f8\u5173Mixin\u653e\u5728\u540e\u9762\u7ee7\u627f\u3002**\n\n#### \u5185\u7f6eMixin\u4ecb\u7ecd\n\n| Mixin\u540d\u79f0                      | \u76f8\u5173\u9886\u57df    | \u4f5c\u7528                                    | \u6d89\u53ca\u94a9\u5b50                       | \u914d\u7f6e\u9879                                                       |\n| ------------------------------ | ----------- | --------------------------------------- | ------------------------------ | ------------------------------------------------------------ |\n| SuperUserMixin                 | \u767b\u9646        | \u4ee5admin\u8eab\u4efd\u767b\u9646\u7cfb\u7edf\u5e76\u8fdb\u884c\u540e\u7eedclient\u8bf7\u6c42 | set_up_test_data\u3001set_up\u3001tear_down | \u65e0                                                           |\n| DrfPermissionExemptMixin       | DRF ViewSet | \u7528\u4e8e\u5feb\u901f\u8c41\u514dViewSet\u6743\u9650\u63a7\u5236             | set_up                          | VIEWSET_PATH\uff1a\u6d4b\u8bd5\u7c7b\u53d8\u91cf\uff0c \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u63cf\u8ff0\u5bf9\u5e94\u8981\u8c41\u514d\u7684ViewSet\u7684\u8def\u5f84 |\n| LoginExemptMixin               | \u84dd\u9cb8        | \u8c41\u514d\u84dd\u9cb8\u767b\u9646\u6821\u9a8c                        | set_up                          | \u65e0                                                           |\n| StandardResponseAssertionMixin | \u84dd\u9cb8        | \u63d0\u4f9b\u84dd\u9cb8\u6807\u51c6\u8fd4\u56de\u683c\u5f0f\u5feb\u901f\u5224\u65ad            | \u65e0                             | \u65e0                                                           |\n\n\n\n## Extensions\n\n#### \u81ea\u5b9a\u4e49\u751f\u547d\u5468\u671fMixin\n\n\u5982\u679c\u5185\u7f6e\u7684Mixin\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u57fa\u4e8eLifeCycleHooksMixin\u8fdb\u884c\u5f00\u53d1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u7279\u5b9a\u7684\u903b\u8f91\u4e0e\u5185\u7f6eMixin\u4e00\u6837\u5728\u5bf9\u5e94\u7684\u751f\u547d\u5468\u671f\u4e2d\u88ab\u81ea\u52a8\u6267\u884c\uff0c\u53ef\u4ee5\u5927\u91cf\u590d\u7528\u4e8e\u5404\u4e2aTestCase\u6d4b\u8bd5\u7c7b\u4e2d\uff0c\u4e5f\u53ef\u5b9e\u73b0\u591a\u4e2aMixin\u7684\u7ec4\u5408\u4f7f\u7528\u3002\n\n\u4e0b\u9762\u4ee5\u5185\u7f6e\u751f\u547d\u5468\u671fMixin\uff1aSuperUserMixin\u4e3a\u4f8b\u4ecb\u7ecd\u5982\u4f55\u8fdb\u884c\u81ea\u5b9a\u4e49\uff1a\n\n``` python\nfrom django_test_toolkit.mixins.base import LifeCycleHooksMixin\n\n\nclass SuperUserMixin(LifeCycleHooksMixin):\n    MOCK_SUPERUSER_NAME = \"admin\"\n    MOCK_SUPERUSER_PASSWORD = \"admin\"\n\n    @classmethod\n    def set_up_test_data(cls):\n        user_model = get_user_model()\n        try:\n            cls.superuser = user_model.objects.get(username=cls.MOCK_SUPERUSER_NAME)\n        except user_model.DoesNotExist:\n            cls.superuser = user_model.objects.create(\n                username=cls.MOCK_SUPERUSER_NAME,\n                password=cls.MOCK_SUPERUSER_PASSWORD,\n                is_superuser=True,\n                is_staff=True,\n                is_active=True,\n            )\n\n    def set_up(self):\n        self.client.force_login(user=self.superuser)\n\n    def tear_down(self):\n        self.client.logout()\n```\n\n1. \u9700\u8981\u7ee7\u627fLifeCycleHooksMixin\n2. \u652f\u6301Django Test\u9ed8\u8ba4\u63d0\u4f9b\u7684\u751f\u547d\u5468\u671f\u94a9\u5b50\uff1aset_up_test_data\u3001set_up_class\u3001tear_down_class\u3001set_up\u3001tear_down\n3. \u5728\u7279\u5b9a\u94a9\u5b50\u4e2d\u8fdb\u884c\u5f00\u53d1\n\n\n\n#### \u6570\u636e\u751f\u6210\u914d\u7f6e\u9879\n\n\u5bf9\u4e8e\u6a21\u578b\u5b57\u6bb5\u6570\u636e\u751f\u6210\uff0cdjango_test_toolkit\u4e2d\u63d0\u4f9b\u7684\u9ed8\u8ba4\u914d\u7f6e\uff1a\n\n``` python\nDEFAULT_FIELD_TO_FAKER_CONFIG = {\n    \"fields\": {\n        \"CharField\": {\"provider\": \"text\", \"processing_func\": text_provider_char_field_processing},\n        \"TextField\": {\"provider\": \"text\"},\n        \"IntegerField\": {\"provider\": \"random_int\", \"processing_func\": random_int_provider_integer_field_processing},\n        \"DateTimeField\": {\n            \"provider\": \"date_time_this_month\",\n            \"extra_kwargs\": {\"tzinfo\": pytz.utc, \"before_now\": True},\n        },\n    },\n    \"default_value_factor\": DEFAULT_DEFAULT_VALUE_FACTOR,\n    \"unique_field_duplicate_retry_tolerance\": DEFAULT_RETRY_TOLERANCE,\n}\n```\n\n\u5f00\u53d1\u8005\u53ef\u4ee5\u5728settings\u4e2d\u8bbe\u7f6e\u53d8\u91cf**TEST_TOOLKIT_FAKER_CONFIG**\u6765\u8fdb\u884c\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u5404\u914d\u7f6e\u9879\u7684\u542b\u4e49\u5982\u4e0b\u8868\uff1a\n\n| \u914d\u7f6e\u9879                                    | \u9ed8\u8ba4\u914d\u7f6e                                                     | \u914d\u7f6e\u7c7b\u578b               | \u542b\u4e49                                                         |\n| ----------------------------------------- | :----------------------------------------------------------- | ---------------------- | ------------------------------------------------------------ |\n| fields                                    | \u9ed8\u8ba4\u5305\u542b:<br />CharField<br />TextField<br />IntegerField<br />DateTimeField | dict                   | \u5404\u79cd\u6a21\u578b\u5b57\u6bb5\u7684\u6570\u636e\u751f\u6210\u65b9\u5f0f\u914d\u7f6e                               |\n| fields.xxxField                           | \u53ef\u5305\u542b:<br />provider(\u5fc5\u586b)<br />user_provider_class(\u9009\u586b)<br />processing_func(\u9009\u586b)<br />extra_kwargs(\u9009\u586b)<br />\u4e09\u4e2a\u5b57\u6bb5 | dict                   | \u5bf9\u5e94\u6a21\u578b\u5b57\u6bb5\u7684\u6570\u636e\u751f\u6210\u65b9\u5f0f\u5177\u4f53\u914d\u7f6e                           |\n| fields.xxxField.provider                  | \u5bf9\u5e94\u5173\u7cfb:<br />CharFiled: text<br />TextField: text<br />IntegerField:random_int<br />DateTimeField:date_time_this_month | str                    | \u5bf9\u5e94Faker\u7684provider\u7c7b\u578b\uff0c\u53ef\u53c2\u8003https://faker.readthedocs.io/en/master/providers/baseprovider.html\uff0c\u4e5f\u53ef\u81ea\u5b9a\u4e49 |\n| fields.xxxField.user_provider_class(\u9009\u586b) | \u65e0\u9ed8\u8ba4\u914d\u7f6e                                                   | faker.Provider\u7c7b\u53ca\u5b50\u7c7b | \u7528\u6237\u81ea\u5b9a\u4e49provider\u7c7b                                         |\n| fields.xxxField.processing_func(\u9009\u586b)     | \u5bf9\u5e94\u914d\u7f6e:<br />CharField: \u63a7\u5236\u5b57\u6bb5\u6570\u636e\u751f\u6210\u957f\u5ea6<br />IntegerField: \u63a7\u5236\u5b57\u6bb5\u6570\u636e\u751f\u6210\u503c\u533a\u95f4 | \u51fd\u6570\u5bf9\u8c61               | \u5bf9\u6267\u884c\u8fc7\u7a0b\u4e2d\u624d\u80fd\u786e\u5b9a\u7684\u6a21\u578b\u5b57\u6bb5\u6570\u636e\u751f\u6210\u89c4\u5219\u8fdb\u884c\u4e00\u4e9b\u5b9a\u5236\u5316\u5f00\u53d1\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5c06\u5728Faker(provider).generate()\u4e2d\u4f5c\u4e3aextra_kwargs\u53c2\u6570 |\n| fields.xxxField.extra_kwargs(\u9009\u586b)        | \u5bf9\u5e94\u914d\u7f6e:<br />DateTimeField: \u9ed8\u8ba4\u65f6\u533a\u4e3autc, \u65f6\u95f4\u65e9\u4e8e\u5f53\u524d\u65f6\u95f4 | dict                   | \u5bf9\u6267\u884c\u524d\u5373\u53ef\u786e\u8ba4\u7684\u6570\u636e\u751f\u6210\u89c4\u5219\u8fdb\u884c\u914d\u7f6e\uff0c\u5c06\u5728Faker(provider).generate()\u4e2d\u4f5c\u4e3aextra_kwargs\u53c2\u6570 |\n| faker_data_locale(\u9009\u586b)                   | faker\u9ed8\u8ba4\u503c\uff0cen_US                                           | str                    | faker\u6570\u636e\u751f\u6210\u9ed8\u8ba4\u4f7f\u7528\u7684locale\uff0c\u9700\u8981\u5bf9\u5e94\u7684provider\u652f\u6301        |\n| default_value_factor                      | 0.8                                                          | float                  | \u5f53\u6a21\u578b\u5b57\u6bb5\u914d\u7f6e\u9ed8\u8ba4\u503c\u65f6\u751f\u6210\u6570\u636e\u91c7\u7528\u9ed8\u8ba4\u503c\u7684\u6bd4\u4f8b               |\n| unique_field_duplicate_retry_tolerance    | 50                                                           | int                    | \u5f53\u6a21\u578b\u5b57\u6bb5\u914d\u7f6e\u552f\u4e00\u5c5e\u6027\u65f6\u751f\u6210\u6570\u636e\u91cd\u590d\u65f6\u7684\u91cd\u8bd5\u6b21\u6570             |\n\n#### \u6570\u636e\u751f\u6210\u81ea\u5b9a\u4e49Provider\n\n\u57fa\u4e8efaker.Provider\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9a\u4e49\u9002\u5408\u4e1a\u52a1\u7279\u6027\u7684Provider\u6765\u751f\u6210\u5b57\u6bb5\u503c\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\u6f14\u793a\uff0c\u8fd9\u91cc\u4ee5faker\u5b98\u65b9\u6587\u6863\u4e2d\u7684DynamicProvider\u4e3a\u4f8b:\n\n``` python\nfrom faker.providers import DynamicProvider\n\nmedical_professions_provider = DynamicProvider(\n    provider_name=\"medical_profession\",\n    elements=[\"dr.\", \"doctor\", \"nurse\", \"surgeon\", \"clerk\"],\n)\n```\n\n\u521b\u5efa\u4e86\u81ea\u5b9a\u4e49Provider\u4e4b\u540e\uff0c\u53ea\u9700\u5728\u914d\u7f6e\u9879\u4e2d\u6307\u5b9a\u5bf9\u5e94\u7684user_provider_class\u5373\u53ef\uff1a\n\n``` python\nDEFAULT_FIELD_TO_FAKER_CONFIG = {\n    \"fields\": {\n        \"CharField\": {\"provider\": \"medical_profession\", \"user_provider_class\": medical_professions_provider},\n        ...\n    }\n    ...\n}\n```\n\n#### \u6570\u636e\u751f\u6210\u81ea\u5b9a\u4e49processing_func\n\n\u56e0\u4e3aModel\u5404\u4e2a\u5b57\u6bb5\u4f1a\u6709\u4e00\u4e9b\u81ea\u8eab\u7684\u7ea6\u675f\uff0c\u4e3a\u4e86\u80fd\u8ba9\u81ea\u52a8\u751f\u6210\u7684\u6570\u636e\u6ee1\u8db3\u8fd9\u4e9b\u7ea6\u675f\uff0c\u6709\u65f6\u5019\u9700\u8981\u5728faker\u6570\u636e\u751f\u6210\u8fc7\u7a0b\u4e2d\u6dfb\u52a0\u4e00\u4e9b\u5b57\u6bb5\u7684\u7ea6\u675f\u903b\u8f91\uff0c\u6bd4\u5982int\u7684\u53d6\u503c\u533a\u95f4\u7b49\uff0c\u4e0b\u9762\u4ee5random_int_provider_integer_field_processing\u4e3a\u4f8b\u8bf4\u660e\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u81ea\u5b9a\u4e49processing_func:\n\n``` python\ndef random_int_provider_integer_field_processing(field):\n    \"\"\"\u4f20\u5165model field\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570, \u8fd4\u56de\u7ea6\u675f\u53c2\u6570\u5b57\u5178\uff0c\u4f5c\u4e3a\u6570\u636e\u751f\u6210\u8fc7\u7a0b\u4e2d\u7684extra_kwargs\"\"\"\n    extra_kwargs = {}\n    # \u4ecefield\u7684\u6821\u9a8c\u5668\u4e2d\u83b7\u53d6\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u89c4\u5b9a\u968f\u673a\u53d6\u503c\u7684\u533a\u95f4\n    for validator in field.validators:\n        if validator.code in [\"min_value\", \"max_value\"]:\n            extra_kwargs[validator.code.replace(\"_value\", \"\")] = validator.limit_value\n    return extra_kwargs\n```\n\n\n## Roadmap\n\n- [\u7248\u672c\u65e5\u5fd7](release.md)\n\n## Support\n\n- [\u84dd\u9cb8\u8bba\u575b](https://bk.tencent.com/s-mart/community)\n- [\u84dd\u9cb8 DevOps \u5728\u7ebf\u89c6\u9891\u6559\u7a0b](https://cloud.tencent.com/developer/edu/major-100008)\n- \u8054\u7cfb\u6211\u4eec\uff0c\u6280\u672f\u4ea4\u6d41QQ\u7fa4\uff1a\n\n<img src=\"https://github.com/Tencent/bk-PaaS/raw/master/docs/resource/img/bk_qq_group.png\" width=\"250\" hegiht=\"250\" align=center />\n\n\n## BlueKing Community\n\n- [BK-CI](https://github.com/Tencent/bk-ci)\uff1a\u84dd\u9cb8\u6301\u7eed\u96c6\u6210\u5e73\u53f0\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u4ea4\u4ed8\u7cfb\u7edf\uff0c\u53ef\u4ee5\u8f7b\u677e\u5c06\u4f60\u7684\u7814\u53d1\u6d41\u7a0b\u5448\u73b0\u5230\u4f60\u9762\u524d\u3002\n- [BK-BCS](https://github.com/Tencent/bk-bcs)\uff1a\u84dd\u9cb8\u5bb9\u5668\u7ba1\u7406\u5e73\u53f0\u662f\u4ee5\u5bb9\u5668\u6280\u672f\u4e3a\u57fa\u7840\uff0c\u4e3a\u5fae\u670d\u52a1\u4e1a\u52a1\u63d0\u4f9b\u7f16\u6392\u7ba1\u7406\u7684\u57fa\u7840\u670d\u52a1\u5e73\u53f0\u3002\n- [BK-BCS-SaaS](https://github.com/Tencent/bk-bcs-saas)\uff1a\u84dd\u9cb8\u5bb9\u5668\u7ba1\u7406\u5e73\u53f0SaaS\u57fa\u4e8e\u539f\u751fKubernetes\u548cMesos\u81ea\u7814\u7684\u4e24\u79cd\u6a21\u5f0f\uff0c\u63d0\u4f9b\u7ed9\u7528\u6237\u9ad8\u5ea6\u53ef\u6269\u5c55\u3001\u7075\u6d3b\u6613\u7528\u7684\u5bb9\u5668\u4ea7\u54c1\u670d\u52a1\u3002\n- [BK-PaaS](https://github.com/Tencent/bk-PaaS)\uff1a\u84dd\u9cb8PaaS\u5e73\u53f0\u662f\u4e00\u4e2a\u5f00\u653e\u5f0f\u7684\u5f00\u53d1\u5e73\u53f0\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u65b9\u4fbf\u5feb\u6377\u5730\u521b\u5efa\u3001\u5f00\u53d1\u3001\u90e8\u7f72\u548c\u7ba1\u7406SaaS\u5e94\u7528\u3002\n- [BK-SOPS](https://github.com/Tencent/bk-sops)\uff1a\u6807\u51c6\u8fd0\u7ef4\uff08SOPS\uff09\u662f\u901a\u8fc7\u53ef\u89c6\u5316\u7684\u56fe\u5f62\u754c\u9762\u8fdb\u884c\u4efb\u52a1\u6d41\u7a0b\u7f16\u6392\u548c\u6267\u884c\u7684\u7cfb\u7edf\uff0c\u662f\u84dd\u9cb8\u4f53\u7cfb\u4e2d\u4e00\u6b3e\u8f7b\u91cf\u7ea7\u7684\u8c03\u5ea6\u7f16\u6392\u7c7bSaaS\u4ea7\u54c1\u3002\n- [BK-CMDB](https://github.com/Tencent/bk-cmdb)\uff1a\u84dd\u9cb8\u914d\u7f6e\u5e73\u53f0\u662f\u4e00\u4e2a\u9762\u5411\u8d44\u4ea7\u53ca\u5e94\u7528\u7684\u4f01\u4e1a\u7ea7\u914d\u7f6e\u7ba1\u7406\u5e73\u53f0\u3002\n\n## Contributing\n\n\u5982\u679c\u4f60\u6709\u597d\u7684\u610f\u89c1\u6216\u5efa\u8bae\uff0c\u6b22\u8fce\u7ed9\u6211\u4eec\u63d0 Issues \u6216 Pull Requests\uff0c\u4e3a\u84dd\u9cb8\u5f00\u6e90\u793e\u533a\u8d21\u732e\u529b\u91cf\u3002\n\n[\u817e\u8baf\u5f00\u6e90\u6fc0\u52b1\u8ba1\u5212](https://opensource.tencent.com/contribution) \u9f13\u52b1\u5f00\u53d1\u8005\u7684\u53c2\u4e0e\u548c\u8d21\u732e\uff0c\u671f\u5f85\u4f60\u7684\u52a0\u5165\u3002\n\n## License\n\n\u57fa\u4e8e MIT \u534f\u8bae\uff0c \u8be6\u7ec6\u8bf7\u53c2\u8003[LICENSE](LICENSE)",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/TencentBlueKing/django-test-toolkit",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "django-test-toolkit",
            "package_url": "https://pypi.org/project/django-test-toolkit/",
            "platform": null,
            "project_url": "https://pypi.org/project/django-test-toolkit/",
            "project_urls": {
                "Homepage": "https://github.com/TencentBlueKing/django-test-toolkit"
            },
            "release_url": "https://pypi.org/project/django-test-toolkit/1.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Toolkit for test based on Django",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13671103,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6ea93eae2d4b6487741349e095169c02",
                    "sha256": "d60493d2107a0dc20646e9ee121f0a9ccc644651f7cd6add26bfb635a9d67563"
                },
                "downloads": -1,
                "filename": "django-test-toolkit-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "6ea93eae2d4b6487741349e095169c02",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15222,
                "upload_time": "2022-04-30T03:16:29",
                "upload_time_iso_8601": "2022-04-30T03:16:29.955311Z",
                "url": "https://files.pythonhosted.org/packages/20/af/6c90713155f662ab9d304d796938c40fc52235bed48933c773a05547d11c/django-test-toolkit-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}