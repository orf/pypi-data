{
    "0.0.1": {
        "info": {
            "author": "Viktor Yastrebov",
            "author_email": "Viktor Yastrebov <vyastrebov@vareger.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://zksync.io",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zksync2",
            "package_url": "https://pypi.org/project/zksync2/",
            "platform": null,
            "project_url": "https://pypi.org/project/zksync2/",
            "project_urls": {
                "Bug Tracker": "https://github.com/zksync-sdk/zksync2-python/issues",
                "Homepage": "https://github.com/zksync-sdk/zksync2-python"
            },
            "release_url": "https://pypi.org/project/zksync2/0.0.1/",
            "requires_dist": [
                "eip712-structs (==1.1.0)",
                "eth-account (==0.5.7)",
                "eth-typing (==2.3.0)",
                "eth-utils (==1.10.0)",
                "hexbytes (==0.2.2)",
                "rlp (==2.0.1)",
                "web3 (==5.30.0)",
                "mypy (>=0.8) ; extra == 'test'"
            ],
            "requires_python": ">=3.8",
            "summary": "zkSync2 python client sdk",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15913704,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d8692be35db717d9fe6abed7de814561",
                    "sha256": "f4285ff7feec0bb867ae56d2b83b6ea7e08e83dc29d7fb64d1855753d8a0fb67"
                },
                "downloads": -1,
                "filename": "zksync2-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d8692be35db717d9fe6abed7de814561",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 35101,
                "upload_time": "2022-10-18T14:52:12",
                "upload_time_iso_8601": "2022-10-18T14:52:12.421685Z",
                "url": "https://files.pythonhosted.org/packages/ff/3f/e059bc470770a38df92cd2e947629ac9533e41e7a2d380ca17d2cee8d05a/zksync2-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4687a20ea3b19ba7bc2aed631a342562",
                    "sha256": "5182cdab830841f6f5c2821d315df2379c1ac06fcd30e21ce0daf20c968ef8a0"
                },
                "downloads": -1,
                "filename": "zksync2-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "4687a20ea3b19ba7bc2aed631a342562",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 56504,
                "upload_time": "2022-10-18T14:52:14",
                "upload_time_iso_8601": "2022-10-18T14:52:14.581160Z",
                "url": "https://files.pythonhosted.org/packages/bb/84/15c23b321a8468ef0512a7e7d81c22a8ddad9c5087a83a3c76a8a9094d94/zksync2-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Viktor Yastrebov",
            "author_email": "Viktor Yastrebov <vyastrebov@vareger.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# zkSync2 client sdk\n\n## Basics\n\n- [How to install](#how-to-install)\n- [Deposit funds](#deposit-funds)\n- [Check balance](#check-balance)\n- [Transfer](#transfer)\n- [Transfer funds (ERC20 tokens)](#transfer-funds-erc20-tokens)\n- [Withdraw funds (Native coins)](#withdraw-funds-native-coins)\n- [Deploy contract with method create](#deploy-contract-with-method-create)\n- [Deploy contract with method create2](#deploy-contract-with-method-create2)\n\n\n\n### How to install\n\nCurrently, package is not deployed to public repository yet and can be only installed by\nlocal installation from .whl, download [here](https://github.com/zksync-sdk/zksync2-python)<br>\nTest environment file can be got from this repo too\n\n```\nconda env create -n zksync2_test\npip install zksync2-0.0.1-py3-none-any.whl\n```\n\n### Deposit funds\nThis is example how to deposit from Ethereum account to ZkSync account:\n\n```\nfrom web3 import Web3\nfrom web3.middleware import geth_poa_middleware\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom zksync2.manage_contracts.gas_provider import StaticGasProvider\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import Token\nfrom zksync2.provider.eth_provider import EthereumProvider\n\n\ndef deposit():\n    URL_TO_ETH_NETWORK = \"https://goerli.infura.io/v3/25be7ab42c414680a5f89297f8a11a4d\"\n    ZKSYNC_NETWORK_URL = \"https://zksync2-testnet.zksync.dev\"\n\n    eth_web3 = Web3(Web3.HTTPProvider(URL_TO_ETH_NETWORK))\n    eth_web3.middleware_onion.inject(geth_poa_middleware, layer=0)\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    gas_provider = StaticGasProvider(Web3.toWei(1, \"gwei\"), 555000)\n    eth_provider = EthereumProvider.build_ethereum_provider(zksync=zksync_web3,\n                                                            eth=eth_web3,\n                                                            account=account,\n                                                            gas_provider=gas_provider)\n    tx_receipt = eth_provider.deposit(Token.create_eth(),\n                                      eth_web3.toWei(\"YOUR_AMOUNT_OF_ETH\", \"ether\"),\n                                      account.address)\n    print(f\"tx status: {tx_receipt['status']}\")\n\n\nif __name__ == \"__main__\":\n    deposit()\n\n```\n\n\n### Check balance\n\nAfter depositing there could be needed to check the account balance under ZkSync network:\n\n```\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import EthBlockParams\n\n\ndef get_account_balance():\n    ZKSYNC_NETWORK_URL: str = 'https://'\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    zk_balance = zksync_web3.zksync.get_balance(account.address, EthBlockParams.LATEST.value)\n    print(f\"ZkSync balance: {zk_balance}\")\n\n\nif __name__ == \"__main__\":\n    get_account_balance()\n\n```\n\n### Transfer\n\nHere is example how to transfer funds in ZkSync network\n\n```\nfrom eth_typing import HexStr\nfrom web3 import Web3\nfrom zksync2.module.request_types import create_function_call_transaction\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import ZkBlockParams\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\n\nfrom zksync2.signer.eth_signer import PrivateKeyEthSigner\nfrom zksync2.transaction.transaction712 import Transaction712\n\n\ndef transfer_to_self():\n    ZKSYNC_NETWORK_URL: str = 'https://'\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    chain_id = zksync_web3.zksync.chain_id\n    signer = PrivateKeyEthSigner(account, chain_id)\n\n    nonce = zksync_web3.zksync.get_transaction_count(account.address, ZkBlockParams.COMMITTED.value)\n    tx = create_function_call_transaction(from_=account.address,\n                                          to=account.address,\n                                          ergs_price=0,\n                                          ergs_limit=0,\n                                          data=HexStr(\"0x\"))\n    estimate_gas = zksync_web3.zksync.eth_estimate_gas(tx)\n    gas_price = zksync_web3.zksync.gas_price\n\n    print(f\"Fee for transaction is: {estimate_gas * gas_price}\")\n\n    tx_712 = Transaction712(chain_id=chain_id,\n                            nonce=nonce,\n                            gas_limit=estimate_gas,\n                            to=tx[\"to\"],\n                            value=Web3.toWei(0.01, 'ether'),\n                            data=tx[\"data\"],\n                            maxPriorityFeePerGas=100000000,\n                            maxFeePerGas=gas_price,\n                            from_=account.address,\n                            meta=tx[\"eip712Meta\"])\n\n    singed_message = signer.sign_typed_data(tx_712.to_eip712_struct())\n    msg = tx_712.encode(singed_message)\n    tx_hash = zksync_web3.zksync.send_raw_transaction(msg)\n    tx_receipt = zksync_web3.zksync.wait_for_transaction_receipt(tx_hash, timeout=240, poll_latency=0.5)\n    print(f\"tx status: {tx_receipt['status']}\")\n\n\nif __name__ == \"__main__\":\n    transfer_to_self()\n\n```\n\n### Transfer funds (ERC20 tokens)\n\nExample of transferring ERC20 tokens\n\n```\nfrom zksync2.module.request_types import create_function_call_transaction\nfrom zksync2.manage_contracts.erc20_contract import ERC20FunctionEncoder\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import ZkBlockParams\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom zksync2.signer.eth_signer import PrivateKeyEthSigner\nfrom zksync2.transaction.transaction712 import Transaction712\n\n\ndef transfer_erc20_token():\n    ZKSYNC_NETWORK_URL: str = 'https://'\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    chain_id = zksync_web3.zksync.chain_id\n    signer = PrivateKeyEthSigner(account, chain_id)\n\n    nonce = zksync_web3.zksync.get_transaction_count(account.address, ZkBlockParams.COMMITTED.value)\n    tokens = zksync_web3.zksync.zks_get_confirmed_tokens(0, 100)\n    not_eth_tokens = [x for x in tokens if not x.is_eth()]\n    token_address = not_eth_tokens[0].l2_address\n\n    erc20_encoder = ERC20FunctionEncoder(zksync_web3)\n    transfer_params = [account.address, 0]\n    call_data = erc20_encoder.encode_method(\"transfer\", args=transfer_params)\n\n    tx = create_function_call_transaction(from_=account.address,\n                                          to=token_address,\n                                          ergs_price=0,\n                                          ergs_limit=0,\n                                          data=call_data)\n    estimate_gas = zksync_web3.zksync.eth_estimate_gas(tx)\n    gas_price = zksync_web3.zksync.gas_price\n\n    print(f\"Fee for transaction is: {estimate_gas * gas_price}\")\n\n    tx_712 = Transaction712(chain_id=chain_id,\n                            nonce=nonce,\n                            gas_limit=estimate_gas,\n                            to=tx[\"to\"],\n                            value=tx[\"value\"],\n                            data=tx[\"data\"],\n                            maxPriorityFeePerGas=100000000,\n                            maxFeePerGas=gas_price,\n                            from_=account.address,\n                            meta=tx[\"eip712Meta\"])\n    singed_message = signer.sign_typed_data(tx_712.to_eip712_struct())\n    msg = tx_712.encode(singed_message)\n    tx_hash = zksync_web3.zksync.send_raw_transaction(msg)\n    tx_receipt = zksync_web3.zksync.wait_for_transaction_receipt(tx_hash, timeout=240, poll_latency=0.5)\n    print(f\"tx status: {tx_receipt['status']}\")\n\n\nif __name__ == \"__main__\":\n    transfer_erc20_token()\n\n```\n\n### Withdraw funds (Native coins)\n\n```\nfrom decimal import Decimal\nfrom eth_typing import HexStr\nfrom zksync2.module.request_types import create_function_call_transaction\nfrom zksync2.manage_contracts.l2_bridge import L2BridgeEncoder\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import Token, ZkBlockParams, BridgeAddresses\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\n\nfrom zksync2.signer.eth_signer import PrivateKeyEthSigner\nfrom zksync2.transaction.transaction712 import Transaction712\n\n\ndef withdraw():\n    ZKSYNC_NETWORK_URL: str = 'https://'\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    chain_id = zksync_web3.zksync.chain_id\n    signer = PrivateKeyEthSigner(account, chain_id)\n    ETH_TOKEN = Token.create_eth()\n\n    nonce = zksync_web3.zksync.get_transaction_count(account.address, ZkBlockParams.COMMITTED.value)\n    bridges: BridgeAddresses = zksync_web3.zksync.zks_get_bridge_contracts()\n\n    l2_func_encoder = L2BridgeEncoder(zksync_web3)\n    call_data = l2_func_encoder.encode_function(fn_name=\"withdraw\", args=[\n        account.address,\n        ETH_TOKEN.l2_address,\n        ETH_TOKEN.to_int(Decimal(\"0.001\"))\n    ])\n\n    tx = create_function_call_transaction(from_=account.address,\n                                          to=bridges.l2_eth_default_bridge,\n                                          ergs_limit=0,\n                                          ergs_price=0,\n                                          data=HexStr(call_data))\n    estimate_gas = zksync_web3.zksync.eth_estimate_gas(tx)\n    gas_price = zksync_web3.zksync.gas_price\n\n    print(f\"Fee for transaction is: {estimate_gas * gas_price}\")\n\n    tx_712 = Transaction712(chain_id=chain_id,\n                            nonce=nonce,\n                            gas_limit=estimate_gas,\n                            to=tx[\"to\"],\n                            value=tx[\"value\"],\n                            data=tx[\"data\"],\n                            maxPriorityFeePerGas=100000000,\n                            maxFeePerGas=gas_price,\n                            from_=account.address,\n                            meta=tx[\"eip712Meta\"])\n\n    singed_message = signer.sign_typed_data(tx_712.to_eip712_struct())\n    msg = tx_712.encode(singed_message)\n    tx_hash = zksync_web3.zksync.send_raw_transaction(msg)\n    tx_receipt = zksync_web3.zksync.wait_for_transaction_receipt(tx_hash, timeout=240, poll_latency=0.5)\n    print(f\"tx status: {tx_receipt['status']}\")\n\n\nif __name__ == \"__main__\":\n    withdraw()\n\n```\n\n\n### Deploy contract with method create\n\nZkSync tools allows to build the contract into binary format. Then it can be deployed to the network<br>\nHere is the code of simple contract:\n\n```\npragma solidity ^0.8.0;\n\ncontract Counter {\n    uint256 value;\n\n    function increment(uint256 x) public {\n        value += x;\n    }\n\n    function get() public view returns (uint256) {\n        return value;\n    }\n}\n```\n\n\n> INFO: It must be compiled by ZkSync compiler only !\n\nAfter compilation there must be 2 files with:\n\n- contract binary representation\n- contract abi in json format\n\n\nContract ABI needs for calling its methods in standard web3 way<br>\n\n> INFO: in some cases you would need to get contract address before deploying it<br>\n> INFO: This case is also introduced in this example\n\n```\nimport json\nfrom pathlib import Path\nfrom eth_typing import HexStr\nfrom web3 import Web3\nfrom web3.types import TxParams\nfrom zksync2.module.request_types import create_contract_transaction\nfrom zksync2.manage_contracts.contract_deployer import ContractDeployer\nfrom zksync2.manage_contracts.nonce_holder import NonceHolder\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import ZkBlockParams, EthBlockParams\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom zksync2.signer.eth_signer import PrivateKeyEthSigner\nfrom zksync2.transaction.transaction712 import Transaction712\n\n\ndef read_binary(p: Path) -> bytes:\n    with p.open(mode='rb') as contact_file:\n        data = contact_file.read()\n        return data\n\n\ndef get_abi(p: Path):\n    with p.open(mode='r') as json_f:\n        return json.load(json_f)\n\n\nclass CounterContractEncoder:\n    def __init__(self, web3: Web3, bin_path: Path, abi_path: Path):\n        self.web3 = web3\n        self.counter_contract = self.web3.eth.contract(abi=get_abi(abi_path),\n                                                       bytecode=read_binary(bin_path))\n\n    def encode_method(self, fn_name, args: list) -> HexStr:\n        return self.counter_contract.encodeABI(fn_name, args)\n\n\ndef deploy_contract_create():\n    ZKSYNC_NETWORK_URL: str = 'https://'\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    chain_id = zksync_web3.zksync.chain_id\n    signer = PrivateKeyEthSigner(account, chain_id)\n\n    counter_contract_bin = read_binary(\"PATH_TO_BINARY_COMPILED_CONTRACT\")\n\n    nonce = zksync_web3.zksync.get_transaction_count(account.address, EthBlockParams.PENDING.value)\n    nonce_holder = NonceHolder(zksync_web3, account)\n    deployment_nonce = nonce_holder.get_deployment_nonce(account.address)\n    deployer = ContractDeployer(zksync_web3)\n    precomputed_address = deployer.compute_l2_create_address(account.address, deployment_nonce)\n\n    print(f\"precomputed address: {precomputed_address}\")\n\n    tx = create_contract_transaction(web3=zksync_web3,\n                                     from_=account.address,\n                                     ergs_limit=0,\n                                     ergs_price=0,\n                                     bytecode=counter_contract_bin)\n\n    estimate_gas = zksync_web3.zksync.eth_estimate_gas(tx)\n    gas_price = zksync_web3.zksync.gas_price\n    print(f\"Fee for transaction is: {estimate_gas * gas_price}\")\n\n    tx_712 = Transaction712(chain_id=chain_id,\n                            nonce=nonce,\n                            gas_limit=estimate_gas,\n                            to=tx[\"to\"],\n                            value=tx[\"value\"],\n                            data=tx[\"data\"],\n                            maxPriorityFeePerGas=100000000,\n                            maxFeePerGas=gas_price,\n                            from_=account.address,\n                            meta=tx[\"eip712Meta\"])\n\n    singed_message = signer.sign_typed_data(tx_712.to_eip712_struct())\n    msg = tx_712.encode(singed_message)\n    tx_hash = zksync_web3.zksync.send_raw_transaction(msg)\n    tx_receipt = zksync_web3.zksync.wait_for_transaction_receipt(tx_hash, timeout=240, poll_latency=0.5)\n    print(f\"tx status: {tx_receipt['status']}\")\n\n    contract_address = tx_receipt[\"contractAddress\"]\n    print(f\"contract address: {contract_address}\")\n\n    counter_contract_encoder = CounterContractEncoder(zksync_web3, \"PATH_TO_BINARY_COMPILED_CONTRACT\",\n                                                      \"PATH_TO_CONTRACT_ABI\")\n\n    call_data = counter_contract_encoder.encode_method(fn_name=\"get\", args=[])\n    eth_tx: TxParams = {\n        \"from\": account.address,\n        \"to\": contract_address,\n        \"data\": call_data\n    }\n    # Value is type dependent so might need to be converted to corresponded type under Python\n    eth_ret = zksync_web3.zksync.call(eth_tx, ZkBlockParams.COMMITTED.value)\n    converted_result = int.from_bytes(eth_ret, \"big\", signed=True)\n    print(f\"Call method for deployed contract, address: {contract_address}, value: {converted_result}\")\n\n\nif __name__ == \"__main__\":\n    deploy_contract_create()\n\n```\n\n### Deploy contract with method create2\n\n\n```\nimport os\nimport json\nfrom pathlib import Path\nfrom eth_typing import HexStr\nfrom web3 import Web3\nfrom web3.types import TxParams\nfrom zksync2.module.request_types import create2_contract_transaction\nfrom zksync2.manage_contracts.contract_deployer import ContractDeployer\nfrom zksync2.module.module_builder import ZkSyncBuilder\nfrom zksync2.core.types import ZkBlockParams, EthBlockParams\nfrom eth_account import Account\nfrom eth_account.signers.local import LocalAccount\nfrom zksync2.signer.eth_signer import PrivateKeyEthSigner\nfrom zksync2.transaction.transaction712 import Transaction712\n\n\ndef generate_random_salt() -> bytes:\n    return os.urandom(32)\n\n\ndef read_binary(p: Path) -> bytes:\n    with p.open(mode='rb') as contact_file:\n        data = contact_file.read()\n        return data\n\n\ndef get_abi(p: Path):\n    with p.open(mode='r') as json_f:\n        return json.load(json_f)\n\n\nclass CounterContractEncoder:\n    def __init__(self, web3: Web3, bin_path: Path, abi_path: Path):\n        self.web3 = web3\n        self.counter_contract = self.web3.eth.contract(abi=get_abi(abi_path),\n                                                       bytecode=read_binary(bin_path))\n\n    def encode_method(self, fn_name, args: list) -> HexStr:\n        return self.counter_contract.encodeABI(fn_name, args)\n\n\ndef deploy_contract_create2():\n    ZKSYNC_NETWORK_URL: str = 'https://'\n    account: LocalAccount = Account.from_key('YOUR_PRIVATE_KEY')\n    zksync_web3 = ZkSyncBuilder.build(ZKSYNC_NETWORK_URL)\n    chain_id = zksync_web3.zksync.chain_id\n    signer = PrivateKeyEthSigner(account, chain_id)\n\n    counter_contract_bin = read_binary(\"PATH_TO_BINARY_COMPILED_CONTRACT\")\n\n    nonce = zksync_web3.zksync.get_transaction_count(account.address, EthBlockParams.PENDING.value)\n    deployer = ContractDeployer(zksync_web3)\n    random_salt = generate_random_salt()\n    precomputed_address = deployer.compute_l2_create2_address(sender=account.address,\n                                                              bytecode=counter_contract_bin,\n                                                              constructor=b'',\n                                                              salt=random_salt)\n    print(f\"precomputed address: {precomputed_address}\")\n\n    tx = create2_contract_transaction(web3=zksync_web3,\n                                      from_=account.address,\n                                      ergs_price=0,\n                                      ergs_limit=0,\n                                      bytecode=counter_contract_bin,\n                                      salt=random_salt)\n    estimate_gas = zksync_web3.zksync.eth_estimate_gas(tx)\n    gas_price = zksync_web3.zksync.gas_price\n    print(f\"Fee for transaction is: {estimate_gas * gas_price}\")\n\n    tx_712 = Transaction712(chain_id=chain_id,\n                            nonce=nonce,\n                            gas_limit=estimate_gas,\n                            to=tx[\"to\"],\n                            value=tx[\"value\"],\n                            data=tx[\"data\"],\n                            maxPriorityFeePerGas=100000000,\n                            maxFeePerGas=gas_price,\n                            from_=account.address,\n                            meta=tx[\"eip712Meta\"])\n    singed_message = signer.sign_typed_data(tx_712.to_eip712_struct())\n    msg = tx_712.encode(singed_message)\n    tx_hash = zksync_web3.zksync.send_raw_transaction(msg)\n    tx_receipt = zksync_web3.zksync.wait_for_transaction_receipt(tx_hash, timeout=240, poll_latency=0.5)\n    print(f\"tx status: {tx_receipt['status']}\")\n\n    contract_address = tx_receipt[\"contractAddress\"]\n    print(f\"contract address: {contract_address}\")\n\n    counter_contract_encoder = CounterContractEncoder(zksync_web3, \"CONTRACT_BIN_PATH\", \"CONTRACT_ABI_PATH\")\n    call_data = counter_contract_encoder.encode_method(fn_name=\"get\", args=[])\n    eth_tx: TxParams = {\n        \"from\": account.address,\n        \"to\": contract_address,\n        \"data\": call_data\n    }\n    eth_ret = zksync_web3.zksync.call(eth_tx, ZkBlockParams.COMMITTED.value)\n    result = int.from_bytes(eth_ret, \"big\", signed=True)\n    print(f\"Call method for deployed contract, address: {contract_address}, value: {result}\")\n\n\nif __name__ == \"__main__\":\n    deploy_contract_create2()\n\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://zksync.io",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zksync2",
            "package_url": "https://pypi.org/project/zksync2/",
            "platform": null,
            "project_url": "https://pypi.org/project/zksync2/",
            "project_urls": {
                "Bug Tracker": "https://github.com/zksync-sdk/zksync2-python/issues",
                "Homepage": "https://github.com/zksync-sdk/zksync2-python"
            },
            "release_url": "https://pypi.org/project/zksync2/0.0.2/",
            "requires_dist": [
                "eip712-structs (==1.1.0)",
                "eth-account (==0.5.7)",
                "eth-typing (==2.3.0)",
                "eth-utils (==1.10.0)",
                "hexbytes (==0.2.2)",
                "rlp (==2.0.1)",
                "web3 (==5.30.0)",
                "mypy (>=0.8) ; extra == 'test'"
            ],
            "requires_python": ">=3.8",
            "summary": "zkSync2 python client sdk",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15913704,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "717ca8df83186b3066fa59bef246bec2",
                    "sha256": "7a1547661456cad55f46e2094706f77dd3c4e543a60d22f38622d963df37b581"
                },
                "downloads": -1,
                "filename": "zksync2-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "717ca8df83186b3066fa59bef246bec2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 35067,
                "upload_time": "2022-11-28T13:00:27",
                "upload_time_iso_8601": "2022-11-28T13:00:27.284721Z",
                "url": "https://files.pythonhosted.org/packages/3c/18/213dfc60f2c0c90935c10d3ac1d180d14629b5dc6f03b5b89288c95e239b/zksync2-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5cca000b2dc1a7140bca4bf887113536",
                    "sha256": "4f4d7298a72fcca68efc678bcebd53a5de4f88f3cd12f0980b9d42f70377082e"
                },
                "downloads": -1,
                "filename": "zksync2-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "5cca000b2dc1a7140bca4bf887113536",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 57785,
                "upload_time": "2022-11-28T13:00:28",
                "upload_time_iso_8601": "2022-11-28T13:00:28.648100Z",
                "url": "https://files.pythonhosted.org/packages/2b/66/2c0e19350f46278a8aafd1f8d993eb7b3f6f5bc9edf270848400b9e0ac2d/zksync2-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}