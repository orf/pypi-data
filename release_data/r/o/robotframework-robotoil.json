{
    "0.0.1": {
        "info": {
            "author": "Christopher Jones",
            "author_email": "christopher.jones1138@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Worakow1138/RobotOil",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "robotframework-RobotOil",
            "package_url": "https://pypi.org/project/robotframework-RobotOil/",
            "platform": "",
            "project_url": "https://pypi.org/project/robotframework-RobotOil/",
            "project_urls": {
                "Homepage": "https://github.com/Worakow1138/RobotOil"
            },
            "release_url": "https://pypi.org/project/robotframework-RobotOil/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Quality of life upgrades for common-use Keywords in the Robot Framework and SeleniumLibrary packages.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11588232,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "417a693074c37571c241f6cc967e46dc",
                    "sha256": "c63941be3d36fb7dcf03ccfaea39bcd2c2c0674c00ac64a855bde2c1808c4d85"
                },
                "downloads": -1,
                "filename": "robotframework_RobotOil-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "417a693074c37571c241f6cc967e46dc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 14699,
                "upload_time": "2021-03-22T20:05:35",
                "upload_time_iso_8601": "2021-03-22T20:05:35.173672Z",
                "url": "https://files.pythonhosted.org/packages/bb/a8/eaf1504a5d02030379448f9d992b33b0bf367525e7b6aa2842f428e34c43/robotframework_RobotOil-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b7655bf65ece654165dc69c25490ac26",
                    "sha256": "e0fac3a699761728eb8a9d3292477320aac06201fff1bc3268306fea7f2f42b1"
                },
                "downloads": -1,
                "filename": "robotframework-RobotOil-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "b7655bf65ece654165dc69c25490ac26",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18147,
                "upload_time": "2021-03-22T20:05:36",
                "upload_time_iso_8601": "2021-03-22T20:05:36.361141Z",
                "url": "https://files.pythonhosted.org/packages/96/db/260a79f89d944999ff3a5b359f19caa99d4e4dafc2e676cccf0032139e8e/robotframework-RobotOil-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Christopher Jones",
            "author_email": "christopher.jones1138@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Worakow1138/RobotOil",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "robotframework-RobotOil",
            "package_url": "https://pypi.org/project/robotframework-RobotOil/",
            "platform": "",
            "project_url": "https://pypi.org/project/robotframework-RobotOil/",
            "project_urls": {
                "Homepage": "https://github.com/Worakow1138/RobotOil"
            },
            "release_url": "https://pypi.org/project/robotframework-RobotOil/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Quality of life upgrades for common-use Keywords in the Robot Framework and SeleniumLibrary packages.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11588232,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "062a2a24562b30b0ee1c2499bf63b064",
                    "sha256": "c2141cc3efdeca6763896ad198de7407997429fb9c23176d696172a6140f6af9"
                },
                "downloads": -1,
                "filename": "robotframework_RobotOil-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "062a2a24562b30b0ee1c2499bf63b064",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 14808,
                "upload_time": "2021-03-31T18:28:15",
                "upload_time_iso_8601": "2021-03-31T18:28:15.379497Z",
                "url": "https://files.pythonhosted.org/packages/69/b7/279144abe111ca3aa9efbfddbbb672e135e9995bcdc593a5a8e26eadfcc6/robotframework_RobotOil-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "011f580a61e8041fa83cff67ff0f1c10",
                    "sha256": "3256fa031221d281b8a8991b07a3f8f6031f36116ad4eb2480407219502bb6cb"
                },
                "downloads": -1,
                "filename": "robotframework-RobotOil-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "011f580a61e8041fa83cff67ff0f1c10",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18236,
                "upload_time": "2021-03-31T18:28:16",
                "upload_time_iso_8601": "2021-03-31T18:28:16.646507Z",
                "url": "https://files.pythonhosted.org/packages/1d/00/3b3b830b310b0fc7dc7ab1cf49de0cc90bcfa60dd227746695cf0bf47309/robotframework-RobotOil-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "Christopher Jones",
            "author_email": "christopher.jones1138@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# RobotOil\n\n- [RobotOil](#robotoil)\n  - [Introduction](#introduction)\n  - [Dependencies](#dependencies)\n  - [Installation](#installation)\n  - [Importing RobotOil](#importing-robotoil)\n    - [Importing into Robot](#importing-into-robot)\n    - [Importing into Python](#importing-into-python)\n  - [Features and Examples](#features-and-examples)\n    - [Persistent Browser](#persistent-browser)\n      - [Persistent Browser Example](#persistent-browser-example)\n    - [Smart Keywords](#smart-keywords)\n      - [Smart Click Example](#smart-click-example)\n      - [Text Parsing using JQuery or JavaScript](#text-parsing-using-jquery-or-javascript)\n      - [Smart Keywords from Python](#smart-keywords-from-python)\n    - [Loading Elements](#loading-elements)\n  - [Conclusion](#conclusion)\n\n## Introduction\nRobotOil is a library of quality-of-life features for automated test case development with [Robot Framework](https://robotframework.org/) and [SeleniumLibrary](https://github.com/robotframework/SeleniumLibrary). \n\nEnhancements include persistent browser sessions to assist with debugging your scripts and \"Smart\" versions of common-use SeleniumLibrary Keywords to make navigating your web application even easier. To top it all off, everything within RobotOil may be executed from either a Robot Test Suite OR the execution of a Python file.\n\nGrease the gears of your next automation project with [RobotOil](https://github.com/Worakow1138/RobotOil)!\n\n## Dependencies\nRequires RobotFramework, SeleniumLibrary, and [Selenium Tools for Microsoft Edge](https://pypi.org/project/msedge-selenium-tools/). \nUse these pip commands to stay up to date with the latest versions.\n\n    pip install robotframework -U\n    pip install robotframework-seleniumlibrary -U\n    pip install msedge-selenium-tools -U\n\n## Installation\nRecommend using pip to install RobotOil.\n\n    pip install robotframework-RobotOil -U\n\nIf using [GitHub](https://github.com/Worakow1138/RobotOil), copy the RobotOil folder from the src folder to anywhere in your PATH. \nIdeally, to the (your Python library)/Lib/site-packages folder.\n\n## Importing RobotOil\nRobotOil and all Keywords within may be executed from either a Robot Test Suite, or a Python module.\n\n### Importing into Robot\nSimply call RobotOil as Library within your Test Suite or Resource file of choice.\n\nEnsure this is done *after* first calling the SeleniumLibrary Library somewhere prior to calling RobotOil.\n\n    *** Settings ***\n    Library    RobotOil\n\n### Importing into Python\nImport the RobotOil module and class into a Python file.\nAll RobotOil Keywords/methods may be called from this class.\n\n    from RobotOil import RobotOil\n\n    oil_class = RobotOil()\n\n## Features and Examples\n\n### Persistent Browser\nIf you've worked with Selenium, you've likely noticed how every automated test needs to begin with the creation of a new browser session.\nDebugging automated test cases with traditional browser sessions can become incredibly time-consuming when needing to, say, correct step 48 of a 50 step test case but having to execute steps 1-47 everytime you try a new fix.\n\nWith inspiration from this post by [Tarun Lalwani](https://tarunlalwani.com/post/reusing-existing-browser-session-selenium/), RobotOil's Persistent Browser Sessions ensure you'll never have to start back at the beginning again!\n\nPersistent Browser Sessions not only remain open after a Robot or Python test execution has finished, but will also be reusable for additonal sessions as long as the browser remains open and no new sessions are created.\n\n#### Persistent Browser Example\nCreate a file named `persistent_test.robot` anywhere on your machine and enter the following code:\n\n    *** Settings ***\n    Library           SeleniumLibrary\n    Library           RobotOil\n\n    *** Test Cases ***\n    Begin Session\n        Open Persistent Browser    https://phptravels.com/demo    chrome\n\nIn a console, run the command `robot -t \"Begin Session\" PATH_TO_TEST_SUITE\\persistent_test.robot`.\nA chrome browser session is started and the test site is navigated to.\nLeave this browser *open* before beginning the next step.\n\nIn the same `persistent_test.robot` Test Suite, add this Test Case:\n\n    Continue Session\n        Use Current Persistent Browser\n        Maximize Browser Window\n\nRun this Test Case via `robot -t \"Continue Session\" PATH_TO_TEST_SUITE\\persistent_test.robot`.\nIf all goes well, you should see the same browser session you opened earlier become maximized.\n\nYou may continue to send commands to Persistent Browser Sessions via `Use Current Persistent Browser` until either closing the browser or \ncreating a new Persistent Browser.\n\nWhen it's actually time to close up the browser and any webdrivers that may be hanging around, simply call the `Cleanup Persistent Browser` Keyword.\n\n### Smart Keywords\nThe [SeleniumLibrary](https://github.com/robotframework/SeleniumLibrary) package features a wide variety of powerful Keywords for interacting with web elements.\nKeywords like Click Element, Input Text, and so forth probably make up the bulk of most web automation projects using [Robot Framework](https://robotframework.org/).\n\nHowever, these Keywords are often limited when dealing with the unpredictability of page load times and elements appearing asynchronously on a given web page.\nThese limitations cause unexpected failures and sometimes require complex or time-consuming workarounds. \n\nSmart Keywords offer enhanced versions of these SeleniumLibrary Keywords that account for this unpredictability and provide additonal quality-of-life improvements by:\n1. Automatically waiting for targeted elements to be visible before attempting to interact\n2. Waiting for \"loading elements\" to first become non-visible (more on loading elements later)\n3. Allowing for the \"time to wait\" to be established per Keyword call\n4. Using JQuery or JavaScript to parse text on the page for easier element lookup, resulting in faster test case writing and more human-readable test cases\n5. Being accessible from a Python method as well as a Robot Test Case\n\n#### Smart Click Example\nIn the same `persistent_test.robot` Test Suite from earlier, copy the following code:\n\n    Click Test\n        Open Persistent Browser    https://phptravels.com/demo    chrome\n        Maximize Browser Window\n        Click Element    css:body > header > div > nav > div:nth-child(3) > span\n        Click Element    css:body > header > div > nav > div:nth-child(3) > div > a:nth-child(1)\n        Click Element    css:#Main > section.is-highlighted > div > div > div.col-md-6.wow.fadeIn.animated > div > div.col-md-4 > a\n\nRun using `robot -t \"Click Test\" PATH_TO_TEST_SUITE\\persistent_test.robot`.\n\nThis test ends up failing because the last use of Click Element is targeting the green \"Demo\" button on the Main Features page.\nHowever, this button has not become completely accessible when the Main Features page finishes loading, causing the Click Element Keyword to fail the Test Case.\n\n![not_yet_loaded](https://github.com/Worakow1138/RobotOil/blob/main/images/not_yet_loaded.png?raw=true)\n\nA typical workaround to this issue might include having to write in a `Wait For Page to Contain Element` or worse, a call to the dreaded `Sleep` Keyword. Static waits like Sleep and the variability of internet connections and server responses do NOT mix well.\n\nInstead, change the last Click Element to `Smart Click` so the last line looks like this:\n\n    Smart Click    css:#Main > section.is-highlighted > div > div > div.col-md-6.wow.fadeIn.animated > div > div.col-md-4 > a\n\nAnd run the test again. The test passes due to Smart Click understanding that it has to wait until the Demo button is visible before attempting the interaction.\n\nIf you want to ensure that the Demo button, or any element you want to interact with using a Smart Keyword, becomes visible within a known time limit, you may simply give the `timeout` argument a specific parameter like so:\n\n    Smart Click    css:#Main > section.is-highlighted > div > div > div.col-md-6.wow.fadeIn.animated > div > div.col-md-4 > a    timeout=120\n\nThis will make Smart Click wait for **up to** 2 minutes for the Demo button to become visible before attempting to click the button.\n\nWith this enhancement, you'll never have to explicitly call another Sleep or Wait For... Keyword in your test cases again!\n\n#### Text Parsing using JQuery or JavaScript\nMost Smart Keywords also include the ability to locate elements based on their element tag and their inner text.\nIn our same `Click Test` example from before, let's first change all our Click Elements to Smart Clicks\n\n    Click Test\n        Use Current Persistent Browser\n        Smart Click    css:body > header > div > nav > div:nth-child(3) > span\n        Smart Click    css:body > header > div > nav > div:nth-child(3) > div > a:nth-child(1)\n        Smart Click    css:#Main > section.is-highlighted > div > div > div.col-md-6.wow.fadeIn.animated > div > div.col-md-4 > a\n\nThe first Smart Click targets the `Features` link in the site banner\n\n![Features](https://github.com/Worakow1138/RobotOil/blob/main/images/top_bar_features.png?raw=true)\n\nWe can see that the tag for this element is `span` and the innerText is simply `Features`\n\nWith this knowledge, Smart Click can locate this element and click it:\n\n    Smart Click    span    Features\n\nIn fact, the rest of the Smart Clicks used in this Test Case can be replaced in the same way, resulting in:\n\n    Click Test\n        Use Current Persistent Browser\n        Smart Click    span    Features\n        Smart Click    a    Main Features\n        Smart Click    div.col-md-4 > a    Demo\n\nNote the use of `div.col-md-4 > a` in the last Smart Click. Partial css selectors are also completely viable paramters for Smart Keywords.\n\nWith tag and innerText parsing, you are no longer bound to strictly using css selectors or xpaths when targeting elements, resulting in cleaner, more readable, faster to write Test Cases!\n\n#### Smart Keywords from Python\nOne of RobotFramework's greatest advantages is the ease of creating custom Python libraries and methods and being able to execute these directly from a Robot Test Case.\nThis is especially useful when needing to write out a more complex set of actions from Python where features like nested for loops, while loops, etc, are available.\nTo further facilitate this capability, Smart Keywords are also accessible from your extended Python libraries and methods.\n\nCreate a file named `click_test.py` anywhere on your machine, copy the following example code, and execute the file:\n\n    from RobotOil import RobotOil\n\n    oil_can = RobotOil()\n\n    oil_can.use_current_persistent_browser()\n    oil_can.smart_click('span', 'Features')\n    oil_can.smart_click('a', 'Main Features')\n    oil_can.smart_click('div.col-md-4 > a', 'Demo')\n\nAs long as you have left the same browser session open from the previous examples, you should see the same actions performed as in the `Click Test` Test Case.\n\nTo move this functionality back into your established Robot Test Cases, simply wrap this code in a method:\n\n    from RobotOil import RobotOil\n\n    oil_can = RobotOil()\n\n    def python_clicking():\n        oil_can.use_current_persistent_browser()\n        oil_can.smart_click('span', 'Features', timeout=4)\n        oil_can.smart_click('a', 'Main Features')\n        oil_can.smart_click('div.col-md-4 > a', 'Demo')\n\nAnd import the file into your `persistent_browser.robot` Test Suite:\n\n    *** Settings ***\n    Library           SeleniumLibrary\n    Library           RobotOil\n    Library           PATH_TO_CLICK_TEXT/click_text.py\n\nFrom there, simply call `Python Clicking` from a Test Case of your choice:\n\n    *** Test Cases ***\n    Python Example\n        Python Clicking\n\nYou may now leverage the already powerful SeleniumLibrary Keywords, with Smart Keyword enhancements, DIRECTLY from Python, and back into your Robot Test Cases!\n\n### Loading Elements\nOften times when testing web applications, asynchronous \"loading elements\" are implemented by web developers to inform their users that some part of the page is loading.\nCommon examples include the jQuery Ajax \"spinner\"\n\n![ajax](https://github.com/Worakow1138/RobotOil/blob/main/images/ajax.jpg?raw=true)\n\nWhile useful to web developers and site users, these \"loading elements\" can often obstruct the view of the elements that an automated test case is trying to interact with.\nWriting around these loading elements for each expected interaction can be an enormous chore that Smart Keywords handle for us.\n\nIn a Robot Test Suite, copy the following example code:\n\n    Ajax Test\n        Open Persistent Browser    https://www.jqueryscript.net/demo/Simple-Flexible-Loading-Overlay-Plugin-With-jQuery-loadingoverlay-js/    chrome\n        Smart Click    *    Extras \"Progress\" Test\n        Smart Confirm Element    Visible    div    Element 2\n\nThis test clicks the `Extras \"Progress\" Test` button and then attempts to verify that a `div` with the text `Element 2` is visible.\nThe test, however, fails due to the Ajax spinner being in the way of the target element.\n\n![Axaj_Still_Visible](https://github.com/Worakow1138/RobotOil/blob/main/images/ajax_still_visible.png?raw=true)\n\nRather than design our Test Case around this necessary evil of modern web development, create the following list of loading elements in your Test Suite:\n\n    **** Variables ***\n    @{loading_elements}    class:loadingoverlay\n\nThen, wherever your call to `RobotOil` exists in your test framework, add this list as an argument to the class:\n\n    Library    RobotOil    ${loading_elements}\n\nUpon running the same test again, you should find that `Smart Confirm Element` will now appropriately wait for the class:loadingoverlay elements to no longer be visible before attempting to confirm that the `Element 2` element is visible.\n\nRobotOil may take multiple loading elements and will check to make sure each one is not visible before attempting to execute the main function of each Smart Keyword.\n\nLoading elements can just as easily be given to Smart Keywords when called from Python as well, simply include the list of loading elements in the class instance for RobotOil:\n\n    from RobotOil import RobotOil\n\n    oil_can = RobotOil(['class:loadingoverlay'])\n\n## Conclusion\nI hope you enjoy the additional capabilities and ease-of-use that RobotOil brings to automated web testing with RobotFramework.\n\nPlease don't hesitate to reach out with questions or suggestions on [GitHub](https://github.com/Worakow1138/RobotOil)\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Worakow1138/RobotOil",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "robotframework-RobotOil",
            "package_url": "https://pypi.org/project/robotframework-RobotOil/",
            "platform": "",
            "project_url": "https://pypi.org/project/robotframework-RobotOil/",
            "project_urls": {
                "Homepage": "https://github.com/Worakow1138/RobotOil"
            },
            "release_url": "https://pypi.org/project/robotframework-RobotOil/0.0.3/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Quality of life upgrades for common-use Keywords in the Robot Framework and SeleniumLibrary packages.",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11588232,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "453170ee7426b6a162982d1bd708cd0b",
                    "sha256": "c2b280f3bc9168e532d069bde76b43ebc301429a451653d6a4a4fe19212a924e"
                },
                "downloads": -1,
                "filename": "robotframework_RobotOil-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "453170ee7426b6a162982d1bd708cd0b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 14896,
                "upload_time": "2021-09-29T23:12:14",
                "upload_time_iso_8601": "2021-09-29T23:12:14.064751Z",
                "url": "https://files.pythonhosted.org/packages/42/fb/018584843d845477d45de5e1971275ee6f2a3c62b77f4db7f3f50921f5a3/robotframework_RobotOil-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0f5a01d72967715ee94771439a336523",
                    "sha256": "3db17629be5406ee573810b5b61f1dff664d48a9f7ff565457a518908cbcd79a"
                },
                "downloads": -1,
                "filename": "robotframework-RobotOil-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "0f5a01d72967715ee94771439a336523",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18315,
                "upload_time": "2021-09-29T23:12:15",
                "upload_time_iso_8601": "2021-09-29T23:12:15.157861Z",
                "url": "https://files.pythonhosted.org/packages/2d/c0/b0934f7d88f29f2ea4c133312c3976100ed21c22d54b848143fd628244a7/robotframework-RobotOil-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}