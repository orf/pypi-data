{
    "0.0.7": {
        "info": {
            "author": "Johannes Bauer",
            "author_email": "joe@johannes-bauer.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# toyecc\n[![Build Status](https://app.travis-ci.com/johndoe31415/toyecc.svg?branch=master)](https://app.travis-ci.com/johndoe31415/toyecc)\n\ntoyecc is a playground for Elliptic Curve Cryptography in F<sub>P</sub>. It is\nwritten in pure Python and aims to explain ECC in easy terms. It is neither\nwritten to be performant, nor side-channel resistant nor in any way suited for\nproductive use at all. Please use it for its intended purpose and for it only.\n\nThe rationale behind toyecc is to show a clear and mathematically clean\npresentation of the underlying mathematical problems. Most code that is written\narund ECC -- especially code that revolves around Ed25519 and/or Curve25519 is\nheavily optimized and in many cases hard to understand. toyecc tries to present\nthe problems with a high level of abstraction in order to serve as yet another\n(different) reference to compare implementations against and in order to aid\nunderstanding of heavily optimized code. All curve arithmetic is therefore\nperformed in affine space; performance in affine space is lowest, but having\nvalues that directly can be checked against the curve equation makes\nunderstanding everything extremely easy.\n\n\n## Tutorial\nThere's a ECC tutorial that I've written which accompanies the pure code. It\ncan be found at [http://johannes-bauer.com/compsci/ecc/](http://johannes-bauer.com/compsci/ecc/)\n\n\n## Features\n  * ECDSA demonstration\n  * ECIES demonstration\n  * ECDH demonstration\n  * Elgamal demonstration\n  * Dual_EC_DBRG backdoor demonstration\n  * Demonstration how a private key can be recovered from two ECDSA signatures\n    which reused the same nonce (ECDSA nonce exploit)\n  * Support for short-formed Weierstrass curves, Montgomery curves and twisted\n    Edwards curves\n  * Conversion of domain parameters of twisted Edwards to Montgomery form and\n    back, conversion of points between Montgomery representation and its\n    birationally equivalent twisted Edwards counterpart\n  * Ed25519 and Curve25519 support and support to convert keys between each\n    other (Curve25519 and Ed25519 are birationally equivalent curves)\n  * Many testcases to try out your own implementation\n  * Example of OpenBSD's signify application (generates and verifies Ed25519\n    signatures, but doesn't support key encryption)\n  * X-coordinate-only scalar multiplication on Short Weierstrass curves\n  * Clean, well-documented Python3 code\n\n## License\nGNU GPL-3.",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/johndoe31415/toyecc/archive/v0.0.7.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/johndoe31415/toyecc",
            "keywords": "elliptic,curve,cryptography,ed25519,ecdsa,ecdh,montgomery,edwards,weierstrass",
            "license": "gpl-3.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "toyecc",
            "package_url": "https://pypi.org/project/toyecc/",
            "platform": null,
            "project_url": "https://pypi.org/project/toyecc/",
            "project_urls": {
                "Download": "https://github.com/johndoe31415/toyecc/archive/v0.0.7.tar.gz",
                "Homepage": "https://github.com/johndoe31415/toyecc"
            },
            "release_url": "https://pypi.org/project/toyecc/0.0.7/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Elliptic Curve Cryptography playground/toolkit written in pure Python",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13244328,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "85b0d343e4a9345f11be3a4c6e55d9c7",
                    "sha256": "6a80ca44cc706c649dddae84784623798fbc05edf8212b90e05a2dbdca68af20"
                },
                "downloads": -1,
                "filename": "toyecc-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "85b0d343e4a9345f11be3a4c6e55d9c7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 902272,
                "upload_time": "2022-03-21T23:49:39",
                "upload_time_iso_8601": "2022-03-21T23:49:39.293802Z",
                "url": "https://files.pythonhosted.org/packages/25/85/bb3a6bbab4541e1c701c3c9e94920bd74d56a62c25d749e4837f2e10eb6f/toyecc-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}