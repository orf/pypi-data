{
    "0.0.1": {
        "info": {
            "author": "yaphott",
            "author_email": "yaphott@proton.me",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Software Development :: Libraries",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Text Processing",
                "Topic :: Utilities"
            ],
            "description": "# Regex-Toolkit\n\n[Regex-Toolkit](https://github.com/yaphott/regex-toolkit) - Tools for creating re and re2 expressions.\n\n> Build complex expressions.\n\n## Requirements:\n\n**Regex-Toolkit** requires Python 3.9 or higher, is platform independent, and requires no outside dependencies.\n\n## Installing\n\nMost stable version from [**PyPi**](https://pypi.org/project/regex-toolkit/):\n\n```bash\npip install regex-toolkit\n```\n\nDevelopment version from [**GitHub**](https://github.com/yaphott/regex-toolkit):\n\n```bash\ngit clone git+https://github.com/yaphott/regex-toolkit.git\ncd regex-toolkit\npip install .\n```\n\n## Usage\n\nImport packages:\n\n```python\nfrom regex_toolkit import RegexToolkit as rtk\n```\n\n```python\nimport re\n# and/or\nimport re2\n```\n\n## Example checking for the existence of a word\n\nBlacklist using `re`:\n\n```python\nwith open(\"blacklist.txt\", mode=\"r\", encoding=\"utf-8\") as rf:\n    words = rf.read().strip(\"\\n\").split(\"\\n\")\n\nblacklist_exp = rtk.strings_as_exp(words)\nblacklist_regex = re.compile(blacklist_exp)\n\ntext = \"Some example text\"\nhas_blacklisted_word = bool(blacklist_regex.search(text))\n```\n\nBlacklist using `re2`:\n\n```python\nwith open(\"blacklist.txt\", mode=\"r\", encoding=\"utf-8\") as rf:\n    words = rf.read().strip(\"\\n\").split(\"\\n\")\n\nblacklist_exp = rtk.strings_as_exp2(words)\nblacklist_regex = re2.compile(blacklist_exp)\n\ntext = \"Some example text\"\nhas_blacklisted_word = bool(blacklist_regex.search(text))\n```\n\n---\n\n## Library\n\n### RegexToolkit.iter_sort_by_len\n\nFunction to iterate strings sorted by length.\n\n| Function Signature                                |\n| :------------------------------------------------ |\n| iter_sort_by_len(package_name, \\*, reverse=False) |\n\n| Parameters                 |                                                 |\n| :------------------------- | :---------------------------------------------- |\n| **texts**_(Iterable[str])_ | Strings to sort.                                |\n| **reverse**_(int)_         | Sort in descending order (longest to shortest). |\n\nExample reversed (descending longest to shortest):\n\n```python\nwords = [\"longest\", \"short\", \"longer\"]\nfor word in rtk.iter_sort_by_len(words):\n    print(word)\n```\n\nOutput:\n\n```text\nlongest\nlonger\nshort\n```\n\nExample disabling reverse (ascending shortest to longest):\n\n```python\nwords = [\"longest\", \"short\", \"longer\"]\nfor word in rtk.iter_sort_by_len(words, reverse=False):\n    print(word)\n```\n\nOutput:\n\n```text\nshort\nlonger\nlongest\n```\n\n### RegexToolkit.sort_by_len\n\nFunction to get a tuple of strings sorted by length.\n\n| Function Signature                          |\n| :------------------------------------------ |\n| sort_by_len(package_name, \\*, reverse=True) |\n\n| Parameters                 |                                                 |\n| :------------------------- | :---------------------------------------------- |\n| **texts**_(Iterable[str])_ | Strings to sort.                                |\n| **reverse**_(int)_         | Sort in descending order (longest to shortest). |\n\nExample reversed (descending longest to shortest):\n\n```python\nrtk.sort_by_len([\"longest\", \"short\", \"longer\"])\n```\n\nResult:\n\n```python\n('longest', 'longer', 'short')\n```\n\nExample disable reverse (ascending shortest to longest):\n\n```python\nrtk.sort_by_len([\"longest\", \"short\", \"longer\"], reverse=False)\n```\n\nResult:\n\n```python\n('short', 'longer', 'longest')\n```\n\n### RegexToolkit.ord_to_codepoint\n\nFunction to get a character codepoint from a character ordinal.\n\n| Function Signature        |\n| :------------------------ |\n| ord_to_codepoint(ordinal) |\n\n| Parameters         |                    |\n| :----------------- | :----------------- |\n| **ordinal**_(int)_ | Character ordinal. |\n\nExample:\n\n```python\n# ordinal: 127344\nordinal = ord(\"\ud83c\udd70\")\nrtk.ord_to_codepoint(ordinal)\n```\n\nResult:\n\n```python\n'0001f170'\n```\n\n### RegexToolkit.codepoint_to_ord\n\nFunction to get a character ordinal from a character codepoint.\n\n| Function Signature          |\n| :-------------------------- |\n| codepoint_to_ord(codepoint) |\n\n| Parameters           |                      |\n| :------------------- | :------------------- |\n| **codepoint**_(str)_ | Character codepoint. |\n\nExample:\n\n```python\n# char: \"\ud83c\udd70\"\ncodepoint = \"0001f170\"\nrtk.codepoint_to_ord(codepoint)\n```\n\nResult:\n\n```python\n127344\n```\n\n### RegexToolkit.char_to_codepoint\n\nFunction to get a character codepoint from a character.\n\n| Function Signature      |\n| :---------------------- |\n| char_to_codepoint(char) |\n\n| Parameters      |            |\n| :-------------- | :--------- |\n| **char**_(str)_ | Character. |\n\nExample:\n\n```python\nrtk.char_to_codepoint(\"\ud83c\udd70\")\n```\n\nResult:\n\n```python\n'0001f170'\n```\n\n### RegexToolkit.char_as_exp\n\nFunction to create a `re` expression that exactly matches a character.\n\n| Function Signature |\n| :----------------- |\n| char_as_exp(char)  |\n\n| Parameters      |                     |\n| :-------------- | :------------------ |\n| **char**_(str)_ | Character to match. |\n\nExample:\n\n```python\nrtk.char_as_exp(\"\ud83c\udd70\")\n```\n\nResult:\n\n```python\nr'\\\ud83c\udd70'\n```\n\n### RegexToolkit.char_as_exp2\n\nFunction to create a `re2` expression that exactly matches a character.\n\n| Function Signature |\n| :----------------- |\n| char_as_exp2(char) |\n\n| Parameters      |                     |\n| :-------------- | :------------------ |\n| **char**_(str)_ | Character to match. |\n\nExample:\n\n```python\nrtk.char_as_exp2(\"\ud83c\udd70\")\n```\n\nResult:\n\n```python\nr'\\x{0001f170}'\n```\n\n### RegexToolkit.string_as_exp\n\nFunction to create a `re` expression that exactly matches a string.\n\n| Function Signature  |\n| :------------------ |\n| string_as_exp(text) |\n\n| Parameters      |                  |\n| :-------------- | :--------------- |\n| **text**_(str)_ | String to match. |\n\nExample:\n\n```python\nrtk.string_as_exp(\"\ud83c\udd70\ud83c\udd71\ud83c\udd72\")\n```\n\nResult:\n\n```python\nr'\\\ud83c\udd70\\\ud83c\udd71\\\ud83c\udd72'\n```\n\n### RegexToolkit.string_as_exp2\n\nFunction to create a `re2` expression that exactly matches a string.\n\n| Function Signature   |\n| :------------------- |\n| string_as_exp2(text) |\n\n| Parameters      |                  |\n| :-------------- | :--------------- |\n| **text**_(str)_ | String to match. |\n\nExample:\n\n```python\nrtk.string_as_exp2(\"\ud83c\udd70\ud83c\udd71\ud83c\udd72\")\n```\n\nResult:\n\n```python\nr'\\x{0001f170}\\x{0001f171}\\x{0001f172}'\n```\n\n### RegexToolkit.strings_as_exp\n\nFunction to create a `re` expression that exactly matches any one string.\n\n| Function Signature    |\n| :-------------------- |\n| strings_as_exp(texts) |\n\n| Parameters                 |                   |\n| :------------------------- | :---------------- |\n| **texts**_(Iterable[str])_ | Strings to match. |\n\nExample:\n\n```python\nrtk.strings_as_exp([\n  \"bad.word\",\n  \"another-bad-word\",\n])\n```\n\nResult:\n\n```python\nr'another\\-bad\\-word|bad\\.word'\n```\n\n### RegexToolkit.strings_as_exp2\n\nFunction to create a `re2` expression that exactly matches any one string.\n\n| Function Signature     |\n| :--------------------- |\n| strings_as_exp2(texts) |\n\n| Parameters                 |                   |\n| :------------------------- | :---------------- |\n| **texts**_(Iterable[str])_ | Strings to match. |\n\nExample:\n\n```python\nrtk.strings_as_exp2([\n  \"bad.word\",\n  \"another-bad-word\",\n])\n```\n\nResult:\n\n```python\nr'another\\-bad\\-word|bad\\.word'\n```\n\n### RegexToolkit.iter_char_range\n\nFunction to iterate all characters within a range of codepoints (inclusive).\n\n| Function                                           |\n| :------------------------------------------------- |\n| iter_char_range(first_codepoint, second_codepoint) |\n\n| Parameters                 |                             |\n| :------------------------- | :-------------------------- |\n| **first_codepoint**_(int)_ | Starting (first) codepoint. |\n| **last_codepoint**_(int)_  | Ending (last) codepoint.    |\n\nExample:\n\n```python\nfor char in rtk.iter_char_range(\"a\", \"c\"):\n    print(char)\n```\n\nOutput:\n\n```text\na\nb\nc\n```\n\n### RegexToolkit.char_range\n\nFunction to get a tuple of all characters within a range of codepoints (inclusive).\n\n| Function                                      |\n| :-------------------------------------------- |\n| char_range(first_codepoint, second_codepoint) |\n\n| Parameters                 |                             |\n| :------------------------- | :-------------------------- |\n| **first_codepoint**_(int)_ | Starting (first) codepoint. |\n| **last_codepoint**_(int)_  | Ending (last) codepoint.    |\n\nExample:\n\n```python\nrtk.char_range(\"a\", \"c\")\n```\n\nResult:\n\n```python\n('a', 'b', 'c')\n```\n\n### RegexToolkit.mask_span\n\nSlice and mask a string using a span.\n\n| Function Signature               |\n| :------------------------------- |\n| mask_span(text, span, mask=None) |\n\n| Parameters                |                                                           |\n| :------------------------ | :-------------------------------------------------------- |\n| **text**_(str)_           | Text to slice.                                            |\n| **span**_(Sequence[int])_ | Domain of index positions (x1, x2) to mask from the text. |\n| **mask**_(str \\| None)_   | Mask to insert when slicing.                              |\n\n```python\nrtk.mask_span(\n    \"This is an example\",\n    (8, 8),\n    mask=\"not \",\n)\n```\n\n```python\n'This is not an example'\n```\n\n### RegexToolkit.mask_spans\n\nSlice and mask a string using multiple spans.\n\n| Function Signature                  |\n| :---------------------------------- |\n| mask_spans(text, spans, masks=None) |\n\n| Parameters                           |                                                            |\n| :----------------------------------- | :--------------------------------------------------------- |\n| **text**_(str)_                      | Text to slice.                                             |\n| **spans**_(Iterable[Sequence[int]])_ | Domains of index positions (x1, x2) to mask from the text. |\n| **masks**_(Iterable[str] \\| None)_   | Masks to insert when slicing.                              |\n\nExample:\n\n```python\nrtk.mask_spans(\n    \"This is an example\",\n    [\n      (9, 10),\n      (11, 18),\n    ],\n    masks=[\n      \" good\",\n      \"sample\",\n    ],\n)\n```\n\nResult:\n\n```python\n'This is a good sample'\n```\n\n### RegexToolkit.to_utf8\n\nForce a string to UTF-8 encoding.\n\n| Function Signature |\n| :----------------- |\n| to_utf8(text)      |\n\n| Parameters      |                 |\n| :-------------- | :-------------- |\n| **text**_(str)_ | Text to encode. |\n\nExample:\n\n```python\n\n```\n\nResult:\n\n```python\n\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/yaphott/regex-toolkit",
            "keywords": "regex-toolkit regex toolkit",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "regex-toolkit",
            "package_url": "https://pypi.org/project/regex-toolkit/",
            "platform": null,
            "project_url": "https://pypi.org/project/regex-toolkit/",
            "project_urls": {
                "Homepage": "https://github.com/yaphott/regex-toolkit"
            },
            "release_url": "https://pypi.org/project/regex-toolkit/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.9, <4",
            "summary": "Tools for building re and re2 expressions",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15930555,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6054a552f5353a5a4d28a3700093e38c",
                    "sha256": "a814b4028ec4c0c5ce45a02c330539623cb363a9f4397dedb41f7edca5d7632d"
                },
                "downloads": -1,
                "filename": "regex_toolkit-0.0.1-py3.10.egg",
                "has_sig": false,
                "md5_digest": "6054a552f5353a5a4d28a3700093e38c",
                "packagetype": "bdist_egg",
                "python_version": "0.0.1",
                "requires_python": ">=3.9, <4",
                "size": 25249,
                "upload_time": "2022-11-29T16:59:49",
                "upload_time_iso_8601": "2022-11-29T16:59:49.241873Z",
                "url": "https://files.pythonhosted.org/packages/da/78/c5bef600c414f60cc004c39360317a29480bb27e0a1de3559d099f6d802f/regex_toolkit-0.0.1-py3.10.egg",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0a051293c093bec0e53342dd73380086",
                    "sha256": "dd06682cc66612b285bb7f0fed3670183966d0a98560055a38dd9bf6a89fbc40"
                },
                "downloads": -1,
                "filename": "regex_toolkit-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0a051293c093bec0e53342dd73380086",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9, <4",
                "size": 18019,
                "upload_time": "2022-11-29T16:59:45",
                "upload_time_iso_8601": "2022-11-29T16:59:45.770874Z",
                "url": "https://files.pythonhosted.org/packages/61/9d/3efb393aa261ff0d848b31951346e2946d8059fccbb423f02d1c5ccf81c8/regex_toolkit-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "054df09a581c87d3bd6032a045c0f2ed",
                    "sha256": "f8eb6867f9b39150451667b37f1cbbb3f50343a5ff2ec1de2a2450edb553e1db"
                },
                "downloads": -1,
                "filename": "regex-toolkit-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "054df09a581c87d3bd6032a045c0f2ed",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9, <4",
                "size": 13369,
                "upload_time": "2022-11-29T16:59:47",
                "upload_time_iso_8601": "2022-11-29T16:59:47.986668Z",
                "url": "https://files.pythonhosted.org/packages/aa/34/49ab5c9fdc274ba8ba923393090b8078fb2e853b01a030448e8f9c7c94fc/regex-toolkit-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}