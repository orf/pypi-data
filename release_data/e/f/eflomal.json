{
    "0.1": {
        "info": {
            "author": "Robert \u00d6stling",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# pip installable eflomal\n\nThis is a pip installable `eflomal` package for the python scripts `align.py`, `makepriors.py` and `mergefiles.py`. Installation:\n\n   `pip install eflomal`\n\n# eflomal\nEfficient Low-Memory Aligner\n\nThis is a word alignment tool based on\n[efmaral](https://github.com/robertostling/efmaral), with the following main\ndifferences:\n * More compact data structures are used, so memory requirements are much\n   lower (by orders of magnitude).\n * The estimation of alignment variable marginals is done one sentence at a\n   time, which also saves a lot of memory at no detectable cost in accuracy.\n * **New**: User-specified Dirichlet priors, which can be generated by the\n   `makepriors.py` script to allow models to be saved. See below under\n   *Input data format* and *Generating priors*.\n\nTechnical details relevant to both `efmaral` and `eflomal` can be found in\nthe following article:\n * [\u00d6stling and Tiedemann (2016)](https://ufal.mff.cuni.cz/pbml/106/art-ostling-tiedemann.pdf) ([BibTeX](http://www.robos.org/sections/research/robert_bib.html#Ostling2016efmaral)).\n\n## Installing\n\nTo compile and install the C binary and the Python bindings:\n\n    make\n    sudo make install\n    python3 setup.py install\n\nChange the `INSTALLDIR` parameter in the install step if you want to install somewhere\nother than the default `/usr/local/bin` (e.g. `make install -e INSTALLDIR=~/bin`).\nNote that the `align.py` script now uses the `eflomal` executable in the same directory\nas `align.py`, rather than in `$PATH`.\n\n\n## Using\n\nThere are three main ways of using `eflomal`:\n\n 1. Directly call the `eflomal` binary. Note that this requires some\n    preprocessing.\n 2. Use the [align.py](./align.py) command-line interface, which is partly\n    compatible with that of `efmaral`. Run `python3 align.py --help` for\n    instructions.\n 3. Use the Cython module to call the `eflomal` binary, this takes care of\n    the preprocessing and file conversions necessary. See the docstrings\n    in [eflomal.pyx](./python/eflomal/eflomal.pyx) for documentation.\n\nIn addition, there are convenience scripts for aligning and symmetrizing (with\nthe `atools` program from `fast_align`) as well as evaluating with data from\nthe WPT shared task datasets. These work the same way as in `efmaral`,\nplease see its\n[README](https://github.com/robertostling/efmaral/blob/master/README.md) for\ndetails.\n\n## Input data format\n\nWhen used with the `-s` and `-t` options for separate source/target files, the\n`align.py` interface expects one sentence per line with space-separated\ntokens, similar to most word alignment software.\n\nThe `-i` option assumes a `fast_text` style joint source/target file of the\nformat\n```\nsource sentence ||| target sentence\nanother source sentence ||| another target sentence\n...\n```\n\nThe `--priors` option expects a file generated by `makepriors.py` (see below).\nThis file contains user-specified lexical, HMM and/or fertility distribution\npriors. Since the algorithm is asymmetric, HMM and fertility priors can be\nstored for both the forward and reverse directions. `makepriors.py` handles\nthis automatically, see examples below.\n\nNote that the default value of the Dirichlet priors (defined in `eflomal.c` as\n`LEX_ALPHA`, `JUMP_ALPHA` and `FERT_ALPHA`) will be *added* to whatever is\nspecified in the priors file. This means that integer counts for whatever word\nforms you have data on are fine in the priors file.\n\nIt s possible to use the special `<NULL>` token in the priors file, in case\nyou want to encourage certain word forms to remain unaligned.\nCurrently the `makepriors.py` script does not generate these, and this feature\nhas not been tested yet.\n\n## Generating priors\n\nIf you have a large file that you want to use as \"training data\", `en-sv`, and\na small file  that you later want to align quickly, `en-sv.small`, start by\naligning the large file as usual, e.g.:\n\n    ./align.py -i en-sv --model 3 -f en-sv.fwd -r en-sv.rev\n\nNow you can generate priors based on this large aligned file, stored in\n`en-sv.priors`:\n\n    ./makepriors.py -i en-sv -f en-sv.fwd -r en-sv.rev --priors en-sv.priors\n\nAlternatively, you can symmetrize `en-sv.fwd` and `en-sv.rev` into `en-sv.sym`\nand pass the same file to both `-f` and `-r`:\n\n    atools -c grow-diag-final-and -i en-sv.fwd -j en-sv.rev >en-sv.sym\n    ./makepriors.py -i en-sv -f en-sv.sym -r en-sv.sym --priors en-sv.priors\n\nNow, if you have another file to align, `en-sv.small`, simply use e.g.:\n\n    ./align.py -i en-sv.small --priors en-sv.priors --model 3 \\\n        -f en-sv.small.fwd -r en-sv.small.rev\n\nThis will be much faster than merging `en-sv` and `en-sv.small` and aligning\nthem jointly, while nearly as accurate (assuming `en-sv.small` is much smaller\nthan `en-sv`).\n\n## Output data format\n\nThe alignment output contains the same number of lines as the input files,\nwhere each line contains pairs of indexes. For instance, if the source input\ncontains the following:\n\n    a black cat\n\nand the target input is the following:\n\n    kuro neko\n\nthe correct output would be:\n\n    1-0 2-1\n\nThat is, `1-0` indicates token 1 of the source (black) is aligned to token 0\nof the target (kuro), and `2-1` that token 2 of the source (cat) is aligned to\ntoken 1 of the target (neko). `NULL` alignments are not present in the output.\n\nNote that the forward and reverse alignments both use source-target order, so\nthe output can be fed directly to `atools` (see `scripts/align_symmetrize.sh`\nfor an example).\n\nIn case you made a mistake with the direction, you can fix it afterwards with\n`scripts/reverse_moses.py`.\n\n## Performance\n\nThis is a comparison between eflomal,\n[efmaral](https://github.com/robertostling/efmaral) and fast_align.\n\nThe difference between efmaral and eflomal is in part due to different default\nparameters, in particular the number of iterations and the number of\nindependent samplers.\n\nNote that all timing figures below include alignments in both directions\n(run in parallel) and symmetrization.\n\n### eflomal\n\n| Languages | Sentences | AER | CPU time (s) | Real time (s) |\n| --------- | ---------:| ---:| ------------:| -------------:|\n| English-French | 1,130,551 | 0.081 | 1,232 | 337 |\n| English-Inkutitut | 340,601 | 0.203 | 161 | 44 |\n| Romanian-English | 48,681 | 0.298 | 159 | 33 |\n| English-Hindi | 3,530 | 0.467 | 31 | 6 |\n\n### efmaral\n\n| Languages | Sentences | AER | CPU time (s) | Real time (s) |\n| --------- | ---------:| ---:| ------------:| -------------:|\n| English-Swedish | 1,862,426 | 0.133 | 1,719 | 620 |\n| English-French | 1,130,551 | 0.085 | 763 | 279 |\n| English-Inkutitut | 340,601 | 0.235 | 122 | 46 |\n| Romanian-English | 48,681 | 0.287 | 161 | 46 |\n| English-Hindi | 3,530 | 0.483 | 98 | 10 |\n\n### fast_align\n\n| Languages | Sentences | AER | CPU time (s) | Real time (s) |\n| --------- | ---------:| ---:| ------------:| -------------:|\n| English-Swedish | 1,862,426 | 0.205 | 11,090 | 672 |\n| English-French | 1,130,551 | 0.153 | 3,840 | 241 |\n| English-Inuktitut | 340,601 | 0.287 | 477 | 47 |\n| Romanian-English | 48,681 | 0.325 | 208 | 17 |\n| English-Hindi | 3,530 | 0.672 | 24 | 2 |\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/robertostling/eflomal",
            "keywords": "",
            "license": "GNU GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "eflomal",
            "package_url": "https://pypi.org/project/eflomal/",
            "platform": null,
            "project_url": "https://pypi.org/project/eflomal/",
            "project_urls": {
                "Homepage": "https://github.com/robertostling/eflomal"
            },
            "release_url": "https://pypi.org/project/eflomal/0.1/",
            "requires_dist": [
                "numpy",
                "Cython"
            ],
            "requires_python": "",
            "summary": "pip installable eflomal",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15737425,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4c60396da0f2df62a9adff815f82b852",
                    "sha256": "192115fa23f29790e17d8857a6fb9dd34d98e065357bac0588e3d459dad9f6fc"
                },
                "downloads": -1,
                "filename": "eflomal-0.1-cp311-cp311-macosx_10_9_universal2.whl",
                "has_sig": false,
                "md5_digest": "4c60396da0f2df62a9adff815f82b852",
                "packagetype": "bdist_wheel",
                "python_version": "cp311",
                "requires_python": null,
                "size": 97379,
                "upload_time": "2022-11-11T16:28:05",
                "upload_time_iso_8601": "2022-11-11T16:28:05.617657Z",
                "url": "https://files.pythonhosted.org/packages/2f/dd/c8bdbfc2d096fdc11f0563e2681d5ef0d7a37c48fee1733f2ce266c50cbd/eflomal-0.1-cp311-cp311-macosx_10_9_universal2.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bf2bf518a3f6caa129d0239411eb1b03",
                    "sha256": "886899e3cc67d0620f2f9a63a508069453fd6c8a69dd4a0b5befd3e55f4012dc"
                },
                "downloads": -1,
                "filename": "eflomal-0.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "bf2bf518a3f6caa129d0239411eb1b03",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 273248,
                "upload_time": "2022-11-11T16:23:28",
                "upload_time_iso_8601": "2022-11-11T16:23:28.029746Z",
                "url": "https://files.pythonhosted.org/packages/fd/de/35fa169c628589ab9d6b2197216a99cf853a75482bfeabcf7e732cee22dc/eflomal-0.1-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3a5058fe3a54e5444d76cd996b04a355",
                    "sha256": "529a5fbbca7539a2534900447717d70cf6cfdeec4528645eb028bb5ae878adcd"
                },
                "downloads": -1,
                "filename": "eflomal-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3a5058fe3a54e5444d76cd996b04a355",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 177374,
                "upload_time": "2022-11-11T16:23:29",
                "upload_time_iso_8601": "2022-11-11T16:23:29.567662Z",
                "url": "https://files.pythonhosted.org/packages/de/4d/0400c3177d170da781962acdcc46c87133300576125c2bd9aa0d1b761a7e/eflomal-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}