{
    "0.0.1": {
        "info": {
            "author": "Alexey Zaytsev",
            "author_email": "alexey.zaytsev@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "\u2764\ufe0f Lovely JAX\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n## Read full docs [here](https://xl0.github.io/lovely-tensors/)\n\n## Install\n\n``` sh\npip install lovely-jax\n```\n\n## How to use\n\nHow often do you find yourself debugging PyTorch code? You dump a tensor\nto the cell output, and see this:\n\n``` python\nnumbers\n```\n\n    DeviceArray([[[-0.35405433, -0.33692956, -0.4054286 , ..., -0.55955136,\n                   -0.4739276 ,  2.2489083 ],\n                  [-0.4054286 , -0.42255333, -0.49105233, ..., -0.91917115,\n                   -0.8506721 ,  2.1632845 ],\n                  [-0.4739276 , -0.4739276 , -0.5424266 , ..., -1.0390445 ,\n                   -1.0390445 ,  2.1975338 ],\n                  ...,\n                  [-0.9020464 , -0.8335474 , -0.9362959 , ..., -1.4671633 ,\n                   -1.2959158 ,  2.2317834 ],\n                  [-0.8506721 , -0.78217316, -0.9362959 , ..., -1.6041614 ,\n                   -1.5014129 ,  2.1804092 ],\n                  [-0.8335474 , -0.81642264, -0.9705454 , ..., -1.6555357 ,\n                   -1.5527872 ,  2.11191   ]],\n\n                 [[-0.19747896, -0.19747896, -0.30252096, ..., -0.47759098,\n                   -0.37254897,  2.4110641 ],\n                  [-0.24999997, -0.23249297, -0.33753496, ..., -0.705182  ,\n                   -0.670168  ,  2.3585434 ],\n                  [-0.30252096, -0.28501397, -0.39005598, ..., -0.740196  ,\n                   -0.810224  ,  2.3760502 ],\n                  ...,\n                  [-0.42507   , -0.23249297, -0.37254897, ..., -1.0903361 ,\n                   -1.0203081 ,  2.4285715 ],\n                  [-0.39005598, -0.23249297, -0.42507   , ..., -1.230392  ,\n                   -1.230392  ,  2.4110641 ],\n                  [-0.40756297, -0.28501397, -0.47759098, ..., -1.2829131 ,\n                   -1.2829131 ,  2.3410363 ]],\n\n                 [[-0.67154676, -0.9852723 , -0.88069713, ..., -0.9678431 ,\n                   -0.68897593,  2.3959913 ],\n                  [-0.7238344 , -1.0724182 , -0.9678431 , ..., -1.2467101 ,\n                   -1.0201306 ,  2.3262744 ],\n                  [-0.82840955, -1.1247058 , -1.0201306 , ..., -1.2641394 ,\n                   -1.1595641 ,  2.3785625 ],\n                  ...,\n                  [-1.229281  , -1.4732897 , -1.3861438 , ..., -1.5081482 ,\n                   -1.2641394 ,  2.5179958 ],\n                  [-1.1944225 , -1.4558606 , -1.4210021 , ..., -1.6475817 ,\n                   -1.4732897 ,  2.4308496 ],\n                  [-1.229281  , -1.5255773 , -1.5081482 , ..., -1.68244   ,\n                   -1.5255773 ,  2.3611329 ]]], dtype=float32)\n\nWas it really useful for you, as a human, to see all these numbers?\n\nWhat is the shape? The size?  \nWhat are the statistics?  \nAre any of the values `nan` or `inf`?  \nIs it an image of a man holding a tench?\n\n``` python\nimport lovely_jax as lj\n```\n\n``` python\nlj.monkey_patch()\n```\n\n## `__repr__`\n\n``` python\nnumbers # torch.Tensor\n```\n\n    DeviceArray[3, 196, 196] n=115248 x\u2208[-2.118, 2.640] \u03bc=-0.388 \u03c3=1.073\n\nBetter, huh?\n\n``` python\nnumbers[1,:6,1] # Still shows values if there are not too many.\n```\n\n    DeviceArray[6] x\u2208[-0.443, -0.197] \u03bc=-0.311 \u03c3=0.083 [-0.197, -0.232, -0.285, -0.373, -0.443, -0.338]\n\n``` python\nspicy = numbers.flatten()[:12].clone()\n\nspicy = (spicy  .at[0].mul(10000)\n                .at[1].divide(10000)\n                .at[2].set(float('inf'))\n                .at[3].set(float('-inf'))\n                .at[4].set(float('nan'))\n                .reshape((2,6)))\nspicy # Spicy stuff\n```\n\n    DeviceArray[2, 6] n=12 x\u2208[-3.541e+03, -3.369e-05] \u03bc=-393.776 \u03c3=1.113e+03 +inf! -inf! nan!\n\n``` python\njnp.zeros((10, 10)) # A zero tensor - make it obvious\n```\n\n    DeviceArray[10, 10] n=100 all_zeros\n\n``` python\nspicy.v # Verbose\n```\n\n    DeviceArray[2, 6] n=12 x\u2208[-3.541e+03, -3.369e-05] \u03bc=-393.776 \u03c3=1.113e+03 +inf! -inf! nan!\n    DeviceArray([[-3.5405432e+03, -3.3692959e-05,            inf,\n                            -inf,            nan, -4.0542859e-01],\n                 [-4.2255333e-01, -4.9105233e-01, -5.0817710e-01,\n                  -5.5955136e-01, -5.4242659e-01, -5.0817710e-01]],            dtype=float32)\n\n``` python\nspicy.p # The plain old way\n```\n\n    DeviceArray([[-3.5405432e+03, -3.3692959e-05,            inf,\n                            -inf,            nan, -4.0542859e-01],\n                 [-4.2255333e-01, -4.9105233e-01, -5.0817710e-01,\n                  -5.5955136e-01, -5.4242659e-01, -5.0817710e-01]],            dtype=float32)\n\n## Going `.deeper`\n\n``` python\nnumbers.deeper\n```\n\n    DeviceArray[3, 196, 196] n=115248 x\u2208[-2.118, 2.640] \u03bc=-0.388 \u03c3=1.073\n      DeviceArray[196, 196] n=38416 x\u2208[-2.118, 2.249] \u03bc=-0.324 \u03c3=1.036\n      DeviceArray[196, 196] n=38416 x\u2208[-1.966, 2.429] \u03bc=-0.274 \u03c3=0.973\n      DeviceArray[196, 196] n=38416 x\u2208[-1.804, 2.640] \u03bc=-0.567 \u03c3=1.178\n\n``` python\n# You can go deeper if you need to\nnumbers[:,:3,:5].deeper(2)\n```\n\n    DeviceArray[3, 3, 5] n=45 x\u2208[-1.316, -0.197] \u03bc=-0.593 \u03c3=0.302\n      DeviceArray[3, 5] n=15 x\u2208[-0.765, -0.337] \u03bc=-0.492 \u03c3=0.119\n        DeviceArray[5] x\u2208[-0.440, -0.337] \u03bc=-0.385 \u03c3=0.037 [-0.354, -0.337, -0.405, -0.440, -0.388]\n        DeviceArray[5] x\u2208[-0.662, -0.405] \u03bc=-0.512 \u03c3=0.097 [-0.405, -0.423, -0.491, -0.577, -0.662]\n        DeviceArray[5] x\u2208[-0.765, -0.474] \u03bc=-0.580 \u03c3=0.112 [-0.474, -0.474, -0.542, -0.645, -0.765]\n      DeviceArray[3, 5] n=15 x\u2208[-0.513, -0.197] \u03bc=-0.321 \u03c3=0.096\n        DeviceArray[5] x\u2208[-0.303, -0.197] \u03bc=-0.243 \u03c3=0.049 [-0.197, -0.197, -0.303, -0.303, -0.215]\n        DeviceArray[5] x\u2208[-0.408, -0.232] \u03bc=-0.327 \u03c3=0.075 [-0.250, -0.232, -0.338, -0.408, -0.408]\n        DeviceArray[5] x\u2208[-0.513, -0.285] \u03bc=-0.394 \u03c3=0.091 [-0.303, -0.285, -0.390, -0.478, -0.513]\n      DeviceArray[3, 5] n=15 x\u2208[-1.316, -0.672] \u03bc=-0.964 \u03c3=0.170\n        DeviceArray[5] x\u2208[-0.985, -0.672] \u03bc=-0.846 \u03c3=0.110 [-0.672, -0.985, -0.881, -0.776, -0.916]\n        DeviceArray[5] x\u2208[-1.212, -0.724] \u03bc=-0.989 \u03c3=0.160 [-0.724, -1.072, -0.968, -0.968, -1.212]\n        DeviceArray[5] x\u2208[-1.316, -0.828] \u03bc=-1.058 \u03c3=0.160 [-0.828, -1.125, -1.020, -1.003, -1.316]\n\n## Without `.monkey_patch`\n\n``` python\nlj.lovely(spicy)\n```\n\n    DeviceArray[2, 6] n=12 x\u2208[-3.541e+03, -3.369e-05] \u03bc=-393.776 \u03c3=1.113e+03 +inf! -inf! nan!\n\n``` python\nlj.lovely(spicy, verbose=True)\n```\n\n    DeviceArray[2, 6] n=12 x\u2208[-3.541e+03, -3.369e-05] \u03bc=-393.776 \u03c3=1.113e+03 +inf! -inf! nan!\n    DeviceArray([[-3.5405432e+03, -3.3692959e-05,            inf,\n                            -inf,            nan, -4.0542859e-01],\n                 [-4.2255333e-01, -4.9105233e-01, -5.0817710e-01,\n                  -5.5955136e-01, -5.4242659e-01, -5.0817710e-01]],            dtype=float32)\n\n``` python\nlj.lovely(numbers, depth=1)\n```\n\n    DeviceArray[3, 196, 196] n=115248 x\u2208[-2.118, 2.640] \u03bc=-0.388 \u03c3=1.073\n      DeviceArray[196, 196] n=38416 x\u2208[-2.118, 2.249] \u03bc=-0.324 \u03c3=1.036\n      DeviceArray[196, 196] n=38416 x\u2208[-1.966, 2.429] \u03bc=-0.274 \u03c3=0.973\n      DeviceArray[196, 196] n=38416 x\u2208[-1.804, 2.640] \u03bc=-0.567 \u03c3=1.178\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/xl0/lovely-jax",
            "keywords": "nbdev jupyter jax",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "lovely-jax",
            "package_url": "https://pypi.org/project/lovely-jax/",
            "platform": null,
            "project_url": "https://pypi.org/project/lovely-jax/",
            "project_urls": {
                "Homepage": "https://github.com/xl0/lovely-jax"
            },
            "release_url": "https://pypi.org/project/lovely-jax/0.0.1/",
            "requires_dist": [
                "fastcore",
                "jax"
            ],
            "requires_python": ">=3.7",
            "summary": "\u2764\ufe0f Lovely JAX",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15695491,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c932ad8d0dcdef8064d592638a4f7ab9",
                    "sha256": "dfffdfd87a167165d3aa7c0d9300fc864ae1f2c81a1bc02ebcbf57af698cb058"
                },
                "downloads": -1,
                "filename": "lovely_jax-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c932ad8d0dcdef8064d592638a4f7ab9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 8492,
                "upload_time": "2022-11-08T08:26:21",
                "upload_time_iso_8601": "2022-11-08T08:26:21.219117Z",
                "url": "https://files.pythonhosted.org/packages/43/9d/66a3e177c41248bc68cdc009ed968d5ce047423b5b44d026d7aa98793465/lovely_jax-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1881e8cdffc2bea970233b4919216485",
                    "sha256": "605ab1c0b15bb97615d64444bda2f8f076b03157831f84c50499a916b6c9469b"
                },
                "downloads": -1,
                "filename": "lovely-jax-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "1881e8cdffc2bea970233b4919216485",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 149730,
                "upload_time": "2022-11-08T08:26:24",
                "upload_time_iso_8601": "2022-11-08T08:26:24.642879Z",
                "url": "https://files.pythonhosted.org/packages/69/8a/e4e5c44f21ab639e3da8a4cd40f380c2ed2dbe77689a6bd2b6b282805485/lovely-jax-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}