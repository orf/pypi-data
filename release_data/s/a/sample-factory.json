{
    "1.0.117": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.0.117/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.0.9)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.0.117",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2c8672651dab8e7686efff2ae4095c01",
                    "sha256": "3b3d2374967fc1896b06904bd05c79860b7d02fe938a7086c2d68b6cd060d1c2"
                },
                "downloads": -1,
                "filename": "sample_factory-1.0.117-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2c8672651dab8e7686efff2ae4095c01",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 212520,
                "upload_time": "2021-04-09T22:22:30",
                "upload_time_iso_8601": "2021-04-09T22:22:30.516679Z",
                "url": "https://files.pythonhosted.org/packages/54/30/35bc3b32fdd92d3d79dd26735bedc19ea45feb851465f006a2dd13015c7e/sample_factory-1.0.117-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0612f3a2e398791965b7cb7b5a9d9482",
                    "sha256": "053070cffaf430a7865ab3769795a43efa85f3e482c83db0f387536a13c5c783"
                },
                "downloads": -1,
                "filename": "sample-factory-1.0.117.tar.gz",
                "has_sig": false,
                "md5_digest": "0612f3a2e398791965b7cb7b5a9d9482",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 166393,
                "upload_time": "2021-04-09T22:22:32",
                "upload_time_iso_8601": "2021-04-09T22:22:32.282808Z",
                "url": "https://files.pythonhosted.org/packages/92/cf/1f31bf035d9ce3a51e83b71a4e53593a0843015e669efe4252f4a8e9d760/sample-factory-1.0.117.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.5": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.0.5/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.0.9)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "23c1196280f78ac6ef96eecc178c89a0",
                    "sha256": "c0a784af7384861482ba9218cae04cc5515f29a33cf715b200d3adb2f76b713d"
                },
                "downloads": -1,
                "filename": "sample_factory-1.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "23c1196280f78ac6ef96eecc178c89a0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 211414,
                "upload_time": "2021-04-02T06:11:03",
                "upload_time_iso_8601": "2021-04-02T06:11:03.207372Z",
                "url": "https://files.pythonhosted.org/packages/c9/a7/24ea9425b5b9fb6c919ddfabfbf6f6ccaa3d157a37f31b14bf5dbebb1789/sample_factory-1.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "936f137ad113d66ef5039845dab16286",
                    "sha256": "c426a70c1966c14b5715385400996e80c65fdc6dea94128f74b016439808f169"
                },
                "downloads": -1,
                "filename": "sample-factory-1.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "936f137ad113d66ef5039845dab16286",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 165101,
                "upload_time": "2021-04-02T06:11:05",
                "upload_time_iso_8601": "2021-04-02T06:11:05.536868Z",
                "url": "https://files.pythonhosted.org/packages/00/a6/9e9d977d34f0ffce5e1c1d2c090c6795e687ec2e4ac701e934f85d78eb28/sample-factory-1.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.6": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.0.6/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.0.9)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "38b1db5c505698b5d15e55d9139ef30d",
                    "sha256": "926ce394b013fdd59c9f968227be27e0bd158391b01bb61e46ffedc933b0fec1"
                },
                "downloads": -1,
                "filename": "sample_factory-1.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "38b1db5c505698b5d15e55d9139ef30d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 212500,
                "upload_time": "2021-04-09T22:19:28",
                "upload_time_iso_8601": "2021-04-09T22:19:28.030709Z",
                "url": "https://files.pythonhosted.org/packages/c3/39/6dec51b2f3b12dbc152a4bc44e485efdd7cc4ba76b00284cf68a4d4b8b02/sample_factory-1.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2d7b0b378377faa08d845827d0f3fed9",
                    "sha256": "0fd082313cb80cedc82023fdb5793d1456bba25e5bd393f84a655d26c9217f3c"
                },
                "downloads": -1,
                "filename": "sample-factory-1.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "2d7b0b378377faa08d845827d0f3fed9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 166375,
                "upload_time": "2021-04-09T22:19:29",
                "upload_time_iso_8601": "2021-04-09T22:19:29.543807Z",
                "url": "https://files.pythonhosted.org/packages/a4/25/8d80fd8b332f55526ee2a106f9470c230057d1f83138d3dbbef004dfa008/sample-factory-1.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.117.1": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.117.1/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.0.9)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.117.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "108bee0c10444b296551474fdc17e50d",
                    "sha256": "a4f47e2de45160af081ce1a281fb36ee87d60b00574237a4edfa65aec9936d53"
                },
                "downloads": -1,
                "filename": "sample_factory-1.117.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "108bee0c10444b296551474fdc17e50d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 212724,
                "upload_time": "2021-04-09T22:56:00",
                "upload_time_iso_8601": "2021-04-09T22:56:00.611126Z",
                "url": "https://files.pythonhosted.org/packages/d4/c2/db1bdad42285dc62f1ae32430c54237dfa0d6c257aa7955cfdb7541f09cb/sample_factory-1.117.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3fa9c7c97c2b68d822f04eab4dd763f0",
                    "sha256": "3f01a33269b9364cfb9032832555410762a3b9b53d6cfd7bc17dd9ccc86bc117"
                },
                "downloads": -1,
                "filename": "sample-factory-1.117.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3fa9c7c97c2b68d822f04eab4dd763f0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 166611,
                "upload_time": "2021-04-09T22:56:02",
                "upload_time_iso_8601": "2021-04-09T22:56:02.212399Z",
                "url": "https://files.pythonhosted.org/packages/30/cc/47d6839cc5b1cc144356655a465c00bbedb0fd8dac97b3be289ce89b1e7e/sample-factory-1.117.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.117.2": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.117.2/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.0.9)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.117.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e25fb4c9ae1a7fad4a52e602c25887a5",
                    "sha256": "ee4ea1957266498aad58cb903610f48971a8ef17950f43626429ca60b713d0e2"
                },
                "downloads": -1,
                "filename": "sample_factory-1.117.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e25fb4c9ae1a7fad4a52e602c25887a5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 212725,
                "upload_time": "2021-04-09T23:05:06",
                "upload_time_iso_8601": "2021-04-09T23:05:06.346993Z",
                "url": "https://files.pythonhosted.org/packages/22/e3/cbf0f6d2b61192fea484d92b3342aa681b7f5a2521c38f73b6aef0b0d222/sample_factory-1.117.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4d69ba96d2c730fd482cdca169c35c87",
                    "sha256": "74f3e4945bfdbb68ea99fcc5f2e39b08069001a2109293ff06b9a698e1ff93ee"
                },
                "downloads": -1,
                "filename": "sample-factory-1.117.2.tar.gz",
                "has_sig": false,
                "md5_digest": "4d69ba96d2c730fd482cdca169c35c87",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 166575,
                "upload_time": "2021-04-09T23:05:07",
                "upload_time_iso_8601": "2021-04-09T23:05:07.990793Z",
                "url": "https://files.pythonhosted.org/packages/f4/35/ee0c241259ccbf473f51f2785804ba75ed688f04bd7952edaccfdee90461/sample-factory-1.117.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.117.3": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.117.3/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.0.9)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.117.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "03dbfcb8ef2e388f08b275951b75d26b",
                    "sha256": "a7ce24ddb9f028ddc0c29f8b74f17a5d851959130448673374a803b807725e9a"
                },
                "downloads": -1,
                "filename": "sample_factory-1.117.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "03dbfcb8ef2e388f08b275951b75d26b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 212726,
                "upload_time": "2021-04-15T07:26:02",
                "upload_time_iso_8601": "2021-04-15T07:26:02.117728Z",
                "url": "https://files.pythonhosted.org/packages/09/10/4701c9ed37030297ff47336a789dacbdf04b1fed5719af81b1da7d00e8ba/sample_factory-1.117.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d5dbc32e9b419f9dacaeb507210a0375",
                    "sha256": "da95092e74ea34cf0c40f04aa899918f2e389440110508b8a09d31b074c87caa"
                },
                "downloads": -1,
                "filename": "sample-factory-1.117.3.tar.gz",
                "has_sig": false,
                "md5_digest": "d5dbc32e9b419f9dacaeb507210a0375",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8846005,
                "upload_time": "2021-04-15T07:26:12",
                "upload_time_iso_8601": "2021-04-15T07:26:12.172780Z",
                "url": "https://files.pythonhosted.org/packages/59/6e/a8b3735be0ef48f9657e8292367d398f24dae78659ed5376bf4313bb5a8d/sample-factory-1.117.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.120.0": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.120.0/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.120.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dd201ef67ea06f8e404ec31f40971d2e",
                    "sha256": "707802f60bfa57b719b46f2a0a4a1efaa17cfe47aa2540cb4b987ee048f0f159"
                },
                "downloads": -1,
                "filename": "sample_factory-1.120.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dd201ef67ea06f8e404ec31f40971d2e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 208574,
                "upload_time": "2021-06-10T08:19:38",
                "upload_time_iso_8601": "2021-06-10T08:19:38.053964Z",
                "url": "https://files.pythonhosted.org/packages/0d/a5/7d81d1be354d437c029aa88efe7679a030f7cb4fe16949bb5013741da2d0/sample_factory-1.120.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b284af20e2f903a50d9b131b590318a7",
                    "sha256": "d704e7c01632ba3e4bc3af172c4283437e8444192b37d928e6198db027675e62"
                },
                "downloads": -1,
                "filename": "sample-factory-1.120.0.tar.gz",
                "has_sig": false,
                "md5_digest": "b284af20e2f903a50d9b131b590318a7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8846026,
                "upload_time": "2021-06-10T08:19:46",
                "upload_time_iso_8601": "2021-06-10T08:19:46.641819Z",
                "url": "https://files.pythonhosted.org/packages/ad/aa/b4e2bb248c0a6df870733728853ba36875969006b37e6ed10f21c198a703/sample-factory-1.120.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.120.1": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.120.1/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.6",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.120.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fdaa1b52f149b7a2e50335640d408112",
                    "sha256": "0d2c1c7d83e7ada95e061af62a48e82d6c04cbe8fec9dfb9edac5c0aca12f282"
                },
                "downloads": -1,
                "filename": "sample_factory-1.120.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fdaa1b52f149b7a2e50335640d408112",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 208857,
                "upload_time": "2021-07-21T10:33:17",
                "upload_time_iso_8601": "2021-07-21T10:33:17.592881Z",
                "url": "https://files.pythonhosted.org/packages/23/fc/fe82081558ef425d059210d89d2c7c04b907bf5e76d0eaf1d96251709b9f/sample_factory-1.120.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "09c6b5f3503607f0832277c05bb2d7dc",
                    "sha256": "ad2765f41b89fea5aadcca1fb6aa943121037650ebc9e46f9a850095e63e583c"
                },
                "downloads": -1,
                "filename": "sample-factory-1.120.1.tar.gz",
                "has_sig": false,
                "md5_digest": "09c6b5f3503607f0832277c05bb2d7dc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 8846461,
                "upload_time": "2021-07-21T10:33:28",
                "upload_time_iso_8601": "2021-07-21T10:33:28.000852Z",
                "url": "https://files.pythonhosted.org/packages/69/54/5f9d8bf4e09de76eb53139daea453cfcfcdf73546d3c8c455a57c2e73ae0/sample-factory-1.120.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.120.2": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.120.2/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.120.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "745e758c946365c32b59c6ad85d75c31",
                    "sha256": "2d6ebbdf2305df0cdfdb0804db6ff01badd4a39f340124fd4a8700955a1c0117"
                },
                "downloads": -1,
                "filename": "sample_factory-1.120.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "745e758c946365c32b59c6ad85d75c31",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 210391,
                "upload_time": "2021-09-23T04:10:56",
                "upload_time_iso_8601": "2021-09-23T04:10:56.973516Z",
                "url": "https://files.pythonhosted.org/packages/63/e4/feaeaad38a8e5a19c0f04ddca7c7806901ad0aa86b7d5901d70cbd5a47e2/sample_factory-1.120.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e36f364e439fcf32312d87786a40bde8",
                    "sha256": "d11924210fc29259b55858a2fbcb57a4195f1869c511117a73b42f59fd6eb156"
                },
                "downloads": -1,
                "filename": "sample-factory-1.120.2.tar.gz",
                "has_sig": false,
                "md5_digest": "e36f364e439fcf32312d87786a40bde8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8847484,
                "upload_time": "2021-09-23T04:11:06",
                "upload_time_iso_8601": "2021-09-23T04:11:06.436309Z",
                "url": "https://files.pythonhosted.org/packages/2b/dc/ecdfefbe5e2d7c557c1ecad713a4dde668db5c2792d2bf9b90679619cf78/sample-factory-1.120.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.121.0": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.121.0/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.121.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "35fefc076ca5fa99fa8154c8f03d095b",
                    "sha256": "fdea8f5ca611fc11e95ab69145a6b1c0911c2daffedbde97568e74cd9ed1ffa5"
                },
                "downloads": -1,
                "filename": "sample_factory-1.121.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "35fefc076ca5fa99fa8154c8f03d095b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 211504,
                "upload_time": "2021-11-09T04:46:05",
                "upload_time_iso_8601": "2021-11-09T04:46:05.805504Z",
                "url": "https://files.pythonhosted.org/packages/bf/7f/06da328f353c51f1b7707afd088186aa6b5f322d481b58b41f765e7c4ecf/sample_factory-1.121.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "31bb888ece83834774d68c09e7ab0042",
                    "sha256": "40c86bbf39d232be64e230d7210d34a9b095d4934684686e983b752cbae934cb"
                },
                "downloads": -1,
                "filename": "sample-factory-1.121.0.tar.gz",
                "has_sig": false,
                "md5_digest": "31bb888ece83834774d68c09e7ab0042",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8849012,
                "upload_time": "2021-11-09T04:46:14",
                "upload_time_iso_8601": "2021-11-09T04:46:14.297849Z",
                "url": "https://files.pythonhosted.org/packages/c6/5b/07372a6414a2f575cd0fc692b398a1930c60f447bc44ac1a4f9546d4abe2/sample-factory-1.121.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.121.1": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.121.1/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.121.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0a70f4458e688f0924a9f05ec0d0861d",
                    "sha256": "30342ad1719723b3d606a7dd28cb09df602dbc72f1ced55a7c1feeed88c3c013"
                },
                "downloads": -1,
                "filename": "sample_factory-1.121.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0a70f4458e688f0924a9f05ec0d0861d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 216979,
                "upload_time": "2021-12-01T03:37:59",
                "upload_time_iso_8601": "2021-12-01T03:37:59.249282Z",
                "url": "https://files.pythonhosted.org/packages/c0/ab/95c0c82fdd4efeaf1ab9dcac3e6a003a607dc8392fdaf77de195dc6c83ce/sample_factory-1.121.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "01c74dbcba08be9cfc90b550f9688fe0",
                    "sha256": "5769924e7b4a3ca75c0b767836d0389ac66952672457be2c0505f34aff763ebb"
                },
                "downloads": -1,
                "filename": "sample-factory-1.121.1.tar.gz",
                "has_sig": false,
                "md5_digest": "01c74dbcba08be9cfc90b550f9688fe0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8851813,
                "upload_time": "2021-12-01T03:38:10",
                "upload_time_iso_8601": "2021-12-01T03:38:10.357670Z",
                "url": "https://files.pythonhosted.org/packages/69/3b/0f754a3e7d5eef2357d5c937a4c1fd3d1c816c257831a784c0e077210928/sample-factory-1.121.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.121.2": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.121.2/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.121.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "446cb74de9cf4d99d72ec9bc2535bea3",
                    "sha256": "b9628b155d58e040de23fe252f24d6773d883110d6398c4849e9c23077fae586"
                },
                "downloads": -1,
                "filename": "sample_factory-1.121.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "446cb74de9cf4d99d72ec9bc2535bea3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 8962436,
                "upload_time": "2021-12-01T03:59:06",
                "upload_time_iso_8601": "2021-12-01T03:59:06.472000Z",
                "url": "https://files.pythonhosted.org/packages/58/35/96f34bc4e758237bb69fd968516d44f3f204b5d83dc47b332016e64df8c2/sample_factory-1.121.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f73b6eb845cdc1f8b900143697ff0571",
                    "sha256": "f831cf120517f120a9ee08460c2f41d18b963871913d4373a02d6cf721276623"
                },
                "downloads": -1,
                "filename": "sample-factory-1.121.2.tar.gz",
                "has_sig": false,
                "md5_digest": "f73b6eb845cdc1f8b900143697ff0571",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8855046,
                "upload_time": "2021-12-01T03:59:14",
                "upload_time_iso_8601": "2021-12-01T03:59:14.994347Z",
                "url": "https://files.pythonhosted.org/packages/c9/0e/3c377d2514cae13bf7db6782725a1a20ec8ae453a15ea48731e81825cb79/sample-factory-1.121.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.121.3": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.121.3/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.121.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ac6301290fc4f5c178fa33ebb7643e00",
                    "sha256": "50802e4599a83adf158d96e4a7cc8a4370bda63440b4d3b136faf81926eb87a8"
                },
                "downloads": -1,
                "filename": "sample_factory-1.121.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ac6301290fc4f5c178fa33ebb7643e00",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 8964562,
                "upload_time": "2021-12-21T01:46:06",
                "upload_time_iso_8601": "2021-12-21T01:46:06.535332Z",
                "url": "https://files.pythonhosted.org/packages/b7/5c/34f2779c0ee3ebf11776de0438462633633e6ae6ac355332f52e72b67894/sample_factory-1.121.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "95826ac5d45a282f1ceef6e5124555b9",
                    "sha256": "098b7d66aaf42884cfa3da91c1cc655c80b3bf9e025c2382ce4d0007f995b8de"
                },
                "downloads": -1,
                "filename": "sample-factory-1.121.3.tar.gz",
                "has_sig": false,
                "md5_digest": "95826ac5d45a282f1ceef6e5124555b9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8855999,
                "upload_time": "2021-12-21T01:46:15",
                "upload_time_iso_8601": "2021-12-21T01:46:15.548514Z",
                "url": "https://files.pythonhosted.org/packages/d9/5d/052f8e267a9d6b6349b13506dc5dc78d5cf7f5e7334a9652ed9e0f9b3668/sample-factory-1.121.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.121.4": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": "",
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.121.4/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python",
                "wandb (>=0.12.9)"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.121.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7b1f8ee591fed425d00ab73eabf42d01",
                    "sha256": "f38d81a6fdc1374eec366549d8241b8769aadf36c31f7e8510c7e54b3e242bf8"
                },
                "downloads": -1,
                "filename": "sample_factory-1.121.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7b1f8ee591fed425d00ab73eabf42d01",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 8967134,
                "upload_time": "2022-01-08T07:55:09",
                "upload_time_iso_8601": "2022-01-08T07:55:09.543568Z",
                "url": "https://files.pythonhosted.org/packages/ec/3f/9ba7e000aaf28e5bdec6f9a91da8cc5321ead14d48353b591a13c5eb003e/sample_factory-1.121.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "47009b62e19518a09486f22c8f9507b8",
                    "sha256": "a7462c65a4150d773a381a6faaf2382408651f19a9c1d61d5714671abdfb9c43"
                },
                "downloads": -1,
                "filename": "sample-factory-1.121.4.tar.gz",
                "has_sig": false,
                "md5_digest": "47009b62e19518a09486f22c8f9507b8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8859368,
                "upload_time": "2022-01-08T07:55:22",
                "upload_time_iso_8601": "2022-01-08T07:55:22.158924Z",
                "url": "https://files.pythonhosted.org/packages/c7/04/0ba05852edbe24866e32807c65552654c478af61dfe7133708f5256f45d2/sample-factory-1.121.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.123.0": {
        "info": {
            "author": "Aleksei Petrenko",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "[![Build Status](https://travis-ci.com/alex-petrenko/sample-factory.svg?branch=master)](https://travis-ci.com/github/alex-petrenko/sample-factory)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/alex-petrenko/sample-factory/blob/master/LICENSE)\n[![Downloads](https://pepy.tech/badge/sample-factory)](https://pepy.tech/project/sample-factory)\n<!-- [![codecov](https://codecov.io/gh/alex-petrenko/sample-factory/branch/master/graph/badge.svg)](https://codecov.io/gh/alex-petrenko/sample-factory) -->\n\n# Sample Factory\n\nCodebase for high throughput asynchronous reinforcement learning.\n\n**Paper:** https://arxiv.org/abs/2006.11751\n\n**Cite:** [BibTeX](https://github.com/alex-petrenko/sample-factory#citation)\n\n**Talk:** https://youtu.be/lLG17LKKSZc\n\n**Videos:** https://sites.google.com/view/sample-factory\n\nVizDoom agents trained with Sample Factory playing in real time:\n\n<p align=\"middle\">\n</p> \n\n#### When should I use Sample Factory?\n\n1. Sample Factory is one of the fastest open source single-machine RL implementations (see paper for details).\nIf you plan to train RL agents on large amounts of experience, consider using it.\nSample Factory can significantly speed up\nthe experimentation or allow you to collect more samples in the same amount of time and achieve better performance.\n\n2. Consider using Sample Factory for your multi-agent and population-based training experiments. \nMulti-agent and PBT setups are really simple with Sample Factory.\n\n3. A lot of work went into our VizDoom and DMLab wrappers. For example, we include full support for\nconfigurable VizDoom multi-agent environments and their interop with RL algorithms, which can open new interesting research directions.\nConsider using Sample Factory if you train agents in these environments.\n\n4. Sample Factory can be a good choice as a prototype for a single node in a distributed RL system or as a reference\ncodebase for other types of async RL algorithms.\n\n## Recent releases\n\n##### v1.123.0\n\n* Added max entropy objective (disabled by default). To turn it on, use `--max_entropy_coeff`. Adds action distribution\nentropies to rewards (similar to SAC) thus encouraging exploration. See [this paper](https://arxiv.org/abs/1805.00909).\n\n##### v1.122.0\n\n* Added adaptive learning rate scheduler\n* Added default PyTorch model tensor initialization \n\n##### v1.121.4\n* Support Weights and Biases (see section \"WandB support\")\n* More configurable population-based training: \ncan set from command line whether or not to mutate gamma, plus the perturbation magnitude for all float hyperparams can also be set from command line:\n```\n--pbt_optimize_gamma: Whether to optimize gamma, discount factor, or not (experimental) (default: False)\n--pbt_perturb_min: When PBT mutates a float hyperparam, it samples the change magnitude randomly from the uniform distribution [pbt_perturb_min, pbt_perturb_max] (default: 1.05)\n--pbt_perturb_max: When PBT mutates a float hyperparam, it samples the change magnitude randomly from the uniform distribution [pbt_perturb_min, pbt_perturb_max] (default: 1.5)\n```\n\n##### v1.121.3\n* Fixed a small bug related to population-based training (a reward shaping dictionary was assumed to be a flat dict,\nwhile it could be a nested dict in some envs)\n\n##### v1.121.2\n* Fixed a bug that prevented Vizdoom *.cfg and *.wad files from being copied to site-packages during installation from PyPI\n* Added example on how to use custom Vizdoom envs without modifying the source code (`sample_factory_examples/train_custom_vizdoom_env.py`)\n\n##### v1.121.0\n* Added fixed KL divergence penalty as in https://arxiv.org/pdf/1707.06347.pdf \nIts usage is highly encouraged in environments with continuous action spaces (i.e. set --kl_loss_coeff=1.0).\nOtherwise numerical instabilities can occur in certain environments, especially when the policy lag is high\n\n* More summaries related to the new loss\n\n##### v1.120.2\n* More improvements and fixes in runner interface, including support for NGC cluster\n\n##### v1.120.1\n* Runner interface improvements for Slurm\n\n##### v1.120.0\n* Support inactive agents. Do deactivate an agent for a portion of the episode the environment should return `info={'is_active': False}` for the inactive agent. Useful for environments such as hide-n-seek.\n* Improved memory consumption and performance with better shared memory management.\n* Experiment logs are now saved into the experiment folder as `sf_log.txt`\n* DMLab-related bug fixes (courtesy of @donghoonlee04 and @sungwoong. Thank you!)\n\n## Installation\n\nJust install from PyPI:\n\n```pip install sample-factory```\n\n#### Advanced installation\n\nPyPI dependency resolution may result in suboptimal performance, i.e. some versions of MKL and Numpy are known to be slower.\nTo guarantee the maximum throughput (~10% faster than pip version) consider using our Conda environment with exact package versions:\n\n- Clone the repo: `git clone https://github.com/alex-petrenko/sample-factory.git`\n\n- Create and activate conda env:\n\n```\ncd sample-factory\nconda env create -f environment.yml\nconda activate sample-factory\n```\n\nSF is known to also work on macOS. There is no Windows support at this time.\n\n### Environment support\n\nSample Factory has a runtime environment registry for _families of environments_. A family of environments\nis defined by a name prefix (i.e. `atari_` or `doom_`) and a function that creates an instance of the environment\ngiven its full name, including the prefix (i.e. `atari_breakout`).\n\nRegistering families of environments allows the user to add\nand override configuration parameters (such as resolution, frameskip, default model type, etc.) for the whole family\nof environments, i.e. all VizDoom envs can share their basic configuration parameters that don't need to be specified for each experiment.\n\nCustom user-defined environment families and models can be added to the registry, see this example:\n`sample_factory_examples/train_custom_env_custom_model.py`\n\nScript `sample_factory_examples/train_gym_env.py` demonstrates how Sample Factory can be used with an environment defined in OpenAI Gym.\n\nSample Factory comes with a particularly comprehensive support for VizDoom and DMLab, see below.\n\n#### VizDoom\n\nTo install VizDoom just follow system setup instructions from the original repository ([VizDoom linux_deps](https://github.com/mwydmuch/ViZDoom/blob/master/doc/Building.md#linux_deps)),\nafter which the latest VizDoom can be installed from PyPI: ```pip install vizdoom```.\nVersion 1.1.9 or above is recommended as it fixes bugs related to multi-agent training.\n\n#### DMLab\n \n- Follow installation instructions from [DMLab Github](https://github.com/deepmind/lab/blob/master/docs/users/build.md).\n- `pip install dm_env`\n- To train on DMLab-30 you will need `brady_konkle_oliva2008` [dataset](https://github.com/deepmind/lab/tree/master/data/brady_konkle_oliva2008).\n- To significantly speed up training on DMLab-30 consider downloading our [dataset](https://drive.google.com/file/d/17JCp3DbuiqcfO9I_yLjbBP4a7N7Q4c2v/view?usp=sharing)\nof pre-generated environment layouts (see paper for details).\nCommand lines for running experiments with these datasets are provided in the sections below.\n \n#### Atari\n \nALE envs are supported out-of-the-box, although the existing wrappers and hyperparameters\naren't well optimized for sample efficiency in Atari. Tuned Atari training examples would be a welcome contribution.\n\nSince ~2022 some extra steps might be required to install atari: `pip install \"gym[atari,accept-rom-license]\"`\n \n#### Custom multi-agent environments\n\nMulti-agent environments are expected to return lists of observations/dones/rewards (one item for every agent).\n\nIt is expected that a multi-agent env exposes a property or a member variable `num_agents` that the algorithm uses\nto allocate the right amount of memory during startup.\n\n_Multi-agent environments require auto-reset._ I.e. they reset a particular agent when the corresponding `done` flag is `True` and return\nthe first observation of the next episode (because we have no use for the last observation of the previous\nepisode, we do not act based on it). See `multi_agent_wrapper.py` for example. For simplicity Sample Factory actually treats all\nenvironments as multi-agent, i.e. single-agent environments are automatically treated as multi-agent environments with one agent.\n\nSample Factory uses this function to check if the environment is multi-agent. Make sure your environment provides the `num_agents` member:\n\n```python\ndef is_multiagent_env(env):\n    is_multiagent = hasattr(env, 'num_agents') and env.num_agents > 1\n    if hasattr(env, 'is_multiagent'):\n        is_multiagent = env.is_multiagent\n    return is_multiagent\n```\n \n## Using Sample Factory\n \nOnce Sample Factpry is installed, it defines two main entry points, one for training, and one for algorithm evaluation:\n* `sample_factory.algorithms.appo.train_appo`\n* `sample_factory.algorithms.appo.enjoy_appo`\n\nSome environments, such as VizDoom, DMLab, and Atari, are added to the env registry in the default installation, so training on these environments is as\nsimple as providing basic configuration parameters. I.e. to train and evaluate on the most basic VizDoom environment:\n\n```\npython -m sample_factory.algorithms.appo.train_appo --env=doom_basic --algo=APPO --train_for_env_steps=3000000 --num_workers=20 --num_envs_per_worker=20 --experiment=doom_basic\npython -m sample_factory.algorithms.appo.enjoy_appo --env=doom_basic --algo=APPO --experiment=doom_basic\n```\n \n### Configuration\n\nSample Factory experiments are configured via command line parameters. The following command will print the help message\nfor the algorithm-environment combination:\n\n```\npython -m sample_factory.algorithms.appo.train_appo --algo=APPO --env=doom_battle --experiment=your_experiment --help\n```\n\nThis will print the full list of parameters, their descriptions, and their default values.\nReplace `doom_battle` with a different environment name (i.e. `atari_breakout`) to get information about parameters\nspecific to this particular environment. \n\nOnce the new experiment is started, a directory containing experiment-related files is created in `--train_dir`\nlocation (or `./train_dir` in `cwd` if `--train_dir` is not passed from command line). This directory contains a file\n`cfg.json` where all the experiment parameters are saved (including those instantiated from their default values).\n\nMost default parameter values and their help strings are defined in `sample_factory/algorithms/algorithm.py` and\n`sample_factory/algorithms/appo/appo.py`. Besides that, additional parameters can be defined for specific families of environments.\n\nThe key parameters are:\n\n- `--algo` (required) algorithm to use, pass value `APPO` to train agents with fast Async PPO.\n\n- `--env` (required) full name that uniquely identifies the environment, starting with the env family prefix\n(e.g. `doom_`, `dmlab_` or `atari_` for built-in Sample Factory envs). E.g. `doom_battle` or `atari_breakout`.\n\n- `--experiment` (required) a name that uniquely identifies the experiment. E.g. `--experiment=my_experiment`.\nIf the experiment folder with the name already exists the experiment will be _resumed_!\nResuming experiments after a stop is the default behavior in Sample Factory. \nThe parameters passed\nfrom command line are taken into account, unspecified parameters will be loaded from the existing experiment\n`cfg.json` file. If you want to start a new experiment, delete the old experiment folder or change the experiment name.\n\n- `--train_dir` location for all experiments folders, defaults to `./train_dir`.\n\n- `--num_workers` defaults to number of logical cores in the system, which will give the best throughput in\nmost scenarios.\n\n- `--num_envs_per_worker` will greatly affect the performance. Large values (20-30) improve hardware utilization but\nincrease memory usage and policy lag. See example command lines below to find a value that works for your system.\n_Must be even_ for the double-buffered sampling to work. Disable double-buffered sampling by setting `--worker_num_splits=1`\nto use odd number of envs per worker (e.g. 1 env per worker). (Default: 2)\n\n#### Configuring actor & critic architectures\n\n`sample_factory/algorithms/algorithm.py` contains parameters that allow users to customize the architectures of neural networks\ninvolved in the training process. Sample Factory includes a few popular NN architectures for RL, such as shallow\nconvnets for Atari and VizDoom, deeper ResNet models for DMLab, MLPs for continuous control tasks.\nCLI parameters allow users to choose between\nthese existing architectures, as well as specify the type of the policy core (LSTM/GRU/feed-forward), nonlinearities,\netc. Consult experiment-specific `cfg.json` and the source code for full list of parameters.\n\n`sample_factory.envs.dmlab.dmlab_model` and `sample_factory.envs.doom.doom_model` demonstrate how to handle environment-specific\nadditional input spaces (e.g. natural language and/or numerical vector inputs).\nScript `sample_factory_examples/train_custom_env_custom_model.py` demonstrates how users can define a fully custom\nenvironment-specific encoder. Whenever a fully custom actor-critic architecture is required, users are welcome\nto override `_ActorCriticBase` following examples in `sample_factory/algorithms/appo/model.py`.\n\n## Running experiments\n\nHere we provide command lines that can be used to reproduce the experiments from the paper, which also serve as an example on how to configure large-scale RL experiments.\n\n#### VizDoom\n\n```\nTrain for 4B env steps (also can be stopped at any time with Ctrl+C and resumed by using the same cmd).\nThis is more or less optimal training setup for a 10-core machine.\npython -m sample_factory.algorithms.appo.train_appo --env=doom_battle --train_for_env_steps=4000000000 --algo=APPO --env_frameskip=4 --use_rnn=True --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --wide_aspect_ratio=False --num_workers=20 --num_envs_per_worker=20 --num_policies=1  --experiment=doom_battle_w20_v20\n\nRun at any point to visualize the experiment:\npython -m sample_factory.algorithms.appo.enjoy_appo --env=doom_battle --algo=APPO --experiment=doom_battle_w20_v20\n```\n\n```\nTrain on one of the 6 \"basic\" VizDoom environments:\npython -m sample_factory.algorithms.appo.train_appo --train_for_env_steps=500000000 --algo=APPO --env=doom_my_way_home --env_frameskip=4 --use_rnn=True --num_workers=36 --num_envs_per_worker=8 --num_policies=1 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --wide_aspect_ratio=False --experiment=doom_basic_envs\n```\n\n```\nDoom \"battle\" and \"battle2\" environments, 36-core server (72 logical cores) with 4 GPUs:\npython -m sample_factory.algorithms.appo.train_appo --env=doom_battle --train_for_env_steps=4000000000 --algo=APPO --env_frameskip=4 --use_rnn=True --num_workers=72 --num_envs_per_worker=8 --num_policies=1 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --wide_aspect_ratio=False --max_grad_norm=0.0 --experiment=doom_battle\npython -m sample_factory.algorithms.appo.train_appo --env=doom_battle2 --train_for_env_steps=4000000000 --algo=APPO --env_frameskip=4 --use_rnn=True --num_workers=72 --num_envs_per_worker=8 --num_policies=1 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --wide_aspect_ratio=False --max_grad_norm=0.0 --experiment=doom_battle_2\n```\n\n```\nDuel and deathmatch versus bots, population-based training, 36-core server:\npython -m sample_factory.algorithms.appo.train_appo --env=doom_duel_bots --train_for_seconds=360000 --algo=APPO --gamma=0.995 --env_frameskip=2 --use_rnn=True --reward_scale=0.5 --num_workers=72 --num_envs_per_worker=32 --num_policies=8 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --benchmark=False --res_w=128 --res_h=72 --wide_aspect_ratio=False --pbt_replace_reward_gap=0.2 --pbt_replace_reward_gap_absolute=3.0 --pbt_period_env_steps=5000000 --save_milestones_sec=1800 --with_pbt=True --experiment=doom_duel_bots\npython -m sample_factory.algorithms.appo.train_appo --env=doom_deathmatch_bots --train_for_seconds=3600000 --algo=APPO --use_rnn=True --gamma=0.995 --env_frameskip=2 --rollout=32 --num_workers=80 --num_envs_per_worker=24 --num_policies=8 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --res_w=128 --res_h=72 --wide_aspect_ratio=False --with_pbt=True --pbt_period_env_steps=5000000 --experiment=doom_deathmatch_bots\n```\n\n```\nDuel and deathmatch self-play, PBT, 36-core server:\npython -m sample_factory.algorithms.appo.train_appo --env=doom_duel --train_for_seconds=360000 --algo=APPO --gamma=0.995 --env_frameskip=2 --use_rnn=True --num_workers=72 --num_envs_per_worker=16 --num_policies=8 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --res_w=128 --res_h=72 --wide_aspect_ratio=False --benchmark=False --pbt_replace_reward_gap=0.5 --pbt_replace_reward_gap_absolute=0.35 --pbt_period_env_steps=5000000 --with_pbt=True --pbt_start_mutation=100000000 --experiment=doom_duel_full\npython -m sample_factory.algorithms.appo.train_appo --env=doom_deathmatch_full --train_for_seconds=360000 --algo=APPO --gamma=0.995 --env_frameskip=2 --use_rnn=True --num_workers=72 --num_envs_per_worker=16 --num_policies=8 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --res_w=128 --res_h=72 --wide_aspect_ratio=False --benchmark=False --pbt_replace_reward_gap=0.1 --pbt_replace_reward_gap_absolute=0.1 --pbt_period_env_steps=5000000 --with_pbt=True --pbt_start_mutation=100000000 --experiment=doom_deathmatch_full\n```\n\nReproducing benchmarking results:\n\n```\nThis achieves 50K+ framerate on a 10-core machine (Intel Core i9-7900X):\npython -m sample_factory.algorithms.appo.train_appo --env=doom_benchmark --algo=APPO --env_frameskip=4 --use_rnn=True --num_workers=20 --num_envs_per_worker=32 --num_policies=1 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=4096 --experiment=doom_battle_appo_fps_20_32 --res_w=128 --res_h=72 --wide_aspect_ratio=False --policy_workers_per_policy=2 --worker_num_splits=2\n```\n\n```\nThis achieves 100K+ framerate on a 36-core machine:\npython -m sample_factory.algorithms.appo.train_appo --env=doom_benchmark --algo=APPO --env_frameskip=4 --use_rnn=True --num_workers=72 --num_envs_per_worker=24 --num_policies=1 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=8192 --wide_aspect_ratio=False --experiment=doom_battle_appo_w72_v24 --policy_workers_per_policy=2\n```\n\n#### DMLab\n\nDMLab-30 run on a 36-core server with 4 GPUs:\n\n```\npython -m sample_factory.algorithms.appo.train_appo --env=dmlab_30 --train_for_seconds=3600000 --algo=APPO --gamma=0.99 --use_rnn=True --num_workers=90 --num_envs_per_worker=12 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --benchmark=False --ppo_epochs=1 --max_grad_norm=0.0 --dmlab_renderer=software --decorrelate_experience_max_seconds=120 --reset_timeout_seconds=300 --encoder_custom=dmlab_instructions --encoder_type=resnet --encoder_subtype=resnet_impala --encoder_extra_fc_layers=1 --hidden_size=256 --nonlinearity=relu --rnn_type=lstm --dmlab_extended_action_set=True --num_policies=4 --pbt_replace_reward_gap=0.05 --pbt_replace_reward_gap_absolute=5.0 --pbt_period_env_steps=10000000 --pbt_start_mutation=100000000 --with_pbt=True --experiment=dmlab_30_resnet_4pbt_w90_v12 --dmlab_one_task_per_worker=True --set_workers_cpu_affinity=True --max_policy_lag=35 --pbt_target_objective=dmlab_target_objective --dmlab30_dataset=~/datasets/brady_konkle_oliva2008 --dmlab_use_level_cache=True --dmlab_level_cache_path=/home/user/dmlab_cache\n```\n\n##### DMLab level cache\n\nNote `--dmlab_level_cache_path` parameter. This location will be used for level layout cache.\nSubsequent DMLab experiments on envs that require level generation will become faster since environment files from\nprevious runs can be reused.\n\nGenerating environment levels for the first time can be really slow, especially for the full multi-task\nbenchmark like DMLab-30. On 36-core server generating enough environments for a 10B training session can take up to\na week. We provide a dataset of pre-generated levels to make training on DMLab-30 easier.\n[Download here](https://drive.google.com/file/d/17JCp3DbuiqcfO9I_yLjbBP4a7N7Q4c2v/view?usp=sharing).\n\n### Monitoring training sessions\n\nSample Factory uses Tensorboard summaries. Run Tensorboard to monitor your experiment: `tensorboard --logdir=train_dir --port=6006`\n\nAdditionally, we provide a helper script that has nice command line interface to monitor the experiment folders \nusing wildcard masks: `python -m sample_factory.tb '*custom_experiment*' '*another*custom*experiment_name'`\n\n#### WandB support\n\nSample Factory also supports experiment monitoring with Weights and Biases.\nIn order to setup WandB locally run `wandb login` in the terminal (https://docs.wandb.ai/quickstart#1.-set-up-wandb)\n\nExample command line to run an experiment with WandB monitoring:\n\n```\npython -m sample_factory.algorithms.appo.train_appo --env=doom_basic --algo=APPO --train_for_env_steps=30000000 --num_workers=20 --num_envs_per_worker=20 --experiment=doom_basic --with_wandb=True --wandb_user=<your_wandb_user> --wandb_tags test benchmark doom appo\n```\n\nA total list of WandB settings: \n```\n--with_wandb: Enables Weights and Biases integration (default: False)\n--wandb_user: WandB username (entity). Must be specified from command line! Also see https://docs.wandb.ai/quickstart#1.-set-up-wandb (default: None)\n--wandb_project: WandB \"Project\" (default: sample_factory)\n--wandb_group: WandB \"Group\" (to group your experiments). By default this is the name of the env. (default: None)\n--wandb_job_type: WandB job type (default: SF)\n--wandb_tags: [WANDB_TAGS [WANDB_TAGS ...]] Tags can help with finding experiments in WandB web console (default: [])\n```\n\nOnce the experiment is started the link to the monitored session is going to be available in the logs (or by searching in Wandb Web console).\n\n\n### Runner interface\n\nSample Factory provides a simple interface that allows users to run experiments with multiple seeds\n(or hyperparameter searches) with optimal distribution of work across GPUs.\nThe configuration of such experiments is done through Python scripts.\n\nHere's an example runner script that we used to train agents for 6 basic VizDoom environments with 10 seeds each:\n\n```\nfrom sample_factory.runner.run_description import RunDescription, Experiment, ParamGrid\n\n_params = ParamGrid([\n    ('seed', [0, 1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999]),\n    ('env', ['doom_my_way_home', 'doom_deadly_corridor', 'doom_defend_the_center', 'doom_defend_the_line', 'doom_health_gathering', 'doom_health_gathering_supreme']),\n])\n\n_experiments = [\n    Experiment(\n        'basic_envs_fs4',\n        'python -m sample_factory.algorithms.appo.train_appo --train_for_env_steps=500000000 --algo=APPO --env_frameskip=4 --use_rnn=True --num_workers=36 --num_envs_per_worker=8 --num_policies=1 --ppo_epochs=1 --rollout=32 --recurrence=32 --batch_size=2048 --wide_aspect_ratio=False',\n        _params.generate_params(randomize=False),\n    ),\n]\n\n\nRUN_DESCRIPTION = RunDescription('doom_basic_envs_appo', experiments=_experiments)\n\n```\n\nRunner script should be importable (i.e. be in your project or in PYTHONPATH), and should define a single variable\n`RUN_DESCRIPTION`, which contains a list of experiments (each experiment can be a hyperparameter search), as well as some auxiliary parameters.\n\nWhen such a script is saved i.e. at `myproject/train_10_seeds.py` in your project using Sample Factory, you can use this command to\nexecute it:\n\n```\npython -m sample_factory.runner.run --run=myproject.train_10_seeds --runner=processes --max_parallel=12 --pause_between=10 --experiments_per_gpu=3 --num_gpus=4\n``` \n\nThis will cycle through the requested configurations, training 12 experiments at the same time, 3 per GPU on 4 GPUs using local OS-level parallelism.\n\nRunner supports other backends for parallel execution: `--runner=slurm` and `--runner=ngc` for Slurm and NGC support respectively.\n\nIndividual experiments will be stored in `train_dir/run_name` so the whole experiment can be easily monitored\nwith a single Tensorboard command.\n\nFind more information on runner API in [runner/README.md](https://github.com/alex-petrenko/sample-factory/blob/master/sample_factory/runner/README.md).\n\n### Dummy sampler\n\nThis tool can be useful if you want to estimate the upper bound on performance of any reinforcement learning\nalgorithm, i.e. how fast the environment can be sampled by a dumb random policy.\n\n```\nThis achieves 90000+ FPS on a 10-core workstation:\npython -m sample_factory.run_algorithm --algo=DUMMY_SAMPLER --env=doom_benchmark --num_workers=20 --num_envs_per_worker=1 --experiment=dummy_sampler --sample_env_frames=5000000\n\n```\n\n### Tests\n\nTo run unit tests execute `./all_tests.sh` from the root of the repo.\nConsider installing VizDoom for a more comprehensive set of tests.\n\n### Trained policies\n\nSee a separate [trained_policies/README.md](https://github.com/alex-petrenko/sample-factory/blob/master/trained_policies/README.md).\n\n### Caveats\n\n- Multiplayer VizDoom environments can freeze your console sometimes, simple `reset` takes care of this\n- Sometimes VizDoom instances don't clear their internal shared memory buffers used to communicate between Python and\na Doom executable. The file descriptors for these buffers tend to pile up. `rm /dev/shm/ViZDoom*` will take care of this issue.\n- It's best to use the standard `--fps=35` to visualize VizDoom results. `--fps=0` enables\nAsync execution mode for the Doom environments, although the results are not always reproducible between sync and async modes.\n- Multiplayer VizDoom environments are significantly slower than single-player envs because actual network\ncommunication between the environment instances is required which results in a lot of syscalls.\nFor prototyping and testing consider single-player environments with bots instead.\n- Vectors of environments on rollout (actor) workers are instantiated on the same CPU thread.\nThis can create problems for certain types of environment that require global per-thread or per-process context\n(e.g. OpenGL context). The solution should be an environment wrapper that starts the environment in a \nseparate thread (or process if that's required) and communicates. `doom_multiagent_wrapper.py` is an example,\nalthough not optimal.\n\n## Citation\n\nIf you use this repository in your work or otherwise wish to cite it, please make reference to our ICML2020 paper.\n\n```\n@inproceedings{petrenko2020sf,\n  title={Sample Factory: Egocentric 3D Control from Pixels at 100000 FPS with Asynchronous Reinforcement Learning},\n  author={Petrenko, Aleksei and Huang, Zhehui and Kumar, Tushar and Sukhatme, Gaurav and Koltun, Vladlen},\n  booktitle={ICML},\n  year={2020}\n}\n```\n\nFor questions, issues, inquiries please email apetrenko1991@gmail.com. \nGithub issues and pull requests are welcome.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/alex-petrenko/sample-factory",
            "keywords": "asynchronous reinforcement learning policy gradient ppo appo impala ai",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sample-factory",
            "package_url": "https://pypi.org/project/sample-factory/",
            "platform": null,
            "project_url": "https://pypi.org/project/sample-factory/",
            "project_urls": {
                "Github": "https://github.com/alex-petrenko/sample-factory",
                "Homepage": "https://github.com/alex-petrenko/sample-factory",
                "Videos": "https://sites.google.com/view/sample-factory"
            },
            "release_url": "https://pypi.org/project/sample-factory/1.123.0/",
            "requires_dist": [
                "numpy (>=1.18.1)",
                "torch (>=1.6)",
                "gym (>=0.17.1)",
                "tensorboard (>=1.15.0)",
                "tensorboardx (>=2.0)",
                "psutil (>=5.7.0)",
                "threadpoolctl (>=2.0.0)",
                "colorlog",
                "faster-fifo (>=1.2.0)",
                "filelock",
                "opencv-python",
                "wandb (>=0.12.9)"
            ],
            "requires_python": ">=3.7",
            "summary": "High throughput asynchronous reinforcement learning framework",
            "version": "1.123.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13485833,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "420d0874471313b4242cab30a10605a6",
                    "sha256": "eb78175200db07047c3f97c5674322389f7a9dd58c0008ac250163ee4b0d331e"
                },
                "downloads": -1,
                "filename": "sample_factory-1.123.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "420d0874471313b4242cab30a10605a6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 8970500,
                "upload_time": "2022-04-12T06:39:15",
                "upload_time_iso_8601": "2022-04-12T06:39:15.304162Z",
                "url": "https://files.pythonhosted.org/packages/7f/f6/f0b491352d04550e2e80c2c45cd1ed7a675267f32efdb8ab465225c176ba/sample_factory-1.123.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bf03e7fd504ec602f4aa1baa4a70d034",
                    "sha256": "2657b50f26b517b677f0c6d848db5dfcc2a98cff95a5e97b59a2f61d92c74d68"
                },
                "downloads": -1,
                "filename": "sample-factory-1.123.0.tar.gz",
                "has_sig": false,
                "md5_digest": "bf03e7fd504ec602f4aa1baa4a70d034",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8859592,
                "upload_time": "2022-04-12T06:39:23",
                "upload_time_iso_8601": "2022-04-12T06:39:23.758250Z",
                "url": "https://files.pythonhosted.org/packages/1a/34/bb29087792c8316a10b9e96e97572454cd28eefa5dc5f3f5fc46a8d2ad34/sample-factory-1.123.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}