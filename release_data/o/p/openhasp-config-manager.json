{
    "0.0.1": {
        "info": {
            "author": "Markus Ressel",
            "author_email": "mail@markusressel.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/markusressel/openhasp-config-manager",
            "keywords": "openhasp,config,management",
            "license": "AGPL-3.0-or-later",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openhasp-config-manager",
            "package_url": "https://pypi.org/project/openhasp-config-manager/",
            "platform": null,
            "project_url": "https://pypi.org/project/openhasp-config-manager/",
            "project_urls": {
                "Homepage": "https://github.com/markusressel/openhasp-config-manager",
                "Repository": "https://github.com/markusressel/openhasp-config-manager"
            },
            "release_url": "https://pypi.org/project/openhasp-config-manager/0.0.1/",
            "requires_dist": [
                "Jinja2",
                "click",
                "dacite",
                "paho-mqtt",
                "py-range-parse",
                "pyyaml",
                "requests"
            ],
            "requires_python": ">=3.10,<4.0",
            "summary": "A tool to manage all of your openHASP device configs in a centralized place.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14708288,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e369a140b8eabdba5ec39abc6938343c",
                    "sha256": "895b31bae87021ccd4d95037fe38ae8af355f24dc7b3d440cb90abbcbd6ab138"
                },
                "downloads": -1,
                "filename": "openhasp_config_manager-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e369a140b8eabdba5ec39abc6938343c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10,<4.0",
                "size": 28197,
                "upload_time": "2022-08-07T15:31:28",
                "upload_time_iso_8601": "2022-08-07T15:31:28.550605Z",
                "url": "https://files.pythonhosted.org/packages/e1/93/622ba05a95311a01cb706aac495fc919d60482a15c711f4053566b6c48a1/openhasp_config_manager-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ecf5bfbf8362832362c8926260be2bea",
                    "sha256": "10805caca6861568a9290e2292caf7acab7f0bde5a6db5da8943780f8294c411"
                },
                "downloads": -1,
                "filename": "openhasp-config-manager-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ecf5bfbf8362832362c8926260be2bea",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10,<4.0",
                "size": 27320,
                "upload_time": "2022-08-07T15:31:30",
                "upload_time_iso_8601": "2022-08-07T15:31:30.532205Z",
                "url": "https://files.pythonhosted.org/packages/22/42/6d3a63976d0ef8b6558d0f1ff268cf932ddbae2ea492ae499082ccf14705/openhasp-config-manager-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Markus Ressel",
            "author_email": "mail@markusressel.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/markusressel/openhasp-config-manager",
            "keywords": "openhasp,config,management",
            "license": "AGPL-3.0-or-later",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openhasp-config-manager",
            "package_url": "https://pypi.org/project/openhasp-config-manager/",
            "platform": null,
            "project_url": "https://pypi.org/project/openhasp-config-manager/",
            "project_urls": {
                "Homepage": "https://github.com/markusressel/openhasp-config-manager",
                "Repository": "https://github.com/markusressel/openhasp-config-manager"
            },
            "release_url": "https://pypi.org/project/openhasp-config-manager/0.0.2/",
            "requires_dist": [
                "Jinja2",
                "click",
                "paho-mqtt",
                "py-range-parse",
                "pyyaml",
                "requests"
            ],
            "requires_python": ">=3.10,<4.0",
            "summary": "A tool to manage all of your openHASP device configs in a centralized place.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14708288,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a6a419bce02382dca26c98eb7c68ca34",
                    "sha256": "2adf1ce6ebb9b5b1a2c0bb21fd682a193e4a2b7e29b6d5407fd27f76f9d8e0d0"
                },
                "downloads": -1,
                "filename": "openhasp_config_manager-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a6a419bce02382dca26c98eb7c68ca34",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10,<4.0",
                "size": 30188,
                "upload_time": "2022-08-09T20:03:38",
                "upload_time_iso_8601": "2022-08-09T20:03:38.742908Z",
                "url": "https://files.pythonhosted.org/packages/d9/70/3aeed502c3ef7b1c639dab75b1827333668f44266d7944854b54c8195491/openhasp_config_manager-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4fe1445903953fed5a31ee87844e1661",
                    "sha256": "15be9cae0920fb657a09120a9f52d78303876f686dcc299389b5ef0d690bb5a7"
                },
                "downloads": -1,
                "filename": "openhasp-config-manager-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "4fe1445903953fed5a31ee87844e1661",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10,<4.0",
                "size": 29302,
                "upload_time": "2022-08-09T20:03:39",
                "upload_time_iso_8601": "2022-08-09T20:03:39.941344Z",
                "url": "https://files.pythonhosted.org/packages/70/c0/36a30b780ce3a19239c91b07839c9ddb7b8ded536847bc20e34d09461382/openhasp-config-manager-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "Markus Ressel",
            "author_email": "mail@markusressel.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10"
            ],
            "description": "# openhasp-config-manager\n\nA tool to manage all of your [openHASP](https://github.com/HASwitchPlate/openHASP) device configs in a centralized place.\n\n# Features\n\n* [x] manage as many devices as you like\n* [x] share configuration files between devices\n* [x] jsonl preprocessing, which allows for\n  * [x] `//` comments within jsonl files\n  * [x] line breaks wherever you like\n  * [x] jinja2 templating within object values\n* [x] output validation\n  * [x] no more weird behavior due to invalid \"id\" range\n* [x] one click configuration upload to the device\n  * [x] automatic diffing to only update changed configuration files\n* [x] execute commands directly from the CLI (still needs a connection to the MQTT broker)\n\n# How to use\n\n## Installation\n\nSince openhasp-config-manager needs some dependencies (see [here](/pyproject.toml)) it is\nrecommended to install it inside of a virtualenv:\n\n```bash\nmkdir -p ~/venvs/openhasp-config-manager\npython3 -m venv ~/venvs/openhasp-config-manager\nsource ~/venvs/openhasp-config-manager/bin/activate\npip3 install openhasp-config-manager\nopenhasp-config-manager -h\n```\n\n## Configuration\n\nopenhasp-config-manager is first and foremost a configuration\nmanagement system. Simply follow the basic folder structure and\nconfig deployment will become trivial.\n\n* `devices`: In the root directory of your configuration, a folder called\n  `devices` is expected.\n  * In there you can create as many subfolders as\n    you like, naming them according to the physical devices that you\n    want to manage.\n    * Within those device subfolders you can then create\n      `*.jsonl` and `*.cmd` files.\n    * You must also provide a `config.json` file, see [config.json](#config.json)\n      for more info on how to set it.\n* `common`: The `common` directory can be used to put files\n  that should be included on _all_ device.\n\nYou are not limited to a folder depth of one. However, the files\non OpenHasp devices cannot be put into subfolders. Therefore, if you put\n`.json` or `.cmd` files into subfolders, the name of the\nresulting file on the OpenHasp device will be a concatenation of\nthe full subpath using an underscore (`_`) as a separator. So f.ex.\nthe file in the following structure:\n\n```text\nopenhasp-configs\n\u2514\u2500\u2500 devices\n    \u2514\u2500\u2500 touch_down_1\n        \u2514\u2500\u2500 0_home\n            \u2514\u2500\u2500 0_header.jsonl\n```\n\nwould only be uploaded to the `touch_down_1` device and named:\n`0_home_0_header.jsonl`\n\nA more advanced configuration layout could look something like this:\n\n```text\nopenhasp-configs\n\u251c\u2500\u2500 common\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 content\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 card.jsonl\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dialog\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 connected.jsonl\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 offline.jsonl\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 navigation_bar.jsonl\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 page_header.jsonl\n\u2514\u2500\u2500 devices\n    \u2514\u2500\u2500 touch_down_1\n        \u251c\u2500\u2500 0_home\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 0_header.jsonl\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 1_content.jsonl\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 page.cmd\n        \u251c\u2500\u2500 5_about\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 0_header.jsonl\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 1_content.jsonl\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 page.cmd\n        \u251c\u2500\u2500 boot.cmd\n        \u251c\u2500\u2500 config.json\n        \u251c\u2500\u2500 offline.cmd\n        \u2514\u2500\u2500 online.cmd\n```\n\n### config.json\n\nopenhasp-config-manager makes use of the `config.json` on your plate. It can use information \nto detect things like screen orientation, and also allows you to deploy config changes to your\nplate when you make changes in the config.json file. Since [the official API does not support\nuploading the full file](https://github.com/HASwitchPlate/openHASP/issues/363), only settings \nwhich can also be set through the web ui on the plate itself are currently supported.\n\nTo retrieve the initial version of the `config.json` file you can use the\nbuilt-in file browser integrated into the webserver of your OpenHASP plate.\n\nThe official `config.json` file doesn't provide enough info for openhasp-config-manager\nto enable all of its features though. To fix that openhasp-config-manager looks for an \nadditional section within the file which is not present by default:\n\n```json\n{\n  \"openhasp_config_manager\": {\n    \"device\": {\n      \"ip\": \"192.168.5.134\",\n      \"screen\": {\n        \"width\": 320,\n        \"height\": 480\n      }\n    }\n  },\n  \"wifi\": {\n    \"ssid\": \"Turris IoT\",\n    ...\n  }\n```\n\nSimply add this section to the `config.json` after you have retrieved it from\nthe plate.\n\n### Preprocessing\n\nopenhasp-config-manager runs all configuration files through a preprocessor, which allows us to use\nfeatures the original file format doesn't support, like f.ex. templating.\n\n#### Templating\n\nYou can use Jinja2 templates inside of values. You can access each of the objects using the\n`pXbY` syntax established by OpenHASP, where `X` is the `page` of an object and `Y` is its `id`.\n\nYou can use the full functionality of Jinja2 like f.ex. math operations, function calls or type conversions.\n\n```yaml\n{\n  \"page\": 1,\n  \"id\": 1,\n  \"x\": 0,\n  \"y\": 0,\n  ...\n}\n\n{\n  \"page\": 1,\n  \"id\": 2,\n  \"x\": \"{{ p1b1.x }}\",\n  \"y\": \"{{ p1b1.y + 10 }}\",\n  ...\n}\n```\n\n#### Variables\n\nBesides accessing other objects, you can also define custom variables yourself, which can then\nbe used inside of templates.\n\n##### Global\n\nGlobal variables can be specified by creating `*.yaml` files inside of the `common` folder.\n\nExample:\n\n`common/global.vars.yaml`\n\n```yaml\nabout:\n  page_title: \"About\"\n```\n\n`common/about_page.jsonl`\n\n```json lines\n{\n  \"page\": 9,\n  \"id\": 1,\n  ...\n  \"title\": \"{{ about.page_title }}\",\n  ...\n}\n```\n\n##### Device specific\n\nDevice specific variables can be specified by creating `*.yaml` files inside any of the sub-folders\nof the `device` folder.\n\n> **Note**\n>\n> Device specific variables will override global variables, given the same name.\n\nExample:\n\n`device/my_device/device.vars.yaml`\n\n```yaml\npage_title: \"My Device\"\n```\n\n`device/my_device/some_folder/some_page.jsonl`\n\n```json lines\n{\n  \"page\": 1,\n  \"id\": 1,\n  ...\n  \"title\": \"{{ page_title }}\",\n  ...\n}\n```\n\n`device/my_device/some_other_folder/some_page.jsonl`\n\n```json lines\n{\n  \"page\": 2,\n  \"id\": 1,\n  ...\n  \"title\": \"{{ page_title }}\",\n  ...\n}\n```\n\n## Deployment\n\nTo deploy your configurations to the already connected OpenHASP devices, simply use the\ncommand line tool `openhasp-config-manager`:\n\n```shell\n> openhasp-config-manager                                                         0 (0.604s) < 02:11:38\nUsage: openhasp-config-manager [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version   Show the version and exit.\n  -h, --help  Show this message and exit.\n\nCommands:\n  cmd       Sends a command request to a device.\n  deploy    Combines the generation and upload of a configuration.\n  generate  Generates the output files for all devices in the given...\n  upload    Uploads the previously generated configuration to their...\n```\n\n## Run commands\n\nOpenHasp allows you to run commands on a device by issuing MQTT messages.\nWhile openhasp-config-manager is first and foremost a config management system,\nit also allows you to run commands on a device without the need to install a separate\nMQTT client first. Note that the MQTT _server_ does need to be running and also has to\nbe reachable from your local machine.\n\nSee: https://openhasp.haswitchplate.com/latest/commands/\n\n```shell\n> openhasp-config-manager cmd -c ./openhasp-configs -d plate35 -C backlight -p \"{\\\"state\\\":\\\"on\\\",\\\"brightness\\\":128}\"\n```\n\n# FAQ\n\n## How do I see device logs?\n\nWith the device connected via USB cable, open a terminal and run:\n\n```shell\nbash -c \"screen -q -L -Logfile device.log /dev/ttyUSB0 115200 &> /dev/null; tail -F device.log; killall screen\"\n```\n\n# Contributing\n\nGitHub is for social coding: if you want to write code, I encourage contributions\nthrough pull requests from forks of this repository. Create GitHub tickets for\nbugs and new features and comment on the ones that you are interested in.\n\n# License\n\n```text\nopenhasp-config-manager is free software: you can redistribute it and/or modify\nit under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/markusressel/openhasp-config-manager",
            "keywords": "openhasp,config,management",
            "license": "AGPL-3.0-or-later",
            "maintainer": "",
            "maintainer_email": "",
            "name": "openhasp-config-manager",
            "package_url": "https://pypi.org/project/openhasp-config-manager/",
            "platform": null,
            "project_url": "https://pypi.org/project/openhasp-config-manager/",
            "project_urls": {
                "Homepage": "https://github.com/markusressel/openhasp-config-manager",
                "Repository": "https://github.com/markusressel/openhasp-config-manager"
            },
            "release_url": "https://pypi.org/project/openhasp-config-manager/0.0.3/",
            "requires_dist": [
                "Jinja2",
                "click",
                "paho-mqtt",
                "py-range-parse",
                "pyyaml",
                "requests"
            ],
            "requires_python": ">=3.10,<4.0",
            "summary": "A tool to manage all of your openHASP device configs in a centralized place.",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14708288,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "359a1a287207ddc82faca5885c7c0ba7",
                    "sha256": "f98d257a5d7f6a740ab9be5efcea8830cecf7459eb6166bc9cd9aba212591343"
                },
                "downloads": -1,
                "filename": "openhasp_config_manager-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "359a1a287207ddc82faca5885c7c0ba7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10,<4.0",
                "size": 30281,
                "upload_time": "2022-08-09T21:29:50",
                "upload_time_iso_8601": "2022-08-09T21:29:50.629286Z",
                "url": "https://files.pythonhosted.org/packages/08/f6/c1634131610fb19cb9bbdb42db8dc0ba07245bc11afd7fa5511c0483402a/openhasp_config_manager-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "48ffb7baa65dcb0f1f84dac1726fbf9b",
                    "sha256": "ca1ac3d8f34e8867d5ae815a91c42cb4a9232c76216af1b419ae15721f578648"
                },
                "downloads": -1,
                "filename": "openhasp-config-manager-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "48ffb7baa65dcb0f1f84dac1726fbf9b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10,<4.0",
                "size": 29583,
                "upload_time": "2022-08-09T21:29:52",
                "upload_time_iso_8601": "2022-08-09T21:29:52.405588Z",
                "url": "https://files.pythonhosted.org/packages/dd/06/e8f700f68d4b4b02869551ac47d75c123e2793b0d66eeb4ad7c3c318c682/openhasp-config-manager-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}