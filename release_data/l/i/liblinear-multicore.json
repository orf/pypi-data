{
    "2.43.0": {
        "info": {
            "author": "ML group @ National Taiwan University",
            "author_email": "cjlin@csie.ntu.edu.tw",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/plain",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "liblinear-multicore",
            "package_url": "https://pypi.org/project/liblinear-multicore/",
            "platform": "",
            "project_url": "https://pypi.org/project/liblinear-multicore/",
            "project_urls": {
                "Homepage": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear"
            },
            "release_url": "https://pypi.org/project/liblinear-multicore/2.43.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python binding of multi-core LIBLINEAR",
            "version": "2.43.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15028998,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3b70d755ec28840b971d402895fb7079",
                    "sha256": "8cefccd6ca8dbcc3f3b79b681235fa80da1ed4f4695db934311cd2dca0370460"
                },
                "downloads": -1,
                "filename": "liblinear-multicore-2.43.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3b70d755ec28840b971d402895fb7079",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 48500,
                "upload_time": "2021-03-31T04:14:35",
                "upload_time_iso_8601": "2021-03-31T04:14:35.612109Z",
                "url": "https://files.pythonhosted.org/packages/36/f7/be803d59226fd31ad617b6bd1049ec33537cc478945ce4ef3a24e5964abf/liblinear-multicore-2.43.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.44.0": {
        "info": {
            "author": "ML group @ National Taiwan University",
            "author_email": "cjlin@csie.ntu.edu.tw",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/plain",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "liblinear-multicore",
            "package_url": "https://pypi.org/project/liblinear-multicore/",
            "platform": null,
            "project_url": "https://pypi.org/project/liblinear-multicore/",
            "project_urls": {
                "Homepage": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear"
            },
            "release_url": "https://pypi.org/project/liblinear-multicore/2.44.0/",
            "requires_dist": [
                "scipy"
            ],
            "requires_python": "",
            "summary": "Python binding of multi-core LIBLINEAR",
            "version": "2.44.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15028998,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fff6d50d6b57c6a60f1e3615fbb0966d",
                    "sha256": "d048cdc7d351eeb21077be2d27cb48c68d13944fb524f06425f7fb20aa46d138"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.44.0-cp310-cp310-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "fff6d50d6b57c6a60f1e3615fbb0966d",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": null,
                "size": 63025,
                "upload_time": "2022-03-18T14:20:19",
                "upload_time_iso_8601": "2022-03-18T14:20:19.947264Z",
                "url": "https://files.pythonhosted.org/packages/8f/95/54c5da86fe031be5a1342d4484401d1298c6a53171bc76e38a2e912afab8/liblinear_multicore-2.44.0-cp310-cp310-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1eec05734d43c306ee7711f02e30b668",
                    "sha256": "daf1af7e16a5ae290593afea181e2d8c2c30203f2c93ddf0a042e6172295ae9e"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.44.0-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "1eec05734d43c306ee7711f02e30b668",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 63020,
                "upload_time": "2022-03-18T14:20:22",
                "upload_time_iso_8601": "2022-03-18T14:20:22.477262Z",
                "url": "https://files.pythonhosted.org/packages/1e/35/afe1b0cd1e932f8ad712c9b2ab34d5b38b526d870d33cf5f2781aad7634a/liblinear_multicore-2.44.0-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d6873e72b84e9dcc8e86396b5dc38a45",
                    "sha256": "ece44b2072826e88616b96ef41002aec2816f72b596184c25394befc1a2b9efe"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.44.0-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "d6873e72b84e9dcc8e86396b5dc38a45",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 63023,
                "upload_time": "2022-03-18T14:20:24",
                "upload_time_iso_8601": "2022-03-18T14:20:24.229113Z",
                "url": "https://files.pythonhosted.org/packages/b2/9c/a1f300a5f9dfb012a87ae780fd68f4039591d4e2d3c2d2b682de4ac442e8/liblinear_multicore-2.44.0-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ec9a1a7495ea4d74c4be5029b6e70c9b",
                    "sha256": "88f4e3ecb474c9a443500b340ea4a2cd58836197e13d8166195360576b6a67c5"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.44.0-cp38-cp38-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "ec9a1a7495ea4d74c4be5029b6e70c9b",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 63022,
                "upload_time": "2022-03-18T14:20:26",
                "upload_time_iso_8601": "2022-03-18T14:20:26.306004Z",
                "url": "https://files.pythonhosted.org/packages/a8/16/e56b810da48bdb8cb2fc7f826111ef16db629c82f51a354714e9e37e9c64/liblinear_multicore-2.44.0-cp38-cp38-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9860cee379d86d2bb950a2a29c69cc77",
                    "sha256": "b33a0c8a82e687a8430c60cfb6138164882020b10cdf7c82b4856cf7f3e5e28d"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.44.0-cp39-cp39-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "9860cee379d86d2bb950a2a29c69cc77",
                "packagetype": "bdist_wheel",
                "python_version": "cp39",
                "requires_python": null,
                "size": 63023,
                "upload_time": "2022-03-18T14:20:28",
                "upload_time_iso_8601": "2022-03-18T14:20:28.237063Z",
                "url": "https://files.pythonhosted.org/packages/a8/0c/2441f801133fe0b2e04e29db46d4f0e84c01da7da520cb9c63e245223b5d/liblinear_multicore-2.44.0-cp39-cp39-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d44a974fb5af421efe841b9973354f22",
                    "sha256": "c13fe59839a97da9dfba143226c685ebd2fe5ff794f4738ff8deafbbc473dad2"
                },
                "downloads": -1,
                "filename": "liblinear-multicore-2.44.0.tar.gz",
                "has_sig": false,
                "md5_digest": "d44a974fb5af421efe841b9973354f22",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 47273,
                "upload_time": "2022-03-18T14:20:29",
                "upload_time_iso_8601": "2022-03-18T14:20:29.890827Z",
                "url": "https://files.pythonhosted.org/packages/45/dd/bd5f75f987179f61adcd11c7946703035e059c06038956a7b8df0cfea78f/liblinear-multicore-2.44.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.45.0": {
        "info": {
            "author": "ML group @ National Taiwan University",
            "author_email": "cjlin@csie.ntu.edu.tw",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/plain",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "liblinear-multicore",
            "package_url": "https://pypi.org/project/liblinear-multicore/",
            "platform": null,
            "project_url": "https://pypi.org/project/liblinear-multicore/",
            "project_urls": {
                "Homepage": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear"
            },
            "release_url": "https://pypi.org/project/liblinear-multicore/2.45.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python binding of multi-core LIBLINEAR",
            "version": "2.45.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15028998,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "29886e0640826f643a16f90ff1f73b42",
                    "sha256": "e64ad66c6a551b36b3ce296d86af4da8317b8c3fa59b1d253bf15c3aeb61f418"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.0-cp310-cp310-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "29886e0640826f643a16f90ff1f73b42",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": null,
                "size": 63050,
                "upload_time": "2022-08-12T00:53:02",
                "upload_time_iso_8601": "2022-08-12T00:53:02.426393Z",
                "url": "https://files.pythonhosted.org/packages/38/57/394d3a3a0f26d7868132edf86cd29e4cdc251d9a3d51ac15799e211b7f79/liblinear_multicore-2.45.0-cp310-cp310-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "36ca42248b416224ed50b05a11aa28e3",
                    "sha256": "835ecdf918293a560b0754c9e9676ab016859c743e70a236e7cc1a611b49421c"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.0-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "36ca42248b416224ed50b05a11aa28e3",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 63049,
                "upload_time": "2022-08-12T00:53:04",
                "upload_time_iso_8601": "2022-08-12T00:53:04.841718Z",
                "url": "https://files.pythonhosted.org/packages/a9/ba/d534278cac77439054d0011aaea7f3eec769ca5efdcfebadddd8218c1bb8/liblinear_multicore-2.45.0-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5c3da5c5f7e56231ce2f7c1058aae486",
                    "sha256": "d31cf29c6b7614d49d9c3d5c78b8c0c796733300555a77cdeac3a922d5259387"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.0-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "5c3da5c5f7e56231ce2f7c1058aae486",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 63050,
                "upload_time": "2022-08-12T00:53:07",
                "upload_time_iso_8601": "2022-08-12T00:53:07.292646Z",
                "url": "https://files.pythonhosted.org/packages/e1/80/d0308c23efb0b00522252f92e0f21f30a89189f9d5ca3b81951b54c17c1a/liblinear_multicore-2.45.0-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "eb33421abb0b3c0ed715f5fd1a795118",
                    "sha256": "9d50c7065b38c2706c10b3e516103f6fe2267d8b4c1b8e2f6eb829f6f60b76ac"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.0-cp38-cp38-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "eb33421abb0b3c0ed715f5fd1a795118",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 63047,
                "upload_time": "2022-08-12T00:53:09",
                "upload_time_iso_8601": "2022-08-12T00:53:09.918645Z",
                "url": "https://files.pythonhosted.org/packages/e4/ab/d24a3ace00d732296898638d72b4b155a2cff892180b08e393a4e3e49cea/liblinear_multicore-2.45.0-cp38-cp38-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f4d39259488a1890f5ac5c4ec64901ac",
                    "sha256": "9d919eec597f3ad90a1933eb8e131a82be529de6c687449cf213eacef94aa83b"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.0-cp39-cp39-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "f4d39259488a1890f5ac5c4ec64901ac",
                "packagetype": "bdist_wheel",
                "python_version": "cp39",
                "requires_python": null,
                "size": 63049,
                "upload_time": "2022-08-12T00:53:12",
                "upload_time_iso_8601": "2022-08-12T00:53:12.512893Z",
                "url": "https://files.pythonhosted.org/packages/31/49/c021d50228b01ae07da03893567bb6907f90b1e7a85828e44231c0b2c7a3/liblinear_multicore-2.45.0-cp39-cp39-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0fa3c89a837392aecf62c04c0ef466d5",
                    "sha256": "08cb45635c56d4c420ca7deab3c6713a95cced4d4c0b01b424e6dd1f2e030006"
                },
                "downloads": -1,
                "filename": "liblinear-multicore-2.45.0.tar.gz",
                "has_sig": false,
                "md5_digest": "0fa3c89a837392aecf62c04c0ef466d5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 47269,
                "upload_time": "2022-08-12T00:52:44",
                "upload_time_iso_8601": "2022-08-12T00:52:44.208999Z",
                "url": "https://files.pythonhosted.org/packages/14/a0/42b101edd68d9e188f4c4ecce9b2732a94cf4e1043afcf0b554afbc4b260/liblinear-multicore-2.45.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.45.1": {
        "info": {
            "author": "ML group @ National Taiwan University",
            "author_email": "cjlin@csie.ntu.edu.tw",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "------------------------------------------------\n--- Multi-core Python Interface of LIBLINEAR ---\n------------------------------------------------\n\nTable of Contents\n=================\n\n- Introduction\n- Installation via PyPI\n- Installation via Sources\n- Quick Start\n- Quick Start with Scipy\n- Design Description\n- Data Structures\n- Utility Functions\n- Additional Information\n\nIntroduction\n============\n\nPython (http://www.python.org/) is a programming language suitable for rapid\ndevelopment. This tool provides a simple Python interface to multi-core LIBLINEAR, a library\nfor support vector machines in multi-core machines (http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear). The\ninterface is very easy to use as the usage is the same as that of LIBLINEAR. The\ninterface is developed with the built-in Python library \"ctypes.\"\n\nDetails of multi-core implementations can be found at http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear\n\nInstallation via PyPI\n=====================\n\nTo install the interface from PyPI, execute the following command:\n\n> pip install -U liblinear-multicore\n\nInstallation via Sources\n========================\n\nAlternatively, you may install the interface from sources by\ngenerating the LIBLINEAR shared library.\n\nDepending on your use cases, you can choose between local-directory\nand system-wide installation.\n\n- Local-directory installation:\n\n    On Unix systems, type\n\n    > make\n\n    This generates a .so file in the LIBLINEAR main directory and you\n    can run the interface in the current python directory.\n    \n- System-wide installation:\n\n    Type\n\n    > pip install -e .\n\n    or\n\n    > pip install --user -e .\n\n    The option --user would install the package in the home directory\n    instead of the system directory, and thus does not require the\n    root privilege.\n\n    Please note that you must keep the sources after the installation.\n\n    In addition, DON'T use the following FAILED commands\n\n    > python setup.py install (failed to run at the python directory)\n    > pip install .\n\nQuick Start\n===========\n\n\"Quick Start with Scipy\" is in the next section.\n\nThere are two levels of usage. The high-level one uses utility\nfunctions in liblinearutil.py and commonutil.py (shared with LIBSVM\nand imported by svmutil.py). The usage is the same as the LIBLINEAR\nMATLAB interface.\n\nSpecify the option '-m nr_thread' to use nr_thread threads for parallelizing solvers\n(only for -s 0, -s 1, -s 2, -s 3, -s 5, -s 6, and -s 11)\n\n>>> from liblinear.liblinearutil import *\n# Read data in LIBSVM format\n>>> y, x = svm_read_problem('../heart_scale')\n>>> m = train(y[:200], x[:200], '-c 4 -m 8')\n>>> p_label, p_acc, p_val = predict(y[200:], x[200:], m)\n\n# Construct problem in python format\n# Dense data\n>>> y, x = [1,-1], [[1,0,1], [-1,0,-1]]\n# Sparse data\n>>> y, x = [1,-1], [{1:1, 3:1}, {1:-1,3:-1}]\n>>> prob  = problem(y, x)\n>>> param = parameter('-s 0 -c 4 -B 1')\n>>> m = train(prob, param)\n\n# Other utility functions\n>>> save_model('heart_scale.model', m)\n>>> m = load_model('heart_scale.model')\n>>> p_label, p_acc, p_val = predict(y, x, m, '-b 1')\n>>> ACC, MSE, SCC = evaluations(y, p_label)\n\n# Getting online help\n>>> help(train)\n\nThe low-level use directly calls C interfaces imported by liblinear.py. Note that\nall arguments and return values are in ctypes format. You need to handle them\ncarefully.\n\n>>> from liblinear.liblinear import *\n>>> prob = problem([1,-1], [{1:1, 3:1}, {1:-1,3:-1}])\n>>> param = parameter('-c 4')\n>>> m = liblinear.train(prob, param) # m is a ctype pointer to a model\n# Convert a Python-format instance to feature_nodearray, a ctypes structure\n>>> x0, max_idx = gen_feature_nodearray({1:1, 3:1})\n>>> label = liblinear.predict(m, x0)\n\nQuick Start with Scipy\n======================\n\nMake sure you have Scipy installed to proceed in this section.\nIf numba (http://numba.pydata.org) is installed, some operations will be much faster.\n\nThere are two levels of usage. The high-level one uses utility functions\nin liblinearutil.py and the usage is the same as the LIBLINEAR MATLAB interface.\n\n>>> import numpy as np\n>>> import scipy\n>>> from liblinear.liblinearutil import *\n# Read data in LIBSVM format\n>>> y, x = svm_read_problem('../heart_scale', return_scipy = True) # y: ndarray, x: csr_matrix\n>>> m = train(y[:200], x[:200, :], '-c 4')\n>>> p_label, p_acc, p_val = predict(y[200:], x[200:, :], m)\n\n# Construct problem in Scipy format\n# Dense data: numpy ndarray\n>>> y, x = np.asarray([1,-1]), np.asarray([[1,0,1], [-1,0,-1]])\n# Sparse data: scipy csr_matrix((data, (row_ind, col_ind))\n>>> y, x = np.asarray([1,-1]), scipy.sparse.csr_matrix(([1, 1, -1, -1], ([0, 0, 1, 1], [0, 2, 0, 2])))\n>>> prob  = problem(y, x)\n>>> param = parameter('-s 0 -c 4 -B 1')\n>>> m = train(prob, param)\n\n# Apply data scaling in Scipy format\n>>> y, x = svm_read_problem('../heart_scale', return_scipy=True)\n>>> scale_param = csr_find_scale_param(x, lower=0)\n>>> scaled_x = csr_scale(x, scale_param)\n\n# Other utility functions\n>>> save_model('heart_scale.model', m)\n>>> m = load_model('heart_scale.model')\n>>> p_label, p_acc, p_val = predict(y, x, m, '-b 1')\n>>> ACC, MSE, SCC = evaluations(y, p_label)\n\n# Getting online help\n>>> help(train)\n\nThe low-level use directly calls C interfaces imported by liblinear.py. Note that\nall arguments and return values are in ctypes format. You need to handle them\ncarefully.\n\n>>> from liblinear.liblinear import *\n>>> prob = problem(np.asarray([1,-1]), scipy.sparse.csr_matrix(([1, 1, -1, -1], ([0, 0, 1, 1], [0, 2, 0, 2]))))\n>>> param = parameter('-c 4')\n>>> m = liblinear.train(prob, param) # m is a ctype pointer to a model\n# Convert a tuple of ndarray (index, data) to feature_nodearray, a ctypes structure\n# Note that index starts from 0, though the following example will be changed to 1:1, 3:1 internally\n>>> x0, max_idx = gen_feature_nodearray((np.asarray([0,2]), np.asarray([1,1])))\n>>> label = liblinear.predict(m, x0)\n\nDesign Description\n==================\n\nThere are two files liblinear.py and liblinearutil.py, which respectively correspond to\nlow-level and high-level use of the interface.\n\nIn liblinear.py, we adopt the Python built-in library \"ctypes,\" so that\nPython can directly access C structures and interface functions defined\nin linear.h.\n\nWhile advanced users can use structures/functions in liblinear.py, to\navoid handling ctypes structures, in liblinearutil.py we provide some easy-to-use\nfunctions. The usage is similar to LIBLINEAR MATLAB interface.\n\nData Structures\n===============\n\nThree data structures derived from linear.h are node, problem, and\nparameter. They all contain fields with the same names in\nlinear.h. Access these fields carefully because you directly use a C structure\ninstead of a Python object. The following description introduces additional\nfields and methods.\n\nBefore using the data structures, execute the following command to load the\nLIBLINEAR shared library:\n\n    >>> from liblinear.liblinear import *\n\n- class feature_node:\n\n    Construct a feature_node.\n\n    >>> node = feature_node(idx, val)\n\n    idx: an integer indicates the feature index.\n\n    val: a float indicates the feature value.\n\n    Show the index and the value of a node.\n\n    >>> print(node)\n\n- Function: gen_feature_nodearray(xi [,feature_max=None])\n\n    Generate a feature vector from a Python list/tuple/dictionary, numpy ndarray or tuple of (index, data):\n\n    >>> xi_ctype, max_idx = gen_feature_nodearray({1:1, 3:1, 5:-2})\n\n    xi_ctype: the returned feature_nodearray (a ctypes structure)\n\n    max_idx: the maximal feature index of xi\n\n    feature_max: if feature_max is assigned, features with indices larger than\n                 feature_max are removed.\n\n- class problem:\n\n    Construct a problem instance\n\n    >>> prob = problem(y, x [,bias=-1])\n\n    y: a Python list/tuple/ndarray of l labels (type must be int/double).\n\n    x: 1. a list/tuple of l training instances. Feature vector of\n          each training instance is a list/tuple or dictionary.\n\n       2. an l * n numpy ndarray or scipy spmatrix (n: number of features).\n\n    bias: if bias >= 0, instance x becomes [x; bias]; if < 0, no bias term\n          added (default -1)\n\n    You can also modify the bias value by\n\n    >>> prob.set_bias(1)\n\n    Note that if your x contains sparse data (i.e., dictionary), the internal\n    ctypes data format is still sparse.\n\n- class parameter:\n\n    Construct a parameter instance\n\n    >>> param = parameter('training_options')\n\n    If 'training_options' is empty, LIBLINEAR default values are applied.\n\n    Set param to LIBLINEAR default values.\n\n    >>> param.set_to_default_values()\n\n    Parse a string of options.\n\n    >>> param.parse_options('training_options')\n\n    Show values of parameters.\n\n    >>> print(param)\n\n- class model:\n\n    There are two ways to obtain an instance of model:\n\n    >>> model_ = train(y, x)\n    >>> model_ = load_model('model_file_name')\n\n    Note that the returned structure of interface functions\n    liblinear.train and liblinear.load_model is a ctypes pointer of\n    model, which is different from the model object returned\n    by train and load_model in liblinearutil.py. We provide a\n    function toPyModel for the conversion:\n\n    >>> model_ptr = liblinear.train(prob, param)\n    >>> model_ = toPyModel(model_ptr)\n\n    If you obtain a model in a way other than the above approaches,\n    handle it carefully to avoid memory leak or segmentation fault.\n\n    Some interface functions to access LIBLINEAR models are wrapped as\n    members of the class model:\n\n    >>> nr_feature =  model_.get_nr_feature()\n    >>> nr_class = model_.get_nr_class()\n    >>> class_labels = model_.get_labels()\n    >>> is_prob_model = model_.is_probability_model()\n    >>> is_regression_model = model_.is_regression_model()\n\n    The decision function is W*x + b, where\n        W is an nr_class-by-nr_feature matrix, and\n        b is a vector of size nr_class.\n    To access W_kj (i.e., coefficient for the k-th class and the j-th feature)\n    and b_k (i.e., bias for the k-th class), use the following functions.\n\n    >>> W_kj = model_.get_decfun_coef(feat_idx=j, label_idx=k)\n    >>> b_k = model_.get_decfun_bias(label_idx=k)\n\n    We also provide a function to extract w_k (i.e., the k-th row of W) and\n    b_k directly as follows.\n\n    >>> [w_k, b_k] = model_.get_decfun(label_idx=k)\n\n    Note that w_k is a Python list of length nr_feature, which means that\n        w_k[0] = W_k1.\n    For regression models, W is just a vector of length nr_feature. Either\n    set label_idx=0 or omit the label_idx parameter to access the coefficients.\n\n    >>> W_j = model_.get_decfun_coef(feat_idx=j)\n    >>> b = model_.get_decfun_bias()\n    >>> [W, b] = model_.get_decfun()\n\n    For one-class SVM models, label_idx is ignored and b=-rho is\n    returned from get_decfun(). That is, the decision function is\n    w*x+b = w*x-rho.\n\n    >>> rho = model_.get_decfun_rho()\n    >>> [W, b] = model_.get_decfun()\n\n    Note that in get_decfun_coef, get_decfun_bias, and get_decfun, feat_idx\n    starts from 1, while label_idx starts from 0. If label_idx is not in the\n    valid range (0 to nr_class-1), then a NaN will be returned; and if feat_idx\n    is not in the valid range (1 to nr_feature), then a zero value will be\n    returned. For regression models, label_idx is ignored.\n\nUtility Functions\n=================\n\nTo use utility functions, type\n\n    >>> from liblinear.liblinearutil import *\n\nThe above command loads\n    train()            : train a linear model\n    predict()          : predict testing data\n    svm_read_problem() : read the data from a LIBSVM-format file.\n    load_model()       : load a LIBLINEAR model.\n    save_model()       : save model to a file.\n    evaluations()      : evaluate prediction results.\n\n- Function: train\n\n    There are three ways to call train()\n\n    >>> model = train(y, x [, 'training_options'])\n    >>> model = train(prob [, 'training_options'])\n    >>> model = train(prob, param)\n\n    y: a list/tuple/ndarray of l training labels (type must be int/double).\n\n    x: 1. a list/tuple of l training instances. Feature vector of\n          each training instance is a list/tuple or dictionary.\n\n       2. an l * n numpy ndarray or scipy spmatrix (n: number of features).\n\n    training_options: a string in the same form as that for LIBLINEAR command\n                      mode.\n\n    prob: a problem instance generated by calling\n          problem(y, x).\n\n    param: a parameter instance generated by calling\n           parameter('training_options')\n\n    model: the returned model instance. See linear.h for details of this\n           structure. If '-v' is specified, cross validation is\n           conducted and the returned model is just a scalar: cross-validation\n           accuracy for classification and mean-squared error for regression.\n\n           If the '-C' option is specified, best parameters are found\n           by cross validation. The parameter selection utility is supported\n           only by -s 0, -s 2 (for finding C) and -s 11 (for finding C, p).\n           The returned structure is a triple with the best C, the best p,\n           and the corresponding cross-validation accuracy or mean squared\n           error. The returned best p for -s 0 and -s 2 is set to -1 because\n           the p parameter is not used by classification models.\n\n\n    To train the same data many times with different\n    parameters, the second and the third ways should be faster..\n\n    Examples:\n\n    >>> y, x = svm_read_problem('../heart_scale')\n    >>> prob = problem(y, x)\n    >>> param = parameter('-s 3 -c 5 -q')\n    >>> m = train(y, x, '-c 5')\n    >>> m = train(prob, '-w1 5 -c 5')\n    >>> m = train(prob, param)\n    >>> CV_ACC = train(y, x, '-v 3')\n    >>> best_C, best_p, best_rate = train(y, x, '-C -s 0') # best_p is only for -s 11\n    >>> m = train(y, x, '-c {0} -s 0'.format(best_C)) # use the same solver: -s 0\n\n- Function: predict\n\n    To predict testing data with a model, use\n\n    >>> p_labs, p_acc, p_vals = predict(y, x, model [,'predicting_options'])\n\n    y: a list/tuple/ndarray of l true labels (type must be int/double).\n       It is used for calculating the accuracy. Use [] if true labels are\n       unavailable.\n\n    x: 1. a list/tuple of l training instances. Feature vector of\n          each training instance is a list/tuple or dictionary.\n\n       2. an l * n numpy ndarray or scipy spmatrix (n: number of features).\n\n    predicting_options: a string of predicting options in the same format as\n                        that of LIBLINEAR.\n\n    model: a model instance.\n\n    p_labels: a list of predicted labels\n\n    p_acc: a tuple including accuracy (for classification), mean\n           squared error, and squared correlation coefficient (for\n           regression).\n\n    p_vals: a list of decision values or probability estimates (if '-b 1'\n            is specified). If k is the number of classes, for decision values,\n            each element includes results of predicting k binary-class\n            SVMs. If k = 2 and solver is not MCSVM_CS, only one decision value\n            is returned. For probabilities, each element contains k values\n            indicating the probability that the testing instance is in each class.\n            Note that the order of classes here is the same as 'model.label'\n            field in the model structure.\n\n    Example:\n\n    >>> m = train(y, x, '-c 5')\n    >>> p_labels, p_acc, p_vals = predict(y, x, m)\n\n- Functions: svm_read_problem/load_model/save_model\n\n    See the usage by examples:\n\n    >>> y, x = svm_read_problem('data.txt')\n    >>> m = load_model('model_file')\n    >>> save_model('model_file', m)\n\n- Function: evaluations\n\n    Calculate some evaluations using the true values (ty) and the predicted\n    values (pv):\n\n    >>> (ACC, MSE, SCC) = evaluations(ty, pv, useScipy)\n\n    ty: a list/tuple/ndarray of true values.\n\n    pv: a list/tuple/ndarray of predicted values.\n\n    useScipy: convert ty, pv to ndarray, and use scipy functions to do the evaluation\n\n    ACC: accuracy.\n\n    MSE: mean squared error.\n\n    SCC: squared correlation coefficient.\n\n- Function: csr_find_scale_parameter/csr_scale\n\n    Scale data in csr format.\n\n    >>> param = csr_find_scale_param(x [, lower=l, upper=u])\n    >>> x = csr_scale(x, param)\n\n    x: a csr_matrix of data.\n\n    l: x scaling lower limit; default -1.\n\n    u: x scaling upper limit; default 1.\n\n    The scaling process is: x * diag(coef) + ones(l, 1) * offset'\n\n    param: a dictionary of scaling parameters, where param['coef'] = coef and param['offset'] = offset.\n\n    coef: a scipy array of scaling coefficients.\n\n    offset: a scipy array of scaling offsets.\n\nAdditional Information\n======================\n\nThis interface was originally written by Hsiang-Fu Yu from Department of Computer\nScience, National Taiwan University. If you find this tool useful, please\ncite LIBLINEAR as follows\n\nR.-E. Fan, K.-W. Chang, C.-J. Hsieh, X.-R. Wang, and C.-J. Lin.\nLIBLINEAR: A Library for Large Linear Classification, Journal of\nMachine Learning Research 9(2008), 1871-1874. Software available at\nhttp://www.csie.ntu.edu.tw/~cjlin/liblinear\n\nFor any question, please contact Chih-Jen Lin <cjlin@csie.ntu.edu.tw>,\nor check the following pages:\n\nhttp://www.csie.ntu.edu.tw/~cjlin/liblinear/faq.html\nhttp://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear\n\n\n",
            "description_content_type": "text/plain",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "liblinear-multicore",
            "package_url": "https://pypi.org/project/liblinear-multicore/",
            "platform": null,
            "project_url": "https://pypi.org/project/liblinear-multicore/",
            "project_urls": {
                "Homepage": "https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/multicore-liblinear"
            },
            "release_url": "https://pypi.org/project/liblinear-multicore/2.45.1/",
            "requires_dist": [
                "scipy"
            ],
            "requires_python": "",
            "summary": "Python binding of multi-core LIBLINEAR",
            "version": "2.45.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15028998,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a84b211a8292a8009f8d7c1e28c18256",
                    "sha256": "84059a085f6b1a02efa071a13f590c2110929af75f4c7f2e777ef3514c4743fa"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.1-cp310-cp310-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "a84b211a8292a8009f8d7c1e28c18256",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": null,
                "size": 64266,
                "upload_time": "2022-09-08T07:48:06",
                "upload_time_iso_8601": "2022-09-08T07:48:06.085302Z",
                "url": "https://files.pythonhosted.org/packages/04/7b/c13b48b6eb476b5fc726950ab825241d9c2e9ea7888178949a7c02d9b0ba/liblinear_multicore-2.45.1-cp310-cp310-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0db07a84ad16772893f980f38445c823",
                    "sha256": "9ce57987436188c1d96a517fad68c459140ea58e02eb38de77b292418b2b9093"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.1-cp36-cp36m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "0db07a84ad16772893f980f38445c823",
                "packagetype": "bdist_wheel",
                "python_version": "cp36",
                "requires_python": null,
                "size": 64266,
                "upload_time": "2022-09-08T07:48:08",
                "upload_time_iso_8601": "2022-09-08T07:48:08.539875Z",
                "url": "https://files.pythonhosted.org/packages/3a/c4/3419126c533eb9dd9dc6040f60f471816cf115eadb29e5413f3927525b21/liblinear_multicore-2.45.1-cp36-cp36m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4c0c526fa826f6ab82a4067982edce38",
                    "sha256": "7b3730fe20de28a98e453e0452f0e681f654384cae53ac5d1607a74160d3be4c"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.1-cp37-cp37m-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "4c0c526fa826f6ab82a4067982edce38",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 64265,
                "upload_time": "2022-09-08T07:48:10",
                "upload_time_iso_8601": "2022-09-08T07:48:10.779978Z",
                "url": "https://files.pythonhosted.org/packages/79/31/a0f2fe9fef4141a9375b910cf325e308895ff3077fc8378a14c24696e444/liblinear_multicore-2.45.1-cp37-cp37m-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2661c50340a34b27a76718d878522dd4",
                    "sha256": "df98f9f6f929d4adcf8934880fedb80ad660b0f4811847940a82a568ac243cfc"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.1-cp38-cp38-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "2661c50340a34b27a76718d878522dd4",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": null,
                "size": 64263,
                "upload_time": "2022-09-08T07:48:12",
                "upload_time_iso_8601": "2022-09-08T07:48:12.759013Z",
                "url": "https://files.pythonhosted.org/packages/0e/cf/14529697246cfbb866061ec83020649ac22c6fbd739e7c6832c9752f92a0/liblinear_multicore-2.45.1-cp38-cp38-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5bf6e8b9c346eaeab37ac91c7e7541eb",
                    "sha256": "51d07a2fa37026c44736e6dfe1a49180a6313aa17623a6bd10184c44130db753"
                },
                "downloads": -1,
                "filename": "liblinear_multicore-2.45.1-cp39-cp39-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "5bf6e8b9c346eaeab37ac91c7e7541eb",
                "packagetype": "bdist_wheel",
                "python_version": "cp39",
                "requires_python": null,
                "size": 64262,
                "upload_time": "2022-09-08T07:48:15",
                "upload_time_iso_8601": "2022-09-08T07:48:15.273761Z",
                "url": "https://files.pythonhosted.org/packages/80/50/35ae8bea08555331b5bdee80a13c5048776e5b75fbfd5fb6e850145f2b19/liblinear_multicore-2.45.1-cp39-cp39-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "437b78d114d8918b754b5539994a0de1",
                    "sha256": "bdbf99a4bed1a9a5538e3095a955601273213d7fff54b97798608623e6d1e090"
                },
                "downloads": -1,
                "filename": "liblinear-multicore-2.45.1.tar.gz",
                "has_sig": false,
                "md5_digest": "437b78d114d8918b754b5539994a0de1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 48698,
                "upload_time": "2022-09-08T07:48:17",
                "upload_time_iso_8601": "2022-09-08T07:48:17.359552Z",
                "url": "https://files.pythonhosted.org/packages/b4/c1/8c3271106a39d6c734979719818a3e671533ea473ac83534009523eda5d3/liblinear-multicore-2.45.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}