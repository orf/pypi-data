{
    "1.0.0": {
        "info": {
            "author": "Damian Barabonkov",
            "author_email": "damianb@alum.mit.edu",
            "bugtrack_url": null,
            "classifiers": [
                "Framework :: Pytest",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Topic :: Software Development :: Testing :: Unit"
            ],
            "description": "# AlgoPytest &mdash; Framework for Testing Algorand Smart Contracts using PyTest\n\n*AlgoPytest* is a Pytest plugin framework which hides away all of the complexity and repetitiveness that comes with testing Algorand Smart Contracts. \n\nA lot of boilerplate code is necessary in order to setup a suitable test environment. *AlgoPytest* takes care of all that. It handles deploying the smart contract, creating and funding any necessary user accounts and then using those accounts to interact with the smart contract itself. Additionally, each test is a run in a freshly deployed smart contract, facilitating a clean slate which prevents any stateful interference from any previously run tests. \n\n## Getting Started\n\nThe most relevant information needed for getting off the ground are:\n- [Read-The-Docs documentation](https://algopytest.readthedocs.io/en/latest/)\n- [Installation](#installation)\n- [Simplified Usage](#simplified-usage)\n- [Demos](#demos)\n\nThis project's Read-The-Docs page is especially useful, since it lists and describes all of the available methods and fixtures provided to you by *AlgoPytest*.\n\n## Installation\n\n### Prerequisites\n\n- Python 3 and `pip`\n- Install the Algorand [sandbox](https://github.com/algorand/sandbox).\n\n### Installing AlgoPytest\n```bash\ngit clone https://github.com/DamianB-BitFlipper/algopytest.git\ncd algopytest\npip install .\n```\n\n## Simplified Usage\nMake sure the sandbox is up and running. Preferably use a local network for your testing. Note: There is currently an issue with the `dev` sandbox which makes it work not too well with *AlgoPytest*. Networks `release` and `nightly` are more recommended.\n```bash\n# Spin up the `release` network\n./sanbox up release\n```\n---\nSet any necessary environment variables. \n```bash\n# The path to your sandbox so that AlgoPytest may interact with the sandbox\nexport SANDBOX_DIR=/path/to/installation/of/sandbox/\n\n# The address in your `sanbox` which was allocated the initial funds\nexport INITIAL_FUNDS_ACCOUNT=4BJAN3J32NDMZJWU3DPIPGCPBQIUTXL3UB2LEG5Z3CFPRJZOOZC2GH5DMQ\n```\n- List of environment variables recognized by *AlgoPytest*: [documentation](TODO).\n\n----\nCreate a `conftest.py` file in your Pytest `tests` directory and initialize *AlgoPytest* within as so:\n\n```python\n# File: conftest.py\nfrom algopytest import initialize\n\n# Load the smart contracts from this project. The path to find these\n# imports can be set by the environment variable `$PYTHONPATH`.\n# e.g. `export PYTHONPATH=.../smart-contract-project/assets`\nfrom approval_program import approval_program\nfrom clear_program import clear_program\n\ndef pytest_configure(config):\n    \"\"\"Initialize algopytest before the pytest tests run.\"\"\"\n    initialize(approval_program=approval_program, \n               clear_program=clear_program,\n               local_ints=0, local_bytes=1, \n               global_ints=0, global_bytes=1)\n```\n\nNow, any Pytest tests you write automatically have access to the *AlgoPytest* fixtures. Additionally, you can import and utilize the various helper functions that ship with the framework.\n\n- List of available fixtures: [documentation](https://algopytest.readthedocs.io/en/latest/fixtures.html)\n- Provided helper functions: [documentation](https://algopytest.readthedocs.io/en/latest/algopytest.html)\n----\nA simple test to make sure that the creator of the smart contract can update the application is provided below. It uses the *AlgoPytest* fixtures `owner` and `smart_contract_id` and the helper function `update_app`.\n\n```python\n# File: test_behavior.py\ndef test_update_from_owner(owner, smart_contract_id):\n    update_app(owner, smart_contract_id)\n```\n\n## Demos\n\nThis *AlgoPytest* project includes [demos](TODO) of Algorand Smart Contract projects that utilize this package to implement their test suite. These demo projects give examples of how a real-world project may use *AlgoPytest* for its testing. They provide greater context for how to integrate *AlgoPytest* into your project. The tests and the `initialization` code of the demos may be found within their respective `tests` directory. Therein, you will see how the fixtures are used to extensively stress test the Smart Contract code and life-cycle. \n\nFor example, a semi-involved test in one of the demos, [algo-diploma](https://github.com/DamianB-BitFlipper/algo-diploma), showcases *AlgoPytest* utilizing the power of Pytest fixtures:\n\n```python\n@pytest.fixture\ndef owner_in(owner, smart_contract_id):\n    \"\"\"Create an ``owner`` fixture that has already opted in to ``smart_contract_id``.\"\"\"\n    opt_in_app(owner, smart_contract_id)\n    \n    # The test runs here\n    yield owner\n\n    # Clean up by closing out of the application\n    close_out_app(owner, smart_contract_id)\n\n@pytest.fixture\ndef user1_in(user1, smart_contract_id):\n    \"\"\"Create a ``user1`` fixture that has already opted in to ``smart_contract_id``.\"\"\"\n    opt_in_app(user1, smart_contract_id)\n\n    # The test runs here\n    yield user1\n\n    # Clean up by closing out of the application\n    close_out_app(user1, smart_contract_id)\n\ndef test_issue_diploma(owner_in, user1_in, smart_contract_id):\n    diploma_metadata = \"Damian Barabonkov :: MIT :: BSc Computer Science and Engineering :: 2020\"\n\n    # The application arguments and account to be passed in to \n    # the smart contract as it expects\n    app_args = ['issue_diploma', diploma_metadata]\n    accounts = [user1_in.address]\n\n    # Issue the `diploma_metadata` to the recipient `user1`\n    call_app(owner_in, smart_contract_id, app_args=app_args, accounts=accounts)\n```\n\nOriginal source may be found [here](https://github.com/DamianB-BitFlipper/algo-diploma/blob/master/tests/test_interaction.py).\n\n## Detailed Usage\nRefer to the [Documentation References](#documentation-references) below for more specific explanations of key topics.\n\n### AlgoPytest Initialization\nFirstly, you must follow the Pytest directory structure. Essentially, all tests will be found within a `tests` directory in the root of your project.\n\nBefore being able to write Pytest tests for your Algorand Smart Contract, you need to initialize the *AlgoPytest* plugin. Before any Pytest tests run, you must declare to *AlgoPytest* the smart contract code to be tested as well as its storage requirements. This is most easily achieved by creating a `conftest.py` file and calling `algopytest.initialize`from within a function named `pytest_configure`. Pytest understands `pytest_configure` and will execute the function before any tests run.\n\nFor example:\n```bash\n# Sample project file structure\nsmart-contract-project/\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 approval_program.py\n\u2502   \u251c\u2500\u2500 clear_program.py\n\u2514\u2500\u2500 tests\n        \u251c\u2500\u2500 conftest.py\n        \u2514\u2500\u2500 test_behavior.py\n```\n\n```python\n# File: conftest.py\nfrom algopytest import initialize\n\n# Load the smart contracts from this project. The path to find these\n# imports can be set by the environment variable `$PYTHONPATH`.\n# e.g. `export PYTHONPATH=.../smart-contract-project/assets`\nfrom approval_program import approval_program\nfrom clear_program import clear_program\n\ndef pytest_configure(config):\n    \"\"\"Initialize algopytest before the pytest tests run.\"\"\"\n    initialize(approval_program=approval_program, \n               clear_program=clear_program,\n               local_ints=0, local_bytes=1, \n               global_ints=0, global_bytes=1)\n```\n\nThe `approval_program` and `clear_program` must be Python functions which return a `pyteal.Expr`. \n\nFor example, the simplest clear program in this format is:\n```python\n# File: clear_program.py\ndef clear_program():\n    \"\"\"A clear program that always approves.\"\"\"\n    return Return(Int(1))\n```\n\n### Writing Pytest Tests\n\nThe *AlgoPytest* package is written as a Pytest plugin. This allows *AlgoPytest* to automatically register fixtures without you needing to import anything.  You may simply use the fixtures directly in the function signature.\n\nThese fixtures make testing Algorand Smart Contracts significantly easier for you as the developer. Fixtures such as the user ones: `owner`, `user1`, `user2`, etc. automatically create users with funded balances and cleans them up at the end of the test. The `smart_contract_id` fixture automatically deploys (and cleans up) the smart contract supplied to the `initialize` function above with `owner` as its creator. Before, writing a test even as simple as checking that the owner of an application can update their application, required non-negligible boilerplate code. Now, in order to write this test, all of the necessary boilerplate code is taken care of; you only have to focus only on the testing code at hand and nothing else.\n\n```python\n# File: test_behavior.py\ndef test_update_from_owner(owner, smart_contract_id):\n    \"The `owner` and `smart_contract_id` are AlgoPytest fixtures.\"\n    update_app(owner, smart_contract_id)\n```\n\n### Documentation References\n- Pytest directory structure: [documentation](https://docs.pytest.org/en/6.2.x/goodpractices.html#choosing-a-test-layout-import-rules)\n- Pytest `pytest_configure`: [documentation](https://docs.pytest.org/en/6.2.x/reference.html#pytest.hookspec.pytest_configure)\n- Pytest `conftest.py`: [documentation](https://docs.pytest.org/en/latest/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files)\n- *AlgoPytest* `initialize`: [documentation](https://algopytest.readthedocs.io/en/latest/algopytest.html#algopytest.initialize)\n\n## Dev Installation\n```bash\ngit clone https://github.com/DamianB-BitFlipper/algopytest.git\ncd algopytest\nconda env create -f environment.yml\npre-commit install\npip install -e .\n```\n\nPlease submit a Pull Request for any suggested changes you would like to make.\n\n## Disclaimer\n**This package and smart contract(s) in this codebase have NOT been professionally audited. Therefore, they should not be used as a production application.****\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/DamianB-BitFlipper/algopytest/archive/refs/tags/v1.0.0.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/DamianB-BitFlipper/algopytest.git",
            "keywords": "Algorand,Smart Contract,Pytest,Unit Tests,Test Suite",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "algopytest-framework",
            "package_url": "https://pypi.org/project/algopytest-framework/",
            "platform": "",
            "project_url": "https://pypi.org/project/algopytest-framework/",
            "project_urls": {
                "Download": "https://github.com/DamianB-BitFlipper/algopytest/archive/refs/tags/v1.0.0.tar.gz",
                "Homepage": "https://github.com/DamianB-BitFlipper/algopytest.git"
            },
            "release_url": "https://pypi.org/project/algopytest-framework/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "AlgoPytest is a framework which hides away all of the complexity and repetitiveness that comes with testing Algorand Smart Contracts.",
            "version": "1.0.0",
            "yanked": true,
            "yanked_reason": "This was a premature 1.0.0 major release of AlgoPytest before the library was fully done."
        },
        "last_serial": 15135054,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a9b07947c35b7289242c58668b4c0023",
                    "sha256": "b112b2a5bc63cc9f7b1750ccfb2db3c23632852bc862da6ea4e5df0780cdc7e4"
                },
                "downloads": -1,
                "filename": "algopytest-framework-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a9b07947c35b7289242c58668b4c0023",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15981,
                "upload_time": "2022-02-09T20:44:18",
                "upload_time_iso_8601": "2022-02-09T20:44:18.936302Z",
                "url": "https://files.pythonhosted.org/packages/47/9d/902fd61765be31138a3a010e0035ebf6c57e2366a28c1baac8a49643c965/algopytest-framework-1.0.0.tar.gz",
                "yanked": true,
                "yanked_reason": "This was a premature 1.0.0 major release of AlgoPytest before the library was fully done."
            }
        ],
        "vulnerabilities": []
    }
}