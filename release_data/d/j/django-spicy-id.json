{
    "0.2.1": {
        "info": {
            "author": "mik3y",
            "author_email": "opensource@hoho.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Framework :: Django",
                "Framework :: Django :: 2.2",
                "Framework :: Django :: 3.0",
                "Framework :: Django :: 4.0",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mik3y/django-spicy-id",
            "keywords": "django timeseries",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "django-spicy-id",
            "package_url": "https://pypi.org/project/django-spicy-id/",
            "platform": "any",
            "project_url": "https://pypi.org/project/django-spicy-id/",
            "project_urls": {
                "Homepage": "https://github.com/mik3y/django-spicy-id"
            },
            "release_url": "https://pypi.org/project/django-spicy-id/0.2.1/",
            "requires_dist": null,
            "requires_python": ">=3.8.1",
            "summary": "Fancy ID fields for django models.",
            "version": "0.2.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16096470,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fd3592c0110e3b710fe1bcfab64fc3bc",
                    "sha256": "fac2bddca1d58602b3622fb37d485ef665d2bd827be2b60e5f6815bb70182086"
                },
                "downloads": -1,
                "filename": "django_spicy_id-0.2.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fd3592c0110e3b710fe1bcfab64fc3bc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8.1",
                "size": 8606,
                "upload_time": "2022-12-14T06:24:15",
                "upload_time_iso_8601": "2022-12-14T06:24:15.858192Z",
                "url": "https://files.pythonhosted.org/packages/af/bc/56f899cfbaa493737b1c9d10a7a3133bda86ce6d4b7fb8b7c85322c8d5c5/django_spicy_id-0.2.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8385b0518755f902f8b1852652e0712a",
                    "sha256": "795c735032c2674115f017c4b11352cf6c004398de77b098b078669ddb8b6449"
                },
                "downloads": -1,
                "filename": "django-spicy-id-0.2.1.tar.gz",
                "has_sig": false,
                "md5_digest": "8385b0518755f902f8b1852652e0712a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8.1",
                "size": 8885,
                "upload_time": "2022-12-14T06:21:50",
                "upload_time_iso_8601": "2022-12-14T06:21:50.536881Z",
                "url": "https://files.pythonhosted.org/packages/92/b7/8fa85b31e16dc6e0c65d43c138cfcece8126c54d55555020a3f871d6bee6/django-spicy-id-0.2.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.2": {
        "info": {
            "author": "mik3y",
            "author_email": "opensource@hoho.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Framework :: Django",
                "Framework :: Django :: 2.2",
                "Framework :: Django :: 3.0",
                "Framework :: Django :: 4.0",
                "Framework :: Django :: 4.1",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# django-spicy-id\n\nA drop-in replacement for Django's `AutoField` that gives you \"Stripe-style\" self-identifying string object IDs, like `user_1234`.\n\n**Status:** Experimental! No warranty. See `LICENSE.txt`.\n\n[![PyPI version](https://badge.fury.io/py/django-spicy-id.svg)](https://badge.fury.io/py/django-spicy-id)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/django-spicy-id.svg)](https://pypi.python.org/pypi/django-spicy-id/) ![Test status](https://github.com/mik3y/django-spicy-id/actions/workflows/test.yml/badge.svg)\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [What is a \"spicy\" id?](#what-is-a-spicy-id)\n- [_Why_ use spicy ids?](#_why_-use-spicy-ids)\n- [Usage](#usage)\n  - [Field types](#field-types)\n  - [Required Parameters](#required-parameters)\n  - [Optional Parameters](#optional-parameters)\n  - [Errors](#errors)\n- [Installation](#installation)\n  - [Requirements](#requirements)\n  - [Instructions](#instructions)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## What is a \"spicy\" id?\n\nIt's a made-up name (because I couldn't think of a better one) for a numeric primary keys type that is shown and manipulated as a string, prefixed with a constant value.\n\nHere are some examples. You can use this library to make your Django row IDs look like:\n\n- `user_1234`\n- `account-00000000deadbeef`\n- `bloop:1a2k3841x`\n\nAlthough you should always treat these values as opaque and _never_ decode or parse the string's contents elsewhere (see _Errors_), you can think of every spicy id as being composed of:\n\n```\n<prefix> <separator> <encoded_value>\n```\n\n- **`prefix`**: A fixed string value that will be the same for all IDs of this record type, forever.\n- **`separator`**: A configurable separator which, like `prefix`, is fixed forever; usually `_` (the default) or `-` (another popular choice).\n- **`encoded_value`**: The numeric portion of the id. This library supports using base 16 (hex) or base 62.\n\nImportantly, the underlying database value is still stored and retrieved as a _numeric type_, just like an `AutoField`, `SmallAutoField`, or `BigAutoField`.\n\n## _Why_ use spicy ids?\n\nBriefly: Because they're so much nicer for humans to work with.\n\n- **Readability:** While row-level primary keys are typically treated as \"anonymous\" (as in \"not something anyone should have to care about\"), the fact is these values still _show up_ in lots of situations: They're in URLs, dumped in logfiles, shown in queries, and so on. In these situations, it's just plain faster to understand \"what am I looking at\" when the identifier itself tells you its type.\n- **Conflict and accident prevention:** When your systems require you to pass around typed identifiers like `acct_1234` and `invoice_5432beef`, certain kinds of accidents become impossible. For example, `HTTP DELETE /users/invoice_21` fails fast.\n- **Future-proofing:** Adopting spicy IDs means your systems and APIs are developed to accept a basically-opaque string as an ID. While their underlying type is numeric, in very advanced situations you may be able to migrate to a different type or datastore \"behind\" the abstraction the string ID creates.\n\nFor a more detailed look at this pattern, see Stripe's [\"Object IDs: Designing APIs for Humans\"](https://dev.to/stripe/designing-apis-for-humans-object-ids-3o5a).\n\n## Usage\n\nGiven the following example model:\n\n```py\nfrom django.db import models\nfrom django_spicy_id.fields import SpicyBigAutoField\n\nclass User(models.model):\n    id = SpicyBigAutoField(primary_key=True, prefix='usr')\n```\n\nExample usage:\n\n```py\n>>> u = models.User.objects.create()\n>>> u.id\n'usr_1'\n>>> u2 = models.User.objects.create(id=123456789)\n>>> u2.id\n'usr_8M0kX'\n>>> found_user = models.User.objects.filter(id='usr_8M0kX').first()\n>>> found_user == u2\nTrue\n```\n\n### Field types\n\n- `SpicyBigAutoField`: A spicy id which is backed by a `BigAutoField` (i.e. 64-bit int) column.\n- `SpicyAutoField`: A spicy id which is backed by a `AutoField` (i.e. 32-bit int) column.\n- `SpicySmallAutoField`: A spicy id which is backed by a `SmallAutoField` (i.e. 16-bit int) column.\n\n### Required Parameters\n\nThe following parameters are required at declaration:\n\n* **`prefix`**: The prefix to use in the encoded form. Typically this is a short, descriptive string, like `user` or `acct` and similar. **Note:** This library does not ensure the string you provide is unique within your project. You should ensure of that.\n\n### Optional Parameters\n\nIn addition to all parameters you can provide a normal `AutoField`, each of the field types above supports the following additional optional paramters:\n\n- **`sep`**: The separator character. Defaults to `_`. Can be any string.\n- **`encoding`**: What numeric encoding scheme to use. One of `fields.ENCODING_BASE_62`, `fields.ENCODING_BASE_58`, or `fields.ENCODING_HEX`.\n- **`pad`**: Whether the encoded portion of the id should be zero-padded so that all values are the same string length. Either `False` (default) or `True`.\n  - Example without padding: `user_8M0kX`\n  - Example with padding: `user_0000008M0kX`\n- **`randomize`**: If `True`, the default value for creates will be chosen from `random.randrange()`. If `False` (the default), works just like a normal `AutoField` i.e. the default value comes from the database upon `INSERT`.\n\n**Warning:** Changing `prefix`, `sep`, `pad`, or `encoding` after you have started using the field is a _breaking change_. IDs generated with a different configuration will be rejected. You should not do this.\n\n### Errors\n\nThe field will throw `django_spicy_id.errors.MalformedSpicyIdError`, a subclass of `ValueError`, when an \"illegal\" string is provided. Note that this error can happen at runtime.\n\nSome examples of situations that will throw this error:\n\n* Querying a spicy id with the wrong prefix or separator (e.g `id=\"acct_1234` where `id=invoice_1234` is expected).\n* Using illegal characters in the string.\n* Providing an unpadded value when padding is enabled.\n* Providing a padded value when padded is disabled.\n\nTake special note of the last two errors: Regardless of field configuration the string value a spicy id yields must **always** be treated as an _exact value_. Just like you would never modify a `UUID4`, a spicy id string should never be translated, re-interpreted, or changed by a client.\n\n## Installation\n\n### Requirements\n\nThis package supports and is tested against the latest patch versions of:\n\n- **Python:** 3.8, 3.9, 3.10, 3.11\n- **Django:** 2.2, 3.1, 4.1\n- **MySQL:** 5.7, 8.0\n- **PostgreSQL:** 9.5, 10, 11, 12\n- **SQLite:** 3.9.0+\n\nAll database backends are tested with the latest versions of their drivers. SQLite is also tested on GitHub Actions' latest macOS virtual environment.\n\n### Instructions\n\n```\npip install django_spicy_id\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mik3y/django-spicy-id",
            "keywords": "django timeseries",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "django-spicy-id",
            "package_url": "https://pypi.org/project/django-spicy-id/",
            "platform": "any",
            "project_url": "https://pypi.org/project/django-spicy-id/",
            "project_urls": {
                "Homepage": "https://github.com/mik3y/django-spicy-id"
            },
            "release_url": "https://pypi.org/project/django-spicy-id/0.2.2/",
            "requires_dist": [
                "Django (>=2.2)"
            ],
            "requires_python": ">=3.8.1",
            "summary": "Fancy ID fields for django models.",
            "version": "0.2.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16096470,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "792c0e2c31534660dc0376dabd7d1039",
                    "sha256": "51b985547aff5e1bf9341aea22a10fe37d74ddcff48264d4196c1f409d84beeb"
                },
                "downloads": -1,
                "filename": "django_spicy_id-0.2.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "792c0e2c31534660dc0376dabd7d1039",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8.1",
                "size": 8669,
                "upload_time": "2022-12-14T06:30:17",
                "upload_time_iso_8601": "2022-12-14T06:30:17.978181Z",
                "url": "https://files.pythonhosted.org/packages/72/9c/65008aeaf4cfba76894d3c46ecc8b229f67fc2c5d9e9c177147e3b98e2d9/django_spicy_id-0.2.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8af7b66055c32762a27b70d028a567ea",
                    "sha256": "33ebd9226eb5894f6c684be863e3ccdf2171721f4964bdb315bbed46b5e7e661"
                },
                "downloads": -1,
                "filename": "django-spicy-id-0.2.2.tar.gz",
                "has_sig": false,
                "md5_digest": "8af7b66055c32762a27b70d028a567ea",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8.1",
                "size": 8827,
                "upload_time": "2022-12-14T06:30:19",
                "upload_time_iso_8601": "2022-12-14T06:30:19.148324Z",
                "url": "https://files.pythonhosted.org/packages/c5/b6/3394ee7ab3612f5014eb3d105e28555adc07e54057b209cfc1334e695759/django-spicy-id-0.2.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}