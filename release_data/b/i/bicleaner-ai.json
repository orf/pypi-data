{
    "1.0": {
        "info": {
            "author": "Prompsit Language Engineering",
            "author_email": "info@prompsit.com",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Text Processing :: Filters",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bitextor/bicleaner-ai",
            "keywords": "",
            "license": "GNU General Public License v3.0",
            "maintainer": "Jaume Zaragoza",
            "maintainer_email": "jzaragoza@prompsit.com",
            "name": "bicleaner-ai",
            "package_url": "https://pypi.org/project/bicleaner-ai/",
            "platform": "",
            "project_url": "https://pypi.org/project/bicleaner-ai/",
            "project_urls": {
                "Bicleaner on GitHub": "https://github.com/bitextor/bicleaner",
                "Homepage": "https://github.com/bitextor/bicleaner-ai",
                "Paracrawl": "https://paracrawl.eu/",
                "Prompsit Language Engineering": "http://www.prompsit.com"
            },
            "release_url": "https://pypi.org/project/bicleaner-ai/1.0/",
            "requires_dist": [
                "scikit-learn (>=0.22.1)",
                "PyYAML (>=5.1.2)",
                "numpy (>=1.18.1)",
                "pytest (>=5.1.2)",
                "toolwrapper (>=0.4.1)",
                "joblib (==0.14.1)",
                "sacremoses (==0.0.43)",
                "bicleaner-hardrules (==1.1)",
                "sentencepiece (==0.1.94)",
                "tensorflow (>=2.3.2)",
                "glove-python-binary (==0.2.0)",
                "fuzzywuzzy (==0.18.0)",
                "python-Levenshtein (>=0.12.1)",
                "transformers (==4.4.2)",
                "psutil (>=5.8.0)"
            ],
            "requires_python": "",
            "summary": "Parallel corpus classifier, indicating the likelihood of a pair of sentences being mutual translations or not (neural version)",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14553497,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c5e1bc19dd144cd73a3117be0b130e21",
                    "sha256": "41f94056d99717ff986f4633662f11e14f0f61d3fc8c09f8e6f59f538d19f74c"
                },
                "downloads": -1,
                "filename": "bicleaner_ai-1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c5e1bc19dd144cd73a3117be0b130e21",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 53360,
                "upload_time": "2021-06-14T15:27:12",
                "upload_time_iso_8601": "2021-06-14T15:27:12.485415Z",
                "url": "https://files.pythonhosted.org/packages/a1/72/0dfcecb504f11b628645115e132d9356ebfc91e77ff3a421f59ab0847686/bicleaner_ai-1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "dba959c9948f091d7b5eca96d2276b22",
                    "sha256": "4b2ad8b38f83494541f29986d6c7666d6ec64ab0a067d79c72cdcff5faf064ae"
                },
                "downloads": -1,
                "filename": "bicleaner-ai-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "dba959c9948f091d7b5eca96d2276b22",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 39183,
                "upload_time": "2021-06-14T15:27:14",
                "upload_time_iso_8601": "2021-06-14T15:27:14.595694Z",
                "url": "https://files.pythonhosted.org/packages/bc/81/6999c3a8f8cb884edb2bf84cff35fc2cc8109c33ded27742f96e96c2ab5c/bicleaner-ai-1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "Prompsit Language Engineering",
            "author_email": "info@prompsit.com",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Artificial Intelligence",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Text Processing :: Filters",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description": "\n# Bicleaner AI\n\n![License](https://img.shields.io/badge/License-GPLv3-blue.svg)\n\nBicleaner AI (`bicleaner-ai-classify`) is a tool in Python that aims at detecting noisy sentence pairs in a parallel corpus. It\nindicates the likelihood of a pair of sentences being mutual translations (with a value near to 1) or not (with a value near to 0).\nSentence pairs considered very noisy are scored with 0.\n\nAlthough a training tool (`bicleaner-ai-train`) is provided, you may want to use the available ready-to-use language packages.\nPlease, visit https://github.com/bitextor/bicleaner-ai-data/releases/latest or use `./utils/download-pack.sh` to download the latest language packages.\nVisit our [Wiki](https://github.com/bitextor/bicleaner-ai/wiki/How-to-train-your-Bicleaner-AI) for a detailed example on Bicleaner training.\n\n## What is New?\nBicleaner AI is a [Bicleaner](https://github.com/bitextor/bicleaner) fork that uses neural networks.\nIt comes with two types of models, lite models for fast scoring and full models for high performance.\nLite models use [A Decomposable Attention Model for Natural Language Inference (Parikh et al.)](https://arxiv.org/abs/1606.01933).\nFull models use fine-tuned XLMRoberta ([Unsupervised Cross-lingual Representation Learning at Scale](https://arxiv.org/abs/1911.02116)).\n\nThe use of XLMRoberta and 1:10 positive to negative ratio were inspired in the winner of WMT20 Parallel Corpus Filtering Task paper ([Filtering noisy parallel corpus using transformers with proxy task learning](https://www.statmt.org/wmt20/pdf/2020.wmt-1.105.pdf)).\n\n## Installation & Requirements\n\nBicleaner AI is written in Python and can be installed using `pip`:\n\n```bash\npip install bicleaner-ai\n```\n\nBicleaner AI requires the [KenLM](https://github.com/kpu/kenlm) Python bindings with support for 7-gram language models. You can easily install it by running the following commands:\n\n```bash\ngit clone https://github.com/kpu/kenlm\ncd kenlm\npip install . --install-option=\"--max_order 7\"\nmkdir -p build && cd build\ncmake .. -DKENLM_MAX_ORDER=7 -DCMAKE_INSTALL_PREFIX:PATH=/your/prefix/path\nmake -j all install\n```\n\nThe remaining extra modules required by Bicleaner AI will be automatically downloaded and installed/upgraded (if required) with the first command.\n\nAfter installation, three binary files (`bicleaner-ai-train`, `bicleaner-ai-classify` and `bicleaner-ai-classify-lite`) will be located in your `python/installation/prefix/bin` directory. This is usually `$HOME/.local/bin` or `/usr/local/bin/`.\n\n### TensorFlow\nTensorFlow 2 will be installed as a dependency and [GPU support](https://www.tensorflow.org/install/gpu) is required for training.\n`pip` will install latest TensorFlow but older versions `>=2.3.2` are supported and can be installed if your machine does not meet TensorFlow CUDA requirements.\nSee [this](https://www.tensorflow.org/install/source#gpu) table for the CUDA and TensorFlow versions compatibility.\nIn case you want a different TensorFlow version, you can downgrade using:\n```bash\npip install tensorflow==2.3.2\n```\n\nTensorFlow logging messages are suppressed by default, in case you want to see them you have to explicitly set `TF_CPP_MIN_LOG_LEVEL` environment variable.\nFor example:\n```bash\nTF_CPP_MIN_LOG_LEVEL=0 bicleaner-ai-classify\n```\n\n## Cleaning\n\n`bicleaner-ai-classify` aims at detecting noisy sentence pairs in a parallel corpus. It\nindicates the likelihood of a pair of sentences being mutual translations (with a value near to 1) or not (with a value near to 0). Sentence pairs considered very noisy are scored with 0.\n\nBy default, the input file (the parallel corpus to be classified) must contain at least four columns, being:\n\n* col1: URL 1\n* col2: URL 2\n* col3: Source sentence\n* col4: Target sentence\n\nbut the source and target sentences column index can be customized by using the `--scol` and `--tcol` flags.\n\nThe generated output file will contain the same lines and columns that the original input file had, adding an extra column containing the Bicleaner AI classifier score.\n\nThis tool can be run with\n\n```bash\nbicleaner-ai-classify [-h]\n    [-S SOURCE_TOKENIZER_COMMAND]\n    [-T TARGET_TOKENIZER_COMMAND]\n    [--scol SCOL]\n    [--tcol TCOL]\n    [-b BLOCK_SIZE]\n    [-p PROCESSES]\n    [--batch_size BATCH_SIZE]\n    [--tmp_dir TMP_DIR]\n    [-d DISCARDED_TUS]\n    [--score_only]\n    [--calibrated]\n    [--raw_output]\n    [--disable_hardrules]\n    [--disable_lm_filter]\n    [--disable_porn_removal]\n    [--disable_minimal_length]\n    [-q]\n    [--debug]\n    [--logfile LOGFILE]\n    [-v]\n    input [output] metadata\n```\n\n### Parameters\n\n* positional arguments:\n  * `input`: Tab-separated files to be classified (default line format: `URL1 URL2 SOURCE_SENTENCE TARGET_SENTENCE [EXTRA_COLUMNS]`, tab-separated). When input is -, reads standard input.\n  * `output`: Output of the classification (default: standard output). When output is -, writes standard output.\n  * `metadata`: Training metadata (YAML file), generated by `bicleaner-ai-train` or [downloaded](https://github.com/bitextor/bicleaner-ai-data/releases/latest) as a part of a language pack. You just need to `untar` the language pack for the pair of languages of the file you want to clean. The tar file contains the YAML metadata file.\n  There's a script that can download and unpack it for you, use:\n  ```bash\n  $ ./utils/download-pack.sh en cs ./models\n  ```\n  to download English-Czech language pack to the ./models directory and unpack it.\n* optional arguments:\n  * `-h, --help`: show this help message and exit\n* Optional:\n  * `-S SOURCE_TOKENIZER_COMMAND`: Source language tokenizer full command (including flags if needed). If not given, Sacremoses tokenizer is used (with `escape=False` option).\n  * `-T TARGET_TOKENIZER_COMMAND`: Target language tokenizer full command (including flags if needed). If not given, Sacremoses tokenizer is used (with `escape=False` option).\n  * `--scol SCOL`: Source sentence column (starting in 1) (default: 3)\n  * `--tcol TCOL`: Target sentence column (starting in 1) (default: 4)\n  * `--tmp_dir TMP_DIR`: Temporary directory where creating the temporary files of this program (default: default system temp dir, defined by the environment variable TMPDIR in Unix)\n  * `-b BLOCK_SIZE, --block_size BLOCK_SIZE`: Sentence pairs per block (default: 10000)\n  * `-p PROCESSES, --processes PROCESSES`: Number of processes to use (default: all CPUs minus one)\n  * `-d DISCARDED_TUS, --discarded_tus DISCARDED_TUS`: TSV file with discarded TUs. Discarded TUs by the classifier are written in this file in TSV file. (default: None)\n  * `--lm_threshold LM_THRESHOLD`: Threshold for language model fluency scoring. All sentence pairs whose LM fluency score falls below the threshold are removed (classifier score set to 0), unless the option --keep_lm_result is set. (default: 0.5)\n  * `--score_only`: Only output one column which is the bicleaner score (default: False)\n  * `--calibrated`: Output calibrated scores (default: False)\n  * `--raw_output`: Return raw output without computing positive class probability. (default: False)\n  * `--disable_hardrules`: Disables the bicleaner_hardrules filtering (only bicleaner_classify is applied) (default: False)\n  * `--disable_lm_filter`: Disables LM filtering.\n  * `--disable_porn_removal`: Disables porn removal.\n  * `--disable_minimal_length` : Don't apply minimal length rule (default: False).\n\n* Logging:\n  * `-q, --quiet`: Silent logging mode (default: False)\n  * `--debug`: Debug logging mode (default: False)\n  * `--logfile LOGFILE`: Store log to a file (default: \\<\\_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'\\>)\n  * `-v, --version`: show version of this script and exit\n\n### Example\n\n```bash\nbicleaner-ai-classify  \\\n        corpus.en-es.raw  \\\n        corpus.en-es.classifed  \\\n        model/en-es/metadata.yaml\n```\n\nThis will read the `corpus.en-es.raw` file,\nclassify it with the classifier indicated in the `models/en-es/metadata.yaml` metadata file,\nwriting the result of the classification in the `corpus.en-es.classified` file.\nEach line of the new file will contain the same content as the input file, adding a column with the score given by the Bicleaner classifier.\n\n## Training classifiers\n\nIn case you need to train a new classifier (i.e. because it is not available in the language packs provided at [bicleaner-ai-data](https://github.com/bitextor/bicleaner-ai-data/releases/latest)), you can use `bicleaner-ai-train`.\n`bicleaner-ai-train` is a Python tool that allows you to train a classifier which predicts\nwhether a pair of sentences are mutual translations or not and discards too noisy sentence pairs. Visit our [Wiki](https://github.com/bitextor/bicleaner-ai/wiki/How-to-train-your-Bicleaner-AI) for a detailed example on Bicleaner AI training.\n\n### Requirements\n\nIn order to train a new classifier, you must provide:\n* A clean parallel corpus (500k pairs of sentences is the recommended size).\n* Monolingual corpus for the source and the target language (not necessary for `xlmr` classifier).\n* Gzipped lists of monolingual word frequencies. You can check their format by downloading any of the available language packs.\n   * The SL list of word frequencies with one entry per line. Each entry must contain the following 2 fields, split by space, in this order: word frequency (number of times a word appears in text), SL word.\n   * The TL list of word frequencies with one entry per line. Each entry must contain the following 2 fields, split by space, in this order: word frequency (number of times a word appears in text), TL word.\n   * These lists can easily be obtained from a monolingual corpus and a command line in bash:\n```bash\n$ cat monolingual.SL \\\n    | sacremoses -l SL tokenize -x \\\n    | awk '{print tolower($0)}' \\\n    | tr ' ' '\\n' \\\n    | LC_ALL=C sort | uniq -c \\\n    | LC_ALL=C sort -nr \\ \\\n    | grep -v '[[:space:]]*1' \\\n    | gzip > wordfreq-SL.gz\n$ cat monolingual.TL \\\n    | sacremoses -l TL tokenize -x \\\n    | awk '{print tolower($0)}' \\\n    | tr ' ' '\\n' \\\n    | LC_ALL=C sort | uniq -c \\\n    | LC_ALL=C sort -nr \\ \\\n    | grep -v '[[:space:]]*1' \\\n    | gzip > wordfreq-TL.gz\n\n```\nOptionally, if you want the classifier to include a porn filter, you must also provide:\n* File with training dataset for porn removal classifier. Each sentence must contain at the beginning the `__label__negative` or `__label__positive` according to FastText convention. It should be lowercased and tokenized.\n\n### Parameters\nIt can be used as follows.\n\n```bash\nbicleaner-ai-train [-h]\n    -m MODEL_DIR\n    -s SOURCE_LANG\n    -t TARGET_LANG\n    [--mono_train MONO_TRAIN]\n    --parallel_train PARALLEL_TRAIN\n    --parallel_dev PARALLEL_DEV\n    [-S SOURCE_TOKENIZER_COMMAND]\n    [-T TARGET_TOKENIZER_COMMAND]\n    [-F TARGET_WORD_FREQS]\n    [--block_size BLOCK_SIZE]\n    [-p PROCESSES]\n    [-g GPU]\n    [--mixed_precision]\n    [--save_train_data SAVE_TRAIN_DATA]\n    [--distilled]\n    [--seed SEED]\n    [--classifier_type {dec_attention,transformer,xlmr}]\n    [--batch_size BATCH_SIZE]\n    [--steps_per_epoch STEPS_PER_EPOCH]\n    [--epochs EPOCHS]\n    [--patience PATIENCE]\n    [--pos_ratio POS_RATIO]\n    [--rand_ratio RAND_RATIO]\n    [--womit_ratio WOMIT_RATIO]\n    [--freq_ratio FREQ_RATIO]\n    [--fuzzy_ratio FUZZY_RATIO]\n    [--neighbour_mix NEIGHBOUR_MIX]\n    [--porn_removal_train PORN_REMOVAL_TRAIN]\n    [--porn_removal_test PORN_REMOVAL_TEST]\n    [--porn_removal_file PORN_REMOVAL_FILE]\n    [--porn_removal_side {sl,tl}]\n    [--noisy_examples_file_sl NOISY_EXAMPLES_FILE_SL]\n    [--noisy_examples_file_tl NOISY_EXAMPLES_FILE_TL]\n    [--lm_dev_size LM_DEV_SIZE]\n    [--lm_file_sl LM_FILE_SL]\n    [--lm_file_tl LM_FILE_TL]\n    [--lm_training_file_sl LM_TRAINING_FILE_SL]\n    [--lm_training_file_tl LM_TRAINING_FILE_TL]\n    [--lm_clean_examples_file_sl LM_CLEAN_EXAMPLES_FILE_SL]\n    [--lm_clean_examples_file_tl LM_CLEAN_EXAMPLES_FILE_TL]\n    [-q]\n    [--debug]\n    [--logfile LOGFILE]\n```\n\n* positional arguments:\n  * `input`: Tab-separated bilingual input file (default: Standard input)(line format: SOURCE_SENTENCE TARGET_SENTENCE, tab-separated)\n* optional arguments:\n  * `-h, --help`: show this help message and exit\n* Mandatory:\n  * `-m MODEL_DIR, --model_dir MODEL_DIR`: Model directory, metadata, classifier and SentencePiece models will be saved in the same directory (default: None)\n  * `-s SOURCE_LANG, --source_lang SOURCE_LANG`: Source language (default: None)\n  * `-t TARGET_LANG, --target_lang TARGET_LANG`: Target language (default: None)\n  * `--mono_train MONO_TRAIN`: File containing monolingual sentences of both languages shuffled together, used to train SentencePiece embeddings. Not required for XLMR. (default: None)\n  * `--parallel_train PARALLEL_TRAIN`: TSV file containing parallel sentences to train the classifier (default: None)\n  * `--parallel_dev PARALLEL_DEV`: TSV file containing parallel sentences for development (default: None)\n\n* Options:\n  * `-S SOURCE_TOKENIZER_COMMAND, --source_tokenizer_command SOURCE_TOKENIZER_COMMAND`: Source language tokenizer full command (default: None)\n  * `-T TARGET_TOKENIZER_COMMAND, --target_tokenizer_command TARGET_TOKENIZER_COMMAND`: Target language tokenizer full command (default: None)\n  * `-F TARGET_WORD_FREQS, --target_word_freqs TARGET_WORD_FREQS`: R language gzipped list of word frequencies (needed for frequence based noise) (default: None)\n  * `--block_size BLOCK_SIZE`: Sentence pairs per block when apliying multiprocessing in the noise function (default: 10000)\n  * `-p PROCESSES, --processes PROCESSES`: Number of process to use (default: 71)\n  * `-g GPU, --gpu GPU`: Which GPU use, starting from 0. Will set the CUDA_VISIBLE_DEVICES. (default: None)\n  * `--mixed_precision`: Use mixed precision float16 for training (default: False)\n  * `--save_train_data SAVE_TRAIN_DATA`: Save the generated dataset into a file. If the file already exists the training dataset will be loaded from there. (default: None)\n  * `--distilled`: Enable Knowledge Distillation training. It needs pre-built training set with raw scores from a teacher model. (default: False)\n  * `--seed`: SEED           Seed for random number generation. By default, no seeed is used. (default: None)\n  * `--classifier_type {dec_attention,transformer,xlmr}`: Neural network architecture of the classifier (default: dec_attention)\n  * `--batch_size BATCH_SIZE`: Batch size during classifier training. If None, default architecture value will be used. (default: None)\n  * `--steps_per_epoch STEPS_PER_EPOCH`: Number of batch updates per epoch during training. If None, default architecture value will be used or the full dataset size. (default: None)\n  * `--epochs EPOCHS`: Number of epochs for training. If None, default architecture value will be used. (default: None)\n  * `--patience PATIENCE`: Stop training when validation has stopped improving after PATIENCE number of epochs (default: None)\n  * `--pos_ratio POS_RATIO`: Ratio of positive samples used to oversample on validation and test sets (default: 1)\n  * `--rand_ratio RAND_RATIO`: Ratio of negative samples misaligned randomly (default: 3)\n  * `--womit_ratio WOMIT_RATIO`: Ratio of negative samples misaligned by randomly omitting words (default: 3)\n  * `--freq_ratio FREQ_RATIO`: Ratio of negative samples misaligned by replacing words by frequence (needs --target_word_freq) (default: 3)\n  * `--fuzzy_ratio FUZZY_RATIO`: Ratio of negative samples misaligned by fuzzy matching (default: 0)\n  * `--neighbour_mix NEIGHBOUR_MIX`: If use negative samples misaligned by neighbourhood (default: False)\n  * `--porn_removal_train PORN_REMOVAL_TRAIN`: File with training dataset for FastText classifier. Each sentence must contain at the beginning the '__label__negative' or '__label__positive' according to FastText convention. It should be lowercased and tokenized. (default: None)\n  * `--porn_removal_test PORN_REMOVAL_TEST`: Test set to compute precision and accuracy of the porn removal classifier (default: None)\n  * `--porn_removal_file PORN_REMOVAL_FILE`: Porn removal classifier output file (default: porn_removal.bin)\n  * `--porn_removal_side {sl,tl}`: Whether the porn removal should be applied at the source or at the target language. (default: sl)\n  * `--noisy_examples_file_sl NOISY_EXAMPLES_FILE_SL`: File with noisy text in the SL. These are used to estimate the perplexity of noisy text. (default: None)\n  * `--noisy_examples_file_tl NOISY_EXAMPLES_FILE_TL`: File with noisy text in the TL. These are used to estimate the perplexity of noisy text. (default: None)\n  * `--lm_dev_size LM_DEV_SIZE`: Number of sentences to be removed from clean text before training LMs. These are used to estimate the perplexity of clean text. (default: 2000)\n  * `--lm_file_sl LM_FILE_SL`: SL language model output file. (default: None)\n  * `--lm_file_tl LM_FILE_TL`: TL language model output file. (default: None)\n  * `--lm_training_file_sl LM_TRAINING_FILE_SL`: SL text from which the SL LM is trained. If this parameter is not specified, SL LM is trained from the SL side of the input file, after removing --lm_dev_size sentences. (default: None)\n  * `--lm_training_file_tl LM_TRAINING_FILE_TL`: TL text from which the TL LM is trained. If this parameter is not specified, TL LM is trained from the TL side of the input file, after removing --lm_dev_size sentences. (default: None)\n  * `--lm_clean_examples_file_sl LM_CLEAN_EXAMPLES_FILE_SL`: File with clean text in the SL. Used to estimate the perplexity of clean text. This option must be used together with --lm_training_file_sl and both files must not have common sentences. This option replaces --lm_dev_size. (default: None)\n  * `--lm_clean_examples_file_tl LM_CLEAN_EXAMPLES_FILE_TL`: File with clean text in the TL. Used to estimate the perplexity of clean text. This option must be used together with --lm_training_file_tl and both files must not have common sentences. This option replaces --lm_dev_size. (default: None)\n* Logging:\n  * `-q, --quiet`: Silent logging mode (default: False)\n  * `--debug`: Debug logging mode (default: False)\n  * `--logfile LOGFILE`: Store log to a file (default: \\<\\_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>)\n\n### Example\n\n```bash\nbicleaner-ai-train \\\n          --parallel_train corpus.en-cs.train \\\n          --parallel_dev corpus.en-cs.dev \\\n          --mono_train mono.en-cs \\\n          -m models/en-cs \\\n          -s en \\\n          -t cs \\\n          -F wordfreqs-cs.gz \\\n          --lm_file_sl models/en-cs/lm.en  --lm_file_tl models/en-cs/lm.cs \\\n          --porn_removal_train porn-removal.txt.en  --porn_removal_file models/en-cs/porn-model.en \\\n```\n\nThis will train a lite classifier for English-Czech using the corpus `corpus.en-cs.train`, the `corpus.en-cs.dev` as development set and the monolingual corpus `mono.en-cs` to train the vocabulary embeddings.\nAll the model files created during training, the language model files, the porn removal file, and the `metadata.yaml` will be stored in the model directory `models/en-cs`.\n\nTo train full models you would need to use `--classifier_type xlmr` and `--mono_train` is not needed.\n\n### Synthetic noise\nBy default the training will use `rand_ratio`, `womit_ratio` and `freq_ratio` options with a value of 3.\nBoth `womit_ratio` and `freq_ratio` will use Sacremoses tokenizer by default.\nSo, for languages that are not supported by this tokenizer or are poorly supported, `source_tokenizer_command` and/or `target_tokenizer_command` should be provided.\nAlso note that, if a tokenizer command is used, the word frequencies need to be tokenized in the same way to allow noise based on frequency work correctly.\n\nIf no tokenization is available for your languages, you can disable these noise option that use tokenization and use fuzzy mathing noise: `--womit_ratio 0 --freq_ratio 0 --fuzzy_ratio 6`.\n\n___\n\n![Connecting Europe Facility](https://www.paracrawl.eu/images/logo_en_cef273x39.png)\n\nAll documents and software contained in this repository reflect only the authors' view. The Innovation and Networks Executive Agency of the European Union is not responsible for any use that may be made of the information it contains.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/bitextor/bicleaner-ai",
            "keywords": "",
            "license": "GNU General Public License v3.0",
            "maintainer": "Jaume Zaragoza",
            "maintainer_email": "jzaragoza@prompsit.com",
            "name": "bicleaner-ai",
            "package_url": "https://pypi.org/project/bicleaner-ai/",
            "platform": "",
            "project_url": "https://pypi.org/project/bicleaner-ai/",
            "project_urls": {
                "Bicleaner on GitHub": "https://github.com/bitextor/bicleaner",
                "Homepage": "https://github.com/bitextor/bicleaner-ai",
                "Paracrawl": "https://paracrawl.eu/",
                "Prompsit Language Engineering": "http://www.prompsit.com"
            },
            "release_url": "https://pypi.org/project/bicleaner-ai/1.0.1/",
            "requires_dist": [
                "scikit-learn (>=0.22.1)",
                "PyYAML (>=5.1.2)",
                "numpy (>=1.18.1)",
                "pytest (>=5.1.2)",
                "toolwrapper (>=0.4.1)",
                "joblib (==0.14.1)",
                "sacremoses (==0.0.43)",
                "bicleaner-hardrules (==1.2)",
                "sentencepiece (==0.1.94)",
                "tensorflow (>=2.3.2)",
                "glove-python-binary (==0.2.0)",
                "fuzzywuzzy (==0.18.0)",
                "python-Levenshtein (>=0.12.1)",
                "transformers (==4.4.2)",
                "psutil (>=5.8.0)"
            ],
            "requires_python": "",
            "summary": "Parallel corpus classifier, indicating the likelihood of a pair of sentences being mutual translations or not (neural version)",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14553497,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "be06dd4e47c1c13835b6d1e33be9ce69",
                    "sha256": "e0d673cfdee334223583f597f339f8639a4f983fdc9ee7c3403e3f37ce8c3939"
                },
                "downloads": -1,
                "filename": "bicleaner_ai-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "be06dd4e47c1c13835b6d1e33be9ce69",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 53393,
                "upload_time": "2021-06-16T13:19:22",
                "upload_time_iso_8601": "2021-06-16T13:19:22.302266Z",
                "url": "https://files.pythonhosted.org/packages/00/ab/e26928b7ca4ff72c9c3b739387b516efd4f1e1d325588e4bbb277255ec0f/bicleaner_ai-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "337f3a1f2e5faa7aa28db204e18172fb",
                    "sha256": "73c94bea1347449bd653ddefd50b5dee66449cfe3e860e91b68c33c4435f1627"
                },
                "downloads": -1,
                "filename": "bicleaner-ai-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "337f3a1f2e5faa7aa28db204e18172fb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 39198,
                "upload_time": "2021-06-16T13:19:24",
                "upload_time_iso_8601": "2021-06-16T13:19:24.083108Z",
                "url": "https://files.pythonhosted.org/packages/70/25/1d56dd3157ced1ffd3650a326b3c4e74e852ee9bdec7dd10dd037da96447/bicleaner-ai-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}