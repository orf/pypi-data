{
    "1.0.0": {
        "info": {
            "author": "Clayton Duffin",
            "author_email": "clayduffin@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "\ufeff\n# The claydates Package\n\nThe claydates package serves to clean and restructure financial data retrieved from the Twelve Data API.\nSecondarily, it allows for the user to nicely plot time series data using numerous cleaning and restructuring methodologies. Additionally, it provides the user with the option to store information on data quality during usage, which may later provide insight into changes in data quality over time for certain tickers. \n\n\n**The program is comprised of 4 main classes:**\n```\n    1.  SingleTickerProcessor\n            - Used for gathering and cleaning time series data. \n            - Determines where there might be any missing dates coming in from the API call.\n            - Also can be used for logging the quality of data received from the API call to a CSV file, to be reviewed at a later date.\n            - Also used to iteratively construct one or more time series objects of the SingleTickerProcessor class.\n            - It is the parent class of the SingleTickerPlotter class, which is the parent of the multiTickerPlotter class.\n    \n    2.  SingleTickerPlotter\n            - Used for plotting time series data. \n            - Also can be used for logging the quality of data received from the API call to a csv file, to be reviewed at a later date.\n            - It is also used to iteratively construct one or more time series objects of the SingleTickerPlotter class.\n            - It is the child class of SingleTickerProcessor, and the parent class of multiTickerPlotter.\n    \n    3.  MultiTickerProcessor\n            - Used for gathering and processing time series data for one or more ticker symbols. \n            - Creates a list of SingleTickerProcessor class objects, and then organizes data in accordance with the various arguments passed or not-passed to methods belonging to the SingleTickerProcessor class.\n            - Also can be used for logging the quality of data received from the API call to a CSV file, to be reviewed at a later date.\n            - It is the parent class of MultiTickerPlotter.\n    \n    4.  MultiTickerPlotter\n            - Used for gathering and processing time series data for one or more ticker symbols. \n            - Creates a list of SingleTickerPlotter class objects, and then organizes data in accordance with the various arguments passed or not passed to the various methods belonging to the SingleTickerPlotter class.\n            - Also can be used for logging the quality of data received from the API call to a CSV file, to be reviewed at a later date.\n            - It is the child class of MultiTickerProcessor and SingleTickerPlotter.\n```\n\n## Directory Tree \n```\n                                claydatesRootDirectory\n                                \u2502   README.md\n                                \u2502   setup.py\n                                \u2502   requirements.txt\n                                \u2502   LICENSE\n                                \u2502   .gitignore\n                                \u2502\n                                \u2514\u2500\u2500\u2500claydates\n                                \u2502   \u2502   __init__.py\n                                \u2502   \u2502\n                                \u2502   \u2514\u2500\u2500\u2500processors\n                                \u2502   \u2502       __init__.py\n                                \u2502   \u2502       singleTickerProcessor.py\n                                \u2502   \u2502       multiTickerProcessor.py\n                                \u2502   \u2502\n                                \u2502   \u2514\u2500\u2500\u2500plotters\n                                \u2502   \u2502       __init__.py\n                                \u2502   \u2502       singleTickerPlotter.py\n                                \u2502   \u2502       multiTickerPlotter.py\n                                \u2502   \u2502\n                                \u2502   \u2514\u2500\u2500\u2500datasets\n                                \u2502   \u2502       currencyPairs.txt\n                                \u2502   \u2502       exampleSet.csv\n                                \u2502   \u2502       key.txt\n                                \u2502   \u2502       missingDataLog.csv\n                                \u2502   \u2502\n                                \u2502   \u2514\u2500\u2500\u2500examples\n                                \u2502           __init__.py\n                                \u2502           examplesSingleTickerProcessor.py\n                                \u2502           examplesMultiTickerProcessor.py\n                                \u2502           examplesSingleTickerPlotter.py\n                                \u2502           examplesMultiTickerPlotter.py\n                                \u2502\n                                \u2514\u2500\u2500\u2500tests\n                                        __init__.py\n                                        testSingleTickerProcessor.py\n                                        testMultiTickerProcessor.py\n                                        testSingleTickerPlotter.py\n                                        testMultiTickerPlotter.py\n```\n\n## Quick Usage Examples\n\n**For additional descriptions of arguments and methods, refer to the examples folder, which further details each quick usage example provided here.**\n\n### SingleTickerProcessor\n```\n1.) from claydates import SingleTickerProcessor\n\n    1a.) singleTickerProcessor = SingleTickerProcessor('QQQ', '1min', 1170)\n    1b.) singleTickerPlotter = SingleTickerPlotter(tickerSymbol = 'QQQ', tickInterval = '1min', numberOfUnits = 1170,\n                                          percentageChange = True, timeZone = 'America/New_York', quoteCurrency = 'USD',\n                                          logMissingData = True, mockResponse = False, spacingFactor = 14, \n                                          seriesType = 'Close', scalerRange = (0,1), binningFactor = 10\n                                          figureSize = [14.275,9.525], labelsize = 16, color = 'black')\n```\n```\n2.) from claydates import SingleTickerProcessor\n\n    2a.) singleTickerPlotter.datetimeHandler('missingDataIncludedInFrame') \n    2b.) singleTickerPlotter.datetimeHandler('missingPercentage') \n    2c.) singleTickerPlotter.datetimeHandler('lagTime') \n```\n```\n3.) from claydates import SingleTickerProcessor\n\n    3a.) singleTickerProcessor.unalteredFrameGetter()\n```\n### MultiTickerProcessor\n```\n1.) from claydates import MultiTickerProcessor\n \n    1a.) multiTickerProcessor = MultiTickerProcessor(['QQQ','SPY','IWM','DIA'], '1min', 390)\n    1b.) multiTickerProcessor = MultiTickerProcessor(tickerSymbols = ['QQQ','SPY','IWM','DIA'], tickInterval = '1min', numberOfUnits = 1170,\n                                                     percentageChange = True, timeZone = 'America/New_York', quoteCurrency = 'USD',\n                                                     logMissingData = True, mockResponse = False)\n```\n```\n2.) from claydates import MultiTickerProcessor\n\n    2a.) multiTickerProcessor.dateMatcher(dropMissing = True)\n```\n```\n3.) from claydates import MultiTickerProcessor\n\n    3a.) multiTickerProcessor.unalteredFrames(dataType = 'pandas')\n```\n```\n4.) from claydates import MultiTickerProcessor\n\n    4a.) multiTickerProcessor.missingUnitsIncluded(dataType = 'pandas', interpolationMethod = None, matchDates = False)\n```\n```\n5.) from claydates import MultiTickerProcessor\n\n    5a.) multiTickerProcessor.missingUnitsExcluded(dataType = 'pandas', matchDates = True)\n```\n```\n6.) from claydates import MultiTickerProcessor\n\n    6a.) multiTickerProcessor.missingPercentages(onlyPrint = True)\n```\n### SingleTickerPlotter\n```\n1.) from claydates import SingleTickerPlotter\n\n    1a.) singleTickerPlotter = SingleTickerPlotter('QQQ', '1min', 1170)\n    1b.) singleTickerPlotter = SingleTickerPlotter(tickerSymbol = 'QQQ', tickInterval = '1min', numberOfUnits = 1170,\n                                                   percentageChange = True, timeZone = 'America/New_York', quoteCurrency = 'USD',\n                                                   logMissingData = True, mockResponse = False, spacingFactor = 14, \n                                                   seriesType = 'Close', scalerRange = (0,1), binningFactor = 10,\n                                                   figureSize = [14.275,9.525], labelsize = 16, color = 'black')\n```\n```\n2.) from claydates import SingleTickerPlotter\n\n    2a.) singleTickerPlotter.datetimeHandler('missingDataIncludedInFrame') \n    2b.) singleTickerPlotter.datetimeHandler('missingDataIncludedInFrame') \n    2c.) singleTickerPlotter.datetimeHandler('missingDataIncludedInFrame') \n```\n```\n3.) from claydates import SingleTickerPlotter\n\n    3a.) singleTickerPlotter.unalteredFrameGetter()\n```\n```\n4.) from claydates import SingleTickerPlotter\n\n    4a.) singleTickerPlotter.standardSinglePlot()\n```\n```\n5.) from claydates import SingleTickerPlotter\n\n    5a.) singleTickerPlotter.missingDataPlot()\n```\n```\n6.) from claydates import SingleTickerPlotter\n\n    6a.) singleTickerPlotter.interpolatedSinglePlot(methodology = 'linear')\n    6b.) singleTickerPlotter.interpolatedSinglePlot(methodology = 'cubic')\n\n```\n```\n7.) from claydates import SingleTickerPlotter\n\n    7a.) singleTickerPlotter.profileProcessor(numberOfBins = 10, methodology = 'count', interpolation = 'linear')\n\n```\n```\n8.) from claydates import SingleTickerPlotter\n\n    8a.) singleTickerPlotter.singleProfilePlot(seriesType = 'standard', binningType = 'standard', methodology = 'price',\n                                      numberOfBins = None, scaledX = True, scaledY = False, interpolation = None)\n```\n```\n9.) from claydates import SingleTickerPlotter\n\n    9a.) singleTickerPlotter.externalWindowSinglePlot()\n```\n```\n10.) from claydates import SingleTickerPlotter\n\n    10a.) singleTickerPlotter.liveSinglePlot(numberOfUpdates = 14400, interactiveExternalWindow = False, secondsToSleep = 55)\n```\n### MultiTickerPlotter\n```\n1.) from claydates import MultiTickerPlotter\n \n    1a.) multiTickerPlotter = MultiTickerPlotter(['QQQ','SPY','IWM','DIA'], '1min', 390)\n    1b.) multiTickerPlotter = MultiTickerPlotter(tickerSymbols = ['QQQ','SPY','IWM','DIA'], tickInterval = '1min', numberOfUnits = 1170,\n                                                 percentageChange = True, timeZone = 'America/New_York', quoteCurrency = 'USD',\n                                                 logMissingData = True, mockResponse = False, spacingFactor = 14, \n                                                 seriesType = 'Close', scalerRange = (0,1), binningFactor = 10,\n                                                 figureSize = [14.275,9.525], labelsize = 16, color = 'black')\n```\n```\n2.) from claydates import MultiTickerPlotter\n\n    2a.) multiTickerPlotter.standardMultiPlot(method = multiTickerPlotter.missingUnitsExcluded, matchDates = True, interpolationMethod = None,\n                                              interactiveExternalWindow = False, scaled = True, plotTitle = 'Example Plot')\n```\n```\n3.) from claydates import MultiTickerPlotter\n\n    3a.) multiTickerPlotter.cyclePlot(method = multiTickerPlotter.missingUnitsExcluded, matchDates = True, interpolationMethod = None, \n                                      interactiveExternalWindow = False, scaled = True, secondsToPauseFor = 15)\n\n```\n```\n4.) from claydates import MultiTickerPlotter\n\n    4a.) multiTickerPlotter.profileCyclerPlot('standard','standard', methodology = 'price', numberOfBins = None,\n                                               scaledX = True, scaledY = True, interpolation = None)\n```\n```\n5.) from claydates import MultiTickerPlotter\n\n    5a.) multiTickerPlotter.multipleExternalWindowsPlot(method = multiTickerPlotter.missingUnitsExcluded, matchDates = True, interpolationMethod = None,\n                                                        interactiveExternalWindow = False, scaled = True)\n\n```\n```\n6.) from claydates import MultiTickerPlotter\n\n    6a.) multiTickerPlotter.liveMultiPlot(method = multiTickerPlotter.missingUnitsExcluded, matchDates = True, interpolationMethod = None,\n                                          interactiveExternalWindow = False, scaled = True, numberOfUpdates = 14400, secondsToSleepFor = 55)\n```\n## History \n\n### version 1.0.0.\n* Developed and published.\n* December, 2022.\n\n## Gallery \n![enter image description here](https://user-images.githubusercontent.com/116965482/208491965-e922065a-0891-4efa-ae1e-2f8e74c1cfa4.png)\n![](https://user-images.githubusercontent.com/116965482/208492153-5ee0fac2-070e-4544-a346-860de5edde45.png)\n\n![](https://user-images.githubusercontent.com/116965482/208491686-ee5cc406-f27f-4bcb-b35e-41bf94824fd7.png)\n![](https://user-images.githubusercontent.com/116965482/208492232-15438eae-8d6f-4ba9-bd48-362310cddb4c.png)\n![](https://user-images.githubusercontent.com/116965482/208492343-4f412a0b-7971-4f7c-8dc7-b1ec218bfe0e.png)\n\n<br/>\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "twelvedata API,restructuring,cleaning,plotting,financial data",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "claydates",
            "package_url": "https://pypi.org/project/claydates/",
            "platform": null,
            "project_url": "https://pypi.org/project/claydates/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/claydates/1.0.0/",
            "requires_dist": [
                "matplotlib",
                "numpy",
                "pandas",
                "pandas-market-calendars",
                "python-dateutil",
                "requests",
                "twelvedata"
            ],
            "requires_python": "",
            "summary": "Package used for cleaning, restructuring, logging, and plotting of financial data retrieved from the Twelve Data API.",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16154229,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fea4b10bfe22d2c7d3974ad1f099c7f4",
                    "sha256": "acff58a551cc0db53b022dcfdb89982bd4a94778ff6d9d8ffa5f932c8200d6e8"
                },
                "downloads": -1,
                "filename": "claydates-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fea4b10bfe22d2c7d3974ad1f099c7f4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 3673,
                "upload_time": "2022-12-19T20:17:23",
                "upload_time_iso_8601": "2022-12-19T20:17:23.528408Z",
                "url": "https://files.pythonhosted.org/packages/ff/6f/5770930579881ab389be04e02460f4a67d3f69e94fe93996b53861c9d5d6/claydates-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9edea075f4fe0dcd934b75436fe855ba",
                    "sha256": "77ed08716ce1fd626ab08a76da6787f561edd5bc64013e3e3979cb95ea8a58ae"
                },
                "downloads": -1,
                "filename": "claydates-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "9edea075f4fe0dcd934b75436fe855ba",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 3442,
                "upload_time": "2022-12-19T20:17:24",
                "upload_time_iso_8601": "2022-12-19T20:17:24.936826Z",
                "url": "https://files.pythonhosted.org/packages/73/57/fc98d7ba8bb031aa1eceb32cd9e53b1036fc16e13322e519829a94040e3b/claydates-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}