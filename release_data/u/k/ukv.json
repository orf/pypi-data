{
    "0.3.0.1670597407310260243": {
        "info": {
            "author": "Ashot Vardanian",
            "author_email": "info@unum.cloud",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Information Technology",
                "License :: Other/Proprietary License",
                "Natural Language :: English",
                "Operating System :: POSIX",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: C",
                "Programming Language :: C++",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Database"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/unum-cloud/UKV",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ukv",
            "package_url": "https://pypi.org/project/ukv/",
            "platform": null,
            "project_url": "https://pypi.org/project/ukv/",
            "project_urls": {
                "Homepage": "https://github.com/unum-cloud/UKV"
            },
            "release_url": "https://pypi.org/project/ukv/0.3.0.1670597407310260243/",
            "requires_dist": [
                "numpy (>=1.16)",
                "pyarrow (==9.0.0)",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Python bindings for Unum's Universal Key-Value store.",
            "version": "0.3.0.1670597407310260243",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16051037,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cd1eb49a86c86ba1014fdf0adb3777b2",
                    "sha256": "fb6aea7f68768e4e25c7fccc326494149ba8b154491e5cf5f13012f719c42628"
                },
                "downloads": -1,
                "filename": "ukv-0.3.0.1670597407310260243-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "cd1eb49a86c86ba1014fdf0adb3777b2",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": ">=3.7",
                "size": 28762296,
                "upload_time": "2022-12-09T17:47:57",
                "upload_time_iso_8601": "2022-12-09T17:47:57.235717Z",
                "url": "https://files.pythonhosted.org/packages/ed/96/8eab2aa2d439d96ad5d9213e3a53c7a36681df9c41f2b8709d2d1fb8e068/ukv-0.3.0.1670597407310260243-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.0.1670600032909163662": {
        "info": {
            "author": "Ashot Vardanian",
            "author_email": "info@unum.cloud",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Information Technology",
                "License :: Other/Proprietary License",
                "Natural Language :: English",
                "Operating System :: POSIX",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: C",
                "Programming Language :: C++",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Database"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/unum-cloud/UKV",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ukv",
            "package_url": "https://pypi.org/project/ukv/",
            "platform": null,
            "project_url": "https://pypi.org/project/ukv/",
            "project_urls": {
                "Homepage": "https://github.com/unum-cloud/UKV"
            },
            "release_url": "https://pypi.org/project/ukv/0.3.0.1670600032909163662/",
            "requires_dist": [
                "numpy (>=1.16)",
                "pyarrow (==9.0.0)",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Python bindings for Unum's Universal Key-Value store.",
            "version": "0.3.0.1670600032909163662",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16051037,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "30981061b2943a5f8773c52356e26942",
                    "sha256": "5996a669a598d956601c5ad68bade1cca7d2470d10e9e6285ad87f9f49edd2fc"
                },
                "downloads": -1,
                "filename": "ukv-0.3.0.1670600032909163662-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "30981061b2943a5f8773c52356e26942",
                "packagetype": "bdist_wheel",
                "python_version": "cp38",
                "requires_python": ">=3.7",
                "size": 28753774,
                "upload_time": "2022-12-09T17:48:01",
                "upload_time_iso_8601": "2022-12-09T17:48:01.560101Z",
                "url": "https://files.pythonhosted.org/packages/98/ca/0898d8d505d5b13171a490cc6ecd434935402c03fc70befe811f644e81ac/ukv-0.3.0.1670600032909163662-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.0.1670602725034055137": {
        "info": {
            "author": "Ashot Vardanian",
            "author_email": "info@unum.cloud",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Information Technology",
                "License :: Other/Proprietary License",
                "Natural Language :: English",
                "Operating System :: POSIX",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: C",
                "Programming Language :: C++",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Database"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/unum-cloud/UKV",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ukv",
            "package_url": "https://pypi.org/project/ukv/",
            "platform": null,
            "project_url": "https://pypi.org/project/ukv/",
            "project_urls": {
                "Homepage": "https://github.com/unum-cloud/UKV"
            },
            "release_url": "https://pypi.org/project/ukv/0.3.0.1670602725034055137/",
            "requires_dist": [
                "numpy (>=1.16)",
                "pyarrow (==9.0.0)",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Python bindings for Unum's Universal Key-Value store.",
            "version": "0.3.0.1670602725034055137",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16051037,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e12e3730c70b7efa6663f8fe95745915",
                    "sha256": "55d228b996eace62bb8de5b8291db44cf5ae3e2fea1882b36c7d9704261ed285"
                },
                "downloads": -1,
                "filename": "ukv-0.3.0.1670602725034055137-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "e12e3730c70b7efa6663f8fe95745915",
                "packagetype": "bdist_wheel",
                "python_version": "cp39",
                "requires_python": ">=3.7",
                "size": 28753085,
                "upload_time": "2022-12-09T17:48:05",
                "upload_time_iso_8601": "2022-12-09T17:48:05.851243Z",
                "url": "https://files.pythonhosted.org/packages/1b/9f/eae98bc65a72baefa32d9aa940fe71dae288d73dfd20989871800753511b/ukv-0.3.0.1670602725034055137-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.0.1670605435680576071": {
        "info": {
            "author": "Ashot Vardanian",
            "author_email": "info@unum.cloud",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Information Technology",
                "License :: Other/Proprietary License",
                "Natural Language :: English",
                "Operating System :: POSIX",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: C",
                "Programming Language :: C++",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Database"
            ],
            "description": "<h1 align=\"center\">UKV</h1>\n<h3 align=\"center\">\nUniversal Binary Interface<br/>\nFor the Fastest Databases in Existence<br/>\nFrom <a href=\"https://unum.cloud\">Unum</a> with \u2764\ufe0f\n</h3>\n\n<h5 align=\"center\">\nRocksDB \u2022 LevelDB \u2022 UDisk \u2022 UMem<br/>\nBlobs \u2022 Documents \u2022 Graphs \u2022 Texts \u2022 Vectors<br/>\nC \u2022 C++ \u2022 Python \u2022 Java \u2022 GoLang \u2022 Apache Arrow\n</h5>\n<br/>\n\n<p align=\"center\">\n<a href=\"https://twitter.com/unum_cloud\"><img src=\"https://img.shields.io/badge/twitter-follow_us-1d9bf0.svg?color=purple&style=flat-square\"/></a>\n&nbsp;&nbsp;\n<a href=\"https://www.linkedin.com/company/unum-cloud/\"><img src=\"https://img.shields.io/badge/linkedin-connect_with_us-0a66c2.svg?color=purple&style=flat-square\"/></a>\n&nbsp;&nbsp;\n<a href=\"https://www.github.com/unum-cloud/\"><img src=\"https://img.shields.io/github/issues-closed-raw/unum-cloud/ukv?color=purple&style=flat-square\"/></a>\n&nbsp;&nbsp;\n<a href=\"https://www.github.com/unum-cloud/\"><img src=\"https://img.shields.io/github/stars/unum-cloud/ukv?color=purple&style=flat-square\"/></a>\n&nbsp;&nbsp;\n<a href=\"#\"><img src=\"https://img.shields.io/github/workflow/status/unum-cloud/ukv/Build?color=purple&style=flat-square&label=build+and+test\"/></a>\n</p>\n\n## What is UKV?\n\n**UKV is an open C-layer binary standard** for \"Create, Read, Update, Delete\" operations, or CRUD for short.\n\nMany databases exist today, providing similar functionality and performance under different interfaces.\nIt is a problem for DBMS users, introducing vendor locks and additional friction for adopting newer and better technologies.\n\nIf databases do similar things, let's standardize the interface and compete for the best implementation.\nThat way, migrations are more manageable, and the system can be modularized into parts, giving users absolute flexibility in choosing between different:\n\n* Forms of data, or [Modalities](#modalities),\n* Key-Value Store implementations, or [Engines](#engines),\n* Distribution forms, or Packaging,\n* Client SDKs, or [Frontends](#frontends) for higher-level languages.\n\n---\n\n## The [BLAS][blas] of [CRUD][crud]\n\nGeneric standards have existed in computing since 1979.\nThe best one is called **BLAS** and was the locomotive of Numerical Methods across all disciplines in the past 50 years. \nEvery deep-learning you use relies on BLAS.\nWhat is the standard that your DBMS can be built around?\n\n![UKV: Small Map](assets/charts/Intro.png)\n\nWe have yet to pass the test of time, like BLAS, but we can surpass them in modularity and provide a better reference implementation.\nToday, Intel, Nvidia, AMD, GraphCore, Cerebras, and many others ship optimized implementations of BLAS for their hardware.\nSimilarly, we ship proprietary [heavily-tested](#testing) and [extensively-benchmarked](#benchmarks) implementations of UKV to our customers, but even the provided FOSS reference design aims to be better than whatever OLTP DBMS you are using today.\n\n> [Why not use LevelDB or RocksDB interface directly?][ukv-vs-rocks]\n\n---\n\n## Features\n\nWe love to think about UKV as a \"Transactional <sup>1</sup> Zoned <sup>2</sup> Memory Allocator <sup>3</sup>\" that can abstract both persistent and volatile memory.\nThis abstraction every DBMS needs.\nBut UKV has more to offer!\n\n<table>\n<td style=\"text-align: center\">\n\n<ul>\n<li> <b>ACID Transactions</b> across collections  </li>\n<li> Persistent <b>Snapshots</b> </li>\n<li> Operation-level <b>WATCH</b>-es  </li>\n<li> <b>BSON, JSON, MessagePack</b> documents support  </li>\n<li> <b>JSON Patches</b> & Merge-Patches  </li>\n<li> <b>JSON Pointers</b> Addressing  </li>\n</ul>\n\n</td>\n<td style=\"text-align: center\">\n\n<ul>\n<li> Native Apache <b>Arrow</b> format support </li>\n<li> Apache <b>Arrow Flight</b> server implementation </li>\n<li> <b>Bulk Scans</b>, Random <b>Samping</b> </li>\n<li> <b>Pandas</b> Tabular interface  </li>\n<li> <b>NetworkX</b> Graph interface  </li>\n<li> <b>PyTorch</b> & <b>TensorFlow</b> Data-Loaders </li>\n</ul>\n</td>\n</table>\n\n> 1: For [ACID][acid].\n> 2: For having named collections.\n> 3: Because keys are integers, like `uintptr_t`, and values are virtually continuous memory blocks of variable length.\n\n## [HTAP][htap]: [OLAP][olap] + [OLTP][oltp]\n\nThanks to modular architecture, you can take the pieces you need.\nThe most apparent combinations would cover the most immediate use cases like:\n\n1. Getting a Python, GoLang, or Java wrapper for vanilla RocksDB or LevelDB.\n2. Serving them via Apache Arrow Flight RPC to Spark, Kafka, or PyTorch.\n3. Embedded Document and GraphDB that will avoid networking overheads.\n4. Tiering DBMS deployment between UMem and persistent memory.\n\nBut that is just the peak of the iceberg.\nLet's dive under the surface of our data lake.\n\n### **\ud83d\udc26\ud83d\udc26 + \ud83e\udea8 \u2192 \u2620\ufe0f\u2620\ufe0f**\n\nIt is normal these days to have hundreds of Databases for one project.\nAt least one for every kind of workload.\nSo if you are building an online marketplace, it may look like this:\n\n|                                           |                                               |\n| :---------------------------------------: | :-------------------------------------------: |\n| Postgres for account details and payments | MongoDB for products descriptions and reviews |\n|      Neo4J to link related products       |  AWS S3 to store product pictures and videos  |\n\nWhen the data is updated, you have to apply changes across all those instances, manually rolling them back if one of the parts fails.\nEvery system has a different API, different guarantees, and runtime constraints.\nAlready sounds like too many **wasted engineering hours**.\n\n![UKV: HTAP](assets/charts/HTAP.png)\n\nAs it is not one store, different teams work on different versions of data.\nSome of those datasets can quickly become irrelevant, especially in:\n\n* Fraud Detection, where parties constantly adapt,\n* Recommender Systems, if new products and content appear every day,\n* Real-Time Pricing, where market conditions dictate the cost of services.\n\nBy the time row-major OLTP data is exported into the column-major OLAP store, it might be too late.\nEvery data scientist knows - \"Garbage In, Means Garbage Out\".\nOutdated input will give you an obsolete result, and the business will lose money.\n\nBut if you have just 1 Hybrid Store, the pain is gone.\nAnd the engineering teams can spend time doing something productive rather than packaging and versioning endless Parquet files around your system.\n\n### **One Data Lake to Serve Them All**\n\n---\n\n## Backend\n\nA backend is a composition of just 2-3 parts.\nAn Engine, being a key-value store for the serialized representation.\nAn implementation of Modalities, being various serialization and indexing approaches for structured data.\nAnd a Distribution form, such as the implementation of some web-protocol for communication with the outside world.\n\n![UKV: Backend](assets/charts/Backend.png)\n\nOur horizontal scaling capabilities aren't ideal **yet**.\nSharding graphs and vector collections is hard.\nWe can do it at least as bad as the others are doing it, but we don't want to stop there.\nMore news to come.\n\nOur **vertical scaling**, however, **is the best in the industry**.\nEven with just a single node, in a 2U chassis in 2022, we can quickly get 24x 16 TB of NVMe storage connected to 2x CPU sockets, totaling 384 TB of space, capable of yielding ~120 GB/s of read throughput, out of which, ~70 GB/s our in-house engine can already sustain.\nWith NVMe-oF, this can scale horizontally to Petabytes of low-latency storage served through 200 GBit/s Mellanox Infiniband fibers!\nCombining it with the numerous features above and GPU acceleration, one can get an all-one Data Lake with the feel of Pandas, Rapids speed, Hadoop scale, and Postgres consistency.\n\n### Engines\n\nFollowing engines can be used almost interchangeably.\nHistorically, LevelDB was the first one.\nRocksDB then improved on functionality and performance.\nNow it serves as the foundation for half of the DBMS startups.\n\n|                          | LevelDB | RocksDB  |  UDisk  |  UMem   |\n| :----------------------- | :-----: | :------: | :-----: | :-----: |\n| **Speed**                |   1x    |    2x    | **10x** | **30x** |\n| **Persistent**           |    \u2713    |    \u2713     |    \u2713    |    \u2717    |\n| **Transactional**        |    \u2717    |    \u2713     |    \u2713    |    \u2713    |\n| **Block Device Support** |    \u2717    |    \u2717     |    \u2713    |    \u2717    |\n| Encryption               |    \u2717    |    \u2717     |    \u2713    |    \u2717    |\n| [Watches][watch]         |    \u2717    |    \u2713     |    \u2713    |    \u2713    |\n| [Snapshots][snap]        |    \u2713    |    \u2713     |    \u2713    |    \u2717    |\n| Random Sampling          |    \u2717    |    \u2717     |    \u2713    |    \u2713    |\n| Bulk Enumeration         |    \u2717    |    \u2717     |    \u2713    |    \u2713    |\n| Named Collections        |    \u2717    |    \u2713     |    \u2713    |    \u2713    |\n| Open-Source              |    \u2713    |    \u2713     |    \u2717    |    \u2713    |\n| Compatibility            |   Any   |   Any    |  Linux  |   Any   |\n| Maintainer               | Google  | Facebook |  Unum   |  Unum   |\n\nUMem and UDisk are both designed and maintained by Unum.\nBoth are feature-complete, but the most crucial feature our infrastructure provides is performance.\nBeing fast in memory is easy.\nThe core logic of UMem can be found in the templated header-only <code class=\"docutils literal notranslate\"><a href=\"https://github.com/ashvardanian/consistent_set\" class=\"pre\">consistent_set</a></code> library.\n\n![UCSB 10 TB Results](assets/charts/Performance.png)\n\nDesigning UDisk was a much more challenging 7-year long endeavour.\nIt included inventing new tree-like structures, implementing partial kernel bypass with `io_uring`, complete bypass with `SPDK`, GPU acceleration, and even a custom internal filesystem.\n**UDisk is the first engine to be designed from scratch with parallel architectures and kernel-bypass in mind**.\n\n> [Jump to Benchmarks](#benchmarks).\n\n### Modalities\n\nThe same DBMS can contain multiple collections.\nEach collection can store BLOBs or any modality of structured data.\nData of different modalities can't be stored in the same collection.\nACID transactions across modalities are supported.\n\n|                           |                     Documents                      |                 Graphs                 |                       Vectors                        |\n| :------------------------ | :------------------------------------------------: | :------------------------------------: | :--------------------------------------------------: |\n| Values                    |           JSON-like Hierarchical Objects           |       Labeled Directed Relations       |             High-Dimensional Embeddings              |\n| Specialized Functionality | JSON \u21d4 BSON \u21d4 MessagePack, Sub-Document Operations | Gather Neighbors, Count Vertex Degrees | Quantization, K-Approximate Nearest-Neighbors Search |\n| Examples                  |              MongoDB, Postgres, MySQL              |           Neo4J, TigerGraph            |               Elastic Search, Pinecone               |\n\nOne of our core objectives was to select the minimal core set of functions for each modality.\nIn that case, implementing them can be easy for any passionate developer.\nIf the low-level interfaces are flexible, making the high-level interfaces rich is easy.\n\n## Frontend: SDK \u2228 API\n\nUKV for Python and for C++ look very different.\nOur Python SDK mimics other Python libraries - [Pandas][pandas] and [NetworkX][networkx].\nSimilarly, C++ library provides the interface C++ developers expect.\n\n![UKV: Frontends](assets/charts/Frontend.png)\n\nAs we know people use different languages for different purposes.\nSome C-level functionality isn't implemented for some languages.\nEither because there was no demand for it, or as we haven't gotten to it yet.\n\n\n| Name             | Transact | Collections | Batches | Docs  | Graphs | Copies |\n| :--------------- | :------: | :---------: | :-----: | :---: | :----: | :----: |\n| C Standard       |    \u2713     |      \u2713      |    \u2713    |   \u2713   |   \u2713    |   0    |\n|                  |          |             |         |       |        |        |\n| C++ SDK          |    \u2713     |      \u2713      |    \u2713    |   \u2713   |   \u2713    |   0    |\n| Python SDK       |    \u2713     |      \u2713      |    \u2713    |   \u2713   |   \u2713    |  0-1   |\n| GoLang SDK       |    \u2713     |      \u2713      |    \u2713    |   \u2717   |   \u2717    |   1    |\n| Java SDK         |    \u2713     |      \u2713      |    \u2717    |   \u2717   |   \u2717    |   1    |\n|                  |          |             |         |       |        |        |\n| Arrow Flight API |    \u2713     |      \u2713      |    \u2713    |   \u2713   |   \u2713    |  1-2   |\n\nSome frontends here have entire ecosystems around them!\n[Apache Arrow Flight][flight] API, for instance, has its own bindings for  C, C++, C#, Go, Java, JavaScript, Julia, MATLAB, Python, R, Ruby and Rust.\n\n![UKV: Frontends](assets/charts/Arrow.png)\n\n---\n\n## Documentation\n\nFor guidance on installation, development, deployment, and administration, see our [documentation](https://unum.cloud/UKV).\n\n## Installation\n\nThe entire DBMS fits into a sub 100 MB Docker image.\nRun the following script to pull and run the container, exposing [Apache Arrow Flight][flight] API server on the port `38709`.\nClient SDKs will also communicate through that same port.\n\n```sh\ndocker run --rm --name TestUKV -p 38709:38709 unum/ukv\n```\n\nFor C/C++ clients and for the embedded distribution of UKV, CMake is the default form of installation.\nIt may require installing Arrow separately.\n\n```cmake\nFetchContent_Declare(\n    ukv\n    GIT_REPOSITORY https://github.com/unum-cloud/UKV.git\n    GIT_SHALLOW TRUE\n)\nFetchContent_MakeAvailable(ukv)\ninclude_directories(${ukv_SOURCE_DIR}/include)\n```\n\nAfter that, you only need to choose linking target, such as `ukv_rocksdb`, `ukv_umem`, `ukv_flight_client`, or something else.\nFor Conan users a shorter alternative for C/C++ is available:\n\n```sh\nconan install ukv\n```\n\nFor Python users, it is the classical:\n\n```sh\npip install ukv\n```\n\n> [Read full installation guide in our docs here][ukv-install].\n\n## Getting Started\n\n* [Using the C Standard Directly][ukv-c-tutor]\n  * Most Flexible!\n  * Most Performant!\n  * Comparatively verbose.\n* [Using C++ SDK][ukv-cpp-tutor]\n* [Using Python SDK][ukv-python-tutor]\n* [Using Java SDK][ukv-java-tutor]\n* [Using GoLang SDK][ukv-golang-tutor]\n* [Using Arrow Flight API][ukv-flight-tutor]\n\n## Testing\n\nWe split tests into 4 categories:\n\n1. Compilation: Validate meta-programming.\n2. API: Prevent passing incompatible function arguments.\n3. Unit: Short and cover most of the functionality.\n4. **Stress**: Very long and multithreaded.\n\nAll unit tests are packed into a single executable to simplify running it during development.\nEvery backend produces one such executable.\nThe in-memory embedded variant is generally used for debugging any non-engine level logic.\n\nThe stress tests, on the other hand, can run for days and simulate millions of concurrent transactions, ensuring the data remains intact.\nAny additions, especially to the stress tests, will be highly welcomed!\n\n> [Read full testing guide in our docs here][ukv-tests].\n\n## Benchmarks\n\nIt is always best to implement an application-specific benchmark, as every use case is different.\nStill, for the binary layer logic, we have built a dedicated project to evaluate persistent data structures - [UCSB][ucsb].\nIt doesn't depend on UKV and uses native interfaces of all the engines to put everyone in the same shoes.\n\nAll engines were benchmarked for weeks using [UCSB][ucsb].\nWe have already published the results for BLOB-layer abstractions for [10 TB][ucsb-10], and, previously, [1 TB][ucsb-1] collections.\n\nFor more advanced modality-specific workloads, we have the following benchmarks provided in this repo:\n\n* **Twitter**. It takes the `.ndjson` dump of their <code class=\"docutils literal notranslate\"><a href=\"https://developer.twitter.com/en/docs/twitter-api/v1/tweets/sample-realtime/overview\" class=\"pre\">GET statuses/sample API</a></code> and imports it into the Documents collection. We then measure random-gathers' speed at document-level, field-level, and multi-field tabular exports. We also construct a graph from the same data in a separate collection. And evaluate Graph construction time and traversals from random starting points.\n* **Tabular**. Similar to the previous benchmark, but generalizes it to arbitrary datasets with some additional context. It supports Parquet and CSV input files.\n* **Vector**. Given a memory-mapped file with a big matrix, builds an Approximate Nearest Neighbors Search index from the rows of that matrix. Evaluates both construction and query time.\n\nWe are working hard to prepare a comprehensive overview of different parts of UKV compared to industry-standard tools.\nOn both our hardware and most common instances across public clouds.\n\n> [Read full benchmarking guide in our docs here][ukv-benchmarks].\n\n## Tooling\n\nTools are built on top of the UKV interface and aren't familiar with the underlying backend implementation.\nThey are meant to simplify DevOps and DBMS management.\nFollowing tools are currently in the works.\n\n* Bulk dataset imports and exports for industry-standard Parquet, NDJSON and CSV files.\n* Rolling backups and replication.\n* Visualization tools and dashboards.\n\n> [Read full tooling guide in our docs here][ukv-tools].\n\n## Development & Licensing\n\nThis is an umbrella project for a number of FOSS libraries.\nSometimes a couple of libraries can be used together for the same task to complement each other functionality.\nFor example, `simdjson` is used for document validation and sampling, while `yyjson` is used for updates.\n\nA full list of dependencies is available at the link below, together with detailed descriptions of reference implementations.\nLicensing depends on which parts you are using.\n\n> [Read full development and contribution guide in our docs here][ukv-details].\n\n## Presets, Limitations and FAQ\n\n* Keys are 64-bit integers, by default. [Why?][ukv-keys-size]\n* Values are binary strings under 4 GB long. [Why?][ukv-values-size]\n* Transactions are ACI(D) by-default. [What does it mean?][ukv-acid]\n* Why not use LevelDB or RocksDB interface? [Answered][ukv-vs-rocks]\n* Why not use SQL, MQL or Cypher? [Answered][ukv-vs-sql]\n\n[ukv-c-tutor]: https://unum.cloud/UKV/c\n[ukv-cpp-tutor]: https://unum.cloud/UKV/cpp\n[ukv-python-tutor]: https://unum.cloud/UKV/python\n[ukv-java-tutor]: https://unum.cloud/UKV/java\n[ukv-golang-tutor]: https://unum.cloud/UKV/golang\n[ukv-flight-tutor]: https://unum.cloud/UKV/flight\n[ukv-tests]: https://unum.cloud/UKV/tests\n[ukv-benchmarks]: https://unum.cloud/UKV/benchmarks\n[ukv-tools]: https://unum.cloud/UKV/tools\n[ukv-install]: https://unum.cloud/UKV/install\n[ukv-details]: https://unum.cloud/UKV/details\n[ukv-keys-size]: https://unum.cloud/UKV/c#integer-keys\n[ukv-values-size]: https://unum.cloud/UKV/c#smallish-values\n[ukv-acid]: https://unum.cloud/UKV/c#acid-transactions\n[ukv-vs-rocks]: https://unum.cloud/UKV/related#leveldb-rocksdb\n[ukv-vs-sql]: https://unum.cloud/UKV/related#sql-mql-cypher\n\n[ucsb-10]: https://unum.cloud/post/2022-03-22-ucsb\n[ucsb-1]: https://unum.cloud/post/2021-11-25-ycsb\n[ucsb]: https://github.com/unum-cloud/ucsb\n[consistent_set]: https://github.com/ashvardanian/consistent_set\n[ukv-c-sources]: https://github.com/unum-cloud/UKV/tree/main/include/ukv\n\n[blas]: https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms\n[crud]: https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\n[acid]: https://en.wikipedia.org/wiki/ACID\n[arrow]: https://arrow.apache.org/\n[patch]: https://datatracker.ietf.org/doc/html/rfc6902\n[mpack]: https://msgpack.org/index.html\n[flight]: https://arrow.apache.org/docs/format/Flight.html\n[pointer]: https://datatracker.ietf.org/doc/html/rfc6901\n[bson]: https://www.mongodb.com/json-and-bson\n[pytorch]: https://pytorch.org/\n[tensorflow]: https://tensorflow.org\n[rocksdb]: https://rocksdb.org\n[leveldb]: https://github.com/google/leveldb\n[hadoop]: https://hadoop.apache.org\n[networkx]: https://networkx.org\n[pandas]: https://pandas.pydata.org\n[gunrock]: https://gunrock.github.io\n[s3]: https://aws.amazon.com/s3\n[dbms-cloc]: https://news.ycombinator.com/item?id=24813239\n[watch]: https://redis.io/commands/watch/\n[snap]: https://github.com/facebook/rocksdb/wiki/Snapshot\n[olap]: https://en.wikipedia.org/wiki/Online_analytical_processing\n[oltp]: https://en.wikipedia.org/wiki/Online_transaction_processing\n[htap]: https://en.wikipedia.org/wiki/Hybrid_transactional/analytical_processing\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/unum-cloud/UKV",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ukv",
            "package_url": "https://pypi.org/project/ukv/",
            "platform": null,
            "project_url": "https://pypi.org/project/ukv/",
            "project_urls": {
                "Homepage": "https://github.com/unum-cloud/UKV"
            },
            "release_url": "https://pypi.org/project/ukv/0.3.0.1670605435680576071/",
            "requires_dist": [
                "numpy (>=1.16)",
                "pyarrow (==9.0.0)",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Python bindings for Unum's Universal Key-Value store.",
            "version": "0.3.0.1670605435680576071",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16051037,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "185d63cd832b7e24152d5aeb01ae4537",
                    "sha256": "b50b998a329422049ecca706268c1634e9881e12b5b4057385813b2ca30d35fd"
                },
                "downloads": -1,
                "filename": "ukv-0.3.0.1670605435680576071-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "185d63cd832b7e24152d5aeb01ae4537",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": ">=3.7",
                "size": 28752942,
                "upload_time": "2022-12-09T17:48:08",
                "upload_time_iso_8601": "2022-12-09T17:48:08.722426Z",
                "url": "https://files.pythonhosted.org/packages/dd/77/ee1caece938b4df48814d0916b50cc05e32224f2dd14d79f57998cb2fd84/ukv-0.3.0.1670605435680576071-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}