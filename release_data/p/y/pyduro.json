{
    "1.0.0": {
        "info": {
            "author": "Cl\u00e9ment PR\u00c9VOT",
            "author_email": "clementprevot+pypi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Natural Language :: French",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Topic :: Home Automation",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/clementprevot/pyduro",
            "keywords": "aduro h1 wood pellet burner nbe",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyduro",
            "package_url": "https://pypi.org/project/pyduro/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyduro/",
            "project_urls": {
                "Homepage": "https://github.com/clementprevot/pyduro"
            },
            "release_url": "https://pypi.org/project/pyduro/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A Pypi library to communicate with Aduro (H1) wood/pellet burner via NBE communication",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15780306,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "799234efe6ec8d5cf118f62c8ae3e1c7",
                    "sha256": "a14f6c3246aec9d1c08cbf36dbb6c6c876ef05688f4854b21d44dd551ad6aa1c"
                },
                "downloads": -1,
                "filename": "pyduro-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "799234efe6ec8d5cf118f62c8ae3e1c7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 12684,
                "upload_time": "2022-11-15T15:51:11",
                "upload_time_iso_8601": "2022-11-15T15:51:11.858910Z",
                "url": "https://files.pythonhosted.org/packages/d3/19/5ddbd6e4a3efc048d14a5d4d39363ef8c2cd149ec3d884be87d57c785a2b/pyduro-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "aa0b171733900f900d6309ca2709e2a1",
                    "sha256": "85731e4178261c8f0746c6329988c8bc3fceccfceb380ff722aba89e03486918"
                },
                "downloads": -1,
                "filename": "pyduro-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "aa0b171733900f900d6309ca2709e2a1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 13756,
                "upload_time": "2022-11-15T15:51:14",
                "upload_time_iso_8601": "2022-11-15T15:51:14.204613Z",
                "url": "https://files.pythonhosted.org/packages/ec/23/c44793aaf581f62980a6d38126e38a81e2d1e96fd5aaaec8fe2d134052ff/pyduro-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.0": {
        "info": {
            "author": "Cl\u00e9ment PR\u00c9VOT",
            "author_email": "clementprevot+pypi@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Natural Language :: French",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Topic :: Home Automation",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "# PyDuro\n\nA Pypi library to communicate with Aduro (H1) wood/pellet burner via NBE\ncommunication.\n\n## About\n\nThis library is intented to communicate with NBE capable burners (typically\nAdura hybrid stoves).\n\n### Request\n\nNBE is an UDP protocol that uses ASCII frames to communicate. Here is an example\nframe (this one is used to discover a burner):\n\n```\nabcdefghijkl041837 \\x02000012345678904361465775pad 013NBE Discovery\\x04\n```\n\nAnd here the different part of the frame:\n\n* **abcdefghijkl** - `appId`, 12 alphanumerical (upper and lowercase) characters -\n  Uniquely identify the application that is talking with the oven _(you can\n  put here whatever you want)_\n* **123456** - `controllerId`, 6 digits - This is the \"Serial number\" of your\n  oven _(the same as the one you entered in the official Aduro application, you\n  can find it on a sticker on the oven, often inside of the door)_\n* **space** or **\\*** or **-** - Encryption level of the frame _(' ' = not\n  encrypted, '*' = RSA encrypted, '-' = XTEA encrypted)_\n* **\\x02** - `startChar`, the ASCII character `0x02` _(so 1 char, not \"\\x02\")_ -\n  This is the separator to identify the beginning of the request\n* **00** - `function`, 2 digits - Identify the type of request _(see below)_\n* **00** - `sequenceNumber`, 2 digits - To identify the request when run in\n  sequence _(optional, you can leave this at 00 if you don't care about the\n  order of your requests)_\n* **1234567890** - `pinCode`, 10 digit - The password to connect to your oven\n  _(the same as the one you entered in the official Aduro application, you can\n  find it on a sticker on the oven, often inside of the door)_\n* **4361465775** - `time`, 10 digits - The timestamp at which the request as\n  been issued _(`'{:0>10.10}'.format(str(time()))` in Python do the trick)_\n* **pad** _(literally the string \"pad \") - Extra space reserved for future use\n* **013** - `payloadSize`, 3 digits - The size of the actual payload of the\n  request _(that comes right after this)_\n* **NBE Discovery** - `payload`, max 495 bytes - The actual payload of the\n  request _(here in the example it's a discovery request)_.\n* **\\x04** - `endChar`, the ASCII character `0x04` _(so 1 char, not \"\\x04\")_ -\n  This is the separator to identify the end of the payload\n\n### Response\n\nA response will always be formed in pretty much the same way:\n\n```\nabcdefghijkl123456 \\x0200000065Serial=123456;IP=192.168.1.250;Type=v13std;Ver=705;Build=38;Lang=0\\x04\n```\n\n* **abcdefghijkl** - `appId`, 12 alphanumerical (upper and lowercase) characters -\n  Uniquely identify the application that the oven  is talking to\n* **123456** - `controllerId`, 6 digits - This is the \"Serial number\" of the\n  oven responding\n* **space** or **\\*** or **-** - Encryption level of the frame _(' ' = not\n  encrypted, '*' = RSA encrypted, '-' = XTEA encrypted)_\n* **\\x02** - `startChar`, the ASCII character `0x02` _(so 1 char, not \"\\x02\")_ -\n  This is the separator to identify the beginning of the response\n* **00** - `function`, 2 digits - Identify the type of response _(see below)_\n* **00** - `sequenceNumber`, 2 digits - To identify the request this response is\n  for when using a sequence\n* **0** - `status`, 1 digit - The status of the response _(0 = success, >0 =\n  error)_\n* **013** - `payloadSize`, 3 digits - The size of the actual payload of the\n  response _(that comes right after this)_\n* **Serial=12345;IP=192.168.1.250;Type=v13std;Ver=705;Build=38;Lang=0** -\n  `payload`, max 1007 bytes - The actual payload of the response _(here in the\n  example it's a discovery response in the form of a semicolon separated list of\n  key/values pair)_.\n* **\\x04** - `endChar`, the ASCII character `0x04` _(so 1 char, not \"\\x04\")_ -\n  This is the separator to identify the end of the payload\n\n### Functions\n\nThere is a limited set of functions you can use in the NBE protocol:\n\n* **0**: Discovery\n* **1**: Read settings value\n* **2**: Set settings value\n* **3**: Read setup range\n* **4**: Read operating data\n* **5**: Read advanced data\n* **6**: Read consumption data\n* **7**: Read chart data\n* **8**: Read event log\n* **9**: Read info\n* **10**: Read available programs\n\n> Note that your burner might not support all of them.\n\n### More info\n\nYou can learn more about NBE with\n[this repository](https://github.com/motoz/nbetest)\n_(I highly recommend you to play with the CLI to discover more about the protocol)_\nand in particular\n[this documentation](https://github.com/motoz/nbetest/blob/master/protocol.md)\nas well as the various implementations.\n\nYou can also read [this issue](https://github.com/clementprevot/pyduro/issues/1)\nand the implementation of the protocol in the PyDuro library.\n\n## Installation\n\n```bash\npip install pyduro\n```\n\n## Lib usage\n\nSimply import the actions and use them:\n\n```python\nfrom pyduro.actions import discover, get, set\n\ndiscover.run()\nget.run(\n  burner_address=\"<burner IP address>\",\n  serial=\"<burner serial number>\",\n  pin_code=\"<burner pin code>\",\n  function_name=\"<settings|range|operating|advanced|consumption|chart|logs|info|versions>\",\n  path=\"<path>\"\n)\nset.run(\n  burner_address=\"<burner IP address>\",\n  serial=\"<burner serial number>\",\n  pin_code=\"<burner pin code>\",\n  function_name=\"<settings|range|operating|advanced|consumption|chart|logs|info|versions>\",\n  path=\"<path>\"\n  value=\"<value>\"\n)\n```\n\n### Response\n\nEvery response from a burner will be composed with the same fields:\n\n* `frame`: the whole raw NBE frame received\n* `burner_address`: the burner IP address from which the response originated\n* `burner_port`: the burner UDP port from which the response originated\n* `app_id`: the application ID the response is intended to\n  _(when using PyDuro will always be `___pyduro___`)_\n* `serial`: the burner serial number from which the response originated\n* `function`: the function identifier the response is intended to\n* `sequence_number`: the identifier of the request the response is intended to\n* `status`: the status of the response _(0 = success, >0 = error)_\n* `payload_size`: the size of the payload of the response\n* `payload`: the actual response payload\n\nYou can also use the `parse_payload` method that will return:\n\n* a string if the payload is a string\n* a dict if the payload is a semicolon separated list of fields _(`name=value`)_\n* a list of the payload is a semicolon separated list of values\n\n## CLI usage\n\nClone this repository to use the CLI.\n\n### Integrated help\n\n```bash\npython -m pyduro --help\n```\n\n### Discover a burner\n\n```bash\npython -m pyduro [discover]\n```\n\nThe CLI will exit with 0 if a burner is found, 1 otherwise.\n\n### Get information from a burner\n\n```bash\npython -m pyduro -b <burner IP address> -s <burner serial number> -p <burner pin code> get <settings|range|operating|advanced|consumption|chart|logs|info|versions> \"<path>\"\n```\n\nThe result will be output as a JSON object that you can then manipulate with\n`jq` for example.\n\nThe CLI will exit with the return code return by the burner (0 = success, >0 =\nerror).\n\n> For `logs` action, you can pass \"now\" as path (which is also the default\n> value) to get the latest logs from your burner.\n\n> For `settings` action, you have to pass one of the valid following path:\n>\n> * \"boiler\",\n> * \"hot_water\"\n> * \"regulation\"\n> * \"weather\"\n> * \"weather2\"\n> * \"oxygen\"\n> * \"cleaning\"\n> * \"hopper\"\n> * \"fan\"\n> * \"auger\"\n> * \"ignition\"\n> * \"pump\"\n> * \"sun\"\n> * \"vacuum\"\n> * \"misc\"\n> * \"alarm\"\n> * \"manual\"\n\n> For `consumption` action, you can pass one of the following path:\n>\n> * \"total_hours\",\n> * \"total_days\"\n> * \"total_months\"\n> * \"total_years\"\n> * \"dhw_hours\"\n> * \"dhw_days\"\n> * \"dhw_months\"\n> * \"dhw_years\"\n> * \"counter\"\n\n**Examples**\n\n```bash\npython -m pyduro -b 192.168.1.250 -s 1234 -p 12345678 get operating\n\n> {\n>   \"NA\": \"38\",\n>   \"air_flow\": \"0\",\n>   \"air_quality\": \"0\",\n>   \"ashbox_contact\": \"0.0\",\n>   \"ashbox_minutes\": \"0.0\",\n>   \"back_pressure\": \"0\",\n>   \"boiler_pump_state\": \"0\",\n>   \"boiler_ref\": \"19.0\",\n>   [...]\n> }\n```\n\n```bash\npython -m pyduro -b 192.168.1.250 -s 1234 -p 12345678 get operating \"boiler_ref\"\n\n> \"boiler_ref=19.0\"\n```\n\n```bash\npython -m pyduro -b 192.168.1.250 -s 1234 -p 12345678 get settings \"misc.*\"\n\n> {\n>   [...]\n>   \"start\": \"0\",\n>   \"stop\": \"0\",\n>   [...]\n> }\n```\n\n```bash\npython -m pyduro -b 192.168.1.250 -s 1234 -p 12345678 get settings \"misc.start\"\n\n> \"start=0\"\n```\n\n> Note that you can pass \"*\" as a path to get the full response from your\n> burner.  \n> If you don't give a pass (or give an empty one) then \"*\" will be used\n> as default.\n\n### Update a burner's setting\n\n```bash\npython -m pyduro -b <burner IP address> -s <burner serial number> -p <burner pin code> set settings \"<path>\" \"<value>\"\n```\n\nThe CLI will exit with the return code return by the burner (0 = success, >0 =\nerror).\n\n**Examples**\n\n```bash\npython -m pyduro -b 192.168.1.250 -s 1234 -p 12345678 set settings \"misc.start\" \"1\"\n```\n\n```bash\npython -m pyduro -b 192.168.1.250 -s 1234 -p 12345678 set settings \"misc.stop\" \"1\"\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/clementprevot/pyduro",
            "keywords": "aduro h1 wood pellet burner nbe",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyduro",
            "package_url": "https://pypi.org/project/pyduro/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyduro/",
            "project_urls": {
                "Homepage": "https://github.com/clementprevot/pyduro"
            },
            "release_url": "https://pypi.org/project/pyduro/1.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A Pypi library to communicate with Aduro (H1) wood/pellet burner via NBE communication",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15780306,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8c3ef0d2ea83f038b100a9517e0fe47c",
                    "sha256": "966f36c9f343c294b18ac0079f4fa706bc73f383730bb188db984c9927525912"
                },
                "downloads": -1,
                "filename": "pyduro-1.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8c3ef0d2ea83f038b100a9517e0fe47c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 12684,
                "upload_time": "2022-11-15T20:09:46",
                "upload_time_iso_8601": "2022-11-15T20:09:46.429619Z",
                "url": "https://files.pythonhosted.org/packages/23/79/35886fa323b639f9c7a3c134b0a751dfeec80f4690ed9594140062d931e4/pyduro-1.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b7a070f01d0eabe3af8a8cb91fd1c82c",
                    "sha256": "c9347ab2eabd80e96be1f0b642bebcc7ea0fa358dc4d3d1b2081af82f2f8d8ba"
                },
                "downloads": -1,
                "filename": "pyduro-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "b7a070f01d0eabe3af8a8cb91fd1c82c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 13715,
                "upload_time": "2022-11-15T20:09:47",
                "upload_time_iso_8601": "2022-11-15T20:09:47.729412Z",
                "url": "https://files.pythonhosted.org/packages/9b/8f/a3ad0c28177d88f141ce531fccf939fe2520b2b471c2f4f38a582327a85e/pyduro-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}