{
    "0.1": {
        "info": {
            "author": "Alejandro Su\u00e1rez",
            "author_email": "alejandrosuarez.eu@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "License :: OSI Approved :: BSD License",
                "Topic :: Utilities"
            ],
            "description": "<a name=\"readme-top\"></a>\n<!-- PROJECT LOGO -->\n<div align=\"center\">\n\n<h1 align=\"center\">python-cli-generator</h1>\n\n  <p align=\"center\">\n    A Python library that automatically generates a CLI given a class, a function or a list of classes.\n    <br />\n    <br />\n <div align=\"center\">\n\n\n[![Issues][issues-shield]][issues-url]\n[![MIT License][license-shield]][license-url]\n\n\n\n</div>\n    <a href=\"https://github.com/AlexSua/python-cli-generator/issues\">Report Bug</a>\n    \u00b7\n    <a href=\"https://github.com/AlexSua/python-cli-generator/issues\">Request Feature</a>\n  </p>\n</div>\n\n<details>\n  <summary>Table of Contents</summary>\n  <ol>\n    <li>\n      <a href=\"#about-the-project\">About The Project</a>\n    </li>\n    <li>\n      <a href=\"#getting-started\">Getting Started</a>\n      <ul>\n        <li><a href=\"#prerequisites\">Prerequisites</a></li>\n      </ul>\n    </li>\n    <li>\n\t<a href=\"#usage\">Usage</a>\n\t<ul>\n        <li><a href=\"#import-the-library\"> Import the library</a></li>\n        <li><a href=\"#create-input-classes\">Create input classes</a></li>\n        <li><a href=\"#generate-cli\">Generate CLI</a></li>\n        <li><a href=\"#cli-results\">Cli results</a></li>\n      </ul>\n\t</li>\n    <li><a href=\"#roadmap\">Roadmap</a></li>\n    <li><a href=\"#license\">License</a></li>\n    <li><a href=\"#contact\">Contact</a></li>\n  </ol>\n</details>\n</br>\n\n## About The Project\nThis library allows a rapid creation of a CLI by automatically reading the attributes, methods and function parameters inside a class and generating its corresponding Command Line Interface through the built-in argparse library. The module contains an optional output processor able to print the result of the executed command in different formats.\n\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Getting Started\nThe necessary steps to get the library working on your environment.\n\n\n### Prerequisites\n\nBefore using the application you need to have installed [python](https://www.python.org/). You can get instructions on how to install it by following the link shown before.\n\n\n\n### Install the library\n\n```bash\npip3 install git+https://github.com/AlexSua/python-cli-generator.git\n```\n> In the future the library will be published in PyPI. For now you can use the command above. \n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n## Usage\n\n### Import the library\nImport the controller class \"Cli\" that contains the main functionality for initializing the generation process.\n\n```Python\nfrom python_cli_generator import Cli\n```\n\n\n### Create input classes\nCreate the classes the generator will use to generate the Command line interface.\n> Notice that comments are as well parsed and automatically added to the CLI.\n```Python\nclass ParameterTest:\n    \"\"\"Parameter test class\n    parameter_test_required (str): optional parameter parameter_test_attr1\n    parameter_test_optional (str): optional parameter parameter_test_attr2.\n\n    \"\"\"\n    #If it doesn't have default value is not generated.\n    parameter_test_attr1: str\n    parameter_test_attr2: str = \"\"\n\n\nclass Test:\n    \"\"\"Test class\n    test_attr_1 (str): optional parameter test_attr_1\n    test_attr_2 (str): optional parameter test_attr_2.\n    \"\"\"\n    test_attr_1: str\n    test_attr_2: str\n\n    def __init__(self):\n        self.test_attr_1 = \"test1\"\n        self.test_attr_2 = \"test2\"\n\n    def t_method(self, test3, test4=\"test4\", **test5: ParameterTest):\n        \"\"\"A method1 example\n\n        Args:\n            test3 (str): required parameter test3\n            test4 (str, optional): optional parameter test4. Defaults to \"test4\".\n        \"\"\"\n        return [\n            {\"parameter_name\": \"test_1\", \"parameter_value\": self.test_attr_1},\n            {\"parameter_name\": \"test_2\", \"parameter_value\": self.test_attr_2},\n            {\"parameter_name\": \"test3\", \"parameter_value\": test3},\n            {\"parameter_name\": \"test4\", \"parameter_value\": test4},\n            {\"parameter_name\": \"test5\", \"parameter_value\": test5},\n        ]\n\n\nclass Test1:\n    \"\"\"test1 description\n    t2_attr_1 (str): optional parameter test1\n    t2_attr_2 (int): optional parameter test2.\n    t2_attr_3 (datatime): optional parameter test2.\n    t2_attr_4 (list): optional parameter test2.\n    \"\"\"\n    t1_attr_1: str\n    t1_attr_2: int\n    t1_attr_3: datetime\n    t1_attr4: list[str] = []\n\n    def _default(self, param1: str):\n        print(param1)\n\n\nclass Test2:\n    \"\"\"test2 description\n    t2_attr_1 (str): optional parameter test1\n    t2_attr_2 (int): optional parameter test2.\n    t2_attr_3 (datatime): optional parameter test2.\n    t2_attr_4 (list): optional parameter test2.\n    \"\"\"\n    t2_attr_1: str\n    t2_attr_2: int\n    t2_attr_3: datetime\n    t2_attr_4: List[str] = []\n\n    def t2_method1(self, **test1: Test1):        \n        print(test1)\n\n    def t2_method2(self, **test1: Test1):\n        print(test1)\n\n\nclass Test5:\n    def __init__(self,attr_construct_t5:str) -> None:\n        \"\"\"\n        Args:\n            attr_construct_t5 (str): This attribute is introduced in the constructor of Test5\n        \"\"\"        \n        self.attr_construct_t5 = attr_construct_t5\n\nclass Test4:\n    def __init__(self,attr_construct_t4:str, attr_t5:Test5) -> None:\n        \"\"\"\n        Args:\n            attr_construct_t4 (str): This attribute is introduced in the constructor of Test4\n        \"\"\"        \n        self.attr_construct_t4 = attr_construct_t4\n        self.attr_t5 = attr_t5\n\n\nclass Test3:\n    \"\"\"test3 description\n    t3_attr_1 (str): optional parameter test1\n    t3_attr_2 (int): optional parameter test2.\n    t3_attr_3 (datatime): optional parameter test2.\n    t3_attr_4 (list): optional parameter test2.\n    \"\"\"\n    t3_attr_1: str\n    t3_attr_2: int\n    t3_attr_3: datetime\n    t3_attr_4: List[str] = []\n\n    def t3_method1(self, test1:Test4):\n        \"\"\"Method 1 for subcommand3. This method contains an object as parameter.\n\n        Args:\n            test1 (Test4): Parameter as a class.\n\n        \"\"\"        \n        return {\"test1\":test1.attr_t5.attr_construct_t5}\n\n    def t3_method2(self, test1:datetime):\n        \"\"\"Method 2 for subcommand3.\n\n        Args:\n            test1 (datetime): A datetime\n        \"\"\"        \n        print(test1)\n\n    def t3_method3(self, test1):\n        \"\"\"Method 3 for subcommand3\n\n        Args:\n            test1 (test1): attr1\n        \"\"\"        \n        print(test1)\n\ndef test(x: str):\n    \"\"\"\n    Args:\n        x (str): is an x parameter\n    \"\"\"    \n    print(x)\n\n```\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n### Generate CLI\nThe following code shows how to generate the CLI given the classes created above.\n\n```python\noptions = {\n    \"builtin_output_processing\": True,\n    \"builtin_format\": \"json\",\n    \"builtin_search_argument\": True,\n    \"builtin_full_help_argument\": False,\n    \"builtin_verbose_argument\": True,\n}\ngenerate_arguments_options = {\n    \"builtin_output_processing\": True,\n    \"builtin_format\": \"json\",\n    \"builtin_search_argument\": True,\n    \"builtin_full_help_argument\": True,\n    \"builtin_verbose_argument\": True,\n    \"builtin_class_attributes_generator\": True,\n    \"builtin_class_functions_generator\": False\n}\n\n# Create CLI class with the selected configuratio.\ncli = Cli(**options)\n\n# Generate CLI arguments for Test class\ncli.generate_arguments(Test())\n\n# Geberate CLI arguments for the following dictionary.\ncli.generate_arguments({\n    \"subcommand1\": (Test1()),\n    \"subcommand2\": [test, (Test2(), generate_arguments_options)],\n    \"subcommand3\": (Test3()),\n})\n\n# Obtain the arguments that are introduced in the cli as a dictionary.\nargs = cli.parse()\n\n# print(args)\n# Execute the selected command in the cli. \n# If no arguments are introduced the function \n# you select in the CLI will be executed with \n# the arguments you have introduced in the CLI.\ncli.execute_command()\n```\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n### CLI results\nThe following logs show how the CLI was generated from the classes declared above.\n\n```bash\n# python3 examples/test.py\n\nusage: examples/test.py [-h] [-ta1 test_attr_1] [-ta2 test_attr_2] {t_method,subcommand1,subcommand2,subcommand3} ...\n\npositional arguments:\n  {t_method,subcommand1,subcommand2,subcommand3}\n                        Test class\n    t_method            A method1 example\n    subcommand1         test1 description\n    subcommand2\n    subcommand3         test3 description\n\noptions:\n  -h, --help            show this help message and exit\n  -ta1 test_attr_1, --ta1 test_attr_1, --test_attr_1 test_attr_1\n                        (str): optional parameter test_attr_1\n  -ta2 test_attr_2, --ta2 test_attr_2, --test_attr_2 test_attr_2\n                        (str): optional parameter test_attr_2.\n```\n\n```bash\n# python3 examples/test.py subcommand3 -h\n\nusage: examples/test.py subcommand3 [-h] [-ta4 t3_attr_4 [t3_attr_4 ...]] [-ta1 t3_attr_1] [-ta2 t3_attr_2] [-ta3 t3_attr_3] {t3_method1,t3_method2,t3_method3} ...\n\npositional arguments:\n  {t3_method1,t3_method2,t3_method3}\n    t3_method1          Method 1 for subcommand3. This method contains an object as parameter.\n    t3_method2          Method 2 for subcommand3.\n    t3_method3          Method 3 for subcommand3\n\noptions:\n  -h, --help            show this help message and exit\n  -ta4 t3_attr_4 [t3_attr_4 ...], --ta4 t3_attr_4 [t3_attr_4 ...], --t3_attr_4 t3_attr_4 [t3_attr_4 ...]\n                        (list): optional parameter test2.\n  -ta1 t3_attr_1, --ta1 t3_attr_1, --t3_attr_1 t3_attr_1\n                        (str): optional parameter test1\n  -ta2 t3_attr_2, --ta2 t3_attr_2, --t3_attr_2 t3_attr_2\n                        (int): optional parameter test2.\n  -ta3 t3_attr_3, --ta3 t3_attr_3, --t3_attr_3 t3_attr_3\n                        (datatime): optional parameter test2.\n```\n```bash\n# python3 examples/test.py subcommand3 t3_method1 -h\n\nusage: examples/test.py subcommand3 t3_method1 [-h] [-f {json,table,raw}] [-v] [-s search] [-a attribute [attribute ...]] attr_construct_t4 attr_construct_t5\n\npositional arguments:\n  attr_construct_t4     (str): This attribute is introduced in the constructor of Test4\n  attr_construct_t5     (str): This attribute is introduced in the constructor of Test5\n\noptions:\n  -h, --help            show this help message and exit\n  -f {json,table,raw}, --f {json,table,raw}, --format {json,table,raw}\n                        Specify the format that is going to be used as output\n  -v, --v, --verbose    Set the log level to debug\n  -s search, --s search, --search search\n                        Search inside all values of a list\n  -a attribute [attribute ...], --a attribute [attribute ...], --attribute attribute [attribute ...]\n                        Only print the attributes you select\n```\n```bash\n# python3 examples/test.py subcommand3 t3_method1 t4construct t5construct\n\n{\n    \"test1\": \"t5construct\"\n}\n```\n\n```bash\n# python3 examples/test.py  t_method -h \n\nusage: examples/test.py t_method [-h] [-f {json,table,raw}] [-v] [-s search] [-a attribute [attribute ...]] [-t test4] [-tpta test5.parameter_test_attr2] test3\n\npositional arguments:\n  test3                 (str): required parameter test3\n\noptions:\n  -h, --help            show this help message and exit\n  -f {json,table,raw}, --f {json,table,raw}, --format {json,table,raw}\n                        Specify the format that is going to be used as output\n  -v, --v, --verbose    Set the log level to debug\n  -s search, --s search, --search search\n                        Search inside all values of a list\n  -a attribute [attribute ...], --a attribute [attribute ...], --attribute attribute [attribute ...]\n                        Only print the attributes you select\n  -t test4, --t test4, --test4 test4\n                        (str, optional): optional parameter test4. Defaults to \"test4\".\n  -tpta test5.parameter_test_attr2, --tpta test5.parameter_test_attr2, --test5.parameter_test_attr2 test5.parameter_test_attr2\n\n```\n\n```bash\n# python3 examples/test.py -ta1 tt1 -ta2 tt2 t_method tt3 --t tt4 -tpta tt5 -f table\n\n+--------------------------------------------------------------+\n| Parameter_name |               Parameter_value               |\n+----------------+---------------------------------------------+\n|     test_1     |                     tt1                     |\n|     test_2     |                     tt2                     |\n|     test3      |                     tt3                     |\n|     test4      |                     tt4                     |\n|     test5      | {'test5': {'parameter_test_attr2': 'tt5'... |\n+----------------+---------------------------------------------+\n```\n\n\n\n\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n## Roadmap\n\n* [x] Added options to disable/enable class attributes arguments generation.\n* [x] Support for class with non empty constructors.\n* [x] Support for list of classes in json format.\n* [ ] Support for list of classes with non empty constructors.\n* [x] Support for datetime with the following formats 2022-12-20/00:00:20 and 2022-12-20\n* [x] Support for enumeration type. It will be interpreted as argparse \"choices\".\n* [x] _default method inside a class will be treated as the method that is going to be executed in the specified subparser. \n* [ ] Generate a log file with last commands executed.\n* [x] Improve performance with argument prediction. Only generate the arguments that the program know that are introduced.\n* [ ] Improve documentation\n* [ ] Add tests\n* [ ] Add argument that supports write into a file instead of printing in the terminal.\n  \nSee the [open issues](https://github.com/AlexSua/python-cli-generator/issues) for a full list of proposed features (and known issues).\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## License\n\nDistributed under the MIT License. See `LICENSE.md` for more information.\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n## Contact\n\nProject Link: [https://github.com/AlexSua/python-cli-generator](https://github.com/AlexSua/python-cli-generator)\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n[issues-shield]: https://img.shields.io/github/issues/AlexSua/python-cli-generator?style=flat-square\n[issues-url]: https://github.com/AlexSua/python-cli-generator/issues\n\n[license-shield]: https://img.shields.io/github/license/AlexSua/python-cli-generator?style=flat-square\n[license-url]: https://github.com/AlexSua/python-cli-generator/blob/main/LICENSE.txt\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/AlexSua/python-cli-generator",
            "keywords": "python cli generator class output parsing",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "python-cli-generator",
            "package_url": "https://pypi.org/project/python-cli-generator/",
            "platform": null,
            "project_url": "https://pypi.org/project/python-cli-generator/",
            "project_urls": {
                "Homepage": "https://github.com/AlexSua/python-cli-generator"
            },
            "release_url": "https://pypi.org/project/python-cli-generator/0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A library that allows a rapid creation of a CLI by automatically reading the attributes and parameters inside a class and generating its corresponding Command Line Interface.",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15630005,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ea9e8b6bf0c25a83d58207c0d2d2d399",
                    "sha256": "48f5e24ecda7466ca9822b3496220f427cd1a9804d18cb09540e7a6b970a90d6"
                },
                "downloads": -1,
                "filename": "python-cli-generator-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ea9e8b6bf0c25a83d58207c0d2d2d399",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18161,
                "upload_time": "2022-11-02T17:09:01",
                "upload_time_iso_8601": "2022-11-02T17:09:01.032814Z",
                "url": "https://files.pythonhosted.org/packages/d5/6c/ac8a644607ffb131e689a683e50394665f659090f0693487b33b08cb5f0b/python-cli-generator-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}