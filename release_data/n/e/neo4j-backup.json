{
    "0.1.0": {
        "info": {
            "author": "Andres Hyer",
            "author_email": "andreshyer@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/andreshyer/neo4j-backup",
            "keywords": "",
            "license": "Apache Software License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neo4j-backup",
            "package_url": "https://pypi.org/project/neo4j-backup/",
            "platform": "",
            "project_url": "https://pypi.org/project/neo4j-backup/",
            "project_urls": {
                "Homepage": "https://github.com/andreshyer/neo4j-backup"
            },
            "release_url": "https://pypi.org/project/neo4j-backup/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "A simple way to backup and restore Neo4j databases without using dump files.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15690221,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8a0b764696d952c26c684c4ca574882e",
                    "sha256": "7bed44ac5f10b36f0409c9ab14889447ae53bff7300d621a6e4f2cd75e4c4728"
                },
                "downloads": -1,
                "filename": "neo4j-backup-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8a0b764696d952c26c684c4ca574882e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 14095,
                "upload_time": "2021-08-02T01:30:09",
                "upload_time_iso_8601": "2021-08-02T01:30:09.034096Z",
                "url": "https://files.pythonhosted.org/packages/2c/d8/b8092d3601547d79bf201518291d95a89eee924c5eba90f8a74631aabcb7/neo4j-backup-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "",
            "author_email": "Andres Hyer <andreshyer@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "neo4j",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neo4j-backup",
            "package_url": "https://pypi.org/project/neo4j-backup/",
            "platform": null,
            "project_url": "https://pypi.org/project/neo4j-backup/",
            "project_urls": {
                "Homepage": "https://github.com/andreshyer/neo4j-backup"
            },
            "release_url": "https://pypi.org/project/neo4j-backup/0.2.0/",
            "requires_dist": [
                "neo4j (>=4.3.0)",
                "tqdm (>=4.10.0)"
            ],
            "requires_python": ">=3.5",
            "summary": "A simple way to backup and restore Neo4j databases without using dump files.",
            "version": "0.2.0",
            "yanked": true,
            "yanked_reason": "pip install fails"
        },
        "last_serial": 15690221,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d78c490ca1ff4f0d7f88ccbcf3a5352f",
                    "sha256": "24ee10eaf8b74321222c8bb4133e3bec8e225b87cd463f6f105c06295de8c745"
                },
                "downloads": -1,
                "filename": "neo4j_backup-0.2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d78c490ca1ff4f0d7f88ccbcf3a5352f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 8814,
                "upload_time": "2022-10-26T17:30:57",
                "upload_time_iso_8601": "2022-10-26T17:30:57.497394Z",
                "url": "https://files.pythonhosted.org/packages/34/87/a97eef354338eb699d6afe4851bef73f57792722a4f6149bfc2ddce5acfc/neo4j_backup-0.2.0-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": "pip install fails"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1865f7144ed9203b17e94aba344a0ee3",
                    "sha256": "87779d2f6d5a49067ccca6d37a8c48bd612e2aed0a39840c6f00c091463f1138"
                },
                "downloads": -1,
                "filename": "neo4j-backup-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "1865f7144ed9203b17e94aba344a0ee3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 8969,
                "upload_time": "2022-10-26T17:30:59",
                "upload_time_iso_8601": "2022-10-26T17:30:59.550954Z",
                "url": "https://files.pythonhosted.org/packages/88/07/0790d8e232e93a7ef041568a3de2f98273dc703969bcd1aff5dccc08a1c0/neo4j-backup-0.2.0.tar.gz",
                "yanked": true,
                "yanked_reason": "pip install fails"
            }
        ],
        "vulnerabilities": []
    },
    "0.2.4": {
        "info": {
            "author": "",
            "author_email": "Andres Hyer <andreshyer@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3"
            ],
            "description": "# neo4j-backup\nThis is a project that is designed at downloading and uploading data in Neo4j Knowledge Graphs without Neo4j \nEnterprise edition. This is useful if Dump files cannot be used, or if you want to download the data that exist in\na Neo4j database in a human-readable format.\n\n# Overview\n\nThis repo is not intended to replace the native Neo4j backup Dump files,\nbut rather to be used in instances where a Dump file is not an option.\nSuch as moving data from Neo4j to a different type of database.\n\nAlso, this repo aims to be as simplistic as possible with two main purposes. \nTo download a Neo4j graph without using a Dump file and to be able to upload that data to a different Neo4j graph.\nOnly simple Cypher statements are used to import and extract data from Neo4j.\nThe data is downloaded as json files.\nThe json files are compressed with the gzip protocol by default,\nbut you can choose to export the data without compressing.\n\nWhen creating this tool, Enterprise tools were not used. \nMeaning that APOC or any other Enterprise/Desktop exclusive tool is not needed, \nand this can be used on the community edition of Neo4j. \n\nThis repo differs from most other Neo4j backup repos. \nFor this tool, the Neo4j graph does not need to be a specific instance. \nThis code will work with a Neo4j database that is running in Aura, docker, desktop, command-line, server, etc. \nThe only requirements are that the python neo4j-driver needs to be able to connect to the database,\nthat your user has read privileges for downloading data, and write privileges for importing data.\n\n# Packages required\n\n`python: >= 3.5`\n\n`neo4j: >= 4.3.0`\n\n`tqdm: >= 4.10.0`\n\n\n# Installation\n\n`pip install neo4j-backup`\n\n# Usage\n\nThe exact parameters that should be used to access the database depends on the version of the Neo4j graph that you\nare trying to access. The python neo4j-driver documentation can be found at \nhttps://neo4j.com/docs/api/python-driver/current/api.html.\n\nThere will be times when the script will ask the user for input for (y/N) questions, \nyou can set `input_yes=True` to enter yes to all input questions.\n\n## Extracting\n\n```python\nfrom neo4j import GraphDatabase\nfrom neo4j_backup import Extractor\n\nif __name__ == \"__main__\":\n    uri = \"neo4j://localhost:7687\"\n    username = \"neo4j\"\n    password = \"password\"\n    encrypted = False\n    trust = \"TRUST_ALL_CERTIFICATES\"\n    driver = GraphDatabase.driver(uri, auth=(username, password), encrypted=encrypted, trust=trust)\n\n    database = \"neo4j\"\n\n    project_dir = \"data_Dump\"\n    input_yes = False\n    compress = True\n    extractor = Extractor(project_dir=\"data_Dump\", driver=driver, database=database,\n                          input_yes=input_yes, compress=compress)\n    extractor.extract_data()\n```\n\n## Importing\n\n```python\nfrom neo4j import GraphDatabase\nfrom neo4j_backup import Importer\n\nif __name__ == \"__main__\":\n    uri = \"neo4j://localhost:7687\"\n    username = \"neo4j\"\n    password = \"password\"\n    encrypted = False\n    trust = \"TRUST_ALL_CERTIFICATES\"\n    driver = GraphDatabase.driver(uri, auth=(username, password), encrypted=encrypted, trust=trust)\n\n    database = \"neo4j\"\n\n    project_dir = \"data_Dump\"\n    input_yes = False\n    importer = Importer(project_dir=\"data_Dump\", driver=driver, database=database, input_yes=input_yes)\n    importer.import_data()\n```\n\n# Data Storage\n\nAll property types can be stored in JSON format, the json encoder is set to \"str\".\nThe default `str` encoder is used for extracting data into json files. \nThis allows for saving complex data types in Neo4j, such as points and temporal values\n(Date, DateTime, Time).\n\n```python\nfrom datetime import datetime\nfrom json import dumps\ndata = {\"extracted_data\": datetime.now()}  # This would be real extracted data\njson_string = dumps(data, default=str)\n```\n\nThis example shows saved data from a Node with complex data types.\n\n```json\n{\n        \"node_id\": 71,\n        \"node_labels\": [\n            \"Person\"\n        ],\n        \"node_props\": {\n            \"bool_example\": false,\n            \"born\": 1956,\n            \"int_example\": 1,\n            \"datatime_example\": \"2015-06-24T12:50:35.556000000+01:00\",\n            \"point_3d_example\": [\n                3.0,\n                0.0,\n                3.4\n            ],\n            \"localdatetime_example\": \"2015-07-04T19:32:24.000000000\",\n            \"duration\": {\n                \"months\": 0,\n                \"days\": 0,\n                \"seconds\": 0,\n                \"nanoseconds\": 1\n            },\n            \"date_example\": \"1999-01-01\",\n            \"point_2d_example\": [\n                3.0,\n                0.0\n            ],\n            \"point_geo_3d_example\": [\n                56.0,\n                11.0,\n                1000.0\n            ],\n            \"name\": \"Tom Hanks\",\n            \"localtime_example\": \"12:50:35.556000000\",\n            \"point_geo_2d_example\": [\n                56.0,\n                12.0\n            ],\n            \"array_example\": [\n                true\n            ],\n            \"float_example\": 0.334,\n            \"time_example\": \"21:40:32.142000000+01:00\"\n        },\n        \"node_props_types\": {\n            \"bool_example\": \"bool\",\n            \"born\": \"int\",\n            \"int_example\": \"int\",\n            \"datatime_example\": \"datetime\",\n            \"point_3d_example\": \"3d-cartesian-point\",\n            \"localdatetime_example\": \"datetime\",\n            \"duration\": \"duration\",\n            \"date_example\": \"date\",\n            \"point_2d_example\": \"2d-cartesian-point\",\n            \"point_geo_3d_example\": \"3d-WGS-84-point\",\n            \"name\": \"str\",\n            \"localtime_example\": \"time\",\n            \"point_geo_2d_example\": \"2d-WGS-84-point\",\n            \"array_example\": [\n                \"bool\"\n            ],\n            \"float_example\": \"float\",\n            \"time_example\": \"time\"\n        }\n    }\n```\n\nThe properties saved for relationships are very similar.\nAn example relationship is stored as:\n\n```json\n{\n        \"start_node_id\": 71,\n        \"start_node_labels\": [\n            \"Person\"\n        ],\n        \"end_node_id\": 85,\n        \"end_node_labels\": [\n            \"Movie\"\n        ],\n        \"rel_type\": \"DIRECTED\",\n        \"rel_props\": {\n            \"bool_example\": false,\n            \"int_example\": 1,\n            \"datatime_example\": \"2015-06-24T12:50:35.556000000+01:00\",\n            \"point_3d_example\": [\n                3.0,\n                0.0,\n                3.4\n            ],\n            \"localdatetime_example\": \"2015-07-04T19:32:24.000000000\",\n            \"duration\": {\n                \"months\": 0,\n                \"days\": 0,\n                \"seconds\": 0,\n                \"nanoseconds\": 1\n            },\n            \"date_example\": \"1999-01-01\",\n            \"point_2d_example\": [\n                3.0,\n                0.0\n            ],\n            \"point_geo_3d_example\": [\n                56.0,\n                11.0,\n                1000.0\n            ],\n            \"localtime_example\": \"12:50:35.556000000+00:00\",\n            \"point_geo_2d_example\": [\n                56.0,\n                12.0\n            ],\n            \"float_example\": 0.334,\n            \"time_example\": \"21:40:32.142000000+01:00\"\n        },\n        \"rel_props_types\": {\n            \"bool_example\": \"bool\",\n            \"int_example\": \"int\",\n            \"datatime_example\": \"datetime\",\n            \"point_3d_example\": \"3d-cartesian-point\",\n            \"localdatetime_example\": \"datetime\",\n            \"duration\": \"duration\",\n            \"date_example\": \"date\",\n            \"point_2d_example\": \"2d-cartesian-point\",\n            \"point_geo_3d_example\": \"3d-WGS-84-point\",\n            \"localtime_example\": \"time\",\n            \"point_geo_2d_example\": \"2d-WGS-84-point\",\n            \"float_example\": \"float\",\n            \"time_example\": \"time\"\n        }\n    }\n```\n\nThe full list of supported property types to be extracted are:\nInteger, Float, String, Boolean, Point, Date, Time, LocalTime, DateTime, LocalDateTime, and Duration.\nAs well as arrays, but arrays are treated as second class properties and have many restrictions in Neo4j.\n\nThe type are saved as:\nint, float, str, bool, date, time, datetime, duration, \n2d-cartesian-point, 3d-cartesian-point, 2d-WGS-84-point, and 3d-WGS-84-point.\n\nWhile Temporal values can be saved, the python-neo4j driver makes no distinction between\n- Time and LocalTime\n- DateTime and LocalDateTime\n\nThe only difference with the prefix local being that when creating the property,\nNeo4j will first convert local times to global times.\n\nThe following point SRID types are supported and saved as:\n- 7203 : 2d-cartesian-point\n- 9157 : 3d-cartesian-point\n- 4326 : 2d-WGS-84-point\n- 4979 : 3d-WGS-84-point\n\nAll the data is extracted to the tree structure:\n- data\n  - nodes_<index>.json.gz -> list of nodes\n  - nodes_<index>.json.gz\n  - nodes_<index>.json.gz\n  - ...\n  - relationships_<index>.json.gz -> list of relationships\n  - relationships_<index>.json.gz\n  - relationships_<index>.json.gz\n  - ...\n- compressed.json -> bool weather or not data is compresses\n- constraints.json -> List of constraints\n- constraints_names.json -> Names of constraints in Neo4j db\n- db_id.json -> ID of db\n- node_labels.json -> List of all Node labels\n- property_keys.json -> List of all property keys\n- rel_types.json -> List of all Relationship types\n- unique_prop_key.json -> Some unique property that does not exist in db\n\n# Notes About Importing Data into Neo4j\n\nThis may not be the best tool to back up data if speed is a concern.\nThis tool is significantly slower than the built-in Dump tool Neo4j provides.\nThe selling point of this script is also its biggest downfall, all calls to Neo4j are done with Cypher.\nThis adds a significant amount of overhead that can be avoided if the direct files of a graph can be accessed.\nAlso, while the raw data is machine-readable, \nit still needs to be manipulated by the end user to insert it into other databases.\n\nAnother note, an internal ID property is made when creating Nodes and properties. \nSince this script does not read the underlying file in the Neo4j database, \nsome unique identifier is needed to MATCH nodes on.\nForcing the user to pass a map of unique keys for each Node is not reasonable.\nThis temporary internal ID property is removed from each Node at the very end.\nThe Neo4j database still stores that this property existed at some point on a Node,\nso the property will show up on the left side of the Neo4j Desktop and when running \"CALL db.propertyKeys()\".\nThe temporary property key can not be removed from the list of internal property keys, and the issue is reported at\nhttps://github.com/neo4j/neo4j/issues/10941.\n\nIf you need to extract data from a database with this tool, \nand are importing to a database where you have access to the neo4j-admin console.\nOne option is to use the Importer from neo4j_import to import the initial data into a database,\nthen dump that database and restore it to a new database. \nOr, you can use a tool like store-utils https://github.com/jexp/store-utils.\n\nThis really is not so much an issue, more so as an inconvenience.\nIf you are using the Neo4j Desktop,\nit is highly recommended to just use the built-in Dump tool.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "neo4j",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "neo4j-backup",
            "package_url": "https://pypi.org/project/neo4j-backup/",
            "platform": null,
            "project_url": "https://pypi.org/project/neo4j-backup/",
            "project_urls": {
                "Homepage": "https://github.com/andreshyer/neo4j-backup"
            },
            "release_url": "https://pypi.org/project/neo4j-backup/0.2.4/",
            "requires_dist": [
                "neo4j (>=4.3.0)",
                "tqdm (>=4.10.0)"
            ],
            "requires_python": ">=3.5",
            "summary": "A simple way to backup and restore Neo4j databases without using dump files.",
            "version": "0.2.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15690221,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cbdd0ab85dee4bb12c047f9b2266f05c",
                    "sha256": "b5c6907d8c6e028b1fc62ed69e47bd089f5afd561c43fac588eb1052fbbc1ba2"
                },
                "downloads": -1,
                "filename": "neo4j_backup-0.2.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cbdd0ab85dee4bb12c047f9b2266f05c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 15697,
                "upload_time": "2022-11-07T20:22:09",
                "upload_time_iso_8601": "2022-11-07T20:22:09.224450Z",
                "url": "https://files.pythonhosted.org/packages/d7/ea/a51e5eef0c55b4e9b31aafab9d24b2368dcecda5361c4e709bdbb9b6ac8a/neo4j_backup-0.2.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9aea29f2afa3758a46788582bc5b5c8c",
                    "sha256": "07a326fac7861f34c71fb085044db98ca482b72e6788a21ea5581c935efd655e"
                },
                "downloads": -1,
                "filename": "neo4j_backup-0.2.4.tar.gz",
                "has_sig": false,
                "md5_digest": "9aea29f2afa3758a46788582bc5b5c8c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 17559,
                "upload_time": "2022-11-07T20:22:12",
                "upload_time_iso_8601": "2022-11-07T20:22:12.137185Z",
                "url": "https://files.pythonhosted.org/packages/3f/ec/3f1a095d4abca45d79e72d9c7430ef485378f37ac0525ac3d28bc19eaed7/neo4j_backup-0.2.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}