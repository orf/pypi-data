{
    "1.0.1": {
        "info": {
            "author": "Andr\u00e9 Kischkel",
            "author_email": "andre@exdatis.ai",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Scientific/Engineering"
            ],
            "description": "![build](https://github.com/exdatic/flowfish/actions/workflows/python-package.yml/badge.svg)\n\n# flowfish\n\nYet another pythonic workflow engine.\n\n## \ud83d\udc0d Installation\n\n- **Operating system**: macOS / OS X \u00b7 Linux \u00b7 Windows\n- **Python version**: Python 3.7+\n- **Package managers**: [pip]\n\n```bash\npip install flowfish\n```\n\n## \u2728 Getting started\n\nThis getting started tutorial demonstrates how things work. It is not a real world example, we just want to sum up some numbers.\n\nFirst we define a function `add()` with two arguments `a` and `b`, that are later added together. Then we assign it to a node named `sum` using a JSON config. And finally we set the default values for `a` and `b` to 3 and 4. Remember, it is just an example.\n\n```python\nfrom flowfish import flow\n\ndef add(a, b):\n    return a + b\n\nf = flow({\n    \"math\": {\n        \"sum@add\": {\n            \"a\": 3,\n            \"b\": 4\n        }\n    }\n})\n```\n\nNow we call the ``sum()`` function and the default values for `a` and `b` are applied implicitly.\n\n```python\nf.math.sum()\n```\n\n\ud83d\udc49 7\n\nNow we call `sum()` with `a` and `b` set explicitly.\n\n```python\nf.math.sum(5, 6)\n```\n\n\ud83d\udc49 11\n\nNow we replace our custom `add()` function with Python's built-in `sum()` function, which has a slightly different signature: `sum(iterable, start=0)`.\n\n```python\nfrom flowfish import flow\n\nf = flow({\n    \"math\": {\n        \"sum\": {\n            \"iterable\": [3, 4]\n        }\n    }\n})\n```\n\n```python\nf.math.sum()\n```\n\n\ud83d\udc49 7\n\nNow we connect some nodes together and build our first flow. As already mentioned, a node is actually a Python function. So when we connect nodes together, we connect functions together. If we want to connect a node with a value, we can just assign the value to a node parameter or we can use the built-in flow function `map()` that takes the value as  `input` and simply returns it.\n\n```python\nfrom flowfish import flow\n\nf = flow({\n    \"math\": {\n        \"number_one@map\": {\n            \"input\": 3\n            \n        },\n        \"number_two@map\": {\n            \"input\": 4\n        },\n        \"sum\": {\n            \"iterable\": [\"@number_one\", \"@number_two\"]\n        }\n    }\n})\n```\n\n```python\nf.math.sum()\n```\n\n\ud83d\udc49 7\n\nNow we visualize the flow graph.\n\n```python\n-f.math.sum\n```\n\n![svg](https://raw.githubusercontent.com/exdatic/flowfish/main/images/output_14_0.svg)\n\n## \ud83d\udcda Usage\n\n### Scopes and Nodes\n\nThe flow is configured in JSON format and consists of _scopes_ and _nodes_. A scope is a group of nodes and a node is just an alias for a pure Python function.\n\nA basic flow configuration looks like this:\n\n```js\n{\n    \"scope\": {\n        \"node\": {\n        }\n    }\n}\n```\n\n* scope and node names may only contain ASCII letters, digits or underscores\n* config keys starting with `#` are considered comments and therefore ignored, this is usefull for temporarily disabling nodes or scopes\n\n### Scope and node inheritance\n\nScopes and nodes can inherit their properties from other scopes and nodes by useing the `@` notation.\n\n```js\n{\n    \"example\": {\n        \"foo\": {\n        },\n        \"bar@foo\": {\n        }\n    }\n}\n```\n\nA scope can inherit from:\n\n- another scope from the current flow\n- another scope from an external config file, e.g. \"../foo.json#foo\"\n\nA node can inherit from:\n\n- another node from the current scope\n- a function from some Python module, e.g. \"sklearn.model_selection.train_test_split\"\n- a function from the `__main__` module\n- a built-in Python function, e.g. \"open\"\n- a class (here the constructor is considered as function), e.g. \"foo.bar.FooBar\"\n\n### Property assignment\n\nNodes can get their property values from the return values of other nodes.\n\n### Function results\n\nA leading `@` assigns the return value of a node function to a node property.\n\n```js\n{\n    \"example\": {\n        \"foo\": {\n        },\n        \"bar\": {\n            \"foo\": \"@foo\"\n        }\n    }\n}\n```\n\n### Paths\n\nA `/` after the node name assigns the node path. Additionally another path can be appended.\n\n```js\n{\n    \"example\": {\n        \"foo\": {\n        },\n        \"bar\": {\n            \"path\": \"@foo/test.text\"\n        }\n    }\n}\n```\n\n### References\n\nA leading `&` assigns a reference to the node function itself as opposed to the result value.\n\n```js\n{\n    \"example\": {\n        \"foo\": {\n        },\n        \"bar\": {\n            \"path\": \"&foo\"\n        }\n    }\n}\n```\n\n### Quoting\n\nString literals starting with the reserved character `@` or `&` must be quoted by appending the same character again (e.g. `@@` or `&&`).\n\n### Result caching\n\nNode results are cached by default. Nodes with the `_dump` property set are pickled to a `.dump` file and must not be reprocessed again when called later.\n\n### Progress bars\n\nNodes with the `_tqdm` property set are wrapped with a tqdm progress bar if their functions are valid python generators.\n\n### Property overriding\n\n```js\n{\n    \"example\": {\n        \"_props\": {\n            \"tokenizer.language\": \"klingon\",\n            \"analyzer.language\": \"klingon\"\n        },\n        ,\n        \"tokenizer\": {\n        },\n        \"analyzer\": {\n        }\n    }\n}\n```\n\n## Flow command line tool\n\n```bash\n% flow\nusage: flow [-h] {run,agent,push,pull,prune} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\ncommand:\n  {run,agent,push,pull,prune}\n    run                 run flow\n    agent               start agent\n    push                push data to sync_dir\n    pull                pull data from sync_dir\n    prune               prune files in data_dir\n```\n\n## License\n\nSee [LICENSE](LICENSE).\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/exdatic/flowfish",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flowfish",
            "package_url": "https://pypi.org/project/flowfish/",
            "platform": null,
            "project_url": "https://pypi.org/project/flowfish/",
            "project_urls": {
                "Homepage": "https://github.com/exdatic/flowfish"
            },
            "release_url": "https://pypi.org/project/flowfish/1.0.1/",
            "requires_dist": [
                "cloudpickle",
                "filelock (>2.0)",
                "graphviz (>=0.6)",
                "loguru",
                "murmurhash",
                "simpleeval (>=0.9.2)",
                "tqdm",
                "uvloop ; extra == 'all'",
                "flake8 ; extra == 'test'",
                "pydantic ; extra == 'test'",
                "pytest ; extra == 'test'",
                "pytest-asyncio ; extra == 'test'",
                "uvloop ; extra == 'test'"
            ],
            "requires_python": ">=3.7",
            "summary": "Yet another pythonic workflow engine",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15555268,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "17edaf189c13e0662ad69d12685856d4",
                    "sha256": "663b9c14199efaf8501e3bb9279445717a140345e846e010acd91ab16b96e4a6"
                },
                "downloads": -1,
                "filename": "flowfish-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "17edaf189c13e0662ad69d12685856d4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 39034,
                "upload_time": "2022-10-27T16:24:32",
                "upload_time_iso_8601": "2022-10-27T16:24:32.773154Z",
                "url": "https://files.pythonhosted.org/packages/49/07/3dfd381c51c5155f4dba4b764cff34db2179f187250a7ef76233d7e59fe3/flowfish-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}