{
    "0.4.3": {
        "info": {
            "author": "Maco",
            "author_email": "macohong@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Software Development",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/marcohong/xform",
            "keywords": "Form validation,Data Binding,Tornado web,aiohttp web,Sanic web",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "xargs",
            "package_url": "https://pypi.org/project/xargs/",
            "platform": "",
            "project_url": "https://pypi.org/project/xargs/",
            "project_urls": {
                "Homepage": "https://github.com/marcohong/xform"
            },
            "release_url": "https://pypi.org/project/xargs/0.4.3/",
            "requires_dist": [
                "multidict",
                "attrs"
            ],
            "requires_python": ">=3.6",
            "summary": "Binding form data validation framework.",
            "version": "0.4.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14915541,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7b7fe5d7b05e725a15cd68e302f4b82b",
                    "sha256": "2c0345eb72c4db5a02ffe353797c5df6f26a99e784c4878e3aa46dd4e5ddbb79"
                },
                "downloads": -1,
                "filename": "xargs-0.4.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7b7fe5d7b05e725a15cd68e302f4b82b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 24861,
                "upload_time": "2021-05-24T18:44:35",
                "upload_time_iso_8601": "2021-05-24T18:44:35.678974Z",
                "url": "https://files.pythonhosted.org/packages/8a/22/60232e7a997db2bfae6e8993390670405d28739a9eda34ccc559afdc8258/xargs-0.4.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1b7afdbde971f4fbb4681efc9fa4d9b1",
                    "sha256": "f201760c262049db27047005673420ef3ed0f99b2e90215d3102d0d85a1abdf2"
                },
                "downloads": -1,
                "filename": "xargs-0.4.3.tar.gz",
                "has_sig": false,
                "md5_digest": "1b7afdbde971f4fbb4681efc9fa4d9b1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 17568,
                "upload_time": "2021-05-24T18:44:38",
                "upload_time_iso_8601": "2021-05-24T18:44:38.047233Z",
                "url": "https://files.pythonhosted.org/packages/19/1c/235df82143b0b89b56a03fd0c106ff420d2c2743185a939eec2dff7b9881/xargs-0.4.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.5.0": {
        "info": {
            "author": "Maco",
            "author_email": "macohong@hotmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Framework :: AsyncIO",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Software Development",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "#### xform\n\u8868\u5355\u6570\u636e\u7ed1\u5b9a\u9a8c\u8bc1\u6846\u67b6\uff0c\u652f\u6301Tornado(\u9ed8\u8ba4)\u3001aiohttp\u3001sanic\u3001flask\uff0c\u53ef\u81ea\u884c\u6269\u5c55\u652f\u6301\u5176\u5b83\u7684python web\u6846\u67b6\n\n------\n\n#### \u7248\u672c\u8981\u6c42\n\n------\n\n\u76ee\u524d\u5df2\u652f\u6301\u7684web\u6846\u67b6\n\n| Web\u6846\u67b6          | Python\u7248\u672c    | \u5907\u6ce8                           |\n| ---------------- | ------------- | ------------------------------ |\n| Tornado >= 6.0.0 | python >= 3.6 |                                |\n| Aiohttp >= 3.6.0 | python >= 3.7 | aiohttp\u5bf9python\u6700\u4f4e\u652f\u6301\u7248\u672c3.7 |\n| Sanic >= 19.3    | python >= 3.6 |                                |\n| Flask>=2.0.1     | python >= 3.6 |                                |\n\n#### \u83b7\u53d6\u5b89\u88c5\n\n```bash\n# \u5df2\u53d1\u5e03\u5728pypi\u7684\u5730\u5740\npip3 install xargs\npip3 install https://github.com/marcohong/xform/archive/v0.5.0.tar.gz\n# \u6216\u8005\u4f7f\u7528\u6700\u65b0\u7248\u672c\npip3 install git+https://github.com/marcohong/xform.git\n```\n\n#### \u4f7f\u7528\u793a\u4f8b\n\n------\n\nFlask\u793a\u4f8b\uff0c\u53ea\u652f\u63012.0\u4ee5\u4e0a\n\n```python\nfrom flask import request\nfrom flask import Flask\nfrom xform.httputil import HttpRequest\nfrom xform.adapters.flask import FlaskRequest #\u5f15\u5165Flask\u7684\u9002\u914d\u5668\nfrom xform.form import SubmitForm\nfrom xform import fields\nHttpRequest.configure(request_proxy=FlaskRequest) # \u5168\u5c40\u8bbe\u7f6eRequest\u7684\u4ee3\u7406\u4e3aFlaskRequest\n\napp = Flask(__name__)\n\n# \u8868\u5355\u58f0\u660e(\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627fForm\u5b9e\u73b0)\nform = SubmitForm(\n    id=fields.Integer(required=True, _min=1),\n    name=fields.Str(required=True, length=(3, 20))\n)\n\n@app.route('/', methods=['GET', 'POST'])\nasync def index():\n    # \u6ce8\u610f\u8868\u5355\u4e4b\u524d\u83b7\u53d6\u8fc7body\u6570\u636e\u53ef\u80fd\u4f1a\u5f71\u54cdget_data\u53d6\u4e0d\u5230\u6570\u636e(\u56e0\u4e3a\u7f13\u51b2\u533a\u6570\u636e\u5df2\u88abflask\u5220\u9664)\n    # locations:\u83b7\u53d6\u6570\u636e\u65b9\u5f0f\u4ec5\u9650\u4e8e\u6307\u5b9a\u7684\u4f5c\u7528\u57df\uff0clocations\u53ef\u4ee5\u662fstr\u6216\u8005tuple\n    # \u4f5c\u7528\u57df: form/json/query/headers/cookies\uff0c\u7ec4\u5408\u4f7f\u7528\u4f8b\u5982locations=('form','json')\n    # data, error = await self.form.bind(self, locations='json')\n    data, error = await form.bind(request)\n    if error:\n        return {'error': error}\n    return {'data': data}\n\nif __name__ == '__main__':\n    app.run(port=8888)\n\n# curl -X POST http://127.0.0.1:8888/ -d '{\"id\": 12, \"name\": \"hello1\"}' -H \"Content-type: application/json\"\n# curl -X POST http://127.0.0.1:8888/ -d 'id=2&name=hello2'\n# curl http://127.0.0.1:8888/\\?id\\=12\\&name\\=hello3\n```\n\nTornado\u793a\u4f8b\uff0c\u66f4\u591ademo\u8bf7\u67e5\u770bexamples\u6587\u4ef6\u5939\n\n```python\nfrom xform import fields\nfrom xform import schema\nfrom xform.form import SubmitForm\n\n# \u4f7f\u7528Schema\u53ef\u7ed3\u5408fields.Nested\u5d4c\u5957\u5bf9\u8c61\uff0c\u652f\u6301\u591a\u5c42\u5d4c\u5957\u5bf9\u8c61\nclass UserSchema(schema.Schema):\n    uid = fields.Integer(required=True)\n    name = fields.Username(required=True, length=(4, 20))\n    # group = fields.Nested(GroupSchema)\n\nform = SubmitForm(\n        id=fields.Integer(required=True, _min=1),\n        name=fields.Str(required=True),\n        # when_field \u5f53\u8868\u5355\u67d0\u4e00\u4e2a\u5b57\u6bb5\u7684\u503c\u5728when_value\u4e2d\u5b9a\u4e49 \u5219\u5f3a\u5236\u53d8\u4e3a\u5fc5\u586b(required=True)\n        password = fields.Password(required=False, when_field='id', when_value=lambda x: x and int(x) > 10)\n        # \u5982\u679c\u8868\u5355\u63d0\u4ea4\u7c7b\u578b\u7684\u662fjson\u6309\u7167\u5b57\u5178\u65b9\u5f0f\u4f20\u503c\u5373\u53ef\uff0c\u5426\u5219\u4f7f\u7528user.uid=xxx\u65b9\u5f0f\u4f20\u503c\n        user=fields.Nested(UserSchema, required=False)\n)\n\nasync def index():\n    data, error = await form.bind(self)\n  \n# curl http://localhost:8888 -X POST -d \"id=1&name=test&user.name=user&user.uid=2\"\n```\n\n\u81ea\u5b9a\u4e49\u7684\u63d0\u793a(3\u79cd\u65b9\u5f0f)\n\n```python\n'''\n1.\u66ff\u6362\u63d0\u793a\u5185\u5bb9\n'''\nfrom xform.messages import ErrMsg\n# ErrMsg.set_messages\u5728\u5bfc\u5165fields/validator\u4e4b\u524d\u6267\u884c\nErrMsg.set_messages({'invalid_start_date': 'time invalid'})\nfrom xform import fields\n\n'''\n2.\u4f7f\u7528\u56fd\u9645\u5316\u6587\u4ef6message.po\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u4f7f\u7528tornado\u7684locale.translate('xxx')\n\u8bf7\u628amessages.py\u5b9a\u4e49\u7684value\u7ffb\u8bd1\u5373\u53ef\uff0c\u4f8b\u5982:\nmsgid \"Length must be between %s and %s\" (\u6ce8\u610f%s\u4e0d\u80fd\u5c11)\nmsgstr \"\u957f\u5ea6\u5fc5\u987b\u5728%s\u5230%s\u4e4b\u95f4\"\n'''\nfrom xform import fields\n# coding...\n\n'''\n3.\u66ff\u6362\u63d0\u793a\u5185\u5bb9\uff0c\u540e\u518d\u4f7f\u7528\u56fd\u9645\u5316\uff0c\u8bf7\u6839\u636e\u7b2c1\u6b65\u5728\u5bfc\u5165fields/validator\u4e4b\u524d\u8bbe\u7f6e\uff0c\n\u56fd\u9645\u5316\u6587\u4ef6message.po\u5b9a\u4e49\u76f8\u5bf9\u5e94\u66ff\u6362\u540e\u7684\u5185\u5bb9\u5373\u53ef\n'''\n\n\n```\n\ndemo\n\n```bash\ncd examples/\n# test tornado\npython3 test_tornado.py\n# test aiohttp web\npython3 test_aiohttp.py\n# test sanic web\npython3 test_sanic.py\n...\n\n```\n\n#### \u6269\u5c55\u7ec4\u4ef6\n\n------\n\n##### \u81ea\u5b9a\u4e49fields\u7c7b\u578b\n\n```python\nimport re\nfrom typing import Optional, Any\nfrom xform.fields import Integer, Str, VALUE_TYPES\nfrom xform.form import SubmitForm\n'''\n\u5b9e\u73b0_validate\u65b9\u6cd5\u5373\u53ef\uff0c\u5982\u679c\u8fd4\u56de\u503c\u9700\u8981\u8f6c\u6362\u5219\u91cd\u5199get_value\u65b9\u6cd5\n'''\nclass UserField(Integer):\n    # \u4e0d\u9700\u8981\u8f6c\u6362\uff0c\u56e0\u4e3a\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u7f13\u5b58\u5bf9\u8c61\n    cvt_type = None\n\n    def add_err_msg(self) -> None:\n        self.err_msg.update({'not_exist': 'User does not exist'})\n\n    async def _validate(self,\n                        value: VALUE_TYPES,\n                        attr: str,\n                        data: dict) -> Optional[dict]:\n        # \u5047\u8bbeUserCache.get\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7f13\u5b58\u5bf9\u8c61\n        data = await UserCache.get(value)\n        # \u9519\u8bef\u65f6\u8c03\u7528self.set_error('xxx')\u8bbe\u7f6e\u9519\u8bef\u63d0\u793a\u8bed\uff0c\u4e0d\u9700\u8981\u8fd4\u56de\u5185\u5bb9\uff0c\u6210\u529f\u65f6\u8fd4\u56de\u5185\u5bb9\n        if not data:\n            self.set_error('not_exist')\n        else:\n            # \u8fd4\u56de\u7684\u662f\u7f13\u5b58\u5bf9\u8c61\n            return data\n\nclass OrderNOField(Str):\n    regex = r'^[a-zA-Z0-9_]+$'\n\n    def add_err_msg(self) -> None:\n        self.err_msg.update({'invalid': 'Invalid order'})\n\n    def __init__(self,\n                 *,\n                 length: tuple = 20,\n                 **kwargs: Any):\n        kwargs['length'] = length\n        super().__init__(**kwargs)\n\n    async def _validate(self,\n                        value: VALUE_TYPES,\n                        attr: str,\n                        data: dict) -> Optional[str]:\n        ret = re.match(self.regex, value)\n        if not ret:\n            self.set_error('invalid')\n            return\n        return value\n\n# user_id\u662f\u8868\u5355\u63d0\u4ea4\u7684\u5b57\u6bb5(data_key\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u4f7f\u7528user\u4f5c\u4e3a\u8868\u5355\u5b57\u6bb5)\nform = SubmitForm(\n    user=UserField(data_key='user_id', required=True),\n    order_no=OrderNOField(required=True)\n)\n```\n\n##### \u81ea\u5b9a\u4e49\u7684validator\u9a8c\u8bc1\n\n```python\nfrom xform.fields import Str\nfrom xform.validate import Validator, ValidationError\n#\u53c2\u8003OneOf\nclass OneOf(Validator):\n    default_message = ErrMsg.get_message('invalid_option')\n\n    def __init__(self, choices: Union[list, tuple], error: str = None):\n        self.choices = choices\n        self.error = error or self.default_message\n\n    def __call__(self, value: Union[str, int]):\n        '''\n        call\u65b9\u6cd5\u5b9e\u73b0\u903b\u8f91\n        '''\n        if value is None or value not in self.choices:\n            # \u9a8c\u8bc1\u9519\u8bef\u65f6\u8bf7\u629b\u51faValidationError\u9519\u8bef\n            raise ValidationError(self.error)\n        return value\n\n# \u4f7f\u7528validate\nform = SubmitForm(\n    tag=Str(required=True, validate=OneOf(('bule', 'red', 'green')))\n)\n```\n\n##### \u5176\u5b83web\u6846\u67b6\u652f\u6301\n\n```python\n'''\nTornado\u4e3a\u4f8b\n'''\nfrom xform.httputil import BaseRequest\nclass TornadoRequest(BaseRequest):\n    def __init__(self, request):\n        super().__init__(request)\n\n    def get_argument(self,\n                     name: str,\n                     default: Any = None) -> Optional[str]:\n        return self.request.get_argument(name, default=default)\n\n    def get_from_header(self,\n                        name: str,\n                        default: Any = None) -> Optional[dict]:\n        return self.request.request.headers.get(name, default)\n\n    def translate(self, message: str) -> str:\n        return self.request.locale.translate(message)\n    # ...\u5b9e\u73b0BaseRequest\u91cc\u9762\u7684\u65b9\u6cd5\uff0c\n    # \u8be6\u7ec6\u5b9e\u73b0\u8bf7\u53c2\u8003xform.adapters.tornado.TornadoRequest\n\n# \u542f\u52a8web\u670d\u52a1\u524d\u8bbe\u7f6e\u4e00\u4e0bxform\u7684request\u4ee3\u7406(\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4Tornado)\uff0c\u4ee5aiohttp\u4e3a\u4f8b\nfrom xform.httputil import HttpRequest\nfrom xform.adapters.aiohttp import AioHttpRequest\nHttpRequest.configure(request_proxy=AioHttpRequest)\n# Coding...\n```\n\n#### License\n\n------\n\n`xfrom` is offered under the MIT license.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/marcohong/xform",
            "keywords": "Form validation,Data Binding,Tornado web,aiohttp web,Sanic web",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "xargs",
            "package_url": "https://pypi.org/project/xargs/",
            "platform": null,
            "project_url": "https://pypi.org/project/xargs/",
            "project_urls": {
                "Homepage": "https://github.com/marcohong/xform"
            },
            "release_url": "https://pypi.org/project/xargs/0.5.0/",
            "requires_dist": [
                "multidict",
                "attrs"
            ],
            "requires_python": ">=3.6",
            "summary": "Binding form data validation framework.",
            "version": "0.5.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14915541,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "faddcbf38349535b96bbe95b885a3f95",
                    "sha256": "df6b577d63ef240cd0194db04d7835f5249d1c5c9db0aef89fcc0328b5360c45"
                },
                "downloads": -1,
                "filename": "xargs-0.5.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "faddcbf38349535b96bbe95b885a3f95",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 21558,
                "upload_time": "2022-08-28T16:01:12",
                "upload_time_iso_8601": "2022-08-28T16:01:12.037891Z",
                "url": "https://files.pythonhosted.org/packages/89/c5/3e7770c54842b1788a231a59ada77eeb86c3c90d5cdefdfd4057fb78a9ee/xargs-0.5.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1e0f6d808b2d2942d7257c7c16359da9",
                    "sha256": "8b2c185b4ff751304b3a07ff1e5af036e1defcd2a9b33387c1987fab783fbf31"
                },
                "downloads": -1,
                "filename": "xargs-0.5.0.tar.gz",
                "has_sig": false,
                "md5_digest": "1e0f6d808b2d2942d7257c7c16359da9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18065,
                "upload_time": "2022-08-28T16:01:14",
                "upload_time_iso_8601": "2022-08-28T16:01:14.032368Z",
                "url": "https://files.pythonhosted.org/packages/5f/42/d019eacd8c7051be4d2d049a5731531dccddc8e3fa265ed96de3c3a5770f/xargs-0.5.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}