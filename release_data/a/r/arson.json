{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "tef <tef@printf.net>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# ARSON: A Restructured Object Notation\n\nARSON is JSON, with a little bit of sugar: Comments, Commas, and Tags.\n\nFor example:\n\n```\n{\n    \"numbers\": +0123.0,       # Can have leading zeros\n    \"octal\": 0o10,            # Oh, and comments too\n    \"hex\": 0xFF,              #\n    \"binary\": 0b1000_0001,     # Number literals can have _'s \n\n    \"lists\": [1,2,3],         # Lists can have trailing commas\n\n    \"strings\": \"At least \\x61 \\u0061 and \\U00000061 work now\",\n    \"or\": 'a string',          # both \"\" and '' work.\n\n    \"records\": {\n        \"a\": 1,               # Must have unique keys\n        \"b\": 2,               # and the order must be kept\n    },\n}\n```\n\nAlong with some sugar atop JSON, ARSON supports tagging literals to represent types outside of JSON:\n\n- `@datetime \"2017-11-22T23:32:07.100497Z\"`, a tagged RFC 3339 datestamp\n- `@duration 60` (a duration in seconds, float or int)\n- `@base64 \"...==\"`, a base64 encoded bytestring\n- `@set`, `@dict`, `@complex`, `@bytestring`\n\n# Quickstart\n\n```\nimport arson\n\nprint(arson.parse(arson.dump([1,2,3])))\n```\n\n## JSON in a nutshell:\n\n - A unicode text file (in utf-8), without a Byte Order Mark\n - Whitespace is `\\t`, `\\r`, `\\n`, `\\x20`\n - JSON document is either list, or object\n - Lists are `[]`, `[obj]`, `[ obj, obj ]`, ...\n - Objects: `{ \"key\": value}`, only string keys, order not preserved, duplicate handling undefined.\n - Built-ins: `true`, `false`, `null`\n - `\"ucs-2 unicode strings\"` with escapes `\\\" \\\\ \\/ \\b \\f \\n \\r \\t \\uFFFF`, and no control codes unecaped.\n - floating point numbers (unary minus, no leading zeros, except for `0.xxx`)\n - No Comments\n - No Trailing commas in collections\n - Astral plane characters may need to be escaped using surrogate pairs\n - Integers may need to be represented as strings if longer than 53 bits\n\n## ARSON in a Nutshell\n\n - File MUST be utf-8, not cesu-8/utf-16/utf-32, without surrogate pairs.\n - Use `#.... <end of line>` for comments\n - Byte Order Mark is treated as whitespace (along with `\\x09`, `\\x0a`, `\\x0d`, `\\x20`)\n - ARSON Document is any ARSON Object, (i.e `1` is a valid ARSON file).\n - Lists are `[]`, `[obj]`, `[obj,]`, `[obj, obj]` ... (trailing comma optional)\n - Records are `{ \"key\": value}`, keys must be unique, order must be preserved. \n - Built-ins: `true`, `false`, `null`\n - `\"unicode strings\"` with escapes `\\\" \\\\ \\/ \\b \\f \\n \\r \\t \\uFFFF \\UFFFFFFFF`, no control codes unecaped, and `''` can be used instead of `\"\"`.\n - int/float numbers (unary plus or minus, allowleading zeros, hex, octal, and binary integer liters)\n - Tagged literals: `@name [1,2,3]` for any other type of value.\n\n Errors are fatal. A record with duplicate keys, or a string too long, or a number to big to represent MUST cause the parse to fail outright.\n\n# ARSON Object Model and Syntax\n\nARSON has the following types of literals:\n\n - `null`, `true`, `false`\n - Numbers (Floating Point, and integer literals: decimal, binary, octal, hex)\n - Strings (using single or double quotes)\n - Lists\n - Records (a JSON object with ordering and without duplicate keys)\n - Tagged Literal\n\nARSON has a number of built-in tags:\n - `@object`, `@bool`, `@int`, `@float`, `@string`, `@list`, `@record`\n\nAs well as optional tags for other types:\n\n - `@bytestring`, or `@base64` for bytestrings\n - `@float \"0x0p0\"`, for C99 Hex Floating Point Literals\n - `@dict` for unordered key-value maps\n - `@set` for sets, `@complex` for complex numbers\n - `@datetime`, `@duration` for time as point or measurement.\n\nAlong with optional tags for fixed-width numerics:\n\n - Signed integers: `@i8`, `@i16`, `@i32`, `@i64`, `@i128` \n - Unsigned integers: `@u8`, `@u16`, `@u32`, `@u64`, `@u128` \n - Floating point: `@f8`, `@f16`, `@f32`, `@f64`, `@f128` \n\n## ARSON strings: \n\n - use ''s or \"\"s\n - json escapes, and `\\xFF` (as `\\u00FF`), `\\UFFFFFFFF`  `\\'` too\n - no surrogate pairs, no unprintables\n\n## ARSON numbers:\n\n - allow unary minus, plus\n - allow leading zero\n - allow underscores (except leading digits)\n - binary ints: `0b1010`\n - octal ints `0o777`\n - hex ints: `0xFF` \n - floating point: `1.123e-10` `-0.0` `+0.0` \n - limits on size are implementation defined, parsers MAY reject numbers that are too big to represent.\n\nSpecial floating point values `NaN`, `+Infinity` are represented using tagged literals, `@float \"NaN\"`, `@float \"+Inf\"`, `@float \"-Inf\"`\n\n## ARSON lists:\n\n - allow trailing commas\n\n## ARSON records (aka, JSON objects):\n\n - no duplicate keys: parser MUST reject\n - insertion order must be preserved, but not considered in equality\n - allow trailing commas\n - implementations MUST support string keys\n\n Two keys are the same if\n\n - both strings and same codepoints (unnormalized)\n - same numerical value i.e `1` and `1.0` and `1.0e0` are the same key, `+0.0`, `-0.0` are the same key,\n - lists of same size and items are same\n - records of same size and key-value pairs are same, ignoring order\n \nNote: Semantics of `NaN` keys, or collections containing them are implementation defined.\n\n## ARSON tagged objects:\n\n - `@foo.foo {\"foo\":1}` name is any unicode letter/digit, `_`or a `.`\n - `@int 1`, `@string \"two\"` are just `1` and `\"two\"`\n - do not nest,\n - whitespace between tag name and object is *mandatory*\n - every type has a reserved tag name\n - parsers MAY reject unknown, or return a wrapped object \n\n### ARSON C99 float strings (optional):\n\n - `@float \"0x0p0\"` C99 style, sprintf('%a') format\n - `@float \"NaN\"` or nan,Inf,inf,+Inf,-Inf,+inf,-inf\n -  no underscores allowed\n\n`<sign>0x<hex mantissa>p<sign><decimal exponent>` or `...1x...` for subnormals.\n\n### ARSON sets (optional):\n\n - `@set [1,2,3]`\n - always a tagged list\n - no duplicate items, same rules as records\n - ordering does not matter when comparing\n\n### ARSON dicts (optional):\n\nThis is for compatibility with hash tables without insertion order preservation.\n\n - `@dict {\"a\":1}` \n - keys must be emitted in lexical order, must round trip in same order.\n - keys must all be the same type: number or string \n - no duplicate items, same rules as records\n - a `@dict` is equal to a record if it has same keys, ignoring order.\n\nsort order is only defined for keys of the same type\n\n### ARSON datetimes/periods (optional):\n\n - RFC 3339 format in UTC, (i.e 'Zulu time')\n - `@datetime \"2017-11-22T23:32:07.100497Z\"`\n - `@duration 60` (in seconds, float or int)\n - UTC MUST be supported, using `Z` suffix\n - implementations should support subset of RFC 3339\n\n### ARSON bytestrings (optional):\n\n - `@bytestring \"....\\xff\"` \n - `@base64 \"...==\"`\n - returns a bytestring if possible\n - can't have `\\u` `\\U` escapes > 0xFF\n - all non printable ascii characters must be escaped: `\\xFF`\n\n### ARSON complex numbers: (optional)\n\n - `@complex [0,1]` (real, imaginary)\n\n### ARSON fixed width numerics (optional)\n\nNumeric literals can be tagged with a desired width.\n\n - `@u8 255`\n - `@i8 -127`\n - `@f32 0.0`\n\nAdditionally, fixed width floating points (i.e `@f8`) work like `@float`, and accept C99 hex-floats, along with `\"NaN\"` etc.\n\nImplementations MUST error if the floats are too wide, but may choose to store a `f32` in a `f64`, for example.\n\n### ARSON numeric arrays (optional)\n\nAn array of numeric literals can be tagged:\n\n - `@u8 [2,5,5]` is the same as `[@u8 2, @u8 5, @u8 5]`\n - `@i8 [-1,2,7]` is the same as `[@u8 -1, @u8 2, @u8 7]`\n - `@f32 [0.0, -1.0, 1.0]` is the same as `[@f32 0.0, @f32 -1.0, @f32 1.0]`\n\n### Builtin ARSON Tags:\n\nPass throughs (i.e `@foo bar` is `bar`):\n\n - `@object` on any \n - `@bool` on true, or false\n - `@int` on ints\n - `@float` on ints or floats\n - `@string` on strings\n - `@list` on lists\n - `@record` on records\n\nTags that transform the literal:\n\n - @float on strings (for C99 hex floats, including NaN, -Inf, +Inf)\n - @duration on numbers (seconds)\n - @datetime on strings (utc timestamp)\n - @base64 on strings (into a bytesting)\n - @bytestring on strings (into a bytestring)\n - @set on lists \n - @complex on lists\n - @string on lists of strings (joins them into one string)\n - @dict on records\n - @u8, @f8, @i8 on lists\n\nReserved:\n\n - `@unknown`\n\nAny other use of a builtin tag is an error and MUST be rejected.\n\n# ARSON Test Vectors\n\n## MUST parse\n```\n@object null\n@bool true\nfalse\n0\n@float 0.0\n-0.0\n\"test-\\x32-\\u0032-\\U00000032\"\n'test \\\" \\''\n[]\n[1,]\n{\"a\":\"b\",}\n```\n\n## MUST not parse\n\n```\n_1\n0b0123\n0o999\n0xGHij\n@set {}\n@dict []\n[,]\n{\"a\"}\n{\"a\":1, \"a\":2}\n@object @object {}\n\"\\uD800\\uDD01\"\n```\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "arson",
            "package_url": "https://pypi.org/project/arson/",
            "platform": null,
            "project_url": "https://pypi.org/project/arson/",
            "project_urls": {
                "Bug Tracker": "https://github.com/tef/arson/issues",
                "Homepage": "https://github.com/tef/arson"
            },
            "release_url": "https://pypi.org/project/arson/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A restructured object notation",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16137366,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ec5143d0b96202c1b90d94a5786dfe4f",
                    "sha256": "1587df52763694ad0d6f68d89b8a2aa6c3c830df3f50838bc0b84366ee267a5a"
                },
                "downloads": -1,
                "filename": "arson-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ec5143d0b96202c1b90d94a5786dfe4f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 10513,
                "upload_time": "2022-12-18T00:07:23",
                "upload_time_iso_8601": "2022-12-18T00:07:23.831574Z",
                "url": "https://files.pythonhosted.org/packages/4b/3c/5dae5391a991d842e2afbb51ae002943abe82911d00e938288ace5ed9e84/arson-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "121e8f39552dd9a6164a2a6431362786",
                    "sha256": "3b59056bab68a98226457171db15419a46e4cdf3c6d4f596092362b23cd714f4"
                },
                "downloads": -1,
                "filename": "arson-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "121e8f39552dd9a6164a2a6431362786",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 13890,
                "upload_time": "2022-12-18T00:07:26",
                "upload_time_iso_8601": "2022-12-18T00:07:26.216755Z",
                "url": "https://files.pythonhosted.org/packages/13/e2/394a8803eda771908a9334315b11284df3f1048995e922e2a65a43c9c60f/arson-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}