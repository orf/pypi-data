{
    "0.3.0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Framework :: Jupyter",
                "Framework :: Matplotlib",
                "Intended Audience :: Developers",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Scientific/Engineering :: Visualization",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "# leda\n\nGenerate static reports with interactive widgets from Jupyter notebooks\n\n[![PyPI version](https://badge.fury.io/py/leda.svg)](https://badge.fury.io/py/leda)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/leda.svg)](https://pypi.python.org/pypi/leda/)\n[![GitHub Actions (Tests)](https://github.com/ansatzcapital/leda/workflows/Test/badge.svg)](https://github.com/ansatzcapital/leda)\n\n## Quick Start\n\nGenerate a static HTML report from a Jupyter notebook:\n\n```bash\npython -m leda /path/to/nb.ipynb --output-dir ./outputs/\n\n# Optional args:\npython -m leda /path/to/nb.ipynb --output-dir ./outputs/ \\\n    -i \"abc = 123\" -k \"other_kernel\" --cell-timeout 100\n```\n\nThis will automatically include formatting tweaks, including, e.g., hiding all input code.\n\n`-i` (`--inject`) is used to inject user code via a new cell prepended to the notebook during generation.\n\nThink of it like [`voila`](https://voila.readthedocs.io/en/stable/using.html)\nor [nbviewer](https://nbviewer.org/) but with widgets.\n\n**Note**: `leda` assumes that all code is run in a trusted environment, so please be careful.\n\n### Interaction/Widgets\n\n`leda` provides an `%%interact` [magic](https://ipython.readthedocs.io/en/stable/interactive/magics.html)\nthat makes it easy to create outputs based on widgets, like:\n\n```python\n%%interact mult0=[1,2,3],mult1=[10,100,1000]\ndf = pd.DataFrame({\"a\": [1, 2, 3]}) * mult0 * mult1\ndf.plot(title=f\"Foo: {mult0}, {mult1}\")\n```\n\nThere are two types of interact modes: dynamic and static. Dynamic mode is when you're running the Jupyter notebook\nlive, in which case you will re-compute the cell output every time you select a different `mult`.\n\nIn a static mode (using whichever static widget backend is configured), the library will pre-compute\nall possible combinations of widget states ([see Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product))\nand then render a static HTML report that contains widgets that look and feel like the dynamic widgets\n(despite being pre-rendered).\n\n### Report Web UI Server\n\nUnlike [`voila`](https://voila.readthedocs.io/en/stable/using.html), because all report output is **static HTML**,\nyou can stand up a report web UI server that suits your needs very easily. That means:\n- It's trivial to set up in many cases.\n- It's as scalable as your web server.\n- It's more cost-efficient because there are no runtimes whatsoever.\n- You don't have to worry about old versions no longer working due to code or data changes, so the historical\narchive of old reports never expire or change or break.\n\nFor example, you can generate the report to a file, upload that file to a shared location, and then stand\nup a bare-bones `nginx` server to serve the files. (Instead of having a two-step of generation + upload,\nyou could alternatively implement your own `leda.gen.base.ReportPublisher` and create a generation script of your own).\n\n### Params\n\nReports can be parametrized so that the user can set different values for each report run.\n\nIn the notebook, just use `leda.get_param()`:\n\n```python\ndata_id = leda.get_param(\"data_id\", dynamic_default=1, static_default=2)\n```\n\nAnd then change the injected code during each run:\n\n```bash\npython -m leda /path/to/nb.ipynb --output ./outputs/ -i \"data_id = 100\"\n```\n\n### Modular\n\n`leda` is built to work with multiple visualization and widget libraries.\n\nWorks with these visualization libraries:\n- [`matplotlib`](https://matplotlib.org/)\n- [`plotly`](https://plotly.com/python/)\n\nWith the default dynamic widget library:\n- [`ipywidgets`](https://ipywidgets.readthedocs.io/en/stable/)\n\nAnd with these static widget libraries:\n- [`static_ipywidgets`](https://github.com/jakevdp/ipywidgets-static) (vendored and modified)\n- [`panel`](https://panel.holoviz.org/)\n\n## Testing\n\nSee the `requirements-bundle*.txt` for version bundles that we currently test manually.\n\nhe most important next task for leda  development would be to \n(1) automate testing generating reports (reports may contain many random\nstrs that don't affect the output but make it impossible to do a simple `diff`), and (2) expand\nthe number of bundles being tested (especially to the newer versions).\n\n(All of these bundles will be tested against Linux/macOS/Windows and various python versions.)\n\n## Known Issues\n\n- Not all widget states of `matplotlib` update when using `panel` static interact mode: https://github.com/holoviz/panel/issues/1222\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ansatzcapital/leda",
            "keywords": "reports, Jupyter, notebooks, data visualization",
            "license": "Apache License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "leda",
            "package_url": "https://pypi.org/project/leda/",
            "platform": "any",
            "project_url": "https://pypi.org/project/leda/",
            "project_urls": {
                "Homepage": "https://github.com/ansatzcapital/leda",
                "Packaging": "https://pypi.org/project/leda/",
                "Source": "https://github.com/ansatzcapital/leda",
                "Tracker": "https://github.com/ansatzcapital/leda/issues"
            },
            "release_url": "https://pypi.org/project/leda/0.3.0/",
            "requires_dist": [
                "cached-property (==1.5.2)",
                "ipython (>=7.16.1)",
                "ipywidgets (>=7.5.1)",
                "markdown2 (>=2.3.9)",
                "matplotlib (>=2.2.5)",
                "nbconvert (>=5.6.1)",
                "nbformat (>=5.0.4)",
                "plotly (>=4.6.0)",
                "termcolor (>=1.1.0)",
                "tqdm (>=4.48.2)",
                "pandas (>=1.0.0) ; extra == 'demos'",
                "panel (>=0.14.1) ; extra == 'demos'",
                "panel (>=0.14.1) ; extra == 'panel'",
                "black (>=22.8) ; extra == 'testing'",
                "docformatter (>=1.5.0) ; extra == 'testing'",
                "flake8 (>=5.0.4) ; extra == 'testing'",
                "isort (>=5.2.2) ; extra == 'testing'",
                "mypy (>=0.800) ; extra == 'testing'",
                "pytest (>=6.2.5) ; extra == 'testing'",
                "pytest-cov (<3,>=2) ; extra == 'testing'",
                "tox (>=3.27.1) ; extra == 'testing'"
            ],
            "requires_python": ">=3.7",
            "summary": "Generate static reports from Jupyter notebooks",
            "version": "0.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16035257,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f1f3a4ac148e5aa5a6df6d7009424afb",
                    "sha256": "b714096cb767952f7d34755c166e12cd01217f07a2331793f1e846b702d09fb5"
                },
                "downloads": -1,
                "filename": "leda-0.3.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f1f3a4ac148e5aa5a6df6d7009424afb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 29972,
                "upload_time": "2022-12-07T22:12:56",
                "upload_time_iso_8601": "2022-12-07T22:12:56.467686Z",
                "url": "https://files.pythonhosted.org/packages/87/c3/ce8393fdb037943cf12538d62d8b8f70c7338689396d627ad05c695c53c5/leda-0.3.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8ec99811e75fe7f3a6cbf7ac01005639",
                    "sha256": "ccd15eb70654a4a369604821cf5297f4b040ea76024a11876ed40579673f200b"
                },
                "downloads": -1,
                "filename": "leda-0.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8ec99811e75fe7f3a6cbf7ac01005639",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 303989,
                "upload_time": "2022-12-07T22:12:58",
                "upload_time_iso_8601": "2022-12-07T22:12:58.276689Z",
                "url": "https://files.pythonhosted.org/packages/0b/5f/fd3d9b0fcfd08018c129ab6ceeb47a1213532602517954341dda05e804be/leda-0.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}