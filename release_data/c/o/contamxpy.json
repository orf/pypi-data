{
    "0.0.1": {
        "info": {
            "author": "W. Stuart Dols, Brian Polidoro, NIST",
            "author_email": "william.dols@nist.gov",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: BSD License",
                "License :: Public Domain",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Scientific/Engineering"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "Public Domain",
            "maintainer": "",
            "maintainer_email": "",
            "name": "contamxpy",
            "package_url": "https://pypi.org/project/contamxpy/",
            "platform": null,
            "project_url": "https://pypi.org/project/contamxpy/",
            "project_urls": {
                "Source": "https://github.com/usnistgov/contamxpy/",
                "Web Page": "https://www.nist.gov/el/energy-and-environment-division-73200/nist-multizone-modeling/"
            },
            "release_url": "https://pypi.org/project/contamxpy/0.0.1/",
            "requires_dist": [
                "cffi (>=1)"
            ],
            "requires_python": ">=3.7",
            "summary": "Python wrapper for the CONTAM Simulation Engine, ContamX",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16078066,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e281e3628f6304a3f1fbbd1f0c85cd5c",
                    "sha256": "76d861634f6711aa02bbe06e2db05751b4260db21d7d3401811b0614c3497655"
                },
                "downloads": -1,
                "filename": "contamxpy-0.0.1-cp310-abi3-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "e281e3628f6304a3f1fbbd1f0c85cd5c",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": ">=3.7",
                "size": 819551,
                "upload_time": "2022-11-07T21:06:34",
                "upload_time_iso_8601": "2022-11-07T21:06:34.554799Z",
                "url": "https://files.pythonhosted.org/packages/77/93/a0a2c52e0eb981847ba3fdc74d4bbc2c291a3903d60ef96228c1149f92e5/contamxpy-0.0.1-cp310-abi3-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8d03b075cd4cbfd3b5a497438dd76beb",
                    "sha256": "e22b743e0adb6050a7301db26c4d57af57d47d000adbf620d3f54c75759fc586"
                },
                "downloads": -1,
                "filename": "contamxpy-0.0.1.zip",
                "has_sig": false,
                "md5_digest": "8d03b075cd4cbfd3b5a497438dd76beb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 914480,
                "upload_time": "2022-11-07T21:07:18",
                "upload_time_iso_8601": "2022-11-07T21:07:18.096069Z",
                "url": "https://files.pythonhosted.org/packages/14/79/08e492fd5fcc71458dcccd76226e5e24d5bf82071d6c14db2ad831783429/contamxpy-0.0.1.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "W. Stuart Dols, Brian Polidoro, NIST",
            "author_email": "william.dols@nist.gov",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: BSD License",
                "License :: Public Domain",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Scientific/Engineering"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "Public Domain",
            "maintainer": "",
            "maintainer_email": "",
            "name": "contamxpy",
            "package_url": "https://pypi.org/project/contamxpy/",
            "platform": null,
            "project_url": "https://pypi.org/project/contamxpy/",
            "project_urls": {
                "Source": "https://github.com/usnistgov/contamxpy/",
                "Web Page": "https://www.nist.gov/el/energy-and-environment-division-73200/nist-multizone-modeling/"
            },
            "release_url": "https://pypi.org/project/contamxpy/0.0.2/",
            "requires_dist": [
                "cffi (>=1)"
            ],
            "requires_python": ">=3.7",
            "summary": "Python wrapper for the CONTAM Simulation Engine, ContamX",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16078066,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ba8ddb72256032bdccc9e7c67f8c2295",
                    "sha256": "b9c532d60a4488ad19f427b30b27c599e3c8f81664530f9489b222f032d46a12"
                },
                "downloads": -1,
                "filename": "contamxpy-0.0.2-cp310-abi3-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "ba8ddb72256032bdccc9e7c67f8c2295",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": ">=3.7",
                "size": 773372,
                "upload_time": "2022-11-18T21:27:23",
                "upload_time_iso_8601": "2022-11-18T21:27:23.731001Z",
                "url": "https://files.pythonhosted.org/packages/67/7d/9671a9c8cd0eb0cbe5dd77255cf8bb625a03edd4d158faef826ec9b177cb/contamxpy-0.0.2-cp310-abi3-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9d2b47ebfef6d5178468bd24179c5626",
                    "sha256": "20c4b2f20d8b75087b6eeffd09c33e9cfaa8af804a0396e4f74813ab7ef53580"
                },
                "downloads": -1,
                "filename": "contamxpy-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "9d2b47ebfef6d5178468bd24179c5626",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 1710357,
                "upload_time": "2022-11-18T21:29:56",
                "upload_time_iso_8601": "2022-11-18T21:29:56.655701Z",
                "url": "https://files.pythonhosted.org/packages/b7/59/cf1e5d69df5ba95ebb23ed72e8022425375096e3865f534d14bab673a5cc/contamxpy-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "W. Stuart Dols, Brian Polidoro, NIST",
            "author_email": "william.dols@nist.gov",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: BSD License",
                "License :: Public Domain",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Scientific/Engineering"
            ],
            "description": "# Python Bindings for ContamX \n\n**NOTE: This package is not yet fully functional.**\n\nThis is the initial implementation of a Python wrapper for `contamx-lib.lib` which is a statically linked library with an API wrapper around ContamX. `contamx-lib` enables control of CONTAM simulations via C-language API. This Python package, `contamxpy`, provides another layer of access, i.e., Python bindings, to `contamx-lib`.  \n\nThe demonstration driver, `test_cxffi.py` that is included herein, imports `contamxpy`, obtains a `state`, gets properties of the simulation necessary to run from beginning to end, then steps through all the time steps.  \n\n# Usage\n\nTypically, one would work within a Python virtual environment which can be created and activated using the following commands.  \n```\n$ python -m venv .venv\n$ .venv\\Scripts\\activate  (on Windows)\n```   \nInstall `contamxpy` from PyPI.  \n```\n$(.venv) python -m pip install contamxpy\n```   \nGet help for the test module from the command line.\n```\ntest_cxcffi.py -h\n\nUsage: test_cxcffi.py [options] arg1  \n    arg1=PRJ filename\n\nOptions:\n  -h, --help    show this help message and exit\n  -v VERBOSE, --verbose=VERBOSE\n                define verbose output level: 0=Min, 1=Medium,\n                2=Max\n```\nRun example case.\n```\ntest_cxcffi.py testOneZoneWthCtm.prj\n```\n## Example Test Module: *test_cxcffi.py*  \n```python\nfrom contamxpy import cxLib \nimport os, sys\nfrom optparse import OptionParser\n\n#===================================================================================== main() =====\ndef main():\n    #----- Manage option parser\n    parser = OptionParser(usage=\"%prog [options] arg1\\n\\targ1=PRJ filename\\n\")\n    parser.set_defaults(verbose=0)\n    parser.add_option(\"-v\", \"--verbose\", action=\"store\", dest=\"verbose\", type=\"int\", default=0,\n                        help=\"define verbose output level: 0=Min, 1=Medium, 2=Maximum.\")\n    (options, args) = parser.parse_args()\n\n    #----- Process command line options -v\n    verbose = options.verbose\n\n    if len(args) != 1:\n        parser.error(\"Need one argument:\\n  arg1 = PRJ file.\")\n        return\n    else:\n        prj_name  = args[0]\n\n    if ( not os.path.exists(prj_name) ):\n        print(\"ERROR: PRJ file not found.\")\n        return\n\n    msg_cmd = \"Running test_cxcffi.py: arg1 = \" + args[0] + \" \" + str(options)\n    print(msg_cmd, \"\\n\")\n\n    if verbose > 1:\n        print(f\"cxLib attributes =>\\n{chr(10).join(map(str, dir(cxLib)))}\\n\")\n\n    #----- Initialize contamx-lib object w/ wpMode and cbOption.\n    #      wpMode = 0 => use wind pressure profiles, WTH and CTM files or associated API calls.\n    #      cbOption = True => set callback function to get PRJ INFO from the ContamXState.\n    myPrj = cxLib(0, True)\n    myPrj.setVerbosity(verbose)\n    if verbose > 1:\n        print(f\"BEFORE setupSimulation()\\n\\tnCtms={myPrj.nContaminants}\\n\\tnZones={myPrj.nZones}\\n\\tnPaths={myPrj.nPaths}\\n\" )\n    \n    #----- Query State for Version info\n    verStr = myPrj.getVersion()\n    if verbose >= 0:\n        print(f\"getVersion() returned {verStr}.\")\n\n    #----- Setup Simulation for PRJ\n    myPrj.setupSimulation(prj_name, 1)\n\n    if verbose > 1:\n        print(f\"AFTER setupSimulation()\\n\\tnCtms={myPrj.nContaminants}\\n\\tnZones={myPrj.nZones}\\n\\tnPaths={myPrj.nPaths}\\n\" )\n\n    dayStart = myPrj.getSimStartDate()\n    dayEnd   = myPrj.getSimEndDate()\n    secStart = myPrj.getSimStartTime()\n    secEnd   = myPrj.getSimEndTime()\n    tStep    = myPrj.getSimTimeStep()\n\n    simBegin = (dayStart - 1) * 86400 + secStart\n    simEnd = (dayEnd - 1) * 86400 + secEnd\n \n    #----- Calculate the simulation duration in seconds and total time steps\n    if (simBegin < simEnd):\n        simDuration = simEnd - simBegin\n    else:\n        simDuration = 365 * 86400 - simEnd + simBegin\n    numTimeSteps = int(simDuration / tStep)\n \n    #----- Get the current date/time after initial steady state simulation\n    currentDate = myPrj.getCurrentDayOfYear()\n    currentTime = myPrj.getCurrentTimeInSec()\n    if verbose > 0:\n        print(f\"Sim days = {dayStart}:{dayEnd}\")\n        print(f\"Sim times = {secStart}:{secEnd}\")\n        print(f\"Sim time step = {tStep}\")\n        print(f\"Number of steps = {numTimeSteps}\")\n\n    #----- Run Simulation\n    for i in range(numTimeSteps):\n        currentDate = myPrj.getCurrentDayOfYear()\n        currentTime = myPrj.getCurrentTimeInSec()\n        if verbose > 1:\n            print(f\"{i}\\t{currentDate},{currentTime}\")\n        myPrj.doSimStep(1)\n\n    myPrj.endSimulation()\n\n# --- End main() ---#\n\nif __name__ == \"__main__\":\n    main()\n```\n\n# Developer Notes\n\nThese bindings were developed using the **C Foreign Function Interface (CFFI)**. CFFI utilizes C header files that define the `contamx-lib` API. `contamx-lib.lib` is a build of ContamX that is statically linked build of `contamx-lib`. A dynamic Python module (.pyd) is built that incorporates the static build.  \n\n**NIST Developer NOTE:** The static build of `contamx-lib.lib` must include the following dependencies: `WSock32.lib`, `WS2_32.lib`, and `user32.lib`.  \n\n## Steps to Develop Python Bindings\n\n### 1. Create directory for *contamxpy*  \n- Either clone the repo (NIST developers only) OR\n- Download the source distribution from https://pypi.org/project/contamxpy/  \n#### Source files:  \n\n```\ncontamxpy\\  \n|\n| setup.py\n| setup.cfg\n| MANIFEST.in \n| LICENSE.txt\n| README.md\n| contamxpy_build.py\n| contamxpy.py\n| contamx-lib.lib\n|\n\u251c\u2500\u2500 include\\\n|   \u2514\u2500\u2500 common-api.h\n|       commonState.h\n|       contam-x-cosim.h\n|       contam-x-state.h\n|       element-api.h\n|       flags.h\n|       library-api.h\n|       project-api.h\n|       string-len-max.h\n|       types.h\n|\n\u2514\u2500\u2500 demo_files\\\n    \u2514\u2500\u2500 test_cxcffi.py\n        testOneZoneWthCtm.prj/.wth/.ctm\n        valThreeZonesWth.prj/.wth/.ctm\n```\n### 2. Create virtual environment\n   `python -m venv .venv`  \n   \n### 3. Activate virtual environment\n   + Windows => `.venv\\Scripts\\activate.bat`\n   \n### 4. Install *cffi* and *wheel* packages  \n   `$ python -m pip install cffi, wheel`\n\n### 5. Generate *contamxpy* \n\nRun the build module.\n```\ncontamxpy_build.py\n```   \nThis should generate *_contamxpy.c*, etc.\n```\ncontamxpy\\  \n|\n\u251c\u2500\u2500 Release\\\n|   \u2514\u2500\u2500 *.exp/.lib/.obj\n|\n\u2514\u2500\u2500 _contamxpy.c\n    _contamxpy.cp310-win_amd64.pyd\n```\n\nMost importantly it will generate a .pyd file, e.g., \n`_contamxpy-0.0.3-abi3-cp310-win_amd64.pyd`. This is a dynamic Python module to be imported into a driver program. It provides a wrapper to `contamx-lib.lib`. \n\n### 6. Install the development version locally\n```\n$(.venv) pip install .\n```\n### 7. Generate Files for Distribution\nBuilt distribution, i.e., wheel file:\n```\n$(.venv) python -m setup bdist_wheel\n```\nSource distribution, i.e., compressed archive (.gz, .zip):\n```\n$(.venv) python -m setup sdist\n$(.venv) python -m setup sdist --format=zip\n```\n\n## Development Files  \n\n### cxcffi_build.py\n\nThe file shown below is a partial implementation of the \nAPI associated with `contamx-lib`.  \n\n```python\nfrom __future__ import annotations\n\n# Using the \"out-of-line\", \"API mode\"\nfrom cffi import FFI\n\n\nCDEF = '''\\\n    // see types.h\n    typedef int32_t IX;\n    typedef float R4;\n    typedef double R8;\n    typedef uint16_t U2;\n    \n    typedef struct zone_cosim_dsc\n    {\n        int32_t nr;\n        uint16_t flags;\n        float Vol;\n        char level_name[16]; // #define NAMELEN 16\n        int32_t level_nr;\n        char name[32];       // #define NMLN 32\n    } ZONE_COSIM_DSC;\n\n    typedef struct path_cosim_dsc \n    {\n        IX nr;\n        U2 flags;\n        IX from_zone;\n        IX to_zone;\n        IX ahs_nr;\n        R4 X;\n        R4 Y;\n        R4 Z;\n        IX envIndex;\n    } PATH_COSIM_DSC;\n\n    // Callback function - extern => to be python function defined in contamxpy.py.\n    extern \"Python\" void prjDataReadyFcnP(void *, void *);\n    // {prjDataReadyFcnP} will set to function defined in {cxLib} class of {contamxpy}.\n    void cxiRegisterCallback_PrjDataReady( void* contamXState, void* pUserData, void ( *prjDataReadyFcnP )( void*, void* ) );\n\n    void* cxiGetContamState();\n    void cxiSetWindPressureMode(void* contamXState, IX useWP);\n    void cxiSetupSimulation(void* contamXState, char* projectPath, IX useCosim);\n    IX cxiGetVersion(void* contamXState, char* strVersion);\n\n    IX cxiGetSimulationStartDate(void* contamXState);\n    IX cxiGetSimulationStartTime(void* contamXState);\n    IX cxiGetSimulationEndDate(void* contamXState);\n    IX cxiGetSimulationEndTime(void* contamXState);\n    IX cxiGetSimulationTimeStep(void* contamXState);\n    IX cxiGetCurrentDate(void* contamXState);\n    IX cxiGetCurrentTime(void* contamXState);\n    void cxiDoCoSimStep(void* contamXState, IX stepForward);\n    void cxiEndSimulation(void* contamXState);\n\n    // These functions will be utilized within the callback function, prjDataReadyFcnP(),\n    //   to populate class variables for access by the calling/driver\n    //   program which imports {contamxpy}\n    IX cxiGetNumCtms(void* contamXState);\n    IX cxiGetCtmName(void* contamXState, IX ctmNumber, char* strName);\n    IX cxiGetNumZones(void* contamXState);\n    IX cxiGetZoneInfo(void* contamXState, IX zoneNumber, ZONE_COSIM_DSC* pZoneInfo);\n    IX cxiGetNumPaths(void* contamXState);\n    IX cxiGetPathInfo(void* contamXState, IX pathNumber, PATH_COSIM_DSC* pPath);\n\n    // Results\n    IX cxiGetZoneMF(void* contamXState, IX zoneNumber, IX ctmNumber, R8* pMassFraction);\n'''\n\nSRC = '''\\\n    #include \"include//contam-x-cosim.h\"\n'''\n\nffibuilder = FFI()\nffibuilder.cdef(CDEF)\nffibuilder.set_source(\n    \"_contamxpy\", SRC,\n    include_dirs=['.','include'],  # C header files for contam-x-lib\n    libraries=['contamx-lib'],     # Library to link with (.lib, .dll)\n)\n\nif __name__ == \"__main__\":\n    ffibuilder.compile(verbose=True)\n```\n### contamxpy\n`contamxpy` implements the `cxLib` class that provides the wrapper to `contamx-lib`. This module is imported for use by driver programs as demonstrated in *test_cxcffi.py* above.\n```python\nfrom __future__ import annotations\n\nimport _contamxpy\n\n_lib = _contamxpy.lib\n_ffi = _contamxpy.ffi\n\n#print(f\"_contamxpy => \\n\\t{dir(_contamxpy)}\")\n\n'''\n    cxiGetContamState() is defined in contam-x-cosim.c\n'''\ndef getState():\n    return _lib.cxiGetContamState()\n\ndef setWindPressureMode(state, mode):\n    _lib.cxiSetWindPressureMode(state, mode)\n\ndef getVersion(state):\n    bufStr = _ffi.new(\"char[]\", 64)\n    _lib.cxiGetVersion(state, bufStr)\n    return _ffi.string(bufStr).decode('utf-8')\n\ndef setupSimulation(state, prjPath, useCosim):\n    _lib.cxiSetupSimulation(state, prjPath.encode('ascii'), useCosim)\n\ndef getSimTimeStep(state):\n    timeStep = _lib.cxiGetSimulationTimeStep(state)\n    return timeStep\n\ndef getSimStartDate(state):\n    dayOfYear = _lib.cxiGetSimulationStartDate(state)\n    return dayOfYear\n\ndef getSimEndDate(state):\n    dayOfYear = _lib.cxiGetSimulationEndDate(state)\n    return dayOfYear\n\ndef getSimStartTime(state):\n    timeOfDaySeconds = _lib.cxiGetSimulationStartTime(state)\n    return timeOfDaySeconds\n\ndef getSimEndTime(state):\n    timeOfDaySeconds = _lib.cxiGetSimulationEndTime(state)\n    return timeOfDaySeconds\n\ndef getCurrentDayOfYear(state):\n    return _lib.cxiGetCurrentDate(state)\n\ndef getCurrentTimeInSec(state):\n    return _lib.cxiGetCurrentTime(state)\n\ndef doSimStep(state, stepForward):\n    _lib.cxiDoCoSimStep(state, stepForward)\n\ndef endSimulation(state):\n    _lib.cxiEndSimulation(state)\n```\n\n### setup.py  \n\n```python\nfrom __future__ import annotations\n\nimport platform\nimport sys\n\nfrom setuptools import setup\n\nif platform.python_implementation() == 'CPython':\n    try:\n        import wheel.bdist_wheel\n    except ImportError:\n        cmdclass = {}\n    else:\n        class bdist_wheel(wheel.bdist_wheel.bdist_wheel):\n            def finalize_options(self) -> None:\n                self.py_limited_api = f'cp3{sys.version_info[1]}'\n                super().finalize_options()\n\n        cmdclass = {'bdist_wheel': bdist_wheel}\nelse:\n    cmdclass = {}\n\nsetup(\n    cffi_modules=['contamxpy_build.py:ffibuilder'], cmdclass=cmdclass\n    )\n```\n\n### setup.cfg\n\n```ini\n[metadata]\nname = contamxpy\nversion = 0.0.3\ndescription = Python wrapper for the CONTAM Simulation Engine, ContamX\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nauthor = W. Stuart Dols, Brian Polidoro, NIST\nauthor_email = william.dols@nist.gov\nlicense = Public Domain\nlicense_files = LICENSE.txt\nclassifiers =\n    License :: Public Domain \n    License :: OSI Approved :: BSD License\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Topic :: Scientific/Engineering\nproject_urls=\n    Web Page= https://www.nist.gov/el/energy-and-environment-division-73200/nist-multizone-modeling/\n    Source  = https://pypi.org/project/contamxpy/\n[options]\npy_modules = contamxpy\npython_requires = >=3.7\ninstall_requires =\n    cffi>=1\nsetup_requires =\n    cffi>=1\n```\n\n### MANIFEST.in\nThe manifest file is used to add files to the source builds.  \n\n```\ninclude include\\*.h\ninclude contamx-lib.*\ninclude demo_files\\*.*\n```\n\n# REFERENCES\n1. https://www.youtube.com/watch?v=X5irxO5VCHw\n2. https://github.com/asottile/ukkonen\n3. https://cffi.readthedocs.io/en/latest/index.html\n4. https://docs.python.org/3.10/distutils/index.html\n5. https://setuptools.pypa.io/en/latest/setuptools.html\n6. https://packaging.python.org/en/latest/tutorials/packaging-projects/\n\n# TODO  \n- Implement full API.  \n- Test on Linux  \n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "Public Domain",
            "maintainer": "",
            "maintainer_email": "",
            "name": "contamxpy",
            "package_url": "https://pypi.org/project/contamxpy/",
            "platform": null,
            "project_url": "https://pypi.org/project/contamxpy/",
            "project_urls": {
                "Source": "https://pypi.org/project/contamxpy/",
                "Web Page": "https://www.nist.gov/el/energy-and-environment-division-73200/nist-multizone-modeling/"
            },
            "release_url": "https://pypi.org/project/contamxpy/0.0.3/",
            "requires_dist": [
                "cffi (>=1)"
            ],
            "requires_python": ">=3.7",
            "summary": "Python wrapper for the CONTAM Simulation Engine, ContamX",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16078066,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f27e113499c74ba5721702ec919f077",
                    "sha256": "bbe9f82664e549d96f30dc6cf82b7842711292cf4b32918a8a7df7ddc1cfe339"
                },
                "downloads": -1,
                "filename": "contamxpy-0.0.3-cp310-abi3-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "4f27e113499c74ba5721702ec919f077",
                "packagetype": "bdist_wheel",
                "python_version": "cp310",
                "requires_python": ">=3.7",
                "size": 776832,
                "upload_time": "2022-12-12T19:41:17",
                "upload_time_iso_8601": "2022-12-12T19:41:17.536725Z",
                "url": "https://files.pythonhosted.org/packages/6d/84/4b22a2e802a3325fbb2ff51f2e538388f77abeb72d55cdc65f2e43a5e581/contamxpy-0.0.3-cp310-abi3-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5c813b2ba2185cb3fc0ca89037995d47",
                    "sha256": "3ee6e21d5d4b329593a09528c2ed3465085d9b1fd56635272ce5970a58c789fd"
                },
                "downloads": -1,
                "filename": "contamxpy-0.0.3.zip",
                "has_sig": false,
                "md5_digest": "5c813b2ba2185cb3fc0ca89037995d47",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 1771215,
                "upload_time": "2022-12-12T19:41:21",
                "upload_time_iso_8601": "2022-12-12T19:41:21.753068Z",
                "url": "https://files.pythonhosted.org/packages/68/25/c8fb4be91c45693b8b78f6fcf5e1bbbb8957bc004749bffa971c7e4c3f84/contamxpy-0.0.3.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}