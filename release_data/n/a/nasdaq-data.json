{
    "0.1.0": {
        "info": {
            "author": "Aidzillafont",
            "author_email": "aheffernan0@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# How to\nFirst import and create an instance of your nasdaq data grabber object\n\n\n```python\nfrom nasdaq_data import nasdaq_grabber as ng\n```\n\n\n```python\nmy_ng = ng() \n```\n\n## Get Top Stocks by Market Cap\nCall nasdaq_stocks and input the number of tickers you want and you will get info on stocks in order of Market Cap\n\n\n```python\nmy_ng.nasdaq_stocks(10)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>name</th>\n      <th>lastsale</th>\n      <th>netchange</th>\n      <th>pctchange</th>\n      <th>marketCap</th>\n      <th>url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAPL</td>\n      <td>Apple Inc. Common Stock</td>\n      <td>$150.43</td>\n      <td>-2.31</td>\n      <td>-1.512%</td>\n      <td>2,608,056,056,200</td>\n      <td>/market-activity/stocks/aapl</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>MSFT</td>\n      <td>Microsoft Corporation Common Stock</td>\n      <td>$237.92</td>\n      <td>-3.06</td>\n      <td>-1.27%</td>\n      <td>1,774,381,634,186</td>\n      <td>/market-activity/stocks/msft</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GOOG</td>\n      <td>Alphabet Inc. Class C Capital Stock</td>\n      <td>$99.17</td>\n      <td>-1.40</td>\n      <td>-1.392%</td>\n      <td>1,293,573,480,000</td>\n      <td>/market-activity/stocks/goog</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>GOOGL</td>\n      <td>Alphabet Inc. Class A Common Stock</td>\n      <td>$98.74</td>\n      <td>-1.40</td>\n      <td>-1.398%</td>\n      <td>1,287,964,560,000</td>\n      <td>/market-activity/stocks/googl</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AMZN</td>\n      <td>Amazon.com, Inc. Common Stock</td>\n      <td>$113.78</td>\n      <td>-3.53</td>\n      <td>-3.009%</td>\n      <td>1,157,926,339,396</td>\n      <td>/market-activity/stocks/amzn</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>TSLA</td>\n      <td>Tesla, Inc. Common Stock</td>\n      <td>$275.33</td>\n      <td>-13.26</td>\n      <td>-4.595%</td>\n      <td>862,738,307,490</td>\n      <td>/market-activity/stocks/tsla</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>BRK/A</td>\n      <td>Berkshire Hathaway Inc.</td>\n      <td>$404485.25</td>\n      <td>-889.76</td>\n      <td>-0.219%</td>\n      <td>594,946,837,609</td>\n      <td>/market-activity/stocks/brk/a</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>BRK/B</td>\n      <td>Berkshire Hathaway Inc.</td>\n      <td>$267.77</td>\n      <td>-0.74</td>\n      <td>-0.276%</td>\n      <td>590,783,995,813</td>\n      <td>/market-activity/stocks/brk/b</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>UNH</td>\n      <td>UnitedHealth Group Incorporated Common Stock (DE)</td>\n      <td>$513.61</td>\n      <td>-3.85</td>\n      <td>-0.744%</td>\n      <td>480,421,913,683</td>\n      <td>/market-activity/stocks/unh</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>JNJ</td>\n      <td>Johnson &amp; Johnson Common Stock</td>\n      <td>$166.72</td>\n      <td>0.54</td>\n      <td>0.325%</td>\n      <td>438,336,872,094</td>\n      <td>/market-activity/stocks/jnj</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## Get Historical Prices\nPass a start date and end date in ISO format along with your ticker to nasdaq_historical_price to get historical prices\n\n\n```python\nfrom dateutil.relativedelta import relativedelta\nimport time\nimport datetime as dt\n\n#today\nt = dt.date.today().replace(day=1)\n#one year ago\nt0 = t - relativedelta(years=1)\n\n#isoformat\niso_t0, iso_t = t0.isoformat(), t.isoformat()\n\nmy_ng.nasdaq_historical_price('AAPL', iso_t0, iso_t)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>09/01/2022</td>\n      <td>$157.96</td>\n      <td>74,229,900</td>\n      <td>$156.64</td>\n      <td>$158.42</td>\n      <td>$154.67</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>08/31/2022</td>\n      <td>$157.22</td>\n      <td>87,991,090</td>\n      <td>$160.305</td>\n      <td>$160.58</td>\n      <td>$157.14</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>08/30/2022</td>\n      <td>$158.91</td>\n      <td>77,906,200</td>\n      <td>$162.13</td>\n      <td>$162.56</td>\n      <td>$157.72</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>08/29/2022</td>\n      <td>$161.38</td>\n      <td>73,313,950</td>\n      <td>$161.145</td>\n      <td>$162.9</td>\n      <td>$159.82</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>08/26/2022</td>\n      <td>$163.62</td>\n      <td>78,960,980</td>\n      <td>$170.57</td>\n      <td>$171.05</td>\n      <td>$163.56</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>248</th>\n      <td>09/08/2021</td>\n      <td>$155.11</td>\n      <td>74,420,210</td>\n      <td>$156.98</td>\n      <td>$157.04</td>\n      <td>$153.975</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>09/07/2021</td>\n      <td>$156.69</td>\n      <td>82,278,260</td>\n      <td>$154.97</td>\n      <td>$157.26</td>\n      <td>$154.39</td>\n    </tr>\n    <tr>\n      <th>250</th>\n      <td>09/03/2021</td>\n      <td>$154.3</td>\n      <td>57,866,070</td>\n      <td>$153.76</td>\n      <td>$154.63</td>\n      <td>$153.09</td>\n    </tr>\n    <tr>\n      <th>251</th>\n      <td>09/02/2021</td>\n      <td>$153.65</td>\n      <td>71,171,320</td>\n      <td>$153.87</td>\n      <td>$154.72</td>\n      <td>$152.4</td>\n    </tr>\n    <tr>\n      <th>252</th>\n      <td>09/01/2021</td>\n      <td>$152.51</td>\n      <td>80,313,710</td>\n      <td>$152.83</td>\n      <td>$154.98</td>\n      <td>$152.34</td>\n    </tr>\n  </tbody>\n</table>\n<p>253 rows \u00c3\u2014 6 columns</p>\n</div>\n\n\n\n## Get Stocks Financal Data\nCall nasdaq_financals and pass in a frequency you desire \n1. Annual\n2. Semi Annual\n\n\n```python\nmy_ng.nasdaq_financals('AAPL', 1)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>tabs.incomeStatementTable</th>\n      <th>tabs.balanceSheetTable</th>\n      <th>tabs.cashFlowTable</th>\n      <th>tabs.financialRatiosTable</th>\n      <th>incomeStatementTable.headers.value1</th>\n      <th>incomeStatementTable.headers.value2</th>\n      <th>incomeStatementTable.headers.value3</th>\n      <th>incomeStatementTable.headers.value4</th>\n      <th>incomeStatementTable.headers.value5</th>\n      <th>...</th>\n      <th>cashFlowTable.headers.value3</th>\n      <th>cashFlowTable.headers.value4</th>\n      <th>cashFlowTable.headers.value5</th>\n      <th>cashFlowTable.rows</th>\n      <th>financialRatiosTable.headers.value1</th>\n      <th>financialRatiosTable.headers.value2</th>\n      <th>financialRatiosTable.headers.value3</th>\n      <th>financialRatiosTable.headers.value4</th>\n      <th>financialRatiosTable.headers.value5</th>\n      <th>financialRatiosTable.rows</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAPL</td>\n      <td>Income Statement</td>\n      <td>Balance Sheet</td>\n      <td>Cash Flow</td>\n      <td>Financial Ratios</td>\n      <td>Period Ending:</td>\n      <td>9/25/2021</td>\n      <td>9/26/2020</td>\n      <td>9/28/2019</td>\n      <td>9/29/2018</td>\n      <td>...</td>\n      <td>9/26/2020</td>\n      <td>9/28/2019</td>\n      <td>9/29/2018</td>\n      <td>[{'value1': 'Net Income', 'value2': '$94,680,0...</td>\n      <td>Period Ending:</td>\n      <td>9/25/2021</td>\n      <td>9/26/2020</td>\n      <td>9/28/2019</td>\n      <td>9/29/2018</td>\n      <td>[{'value1': 'Liquidity Ratios', 'value2': '', ...</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows \u00c3\u2014 29 columns</p>\n</div>\n\n\n\n## Get Other Data\n\nCalling the nasdaq_data function and supplying type to any of the numbers below will get you \n\n1. Analyst Target Price and Ratings\n2. PEG Ratio\n3. Momentum Estimate\n4. Earnings Forecast\n5. Earnings Surprise\n6. EPS\n\n\n```python\n#analysts ratings\nmy_ng.nasdaq_data('AAPL',1)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>historicalConsensus</th>\n      <th>consensusOverview.lowPriceTarget</th>\n      <th>consensusOverview.highPriceTarget</th>\n      <th>consensusOverview.priceTarget</th>\n      <th>consensusOverview.buy</th>\n      <th>consensusOverview.sell</th>\n      <th>consensusOverview.hold</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>aapl</td>\n      <td>[{'z': {'buy': 19, 'hold': 5, 'sell': 0, 'date...</td>\n      <td>136.0</td>\n      <td>220.0</td>\n      <td>183.45</td>\n      <td>23</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n#PEG Ratio\nmy_ng.nasdaq_data('AAPL',2)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pegr.label</th>\n      <th>pegr.text</th>\n      <th>pegr.pegValue</th>\n      <th>per.peRatioChart</th>\n      <th>per.label</th>\n      <th>per.text</th>\n      <th>per.dataProvider</th>\n      <th>gr.peGrowthChart</th>\n      <th>gr.title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Forecast 12 Month Forward PEG Ratio</td>\n      <td>Investors are always looking for companies wit...</td>\n      <td>1.95</td>\n      <td>[{'x': '2021 Actual', 'y': 26.81}, {'x': '2022...</td>\n      <td>Price/Earnings Ratio</td>\n      <td>Price/Earnings Ratio is a widely used stock ev...</td>\n      <td>&lt;b&gt;Data Provider:&lt;/b&gt; Zacks Investment Research</td>\n      <td>[{'z': 'Growth', 'x': '2022', 'y': 8.8}, {'z':...</td>\n      <td>Forecast P/E Growth Rates</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Aidzillafont/nasdaq_app",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "nasdaq-data",
            "package_url": "https://pypi.org/project/nasdaq-data/",
            "platform": null,
            "project_url": "https://pypi.org/project/nasdaq-data/",
            "project_urls": {
                "Homepage": "https://github.com/Aidzillafont/nasdaq_app"
            },
            "release_url": "https://pypi.org/project/nasdaq-data/0.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "A handy tool to get nasdaq data in python",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15205505,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "eb41fdad5fd9ba53eb8cf9f2b1e6af42",
                    "sha256": "bad6bac57b1953e89df4475779544af876c5250457106a2bf5d543b999ba2ff8"
                },
                "downloads": -1,
                "filename": "nasdaq_data-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "eb41fdad5fd9ba53eb8cf9f2b1e6af42",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 5721,
                "upload_time": "2022-09-25T15:36:41",
                "upload_time_iso_8601": "2022-09-25T15:36:41.265012Z",
                "url": "https://files.pythonhosted.org/packages/b5/dd/e57de73ef72376c3b752d13f8008d5a3573ddf420285d61d0fdd6f2ba5e1/nasdaq_data-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9e96b00f84bfa04af732f143e36b295f",
                    "sha256": "6d337c3771475c809dffb00d890a22c0bfa64b89a5b7de62b353293acceb2392"
                },
                "downloads": -1,
                "filename": "nasdaq_data-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "9e96b00f84bfa04af732f143e36b295f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 5680,
                "upload_time": "2022-09-25T15:36:43",
                "upload_time_iso_8601": "2022-09-25T15:36:43.518747Z",
                "url": "https://files.pythonhosted.org/packages/17/73/fb8b9be23b6196770c493a0f08cbac91d6253ad711fa2aee2490e3da00e5/nasdaq_data-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}