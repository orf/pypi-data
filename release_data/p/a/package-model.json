{
    "0.3": {
        "info": {
            "author": "Lorenzo Marini",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8"
            ],
            "description": "# package_model\n\nIstruzioni per creare un modulo Python e condividerlo con *pip install [package_model]*.\n\n(fonte utilizzata: https://www.youtube.com/watch?v=FkmtmYFTlYE)\n\n# 1) Creazione di un pacchetto python e installazione locale \n\nCreare la seguente struttura ad albero:\n\n```\npackage_model/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 package_model\n\u2502   \u251c\u2500\u2500 example.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 setup.py\n```\n\nIl file *setup.py* sar\u00e0 il file che Pip andr\u00e0 a leggere quando eseguiremo l'istallazione del pacchetto e contiene le seguenti istruzioni:\n\n```\nfrom setuptools import setup\n\nsetup(name='package_model',\n      version=0.1,\n      description='Compute the square of a number',\n      author='Lorenzo Marini',\n      packages=['package_model'],\n      zip_safe=False)\n\n```\n\nPassiamo adesso al file *__init__.py*. Al suo interno scriviamo:\n\n```\nfrom .example import quadrato\n```\n\nIn questo modo, saremo ingrado di importale le singole funzioni (in questo caso solo una: 'quadrato') del nostro modulo *exmaple.py*\n\nAdesso, siamo pronti per installare il nostro pacchetto localmente sul nostro computer.\nPer fare ci\u00f2, dobbiamo semplicemente lanciare il seguente comando:\n\n```\npip install .\n```\n\nNB: da lanciare dalla cartella principale del pacchetto (in cui \u00e8 presente il file *setup.py*).\n\nVediamo l'output:\n```\nlorenzomarini@lorenzomarini-MacBookPro:~/Desktop/package_model$ pip install .\nDefaulting to user installation because normal site-packages is not writeable\nProcessing /home/lorenzomarini/Desktop/package_model\n  Preparing metadata (setup.py) ... done\nBuilding wheels for collected packages: package-model\n  Building wheel for package-model (setup.py) ... done\n  Created wheel for package-model: filename=package_model-0.1-py3-none-any.whl size=13830 sha256=c136a22a940ad2fb620893b33d8773964c62772ca34fbe40bdbf5bc3b2c47548\n  Stored in directory: /tmp/pip-ephem-wheel-cache-p3gp0w1j/wheels/d6/1a/c0/6e22efdbc48c105b11d87f65f2062245a1a801b8b91f0c5711\nSuccessfully built package-model\nInstalling collected packages: package-model\nSuccessfully installed package-model-0.1\n```\nAbbiamo installato il nostro package sul nostro computer!\n\nPer essere sicuri che tale pacchetto sia installato e salvato tra i vari pacchetti, diamo il comnado:\n\n```\npip list\n```\ne verifica che *package_model* sia all'interno della lista.\n\n# 2) Caricamento del pacchetto sul repositorio PyPi\n\nOra comincia la parte pi\u00f9 eccitante...\nSiamo pronti per caricare il nostro package nel repositorio di **PyPi**\n\nNB: ci sono 2 repositori di nostro interesse.\n\nEssi sono:\n- **PyPi** per il testing (https://test.pypi.org/manage/projects/)\n- il repositorio **PyPi** regolare (https://pypi.org/manage/projects/)\n\nAttenzione: i due repositorio non sono la stessa cosa. Ciascuno ha il proprio account\n\nPer caricare il pacchetto, dobbiamo prima altri file: **licence.txt**, **setup.cfg** e **README.md**.\n\nQuesti tre file addizionali sono necessari per poter caricare il nostro pacchetto su PyPi.\n\nIl file fondamentale \u00e8 **setup.cfg** e al suo interno vanno scritti i metadati che il pacchetto sta utilizzando.\n\n```\n[metadata]\ndescription-file = README.md\n```\n\nAdesso, scriviamo qualcosa dentro **licence.txt**. Potremmo copiare semplicemente quanto scritto nella licenza generata automaticamente da GitHub al momento della creazione del repositorio.\n\nFinalmente, siamo pronti per caricare il nostro pacchetto nel repositorio di PyPi.\n\nDobbaimo prima creare un *single model TAR file*. Per fare ci\u00f2, utilizziamo il file **setup.py** con il comando sdist.\nLa struttura ad albero che abbiamo ottenuto \u00e8 la seguente:\n\n```\npackage_model/\n\u251c\u2500\u2500 build\n\u2502   \u251c\u2500\u2500 bdist.linux-x86_64\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u2514\u2500\u2500 package_model\n\u2502           \u251c\u2500\u2500 example.py\n\u2502           \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 package_model\n\u2502   \u251c\u2500\u2500 example.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 licence.txt\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 package_model.egg-info\n\u2502   \u251c\u2500\u2500 dependency_links.txt\n\u2502   \u251c\u2500\u2500 not-zip-safe\n\u2502   \u251c\u2500\u2500 PKG-INFO\n\u2502   \u251c\u2500\u2500 SOURCES.txt\n\u2502   \u2514\u2500\u2500 top_level.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 setup.py\n```\n\nQuindi, digitiamo il seguente comando per creare il file TAR:\n\n```\npython3 setup.py sdist\n```\n\nVediamo la nuova struttura ad albero:\n\n```\npackage_model/\n\u251c\u2500\u2500 build\n\u2502   \u251c\u2500\u2500 bdist.linux-x86_64\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u2514\u2500\u2500 package_model\n\u2502           \u251c\u2500\u2500 example.py\n\u2502           \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 dist\n\u2502   \u2514\u2500\u2500 package_model-0.1.tar.gz\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 package_model\n\u2502   \u251c\u2500\u2500 example.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 licence.txt\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 package_model.egg-info\n\u2502   \u251c\u2500\u2500 dependency_links.txt\n\u2502   \u251c\u2500\u2500 not-zip-safe\n\u2502   \u251c\u2500\u2500 PKG-INFO\n\u2502   \u251c\u2500\u2500 SOURCES.txt\n\u2502   \u2514\u2500\u2500 top_level.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 setup.py\n```\n\nAdesso apriamo la cartella **dist** e qui abbiamo tutto il necessario preparato per caricare il nostro pacchetto sul repositorio di PyPi.\n\n# 3) Pubblicazione del pacchetto\n\nATTENZIONE: test.pypi.org \u00e8 diverso dal regolere repositorio PyPi.\n\nPer prima cosa, carichiamo il pacchetto nel repositorio di test di PyPi. E una volta che siamo sicuri che il nostro test ha avuto successo, carichiamo il pacchetto sul repositorio di PyPi, in modo da condividerlo con tutti gli altri. In questo modo, ognuno potr\u00e0 installare il nostro pacchetto semplicemente digitando  ```pip install [il_nostro_pacchetto```.\n\nPer fare tutto ci\u00f2, \u00e8 prima necessario installare un pacchetto che ci aiuti per fare tutto ci\u00f2, ovvero **twine**:\n```pip install twine```.\n\nUna volta installato, carichiamo il nostro pacchetto su test.pypi.org digitando il comando:\n\n```\ntwine upload --repository-url http://test.pypi.org/legacy/ dist/*\n```\nCi chieder\u00e0 le credenziali di login.\n\nL'output del comnado sar\u00e0:\n\n```\nEnter your username: lorenzomarini96\nEnter your password: \nUploading package_model-0.1.tar.gz\n100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 17.8/17.8 kB \u2022 00:00 \u2022 12.7 MB/s\n\nView at:\nhttps://test.pypi.org/project/package-model/0.1/\n```\n\nControlliamo se il pacchetto \u00e8 stato caricato su Test.PyPi, inserendo il link generato dal comando precedente su Terminale.\n\nInseriamo su Terminale il comando creato per installare il nostro pacchetto dal reposotorio di test:\npip install -i https://test.pypi.org/simple/ package-model==0.1.\n\nAdesso siamo pronti per fare lo stesso sul repositorio regolare di PyPi. Prima di tutti, disinstalliamo il nostro pacchetto (in modo da poterlo ri-installare in seguito):\n\n```\npip uninstall package_model\n```\nCarichiamo il contenuto della cartella dist per mezzo del comando seguente:\n\n```twine upload dist/*```\n\nCome prima, inseriamo le credenziali di login (di PyPi, non Test.PyPi!), ottenendo l'output seguente:\n\n```\nUploading distributions to https://upload.pypi.org/legacy/\nEnter your username: lorenzomarini96\nEnter your password: \nUploading package_model-0.1.tar.gz\n100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 17.8/17.8 kB \u2022 00:00 \u2022 13.8 MB/s\n\nView at:\nhttps://pypi.org/project/package-model/0.1/\n```\n\nCopiamo e incolliamo il link creato e andiamo a guardare il nostro pacchetto caricato su PyPi. Il nostro pacchetto \u00e8 finalmente disponibile a tutto il mondo!\nTutti possono scaricarlo e utilizzarlo semplicemente digitando ```pip install [il_nostro_pacchetto]```.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "package-model",
            "package_url": "https://pypi.org/project/package-model/",
            "platform": null,
            "project_url": "https://pypi.org/project/package-model/",
            "project_urls": {
                "Documentation": "https://github.com/lorenzomarini96/package_model",
                "GitHub": "https://github.com/lorenzomarini96/package_model"
            },
            "release_url": "https://pypi.org/project/package-model/0.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Compute the square of a number",
            "version": "0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15213484,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fb0baca8333c2ee35bb368e5c6ac577e",
                    "sha256": "c7457e9c3f4b5d435222476756a5d23f3ce4892555515bcd8ea72652b29aaf23"
                },
                "downloads": -1,
                "filename": "package_model-0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "fb0baca8333c2ee35bb368e5c6ac577e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16438,
                "upload_time": "2022-09-26T10:29:02",
                "upload_time_iso_8601": "2022-09-26T10:29:02.751680Z",
                "url": "https://files.pythonhosted.org/packages/b8/c3/9135aa24d1a4fe8fde5dc39018dd693b0114673b3c386c7b6c4405362826/package_model-0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}