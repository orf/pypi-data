{
    "0.1.0": {
        "info": {
            "author": "Jonas Kittner",
            "author_email": "theendlessriver13@users.noreply.github.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: Implementation :: CPython"
            ],
            "description": "[![ci](https://github.com/theendlessriver13/meteo-qc/actions/workflows/ci.yaml/badge.svg)](https://github.com/theendlessriver13/meteo-qc/actions/workflows/ci.yaml)\n[![docs](https://github.com/theendlessriver13/meteo-qc/actions/workflows/docs.yaml/badge.svg)](https://github.com/theendlessriver13/meteo-qc/actions/workflows/docs.yaml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/theendlessriver13/meteo-qc/main.svg)](https://results.pre-commit.ci/latest/github/theendlessriver13/meteo-qc/main)\n\n# meteo-qc\n\n`meteo_qc` is a customizable framework for applying quality checks to meteorological\ndata. The framework can be easily extended by registering custom functions/plugins.\n\n## Installation\n\nTo install **meteo-qc**, open an interactive shell and run\n\n```console\npip install meteo-qc\n```\n\n## Getting started\n\nCheck out the [Documentation](https://theendlessriver13.github.io/meteo-qc) for\ndetailed information.\n\nApply the quality control to this csv data called `test_data.csv`:\n\n```\ndate,temp,pressure_reduced\n2022-01-01 10:00:00,1,600\n2022-01-01 10:10:00,2,1024\n2022-01-01 10:20:00,3,1024\n2022-01-01 10:30:00,4,1090\n2022-01-01 10:50:00,4,\n2022-01-01 11:00:00,,1024\n2022-01-01 11:10:00,2,1024\n2022-01-01 11:20:00,3,1024\n2022-01-01 11:30:00,4,1090\n2022-01-01 11:40:00,4,1090\n```\n\n1. Read in the data as a `pd.DataFrame`.\n1. Create a [`meteo_qc.ColumnMapping`](https://theendlessriver13.github.io/meteo-qc/meteo_qc.html#meteo_qc.ColumnMapping)\n   object and use the column names as keys to use the method `add_group` to add\n   the column to the group\n   ([`temperature`](https://theendlessriver13.github.io/meteo-qc/groups.html#temperature)\n   or [`pressure`](https://theendlessriver13.github.io/meteo-qc/groups.html#pressure)).\n   This can be an existing group or a new group.\n1. Call [`meteo_qc.apply_qc`](https://theendlessriver13.github.io/meteo-qc/meteo_qc.html#meteo_qc.apply_qc)\n   to apply the control to the DataFrame `data` using the `column_mapping` as a\n   definition for the checks to be applied.\n\n```python\nimport pandas as pd\nimport meteo_qc\n\n# read in the data\ndata = pd.read_csv('test_data.csv', index_col=0, parse_dates=True)\n\n# map the columns to groups\ncolumn_mapping = meteo_qc.ColumnMapping()\ncolumn_mapping['temp'].add_group('temperature')\ncolumn_mapping['pressure_reduced'].add_group('pressure')\n\n# apply the quality control\nresult = meteo_qc.apply_qc(df=data, column_mapping=column_mapping)\nprint(result)\n```\n\nThis will result in this object which can be used to display the result in a\nnice way e.g. using an `html` template to render it.\n\n```python\n{\n    'columns': defaultdict(<function apply_qc.<locals>.<lambda> at 0x7f9b0edd5480>, {\n        'temp': {\n            'results': {\n                'missing_timestamps': Result(\n                    function='missing_timestamps',\n                    passed=False,\n                    msg='missing 1 timestamps (assumed frequency: 10T)',\n                    data=None,\n                ),\n                'null_values': Result(\n                    function='null_values',\n                    passed=False,\n                    msg='found 1 values that are null',\n                    data=[[16410348000000, None, True]],\n                ),\n                'range_check': Result(\n                    function='range_check',\n                    passed=True,\n                    msg=None,\n                    data=None,\n                ),\n                'spike_dip_check': Result(\n                    function='spike_dip_check',\n                    passed=True,\n                    msg=None,\n                    data=None,\n                ),\n                'persistence_check': Result(\n                    function='persistence_check',\n                    passed=True,\n                    msg=None,\n                    data=None,\n                )\n            },\n            'passed': False,\n        },\n        'pressure_reduced': {\n            'results': {\n                'missing_timestamps': Result(\n                    function='missing_timestamps',\n                    passed=False,\n                    msg='missing 1 timestamps (assumed frequency: 10T)',\n                    data=None,\n                ),\n                'null_values': Result(\n                    function='null_values',\n                    passed=False,\n                    msg='found 1 values that are null',\n                    data=[[16410342000000, None, True]],\n                ),\n                'range_check': Result(\n                    function='range_check',\n                    passed=False,\n                    msg='out of allowed range of [860 - 1055]',\n                    data=[[16410312000000, 600.0, True], [16410330000000, 1090.0, True], [16410366000000, 1090.0, True], [16410372000000, 1090.0, True]],\n                ),\n                'spike_dip_check': Result(\n                    function='spike_dip_check',\n                    passed=False,\n                    msg='spikes or dips detected. Exceeded allowed delta of 0.3 / min',\n                    data=[[16410318000000, 1024.0, True], [16410330000000, 1090.0, True], [16410342000000, None, True], [16410366000000, 1090.0, True]],\n                ),\n                'persistence_check': Result(\n                    function='persistence_check',\n                    passed=True,\n                    msg=None,\n                    data=None,\n                )\n            },\n            'passed': False\n        }\n    }),\n    'passed': False,\n    'data_start_date': 16410312000000,\n    'data_end_date': 16410372000000,\n}\n```\n\nIt is also possible to write and register your own functions if they are not\nalready in the predefined [Groups](https://theendlessriver13.github.io/meteo-qc/groups.html).\nPlease check out the [Docs](https://theendlessriver13.github.io/meteo-qc) for\nmore information.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/theendlessriver13/meteo-qc",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "meteo-qc",
            "package_url": "https://pypi.org/project/meteo-qc/",
            "platform": null,
            "project_url": "https://pypi.org/project/meteo-qc/",
            "project_urls": {
                "Homepage": "https://github.com/theendlessriver13/meteo-qc"
            },
            "release_url": "https://pypi.org/project/meteo-qc/0.1.0/",
            "requires_dist": [
                "pandas"
            ],
            "requires_python": ">=3.8",
            "summary": "quality control meteorological data in a pandas.DataFrame",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15933580,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "27c06e565f271caf7ff55728fd909f83",
                    "sha256": "cdd06e40ea2e9df667c7c1d1817f31736cb7796a418fdf52bcc7ff2f9a73a374"
                },
                "downloads": -1,
                "filename": "meteo_qc-0.1.0-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "27c06e565f271caf7ff55728fd909f83",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">=3.8",
                "size": 11753,
                "upload_time": "2022-11-29T21:56:35",
                "upload_time_iso_8601": "2022-11-29T21:56:35.517691Z",
                "url": "https://files.pythonhosted.org/packages/ee/9b/f9e090dfae3285b8fae3622cf1fc5e1382ecec629f0fad6b6c1c22de9faa/meteo_qc-0.1.0-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "882c3f478d000b3233f2a70bff972b06",
                    "sha256": "43a12a0f32633c3f0f5f76997afa62d5a5e3bd42238d2da8e5f94560829a402a"
                },
                "downloads": -1,
                "filename": "meteo_qc-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "882c3f478d000b3233f2a70bff972b06",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 10878,
                "upload_time": "2022-11-29T21:56:38",
                "upload_time_iso_8601": "2022-11-29T21:56:38.047558Z",
                "url": "https://files.pythonhosted.org/packages/f5/7b/f7ac5846ad035abaa84cb98c301ef56fc22c21632741a7b829aafebb9110/meteo_qc-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}