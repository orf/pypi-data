{
    "0.0.4": {
        "info": {
            "author": "",
            "author_email": "Jackson Walters <jacksonwalters@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "#pygame virtual keyboard which assigns a prime number, light frequency, and sound frequency\n#to keys. it mixes the light frequencies to corresponding RGB colors, mixes\n#the pure tones to sounds, and multiplies the primes to get unique numbers.\n\nThis code assigns a color and sound to a range of positive integers in a natural\nway.\n\nInput: n\n\n1) Factor n into a product of primes n = p_1^s_1 * ... * p_r ^s_r\n\n2) Map every prime to a wavelength into the visible range which is roughly 380nm (800Thz, violet) - 700nm (400Thz, red). Use f_red*(f_violet/f_red)^((i-1)/(num_keys-1)) in analogy to the keyboard mapping of sound frequencies 440Hz*2^((i-49)/12).\n\n3) For example, the number 197 is p_45. Its light frequency is 492 THz ->  608nm wavelength, so red. 563 is p_103, so 649 THz -> 462nm, so blue. Combining them we get the number 110911 which has a bright purple color. \n\n4) To convert this spectrum to the appropriate color of light we use the CIE color matching functions (https://www.cs.rit.edu/~ncs/color/t_spectr.html). This can be implemented in almost any language. (https://mathematica.stackexchange.com/questions/57389/convert-spectral-distribution-to-rgb-color/57457#57457).\n\nOutput: An RBG color specification.\n\nA similar method can be used for sound, in which case we just scale into the audible range of 20Hz - 20kHz. We then need to mix the tones to get a sound using a synthesizer package, in this case tones.\n\nImportantly, *spectra* of colors and sounds combine additively. Combining natural numbers via multiplication is straightforward.\n\nThis could be used to make a *keyboard whose keys are appropriately colored and labeled by prime numbers.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "synesthesiaer",
            "package_url": "https://pypi.org/project/synesthesiaer/",
            "platform": null,
            "project_url": "https://pypi.org/project/synesthesiaer/",
            "project_urls": {
                "Bug Tracker": "https://github.com/pypa/synesthesiaer/issues",
                "Homepage": "https://github.com/jacksonwalters/synesthesiaer"
            },
            "release_url": "https://pypi.org/project/synesthesiaer/0.0.4/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Assigns light and sound frequencies to prime numbers and mixes them using pygame.",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16027063,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a853cf40ff23b4d0aa9bb599ec416995",
                    "sha256": "2613b085a0dc5ef5bdcb0daaa78f295a8754e43be208b1c547e0b72f32a186b9"
                },
                "downloads": -1,
                "filename": "synesthesiaer-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a853cf40ff23b4d0aa9bb599ec416995",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 5908,
                "upload_time": "2022-12-08T00:08:27",
                "upload_time_iso_8601": "2022-12-08T00:08:27.292354Z",
                "url": "https://files.pythonhosted.org/packages/dd/5f/92e3d07d7a590070bd98b5fd34734f0191da5499cb6a20f715f7416f943b/synesthesiaer-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c6d2ff2432acaa493750cb2ac37c0815",
                    "sha256": "7ae7b83ee954320a4e33e6b2edf6f04d366bf806a3b18cbde504f9a66ffc7e2f"
                },
                "downloads": -1,
                "filename": "synesthesiaer-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "c6d2ff2432acaa493750cb2ac37c0815",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 5221,
                "upload_time": "2022-12-08T00:08:29",
                "upload_time_iso_8601": "2022-12-08T00:08:29.568029Z",
                "url": "https://files.pythonhosted.org/packages/30/15/294902b8a83dd9cf77a93795f2fe8e55afafebfa7468cd49696b3bfd3cfd/synesthesiaer-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}