{
    "0.1.0": {
        "info": {
            "author": "Leopold Talirz, Daniele Ongari",
            "author_email": "leopold.talirz@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ltalirz/aiida-qeq",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiida-qeq",
            "package_url": "https://pypi.org/project/aiida-qeq/",
            "platform": "",
            "project_url": "https://pypi.org/project/aiida-qeq/",
            "project_urls": {
                "Homepage": "https://github.com/ltalirz/aiida-qeq"
            },
            "release_url": "https://pypi.org/project/aiida-qeq/0.1.0/",
            "requires_dist": [
                "aiida-core (<1.0.0,>=0.12.2)",
                "six",
                "sphinx ; extra == 'docs'",
                "pre-commit (==1.11.0) ; extra == 'pre-commit'",
                "yapf (==0.24.0) ; extra == 'pre-commit'",
                "prospector (==0.12.11) ; extra == 'pre-commit'",
                "pylint (==1.9.3) ; extra == 'pre-commit'",
                "mock (==2.0.0) ; extra == 'testing'",
                "pgtest (==1.1.0) ; extra == 'testing'",
                "sqlalchemy-diff (==0.1.3) ; extra == 'testing'",
                "wheel (>=0.31) ; extra == 'testing'",
                "coverage ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8867048,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2ab473f78c483f9b6af019960f9c0e64",
                    "sha256": "f47d1ec4e7caed049b81269473da2a945d71ada7c72920e78b8a37fe1822f73b"
                },
                "downloads": -1,
                "filename": "aiida_qeq-0.1.0-py2-none-any.whl",
                "has_sig": false,
                "md5_digest": "2ab473f78c483f9b6af019960f9c0e64",
                "packagetype": "bdist_wheel",
                "python_version": "py2",
                "requires_python": null,
                "size": 19564,
                "upload_time": "2018-11-21T19:17:54",
                "upload_time_iso_8601": "2018-11-21T19:17:54.120811Z",
                "url": "https://files.pythonhosted.org/packages/e9/18/45d5b42dafab82eabb7c9f922d395f13337fffe0f836c0e2c937230662bb/aiida_qeq-0.1.0-py2-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e3428993d6c5025cbec489d21b39ddc8",
                    "sha256": "8e9b3703122cf77f3df62e14f30eeb625d642f31fff228173ef936cdf55fad6d"
                },
                "downloads": -1,
                "filename": "aiida-qeq-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e3428993d6c5025cbec489d21b39ddc8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10985,
                "upload_time": "2018-11-21T19:17:56",
                "upload_time_iso_8601": "2018-11-21T19:17:56.586602Z",
                "url": "https://files.pythonhosted.org/packages/ed/1f/8457e68ecee5faae1b0f4d1cfae68e09dc7743d05d647dd88187c41e659e/aiida-qeq-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0a1": {
        "info": {
            "author": "Leopold Talirz, Daniele Ongari",
            "author_email": "leopold.talirz@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Framework :: AiiDA",
                "Programming Language :: Python"
            ],
            "description": "[![Build Status](https://travis-ci.org/ltalirz/aiida-qeq.svg?branch=master)](https://travis-ci.org/ltalirz/aiida-qeq)\n[![Coverage Status](https://coveralls.io/repos/github/ltalirz/aiida-qeq/badge.svg?branch=master)](https://coveralls.io/github/ltalirz/aiida-qeq?branch=master)\n[![Docs status](https://readthedocs.org/projects/aiida-qeq/badge)](http://aiida-qeq.readthedocs.io/)\n[![PyPI version](https://badge.fury.io/py/aiida-qeq.svg)](https://badge.fury.io/py/aiida-qeq)\n\n# aiida-qeq\n\nAiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).\n\nTemplated using the [AiiDA plugin cutter](https://github.com/aiidateam/aiida-plugin-cutter).\n\n## Features\n\n### QeQ charges\n * Add input structure in CIF format\n  ```python\n  CifData = DataFactory('cif')\n  inputs['structure'] = CifData(file='/path/to/file')\n  ```\n\n * Add parameters for electronegativity and Idempotential data of the elements.\n  ```python\n  SinglefileData = DataFactory('singlefile')\n  inputs['parameters'] = SinglefileData(file='/path/to/file')\n  ```\n\n * (optional) Specify `configure.input` options using a python dictionary and `QeqParameters`\n  ```python\n  QeqParameters = DataFactory('qeq.qeq')\n  inputs['configure'] = QeqParameters(dict={'save_grid': [True, 'grid.cube']})\n  ```\n\n * `QeqParameters` validates the command line options using [voluptuous](https://github.com/alecthomas/voluptuous).\n  ```python\n  QeqParameters = DataFactory('qeq.qeq')\n  print(QeqParameters.schema)  # shows supported options\n  ```\n\n### EQeQ charges\n * Add input structure in CIF format\n  ```python\n  CifData = DataFactory('cif')\n  inputs['structure'] = CifData(file='/path/to/file')\n  ```\n\n * Add parameters for ionization data of the elements.\n  ```python\n  SinglefileData = DataFactory('singlefile')\n  inputs['ionization_data'] = SinglefileData(file='/path/to/file')\n  ```\n\n * Add parameters for common oxidation states of the elements.\n  ```python\n  SinglefileData = DataFactory('singlefile')\n  inputs['charge_data'] = SinglefileData(file='/path/to/file')\n  ```\n\n * Specify command line options using a python dictionary and `EQeqParameters`\n  ```python\n  EQeqParameters = DataFactory('qeq.eqeq')\n  inputs['parameters'] = EQeqParameters(dict={'method': 'ewald'})\n  ```\n\n * `EQeqParameters` validates the command line options using [voluptuous](https://github.com/alecthomas/voluptuous).\n  ```python\n  QeqParameters = DataFactory('qeq.eqeq')\n  print(EQeqParameters.schema)  # show supported options\n  ```\n\n## Installation\n\n```shell\npip install aiida-qeq\nverdi quicksetup  # set up a new profile\nverdi calculation plugins  # should now show your calclulation plugins\n```\n\n## Usage\n\nHere goes a complete example of how to submit a test calculation using this plugin.\n\nA quick demo of how to submit a calculation:\n```shell\nverdi daemon start         # make sure the daemon is running\ncd examples\nverdi run submit_qeq.py    # submit qeq test calculation\nverdi run submit_eqeq.py   # submit eqeq test calculation\nverdi process list -a  # check status of calculation\n```\n\n## Development\n\n```shell\ngit clone https://github.com/ltalirz/aiida-qeq .\ncd aiida-qeq\npip install -e .[pre-commit,testing]\npre-commit install  # enable pre-commit hooks\npytest              # run unit tests\n```\n\n## License\n\nMIT\n\n\n## Contact\n\nleopold.talirz@gmail.com\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ltalirz/aiida-qeq",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiida-qeq",
            "package_url": "https://pypi.org/project/aiida-qeq/",
            "platform": "",
            "project_url": "https://pypi.org/project/aiida-qeq/",
            "project_urls": {
                "Homepage": "https://github.com/ltalirz/aiida-qeq"
            },
            "release_url": "https://pypi.org/project/aiida-qeq/1.0.0a1/",
            "requires_dist": [
                "aiida-core (<2.0.0,>=1.0.0b1)",
                "six",
                "voluptuous",
                "sphinx ; extra == 'docs'",
                "pre-commit (==1.11.0) ; extra == 'pre-commit'",
                "yapf (==0.26.0) ; extra == 'pre-commit'",
                "prospector (==0.12.11) ; extra == 'pre-commit'",
                "pylint (==1.9.3) ; extra == 'pre-commit'",
                "pgtest (==1.2.0) ; extra == 'testing'",
                "pytest (<5.0.0,>=4.4) ; extra == 'testing'",
                "pytest-cov (<3.0.0,>=2.6.1) ; extra == 'testing'",
                "coverage ; extra == 'testing'"
            ],
            "requires_python": "",
            "summary": "AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",
            "version": "1.0.0a1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8867048,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ee3ca97615b2a24d702213b57954f9f2",
                    "sha256": "91c0fad2548482a23e426ddfb09ffc30161969fa041effbb480e9011e03d58d3"
                },
                "downloads": -1,
                "filename": "aiida_qeq-1.0.0a1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ee3ca97615b2a24d702213b57954f9f2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 16811,
                "upload_time": "2019-04-10T21:58:26",
                "upload_time_iso_8601": "2019-04-10T21:58:26.654587Z",
                "url": "https://files.pythonhosted.org/packages/e8/88/dd42b7bd133dfda6690f9e9c2635f1cae17168a2451f3840488934d17fc1/aiida_qeq-1.0.0a1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1ebbf4c7b331597a57f34f6aab272773",
                    "sha256": "e42dd635350d33f91ec604650a13ad1d2e47a07dd3ad46a6f8181cbb63ee5998"
                },
                "downloads": -1,
                "filename": "aiida-qeq-1.0.0a1.tar.gz",
                "has_sig": false,
                "md5_digest": "1ebbf4c7b331597a57f34f6aab272773",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 9388,
                "upload_time": "2019-04-10T21:58:27",
                "upload_time_iso_8601": "2019-04-10T21:58:27.950711Z",
                "url": "https://files.pythonhosted.org/packages/ce/87/6c4b293a441c8c82292b5e6436e1fa0771a5bd4a9a50c1cf12a5f4596a03/aiida-qeq-1.0.0a1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}