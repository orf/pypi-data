{
    "1.0.0": {
        "info": {
            "author": "Erki Suurjaak",
            "author_email": "erki@lap.ee",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 2.7",
                "Programming Language :: Python :: 3",
                "Topic :: Database",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "dblite\n======\n\nSimple query interface to SQL databases.\n\nSupports SQLite and Postgres.\n\n- Usage\n- Queries\n  - Name quoting\n- Adapters and converters\n- SQLite\n- Postgres\n- API\n- Dependencies\n\n\nUsage\n-----\n\n```python\nimport dblite\n\ndblite.init(\":memory:\")  # Open SQLite in-memory database\ndblite.executescript(\"CREATE TABLE test (id INTEGER PRIMARY KEY, val TEXT)\")\ndblite.insert(\"test\", val=None)\nfor i in range(5):\n    dblite.insert(\"test\", {\"val\": i})\ndblite.fetchone(\"test\", id=1)  # Queries return dictionaries\ndblite.fetchall(\"test\", order=\"val\", limit=3)\ndblite.update(\"test\", {\"val\": None}, val=2)\ndblite.fetchall(\"test\", val=(\"IN\", range(3)))\ndblite.delete(\"test\", id=5)\ndblite.executescript(\"DROP TABLE test\")\n```\n\n\nProvides a simple context manager for transactions:\n\n```python\n# dblite.init(\"sqlite path\" or {..postgres opts..})\nwith dblite.transaction() as tx:\n    tx.insert(\"test\", val=\"will be rolled back\")\n    tx.update(\"test\", {\"val\": \"will be rolled back\"}, id=0)\n    raise dblite.Rollback  # Rolls back uncommitted actions and exits block\n    tx.insert(\"test\", val=\"this will never be reached\")\nprint(\"continuing, Rollback does not propagate out of managed context\")\n\nwith dblite.transaction(commit=False) as tx:\n    tx.insert(\"test\", val=\"will be committed\")\n    tx.commit()  # Commits uncommitted actions\n    tx.insert(\"test\", val=\"will be rolled back\")\n    tx.rollback()  # Rolls back uncommitted actions\n    tx.insert(\"test\", val=\"will roll back automatically: no autocommit\")\n```\n\nQueries directly on the Database object use autocommit mode.\n\nDatabase instances are usable as context managers:\n\n```python\nwith dblite.init(\"my.sqlite\") as db:  # File will be closed on exiting block\n    db.executescript(\"CREATE TABLE test (id INTEGER PRIMARY KEY, val TEXT)\")\n    db.insert(\"test\", id=1, val=\"value\")\n```\n\nThe first Database instance created for engine is cached per engine,\nconsecutive `init()` calls with no connection options yield the cached instance.\n\n```python\n# Create default database for SQLite\ndblite.init(\":memory:\")\n# All module-level queries use the very first created\ndblite.fetchall(\"sqlite_master\")\n\n# Create default database for Postgres\ndblite.init(\"postgresql://user@localhost/mydb\")\n# All module-level queries use the very first created: SQLite\ndblite.fetchone(\"sqlite_master\")\n# Access the second default Database\ndblite.init(engine=\"postgres\").fetchall(\"information_schema.columns\")\n\n# Grab references to either\ndb1 = dblite.init(engine=\"sqlite\")\ndb2 = dblite.init(engine=\"postgres\")\n```\n\n\nQueries\n-------\n\nColumns to `SELECT` can be a string, or a sequence of strings:\n\n```python\n# Result: SELECT *\ndblite.fetchone(\"test\")\ndblite.fetchone(\"test\", \"*\")\n\n# Result: SELECT id\ndblite.fetchone(\"test\", \"id\")\ndblite.fetchone(\"test\", [\"id\"])\n\n# Result: SELECT id, val\ndblite.fetchone(\"test\", \"id, val\")\ndblite.fetchone(\"test\", [\"id\", \"val\"])\n\n# Can be arbitrary SQL expressions, invoking functions and assigning aliases\ndblite.fetchone(\"test\", \"COUNT(*) AS total\")\n```\n\n\nKeyword arguments are added to `WHERE` clause, or to `VALUES` clause for `INSERT`:\n\n```python\nmyid = dblite.insert(\"test\", val=\"lorem\")\ndblite.update(\"test\", {\"val\": \"lorem ipsum\"}, id=myid)\ndblite.fetchone(\"test\", id=myid)\ndblite.delete(\"test\", val=\"lorem ipsum\")\n```\n\n\n`WHERE` clause supports simple equality match, binary operators,\ncollection lookups (`\"IN\"`, `\"NOT IN\"`), raw SQL strings, or\narbitrary SQL expressions. Used SQL needs to be supported by the underlying engine.\n\n```python\ndblite.fetchall(\"test\", val=\"ciao\")\ndblite.fetchall(\"test\", where={\"id\": (\"<\", 10)})\ndblite.fetchall(\"test\", id=(\"IN\", list(range(5))))\ndblite.fetchall(\"test\", val=(\"!=\", None))\ndblite.fetchall(\"test\", val=(\"IS NOT\", None))\ndblite.fetchall(\"test\", val=(\"LIKE\", \"%a%\"))\ndblite.fetchall(\"test\", where=[(\"LENGTH(val)\", (\">\", 4))])\n\ndblite.fetchall(\"test\", where=[(\"EXPR\", (\"LENGTH(val) > ?\", [4]))])\ndblite.fetchall(\"test\", where=[(\"EXPR\", (\"val = ? OR id > ? or id < ?\", [0, 1, 2]))])\n```\n\n\n`WHERE` arguments are `AND`-ed together, `OR` needs subexpressions:\n\n```python\n# Result: WHERE (id < 1 OR id > 2) AND val = 3\ndblite.fetchall(\"test\", where=[(\"id < ? OR id > ?\", [1, 2]), (\"val\", 3)])\n```\n\n\nArgument for key-value parameters, like `WHERE` or `VALUES`,\ncan be a dict, or a sequence of key-value pairs:\n\n```python\n# Result: SET val = 'done' WHERE id = 1\ndblite.update(\"test\", values={\"val\": \"done\"}, where=[(\"id\", 1)])\n```\n\n\nArgument for sequence parameters, like `GROUP BY`, `ORDER BY`, or `LIMIT`,\ncan be an iterable sequence like list or tuple, or a single value.\n\n```python\n# Result: SELECT * FROM test GROUP BY val\ndblite.fetchall(\"test\", group=\"val\")\n# Result: SELECT * FROM test GROUP BY id, val\ndblite.fetchall(\"test\", group=\"id, val\")\ndblite.fetchall(\"test\", group=(\"id\", \"val\"))\n```\n\n```python\n# Result: SELECT * FROM test ORDER BY id\ndblite.fetchall(\"test\", order=\"id\")\ndblite.fetchall(\"test\", order=\"id ASC\")\ndblite.fetchall(\"test\", order=(\"id\", False))\n# Result: SELECT * FROM test ORDER BY id ASC val DESC\ndblite.fetchall(\"test\", order=\"id, val DESC\")\ndblite.fetchall(\"test\", order=[\"id\", (\"val\", True)])\ndblite.fetchall(\"test\", order=[(\"id\", False), (\"val\", True)])\ndblite.fetchall(\"test\", order=[(\"id\", \"ASC\"), (\"val\", \"DESC\")])\n```\n\n```python\n# Result: SELECT * FROM test LIMIT 2 OFFSET 0\ndblite.fetchall(\"test\", limit=2)\ndblite.fetchall(\"test\", limit=(2, 0))\ndblite.fetchall(\"test\", limit=(2, -1))\ndblite.fetchall(\"test\", limit=(2, None))\n# Result: SELECT * FROM test LIMIT 2 OFFSET 10\ndblite.fetchall(\"test\", limit=(2, 10))\n# Result: SELECT * FROM test OFFSET 10\ndblite.fetchall(\"test\", limit=(-1, 10))\ndblite.fetchall(\"test\", limit=(None, 10))\n```\n\n\n\n### Name quoting\n\nTable and column names are not quoted automatically. Names with whitespace\nor non-alphanumeric characters or reserved words can be quoted with `Database.quote()`\nand `Transaction.quote()`:\n\n```python\nwith dblite.init(\"my.sqlite\") as db:\n    db.executescript(\"CREATE TABLE test (id INTEGER PRIMARY KEY, %s TEXT)\" %\n                     db.quote(\"my column\"))\n    db.insert(\"test\", {\"id\": 1, db.quote(\"my column\"): \"value\"})\n    for row in db.select(\"test\"):\n        print(row[\"my column\"])\n```\n\nNote that in Postgres, quoted identifiers are case-sensitive.\n\n\nAdapters and converters\n-----------------------\n\nProvides options to register custom adapters and converters,\nto auto-adapt Python types to database types in query parameters,\nand to auto-convert database types to Python types in query results.\n\n```python\ndblite.init(\":memory:\")\ndblite.register_adapter(json.dumps, (dict, list, tuple))\ndblite.register_converter(json.loads, \"JSON\")\n\ndblite.executescript(\"CREATE TABLE test (id INTEGER PRIMARY KEY, data JSON)\")\ndblite.insert(\"test\", id=1, data={\"some\": {\"nested\": [\"data\", 1, 2]}})\ndblite.fetchone(\"test\")  # `data` is auto-converted to Python dictionary\n```\n\n\nSQLite\n------\n\nSQLite connection parameter needs to be a valid path or a path-like object,\nor the special `\":memory:\"` for transient in-memory database.\n\nConnections flags default to `check_same_thread=False, detect_types=sqlite3.PARSE_DECLTYPES`,\ncan be overridden on init:\n\n```python\ndblite.init(\"/path/to/my.db\", detect_types=False)\n```\n\nNote that SQLite connections do not support multiple concurrent isolated transactions,\ntransaction state is shared per connection. To mitigate this, Transaction contexts\nin SQLite default to exclusive access:\n\n```python\ndblite.init(\":memory:\")\nwith dblite.transaction() as tx:\n    print(\"Entering another Transaction with-block will block until this exits.\")\n```\n\nThis can be overridden for `SELECT`-only transactions:\n\n```python\ndblite.init(\":memory:\")\nwith dblite.transaction(exclusive=False) as tx:\n    print(\"Will only be doing SELECT queries, no need for exclusion.\")\n    tx.fetchall(\"test\")\n```\n\n\nPostgres\n--------\n\nPostgres connection parameters can be:\n- Postgres URI scheme `\"postgresql://user:pass@hostname:port/dbname?parameter1=val1&..\"`\n- Postgres keyword-value format `\"user=myuser password=mypass host=myhost port=myport dbname=myname ..\"`\n- dictionary of connection options `{\"user\": \"myuser\", \"host\": \"myhost\", ..}`\n\n```python\n# These are all equivalent:\ndblite.init(\"postgresql://myuser@myhost/mydb\")\ndblite.init(\"user=myuser host=myhost dbname=mydb\")\ndblite.init({\"user\": \"myuser\", \"host\": \"myhost\", \"dbname\": \"mydb\"})\n```\n\nPostgres connection parameters can also be specified in OS environment,\nvia standard Postgres environment variables like `PGUSER` and `PGPASSWORD`.\n\nBy default uses a pool of 1..4 connections per Database.\n\n```python\nwith dblite.init(\"host=localhost user=postgres dbname=mydb\", maxconn=1):\n    print(\"Use a pool of only 1 connection.\")\nwith dblite.init(\"host=localhost user=postgres dbname=mydb\", minconn=4, maxconn=8):\n    print(\"Use a pool of 4..8 connections.\")\n```\n\nPostgres transactions can specify database table schema name up front:\n\n```python\ndblite.init(\"host=localhost user=postgres dbname=mydb\")\nwith dblite.transaction(schema=\"information_schema\") as tx:\n    for row in tx.fetchall(\"columns\", table_schema=\"public\",\n                           order=\"table_name, dtd_identifier\"):\n        print(row[\"table_name\"], row[\"column_name\"], row[\"data_type\"])\n```\n\nPostgres transactions support server-side cursors for iterative data access,\nnot fetching and materializing all rows at once:\n\n```python\ndblite.init(\"host=localhost user=postgres dbname=bigdata\")\nwith Transaction(lazy=True) as tx:\n    for i, row in enumerate(tx.select(\"some really huge table\")):\n        print(\"Processing row #%s\" % i)\n```\n\n`executescript()` forces an internal reload of schema metadata,\nallowing `insert()\u00b4 to return inserted primary key value,\nand query parameters to be auto-cast to expected column types.\n\n\nAPI\n---\n\n| Name                                    | Description\n| --------------------------------------- | -----------------------------------------------------------------------------------------\n| `dblite.init()`                         | returns a opened `dblite.Database` object, the first created if no options given\n| `dblite.fetchall()`                     | runs `SELECT`, returns all rows\n| `dblite.fetchone()`                     | runs `SELECT`, returns a single row, or `None`\n| `dblite.insert()`                       | `INSERT` a single row into table, returns inserted ID\n| `dblite.select()`                       | runs `SELECT`, returns cursor\n| `dblite.update()`                       | `UPDATE` table, returns affected row count\n| `dblite.delete()`                       | `DELETE` from table, returns affected row count\n| `dblite.execute()`                      | executes SQL with arguments, returns cursor\n| `dblite.executescript()`                | executes SQL as a script of one or more SQL statements\n| `dblite.close()`                        | closes the database and all pending transactions, if open\n| `dblite.transaction()`                  | returns `dblite.Transaction` context manager\n| `dblite.register_adapter()`             | registers function to auto-adapt given Python types to database types in query parameters\n| `dblite.register_converter()`           | registers function to auto-convert given database types to Python in query results\n|                                         | |\n| **dblite.Database**\n| `Database.fetchall()`                   | runs `SELECT`, returns all rows\n| `Database.fetchone()`                   | runs `SELECT`, returns a single row, or `None`\n| `Database.insert()`                     | `INSERT` a single row into table, returns inserted ID\n| `Database.select()`                     | runs `SELECT`, returns cursor\n| `Database.update()`                     | `UPDATE` table, returns affected row count\n| `Database.delete()`                     | `DELETE` from table, returns affected row count\n| `Database.execute()`                    | executes SQL with arguments, returns cursor\n| `Database.executescript()`              | executes SQL as a script of one or more SQL statements\n| `Database.transaction()`                | returns `dblite.Transaction` context manager\n| `Database.open()`                       | opens database connection if not already open\n| `Database.close()`                      | closes the database and all pending transactions, if open\n| `Database.closed`                       | whether database is not open\n|                                         | |\n| **dblite.Transaction**\n| `Transaction.fetchall()`                | runs `SELECT`, returns all rows\n| `Transaction.fetchone()`                | runs `SELECT`, returns a single row, or `None`\n| `Transaction.insert()`                  | `INSERT` a single row into table, returns inserted ID\n| `Transaction.select()`                  | runs `SELECT`, returns cursor\n| `Transaction.update()`                  | `UPDATE` table, returns affected row count\n| `Transaction.delete()`                  | `DELETE` from table, returns affected row count\n| `Transaction.execute()`                 | executes SQL with arguments, returns cursor\n| `Transaction.executescript()`           | executes SQL as a script of one or more SQL statements\n| `Transaction.commit()`                  | commits pending actions, if any\n| `Transaction.rollback()`                | rolls back pending actions, if any\n| `Transaction.close()`                   | closes the transaction, performing commit or rollback as specified\n| `Transaction.closed`                    | whether transaction is not open\n| `Transaction.database`                  | returns transaction `Database` instance\n\n\n\nDependencies\n------------\n\n- Python 3 or Python 2.7\n- six (https://pypi.org/project/six)\n\nIf using Postgres:\n- psycopg2 (https://pypi.org/project/psycopg2)",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/suurjaak/dblite",
            "keywords": "SQL SQLite Postgres psycopg2",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dblite",
            "package_url": "https://pypi.org/project/dblite/",
            "platform": "any",
            "project_url": "https://pypi.org/project/dblite/",
            "project_urls": {
                "Homepage": "https://github.com/suurjaak/dblite"
            },
            "release_url": "https://pypi.org/project/dblite/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=2.7",
            "summary": "Simple query interface for SQL databases",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15851554,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e259361037a2045dce20c4221a801494",
                    "sha256": "349c101ed525c826e19dcc4f944bb68b4bf87732ced84daf61eb9e5899f64cbe"
                },
                "downloads": -1,
                "filename": "dblite-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e259361037a2045dce20c4221a801494",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=2.7",
                "size": 61051,
                "upload_time": "2022-11-22T09:35:23",
                "upload_time_iso_8601": "2022-11-22T09:35:23.677510Z",
                "url": "https://files.pythonhosted.org/packages/e8/7d/2daa41f997b1b24a1100074b9800babf91523a8b3e4971ca5eeea31026b7/dblite-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}