{
    "0.0.10": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.10/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.10",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dc9868e574d0b5f6937e3a867bd6125b",
                    "sha256": "911780b03b7b9e6f381c461682b2d931876ca6dc1fc97f8b9a28204ec2537ce6"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.10-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dc9868e574d0b5f6937e3a867bd6125b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26016,
                "upload_time": "2022-01-11T09:53:26",
                "upload_time_iso_8601": "2022-01-11T09:53:26.044751Z",
                "url": "https://files.pythonhosted.org/packages/47/4c/c69b743a374b73c248646452b19bec9d57c21884c5e5136b88403d2658c2/datenraffinerie-0.0.10-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ea19595b0d7c8c45d53f03b923fb78be",
                    "sha256": "238e91dbe3c9028be130086577fef8f9165e6a1fb76fcff1a608eed168a7e352"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.10.tar.gz",
                "has_sig": false,
                "md5_digest": "ea19595b0d7c8c45d53f03b923fb78be",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26589,
                "upload_time": "2022-01-11T09:53:27",
                "upload_time_iso_8601": "2022-01-11T09:53:27.912452Z",
                "url": "https://files.pythonhosted.org/packages/88/9f/833defe5c4b028f93a80dad89898f1c51669022f63dd8618dbc874d7b387/datenraffinerie-0.0.10.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.11": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.11/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.11",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5be0c329bfceaa71e6e812472f450143",
                    "sha256": "b9bd8e4cb2d1e750320bcdb57e9ef696b0f8c696edb6a8158450b8d6a010e976"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.11-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5be0c329bfceaa71e6e812472f450143",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26011,
                "upload_time": "2022-01-11T10:05:40",
                "upload_time_iso_8601": "2022-01-11T10:05:40.127075Z",
                "url": "https://files.pythonhosted.org/packages/8d/a3/0e2a61d1c50f7f097bb894d555cbfb82bd342272748709ebe07680b50877/datenraffinerie-0.0.11-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ded30bd6ae3b29e0296d9b1347e0b201",
                    "sha256": "75892c88c7dcfadf101c57411cc8924b8753889e35a7386d8b18cbdc86fedf5a"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.11.tar.gz",
                "has_sig": false,
                "md5_digest": "ded30bd6ae3b29e0296d9b1347e0b201",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26575,
                "upload_time": "2022-01-11T10:05:41",
                "upload_time_iso_8601": "2022-01-11T10:05:41.533344Z",
                "url": "https://files.pythonhosted.org/packages/2b/a6/668285b21d58c9ffdf7bb961d565c31b997485bc182d12ccd0ffbc37f6cc/datenraffinerie-0.0.11.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.12": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.12/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.12",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "13873603963cf2f1bc6fe51112ec0d20",
                    "sha256": "e22b65c2b9aff94fa57232d271442437e8cd67c26f1c2940b377518e17aac559"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.12-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "13873603963cf2f1bc6fe51112ec0d20",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26062,
                "upload_time": "2022-01-11T10:49:51",
                "upload_time_iso_8601": "2022-01-11T10:49:51.175736Z",
                "url": "https://files.pythonhosted.org/packages/88/f5/016b7def0ae81d891103626983a2d83eee6df20912f7b839ac3e703ded4d/datenraffinerie-0.0.12-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "535f6c5cb74c505c93a32c01e1641be3",
                    "sha256": "715344c17cad26337e8756ea78feb204cb38c68a856b8269bb2428ce7b890213"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.12.tar.gz",
                "has_sig": false,
                "md5_digest": "535f6c5cb74c505c93a32c01e1641be3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26641,
                "upload_time": "2022-01-11T10:49:52",
                "upload_time_iso_8601": "2022-01-11T10:49:52.559894Z",
                "url": "https://files.pythonhosted.org/packages/f0/24/af7a294fc443cec858652879d4f03fec13f986f59f4ba5d937c7f476af8a/datenraffinerie-0.0.12.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.13": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.13/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.13",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "20c5407fdef396099ba263c7c0c00e77",
                    "sha256": "82ac889cb678ea17749cd0c523e57e6f87ce7fc5579346e9f6bbbee86abaa99c"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.13-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "20c5407fdef396099ba263c7c0c00e77",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26062,
                "upload_time": "2022-01-11T12:25:32",
                "upload_time_iso_8601": "2022-01-11T12:25:32.878737Z",
                "url": "https://files.pythonhosted.org/packages/e6/23/470ec8d0bf907bffdb53a3a2e690ad3df7266d368bbef7d6d746fce5f4ee/datenraffinerie-0.0.13-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "068da310b8c1c36ddfb127cc86ea59e4",
                    "sha256": "c63508765a893be65cd107baf5c2a01c945434145836ed962a74b6b816f631c1"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.13.tar.gz",
                "has_sig": false,
                "md5_digest": "068da310b8c1c36ddfb127cc86ea59e4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26643,
                "upload_time": "2022-01-11T12:25:34",
                "upload_time_iso_8601": "2022-01-11T12:25:34.455847Z",
                "url": "https://files.pythonhosted.org/packages/78/12/3f56fe6a11e267d937ecc208ac364e104a6ad025045987f0775e4a62d535/datenraffinerie-0.0.13.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.14": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.14/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.14",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "18daf16a410324e935fb8c0a75b3e8e5",
                    "sha256": "6d112143663d33aa157fbb86d22b8aae60f0ba5bcf7d6df76f99941c3b9f6b57"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.14-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "18daf16a410324e935fb8c0a75b3e8e5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 27439,
                "upload_time": "2022-01-13T11:59:19",
                "upload_time_iso_8601": "2022-01-13T11:59:19.093177Z",
                "url": "https://files.pythonhosted.org/packages/3d/59/519b6c3604585add8dcb8eb42b77ad90f002b67adbfa6a9da3b6eccb1c7c/datenraffinerie-0.0.14-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1742d1c69e318fbb81d6f6800ffd01ad",
                    "sha256": "1e8e1e78d1a5c77636fcdf0fcb34cba81d5fdd8ff400cbef48c0a8761b36ff6f"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.14.tar.gz",
                "has_sig": false,
                "md5_digest": "1742d1c69e318fbb81d6f6800ffd01ad",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26607,
                "upload_time": "2022-01-13T11:59:21",
                "upload_time_iso_8601": "2022-01-13T11:59:21.040853Z",
                "url": "https://files.pythonhosted.org/packages/22/01/b91ad876cc42ddeadeda9a1ffb2019feb6155f4751f241da4164542bff8b/datenraffinerie-0.0.14.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.15": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.15/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.15",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9bcbae9f2fee90136002a141d3307e41",
                    "sha256": "143466f9bc282dc8505386505c879c6b695efc8f06460717fee252b92ab92a20"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.15-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9bcbae9f2fee90136002a141d3307e41",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 28293,
                "upload_time": "2022-01-18T10:14:34",
                "upload_time_iso_8601": "2022-01-18T10:14:34.788735Z",
                "url": "https://files.pythonhosted.org/packages/79/39/c48034810925fc2041950fad3d87bd641bde339e617e76a39f07f211a50b/datenraffinerie-0.0.15-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "674aafef42843f90790b98617ed33879",
                    "sha256": "4fc92b690b153a770393f590e5529c02533d7f170f637fcd3ef4ccf20eb0bff7"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.15.tar.gz",
                "has_sig": false,
                "md5_digest": "674aafef42843f90790b98617ed33879",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 27173,
                "upload_time": "2022-01-18T10:14:36",
                "upload_time_iso_8601": "2022-01-18T10:14:36.365371Z",
                "url": "https://files.pythonhosted.org/packages/26/75/7211022b9117062df098e8e30bf927b74befd2001ac260ec08e8990e7746/datenraffinerie-0.0.15.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.7/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "shutil"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "953c55afcd2ea581e5ed6430e64dd98e",
                    "sha256": "cf41486d87a595ccf569fdb7bb2a59561f41bfdf658ea97cf2124d3af1d55e17"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "953c55afcd2ea581e5ed6430e64dd98e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26047,
                "upload_time": "2022-01-11T09:33:35",
                "upload_time_iso_8601": "2022-01-11T09:33:35.992701Z",
                "url": "https://files.pythonhosted.org/packages/a7/c7/7ee7e3394427104f501310e0b1a81a30461617ff543abb25ee3e86e3aff5/datenraffinerie-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ae606e2ebc8feb5b814f85a2e8e7e644",
                    "sha256": "c8a36428cd7bd6a01e5d8e2453515e8785f3ed933a80cf98c73debf8f6b1208d"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "ae606e2ebc8feb5b814f85a2e8e7e644",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26655,
                "upload_time": "2022-01-11T09:33:37",
                "upload_time_iso_8601": "2022-01-11T09:33:37.857443Z",
                "url": "https://files.pythonhosted.org/packages/08/4a/25356ca6da5bc10b8d9d2ae9246805dd7337b79030472dbac59d0bfd69b1/datenraffinerie-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.8": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.8/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6166398f2bac891dfedcf47a56bac2b2",
                    "sha256": "dab101c8a5eb95710c6ca70c96b0c848fd55b93db86b76fa47f9642a6dcf7230"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6166398f2bac891dfedcf47a56bac2b2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 26040,
                "upload_time": "2022-01-11T09:35:48",
                "upload_time_iso_8601": "2022-01-11T09:35:48.055620Z",
                "url": "https://files.pythonhosted.org/packages/5b/f7/825ae039d3f3a9b752faae1fdf3ff20fc9a13ac2f6351a4868deb3a04a8c/datenraffinerie-0.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6645ae01cd42dbe99b61ada1db973932",
                    "sha256": "70eb852736877579a6c9d38833062c13d4855b0cfd63eb0f508bd54f456cc4b8"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "6645ae01cd42dbe99b61ada1db973932",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26644,
                "upload_time": "2022-01-11T09:35:49",
                "upload_time_iso_8601": "2022-01-11T09:35:49.404240Z",
                "url": "https://files.pythonhosted.org/packages/75/a8/477fda285ad085dc61c94bf95edd180b26fc895e2e9eee05be5903c8fa9d/datenraffinerie-0.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.9": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.0.9/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "931e756b88914e076f23de3c122bd30c",
                    "sha256": "39e32fef6dfd695783c82881a7f0e2cff43fdbb8f1326a0c7fce1c2e27efb911"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "931e756b88914e076f23de3c122bd30c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 25995,
                "upload_time": "2022-01-11T09:51:57",
                "upload_time_iso_8601": "2022-01-11T09:51:57.684063Z",
                "url": "https://files.pythonhosted.org/packages/4a/d0/cf3e955985179f553a0606d7cd430d7b2e88ff34cf3fb711739e6ffd9820/datenraffinerie-0.0.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "47011e545b6df3b39f26a14ee236a4fb",
                    "sha256": "7cb008cb76e396b3258cea789dcacf443ab2e0f36751815fc4a1a2684fb9dfe6"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "47011e545b6df3b39f26a14ee236a4fb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26591,
                "upload_time": "2022-01-11T09:51:59",
                "upload_time_iso_8601": "2022-01-11T09:51:59.385490Z",
                "url": "https://files.pythonhosted.org/packages/26/0b/de8b920ec6232f642c61453529b82717c1813e96fa4521df2d227908f222/datenraffinerie-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/datenraffinerie/0.1.0/",
            "requires_dist": [
                "Click",
                "luigi (==3.0.3)",
                "pandas (==1.3.5)",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for accuiring and analysing HGCROCv3 Data",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "589a740fbf9edafb612e2a8061bd6cc7",
                    "sha256": "e5f902936582734f11466782b75a9e36637853e104e5710a2f470fcfc7541543"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "589a740fbf9edafb612e2a8061bd6cc7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 29720,
                "upload_time": "2022-01-20T16:19:24",
                "upload_time_iso_8601": "2022-01-20T16:19:24.419697Z",
                "url": "https://files.pythonhosted.org/packages/f5/93/333ec9b1da5aad6ee1dc337d5dc582030a3fa73b05fded1bbc609a6a88d8/datenraffinerie-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4fd6ba9a8d79d1ad577e889161714a82",
                    "sha256": "57b6fe4f05bb2bec24fca8bd19f160572acf34e9f3d5ce995d135a67156f6084"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "4fd6ba9a8d79d1ad577e889161714a82",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 28259,
                "upload_time": "2022-01-20T16:19:26",
                "upload_time_iso_8601": "2022-01-20T16:19:26.257934Z",
                "url": "https://files.pythonhosted.org/packages/26/d0/8621c447c4850ffcb0f025efecd3829711fa79a587354aecf1ce82a82eb1/datenraffinerie-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.1.1/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b82f676495303ce0a68b13d01c5219a",
                    "sha256": "0b233797f3d7e16461da4e93a19d0334e77554718b4549bfc80d9a274811e4c3"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8b82f676495303ce0a68b13d01c5219a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 33056,
                "upload_time": "2022-01-25T08:23:34",
                "upload_time_iso_8601": "2022-01-25T08:23:34.993854Z",
                "url": "https://files.pythonhosted.org/packages/5b/6f/646a67cbf296aa8d30fb94d8a789876eb0a30df4aa82e02007ad6214c74c/datenraffinerie-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d78c85cf7035b69b90d47d2496269f05",
                    "sha256": "d08f575cf400be45e83aa77d89881af1a1509c413a08f25ffd6833b6bcfca8e6"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "d78c85cf7035b69b90d47d2496269f05",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 35736,
                "upload_time": "2022-01-25T08:23:37",
                "upload_time_iso_8601": "2022-01-25T08:23:37.203363Z",
                "url": "https://files.pythonhosted.org/packages/05/a7/86c469410113245b3066fd4a9b88e4d6c679bf3dead7928bca1e594cecf6/datenraffinerie-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.1.2/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ecb4a11515ba803367d15fe9da42258a",
                    "sha256": "c9a552b320602ed3422719a5774f3875f1d6ffa39e3c871a9053a940ec765e08"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ecb4a11515ba803367d15fe9da42258a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 33027,
                "upload_time": "2022-01-25T08:46:40",
                "upload_time_iso_8601": "2022-01-25T08:46:40.919383Z",
                "url": "https://files.pythonhosted.org/packages/61/20/9141037573506d3904f29a05fd58a12595dad207d12a6c4129d23bd44d70/datenraffinerie-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a2a5cf2847e1595676dcefde2742a396",
                    "sha256": "bcd360d2e10030a1846bcc54588c3c6acaba70729814335860fa307fef561f83"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "a2a5cf2847e1595676dcefde2742a396",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 35677,
                "upload_time": "2022-01-25T08:46:42",
                "upload_time_iso_8601": "2022-01-25T08:46:42.916171Z",
                "url": "https://files.pythonhosted.org/packages/82/21/1ddd19edf84ec6752a266e9ab379018ecb9b3c370091dc6d0f9775a01efa/datenraffinerie-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.2.0/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d08568f1f4c7d94c89cf13cc971625e6",
                    "sha256": "3ddd6ac5b70cd004191d8442f02c4dc146aabd0af2ab2cb5029b9b6bea581c41"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d08568f1f4c7d94c89cf13cc971625e6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 34337,
                "upload_time": "2022-01-25T14:33:38",
                "upload_time_iso_8601": "2022-01-25T14:33:38.371391Z",
                "url": "https://files.pythonhosted.org/packages/3e/b9/7dc9aaa55eb93045c4a10958e5d8c2f096fa3e3f3f32c590dde836b20e57/datenraffinerie-0.2.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3c3ac7257389ec4df8096c53baef18a0",
                    "sha256": "2a3b93461faf77777cceb89eff9b8048e7fa117edee4c54535c7ee545c72c2b0"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3c3ac7257389ec4df8096c53baef18a0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 37944,
                "upload_time": "2022-01-25T14:33:40",
                "upload_time_iso_8601": "2022-01-25T14:33:40.579885Z",
                "url": "https://files.pythonhosted.org/packages/b7/51/cb2906e74adf18a93928095349cbcb28ac11a70831898810802f140cbee3/datenraffinerie-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.0": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.3.0/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "12fb184325a9673ee019d93f6f52bb60",
                    "sha256": "755292bc6ff4457800a395c04538cd80671ec28b754d27e97542cd0075d66c93"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.3.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "12fb184325a9673ee019d93f6f52bb60",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 35400,
                "upload_time": "2022-02-08T14:20:04",
                "upload_time_iso_8601": "2022-02-08T14:20:04.543004Z",
                "url": "https://files.pythonhosted.org/packages/28/1a/e50ca536390c5e0492166889f136b88cdce647b48486d587385e6f484f19/datenraffinerie-0.3.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c51fcd8e501cf3715b2f5941cafcfe62",
                    "sha256": "d0137441b5a470ef585ebad563d7ec220706dd76fffe03bf0b4cde4d08c2c607"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "c51fcd8e501cf3715b2f5941cafcfe62",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 38774,
                "upload_time": "2022-02-08T14:20:06",
                "upload_time_iso_8601": "2022-02-08T14:20:06.427624Z",
                "url": "https://files.pythonhosted.org/packages/61/d2/e74c67b92a3b757d42ff98d8fb28f5e48a26cd6047d7594d29eef0b20751/datenraffinerie-0.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.1": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.3.1/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.3.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f566e639e6826b5a303dc113bcc20ec0",
                    "sha256": "bbb4f591c134d2a57dffd44046ae4d8d0d43b0fec99225b597c0b1ddec86b3d9"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.3.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f566e639e6826b5a303dc113bcc20ec0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 36748,
                "upload_time": "2022-02-10T16:51:07",
                "upload_time_iso_8601": "2022-02-10T16:51:07.509244Z",
                "url": "https://files.pythonhosted.org/packages/72/95/2c61373b4b5396315862bbdf3132af0634529a899c43811b65ec4541f71b/datenraffinerie-0.3.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2290b8c392f90f8daec0319f9788988d",
                    "sha256": "cb25d1066030aeffe28bdc4f820d5cb848634ff7b672af87a56d8a01041b4075"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.3.1.tar.gz",
                "has_sig": false,
                "md5_digest": "2290b8c392f90f8daec0319f9788988d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 40288,
                "upload_time": "2022-02-10T16:51:09",
                "upload_time_iso_8601": "2022-02-10T16:51:09.494190Z",
                "url": "https://files.pythonhosted.org/packages/f7/d9/2a28a27738a4b07f139f5879412ca72950653fe9e89f3b4416d748d95820/datenraffinerie-0.3.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.2": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": "",
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.3.2/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.3.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1a0f675be9ccc049373de01231145b63",
                    "sha256": "a900eca12c6dd01a38670e887e266c050d7b065ddb9899242ebb5faf6a6f2470"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.3.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1a0f675be9ccc049373de01231145b63",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 36990,
                "upload_time": "2022-02-11T13:35:17",
                "upload_time_iso_8601": "2022-02-11T13:35:17.167790Z",
                "url": "https://files.pythonhosted.org/packages/64/76/15321f322e145270aed7c73b1881482d498f82979db9fce7f8b9cb8ebb8e/datenraffinerie-0.3.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e300efc8c0433bbca6aa1529bdbe0d34",
                    "sha256": "29821a1bcc56196e7547dec6b926cc26d040e9481f8220af033261197a8d149f"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.3.2.tar.gz",
                "has_sig": false,
                "md5_digest": "e300efc8c0433bbca6aa1529bdbe0d34",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 40588,
                "upload_time": "2022-02-11T13:35:18",
                "upload_time_iso_8601": "2022-02-11T13:35:18.810420Z",
                "url": "https://files.pythonhosted.org/packages/92/a7/9ff8b20b4d2d3970d4da4d761da3a606d3e839a8a93c17dd19924ac5aea4/datenraffinerie-0.3.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.4.0": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": null,
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.4.0/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables",
                "h5py",
                "numba",
                "jinja2"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.4.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1182039779a9fa7b9f1c451412f8f852",
                    "sha256": "961d646e21b847d03c3f508ace97621c9ff1b0f5cb512729856ecd6b26e05a36"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.4.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1182039779a9fa7b9f1c451412f8f852",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 41937,
                "upload_time": "2022-04-06T07:03:22",
                "upload_time_iso_8601": "2022-04-06T07:03:22.072914Z",
                "url": "https://files.pythonhosted.org/packages/e8/ed/3d6fe7054ebe4856418578b49a377c95b2c5170084a8a25cf197b466290f/datenraffinerie-0.4.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "834cf3b98b089cf9e49568efbf28d680",
                    "sha256": "e0e1c822df6ce6adb35cd79e63519395f3c43a27ffa08ba329dffe7410565ecf"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.4.0.tar.gz",
                "has_sig": false,
                "md5_digest": "834cf3b98b089cf9e49568efbf28d680",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47595,
                "upload_time": "2022-04-06T07:03:24",
                "upload_time_iso_8601": "2022-04-06T07:03:24.563087Z",
                "url": "https://files.pythonhosted.org/packages/72/5f/393a51cdba7247827f1f6e353f45f3ac98982753a022b67ad0c9b7ffeaca/datenraffinerie-0.4.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.4.1": {
        "info": {
            "author": "Alexander Becker",
            "author_email": "nabla.becker@mailbox.org",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Datenraffinerie\n\nA tool to acquire and analyse HGCROCv3 Data for the HGCAL subdetector of the CMS at CERN.\n\nTo characterise the HGCROCv3 many measurements need to be acquired using different chip configurations. As the HGCROCv3 has built-in testing circuits\nthese are used for chip characterisation. The Datenraffinerie is a tool/framework that tries to simplify the execution of such data acquisition and\nanalysis tasks.\n\n## Definition of the Terms used in this Document\n- Target: The device/system that acquires the measurements and accepts the configuration. This can be either an LD/HD Hexaboard or a\nSingle-roc-tester. In future the Train might also be supported.\n- backend: The combination of both the daq system and the Target.\n- Procedure: A sequence of steps that are performed together and use a common configuration. Examples of procedures are daq-procedures that acquire\nmeasurements from a target; analysis-procedures take the data acquired by daq-procedures and try to derive meaningful insights from that.\n- Task: The smallest unit of a procedure. This term is taken from the library luigi used in this framework. A task produces a file at completion.\n- Acquisition: The procedure that acquires data from the target also known as daq-procedure\n- Analysis: An analysis takes data that was acquired during an acquisition and derives some sort of 'insight' from it. An 'insight' might be a plot or\nthe decision to keep/discard the chip that the data was acquired on.\n- Distillery: Analyses are performed in 'Distilleries' which are the part of the datenraffinerie framework and provide the analysis code with the data\nand the output directory where the analysis is expected to place it's outputs.\n\n## Installation\n### PyPi\nThe Datenraffinerie is available on pypi. This means that it can be installed via pip. To be able to use the datenraffine Python 3.9 is needed. Python 2\nis _not_ supported. It is recommended that a python virtual environment is used for installation. Python 3.9 can be installed on centos7 by compiling\nfrom source. To set up a python environment run:\n```\n$ python3.9 -m venv venv\n```\nthis creates a [virtual environment](https://docs.python.org/3/library/venv.html). in the `./venv` directory. The virtual environment can be activated by running\n```\n$ source ./venv/bin/activate\n```\nin a bash shell.\nTo deactivate the virtual environment, run:\n```\n$ deactivate\n```\n\nIn the virtual environment simply install the datenraffinerie via pip with the command\n```\npip install datenraffinerie\n```\nThis will install the latest version released on the [python package index](https://pypi.org/project/datenraffinerie/).\n\n\n### from Source\nTo install the datenraffinerie it is assumed that python 3.9 is available and is executed via the `python` shell command.\nTo install the datenraffinerie from the git repository clone the repository and then change the working directory to the root of the git repository\nthen initialize a virtual environment as shown in [PyPi](#PyPi). Then activate the virtual environment and run the command\n```\n$ pip install .\n```\nThis should install all needed runtime requirements for and datenraffinerie itself.\n\n## Running Datenraffinerie\nAfter the installation the command `datenraffinerie` is available.\nTo find out about the options of the command line tool run:\n```\n$ datenraffinerie --help\n```\n\nTo get going with the Datenraffinerie, network configuration and a daq/analysis configuration is needed. Examples for these Configurations can be found\nin the `examples` directory of the git repository. Further Configurations can be found in the.\n`tests/configuration` directories of the repository. See [configuration](#Configuration) for more details.\n\nWhen using custom analysis code, the location of the module that provides this code has to be specified with the `-a` option. An example of custom\nanalysis code can be found in `examples/example_analysis_collection`.\n\nAs the Datenraffinerie was designed for the use of parallel processes, it is capable of running multiple procedures in parallel. The amount of\nparallel tasks can be specified by setting the number of `workers` with the `-w` option. The default for this option is 1, so without setting\nthis value explicitly it will not run in parallel.\n\n## Concepts\nThe Datenraffinerie expresses the Creation of plots as a sequence of two types of procedures. There is a DAQ procedure and an Analysis procedure.\nA daq-procedure acquires data from the target system. As most Measurements are scans of a multi dimensional phase space, the daq system was designed\nto make these kind of phase space scans as easy as possible. A daq procedure that is configured with a list of multiple parameter scans will combine\nthem into a Cartesian product of the parameters and performs a measurement for every target configuration from that Cartesian product space.\nThe daq-procedure is fully configurable, the daq-task structure is derived from a yaml configuration, see [configuratoin](#Configuration) for details.\n\nAnalyses (also called Distilleries in the context of the Datenraffinerie) derive useful information from the data provided by the acquisitions.\nThe module that contains the Analysis code is loaded at runtime by the Datenraffinerie and is desigend to run custom analysis code, see [writing a custom Distillery](#Writing a custom Distillery).\nIf the custom distillery needs any sort of configuration it can be specified in the corresponding analysis\nconfiguration. The configuration is in a very similar format to the configuration of the daq system and provided as a yaml file.\n\nData acquisition is performed by a target, that accepts some configuration and produces measurements where the it has configured itself and the HGCROCv3\nchips that are part of it according to the configuration received. The Datenraffinerie computes the entire configuration of target and daq system \nfor every measurement of the acquisition, guaranteeing that the system is in the desired state when taking data.\nTo be able to do this the user needs to provide a 'power-on default configuration' that describes the state of every parameter of the target at power on and the\nconfiguration for the acquisition system.\n\nAfter computing the configuration for a single measurement from the daq configuration the measurement is scheduled for execution on the target.\nAfter the measurements have been acquired the data and configuration are merged into a single `hdf5` file that should contain all information of the\nscan.\nThe resulting data does not only contain the data received from all the individual measurements, but also the relevant configuration for every\nchannel of every measurement. This gives the Distillery (anlysis) developer the freedom to slice and filter the data to their relevant needs. It also\nmeans that the data format for every analysis is identical. Furthermore the Data is provided to the analysis as a pandas `DataFrame` giving the\nanalysis developer a modern and extensive set of tools to work with. For a close look at the data format see the [Data Format](#Data Format) section.\n\n## Execution Model\nThe execution model of the Datenraffinerie relies on the same execution model of the [luigi](https://github.com/spotify/luigi) library that is used by\nthe Datenraffinerie. As such the Datenraffinerie constructs a dependency graph of tasks before executing them. Task `A` that is depended upon by task `B`\nis run before task `B`. However during creation of the dependency graph task `B` is queried for it's dependencies before task `A` is, as any task is\nonly run if it is depended upon by another.\n\nAt the beginning of the Execution, the Datenraffinerie is invoked through a command line interface (CLI) by the user. The user needs to provide some parameters to the\ncommand to provide it with the location of the configuration to be used and the location at which to find the analysis code along with the name of the\nprocedure that the user wishes to execute and the location where the data needs to be written to.\n\nTo begin with the configuration files that where passed in by the user need to be parsed and the procedure that is to be executed found. This is done\nin the `ValveYard` class. After parsing the configuration, the `ValveYard` declares that it depends upon the Task that was indicated by the user\nduring invocation.\n\nThe `ValveYard` can declare two types of dependencies, either the dependency is of type `daq` or of type `analysis`. As the Analysis will always\nrequire some data it in turn declares a dependency upon the `ValveYard` task but this time the Analysis acts as the user, indicating a `daq` type task\nto be searched for and subsequently depended upon by the new instantiation of the `ValveYard` class.\n\n![Invocation of the valveyard](docs/valveyard-invocation.svg)\n\n### DAQ type procedures\nIn contrast to the `analysis` type tasks discussed previously that rely on external code to run, and usually consist of a single task, the DAQ\nprocedure is entirely implemented in the Datenraffinerie and relies on a recursive task called `DataField` to be able to generate the Cartesian product of\nthe parameters specified by the user configuration. In the simplest case the `DataField` task does not recurs and directly starts a set of measurement tasks\n\n![non recursive scan](docs/daq-task-dependency-graph-1D.svg)\n\nIf mutiple parameter ranges are passed to the `DataField` task during the creation of the dependency graph it will not directly declare measurements as\nit's dependency but instead declare a set of `DataField` tasks as it's dependency, one for every value of the 'dimension' it is supposed to scan over.\nThis is probably best visualized as in the following picture:\n\n![recursive scan](docs/daq-task-dependency-graph-3D.svg)\n\nThe bottom level of this tree is made up of the actual measurements. In the case of a simple scan without the need for a calibration, the Measurements\nare the final node in the dependency graph. As the computation of the dependency graph is now complete the tasks are now actually executed.\nDuring execution, the measurement calculates the final measurement configuration and send it to the\n`daq_coordinator` which is in charge of managing the access to the measurement system for more on that see [The `daq_coordinator`](#DAQ Coordination).\n\n#### Alternate DAQ behaviour\n\nAlong with the above mentioned execution mode, the `DataField` can be configured to acquire the data itself without spawning `DrillingRig`s to each\nacquire a single run. It performs the acquisition tasks in a loop before passing the raw data to the `Fracker` that processes the data into the\nDataFrames that are ultimately passed to the `Distillery`s. In this Mode the DAQ and the data processing are entirely decoupled. The Processing of the\nraw data will only start to commence after all the data has been gathered from the chip. To put the Datenraffinerie into this mode the `-l` option has\nto be passed to the Datenraffinerie on the command line.\n\n## Configuration\nTo get the Datenraffinerie to work properly, it needs to be configured. As mentioned earlier, there are examples of the configuration available in the\n`examples` and `tests/configuration` directory of the git repository. The configuration is a list of procedures that can be spread over multiple files\nfor the purpose of structuring/segmenting different types of procedures, production vs. development for example. All files use the yaml syntax, for a\ndetailed explanation of it's syntax see [here](https://yaml.org).\nThe different files are all tied together into in the 'main' configuration file. The main configuration file in contrast to every other file does not\nrepresent a list on the top level but instead a dictionary. An example of a main configuration file is given below:\n\n```yaml\nlibraries:\n  - \"./daq_procedures.yaml\"\n  - \"./analysis_procedures.yaml\"\n```\n\nAs can be seen, the main configuration simply includes different files that contain the actual procedures available for use with the datenraffinerie.\nThis file needs to be specified by the user during invocation of the Datenraffinerie using the CLI. The paths in the main configuration and in any\nother configuration file are assumed to be relative to the location of the file they are occurring in. Next we shall take a look at the configuration\nof the Analysis and DAQ procedure.\n\n### Configuration of the Analysis Procedure\nThe Distillery configuration is the simpler of both configurations from the point of view of the datenraffinerie, They can become quite complex\ndepending on the needs of the analysis run by the Distillery. An example of an Distillery configuration follows:\n\n```yaml\n- name: my_analysis\n  type: analysis\n  python_module_name: my_analysis_import_name\n  daq: my_daq_procedure\n  parameters:\n    p1: 346045\n    p2: 45346\n    p3: 'string option'\n```\n\nAs can be seen in the example, the Analysis procedure is an entry in a list. A file that is included in the main configuration must be a yaml representation of a list.\nThe above example may be one of possibly many entries in a file. Every entry needs the `name` field as it is the name by which the `Valve Yard` identifies the\nprocedure to be executed. The value of the `name` field is also the value that the user specifies on the command line to tell the Datenraffinerie what\nprocedure to execute.\n\nAlso mandatory for every entry is the `type` field. It defines if it is an Analysis or a DAQ procedure.\nIn the case of an Analysis, It is necessary to declare the daq procedure to collect the neede information to be able to perform the analysis.\nThis is done with the name specified in the `daq` field. The name specified here needs to match with the `name` field of the daq procedure.\n\nAs the code for the Analysis is loaded by the Distillery at runtime, the Distillery needs to know the name of the module to be\nimported. That name is specified in the `python_module_name` field. The name needs to match the name given to the analysis class in the `__init__.py` file\nof the analysis collection. Using the above configuration as an example, the following line would need to appear in the `__init__.py` file of the analysis collection:\n```\nfrom . import MyCustomAnalysis as my_analysis_import_name\n```\nThis assumes, that the Class containing the analysis code is called `MyCustomAnalysis`.\n\nThe parameters field is where the parameters for the analysis can be specified. It is assumed to be a dictionary and the entries in the 'parameters'\ndictionary are passed as a dictionary to the custom analysis code by the Distillery class. So given the above example the Analysis would be passed\n```python\n{\n    p1: 346045,\n    p2: 45346,\n    p3: 'string option\n}\n```\n\nFor more details see [here](#Writing a custom Distillery)\n\n### Configuration of the DAQ Procedure\nThe configuration of the DAQ Procedure is more complicated as it needs to define everything needed to calculate the entire system state for every\nmeasurement performed during the acquisition.\n```yaml\n- name: timewalk_scan\n  type: daq\n  event_mode: false\n  target_settings:\n    power_on_default: ./defaults/V3LDHexaboard-poweron-default.yaml\n    initial_config: ./init_timewalk_scan.yaml\n  daq_settings:\n    default: ./defaults/daq-system-config.yaml\n    server_override:\n      NEvents: 1000\n      l1a_generator_settings: # type can be 'L1A', 'L1A_NZS', 'CALPULINT' and 'EXTPULSE0' ; followMode can be DISABLE, A, B, C or D \n      - {name: 'A', enable : 1, BX : 16, length : 1, flavor: CALPULINT, prescale : 0x0, followMode : DISABLE}\n      - {name: 'B', enable : 0, BX : 38, length : 1, flavor : L1A, prescale : 0x0, followMode : A}\n      - {name: 'C', enable : 0, BX : 0x30, length : 1, flavor : L1A, prescale : 0x0, followMode : DISABLE}\n      - {name: 'D', enable : 0, BX : 0x40, length : 1, flavor : L1A, prescale : 0x0, followMode : DISABLE}\n  parameters:\n    - key:\n      - target\n      - ['roc_s0', 'roc_s1', 'roc_s2']\n      - 'ReferenceVoltage'\n      - [0, 1]\n      - 'Calib'\n      range:\n        start: 0\n        stop: 2048\n        step: 32\n    - key:\n      - daq\n      - l1a_generator\n      values:\n        - {'special': 'value'}\n        - {'special': 'val2'}\n  data_columns:\n    - chip\n    - channel\n    - channeltype\n    - HighRange\n    - LowRange\n    - Calib\n    - phase_strobe\n```\n\nJust as with the analysis procedure the `name` and `type` fields are present, specifying the name of the procedure as specified by the user and\nit's type, indicating if it is a daq or analysis procedure.\n\nThe configuration is split into three sections the `target_settings` section that defines the default and initial settings for the target, the\n`daq_settings` section that describe the configuration of the daq server and client and the parameters section that describes the parameters defining\nthe axes of the 'phase space' that is scanned over.\n\nBoth parameters of the target and daq system can be referenced in a scan. To select a parameter from the target system to scan over, the first entry\nof the `key` Field needs to be set to `target`, this is done in the first entry of the `parameters` field.\nTo scan over a `daq` parameter, the first entry of the key field needs to be `daq`. If the first entry in the `key` parameter is neither `daq` or\n`target`, a `target` is automatically prepended. This was done to keep it backwards compatible with existing scan configurations. The automatic\nprefixing is considered  temporary feature and will be removed in a future release.\n\nInstead of providing a simple numerical range, it is also possible to specify individual values that should be scanned over. The values can be\ncomplex dictionary/lists structs. This makes single value scans with non numerical values possible. An example is shown in the second scan parameter\nof the above example.\n\nThe columns of data that end up in the resulting DataFrame can now also be selected by specifying the optional `data_columns` list. If `data_columns`\nis not provided all available columns are written into the output DataFrame. If a column specified in the `data_columns` list is not found in the set\nof available columns it is simply ignored.\n\n### Target Settings\nThe `target_settings` section has two parts, the first is the `power_on_default` section.\n\nThe `power_on_default` field sets the path to a yaml file that describes the configuration of the target after either a reset or a power on.\nIt is used to calculate the parameters that actually need to be sent to the backend and avoid unnecessary writes. There is generally one\nfile per test system used.\n\nThe `initial_config` specifies the set of parameters that differ from the power on configuration for the target. They do not need to provide the\nvalues of the parameter being scanned over but can contain an initial value for them (it will however be overwritten). This file sets the parameters\nthat are specific to each daq procedure.\n\n### DAQ Settings\nThe `daq_settings` section specifies the settings of the DAQ system. It is assumed that the DAQ settings do not change between Measurments of the same\nprocedure. There is one field and there are two subsections in the `daq_settings` section. The `default` field is the path to the default settings of the\ndaq system. The default settings only need to change if the the zmq-server and zmq-client C++ Programs running on the Hexacontroller are updated and\nend up using use a different configuration interface.\n\nThe two sections, of which only one of them is shown in the above example specify overrides to the `daq_settings`.\nThese are the `client_override` and `server_override` sections. These sections specify parameters that need to be set to non default values of the DAQ system\nin order for it to work with the scan that is to be performed. As it is assumed that\nthese settings may vary from scan to scan the non-default settings are made explicit for every DAQ procedure.\n\n### Parameters\nThe parameters section describes the parameters that need to be adjusted from one measurement/run to the\nnext. `parameters` is a list of dictionaries. Every entry of this list has the same structure. There is a `key` field that describes what parameter\nof the targert needs to be changed from one measurement to the next and the range field that describes the different values the parameter needs to be\nset to. Please see [key generation](#Key generation) for more details.\nIf multiple entries are specified, a measurement is performed for every element of the Cartesian product of both ranges.\n\n#### Key generation\nIt is assumed that the Target configuration essentially mirrors the parameters and hierarchy of the slow control parameters of the HGCROC. If a system\nconsists of multiple ROCs the configuration of each roc becomes a subdicitonary with the key being the name of the HGCROC.\nTo understand how the actual parameter is computed an example of the `key` as it appears in the daq-procedure configuration and the resulting dictionary\nthat is set to a value specified in the `range`\nfield is given:\n```yaml\nkey:\n  - ['roc_s0', 'roc_s1', 'roc_s2']\n  - 'ReferenceVoltage'\n  - [0, 1]\n  - 'Calib'\nrange\n  start: 0\n  stop: 33\n  step: 32\n```\nresults in the following keys being generated. Once with the value 0 as show here and once for the value 32.\n```yaml\nroc_s0:\n  ReferenceVoltage:\n    0:\n      Calib: 0\n    1:\n      Calib: 0\nroc_s1:\n  ReferenceVoltage:\n    0:\n      Calib: 32\n    1:\n      Calib: 32\nroc_s2:\n  ReferenceVoltage:\n    0:\n      Calib: 32\n    1:\n      Calib: 32\n```\nIn the above example the Measurement that is being performed has assigned the value specified by the key to `32`. In a different measurement task it\nwould be set to a different value, for example `64`.\n\n## Data Format\nThe Data that is generated by the DAQ procedures of the Datenraffinerie always has the same format, independent of the daq procedure run. All data is\ncontained in the pandas `DataFrame` passed to the Analysis code. The configuration information of the chip is included in the file as additional\ncolumns.\n\nEach row represents a single channel during a single measurement. As configuration parameters change from one measurement to the next the columns\nholding the corresponding configuration parameter will reflect this.\n\nThe HGCROC has channel wise and global parameters. Every row of the `DataFrame` will therefore contain the configuration of that specific channel,\nreflecting the channel specific configuration. It will also contain all global fields of the chip configuration. This allows the Analysis code to\nsimply select the data of interest without the need to know how the data was acquired (assuming of course that the relevant selection is contained in\nthe `DataFrame` provided by the daq procedure). Every `DataFrame` will contain the same columns, the contents of the data depends of course on the daq\nprocedure specified in the configuration.\n\nTo illustrate the point here is the data format for a simplified measurement. The Chip A has the following configuration:\n```yaml\nglobal:\n  ADC_gain: 1\n  DAC_gain: 2\nch:\n  0:\n    connected: 1\n\tthreshold: 2\n  1:\n    connected: 0\n\tthreshold: 0\n  2:\n    connected: 1\n\tthershold: 2\n  3:\n    connected: 0\n\tthreshold: 0\n```\n\nA measurement yields an `adc_val` and the daq procedure specifies a scan of the threshold of the channels. As can be seen, channels 1 and 3 are not\nconnected. 5 measurements are taken. If an `adc_val` is below threshold, the Chip sets the value to 0. A disconnected Channel also will show an\n`adc_val` of 0. Given the previous assumptions a measurement may look like:\n\n| channel | adc_val | ADC_gain | DAC_gain | connected | theshold |\n|---------|---------|----------|----------|-----------|----------|\n|0|12|1|2|1|2|\n|1|0|1|2|0|0|\n|2|12|1|2|1|2|\n|3|0|1|2|0|0|\n|0|13|1|2|1|4|\n|1|0|1|2|0|0|\n|2|11|1|2|1|4|\n|3|0|1|2|0|0|\n|0|9|1|2|1|6|\n|1|0|1|2|0|0|\n|2|13|1|2|1|6|\n|3|0|1|2|0|0|\n|0|0|1|2|1|8|\n|1|0|1|2|0|0|\n|2|10|1|2|1|8|\n|3|0|1|2|0|0|\n|0|11|1|2|1|10|\n|1|0|1|2|0|0|\n|2|11|1|2|1|10|\n|3|0|1|2|0|0|\n|0|13|1|2|1|12|\n|1|0|1|2|0|0|\n|2|0|1|2|1|12|\n|3|0|1|2|0|0|\n\nThere are roughly 200 columns in the `DataFrame` so they will not be listed here. A list of the columns can be obtained with the\n`pd.DataFrame.columns` member.\n\nTo limit the amount of columns in the output DataFrame to only the columns needed by the analysis they can be specified in the `data_columns` list of\nthe daq configuration\n\n### Selecting columns in the output DataFrame\n\n\n## Writing a custom Distillery\nWriting a custom distillery is neccessary to produce Plots and other useful information (like a summary or calibration parameters) from data aquired by the daq system.\nDistilleries are executed by the Datenraffinerie after aquiring the neccesary data. Distilleries like the DAQ procedures are only run, if the output\nof the procedure is not already present.\n\nA distillery is a python class without inheritance. The class needs to have three methods `__init__(self, parameters)` to initialize the class with\nthe parameters from the analysis configuration, an `output(self, output_dir)` method that specifies the files that are produced by the Distillery and\na `run(self, data)` method that is called to process the data gathered by the daq procedure.\n\nA minimal example that produces a single empty file `summary.csv` as output and ignores the data passed to it in the run method would be:\n```python\nfrom pathlib import Path\n\nclass MyLittleDistillery(object):\n    def __init__(self, paramerets):\n        self._params = parameters\n\n    def output(self):\n        return {\n            'summary': 'summary.csv',\n            'plots': [],\n            'calibration': None\n        }\n\n    def run(self, data, output_dir):\n        op = Path(output_dir)\n        (op / self.output()['summary']).touch()\n```\n\n### Discovery of custom analyses\nThe datenraffinerie needs to find the custom Distilleries to execute them. To make this possible, the different distilleries used must be placed\ntogether into a folder. along with the python files for the distillery/distilleries the directory must contian a `__init__.py` file. This turns the\nfolder into a python module that can be imported by the datenraffinerie. During the import of a module the instructions in the `__init__.py` file\nare executed. So that the custom distillery can be found a line must be added into the `__init__.py` file. Assuming that the configuration for the\nanalysis has the following setting:\n```\npython_module_name: example_analysis_class\n```\nand we are trying to make the `MyLittleDistillery` executable by the datenraffinerie and the `MyLittleDistillery` is located in\n`my_little_distillery.py`, then the line in `__init__.py` needs to be:\n```\nfrom my_little_distillery import MyLittleDistillery as example_analysis_class\n```\n\n### Different Input Formats\nThe daq procedures can be run in `event_mode` or in `summary_mode`. In `summary_mode` the raw data is processed into aggregates together with\nstatistical information.\n\nThe `summary_mode` is the default if the `event_mode` configuration parameter is either not set or set to `False`. in summary mode the analysis\nreceives a pre loaded pandas `DataFrame` as `data` argument of the `run` function.\n\nIn `event_mode` every event that was recorded is listed in the output_data. This makes the loading the whole data into\nmemmory unfeasable (Data files that are decompressed and loaded into memmory have sizes in the hundreds of Gigabytes). To mitigate this effect the\npandas `HDFStore` object is utilized to open the file without loading the all the data into memmory. The `HDFStore` object is then passed to the\n`run` method instead of the dataframe. The `HDFStore` has a\n[select](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.HDFStore.select.html) method that can be used to query the properties of\nthe data and load sections of data into main memmory that are needed by the analysis. Due to the structure of the HDF5 file, it is currently not\npossible to load the data as an iterator. Filters or the start/stop arguments can be used to successively load only a subset of all rows into main\nmemmory. Please see the [pandas documentation](https://pandas.pydata.org/pandas-docs/stable/index.html) for more details.\nThe underying file is opened in `read only` mode so the modifications made to the data loaded into memmory do not have an effect on the underlying\nfile. Please keep in mind that the only files that are allowed to be created by an analysis/Distillery are the files specified in the `output(self)`\nmethod of the Distillery.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "datenraffinerie",
            "package_url": "https://pypi.org/project/datenraffinerie/",
            "platform": null,
            "project_url": "https://pypi.org/project/datenraffinerie/",
            "project_urls": {
                "Source": "https://gitlab.cern.ch/hgcal-daq-sw/datenraffinerie"
            },
            "release_url": "https://pypi.org/project/datenraffinerie/0.4.1/",
            "requires_dist": [
                "Click",
                "luigi",
                "pandas",
                "matplotlib",
                "numpy",
                "scipy",
                "uproot",
                "pyyaml",
                "zmq",
                "pytest",
                "awkward",
                "tables",
                "h5py",
                "numba",
                "jinja2"
            ],
            "requires_python": ">=3.6",
            "summary": "Toolset for acquiring and analysing HGCROCv3 Data",
            "version": "0.4.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15789281,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5a604eaec1c1126989e58d995b0d8674",
                    "sha256": "ede31f843dca6ccf7e78591931ff813f551f9c5e7e32414dc67c458d7e9c0593"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.4.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5a604eaec1c1126989e58d995b0d8674",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 42148,
                "upload_time": "2022-06-09T07:32:39",
                "upload_time_iso_8601": "2022-06-09T07:32:39.386571Z",
                "url": "https://files.pythonhosted.org/packages/40/83/15acbc32251ceeb6bd278598b1a65f8de25b9fc82e9699b790eedce5da5b/datenraffinerie-0.4.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "057017cb720915ef2a1aa4b41ad4041f",
                    "sha256": "4885d3a3138a8b725877432337f9a2da424172bd0678e430bb661a8ca87ee1eb"
                },
                "downloads": -1,
                "filename": "datenraffinerie-0.4.1.tar.gz",
                "has_sig": false,
                "md5_digest": "057017cb720915ef2a1aa4b41ad4041f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47697,
                "upload_time": "2022-06-09T07:32:41",
                "upload_time_iso_8601": "2022-06-09T07:32:41.877589Z",
                "url": "https://files.pythonhosted.org/packages/e5/dd/e5d466f43bf644b82b8a4a5b04fe61c174da3f51bd9955c2f624f3cfc647/datenraffinerie-0.4.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}