{
    "1.0.0": {
        "info": {
            "author": "Microsoft Corporation",
            "author_email": "accledgerdevs@microsoft.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Azure/azure-sdk-for-python",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "azure-confidentialledger",
            "package_url": "https://pypi.org/project/azure-confidentialledger/",
            "platform": null,
            "project_url": "https://pypi.org/project/azure-confidentialledger/",
            "project_urls": {
                "Bug Reports": "https://github.com/Azure/azure-sdk-for-python/issues",
                "Homepage": "https://github.com/Azure/azure-sdk-for-python",
                "Source": "https://github.com/Azure/azure-sdk-python"
            },
            "release_url": "https://pypi.org/project/azure-confidentialledger/1.0.0/",
            "requires_dist": [
                "azure-core (<2.0.0,>=1.24.0)",
                "isodate (<1.0.0,>=0.6.1)"
            ],
            "requires_python": ">=3.6",
            "summary": "Microsoft Azure Confidential Ledger Client Library for Python",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14485472,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6271b0953c485a3af9a2a795f42c505f",
                    "sha256": "c2f2d3253a23729f3fbe5335e0f5457c3c21bfcd6fb1c5cb9eb775da923e9c6f"
                },
                "downloads": -1,
                "filename": "azure_confidentialledger-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6271b0953c485a3af9a2a795f42c505f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 88787,
                "upload_time": "2022-07-19T20:07:54",
                "upload_time_iso_8601": "2022-07-19T20:07:54.857106Z",
                "url": "https://files.pythonhosted.org/packages/35/fd/c6800325b89c8c226e036d9c2d0b6ddb9f6001dcc47690fa39b9d0fa59b9/azure_confidentialledger-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "42ae42307341558342aab1550b0facab",
                    "sha256": "a4b7f5e2b44c828580d40c619519cf2b4cc6e0c1d1dcc9b886963c86c0288546"
                },
                "downloads": -1,
                "filename": "azure-confidentialledger-1.0.0.zip",
                "has_sig": false,
                "md5_digest": "42ae42307341558342aab1550b0facab",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 143019,
                "upload_time": "2022-07-19T20:07:57",
                "upload_time_iso_8601": "2022-07-19T20:07:57.477482Z",
                "url": "https://files.pythonhosted.org/packages/e7/c1/b6820f2e2504c834dbd7ff2d20f1d8a4f1e12bbd5249d179473d0dd0ad3c/azure-confidentialledger-1.0.0.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0b1": {
        "info": {
            "author": "Microsoft Corporation",
            "author_email": "accledgerdevs@microsoft.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 2.7",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Azure Confidential Ledger client library for Python\n\nAzure Confidential Ledger provides a service for logging to an immutable, tamper-proof ledger. As part of the [Azure Confidential Computing][azure_confidential_computing] portfolio, Azure Confidential Ledger runs in secure, hardware-based trusted execution environments, also known as enclaves. It is built on Microsoft Research's [Confidential Consortium Framework][ccf].\n\n[Source code][confidential_ledger_client_src] | [Package (PyPI)][pypi_package_confidential_ledger] | [API reference documentation][reference_docs] | [Product documentation][confidential_ledger_docs]\n\n## Getting started\n### Install packages\nInstall [azure-confidentialledger][pypi_package_confidential_ledger] and [azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-identity azure-confidentialledger\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 2.7, 3.5.3, or later\n* A running instance of Azure Confidential Ledger.\n* A registered user in the Confidential Ledger, typically assigned during [ARM][azure_resource_manager] resource creation, with `Administrator` privileges.\n\n### Authenticate the client\n#### Using Azure Active Directory\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref] to authenticate to the Confidential Ledger via Azure Active Directory. However, `ConfidentialLedgerClient` accepts any [azure-identity][azure_identity] credential. See the [azure-identity][azure_identity] documentation for more information about other credentials.\n\n#### Using a client certificate\nAs an alternative to Azure Active Directory, clients may choose to use a client certificate to authenticate via mutual TLS. `azure.confidentialledger.ConfidentialLedgerCertificateCredential` may be used for this purpose.\n\n### Create a client\n`DefaultAzureCredential` will automatically handle most Azure SDK client scenarios. To get started, set environment variables for the AAD identity registered with your Confidential Ledger.\n```bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\nThen, `DefaultAzureCredential` will be able to authenticate the `ConfidentialLedgerClient`.\n\nConstructing the client also requires your Confidential Ledger's URL and id, which you can get from the Azure CLI or the Azure Portal. When you have retrieved those values, please replace instances of `\"my-ledger-id\"` and `\"https://my-ledger-url.confidential-ledger.azure.com\"` in the examples below. You may also need to replace `\"https://identity.accledger.azure.com\"` with the hostname from the `identityServiceUri` in the ARM description of your ledger.\n\nBecause Confidential Ledgers use self-signed certificates securely generated and stored in an enclave, the signing certificate for each Confidential Ledger must first be retrieved from the Confidential Ledger Identity Service.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.identity_service import ConfidentialLedgerIdentityServiceClient\n\nidentity_client = ConfidentialLedgerIdentityServiceClient(\"https://identity.accledger.azure.com\")\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity.ledger_tls_certificate)\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-url.confidential-ledger.azure.com\", \n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\n## Key concepts\n### Ledger entries and transactions\nEvery write to Azure Confidential Ledger generates an immutable ledger entry in the service. Writes, also referred to as transactions, are uniquely identified by transaction ids that increment with each write. Once written, ledger entries may be retrieved at any time.\n\n### Receipts\nState changes to the Confidential Ledger are saved in a data structure called a Merkle tree. To cryptographically verify that writes were correctly saved, a Merkle proof, or receipt, can be retrieved for any transaction id.\n\n### Sub-ledgers\nWhile most use cases will involve one ledger, we provide the sub-ledger feature in case semantically or logically different groups of data need to be stored in the same Confidential Ledger.\n\nLedger entries are retrieved by their sub-ledger identifier. The Confidential Ledger will always assume a constant, service-determined sub-ledger id for entries submitted without a sub-ledger specified.\n\n### Users\nUsers are managed directly with the Confidential Ledger instead of through Azure. Users may be AAD-based, identified by their AAD object id, or certificate-based, identified by their PEM certificate fingerprint.\n\n### Confidential computing\n[Azure Confidential Computing][azure_confidential_computing] allows you to isolate and protect your data while it is being processed in the cloud. Azure Confidential Ledger runs on Azure Confidential Computing virtual machines, thus providing stronger data protection with encryption of data in use.\n\n### Confidential Consortium Framework\nAzure Confidential Ledger is built on Microsoft Research's open-source [Confidential Consortium Framework (CCF)][ccf]. Under CCF, applications are managed by a consortium of members with the ability to submit proposals to modify and govern application operation. In Azure Confidential Ledger, Microsoft Azure owns a member identity, allowing it to perform governance actions like replacing unhealthy nodes in the Confidential Ledger, or upgrading the enclave code.\n\n## Examples\nThis section contains code snippets covering common tasks:\n* [Append a ledger entry](#append-entry \"Append a ledger entry\")\n* [Get a receipt](#get-receipt \"Get a receipt\")\n* [Using sub-ledgers](#using-sub-ledgers \"Using sub-ledgers\")\n* [Retrieving ledger entries](#retrieving-ledger-entries \"Retrieving ledger entries\")\n* [Making a ranged query](#making-a-ranged-query \"Making a ranged query\")\n* [Managing users](#managing-users \"Managing users\")\n* [Using certificate authentication](#using-certificate-authentication \"Using certificate authentication\")\n* [Verifying service details](#verifying-service-details \"Verifying service details\")\n* [Asynchronously get a ledger entry](#asynchronously-get-a-ledger-entry \"Asynchronously get a ledger entry\")\n* [Asynchronously get a range of ledger entries](#asynchronously-get-a-range-of-ledger-entries \"Asynchronously get a range of ledger entries\")\n\n\n### Append entry\nData that needs to be stored immutably in a tamper-proof manner can be saved to Azure Confidential Ledger by appending an entry to the ledger.\n\n```python\nfirst_append_result = ledger_client.append_to_ledger(entry_contents=\"Hello world!\")\nprint(first_append_result.transaction_id)\n```\n\nSince Confidential Ledger is a distributed system, rare transient failures may cause writes to be lost. For entries that must be preserved, it is advisable to verify that the write became durable. Waits are blocking calls.\n```python\nfrom azure.confidentialledger import TransactionState\nledger_client.wait_until_durable(transaction_id=first_append_result.transaction_id)\nassert ledger_client.get_transaction_status(\n    transaction_id=first_append_result.transaction_id\n).state is TransactionState.COMMITTED\n\n# Alternatively, a client may wait when appending.\nappend_result = ledger_client.append_to_ledger(\n    entry_contents=\"Hello world, again!\", wait_for_commit=True\n)\nassert ledger_client.get_transaction_status(\n    transaction_id=append_result.transaction_id\n).state is TransactionState.COMMITTED\n```\n\n### Get receipt\nA receipt can be retrieved for any transaction id to provide cryptographic proof of the contents of the transaction.\n```python\nreceipt = ledger_client.get_transaction_receipt(\n    transaction_id=append_result.transaction_id\n)\nprint(receipt.contents)\n```\n\n### Using sub-ledgers\nClients can write to different sub-ledgers to separate logically-distinct data.\n```python\nledger_client.append_to_ledger(\n    entry_contents=\"Hello from Alice\", sub_ledger_id=\"Alice\"\n)\nledger_client.append_to_ledger(\n    entry_contents=\"Hello from Bob\", sub_ledger_id=\"Bob\"\n)\n```\n\nWhen no sub-ledger id is specified on method calls, the Confidential Ledger service will assume a constant, service-determined sub-ledger id.\n```python\nappend_result = ledger_client.append_to_ledger(entry_contents=\"Hello world?\", wait_for_commit=True)\n\n# The append result contains the sub-ledger id assigned.\nentry_by_subledger = ledger_client.get_ledger_entry(\n    transaction_id=append_result.transaction_id,\n    sub_ledger_id=append_result.sub_ledger_id\n)\nassert entry_by_subledger.contents == \"Hello world?\"\n\n# When a ledger entry is retrieved without a sub-ledger specified,\n# the service default is used.\nentry = ledger_client.get_ledger_entry(transaction_id=append_result.transaction_id)\nassert entry.contents == entry_by_subledger.contents\nassert entry.sub_ledger_id == entry_by_subledger.sub_ledger_id\n```\n\n### Retrieving ledger entries\nLedger entries are retrieved from sub-ledgers. When a transaction id is specified, the returned value is the value contained in the specified sub-ledger at the point in time identified by the transaction id. If no transaction id is specified, the latest available value is returned.\n```python\nappend_result = ledger_client.append_to_ledger(entry_contents=\"Hello world 0\")\nledger_client.append_to_ledger(entry_contents=\"Hello world 1\")\n\nsubledger_append_result = ledger_client.append_to_ledger(\n    entry_contents=\"Hello world sub-ledger 0\",\n    sub_ledger_id=\"sub-ledger\"\n)\nledger_client.append_to_ledger(\n    entry_contents=\"Hello world sub-ledger 1\",\n    sub_ledger_id=\"sub-ledger\",\n    wait_for_commit=True\n)\n\n# The ledger entry written at 'append_result.transaction_id'\n# is retrieved from the default sub-ledger.\nentry = ledger_client.get_ledger_entry(transaction_id=append_result.transaction_id)\nassert entry.contents == \"Hello world 0\"\n\n# This is the latest entry available in the default sub-ledger.\nlatest_entry = ledger_client.get_ledger_entry()\nassert latest_entry.contents == \"Hello world 1\"\n\n# The ledger entry written at 'subledger_append_result.transaction_id'\n# is retrieved from the sub-ledger 'sub-ledger'.\nsubledger_entry = ledger_client.get_ledger_entry(\n    transaction_id=subledger_append_result.transaction_id,\n    sub_ledger_id=\"sub-ledger\"\n)\nassert subledger_entry.contents == \"Hello world sub-ledger 0\"\n\n# This is the latest entry available in the sub-ledger 'sub-ledger'.\nsubledger_latest_entry = ledger_client.get_ledger_entry(\n    sub_ledger_id=\"sub-ledger\"\n)\nassert subledger_latest_entry.contents == \"Hello world sub-ledger 1\"\n```\n\n### Making a ranged query\nLedger entries in a sub-ledger may be retrieved over a range of transaction ids.\n```python\nranged_result = ledger_client.get_ledger_entries(\n    from_transaction_id=first_append_result.transaction_id\n)\nfor entry in ranged_result:\n    print(f\"Transaction id {entry.transaction_id} contents: {entry.contents}\")\n```\n\n### Managing users\nUsers with `Administrator` privileges can manage users of the Confidential Ledger directly with the Confidential Ledger itself. Available roles are `Reader` (read-only), `Contributor` (read and write), and `Administrator` (read, write, and add or remove users).\n\n```python\nfrom azure.confidentialledger import LedgerUserRole\nuser_id = \"some AAD object id\"\nuser = ledger_client.create_or_update_user(\n    user_id, LedgerUserRole.CONTRIBUTOR\n)\n# A client may now be created and used with AAD credentials for the user identified by `user_id`.\n\nuser = ledger_client.get_user(user_id)\nassert user.id == user_id\nassert user.role == LedgerUserRole.CONTRIBUTOR\n\nledger_client.delete_user(user_id)\n\n# For a certificate-based user, their user ID is the fingerprint for their PEM certificate.\nuser_id = \"PEM certificate fingerprint\"\nuser = ledger_client.create_or_update_user(\n    user_id, LedgerUserRole.READER\n)\n```\n\n### Using certificate authentication\nClients may authenticate with a client certificate in mutual TLS instead of via an Azure Active Directory token. `ConfidentialLedgerCertificateCredential` is provided for such clients.\n```python\nfrom azure.confidentialledger import ConfidentialLedgerClient, ConfidentialLedgerCertificateCredential\nfrom azure.confidentialledger.identity_service import ConfidentialLedgerIdentityServiceClient\n\nidentity_client = ConfidentialLedgerIdentityServiceClient(\"https://identity.accledger.azure.com\")\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity.ledger_tls_certificate)\n\ncredential = ConfidentialLedgerCertificateCredential(\"path to user certificate PEM\")\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-url.confidential-ledger.azure.com\", \n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n```\n\n### Verifying service details\nOne may want to validate details about the Confidential Ledger for a variety of reasons. For example, you may want to view details about how Microsoft may manage your Confidential Ledger as part of [Confidential Consortium Framework governance](https://microsoft.github.io/CCF/main/governance/index.html), or verify that your Confidential Ledger is indeed running in a secure enclave. A number of client methods are provided for these use cases.\n```python\nconsortium = ledger_client.get_consortium()\n# Consortium members can manage and alter the Confidential Ledger,\n# such as by replacing unhealthy nodes.\nfor member in consortium.members:\n    print(member.certificate)\n    print(member.id)\n\nimport hashlib\n# The constitution is a collection of JavaScript code that\n# defines actions available to members,\n# and vets proposals by members to execute those actions.\nconstitution = ledger_client.get_constitution()\nassert constitution.digest.lower() == \\\n    hashlib.sha256(constitution.contents.encode()).hexdigest().lower()\nprint(constitution.contents)\nprint(constitution.digest)\n\n# Enclave quotes contain material that can be used to\n# cryptographically verify the validity and contents\n# of an enclave.\nledger_enclaves = ledger_client.get_enclave_quotes()\nassert ledger_enclaves.source_node in ledger_enclaves.quotes\nfor node_id, quote in ledger_enclaves.quotes.items():\n    assert node_id == quote.node_id\n    print(quote.node_id)\n    print(quote.mrenclave)\n    print(quote.raw_quote)\n    print(quote.version)\n```\n\n[Microsoft Azure Attestation Service](https://azure.microsoft.com/services/azure-attestation/) is one provider of enclave quotes.\n\n### Async API\nThis library includes a complete async API supported on Python 3.5+. To use it, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp). See the [azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/core/azure-core/CLIENT_LIBRARY_DEVELOPER.md#transport) for more information.\n\nAn async client is obtained from `azure.confidentialledger.aio`. Methods have the same names and signatures as the synchronous client.\n\nAsync clients should be closed when they're no longer needed. These objects are async context managers and define async `close` methods. For example:\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.confidentialledger.aio import ConfidentialLedgerClient\nfrom azure.confidentialledger.identity_service.aio import ConfidentialLedgerIdentityServiceClient\n\nidentity_client = ConfidentialLedgerIdentityServiceClient(\"https://identity.accledger.azure.com\")\nnetwork_identity = await identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity.ledger_tls_certificate)\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-url.confidential-ledger.azure.com\", \n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\n# Call close when the client and credential are no longer needed.\nawait client.close()\nawait credential.close()\n\n# Alternatively, use them as async context managers (contextlib.AsyncExitStack can help).\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-url.confidential-ledger.azure.com\", \n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\nasync with client:\n    async with credential:\n        pass\n```\n\n#### Asynchronously get a ledger entry\nLedger entries may be retrieved with the async client.\n```python\nentry = await self.client.get_ledger_entry()\nprint(entry.contents)\nprint(entry.sub_ledger_id)\n```\n\n#### Asynchronously get a range of ledger entries\nLedger entries may be retrieved over a range with the async client.\n```python\nquery_result = client.get_ledger_entries(\n    from_transaction_id=\"12.3\"\n)\nasync for entry in query_result:\n    print(entry.transaction_id)\n    print(entry.contents)\n```\n\n## Troubleshooting\n### General\nConfidential Ledger clients raise exceptions defined in [azure-core][azure_core_exceptions]. For example, if you try to get a transaction that doesn't exist, `ConfidentialLedgerClient` raises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.core.exceptions import ResourceNotFoundError\nfrom azure.identity import DefaultAzureCredential\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.identity_service import ConfidentialLedgerIdentityServiceClient\n\nidentity_client = ConfidentialLedgerIdentityServiceClient(\"https://identity.accledger.azure.com\")\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity.ledger_tls_certificate)\n\ncredential = DefaultAzureCredential()\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-url.confidential-ledger.azure.com\", \n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name\n)\n\ntry:\n    ledger_client.get_ledger_entry(transaction_id=\"10000.100000\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging. Basic information about HTTP sessions (URLs, headers, etc.) is logged at INFO level.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted headers, can be enabled on a client with the `logging_enable` argument:\n```python\nimport logging\nimport sys\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.confidentialledger import ConfidentialLedgerClient\nfrom azure.confidentialledger.identity_service import ConfidentialLedgerIdentityServiceClient\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nidentity_client = ConfidentialLedgerIdentityServiceClient(\"https://identity.accledger.azure.com\")\nnetwork_identity = identity_client.get_ledger_identity(\n    ledger_id=\"my-ledger-id\"\n)\n\nledger_tls_cert_file_name = \"ledger_certificate.pem\"\nwith open(ledger_tls_cert_file_name, \"w\") as cert_file:\n    cert_file.write(network_identity.ledger_tls_certificate)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nledger_client = ConfidentialLedgerClient(\n    endpoint=\"https://my-ledger-url.confidential-ledger.azure.com\", \n    credential=credential,\n    ledger_certificate_path=ledger_tls_cert_file_name,\n    logging_enable=True\n)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation, even when it isn't enabled for the client:\n```python\nledger_client.get_ledger_entry(transaction_id=\"12.3\", logging_enable=True)\n```\n\n## Next steps\n###  Additional Documentation\nFor more extensive documentation on Azure Confidential Ledger, see the\n[API reference documentation][reference_docs]. You may also read more about Microsoft Research's open-source [Confidential Consortium Framework][ccf].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][code_of_conduct].\nFor more information, see the\n[Code of Conduct FAQ][code_of_conduct_faq] or\ncontact opencode@microsoft.com with any additional questions or comments.\n\n\n[azure_cli]: https://docs.microsoft.com/cli/azure\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_confidential_computing]: https://azure.microsoft.com/solutions/confidential-compute\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_resource_manager]: https://docs.microsoft.com/azure/azure-resource-manager/management/overview\n[azure_sub]: https://azure.microsoft.com/free\n[ccf]: https://github.com/Microsoft/CCF\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct\n[code_of_conduct_faq]: https://opensource.microsoft.com/codeofconduct/faq\n[confidential_ledger_client_src]: https://aka.ms/azsdk/python/confidentialledger/src\n[confidential_ledger_docs]: https://aka.ms/confidentialledger-servicedocs\n[default_cred_ref]: https://aka.ms/azsdk/python/identity/docs#azure.identity.DefaultAzureCredential\n[pip]: https://pypi.org/project/pip/\n[pypi_package_confidential_ledger]: https://aka.ms/azsdk/python/confidentialledger/pypi\n[reference_docs]: https://aka.ms/azsdk/python/confidentialledger/ref-docs\n\n\n# Release History\n\n## 1.0.0b1 (2021-05-12)\n\n- This is the initial release of the Azure Confidential Ledger library.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Azure/azure-sdk-for-python",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "azure-confidentialledger",
            "package_url": "https://pypi.org/project/azure-confidentialledger/",
            "platform": "",
            "project_url": "https://pypi.org/project/azure-confidentialledger/",
            "project_urls": {
                "Homepage": "https://github.com/Azure/azure-sdk-for-python"
            },
            "release_url": "https://pypi.org/project/azure-confidentialledger/1.0.0b1/",
            "requires_dist": [
                "azure-common (~=1.1)",
                "azure-core (<2.0.0,>=1.2.2)",
                "msrest (>=0.5.0)",
                "azure-nspkg ; python_version<'3.0'",
                "enum34 (>=1.0.4) ; python_version<'3.4'",
                "typing ; python_version<'3.5'"
            ],
            "requires_python": "",
            "summary": "Microsoft Azure Confidential Ledger Client Library for Python",
            "version": "1.0.0b1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14485472,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1f40db33e28e697c3ab2303528c390d4",
                    "sha256": "cf4ed794d1035652c804df4bcbe5ab3b5e336c090a11283e02a6424ac5d41ba7"
                },
                "downloads": -1,
                "filename": "azure_confidentialledger-1.0.0b1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1f40db33e28e697c3ab2303528c390d4",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": null,
                "size": 69304,
                "upload_time": "2021-05-12T17:20:43",
                "upload_time_iso_8601": "2021-05-12T17:20:43.214455Z",
                "url": "https://files.pythonhosted.org/packages/bf/57/3c7c5a4f6eca3734fc00eae54624e9aa8f185ba06229e1581ee1e8ae57fe/azure_confidentialledger-1.0.0b1-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "852757bad14ca605e861996e183ef0de",
                    "sha256": "b5ede5302602e326e4d74f1a468c4e18338666250750e0c1f857fcbccf11f2e6"
                },
                "downloads": -1,
                "filename": "azure-confidentialledger-1.0.0b1.zip",
                "has_sig": false,
                "md5_digest": "852757bad14ca605e861996e183ef0de",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 104773,
                "upload_time": "2021-05-12T17:20:45",
                "upload_time_iso_8601": "2021-05-12T17:20:45.800683Z",
                "url": "https://files.pythonhosted.org/packages/ca/1b/4615140f7be3853002e0fd379873d7612fcd6b9d4dedb9bce163069a751a/azure-confidentialledger-1.0.0b1.zip",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}