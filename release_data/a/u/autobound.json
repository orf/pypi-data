{
    "0.1": {
        "info": {
            "author": "",
            "author_email": "AutoBound authors <autobound@google.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only"
            ],
            "description": "# AutoBound: Automatically Deriving Upper and Lower Bounds on Arbitrary Functions\n\nAutoBound is a generalization of automatic differentiation.  In addition to\ncomputing a Taylor polynomial approximation of a function, it computes upper\nand lower bounds that are guaranteed to hold over a user-specified\n_trust region_.\n\nAs an example, here are the quadratic upper and lower bounds AutoBound computes\nfor the function `f(x) = 1.5*exp(3*x) - 25*(x**2)`, centered at `0.5`, and\nvalid over the trust region `[0, 1]`.\n\n<div align=\"center\">\n<img src=\"autobound/example_bounds.png\" alt=\"Example quadratic upper and lower bounds\"></img>\n</div>\n\nThe code to compute the bounds shown in this plot looks like this:\n\n```python\nimport autobound.jax as ab\nimport jax.numpy as jnp\n\nf = lambda x: 1.5*jnp.exp(3*x) - 25*x**2\nx0 = .5\ntrust_region = (0, 1)\n# Compute quadratic upper and lower bounds on f.\nbounds = ab.taylor_bounds(f, 2)(x0, trust_region)\n# bounds.upper(1) == 5.1283045 == f(1)\n# bounds.lower(0) == 1.5 == f(0)\n# bounds.coefficients == (0.47253323, -4.8324013, (-5.5549355, 28.287888))\n```\n\nThese bounds can be used for:\n * computing learning rates that are guaranteed to reduce a loss function,\n * upper and lower bounding integrals,\n * proving optimality guarantees in global optimization,\n * and more.\n\nExample code coming soon!\n\nUnder the hood, AutoBound computes these bounds using an interval arithmetic\nvariant of Taylor-mode automatic differentiation.  Accordingly, the memory\nrequirements are linear in the input dimension, and the method is only\npractical for functions with low-dimensional inputs.  A reverse-mode algorithm\nthat efficiently handles high-dimensional inputs is under development.\n\nA paper describing AutoBound will be released soon.\n\n*This is not an officially supported Google product.*\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "autobound",
            "package_url": "https://pypi.org/project/autobound/",
            "platform": null,
            "project_url": "https://pypi.org/project/autobound/",
            "project_urls": {
                "homepage": "https://github.com/google/autobound",
                "repository": "https://github.com/google/autobound"
            },
            "release_url": "https://pypi.org/project/autobound/0.1/",
            "requires_dist": [
                "jax",
                "pytest ; extra == \"dev\"",
                "pytest-xdist ; extra == \"dev\"",
                "pylint>=2.6.0 ; extra == \"dev\"",
                "pyink ; extra == \"dev\""
            ],
            "requires_python": ">=3.7",
            "summary": "",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16014010,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "540bd5751dc3d19891d8ff11065351bc",
                    "sha256": "848a321458b4d5df460b5b27fcba753afb954f6e5d968dd366254ad71f49ef80"
                },
                "downloads": -1,
                "filename": "autobound-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "540bd5751dc3d19891d8ff11065351bc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 30196,
                "upload_time": "2022-12-06T23:54:57",
                "upload_time_iso_8601": "2022-12-06T23:54:57.344096Z",
                "url": "https://files.pythonhosted.org/packages/2b/15/158059c9dd326a516cefc7229279cfd23f0d85c7599f75c191e276b47bc1/autobound-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "49a0a278cb743e491ec358d61ed0676d",
                    "sha256": "3edf3e0e63e5049dfd46d909ccc78a8bb733afa7197b38a3ebbf7a0699ccaf78"
                },
                "downloads": -1,
                "filename": "autobound-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "49a0a278cb743e491ec358d61ed0676d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 25485,
                "upload_time": "2022-12-06T23:54:59",
                "upload_time_iso_8601": "2022-12-06T23:54:59.246522Z",
                "url": "https://files.pythonhosted.org/packages/1e/0a/3561847221ad50ff15871678680275668d5c05e312c964337ddae35da369/autobound-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}