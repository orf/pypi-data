{
    "1.0.6": {
        "info": {
            "author": "Adrian Zapa\u0142a",
            "author_email": "adrian.zapala@outlook.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aznt",
            "package_url": "https://pypi.org/project/aznt/",
            "platform": null,
            "project_url": "https://pypi.org/project/aznt/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/aznt/1.0.6/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Number theory library",
            "version": "1.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16142440,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8667e1ab3b7dd2e137c138c0ca67b66e",
                    "sha256": "1e2f6c9df95077140e84cb8f419fd341b808795f6aa26924ae1aa4c871a804fd"
                },
                "downloads": -1,
                "filename": "aznt-1.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "8667e1ab3b7dd2e137c138c0ca67b66e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4360,
                "upload_time": "2022-12-16T17:47:17",
                "upload_time_iso_8601": "2022-12-16T17:47:17.330719Z",
                "url": "https://files.pythonhosted.org/packages/54/c6/5aedb7286a22bd421879d5467772fa1b1216d3e5f108c8bf27cf29ca5374/aznt-1.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.7": {
        "info": {
            "author": "Adrian Zapa\u0142a",
            "author_email": "adrian.zapala@outlook.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "## `aznt` - From A to Z Number Theory\r\n* Number Theory library for Python with prime numbers.\r\n* You can pass to author's GitHub at\r\n[adrianzapala.github.io](https://adrianzapala.github.io/).\r\n## Usage\r\n\r\nThe library `aznt` includes package `aznt` with two modules: `numbers` \r\nand `primes`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n\r\n```python\r\nfrom aznt.numbers import\r\nfrom aznt.primes import\r\n```\r\n\r\n## `numtheory` module Functions\r\n\r\n<span style=\"font-size: 22px\">`factorization(n)`</span><br>\r\nThis function generates prime factors of a number from a function argument.<br>\r\nTime complexity: `O(n/2)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 1123243`<br>\r\noutput: `[11, 9283]`\r\n* For `n = 20570952`<br>\r\noutput: `[2, 3, 17, 127, 397]`\r\n\r\n<span style=\"font-size: 22px\">`dividers_naive(n)`</span><br>\r\nThis function generates divisors of a number from a function argument. It returns \r\na list of these divisors.<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 1123243`<br>\r\noutput: `[1, 11, 121, 9283, 102113, 1123243]`\r\n* For `n = 20570952`<br>\r\noutput:\r\n```python\r\n[1, 2, 3, 4, 6, 8, 12, 17, 24, 34, 51, 68, 102, 127, 136, 204, 254, 381, 397, 408, 508, 762, 794, 1016, 1191, 1524, 1588, 2159, 2382, 3048, 3176, 4318, 4764, 6477, 6749, 8636, 9528, 12954, 13498, 17272, 20247, 25908, 26996, 40494, 50419, 51816, 53992, 80988, 100838, 151257, 161976, 201676, 302514, 403352, 605028, 857123, 1210056, 1714246, 2571369, 3428492, 5142738, 6856984, 10285476, 20570952]\r\n```\r\n\r\n<span style=\"font-size: 22px\">`dividers_opt(n)`</span><br>\r\nThis function calculates divisors in pairs, which multiplication product creates \r\na number from function argument. If the argument is default (`pairs=False`) \r\nand also if the numbers from these pairs are different it puts these pairs on the \r\nlist and then sort list (if the numbers are equal, it's placing only one number on the list). \r\nAlternatively, if the argument is `True`  it join pairs of divisors (may be \r\nequal) into tuples and then append them into a list.<br>\r\nThis function is working pretty much faster than `dividers_naive()` function.<br>\r\nTime complexity: `O(sqrt(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 100` and default argument `pairs=False`<br>\r\noutput: `[1, 2, 4, 5, 10, 20, 25, 50, 100]`\r\n* For `n = 100` and argument `pairs=True`:<br>\r\noutput: `[(1, 100), (2, 50), (4, 25), (5, 20), (10, 10)]`\r\n\r\n<span style=\"font-size: 22px\">`tau(n)`</span><br>\r\nThis function counts the number of divisors of an integer (including 1 and the number itself).<br>\r\nTime complexity: `O(sqrt(n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 6`<br>\r\noutput: `4`\r\n* For `n = 4356`<br>\r\noutput: `27`\r\n* For `n = 12499674`<br>\r\noutput: `16`\r\n\r\n<span style=\"font-size: 22px\">`sigma(n)`</span><br>\r\nReturns the sum of divisors of an integer \r\n(including 1 and the number itself).<br>\r\nTime complexity: `O(sqrt(n)))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 3`<br>\r\noutput: `4`\r\n* For `n = 343532`<br>\r\noutput: `687120`\r\n\r\n<span style=\"font-size: 22px\">`s(n)`</span><br>\r\nReturns the sum of proper divisors of an integer \r\n(excluding `n` itself).<br>\r\nTime complexity: `O(sqrt(n)))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 3`<br>\r\noutput: `1`\r\n* For `n = 4438`<br>\r\noutput: `3194`\r\n\r\n<span style=\"font-size: 22px\">`gcd_mod(a, b)`</span><br>\r\nReturns Greatest Common Divisor (GCD) of two positive integers using Euclidean algorithm \r\nwith division.<br>\r\nTime complexity: `O(log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `a = 36`, `b = 882`<br>\r\noutput: `18`\r\n* For `a = 363`, `b = 1287`<br>\r\noutput: `33`\r\n* For `a = 23`, `b = 3456`<br>\r\noutput: `1`\r\n* For `a = 484`, `b = 56`<br>\r\noutput: `4`\r\n\r\n<span style=\"font-size: 22px\">`gcd_substract(a, b)`</span><br>\r\nReturns Greatest Common Divisor (GCD) of two positive integers using Euclidean algorithm \r\nwith substraction.<br>\r\nTime complexity: `O(n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `a = 36`, `b = 882`<br>\r\noutput: `18`\r\n* For `a = 363`, `b = 1287`<br>\r\noutput: `33`\r\n* For `a = 23`, `b = 3456`<br>\r\noutput: `1`\r\n* For `a = 484`, `b = 56`<br>\r\noutput: `4`\r\n\r\n<span style=\"font-size: 22px\">`lcm(a, b)`</span><br>\r\nReturns lowest common multiple (LCM) of two positive integers.<br>\r\nTime complexity: `O(log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `a = 36`, `b = 882`<br>\r\noutput: `1764`\r\n* For `a = 363`, `b = 1287`<br>\r\noutput: `14157`\r\n* For `a = 23`, `b = 3456`<br>\r\noutput: `79488`\r\n* For `a = 484`, `b = 56`<br>\r\noutput: `6776`\r\n\r\n<span style=\"font-size: 22px\">`totient(n)`</span><br>\r\nReturns Euler's totient function which counts the positive integers up to \r\na given integer `n` that are relatively prime to `n`.<br>\r\nTime complexity: `O(log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 24`<br>\r\noutput: `8`\r\n* For `n = 4`<br>\r\noutput: `2`\r\n\r\n<span style=\"font-size: 22px\">`is_gcd_eq_1(n, floor, ceil)`</span><br>\r\nReturns a tuple. First\r\nelement of a tuple is a quantity of pairs of numbers which\r\nare relatively prime to themselves, the second element is a density of them and \r\nthe third element is a list of nested lists of them.\r\nAll pairs are randomly generated from `floor`\r\nto `ceil` of numbers range. Based on that a variety of different \r\noutputs can be possible for the same parameters.<br>\r\nTime complexity: `O(n log n))`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 25, floor=100, ceil=10000`<br>\r\noutput: \r\n```python\r\n(21, 0.84, [[87288, 60167], [50272, 56491], [317, 93386], [71392, 73227], [81347, 58682], [88479, 53321], [42131, 11462], [73600, 78491], [51926, 3909], [94058, 59599], [5961, 25718], [41527, 30737], [1474, 2565], [46156, 82891], [3005, 63897], [75574, 51921], [78593, 19386], [22184, 99227], [62829, 40448], [71300, 61527], [10529, 90699]])\r\n```\r\n* For `n = 25, floor=100, ceil=10000`<br>\r\noutput:\r\n```python \r\n(15, 0.6, [[74621, 30328], [82239, 87311], [53683, 747], [38419, 12159], [60197, 15286], [84593, 42264], [20464, 27931], [97324, 63081], [33045, 25502], [44282, 69151], [38777, 54202], [20345, 70474], [95217, 86510], [59792, 58401], [55086, 76769]])\r\n```\r\n\r\n<span style=\"font-size: 22px\">`pnt(n)`</span><br>\r\nReturns the asymptotic distribution of the prime numbers among \r\nthe positive integers.<br>\r\nTime complexity: `O(log n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For `n = 1000`<br>\r\noutput: `144.76482730108395` (real value: 168)\r\n* For `n = 1000000`<br>\r\noutput: `72382.41365054197` (real value: 78498)\r\n\r\n<span style=\"font-size: 22px\">`basel_problem(max, n=2)`</span><br>\r\nReturns precise summation of the reciprocals of the squares of the \r\nnatural numbers, i.e. the precise sum of the infinite series. \r\nThe sum of the series is approximately \r\nequal to 1.644934 (pi^2 / 6 for `n` = 2).<br>\r\nTime complexity: `O(n)`.<br>\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For default parameter `n = 2` and `max = 345567`<br>\r\noutput: `1.6449311730576142`\r\n* For parameter `n = 4` and `max = 2568`<br>\r\noutput: `1.0823232336914694`\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aznt",
            "package_url": "https://pypi.org/project/aznt/",
            "platform": null,
            "project_url": "https://pypi.org/project/aznt/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/aznt/1.0.7/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Number theory library",
            "version": "1.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16142440,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "812d6922dc4880b22e787487c46a0db8",
                    "sha256": "7f3dd14832b3a2639848483b20fa774cae8d5b1f137722eed1c2d0a1392f5958"
                },
                "downloads": -1,
                "filename": "aznt-1.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "812d6922dc4880b22e787487c46a0db8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4757,
                "upload_time": "2022-12-18T20:22:26",
                "upload_time_iso_8601": "2022-12-18T20:22:26.543712Z",
                "url": "https://files.pythonhosted.org/packages/02/d8/e04e3e2260b1709b4b2388dba0837e5bfe89cac5a36cb132dc408be8143e/aznt-1.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}