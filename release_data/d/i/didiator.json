{
    "0.1.0": {
        "info": {
            "author": "SamWarden",
            "author_email": "SamWardenSad@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Typing :: Typed"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SamWarden/didiator",
            "keywords": "didiator,mediatr,mediator,CQRS,DI",
            "license": "MIT",
            "maintainer": "SamWarden",
            "maintainer_email": "SamWardenSad@gmail.com",
            "name": "didiator",
            "package_url": "https://pypi.org/project/didiator/",
            "platform": null,
            "project_url": "https://pypi.org/project/didiator/",
            "project_urls": {
                "Bug Tracker": "https://github.com/SamWarden/didiator/issues",
                "Homepage": "https://github.com/SamWarden/didiator",
                "Repository": "https://github.com/SamWarden/didiator"
            },
            "release_url": "https://pypi.org/project/didiator/0.1.0/",
            "requires_dist": [
                "di[anyio] (>=0.73.0,<0.74.0); extra == \"di\""
            ],
            "requires_python": ">=3.10,<4.0",
            "summary": "A library that implements the Mediator pattern and uses DI library",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16047747,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7717ddc09b0b102c95bdeb8f6c14eec9",
                    "sha256": "954e50a628476a5a8d3cb2f82543d3ff5172c6d1f200c4616a9438d7af872b11"
                },
                "downloads": -1,
                "filename": "didiator-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7717ddc09b0b102c95bdeb8f6c14eec9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10,<4.0",
                "size": 16644,
                "upload_time": "2022-12-09T11:45:01",
                "upload_time_iso_8601": "2022-12-09T11:45:01.045067Z",
                "url": "https://files.pythonhosted.org/packages/64/6b/32e9baee2149ec29ecda0100ed54664581ac884c9b17ccb0e763454a3946/didiator-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f43852562b545cc7a80b7240f6e1845f",
                    "sha256": "4c8a618cb6f3df8a8bfcfef38987d55e7f27362bb980cba1bc6b80182f5c8a44"
                },
                "downloads": -1,
                "filename": "didiator-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "f43852562b545cc7a80b7240f6e1845f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10,<4.0",
                "size": 10924,
                "upload_time": "2022-12-09T11:45:04",
                "upload_time_iso_8601": "2022-12-09T11:45:04.298909Z",
                "url": "https://files.pythonhosted.org/packages/6a/c1/5fbdc6c8dfe2b3c41d8e740e0a93cb833672d7bfd167a2ee7a3cd7d1e9ac/didiator-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "SamWarden",
            "author_email": "SamWardenSad@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Typing :: Typed"
            ],
            "description": "========\nDidiator\n========\n\n``didiator`` is an asynchronous library that implements the Mediator pattern and\nuses the `DI <https://www.adriangb.com/di/>`_ library to help you to inject dependencies to called handlers\n\nThis library is inspired by the `MediatR <https://github.com/jbogard/MediatR>`_ used in C#\nand follows CQRS principles\n\nInstallation\n============\n\nDidiator is available on pypi: https://pypi.org/project/didiator\n\n.. code-block:: bash\n\n    pip install -U \"didiator[di]\"\n\nIt will install ``didiator`` with its optional DI dependency that is necessary to use ``DiMiddleware`` and ``DiBuilder``\n\nExamples\n========\n\nYou can find examples in `this folder <https://github.com/SamWarden/didiator/tree/dev/examples>`_\n\nCreate Commands and Queries with handlers for them\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    @dataclass\n    class CreateUser(Command[int]):\n        user_id: int\n        username: str\n\n    class CreateUserHandler(CommandHandler[CreateUser, int]):\n        def __init__(self, user_repo: UserRepo) -> None:\n            self._user_repo = user_repo\n\n        async def __call__(self, command: CreateUser) -> int:\n            user = User(id=command.user_id, username=command.username)\n            await self._user_repo.add_user(user)\n            await self._user_repo.commit()\n            return user.id\n\nYou can use functions as handlers\n\n.. code-block:: python\n\n    @dataclass\n    class GetUserById(Query[User]):\n        user_id: int\n\n    async def handle_get_user_by_id(query: GetUserById, user_repo: UserRepo) -> User:\n        user = await self._user_repo.get_user_by_id(user)\n        return user\n\nCreate DiBuilder\n~~~~~~~~~~~~~~~~\n\n``DiBuilder`` is a facade for Container from DI with caching of `solving <https://www.adriangb.com/di/0.73.0/solving/>`_\n\n``di_scopes`` is a sequence with the order of `scopes <https://www.adriangb.com/di/0.73.0/scopes/>`_\n\n``di_builder.bind(...)`` will `bind <https://www.adriangb.com/di/0.73.0/binds/>`_ ``UserRepoImpl`` type to ``UserRepo`` protocol\n\n.. code-block:: python\n\n    di_scopes = (\"request\",)\n    di_builder = DiBuilder(Container(), AsyncExecutor(), di_scopes)\n    di_builder.bind(bind_by_type(Dependent(UserRepoImpl, scope=\"request\"), UserRepo))\n\nCreate Mediator and register handlers to it\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate dispatchers with their middlewares and use them to initialize the ``MediatorImpl``\n\n``cls_scope`` is a scope that will be used to bind class Command/Query handlers initialized during request handling\n\n.. code-block:: python\n\n    dispatchers_middlewares = (LoggingMiddleware(), DiMiddleware(di_builder, cls_scope=\"request\"))\n    command_dispatcher = CommandDispatcherImpl(middlewares=dispatchers_middlewares)\n    query_dispatcher = QueryDispatcherImpl(middlewares=dispatchers_middlewares)\n\n    mediator = MediatorImpl(command_dispatcher, query_dispatcher)\n\n    # CreateUserHandler is not initialized during registration\n    mediator.register_command_handler(CreateUser, CreateUserHandler)\n    mediator.register_query_handler(GetUserById, handle_get_user_by_id)\n\nMain usage\n~~~~~~~~~~\n\nEnter the ``\"request\"`` scope that was registered earlier and create a new Mediator with ``di_state`` bound\n\nUse ``mediator.send(...)`` for commands and ``mediator.query(...)`` for queries\n\n.. code-block:: python\n\n        async with di_builder.enter_scope(\"request\") as di_state:\n            scoped_mediator = mediator.bind(di_state=di_state)\n\n            # It will call CreateUserHandler(...).__call__(...) and inject UserRepoImpl to it\n            user_id = await scoped_mediator.send(CreateUser(1, \"Jon\"))\n            user = await scoped_mediator.query(GetUserById(user_id))\n            print(\"User:\",  user)\n        # Session of UserRepoImpl will be closed after exiting the \"request\" scope\n\n\u26a0\ufe0f **Attention: this is a beta version of** ``didiator`` **that depends on** ``DI``, **which is also in beta. Both of them can change their API!**\n\nCQRS\n====\n\nCQRS stands for \"`Command Query Responsibility Segregation <https://www.martinfowler.com/bliki/CQRS.html>`_\".\nIts idea about splitting the responsibility of commands (writing) and queries (reading) into different models.\n\n``didiator`` have segregated ``.send(command)`` and ``.query(query)`` methods in its ``Mediator`` and\nassumes that you will separate its handlers.\nUse ``CommandMediator`` and ``QueryMediator`` protocols to explicitly define which method you need in ``YourController``\n\n.. code-block:: mermaid\n\n    graph LR;\n        YourController-- Command -->Mediator;\n        YourController-- Query -->Mediator;\n        Mediator-. Command .->CommandDispatcher-.->di1[DiMiddleware]-.->CommandHandler;\n        Mediator-. Query .->QueryDispatcher-.->di2[DiMiddleware]-.->QueryHandler;\n\n``DiMiddleware`` initializes handlers and injects dependencies for them, you can just send a command with the data you need\n\nWhy ``didiator``?\n=================\n\n- Easy dependency injection to your business logic\n- Separating dependencies from your controllers. They can just parse external requests and interact with the ``Mediator``\n- CQRS\n- Flexible configuration\n- Middlewares support\n\nWhy not?\n========\n\n- You don't need it\n- Maybe too low coupling: navigation becomes more difficult\n- Didiator is in beta now\n- No support for synchronous handlers\n\n",
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SamWarden/didiator",
            "keywords": "didiator,mediatr,mediator,CQRS,DI",
            "license": "MIT",
            "maintainer": "SamWarden",
            "maintainer_email": "SamWardenSad@gmail.com",
            "name": "didiator",
            "package_url": "https://pypi.org/project/didiator/",
            "platform": null,
            "project_url": "https://pypi.org/project/didiator/",
            "project_urls": {
                "Bug Tracker": "https://github.com/SamWarden/didiator/issues",
                "Homepage": "https://github.com/SamWarden/didiator",
                "Repository": "https://github.com/SamWarden/didiator"
            },
            "release_url": "https://pypi.org/project/didiator/0.1.1/",
            "requires_dist": [
                "di[anyio] (>=0.73.0,<0.74.0); extra == \"di\""
            ],
            "requires_python": ">=3.10,<4.0",
            "summary": "A library that implements the Mediator pattern and uses DI library",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16047747,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dfedd4d15d00b3e3fe150835c4b54f48",
                    "sha256": "08d95962ac8fdf93957beaf2c5783f2b6fcd42bbc8839d7fdad980fcad400698"
                },
                "downloads": -1,
                "filename": "didiator-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dfedd4d15d00b3e3fe150835c4b54f48",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10,<4.0",
                "size": 16641,
                "upload_time": "2022-12-09T12:17:15",
                "upload_time_iso_8601": "2022-12-09T12:17:15.053808Z",
                "url": "https://files.pythonhosted.org/packages/18/e6/e3d7baf14dfbcee776402398ce9ee46885b6b55b0b0d3106bff948fcc393/didiator-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b98ac5043b6dfcffbdf1897992bda8cd",
                    "sha256": "06d36c048cd34ddc4f747fb73092ce32c8b24e1e97f1efbff132e4adccbc8aa6"
                },
                "downloads": -1,
                "filename": "didiator-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "b98ac5043b6dfcffbdf1897992bda8cd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10,<4.0",
                "size": 10947,
                "upload_time": "2022-12-09T12:17:17",
                "upload_time_iso_8601": "2022-12-09T12:17:17.842887Z",
                "url": "https://files.pythonhosted.org/packages/ea/bd/c53ad18620092abc90f5d1e60e3b4903f3231e89628deab85ac675cca8ad/didiator-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}