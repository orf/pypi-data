{
    "0.0.1": {
        "info": {
            "author": "mauricio.rojas",
            "author_email": "mauricio.rojas@mobilize.net",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# snowpark-extensions-py\n\nSnowpark by itself is a powerful library, but still some utility functions can always help.\n\n## Currently provided extensions:\n\n## SessionBuilder extensions\n\n| Name                          | Description |\n| ----------------------------- | ----------- |\n| SessionBuilder.from_snowsql   | can read the information from the snowsql config file by default at ~/snowsql/config or at a given location |\n| SessionBuilder.env            | reads settings from SNOW_xxx or SNOWSQL_xxx variables |\n| SessionBuilder.appName        | Sets a query tag with the given appName               |\n| SessionBuilder.append_tag     | Appends a new tag to the existing query tag           | \n\n\nYou can the create your session like:\n\n``` python\nfrom snowflake.snowpark import Session\nimport snowpark_extensions\nnew_session = Session.builder.from_snowsql().appName(\"app1\").create()\n```\n\n``` python\nfrom snowflake.snowpark import Session\nimport snowpark_extensions\nnew_session = Session.builder.env().appName(\"app1\").create()\n```\n\nThe `appName` can use to setup a query_tag like `APPNAME=tag;execution_id=guid` which can then be used to track job actions with a query like\n\nYou can then use a query like:\nTo see all executions from an app or \n```sql\nselect *\nfrom table(information_schema.query_history())\nwhery query_tag like '%APPNAME=tag%'\norder by start_time desc;\n```\n\nTo see the executions for a particular execution:\n\n```sql\nselect *\nfrom table(information_schema.query_history())\nwhery query_tag like '%APPNAME=tag;execution_id=guid%'\norder by start_time desc;\n```\n\n## Column Extensions\n| Name                         | Description                                                                         |\n|------------------------------|-------------------------------------------------------------------------------------|\n| Column.getItem               | An expression that gets an item at position ordinal out of a list, or gets an item by key out of a dict. |\n\n\n## DataFrame Extensions\n\n| Name                           | Description                                                                         |\n|--------------------------------|-------------------------------------------------------------------------------------|\n| DataFrame.dtypes               | returns the list of datatypes in the DataFrame\n| DataFrame.map                  | provides an equivalent for the map function for example `df.map(func,input_types=[StringType(),StringType()],output_types=[StringType(),IntegerType()],to_row=True)` \n| DataFrame.simple_map           | if a simple lambda like `lambda x: x.col1 + x.col2` is used this functions can be used like `df.simple_map(lambda x: x.col1 + x.col2)`\n| DataFrame.groupby.applyInPandas| Maps each group of the current DataFrame using a pandas udf and returns the result as a DataFrame. |\n\n\n\n## Functions Extensions\n\n| Name                         | Description                                                                         |\n|------------------------------|-------------------------------------------------------------------------------------|\n| functions.array_sort         | sorts the input array in ascending order. The elements of the input array must be orderable. Null elements will be placed at the end of the returned array. |\n| functions.unix_timestamp     | returns the UNIX timestamp of current time.                                         |\n| functions.from_unixtimestamp | can be used to convert UNIX time to Snowflake timestamp                             |\n| functions.format_number      | formats numbers using the specified number of decimal places                        |\n| functions.reverse            | returns a reversed string                                                           |\n| functions.explode            | returns a new row for each element in the given array                               |\n| functions.date_add           | returns the date that is n days days after                                          |\n| functions.date_sub           | returns the date that is n days before                                              |\n\n## Usage:\n\njust import it at the top of your file and it will automatically extend your snowpark package\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/MobilizeNet/snowpark-extensions-py",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "snowpark-extensions",
            "package_url": "https://pypi.org/project/snowpark-extensions/",
            "platform": null,
            "project_url": "https://pypi.org/project/snowpark-extensions/",
            "project_urls": {
                "Homepage": "http://github.com/MobilizeNet/snowpark-extensions-py"
            },
            "release_url": "https://pypi.org/project/snowpark-extensions/0.0.1/",
            "requires_dist": [
                "snowflake-snowpark-python",
                "pandas",
                "shortuuid"
            ],
            "requires_python": "",
            "summary": "A set of helpers to extend snowpark functionality",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15810334,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f004f8a7ed35c778f29d5a9d3fbb1a23",
                    "sha256": "f087a0b935b3de6d82dc5fa0e73b2f05ddd98193d3f5efd7bb9743046e07bc11"
                },
                "downloads": -1,
                "filename": "snowpark_extensions-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f004f8a7ed35c778f29d5a9d3fbb1a23",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7884,
                "upload_time": "2022-11-18T04:04:50",
                "upload_time_iso_8601": "2022-11-18T04:04:50.837246Z",
                "url": "https://files.pythonhosted.org/packages/c0/78/0b895c176c4df32313a1fb1faee3acd0c8a7d1e91b7e06640a9d7b0713a5/snowpark_extensions-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "02a30f5f7f23fcfaf83343a63bd2a3c7",
                    "sha256": "b67367dc006ab55e984419f06b0b8777ea0a5e6f840d55846c2521e5ba067273"
                },
                "downloads": -1,
                "filename": "snowpark_extensions-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "02a30f5f7f23fcfaf83343a63bd2a3c7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 7291,
                "upload_time": "2022-11-18T04:04:53",
                "upload_time_iso_8601": "2022-11-18T04:04:53.152023Z",
                "url": "https://files.pythonhosted.org/packages/6a/da/e6ac761e278c53e3dc7b74bdba104aeda46d65483ecfb537a5a2593561a2/snowpark_extensions-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}