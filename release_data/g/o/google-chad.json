{
    "2.6.2": {
        "info": {
            "author": "Ivan Sincek",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Chad\n\nSearch Google Dorks like Chad. Based on [ivan-sincek/nagooglesearch](https://github.com/ivan-sincek/nagooglesearch).\n\nTested on Kali Linux v2022.4 (64-bit).\n\nMade for educational purposes. I hope it will help!\n\nFuture plans:\n\n* remove `jq` from `chad-extractor` so it can be OS independent.\n\n## Table of Contents\n\n* [How to Install](#how-to-install)\n* [How to Build and Install Manually](#how-to-build-and-install-manually)\n* [Shortest Possible](#shortest-possible)\n* [Basic Example: File Download](#basic-example-file-download)\n* [Chad Extractor](#chad-extractor)\n* [Advanced Example: Social Media Takover](#advanced-example-social-media-takover)\n    * [Basic Use (Single Domain)](#basic-use-single-domain)\n    * [Advanced Use (Multiple Domains)](#advanced-use-multiple-domains)\n* [Rate Limiting](#rate-limiting)\n* [Usage](#usage)\n\n## How to Install\n\n```bash\npip3 install google-chad\n\npip3 install --upgrade google-chad\n\nplaywright install chromium\n```\n\n## How to Build and Install Manually\n\nRun the following commands:\n\n```bash\ngit clone https://github.com/ivan-sincek/chad && cd chad\n\npython3 -m pip install --upgrade build\n\npython3 -m build\n\npython3 -m pip install dist/google_chad-2.6.2-py3-none-any.whl\n\nplaywright install chromium\n```\n\n## Shortest Possible\n\n```bash\nchad -q 'intitle:\"index of /\" intext:\"parent directory\"'\n```\n\n## Basic Example: File Download\n\nDid you say Metagoofil?!\n\n```bash\nmkdir downloads\n\nchad -q \"ext:pdf OR ext:docx OR ext:xlsx OR ext:pptx\" -s *.example.com -tr 200 -d downloads -sos no\n```\n\n`-s <site>` is optional. For more information, see [Usage](#usage).\n\n`chad` file download feature is based on Python Requests library.\n\n## Chad Extractor\n\n`chad-extractor` is a powerful tool based on [Playwright](https://playwright.dev/python) Chromium headless browser created to efficiently scrape web, to compensate for Python Requests library which cannot render JavaScript encoded HTML and is easily blocked by anti-bot solutions.\n\n## Advanced Example: Social Media Takover\n\nPrepare Google Dorks as `social_media_dorks.txt` file:\n\n```fundamental\nintext:\"t.me/\"\nintext:\"discord.com/invite/\"\nintext:\"youtube.com/c/\" OR intext:\"youtube.com/channel/\"\nintext:\"twitter.com/\"\nintext:\"instagram.com/\"\nintext:\"facebook.com/\"\nintext:\"linkedin.com/in/\" OR intext:\"linkedin.com/company/\"\n```\n\nPrepare a template as `social_media_template.json` file:\n\n```json\n{\n   \"telegram\":{\n      \"extract\":\"t\\\\.me\\\\/[\\\\w\\\\d\\\\-\\\\+]+\",\n      \"extract_prepend\":\"https://\",\n      \"validate\":\"<meta property=\\\"og:title\\\" content=\\\"Telegram: Contact .+?\\\">\"\n   },\n   \"discord\":{\n      \"extract\":\"discord\\\\.com\\\\/invite\\\\/[\\\\w\\\\d\\\\-\\\\+\\\\.]+(?<!\\\\.)\",\n      \"extract_prepend\":\"https://\",\n      \"validate\":\"Invite Invalid\"\n   },\n   \"youtube\":{\n      \"extract\":\"youtube\\\\.com\\\\/(?:c|channel)\\\\/[\\\\w\\\\d\\\\-\\\\+\\\\.]+(?<!\\\\.)\",\n      \"extract_prepend\":\"https://\",\n      \"validate\":\"This page isn't available\\\\.\"\n   },\n   \"twitter\":{\n      \"extract\":\"(?<!pic\\\\.)twitter\\\\.com\\\\/(?:(?!(?:hashtag|i|intent|share)(?:\\\\/|\\\\?)[^\\\\s]+|[\\\\w]+\\\\/(?:privacy|tos)|widgets\\\\.js)[\\\\w\\\\d\\\\-\\\\+]+)\",\n      \"extract_prepend\":\"https://\",\n      \"validate\":\"This account doesn.?t exist\"\n   },\n   \"instagram\":{\n      \"extract\":\"instagram\\\\.com\\\\/(?:(?!(?:p|accounts)(?:\\\\/|\\\\?)[^\\\\s]+)[\\\\w\\\\d\\\\-\\\\+\\\\.]+)(?<!\\\\.)\",\n      \"extract_prepend\":\"https://\",\n      \"extract_append\":\"/\",\n      \"validate\":\"Sorry, this page isn't available\\\\.\"\n   },\n   \"facebook\":{\n      \"extract\":\"facebook\\\\.com\\\\/(?:(?!(?:about|groups|sharer)(?:\\\\/|\\\\?)[^\\\\s]+|share\\\\.php)[\\\\w\\\\d\\\\-\\\\+\\\\.]+)(?<!\\\\.)\",\n      \"extract_prepend\":\"https://\",\n      \"validate\":\"This page isn't available\"\n   },\n   \"linkedin-company\":{\n      \"extract\":\"linkedin\\\\.com\\\\/company\\\\/[\\\\w\\\\d\\\\-\\\\+\\\\.]+(?<!\\\\.)\",\n      \"extract_prepend\":\"https://hr.\",\n      \"validate\":\"Page not found\"\n   },\n   \"linkedin-user\":{\n      \"extract\":\"linkedin\\\\.com\\\\/in\\\\/[\\\\w\\\\d\\\\-\\\\+\\\\.]+(?<!\\\\.)\",\n      \"extract_prepend\":\"https://hr.\",\n      \"validate\":\"An exact match for .+ could not be found\\\\.\"\n   }\n}\n```\n\n**Make sure your regular expressions return only one capturing group, e.g. `[1, 2, 3]`; and not touple, e.g. `[(1, 2), (3, 4), (5, 6)]`.**\n\nMake sure to properly escape regular expression specific symbols in your template file, e.g. make sure to escape `.` (dot) as `\\.` or as `\\\\.` if using double quotes, and `/` (forward slash) as `\\/` or as `\\\\/` respectively, etc.\n\n**All regular expression searches are case-insensitive.**\n\nContent fetched from the initial Chad results (i.e. URLs) will be matched against all the regular expressions (`extract` attributes) in the template file in order to find as much relevant information as possible.\n\nTo extract information without validating it, omit `validate` attributes from the template as necessary.\n\n### Basic Use (Single Domain)\n\n```bash\nchad -q social_media_dorks.txt -s *.example.com -tr 200 -o results.json -sos no\n\nchad-extractor -t social_media_template.json -res results.json -o results_report.json\n```\n\n### Advanced Use (Multiple Domains)\n\nPrepare sites as `sites.txt` file:\n\n```fundamental\n*.example.com\n*.example.com -www\n```\n\nPrepare user agents to avoid blocks/bans as `user_agents.txt` file; where `<your-api-key>` is your API key from [scrapeops.io](https://scrapeops.io):\n\n```python\npython3 -c 'import json, requests; open(\"user_agents.txt\", \"w\").write((\"\\n\").join(requests.get(\"http://headers.scrapeops.io/v1/user-agents?api_key=<your-api-key>&num_results=100\", verify = False).json()[\"result\"]))'\n```\n\nAutomate:\n\n```bash\nmkdir results\n\nIFS=$'\\n'; count=0; for site in $(cat sites.txt); do count=$((count+1)); echo \"#${count} | ${site}\"; chad -q social_media_dorks.txt -s \"${site}\" -tr 200 -a user_agents.txt -o \"results/results_${count}.json\"; done\n\nchad-extractor -t social_media_template.json -res results -a user_agents.txt -o results_report.json -v yes\n```\n\n## Rate Limiting\n\nTo avoid hitting the rate limit, increase minimum and maximum sleep between queries.\n\nCooling-off period can be from a few hours to a whole day.\n\n## Usage\n\n```fundamental\nChad v2.6.2 ( github.com/ivan-sincek/chad )\n\nUsage:   chad -q queries     [-s site         ] [-a agents         ] [-p proxies    ] [-o out         ]\nExample: chad -q queries.txt [-s *.example.com] [-a user_agents.txt] [-p proxies.txt] [-o results.json]\n\nDESCRIPTION\n    Search Google Dorks like Chad\nQUERIES\n    File with Google Dorks or a single query to use\n    -q <queries> - queries.txt | intext:password | \"ext:tar OR ext:zip\" | etc.\nSITE\n    Domain[s] to search\n    -s <site> - example.com | sub.example.com | *.example.com | \"*.example.com -www\" | etc.\nTIME\n    Get results not older than the specified time in months\n    -t <time> - 6 | 12 | 24 | etc.\nTOTAL RESULTS\n    Total number of unique results\n    Default: 100\n    -tr <total-results> - 200 | etc.\nPAGE RESULTS\n    Number of results per page - capped at 100 by Google\n    Default: randint(75, 100) per page\n    -pr <page-results> - 50 | etc.\nMINIMUM\n    Minimum sleep between queries\n    Default: 75\n    -min <minimum> - 120 | etc.\nMAXIMUM\n    Maximum sleep between queries\n    Default: minimum + 50\n    -max <maximum> - 180 | etc.\nAGENTS\n    File with user agents to use\n    Default: nagooglesearch user agents\n    -a <agents> - user_agents.txt | etc.\nPROXIES\n    File with proxies to use\n    -p <proxies> - proxies.txt | etc.\nDIRECTORY\n    Downloads directory\n    All downloaded files will be saved in this directory\n    -d <directory> - downloads | etc.\nTHREADS\n    Number of parallel files to download\n    Default: 5\n    -th <threads> - 20 | etc.\nOUT\n    Output file\n    -o <out> - results.json | etc.\nSLEEP ON START\n    Safety feature to prevent accidental rate limit triggering\n    -sos <sleep-on-start> - no \nDEBUG\n    Debug output\n    -dbg <debug> - yes\n```\n\n```fundamental\nChad Extractor v2.6.2 ( github.com/ivan-sincek/chad )\n\nUsage:   chad-extractor -t template      -res results -o out                 [-th threads] [-r retries] [-w wait] [-a agents         ]\nExample: chad-extractor -t template.json -res results -o results_report.json [-th 10     ] [-r 5      ] [-w 10  ] [-a user_agents.txt]\n\nDESCRIPTION\n    Extract and validate data from Chad results\nTEMPLATE\n    JSON template file with extract and validate information\n    -t <template> - template.json | etc.\nRESULTS FILE/DIRECTORY\n    Chad results file/directory\n    -res <results> - results | results.json | etc.\nTHREADS\n    Number of parallel headless browsers to run\n    Default: 4\n    -th <threads> - 10 | etc.\nRETRIES\n    Number of retries per URL\n    Default: 2\n    -r <retries> - 5 | etc.\nWAIT\n    Wait before fetching the page content\n    Default: 4\n    -w <wait> - 10 | etc.\nAGENTS\n    File with user agents to use\n    Default: nagooglesearch user agents\n    -a <agents> - user_agents.txt | etc.\nOUT\n    Output file\n    -o <out> - results_report.json | etc.\nVERBOSE\n    Create additional supporting output files\n    -v <verbose> - yes\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "google-chad",
            "package_url": "https://pypi.org/project/google-chad/",
            "platform": null,
            "project_url": "https://pypi.org/project/google-chad/",
            "project_urls": {
                "Homepage": "https://github.com/ivan-sincek/chad"
            },
            "release_url": "https://pypi.org/project/google-chad/2.6.2/",
            "requires_dist": [
                "termcolor (>=1.1.0)",
                "nagooglesearch (>=5.5)",
                "requests (>=2.27.1)",
                "jq (>=1.2.1)",
                "asyncio (>=3.4.3)",
                "playwright (>=1.27.1)",
                "regex (>=2022.4.24)"
            ],
            "requires_python": ">=3.6",
            "summary": "Not another Google Dorking tool.",
            "version": "2.6.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15969434,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "935b1bbd5149dd75d9c31b39c5d321ac",
                    "sha256": "18b42877e5b1cbc61f8e100ebdc48f703d0f4d2dacdf4d48ad138daee52d5ba0"
                },
                "downloads": -1,
                "filename": "google_chad-2.6.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "935b1bbd5149dd75d9c31b39c5d321ac",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 18087,
                "upload_time": "2022-12-02T06:03:51",
                "upload_time_iso_8601": "2022-12-02T06:03:51.897078Z",
                "url": "https://files.pythonhosted.org/packages/21/27/7ff46252e8c8cdb2a299ba2e927c8262bf7633b2eb95878ffe17d0b5b69e/google_chad-2.6.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d3dae341825b336c6cb1a5060f499418",
                    "sha256": "b4fed4b8e2e73484c8409e5da017efaa98bc359666a510f9d52fe2e91fe61b4b"
                },
                "downloads": -1,
                "filename": "google-chad-2.6.2.tar.gz",
                "has_sig": false,
                "md5_digest": "d3dae341825b336c6cb1a5060f499418",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 18588,
                "upload_time": "2022-12-02T06:03:54",
                "upload_time_iso_8601": "2022-12-02T06:03:54.840337Z",
                "url": "https://files.pythonhosted.org/packages/9d/b5/a38f46ffa6995c9790c190d2218e1cff540bc216071158d90c9e4759933f/google-chad-2.6.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}