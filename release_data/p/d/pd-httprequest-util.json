{
    "0.0.9": {
        "info": {
            "author": "\u5f6d\u6cd7\u96c4",
            "author_email": "pillipanda@126.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/pillipanda/pd_httprequest_util",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pd-httprequest-util",
            "package_url": "https://pypi.org/project/pd-httprequest-util/",
            "platform": "",
            "project_url": "https://pypi.org/project/pd-httprequest-util/",
            "project_urls": {
                "Homepage": "https://github.com/pillipanda/pd_httprequest_util",
                "Repository": "https://github.com/pillipanda/pd_httprequest_util"
            },
            "release_url": "https://pypi.org/project/pd-httprequest-util/0.0.9/",
            "requires_dist": [
                "aiodns (>=2.0.0,<3.0.0)",
                "aiohttp (>=3.6.2,<4.0.0)",
                "ujson (>=3.1.0,<4.0.0)",
                "requests (>=2.24.0,<3.0.0)",
                "loguru (>=0.5.1,<0.6.0)"
            ],
            "requires_python": ">=3.7,<4.0",
            "summary": "http request util with both sync/async method.provide with concurrency control\uff1biter retrn\uff1blog",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7952336,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b2339ef7a19345a77b19f645eeb9fa96",
                    "sha256": "4de1c1e86fe2e57152f55a78e002fb1a67f581e2e2e0c30bdfb228348d5b08db"
                },
                "downloads": -1,
                "filename": "pd_httprequest_util-0.0.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b2339ef7a19345a77b19f645eeb9fa96",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<4.0",
                "size": 10894,
                "upload_time": "2020-08-12T11:07:18",
                "upload_time_iso_8601": "2020-08-12T11:07:18.179174Z",
                "url": "https://files.pythonhosted.org/packages/09/d3/8f64523f10cb198ad32860328f2fff607003267122ae79805970b72129c1/pd_httprequest_util-0.0.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f86c3997b9dd0cc8ae75d78063bc748a",
                    "sha256": "5152d6ebe5931d644ee85456de444b3b47cee02bb9db8100cf993241f2c08d03"
                },
                "downloads": -1,
                "filename": "pd_httprequest_util-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "f86c3997b9dd0cc8ae75d78063bc748a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<4.0",
                "size": 12317,
                "upload_time": "2020-08-12T11:07:22",
                "upload_time_iso_8601": "2020-08-12T11:07:22.072990Z",
                "url": "https://files.pythonhosted.org/packages/40/89/9d2a71ec731e7dcfa0f48581654aed7e33ad6278626f60f56c5a0ad41fe4/pd_httprequest_util-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "\u5f6d\u6cd7\u96c4",
            "author_email": "pillipanda@126.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8"
            ],
            "description": "### pd_httprequest_util\n\u534f\u52a9\u53d1http\u8bf7\u6c42\u7684\u5de5\u5177\n\n### \u7279\u70b9\n1. \u652f\u6301\u8bbe\u7f6e\u5e76\u53d1\u6570\n2. \u81ea\u52a8\u91cd\u8bd5\u4e09\u6b21\n3. \u652f\u6301\u4e09\u79cd\u53d1\u9001\u6a21\u5f0f \n    1. \u4e00\u6b21\u53d1\u8d77\u5168\u90e8\u8bf7\u6c42\uff08\u5e94\u5bf9\u8bf7\u6c42\u6570\u91cf\u4e0d\u591a\u7684\u60c5\u51b5\uff09\n    2. \u4e00\u6b21\u53d1\u8d77\u5168\u90e8\u8bf7\u6c42\u5e76\u5f53\u7b2c\u4e00\u4e2a\u51fa\u73b0\u5931\u8d25\u65f6\u9000\u51fa\uff08\u5e94\u5bf9\u8bf7\u6c42\u6570\u91cf\u4e0d\u591a&\u5fc5\u987b\u8981\u5168\u90e8\u6210\u529f\u7684\u60c5\u51b5\uff09\n    3. iterator\u8fd4\u56de\u6a21\u5f0f\uff08\u5e94\u5bf9\u8bf7\u6c42\u6570\u91cf\u592a\u591a\u3001\u9700\u8981\u987e\u8651\u5185\u5b58\u5927\u5c0f\u7684\u60c5\u51b5\uff09\n4. \u82e5connection\u51fa\u95ee\u9898\u4f1a\u81ea\u52a8\u5207\u6362\n5. \u540c\u65f6\u652f\u6301\u540c\u6b65/\u5f02\u6b65(async)\u8c03\u7528\u65b9\u5f0f\n6. \u652f\u6301\u6253\u5f00\u65e5\u5fd7\u8bb0\u5f55\u6bcf\u4e2a\u8bf7\u6c42\u7684\u60c5\u51b5\u7528\u4e8e\u540e\u7eed\u5206\u6790\n7. \u652f\u6301\u8bbe\u5b9a\u5931\u8d25\u8bf7\u6c42\u7684\u9ed8\u8ba4\u8fd4\u56de\u503c\n\n### \u6982\u5ff5\u8bf4\u660e\n\u4e0b\u9762\u7684\u4f7f\u7528\u4f8b\u5b50\u4f1a\u4f7f\u7528\u5230Connection\u3001Request\u3001RequestManager\u4e09\u4e2a\u7c7b\uff0c\u5148\u63d0\u524d\u8bf4\u660e\u4e0b\u5176\u547d\u540d\u7684\u903b\u8f91\uff1a<br/>\n\u6bcf\u4e2a\u5177\u4f53http\u8bf7\u6c42\u88ab\u547d\u540d\u4e3a\u4e00\u4e2a**Request**\uff0c\u5176\u4f7f\u7528\u7684http **Connection** pool\u662f\u4f5c\u4e3a\u53c2\u6570\u88ab\u4f9d\u8d56\u6ce8\u5165\u7684\uff0c\u800c\u5916\u5c42\u4f7f\u7528**RequestManager**\u6765\u7ba1\u7406\u4e00\u5806http request\u7684\u8bbf\u95ee\u7279\u5f81\n![uml](./static/UML.png)\n\n### \u5f02\u6b65\u8bbf\u95ee\u4e3e\u4f8b <br/>\n- \u963b\u585e\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\n```python\n# \u5bf9\u5e94demos/async_demos/all_fetch.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\nasync def main():\n    # \u6b64\u6279\u8bbf\u95ee\u7684\u5e76\u53d1\u6570\u4e3a60, \u5931\u8d25request\u7684\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n    manager = AsyncRequestManager(parral_amount=60, fail_return='')\n\n    # \u6b64\u6279\u8bbf\u95ee\u5168\u90e8\u590d\u7528\u6b64connection\n    connection = await AsyncConnection.create()\n\n    # \u6784\u5efa100\u4e2a\u8bf7\u6c42\u3001\u5176\u4e2d\u7b2c\u4e94\u4e2a\u6545\u610f\u8bbe\u7f6e\u4e3a\u65e0\u6548\u7684url\n    for i in range(100):\n        url = valid_url\n        if i == 5: url = invalid_url\n        request = Request(\n            http_conn=connection,  # \u4f9d\u8d56\u6ce8\u5165connection\uff0c\u591a\u6709request\u90fd\u590d\u7528\u6b64connection\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    # \u8bbf\u95ee\u5168\u90e8\uff0cresp: ['each resp text'], error\n    resp, error = await manager.visit_all()\n    suc, fail = 0, 0\n    for i in resp:\n        if len(i) > 0:\n            suc += 1\n        else:\n            fail += 1\n    print(suc, fail)\n    assert fail == 1\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n\n```\n-  \u963b\u585e\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\uff0c\u5e76\u5728\u51fa\u73b0\u7b2c\u4e00\u4e2a\u5931\u8d25request\u65f6\u4fbf\u8fd4\u56de\n```python\n# \u5bf9\u5e94demos/async_demos/all_fetch_but_stopwhenfirstfail.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\n\nasync def main():\n    # \u8fd9\u91cc\u901a\u8fc7\u8bbe\u7f6ecancel_if_fail=True\u53c2\u6570\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u5931\u8d25\u4fbf\u8fd4\u56de\n    manager = AsyncRequestManager(parral_amount=2, cancel_if_fail=True)\n\n    connection = await AsyncConnection.create()\n    for i in range(10):\n        url = valid_url\n        if i == 5: url = invalid_url\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    resp, error = await manager.visit_all()\n    print(resp, type(resp), error)\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n- async iterator\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\n```python\n# \u5bf9\u5e94demos/async_demos/iter_fetch.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\nasync def main():\n    manager = AsyncRequestManager(parral_amount=4)\n\n    connection = await AsyncConnection.create()\n    for i in range(10):\n        url = valid_url\n        if i == 5: url = invalid_url   # a fail request\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    # \u8fd9\u91cc\uff0c\u533a\u522b\u4e8e\u963b\u585e\u7684\u8c03\u7528\u7684\u662fvisit_all\u65b9\u6cd5\uff0c\u6b64\u5730\u8c03\u7528visit_iter\u65b9\u6cd5\n    cursor_resp = manager.visit_iter()\n    async for resp in cursor_resp:\n        print('suc' if len(resp) > 0 else 'fail')\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n- \u4ee5\"\u963b\u585e\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\"\u4e3a\u4f8b\uff0c\u6f14\u793a\u6253\u5f00\u65e5\u5fd7\u8bb0\u5f55\u3002\u4f59\u4e0b\u540c\u7406\n```python\n# \u5bf9\u5e94demos/async_demos/set_log.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.request_manager import AsyncRequestManager\nfrom pd_httprequest_util.connection.async_ import AsyncConnection\n\nasync def main():\n    manager = AsyncRequestManager(parral_amount=2)\n    # \u663e\u5f0f\u8c03\u7528set_log\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u65e5\u5fd7\u76f8\u5173\u53c2\u6570\u5373\u6253\u5f00\u4e86\u65e5\u5fd7\u8bb0\u5f55\n    manager.set_log(\n        name='http_connuest_log',\n        dir_path='./',\n        clear=True,\n        clear_days=60\n    )\n\n    connection = await AsyncConnection.create()\n    for i in range(10):\n        url = 'http://httpbin.org/ip?whatever=1'\n        if i == 5: url = 'http://web_not_exist.org/'   # a fail request\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url,\n            log_flag=f'req{i}',\n        )\n        manager.add_request(request)\n\n    resp, error = await manager.visit_all()\n    for i in resp:\n        print('suc' if len(i) > 0 else 'fail')\n    connection.close()\n\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n```\n\n\n### \u540c\u6b65\u8bbf\u95ee\u4e3e\u4f8b<br/>\n**\u540c\u6b65\u8bbf\u95ee\u7684\u6838\u5fc3\u5c31\u662f\u628a\u4e0a\u9762\u4f7f\u7528\u7684AsyncRequestManager\u66ff\u6362\u4e3aSyncRequestManager,AsyncConnection\u66ff\u6362\u4e3aSyncHttp**\n- \u963b\u585e\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\n```python\n# \u5bf9\u5e94demos/sync_demos/all_fetch.py\nfrom pd_httprequest_util.request import Request\nfrom pd_httprequest_util.connection.sync_ import SyncConnection\nfrom pd_httprequest_util.request_manager import SyncRequestManager\n\nfrom demos.config import valid_url, invalid_url\n\n\ndef main():\n    manager = SyncRequestManager(parral_amount=3, fail_return='')\n\n    connection = SyncConnection.create()\n    for i in range(10):\n        url = valid_url\n        if i == 5: url = invalid_url\n        request = Request(\n            http_conn=connection,\n            method='GET',\n            url=url\n        )\n        manager.add_request(request)\n\n    resp, error = manager.visit_all()\n    for i in resp:\n        print('-->', 'suc' if len(i) > 0 else 'fail')\n    connection.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n-  \u963b\u585e\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\uff0c\u5e76\u5728\u51fa\u73b0\u7b2c\u4e00\u4e2a\u5931\u8d25request\u65f6\u4fbf\u8fd4\u56de\n```python\n# \u5bf9\u5e94demos/sync_demos/all_fetch_but_stopwhenfirstfail.py\n...\n```\n-  iterator\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\n```python\n# \u5bf9\u5e94demos/sync_demos/iter_fetch.py\n...\n```\n-  iterator\u8bbf\u95ee\u4e00\u6279\u8bf7\u6c42\n```python\n# \u5bf9\u5e94demos/sync_demos/iter_fetch.py\n...\n```\n- \u8bbe\u7f6e\u65e5\u5fd7\n```python\n# \u5bf9\u5e94demos/sync_demos/set_log.py\n...\n```\n\n### \u8865\u5145\n1. \u8bbe\u8ba1\u8bf4\u660e\n   1. **Connection**\uff1ahttp\u94fe\u63a5\uff0c\u72ec\u7acbConnection\u662f\u4e3a\u4e86\u907f\u514dhttp\u94fe\u63a5\u6570\u4e0d\u53ef\u63a7\uff0c\u4e00\u822c\u5efa\u8bae\u80fd\u591f\u5728app\u521d\u59cb\u5316\u65f6\u5019\u8003\u8651\u597d\u6574\u4f53\u94fe\u63a5\u7684\u603b\u6570\u4ee5\u53ca\u5355\u4e2ahost\u7684\u94fe\u63a5\u603b\u6570\u4e0a\u9650\uff08Connection\u7684\u8bbe\u7f6e\u53c2\u6570\u652f\u6301\u8bbe\u7f6e\u8fd9\u4e24\u4e2a\u53c2\u6570\uff09\n   2. **Request**\uff1a\u5bf9\u5e94\u4e1a\u52a1\u5c42\u770b\u5230\u7684\u5177\u4f53\u7684\u6bcf\u4e2ahttp\u8bf7\u6c42\uff0c\u5176\u5411\u4e0a\u627f\u63a5\u5177\u4f53\u4e1a\u52a1\u3001\u5411\u4e0b\u4f9d\u8d56Connection\u8fdb\u884c\u53d1\u9001\uff0c\u6545\u5bf9\u5e94\u7684http\u8bf7\u6c42\u9700\u8981\u7684\u53c2\u6570\u5728\u6b64\u8bbe\u5b9a\uff0c\u5982http method\u3001timeout...;\u7279\u522b\u9700\u8981\u8bf4\u660e\u7684\u4e00\u4e2a\u53c2\u6570\u662flog_flag\uff0c\u6b64\u5c31\u662f\u7528\u4e8e\u6807\u793a\u5177\u4f53\u4e1a\u52a1\u3001\u5982A\u3001B\u3001C\uff0c\u5728\u6253\u5f00\u65e5\u5fd7\u8bb0\u5f55\u540e\u6b64\u6807\u793a\u4f1a\u5728\u6bcf\u6761\u8bf7\u6c42\u65e5\u5fd7\u91cc\uff0c\u4ece\u800c\u53ef\u4ee5\u5206\u8fa8\u5404\u4e2a\u5177\u4f53\u4e1a\u52a1\n   3. **RequestManager**: \u7528\u4e8e\u7ba1\u7406\u4e00\u6279**\u540c\u8d28**\u7684Request\u8bf7\u6c42\u7684\u53d1\u9001\u7f16\u6392\uff0c\u5176\u53c2\u6570\u6709\uff1a\u5e76\u53d1\u6570\u3001\u662f\u5426\u5728\u7b2c\u4e00\u4e2aRequest\u51fa\u73b0\u5931\u8d25\u65f6\u5c31\u653e\u5f03\u5e76\u8fd4\u56de\u3001\u5931\u8d25\u7684request\u7684\u9ed8\u8ba4\u8fd4\u56de\u503c\n\n2. \u4e3e\u4f8b\u8bf4\u660e<br/>\n    - \u80cc\u666f\uff1a\u4e00\u4e2a\u627f\u63a5\u4e0a\u6e38\u5404\u65b9\u53d1\u9001\u77ed\u4fe1\u8bf7\u6c42\u7684\u5e94\u7528\uff0c\u5176\u4e0b\u6e38\u6709x\u5bb6\u80fd\u591f\u901a\u8fc7http api\u8c03\u7528\u53d1\u8d77\u5b9e\u9645\u77ed\u4fe1\u5546\u6237\u3002\u800c\u4e0a\u6e38\u53d1\u9001\u7684\u6a21\u5f0f\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f\u5355\u6761\u76f4\u63a5\u53d1\u9001\uff08\u4e00\u822c\u4e3a\u9a8c\u8bc1\u7801\u7b49\u91cd\u8981\u4fe1\u606f\u9700\u8981\u7acb\u5373\u53d1\u9001\uff09\uff1b\u4e00\u79cd\u662f\u5141\u8bb8\u6ede\u540e\u53d1\u9001\u7684\u4fe1\u606f\uff08\u5982\u5e7f\u544a\u7c7b\u4fe1\u606f\u3001\u7279\u70b9\u662f\u91cf\u5927\u4e14\u96c6\u4e2d\uff09\n    - \u5b58\u5728\u7684\u95ee\u9898\n        - \u53d1\u9001\u6a21\u5f0f1\uff1a\u5982\u679c\u662f\u6bcf\u6765\u4e00\u4e2a\u53d1\u9001\u8bf7\u6c42\u5c31\u9009\u62e9\u4e00\u4e2a\u4e0b\u6e38\u5546\u5e76\u8d77\u4e00\u4e2ahttp connection\u8fdb\u884c\u53d1\u9001\u5c31\u80af\u80fd\u51fa\u73b0\u94fe\u63a5\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff1b\n        - \u53d1\u9001\u6a21\u5f0f2\uff1a\u540c\u7406\u5b58\u5728\u94fe\u63a5\u7206\u70b8\u7684\u60c5\u51b5\uff1b \u4e0b\u6e38x\u5bb6\u5404\u5bb6\u7684\u6027\u80fd\u4e0d\u4e00\u6837\uff0c\u5bf9\u4e8e\u6bcf\u5bb6\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u5e76\u53d1\u91cf\u8fdb\u884c\u53d1\u9001\n    - \u89e3\u51b3\u95ee\u9898\n        - \u94fe\u63a5\u7206\u70b8\uff1a\u5728\u5168\u5c40\u8d77server\u7684\u65f6\u5019\uff0c\u4ec5\u521d\u59cb\u5316\u4e00\u4e2aconnection\uff08\u5e76\u8bbe\u7f6e\u6bcf\u4e2ahost\u6700\u591ay\u4e2a\u94fe\u63a5\uff09\u5e76\u5c06\u6b64connection\u7ed1\u5b9a\u5230\u5168\u5c40\u7684app\u5b9e\u4f8b\u4e0a\uff0c\u4ece\u800c\u5728\u5404\u4e2a\u53d1\u9001\u573a\u666f\u4e0b\u90fd\u80fd\u591f\u901a\u8fc7app\u83b7\u53d6\u5230\u6b64\u552f\u4e00\u7684connection\uff0c\u4fdd\u8bc1connnection\u4e0a\u9650\u503c\n        - \u8c03\u6574\u5e76\u53d1\u91cf\uff1a\n            - \u5148\u7ef4\u62a4\u4e00\u4e2a\u5404\u4e2a\u5546\u6237\u9ed8\u8ba4\u7684\u5e76\u53d1\u91cf\u7684\u5bf9\u5e94\u8868\u3002\n            - \u5047\u8bbe\u6b64\u65f6\u6765\u7684\u4e24\u6279\u5f85\u53d1\u9001\u5e7f\u544a\u77ed\u4fe1\uff0c\u4e00\u6279\u4f7f\u7528\u5546\u6237A\uff0c\u4e00\u6279\u4f7f\u7528\u5546\u6237B\uff08\u4e0d\u540c\u5546\u6237\u63d0\u4f9b\u7684\u8c03\u7528\u5176\u53d1\u77ed\u4fe1\u7684http\u89c4\u5219\u4e0d\u4e00\u6837\uff09\n            - \u5206\u522b\u6784\u9020Request\u5b9e\u4f8b\uff08\u4f9d\u8d56\u6ce8\u5165\u5168\u5c40\u7684connection\u3001\u586b\u5165\u5bf9\u5e94\u7684log_flag\u533a\u5206\u3001\u5176\u4ed6\u6309\u5546\u6237\u8981\u6c42\u8fdb\u884c\uff09A_Requests\u548cB_Requests\n            - \u67e5\u51faA\u3001B\u5546\u6237\u7684\u9ed8\u8ba4\u5e76\u53d1\u91cf\uff0c\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u53ca\u4e0a\u9762\u7684Requests\u5206\u522b\u6784\u9020\u518d\u4f7f\u7528A_RequestManager\u548cB_RequestManager\u4ece\u800c\u5b9e\u73b0\u4f7f\u7528\u4e0d\u540c\u7684\u5e76\u53d1\u91cf\u8fdb\u884c\u53d1\u9001\n            - * \u8fd9\u91cc\u8fd8\u5b58\u5728\u4e00\u4e2a\u4e0e\u6b64\u9879\u76ee\u65e0\u5173\u7684\u70b9 - \u81ea\u52a8\u8c03\u8282\u5404\u4e2a\u5546\u6237\u5e76\u53d1\u6570: \u53ef\u80fd\u67d0\u5546\u6237\u9700\u8981\u53d1\u9001\u7684\u77ed\u4fe1\u592a\u591a\u6324\u538b\u592a\u4e25\u91cd\u800c\u9ed8\u8ba4\u503c\u6bd4\u8f83\u4fdd\u5b88\u9700\u8981\u4e0a\u8c03\uff0c\u6216\u8005\u67d0\u5546\u6237\u51fa\u73b0\u67d0\u4e9b\u95ee\u9898\u4e0d\u80fd\u518d\u6297\u4f4f\u9ed8\u8ba4\u5e76\u53d1\u9700\u8981\u4e0b\u8c03\uff1b[\u5177\u4f53\u89e3\u51b3\u65b9\u6848\u53ef\u53c2\u8003](https://pillipanda.github.io/2020/06/21/%E4%B8%80%E4%B8%AA%E5%90%88%E6%A0%BC%E7%9A%84IO%E5%AF%86%E9%9B%86%E5%9E%8Basync-consumer/) ",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/pillipanda/pd_httprequest_util",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pd-httprequest-util",
            "package_url": "https://pypi.org/project/pd-httprequest-util/",
            "platform": "",
            "project_url": "https://pypi.org/project/pd-httprequest-util/",
            "project_urls": {
                "Homepage": "https://github.com/pillipanda/pd_httprequest_util",
                "Repository": "https://github.com/pillipanda/pd_httprequest_util"
            },
            "release_url": "https://pypi.org/project/pd-httprequest-util/0.1.0/",
            "requires_dist": [
                "aiodns (>=2.0.0,<3.0.0)",
                "aiohttp (>=3.6.2,<4.0.0)",
                "ujson (>=3.1.0,<4.0.0)",
                "requests (>=2.24.0,<3.0.0)",
                "loguru (>=0.5.1,<0.6.0)"
            ],
            "requires_python": ">=3.7,<4.0",
            "summary": "http request util with both sync/async method.provide with concurrency control\uff1biter retrn\uff1blog",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7952336,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8e237cabeccca5458334153a2d84787d",
                    "sha256": "d5f75cc4bca172acf21676ea379bc41cfc4e89a429015f74802f2d0db12fd9e6"
                },
                "downloads": -1,
                "filename": "pd_httprequest_util-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8e237cabeccca5458334153a2d84787d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<4.0",
                "size": 10915,
                "upload_time": "2020-08-13T13:22:11",
                "upload_time_iso_8601": "2020-08-13T13:22:11.344948Z",
                "url": "https://files.pythonhosted.org/packages/70/7b/72a1e292167046755bc77484a81326339cb64154a675fdb7db6b7ca8049a/pd_httprequest_util-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cf6f91abed04ae978c1f629c9474f5fd",
                    "sha256": "ce64b9607b61c9194db5636cc8fc3af1abf1ac7364d1f2af78393442dbd1f259"
                },
                "downloads": -1,
                "filename": "pd_httprequest_util-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "cf6f91abed04ae978c1f629c9474f5fd",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<4.0",
                "size": 12416,
                "upload_time": "2020-08-13T13:22:13",
                "upload_time_iso_8601": "2020-08-13T13:22:13.534315Z",
                "url": "https://files.pythonhosted.org/packages/d8/57/b4286c69ff12f2523dd29cd5a66a5acea318a8db0ce2af73e37d7ef6ac36/pd_httprequest_util-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}