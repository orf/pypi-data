{
    "1.1.2": {
        "info": {
            "author": "Emeral Digital",
            "author_email": "eduardo.martinez.2117@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3"
            ],
            "description": "# customermerge\n\nThis library was developed by the technology consulting company EmeralDigital.\n\nUsage\n\n```python\t\nimport customermerge as load\nfrom google.cloud import bigquery\n\nschema = list(bigquery.SchemaField(\"NAME\", \"STRING\", mode=\"REQUIRED\")) # list: bigquery SchemaField objects\nproject = \"PROJECT_NAME\" # str: gcp project name\ndataset = \"DATASET_NAME\" # str: gcp bigquery dataset name: [PROJECT].[DATASET_NAME]\ncustomer = \"CUSTOMER_NAME\" # str: name of business customer\nbucket = \"BUCKET_NAME\" # str: gcp bucket name\nfile_path = \"gs://BUCKET_PATH/FOLDER/...\" # str: This is the path of the avro file to read\nexpiration = 30 # int: The time in minutes at which the temporary table will expire\nquery_cooler_update = \"\"\"\n                        MERGE [DATASET] a\n                        USING [TEMP_TABLE] b --new data sent by customer stored into this temp table\n                            ON a.key=b.key\n                        WHEN MATCHED THEN\n                            UPDATE SET a.field = b.field\n                        WHEN NOT MATCHED THEN\n                            INSERT(field_1, field_2)\n                    \"\"\" # str: this query do upsert to own customer data\nquery_erp_update = \"\"\"\n                        MERGE [DATASET] a\n                        USING [DATASET] b --Here we used a EXTERNAL_QUERY where erp data is\n                            ON a.key=b.key\n                        UPDATE SET a.field1 = b.field1, a.field2=b.field2\n \"\"\" # str: In this case we do not use a insert cause de update is only over matched key\n\nloading = load.LoadAvroToBigQuery(schema=schema,\n                                  project=project,\n                                  dataset=dataset,\n                                  customer=customer,\n                                  bucket=bucket,\n                                  file_path=file_path,\n                                  expiration=expiration,\n                                  query_cooler_update=query_cooler_update,\n                                  query_erp_update=query_erp_update)\nloading.merge_data()\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "python,bigquery,storage,bucket",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "customermerge",
            "package_url": "https://pypi.org/project/customermerge/",
            "platform": null,
            "project_url": "https://pypi.org/project/customermerge/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/customermerge/1.1.2/",
            "requires_dist": [
                "google-cloud-storage",
                "google-cloud-bigquery",
                "pytz"
            ],
            "requires_python": "",
            "summary": "Merge dataset from customer data trigger",
            "version": "1.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15646317,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5950f97a8f65378503c029a0bb97dda4",
                    "sha256": "e6ecc9b31594b8c88d13549e2922e4f4039d3343ece7584f39c54297574c7501"
                },
                "downloads": -1,
                "filename": "customermerge-1.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5950f97a8f65378503c029a0bb97dda4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 5706,
                "upload_time": "2022-11-03T20:34:18",
                "upload_time_iso_8601": "2022-11-03T20:34:18.377489Z",
                "url": "https://files.pythonhosted.org/packages/99/fa/08381074e2b10f14e0e7f812b9b3edb2b0b2264bf60c4e6c3a725e2783a8/customermerge-1.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2ad9dc78cb5a5fb39ed6d3dec763e492",
                    "sha256": "ba8a3712939eb7b0d79405094c125851b8eafa1419a01addebbea27958a6da1d"
                },
                "downloads": -1,
                "filename": "customermerge-1.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "2ad9dc78cb5a5fb39ed6d3dec763e492",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4639,
                "upload_time": "2022-11-03T20:34:20",
                "upload_time_iso_8601": "2022-11-03T20:34:20.413558Z",
                "url": "https://files.pythonhosted.org/packages/09/d0/1590fffff2e71f6b0711e8be801853aa1205dd275826f4fc3bfed57f1adf/customermerge-1.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}