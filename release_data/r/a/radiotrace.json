{
    "0.1.0": {
        "info": {
            "author": "Jiaqi Li",
            "author_email": "li-jq18@mails.tsinghua.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/LiJiaqi96/radiotrace",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "radiotrace",
            "package_url": "https://pypi.org/project/radiotrace/",
            "platform": null,
            "project_url": "https://pypi.org/project/radiotrace/",
            "project_urls": {
                "Homepage": "https://github.com/LiJiaqi96/radiotrace"
            },
            "release_url": "https://pypi.org/project/radiotrace/0.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "package for quantify early-stage LUAD progression from CT image",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15785478,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7849039d13da91913116c469cd26a64d",
                    "sha256": "cd068602feb2d38e3147178d6d9224afd2b04b94581f872980f86db7b1b5f6ae"
                },
                "downloads": -1,
                "filename": "radiotrace-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "7849039d13da91913116c469cd26a64d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10776,
                "upload_time": "2022-11-16T07:18:25",
                "upload_time_iso_8601": "2022-11-16T07:18:25.527761Z",
                "url": "https://files.pythonhosted.org/packages/fc/52/d404dcb0a610e33cc21ffcd6c0482ac50b36b2483d0fba523cdff44bd780/radiotrace-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Jiaqi Li",
            "author_email": "li-jq18@mails.tsinghua.edu.cn",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# radiotrace\n\n**radiotrace** is a Python package to quantify and visualize the progression status of early-stage lung adenocarcinoma (esLUAD) from CT images. It is designed and developed by Jiaqi Li from [XGlab](http://bioinfo.au.tsinghua.edu.cn/member/xuegonglab/), Tsinghua University. The work is collaborated with Prof. Wenzhao Zhong's group from Guangdong Provincial People's Hospital and Prof. Lin Yang's group from Shenzhen People's Hospital.\n\n**radiotrace** package is **free for academic use**. Please contact the authors for commercial usage.\n\n## Install\nThe **radiotrace** package integrates the use of Python and R. Don't worry, we have wrapped the R functions in the Python code and users only need to install some packages and then write Python code only.  \n\nBTW, consider the potential conflicts of packages, we strongly suggest you to install the packages in a new [anaconda](https://www.anaconda.com/products/distribution) environment :)  \n\nFirst let's install the python packages. Please pay special attention to PyTorch if you want to use GPU. It is easy to download the proper version of GPU version PyTorch from the official webpage (https://pytorch.org/get-started/locally/). In this case, make sure that you install the GPU version PyTorch before install **radiotrace**.  \n\nAfter that, or if you only need CPU version PyTorch, install **radiotrace** packages.\n```\npip install radiotrace\n```  \n\nNext, let's install the R packages. We also install the R using anaconda:  \n```\nconda install -c conda-forge r-base\n```  \n\nThen enter the R programming software by one character of code:\n```\nR\n```\n\nThe R package we need is the slingshot (Street et al., BMC Genomics, 2018), which can be installed from [Bioconductor](https://www.bioconductor.org/packages/release/bioc/html/slingshot.html). Here we use two lines of code to install these two packages:  \n```R\ninstall.packages(\"BiocManager\")  \nBiocManager::install(\"slingshot\")\n```\n\nNow we have finished package installation. It's time to explore the use of **radiotrace**.  \n\n\n\n## Tutorial\n\nBy running **radiotrace** package users are walking through several steps: Load image and segmentation, Locate and extract tumor, Load projection functions, Inference the emebedding vector(s) and coordinate(s) in PCA space, Visualization and Quantify progression status. Here we did clustering on the pixel-wise radiomic features.   \n\n### 0. Load packages\n\n```python\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom radiotrace.load import load_image, load_seg\nfrom radiotrace.locate import locate_tumor\nfrom radiotrace.get_projection import get_model, get_pca\nfrom radiotrace.inference import model_inference, pca_trans\nfrom radiotrace.visualize import visualize_reference, visualize\nfrom radiotrace.calPPS import calPPS\nfrom radiotrace.utils import cal_tumor_size, get_largest_slice\n```\n\n### 1. Load image and segmentation\n\nHere we use public NSCLC-RadioGenomics data as an example. This is a public dataset available on The Cancer Imaging Archive ([TCIA](https://www.cancerimagingarchive.net/)). Here the image and segmentation are stored in the NIFTI (.nii.gz) format.  \n\n\n```python\ndicom_path = \"./RadioGenomics/R01-001_img.nii.gz\"\nseg_path = \"./RadioGenomics/R01-001_seg.nii.gz\"\nimage = load_image(dicom_path)\nseg = load_seg(seg_path)\nprint(image.shape, seg.shape)\n```\n\n```\n(304, 512, 512) (304, 512, 512)\n```\n\n\n### 2. Locate and extract tumor\n\nNext, we locate the tumor using segmentation mask, and extract the tumor image with bounding box.   \n```python\ntumor_image, tumor_mask = locate_tumor(image, seg)\n```\n\nWe can visualize a slice of the extracted tumor corresponding mask.\n```python\nimg2d, mask2d = get_largest_slice(tumor_image, tumor_mask)\nplt.subplot(121)\nplt.imshow(img2d, cmap=\"bone\")\nplt.title(\"Tumor\")\nplt.subplot(122)\nplt.imshow(img2d, cmap=\"bone\")\nplt.imshow(mask2d, alpha=0.5)\nplt.title(\"Stack mask\")\n```\n\n![p1](https://github.com/LiJiaqi96/radiotrace/blob/main/figures/p1.png?raw=true)\n\n\n### 3. Prepare data and load projection functions\n\nWe use a deep learning model and a PCA transform function to project the tumor image to the PCA space of training set. Here we prepare the tumor image data for model input and then load the projection functions.  \n\nIf you want to use GPU to do the inference, remember to specify the environment variable before loading the model.  \n\n```python\nsize = [cal_tumor_size(tumor_mask)]\ntumor_image = [tumor_image]\n\n## Optional: specify GPU device\n# os.environ['CUDA_VISIBLE_DEVICES'] = '1'\n\nmodel = get_model(\"./data/cnn_proj_weights.pkl\")\npca_func = get_pca(\"./data/pca_trans.sav\")\n```\n\nNote that the input image should be in shape (N Z H W), and tumor size should be a list. Here we show the example of inference one tumor. Just append more samples to the list if you want to inference multiple samples.  \n\n\n### 4. Project the tumor image to vectors\n\nIn this step, we will project the tumor image to the embedding vectors, then to the PCA spacce of training set. It will not take a long time when using CPU and it is very easy to switch between CPU and GPU mode using the argument \"use_GPU\".  \n\n```python\npred_embed = model_inference(tumor_image, size, model, use_GPU=False)\npca_embed = pca_trans(pred_embed, pca_func)\n```\n\n\n### 5. Visualize the progression status of the inference tumor  \n\nWe provide two visualization functions for users to visualize the reference trajectory and samples in the training set, as well as the relative position of the inference tumors.  \n\n```python\n## Visualize the reference only\nfig = visualize_reference(reference_data_path=\"./data/ref_data.json\", curve_data_path=\"./data/curve_data.npy\")\n```\n![p2](https://github.com/LiJiaqi96/radiotrace/blob/main/figures/p2.png?raw=true)\n\n```python\n## Visualize the reference and inference tumors. Use \"transparency\" argument to adjust the color of training samples.\nfig = visualize(reference_data_path=\"./data/ref_data.json\", curve_data_path=\"./data/curve_data.npy\", transparency=0.2)\n```\n![p3](https://github.com/LiJiaqi96/radiotrace/blob/main/figures/p3.png?raw=true)\n\n\n### 6. Calculate pseudo-progression score (PPS)\n\nFinally, we quantify the progression status of the inference tumor(s). The PPS=0 indicates the earliest progression status. This step will return a list of PPS values.  \n\n```python\npps = calPPS(pca_embed, reference_data_path=\"./data/ref_data.json\", traj_obj_path=\"./data/traj_obj.rds\")\n```\n\n```\n[2.56895608]\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/LiJiaqi96/radiotrace",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "radiotrace",
            "package_url": "https://pypi.org/project/radiotrace/",
            "platform": null,
            "project_url": "https://pypi.org/project/radiotrace/",
            "project_urls": {
                "Homepage": "https://github.com/LiJiaqi96/radiotrace"
            },
            "release_url": "https://pypi.org/project/radiotrace/0.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "package for quantify early-stage LUAD progression from CT image",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15785478,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b6364b1492e754ba98cfb0404374e24f",
                    "sha256": "5010168d8422bddd347e494981fcd778feffac8d37ea622125b20d157b4b37aa"
                },
                "downloads": -1,
                "filename": "radiotrace-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "b6364b1492e754ba98cfb0404374e24f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10790,
                "upload_time": "2022-11-16T07:29:35",
                "upload_time_iso_8601": "2022-11-16T07:29:35.639524Z",
                "url": "https://files.pythonhosted.org/packages/79/e0/5c73d56b2ccbadfb6dff6913cec63d2ae8e5e2a448b9621122197167aad6/radiotrace-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}