{
    "0.70": {
        "info": {
            "author": "Dominik Niedenzu",
            "author_email": "pyadaaah@blackward.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Education",
                "Intended Audience :: Other Audience",
                "Intended Audience :: Science/Research",
                "License :: Other/Proprietary License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Software Development"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.blackward.de",
            "keywords": "",
            "license": "Proprietary License",
            "maintainer": "Dominik Niedenzu",
            "maintainer_email": "",
            "name": "enhaaancedLists",
            "package_url": "https://pypi.org/project/enhaaancedLists/",
            "platform": "any platform which provides python",
            "project_url": "https://pypi.org/project/enhaaancedLists/",
            "project_urls": {
                "Homepage": "https://www.blackward.de"
            },
            "release_url": "https://pypi.org/project/enhaaancedLists/0.70/",
            "requires_dist": null,
            "requires_python": ">= 2.2",
            "summary": "Lists with extended / enhanced in-place capabilities - using a new operator notation, closely resembling mathematical conditions",
            "version": "0.70",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10936859,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "44bae7eed704342538940256af552186",
                    "sha256": "cf19dd8759f700fe951e875e8cff022e2a5a50c4810055765dcac52dc91267be"
                },
                "downloads": -1,
                "filename": "enhaaancedLists-0.70-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "44bae7eed704342538940256af552186",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">= 2.2",
                "size": 15192,
                "upload_time": "2021-07-06T22:23:08",
                "upload_time_iso_8601": "2021-07-06T22:23:08.093722Z",
                "url": "https://files.pythonhosted.org/packages/fe/ed/5b44e7cd12c012439b05312807ff7a404b34f9286bb4a4f86b0299939e1c/enhaaancedLists-0.70-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.75": {
        "info": {
            "author": "Dominik Niedenzu",
            "author_email": "pyadaaah@blackward.de",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Education",
                "Intended Audience :: Other Audience",
                "Intended Audience :: Science/Research",
                "License :: Other/Proprietary License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Topic :: Software Development"
            ],
            "description": "The 'EnhaaancedLists' library contains **list classes** with \n**extended / enhanced in-place capabilities**.\n\nTogether with the 'elem' term / alias (comprised too), some of their \nmethods (also) allow using a **new operator notation for selecting \nlist elements** - closely resembling mathematical conditions.\n\n\nEnhList\n=======\n\n**Examples for additional capabilities** \n(the standard list operations work too) are:\n\n<span style=\"font-size:0.7em;\">( Note that the '&' resp. the '|' are 'abused' \nas 'logical and resp. logical or' in this context (and **not** 'bitwise'!) ).</span>\n\n```python\n    #convert a parameter list into an enhanced list \n    eL = EnhList(1,3,5,7)                                       #eL: [1,3,5,7]\n\n    #push single as well as multiple elements into the list\n    eL.push(9)                                  ==> None        #eL: [1,3,5,7,9]\n    eL.push(11,13,15)                           ==> None        #eL: [1,3,5,7,9,11,13,15]\n\n    #pop single as well as multiple elements from the list - \n    #note that push/pop implements a FIFO - in contrast to the standard list (LIFO)\n    eL.pop()                                    ==> 1           #eL: [3,5,7,9,11,13,15]\n    eL.pop( (elem > 3) & (elem < 11), single )  ==> 5           #eL: [3,7,9,11,13,15]\n    eL.pop( (elem > 3) & (elem < 11)         )  ==> [7,9]       #eL: [3,11,13,15]      \n\n    #get items from list\n    eL[ elem >= 10         ]                    ==> [11,13,15]  #eL: unchanged\n    eL[ elem >= 10, single ]                    ==> 11          #eL: unchanged\n    eL[ elem <  3,  single ]                    ==> None        #eL: unchanged\n\n    #check whether list contains items\n    ( elem <  3 ) in eL                         ==> False       #eL: unchanged\n    ( elem >= 3 ) in eL                         ==> True        #eL: unchanged\n\n    #delete items from list\n    del eL[ elem < 12, single ]                 ==> ---         #eL: [11,13,15]\n    del eL[ elem > 12         ]                 ==> ---         #eL: [11]\n\n    eL = EnhList(1,3,5,7)                                       #eL: [1,3,5,7]\n    #check whether all element meet a condition\n    eL.areAll( elem % 2 == 1 )                  ==> True        #eL: unchanged\n    eL.areAll( elem     >= 3 )                  ==> False       #eL: unchanged\n\n    #map function on elements / work with items of elements\n    eL.mapIf( lambda x: dict(a=x) )                          \n                        ==> None        #eL: [{'a':1},{'a':3},{'a':5},{'a':7}]\n    eL.mapIf( lambda x: x['a'] + 1, elem['a'] > 3)           \n                        ==> None        #eL: [{'a':1},{'a':3},6,8]\n\n    #work with attributes of elements\n    class Attr(object):\n        def __init__(self, value):\n            self.a = value\n        def __repr__(self):\n            return \".a=%s\" % self.a\n    eL.mapIf( lambda x: Attr(x), lambda x: type(x) ==  int ) \n                        ==> None        #eL: [{'a':1},{'a':3},.a=6,.a=8]\n```    \n\n\nSecList\n=======\n\nThe 'SecList' class is a secured version of the enhanced list class 'EnhList'.  \n\nAccess to its elements has been made 'thread-safe' by wrapping the belonging\nmethods in a 'with' context automatically 'acquiring' / 'releasing' an\ninternal 'SemiBlockingMutex' (a special multithreading / multiprocessing lock).\n\n**Example:**\n\n```python\n   #convert a parameter list into a secured list \n   sL = SecList(1,3,5,7,9,11,13)                                #sL: [1,3,5,7,9,11,13]\n   \n   #if then a first thread e.g. would run the following statement:\n   poppedLtL = sL.pop( (elem < 9) )\n   \n   #and a second thread in parallel (!!) e.g. would run the following statement:\n   poppedGtL = sL.pop( (elem > 7) )\n   \n   #there would be no error and the result would be:\n   #poppedLtL <==> [1,3,5,7]\n   #poppedGtL <==> [9,11,13]\n   #sL        <==> [] \n```\n\n\nFurther Informations\n====================\n\nDetailed descriptions can be found in the doc/help-texts of said 'EnhList' and\n'SecList' classes and their methods. E.g. try:\n\n```python\n    python -i      #and then:\n    help(EnhList)\n    help(SecList)  \n\n    #and/or\n    python enhaaancedLists.py --intro\n    python enhaaancedLists.py --test\n```\n\nMore examples can be found in the source code of the selftest() function\nof the \"enhaaancedList.py\" library module and the methods called from there.\n\nAlso note, that 'elem' just is an alias defined as follows:\n\n```python\nelem = ConditionFunction(lambda x: x)\n```\n\nThat means, that more informations about 'elem' also can be found in the doc/help-text\nbelonging to the class 'ConditionFunction', which, by the way, is inherited from\nfunctools.partial.\n\nFurther infomations and links can be found on my homepage\n[https://www.blackward.de](https://www.blackward.de)  \n\nHave Fun!\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://www.blackward.de",
            "keywords": "",
            "license": "Proprietary License",
            "maintainer": "Dominik Niedenzu",
            "maintainer_email": "",
            "name": "enhaaancedLists",
            "package_url": "https://pypi.org/project/enhaaancedLists/",
            "platform": "any platform which provides python",
            "project_url": "https://pypi.org/project/enhaaancedLists/",
            "project_urls": {
                "Homepage": "https://www.blackward.de"
            },
            "release_url": "https://pypi.org/project/enhaaancedLists/0.75/",
            "requires_dist": null,
            "requires_python": ">= 2.2",
            "summary": "(Thread-safe) list(s) with extended / enhanced in-place capabilities (e.g. conditional element selection)",
            "version": "0.75",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10936859,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "479ea8acf24bc20d5ebaefb0ed271cf2",
                    "sha256": "a59852279cb0ed30334fb9f8c31bdf89477461cd6ed4e388ade35396e00b8218"
                },
                "downloads": -1,
                "filename": "enhaaancedLists-0.75-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "479ea8acf24bc20d5ebaefb0ed271cf2",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">= 2.2",
                "size": 23468,
                "upload_time": "2021-07-17T23:17:11",
                "upload_time_iso_8601": "2021-07-17T23:17:11.980207Z",
                "url": "https://files.pythonhosted.org/packages/2c/f0/4c0fd4eab7dcef7ae15ef47d9421352c48e7a512b56e50b829f270a025d4/enhaaancedLists-0.75-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}