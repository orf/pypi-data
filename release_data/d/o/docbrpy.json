{
    "0.1.2": {
        "info": {
            "author": "Heytor Norberth Leite da Silva",
            "author_email": "heytornorberth2@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT classifiers = Development Status :: 3 - Alpha Environment :: Web Environment Intended Audience :: Developers License :: OSI Approved :: MIT License Natural Language :: English Natural Language :: Portuguese Natural Language :: Portuguese (Brazilian) Programming Language :: Python >= 3.8",
            "maintainer": "",
            "maintainer_email": "",
            "name": "DOCBRPY",
            "package_url": "https://pypi.org/project/DOCBRPY/",
            "platform": null,
            "project_url": "https://pypi.org/project/DOCBRPY/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/DOCBRPY/0.1.2/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Biblioteca para ajudar na valida\u00e7\u00e3o de documentos em sistemas",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15199300,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6eea0910262fb07d8ea3a484d6e3b4e4",
                    "sha256": "e6d9c2e5f9ef04e3ee1c455e5f829252779a31cab2aea69a5902eb9fee9c183c"
                },
                "downloads": -1,
                "filename": "DOCBRPY-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6eea0910262fb07d8ea3a484d6e3b4e4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 29886,
                "upload_time": "2022-09-21T18:30:13",
                "upload_time_iso_8601": "2022-09-21T18:30:13.011883Z",
                "url": "https://files.pythonhosted.org/packages/50/c2/58e17673d9363045e48136ebc45d60b9689e143e76bb72d94c863d3ef38c/DOCBRPY-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0293d4946491a1f40db04c8d1be39216",
                    "sha256": "caa36c116b16bff5fc3547033f70bbddf22c192e50c312ed45d40ea3bde8b4b6"
                },
                "downloads": -1,
                "filename": "DOCBRPY-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "0293d4946491a1f40db04c8d1be39216",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 13290,
                "upload_time": "2022-09-21T18:30:14",
                "upload_time_iso_8601": "2022-09-21T18:30:14.944371Z",
                "url": "https://files.pythonhosted.org/packages/10/78/f6d93fe7690922b45888d163770d506faaa33b3a6cd1c7257affbb84a944/DOCBRPY-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Heytor Norberth Leite da Silva",
            "author_email": "heytornorberth2@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "\n# PYBRDOC\n\nPYBRDOC \u00e9 uma biblioteca que visa fornecer componentes para trabalhar com tipos de dados espec\u00edficos da realidade brasileira.\n\nEsta biblioteca surgiu mediante a necessidade de se ter tipos espec\u00edficos que possibilitem lidar com documentos de identifica\u00e7\u00e3o pr\u00f3prios do Brasil, como \u00e9 o caso do Cadastro de Pessoa F\u00edsica (CPF) e do Cadastro Nacional de Pessoa Jur\u00eddica (CNPJ).\n\nPode servir bastante nas implimenta\u00e7\u00f5es de c\u00f3digos que precisam fazer a valida\u00e7\u00e3o desses determinados documentos.\n\nAl\u00e9m de conter classes que representam o modelo computacional dos principais documentos brasileiros, esta biblioteca tamb\u00e9m disponibiliza classes que permitem a valida\u00e7\u00e3o e a gera\u00e7\u00e3o de n\u00fameros v\u00e1lidos para estes documentos; sendo estas \u00faltimas disponibilizadas exclusivamente para fins de testes computacionais.\n\n> This software is coded and documented in portuguese only as it is intended to be used to generate the necessary files for the brazilian government regarding to digital bookkeeping.\n\n## Requisitos\n\n  * python\n\n## Como instalar\n\n    $ pip install PYBRDOC\n\n## Objetivos do Projeto\n\nA ideia inicial do projeto e unificar em uma \u00fanica biblioteca m\u00f3dulos que permitam representar computacionalmente e validar documentos brasileiros - inicialmente CPF e CNPJ, al\u00e9m de permitir a gera\u00e7\u00e3o de n\u00fameros v\u00e1lidos para estes documentos.\n\n## Compatibilidade do Projeto\n\nO projeto inicialmente suportar\u00e1 apenas Python 3.6.5+.\n\nOutras linguagens de programa\u00e7\u00e3o poder\u00e3o ter vers\u00f5es especificas conforme minha disponibilidade de tempo.\n\n## Status do Projeto\n\nO projeto est\u00e1 em fase inicial de desenvolvimento.\n\n| M\u00f3dulo                              |  Situa\u00e7\u00e3o       |\n|:------------------------------------|:---------------:|\n| [DocumentoIdentificacao](#di)       |Funcional        |\n| [CPF](#cpf)                         |Funcional        |\n| [ValidadorCpf](#vcpf)               |Funcional        |\n| [GeradorCpf](#gcpf)                 |Funcional        |\n| [Cnpj](#cnpj)                       |Funcional        |\n| [ValidadorCnpj](#vcnpj)             |Funcional        |\n| [GeradorCnpj](#gcnpj)               |Funcional        |\n| [InscricaoEstadual](#ie)            |Funcional        |\n| [ValidadorInscricaoEstadual](#vie)  |Funcional        |\n| [GeradorInscricaoEstadual](#gie)    |N\u00e3o implementado |\n| [InscricaoSuframa](#is)             |Funcional        |\n| [ValidadorSuframa](#vs)             |Funcional        |\n| [GeradorSuframa](#gs)               |Funcional        |\n\n\n### <a name=\"di\"></a> DocumentoIdentificacao\n\nClasse abstrata, n\u00e3o podendo ser instanciada diretamente, serve como base para todas as classes que representam um documento de identifica\u00e7\u00e3o ou qualquer outro documento brasileiro que necessite de valida\u00e7\u00e3o.\n\n### <a name=\"cpf\"></a> CPF\n\nClasse usada para representar em c\u00f3digo Pyhton um _Cadastro de Pessoa F\u00edsica_ (CPF); permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cpf = CPF('52513127765')\n    >>> cpf\n    '525.131.277-65'\n\n    >>> cpf.isValid\n    True\n\n    >>> cpf.rawValue\n    52513127765\n\n    >>> cpf = CPF('abcdefghijk')\n    >>> cpf.isValid\n    False\n\n    >>> print(cpf)\n    abcdefghijk\n\n    >>> print(cpf.rawValue)\n    abcdefghijk\n\n> Independente do conte\u00fado passado ao se criar uma inst\u00e2ncia de CPF, **sempre** obter-se-\u00e1 uma inst\u00e2ncia deste. Caber\u00e1 consultar a propriedade __isValid__ de uma inst\u00e2ncia de CPF para verificar se esta \u00e9 v\u00e1lida ou n\u00e3o.\n\n> A representa\u00e7\u00e3o textual de uma inst\u00e2ncia de CPF s\u00f3 ser\u00e1 exibida caso esta inst\u00e2ncia contenha um n\u00famero v\u00e1lido de CPF; ao contr\u00e1rio ser\u00e1 exibida a _string_ utilizada para cri\u00e1-la.\n\n> Para obter a _string_ utilizada ao instanciar um CPF, basta acessar a propriedade **rawValue** da inst\u00e2ncia criada.\n\n### <a name=\"vcpf\"></a> ValidadorCpf\n\nClasse respons\u00e1vel por validar uma inst\u00e2ncia de CPF ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de um CPF.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cpf = CPF('abcdefghijk')\n    >>> ValidadorCpf.validar(cpf)\n    False\n\n    >>> ValidadorCpf.validar('123.456.789-00')\n    False\n\n    Foi criado um CPF v\u00e1lido, por\u00e9m foi digitado um caractere de separa\u00e7\u00e3o diferente dos caracteres esperados (.-/ ). Mesmo assim, o validador informa tratar-se de um CPF correto\n    >>> cpf = CPF('508,697,212-40')\n    >>> ValidadorCpf.validar(cpf)\n    True\n\n### <a name=\"gcpf\"></a> GeradorCpf\n\nClasse respons\u00e1vel por gerar aleatoriamente um CPF v\u00e1lido.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cpf = GeradorCpf.gerar()\n    >>> cpf.isValid\n    True\n\n### <a name=\"cnpj\"></a> Cnpj\n\nClasse usada para representar em c\u00f3digo Pyhton um _Cadastro Nacional de Pessoa Jur\u00eddica_ (CNPJ); permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.\n\n#### Utiliza\u00e7\u00e3o\n\n\t>>> cnpj = Cnpj('abcdefghijklmn')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('12345678901234')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-0O')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-00')\n\t>>> cnpj.isValid\n\tTrue\n\n> Independente do conte\u00fado passado ao se criar uma inst\u00e2ncia de CNPJ, **sempre** obter-se-\u00e1 uma inst\u00e2ncia deste. Caber\u00e1 consultar a propriedade __isValid__ de uma inst\u00e2ncia de CNPJ para verificar se esta \u00e9 v\u00e1lida ou n\u00e3o.\n\n> A representa\u00e7\u00e3o textual de uma inst\u00e2ncia de CNPJ s\u00f3 ser\u00e1 exibida caso esta inst\u00e2ncia contenha um n\u00famero v\u00e1lido de CNPJ; ao contr\u00e1rio ser\u00e1 exibida a _string_ utilizada para cri\u00e1-la.\n\n> Para obter a _string_ utilizada ao instanciar um CNPJ, basta acessar a propriedade **rawValue** da inst\u00e2ncia criada.\n\n### <a name=\"vcnpj\"></a> ValidadorCnpj\n\nClasse respons\u00e1vel por validar uma inst\u00e2ncia de CNPJ ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de um CNPJ.\n\n#### Utiliza\u00e7\u00e3o\n\n\t>>> cnpj = Cnpj('abcdefghijklmn')\n\t>>> ValidadorCnpj.validar(cnpj)\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-0O')\n\t>>>ValidadorCnpj.validar(cnpj)\n\tFalse\n\n\t>>> ValidadorCnpj.validar('12345678901234')\n\tFalse\n\n\t>>> cnpj = Cnpj('34  633 423,0001/60')\n\t>>> ValidadorCnpj.validar(cnpj)\n\tTrue\n\n\t>>> ValidadorCnpj.validar('05.692.744/0001-38')\n\tTrue\n\n### <a name=\"gcnpj\"></a> GeradorCnpj\n\nClasse respons\u00e1vel por gerar aleatoriamente um CNPJ v\u00e1lido.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cnpj = GeradorCnpj.gerar()\n    >>> cnpj.isValid\n    True\n\n#### Novidade!!! Consulta Online\nAdicionado a fun\u00e7\u00e3o consultar CNPJ, que por meio de uma API da receita federal \"ReceitaWS\", consegue informar os dados sobre o CNPJ desejado.\n\n### <a name=\"is\"></a> InscricaoSuframa\n\nRepresenta o n\u00famero de inscri\u00e7\u00e3o na Superintend\u00eancia da Zona Franca de Manaus (SUFRAMA)\n\n> A SUFRAMA mant\u00e9m controle sobre as empresas com insentivo fiscal, identificando-as atrav\u00e9s do n\u00famero de _Inscri\u00e7\u00e3o SUFRAMA_.\n\nA composi\u00e7\u00e3o deste indicador \u00e9: _SS.NNNN.LLD_, onde:\n\n**SS** representa o __c\u00f3digo do setor de atividade__ da empresa, conforme exemplo abaixo:\n\n| C\u00f3digo  | Descri\u00e7\u00e3o                   |\n| :----:  | :---------------------------|\n| 01 e 02 | Cooperativa                 |\n| 10 e 11 | Com\u00e9rcio                    |\n| 20      | Ind\u00fastria com projeto pleno |\n| 60      | Servi\u00e7os                    |\n\n**NNNN** n\u00famero sequencial\n\n**LL** representa o c\u00f3digo da licalidade da Unidade Administrativa da Suframa que habilitou a empresa, conforme exemplo abaixo:\n\n\n| C\u00f3digo | Descri\u00e7\u00e3o   |\n| :----: | :-----------|\n|   01   | Manaus      |\n|   10   | Boa Vista   |\n|   30   | Porto Velho |\n\n**D** d\u00edgito verificador\n\n#### Valida\u00e7\u00e3o\n\n* Campo num\u00e9rico com 9 posi\u00e7\u00f5es (incluindo o d\u00edgito verificador).\n* Pode iniciar por 0 (zero), mas n\u00e3o pode iniciar por 00.\n* D\u00edgito verificador calculado por [__m\u00f3dulo 11__](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador#M\u00f3dulo_11 \"M\u00e9todo de c\u00e1lculo do d\u00edgito verificador usando M\u00f3dulo 11\"), pesos 2 a 9.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> x = InscricaoSuframa('01.1234.129')\n    >>> x.rawValue\n    '011234129'\n    >>> print(x)\n    01.1234.129\n    >>> x.isValid\n    False\n\n    >>> x = InscricaoSuframa('101580100')\n    >>> x.rawValue\n    '101580100'\n    >>> print(x)\n    10.1580.100\n    >>> x.isValid\n    True\n\n    >>> x = InscricaoSuframa('1015801OO')\n    >>> x.rawValue\n    '1015801OO'\n    >>> print(x)\n    1015801OO\n    >>> x.isValid\n    False\n\n### <a name=\"vs\"></a> ValidadorSuframa\n\nValida uma inst\u00e2ncia de InscricaoSuframa ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de uma Inscri\u00e7\u00e3o Suframa.\n\n#### Utiliza\u00e7\u00e3o\n\n    # Valida\u00e7\u00e3o de uma _string_ representando uma Inscri\u00e7\u00e3o Suframa:\n    >>> ValidadorSuframa.validar('101580100')\n    True\n\n    # Valida\u00e7\u00e3o de uma _string_ representando uma Inscri\u00e7\u00e3o Suframa inv\u00e1lida (contendo caracteres n\u00e3o num\u00e9ricos):\n    >>> ValidadorSuframa.validar('1015801OO')\n    False\n\n    # Valida\u00e7\u00e3o de uma inst\u00e2ncia de Inscri\u00e7\u00e3oSuframa:\n    >>> x = InscricaoSuframa('01.1234.129')\n    >>> ValidadorSuframa.validar(x)\n    False\n\n### <a name=\"gs\"></a> GeradorSuframa\n\nGera aleatoriamente uma Inscri\u00e7\u00e3o Suframa v\u00e1lida\n\n    >>> x = GeradorSuframa.gerar()\n    >>> x.isValid\n    True\n\n> **IMPORTANTE**: O __GeradorSuframa__ tem por objetivo ajudar estudantes, programadores, analistas de sistemas e testadores de c\u00f3digo a gerar Inscri\u00e7\u00f5es Suframa v\u00e1lidas visando auxiliar as rotinas de testes de softwares em desenvolvimento.\n\n> A m\u00e1 utiliza\u00e7\u00e3o dos dados gerados pelo __GeradorSuframa__ \u00e9 de **total responsabilidade do usu\u00e1rio** desta biblioteca.\n\n> As inscri\u00e7\u00f5es s\u00e3o geradas de forma aleat\u00f3ria, respeitando as leis de forma\u00e7\u00e3o estabelecidas pela SUFRAMA.\n\n### <a name=\"ie\"></a> InscricaoEstadual\n\nRepresenta, em c\u00f3digo Pyhton, uma _Inscri\u00e7\u00e3o Estadual_ (IE), ou o registro do contribuinte no cadastro do ICMS mantido pela Receita Estadual; permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> ie = InscricaoEstadual('613.855.219.926', 'SP')\n    >>> ie.isValid\n    True\n    >>> ie.rawValue\n    '613855219926'\n    >>> ie.UF\n    'SP'\n    >>> print(ie)\n    613.855.219.926\n\n### <a name=\"vie\"></a> ValidadorInscricaoEstadual\n\nValida a consist\u00eancia de uma inst\u00e2ncia de InscricaoEstadual ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de uma Inscri\u00e7\u00e3o Estadual para uma determinada Unidade da Federa\u00e7\u00e3o, informada juntamente com a representa\u00e7\u00e3o num\u00e9rica da IE a qual se deseja validar.\n\n> A valida\u00e7\u00e3o da Inscri\u00e7\u00e3o Estadual para cada Unidade da Federa\u00e7\u00e3o brasileira, leva em considera\u00e7\u00e3o o disposto no [__Conv\u00eanio 57/59__](http://www.sintegra.gov.br/conv_5795.html \"Conv\u00eanioICMS 57/59\"), como tamb\u00e9m as orienta\u00e7\u00f5es e especificidades contidas na p\u00e1gina [Confer\u00eancias de Inscri\u00e7\u00f5es Estaduais](http://www.sintegra.gov.br/insc_est.html \"Confer\u00eancia de Inscri\u00e7\u00f5es Estaduais\") do SINTEGRA.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> ie = InscricaoEstadual('613.855.219.926', 'SP')\n    >>> ValidadorInscricaoEstadual.validar(ie)\n    True\n\n    >>> ValidadorInscricaoEstadual.validarStr('207653461', 'RN')\n    True\n    >>> ValidadorInscricaoEstadual.validarStr('209564598', 'TO')\n    False\n\n> **NOTA**: Caso n\u00e3o se deseje utilizar o __ValidadorInscricaoEstadual__, pode-se utilizar o validador espec\u00edfico para uma determinada Unidade da Federa\u00e7\u00e3o.\n<p>Cada Unidade da Federa\u00e7\u00e3o brasileira possui o seu pr\u00f3prio validador, definido por: **Validador**XX, onde _XX_ deve ser substitu\u00eddo pela sigla da Unidade da Federa\u00e7\u00e3o desejada.</p>\n<p>O Exemplo a seguir mostra como utilizar somente o validador espec\u00edfico para o Cear\u00e1, visando validar uma Inscri\u00e7\u00e3o Estadual deste Estado:</p>\n\n    >>> from bradocs4py.validadoresie import ValidadorCE\n    >>> ValidadorCE.validar('1234567')\n    False\n    >>> ValidadorCE.validar('50374156-6')\n    True\n\n> **IMPORTANTE**: Ao contr\u00e1rio de ValidadorInscricaoEstadual, os validadores espec\u00edficos de cada UF validam somente uma cadeia de caracteres (_string_) contendo o n\u00famero representativo da Inscri\u00e7\u00e3o Estadual a ser validada.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT classifiers = Development Status :: 3 - Alpha Environment :: Web Environment Intended Audience :: Developers License :: OSI Approved :: MIT License Natural Language :: English Natural Language :: Portuguese Natural Language :: Portuguese (Brazilian) Programming Language :: Python >= 3.8",
            "maintainer": "",
            "maintainer_email": "",
            "name": "DOCBRPY",
            "package_url": "https://pypi.org/project/DOCBRPY/",
            "platform": null,
            "project_url": "https://pypi.org/project/DOCBRPY/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/DOCBRPY/0.1.3/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Biblioteca para ajudar na valida\u00e7\u00e3o de documentos em sistemas e verifica\u00e7\u00e3o da sua existencia no banco de dados da Receita Federal",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15199300,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "62b44f046ce396bce4a4272464cc0bf6",
                    "sha256": "ee449a2fc0825644faabf3e47c7ab49d6f61b9d9e73d643dbf20cffd91eb2bee"
                },
                "downloads": -1,
                "filename": "DOCBRPY-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "62b44f046ce396bce4a4272464cc0bf6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 30477,
                "upload_time": "2022-09-24T16:17:31",
                "upload_time_iso_8601": "2022-09-24T16:17:31.142835Z",
                "url": "https://files.pythonhosted.org/packages/86/42/57e82a7667133c4d6ddbb3bd733bdeded6908c4efdf4e9fad3491ca7d1e7/DOCBRPY-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b4944c41c6e5c0416cef96db22fe5e0",
                    "sha256": "6267720d5eb78c8348ec97e4efa78ff6b0cd2561be3757800259eff583ccfdd1"
                },
                "downloads": -1,
                "filename": "DOCBRPY-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "9b4944c41c6e5c0416cef96db22fe5e0",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 13828,
                "upload_time": "2022-09-24T16:17:34",
                "upload_time_iso_8601": "2022-09-24T16:17:34.830513Z",
                "url": "https://files.pythonhosted.org/packages/af/60/cf8b0d1ecd5b5b4bd2a3bb32a99a20ece7bfdc4f014663828be35f43e066/DOCBRPY-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}