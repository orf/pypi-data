{
    "0.18.1": {
        "info": {
            "author": "RKVST Inc.",
            "author_email": "support@rkvst.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python :: 3.7",
                "Topic :: Utilities"
            ],
            "description": "\n.. _readme:\n\nRKVST Python Client\n=========================\n\nThe standard RKVST Python Client.\n\nPlease note that the canonical API for RKVST is always the REST API\ndocumented at https://docs.rkvst.com\n\nSupport\n=======\n\nThis package currently is tested against Python versions 3.7,3.8,3.9,3.10 and 3.11.\n\nThe current default version is 3.7 - this means that this package will not\nuse any features specific to versions 3.8 and later.\n\nAfter End of Life of a particular Python version, support is offered on a best effort\nbasis. We may ask you to update your Python version to help solve the problem,\nif it cannot be reasonably resolved in your current version.\n\nInstallation\n=============\n\nUse standard python pip utility:\n\n.. code:: bash\n\n    python3 -m pip install rkvst-archivist\n\nIf your version of python3 is too old an error of this type or similar will be emitted:\n\n.. note:: \n\n    ERROR: Could not find a version that satisfies the requirement rkvst-archivist (from versions: none)\n    ERROR: No matching distribution found for rkvst-archivist\n\nExample\n=============\n\nYou can then use the examples code to create assets (see examples directory):\n\n.. code:: python\n\n    \"\"\"Create an asset in RKVST with User Token.\n\n    The module contains two functions: main and create_asset. Main function parses in\n    a url to the Archivist and credentials, which is a user authorization.\n    The main function would initialize an archivist connection using the url and\n    the credentials, called \"arch\", then call arch.assets.create() and the asset will be created.\n    \"\"\"\n\n    from os import getenv\n\n    from archivist.archivist import Archivist\n    from archivist.proof_mechanism import ProofMechanism\n\n\n    def create_asset(arch):\n        \"\"\"Create an asset using Archivist Connection.\n\n        Args:\n            arch: archivist connection.\n\n        Returns:\n            newasset: a new asset created.\n\n        \"\"\"\n        attrs = {\n            \"arc_display_name\": \"display_name\",  # Asset's display name in the user interface\n            \"arc_description\": \"display_description\",  # Asset's description in the user interface\n            \"arc_display_type\": \"display_type\",  # Arc_display_type is a free text field\n            # allowing the creator of\n            # an asset to specify the asset\n            # type or class. Be careful when setting this:\n            # assets are grouped by type and\n            # sharing policies can be\n            # configured to share assets based on\n            # their arc_display_type.\n            # So a mistake here can result in asset data being\n            # under- or over-shared.\n            \"some_custom_attribute\": \"value\"  # You can add any custom value as long as\n            # it does not start with arc_\n        }\n        #\n        # Select the mechanism used to prove evidence for the asset.  If the selected proof\n        # mechanism is not enabled for your tenant then an error will occur.\n        # If unspecified then SIMPLE_HASH is used.\n        # proof_mechanism = ProofMechanism.KHIPU.name\n        props = {\n            \"proof_mechanism\": ProofMechanism.SIMPLE_HASH.name,\n        }\n\n        # The first argument are the properties of the asset\n        # The second argument are the attributes of the asset\n        # The third argument is wait for confirmation:\n        #   If @confirm@ is True then this function will not\n        #   return until the asset is confirmed on the blockchain and ready\n        #   to accept events (or an error occurs)\n        #\n        return arch.assets.create(props=props, attrs=attrs, confirm=True)\n        # alternatively if some work can be done whilst the asset is confirmed then this call can be\n        # replaced by a two-step alternative:\n\n        # asset = arch.assets.create(props=props, attrs=attrs, confirm=False)\n\n        # ... do something else here\n        # and then wait for confirmation\n\n        # self.arch.assets.wait_for_confirmation(asset['identity']))\n\n\n    def main():\n        \"\"\"Main function of create asset.\n\n        Parse in user input of url and client id/secrets and use them to\n        create an example archivist connection and create an asset.\n\n        \"\"\"\n\n        # client id and client secret is obtained from the appidp endpoint - see the\n        # application registrations example code in examples/applications_registration.py\n        #\n        # client id is an environment variable. client_secret is stored in a file in a\n        # directory that has 0700 permissions. The location of this file is set in\n        # the client_secret_filename environment variable.\n        client_id = getenv(\"ARCHIVIST_CLIENT_ID\")\n        client_secret_file = getenv(\"ARCHIVIST_CLIENT_SECRET_FILENAME\")\n        with open(client_secret_file, mode=\"r\", encoding=\"utf-8\") as tokenfile:\n            client_secret = tokenfile.read().strip()\n\n        # Initialize connection to Archivist. max_time is the time to wait for confirmation\n        # of an asset or event creation - the default is 1200 seconds but one can optionally\n        # specify a different value here particularly when creating assets on SIMPLE_HASH\n        # (rather than KHIPU) as confirmation times are much shorter in this case.\n        with arch = Archivist(\n            \"https://app.rkvst.io\",\n            (client_id, client_secret),\n            max_time=300,\n        ) as arch:\n            # Create a new asset\n            asset = create_asset(arch)\n            print(\"Asset\", asset)\n\n\n    if __name__ == \"__main__\":\n        main()\n\n\nNotebooks\n=================\n\nSome jupyter notebooks are available to exercise the examples code. Do the following:\n\n.. code:: text\n\n    task builder      # only necessary first time checking out repo.\n    ./scripts/notebooks.sh\n\nSomething similar to the following will be emitted:\n\n.. code:: text\n\n    [I 2022-07-13 15:29:32.102 LabApp] JupyterLab extension loaded from /usr/local/lib/python3.7/site-packages/jupyterlab\n    [I 2022-07-13 15:29:32.102 LabApp] JupyterLab application directory is /usr/local/share/jupyter/lab\n    [I 15:29:32.106 NotebookApp] Serving notebooks from local directory: /home/builder/notebooks\n    [I 15:29:32.107 NotebookApp] Jupyter Notebook 6.4.12 is running at:\n    [I 15:29:32.107 NotebookApp] http://d77e9e7ff8a1:8888/?token=e51c0b5120f5cf76e06c0415896aee13b0849830a9c8c83f\n    [I 15:29:32.107 NotebookApp]  or http://127.0.0.1:8888/?token=e51c0b5120f5cf76e06c0415896aee13b0849830a9c8c83f\n    [I 15:29:32.107 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\n    [C 15:29:32.110 NotebookApp]\n\n        To access the notebook, open this file in a browser:\n            file:///home/builder/.local/share/jupyter/runtime/nbserver-1-open.html\n        Or copy and paste one of these URLs:\n            http://d77e9e7ff8a1:8888/?token=e51c0b5120f5cf76e06c0415896aee13b0849830a9c8c83f\n         or http://127.0.0.1:8888/?token=e51c0b5120f5cf76e06c0415896aee13b0849830a9c8c83f\n\nCut and paste one of the links given into your browser and use the various dialogs to select an available notebook\nor create a new notebook and follow current code in examples directory.\nPlease note that security tokens will be required - either a JWT or Application ID and secret and these should be stored in files in the local credentials directory.\n\n\nFile Story Runner\n=================\n\nYou can run scenarios - a sequence of steps - from a python dictionary or from a yaml\nor json file.\n\nPython\n------\n\n.. code:: python\n\n    from logging import getLogger\n    from pyaml_env import parse_config\n    from sys import exit as sys_exit\n    from sys import stdout as sys_stdout\n\n    from archivist import about\n    from archivist.archivist import Archivist\n    from archivist.parser import common_parser, endpoint\n\n    LOGGER = getLogger(__name__)\n\n    def run(arch: Archivist, args):\n\n        LOGGER.info(\"Using version %s of rkvst-archivist\", about.__version__)\n        LOGGER.info(\"Namespace %s\", args.namespace)\n\n        with open(args.yamlfile, \"r\", encoding=\"utf-8\") as y:\n            arch.runner(parse_config(data=y)\n\n        sys_exit(0)\n\n    def main():\n        parser = common_parser(\"Executes the archivist runner from a yaml file\")\n\n        parser.add_argument(\n            \"yamlfile\", help=\"the yaml file describing the steps to conduct\"\n        )\n        args = parser.parse_args()\n\n        arch = endpoint(args)\n\n        run(arch, args)\n\n        parser.print_help(sys_stdout)\n        sys_exit(1)\n\n\nCommand Line\n------------\n\nThis functionality is also available with the CLI tool :code:`archivist_runner`, which is bundled with version v0.10 onwards of the :code:`rkvst-archivist`.\n\nYou can verify the installation by running the following:\n\n.. code-block:: shell\n\n   archivist_runner -h\n\nWhich will show you the available options when using :code:`archivist_runner`.\n\nTo use the :code:`archivist_runner` command you will need the following:\n\n    - A Client ID and Client Secret by creating an `App Registration`_\n    - The YAML file with the operations you wish to run\n    - The URL of your RKVST instance, this is typically `https://app.rkvst.io`\n\n.. _App Registration: https://docs.rkvst.com/docs/setup-and-administration/getting-access-tokens-using-app-registrations/\n\nExample usage:\n\n.. code-block:: shell\n\n   archivist_runner \\\n         -u https://app.rkvst.io \\\n         --client-id <your-client-id> \\\n         --client-secret <your-client-secret> \\\n         functests/test_resources/richness_story.yaml\n\n\nExample Yaml Snippet\n--------------------\n\nThis is an example of creating an asset and creating an event for that asset. The\nyaml file consists of a list of steps.\n\nEach step consists of control parameters (specified in the 'step' dictionary) and \nthe yaml representation of the request body for an asset or event.\n\nThe confirm: field is a control variable for the PythonSDK that ensures that the\nasset or event is confirmed before returning.\n\n.. note::\n\n   The name of the asset is important. The value of the name is carried forward for\n   every operation - in this case the name of the asset is 'radiation bag 1'.\n\n   Arguments to the archivist are usually strings - in this example radioactive is \n   'true' which archivist will treat as a boolean.\n\n\n.. code:: yaml\n\n    ---\n    # Demonstration of applying a Richness compliance policy to an asset that undergoes\n    # events that may or may not make the asset compliant or non-compliant.\n    #\n    # The operation field is a string that represents the method bound to an endpoint and\n    # the args and kwargs correspond to the arguments to such a method.\n    #\n    # NB the assets and events endpoints require all values to be strings. Other values may\n    # be of the correct type such as confirm which is a boolean.\n    #\n    steps:\n\n      # note the values to the assets.create method are string representations of boolean\n      # and numbers\n      - step:\n          action: ASSETS_CREATE\n          description: Create an empty radiation bag with id 1.\n          asset_label: radiation bag 1\n        behaviours:\n          - Attachments\n          - RecordEvidence\n        attributes:\n          arc_display_name: radiation bag 1\n          radioactive: \"true\"\n          radiation_level: \"0\"\n          weight: \"0\"\n        confirm: true\n\n      # setup the radiation bags to have a varing amount of radiactive waste\n      # note the values to the events.create method are string representations of boolean\n      # and numbers\n      - step:\n          action: EVENTS_CREATE\n          description: Create Event adding 3 rads of radiation to bag 1, increasing its weight by 1kg.\n          asset_label: radiation bag 1\n        operation: Record\n        behaviour: RecordEvidence\n        event_attributes:\n          arc_description: add waste to bag\n          arc_evidence: see attached conformance report\n          conformance_report: blobs/e2a1d16c-03cd-45a1-8cd0-690831df1273\n        asset_attributes:\n          radiation_level: \"3\"\n          weight: \"1\"\n        confirm: true\n\nLogging\n========\n\nFollows the Django model as described here: https://docs.djangoproject.com/en/3.2/topics/logging/\n\nThe base logger for this package is rooted at \"archivist\" with subloggers for each endpoint:\n\n.. note::\n    archivist.archivist\n        sublogger for archivist submodule\n\n    archivist.assets\n        sublogger for assets submodule\n\nand for other endpoints.\n\nLogging is configured by either defining a root logger with suitable handlers, formatters etc. or\nby using dictionary configuration as described here: https://docs.python.org/3/library/logging.config.html#logging-config-dictschema\n\nA recommended minimum configuration would be:\n\n.. code:: python\n\n    import logging\n\n    logging.dictConfig({\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"handlers\": {\n            \"console\": {\n                \"class\": \"logging.StreamHandler\",\n            },\n        },\n        \"root\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n        },\n    })\n\nFor convenience this has been encapsulated in a convenience function :code:`set_logger`\nwhich should be called before anything else:\n\n.. code:: python\n\n    from archivist.logger import set_logger\n    from archivist.archivist import Archivist\n\n    set_logger(\"DEBUG\")\n    client_id = getenv(\"ARCHIVIST_CLIENT_ID\")\n    client_secret_file = getenv(\"ARCHIVIST_CLIENT_SECRET_FILENAME\")\n    with open(client_secret_file, mode=\"r\", encoding=\"utf-8\") as tokenfile:\n        client_secret = tokenfile.read().strip()\n\n    arch = Archivist(\n        \"https://app.rkvst.io\",\n        (client_id, client_secret),\n        max_time=300,\n    )\n\nDevelopment\n===========\n\nFor instructions on contributing to the RKVST SDK see DEVELOPMENT.md.\n",
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/rkvst/rkvst-python",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rkvst-archivist",
            "package_url": "https://pypi.org/project/rkvst-archivist/",
            "platform": null,
            "project_url": "https://pypi.org/project/rkvst-archivist/",
            "project_urls": {
                "Documentation": "https://python.rkvst.com",
                "Homepage": "https://github.com/rkvst/rkvst-python",
                "Source": "https://github.com/rkvst/rkvst-python",
                "Tracker": "https://github.com/rkvst/rkvst-python/issues"
            },
            "release_url": "https://pypi.org/project/rkvst-archivist/0.18.1/",
            "requires_dist": [
                "backoff (~=1.11)",
                "certifi",
                "flatten-dict (~=0.4)",
                "iso8601 (~=1.0)",
                "Jinja2 (~=3.0)",
                "pyaml-env (~=1.1)",
                "requests (~=2.28)",
                "requests-toolbelt (~=0.9)",
                "rfc3339 (~=6.2)",
                "xmltodict (~=0.13)"
            ],
            "requires_python": ">=3.7",
            "summary": "RKVST Client",
            "version": "0.18.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16160327,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a089a1ee86db79934a79545622285d8b",
                    "sha256": "da2eb0b932c3183cbe9075f0b5797a09b23d6389619bc7d447195a1d4fa131f5"
                },
                "downloads": -1,
                "filename": "rkvst_archivist-0.18.1-py2.py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a089a1ee86db79934a79545622285d8b",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": ">=3.7",
                "size": 67321,
                "upload_time": "2022-12-20T11:14:36",
                "upload_time_iso_8601": "2022-12-20T11:14:36.145319Z",
                "url": "https://files.pythonhosted.org/packages/74/47/19d7257aa3928566fc5c8a5c9851d41e1e14c445272a767e7b85b7cb9018/rkvst_archivist-0.18.1-py2.py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d15b23209b8c7bda7a141497ce550d20",
                    "sha256": "daac74aab6b2fa40247d4add27e6f9cdf0b38b41c0174b42450553c6ed1c7c34"
                },
                "downloads": -1,
                "filename": "rkvst-archivist-0.18.1.tar.gz",
                "has_sig": false,
                "md5_digest": "d15b23209b8c7bda7a141497ce550d20",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 55199,
                "upload_time": "2022-12-20T11:14:37",
                "upload_time_iso_8601": "2022-12-20T11:14:37.857927Z",
                "url": "https://files.pythonhosted.org/packages/13/60/39cfd07422e54fe2bea28f452ae5aa473756c98454d3bf38ecc8b494f4ec/rkvst-archivist-0.18.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}