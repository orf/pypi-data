{
    "0.0.1": {
        "info": {
            "author": "Nicola Donelli, Enrico Deusebio",
            "author_email": "nicoladonelli87@gmail.com, edeusebio85@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "py4ai core\n====\n\n[![PyPI](https://img.shields.io/pypi/v/py4ai-core.svg)](https://pypi.python.org/pypi/py4ai-core)\n[![Python version](https://img.shields.io/badge/python-3.7+-blue.svg)](https://pypi.python.org/pypi/py4ai-core)\n[![Documentation](https://img.shields.io/badge/docs-latest-brightgreen.svg)](https://py4ai.github.io/py4ai-core/)\n![Python package](https://github.com/NicolaDonelli/py4ai-core/workflows/CI%20-%20Build%20and%20Test/badge.svg)\n\n--------------------------------------------------------------------------------\n\n\nA Python library defining data structures optimized for machine learning pipelines \n\n\n## What is it ?\n**py4ai-core** is a Python package with modular design that provides powerful abstractions to build data \ningestion pipelines and run end to end machine learning pipelines. \nThe library offers lightweight object-oriented interface to MongoDB as well as Pandas based data structures. \nThe aim of the library is to provide extensive support for developing machine learning based applications \nwith a focus on practicing clean code and modular design. \n\n## Features\nSome cool features that we are proud to mention are: \n\n### Data layers \n1. Archiver: Offers an object-oriented design to perform ETL on Mongodb collections as well as Pandas DataFrames.\n2. DAO: Data Access Object to allow archivers to serialize domain objects into the proper persistence layer support \nobject (e.g. in the case of MongoDB, a DAO serializes a domain object into a MongoDB document) and to parse objects\nretrieved from the given persistence layer in the correct representation in our framework (e.g. a text will be parsed in \na Document while tabular data will be parsed in a pandas DataFrame).\n3. Database: Object representing a relational database\n4. Table: Object representing a table of a relational database\n\n### Data Model\nOffers the following data structures: \n1. Document : Data structure specifically designed to work with NLP applications that parses a json-like document \ninto a couple of uuid and dictionary of information.\n2. Sample : Data structure representing an observation (a.k.a. sample) as used in machine learning applications\n3. MultiFeatureSample : Data structure representing an observation defined by a nested list of arrays.\n4. Dataset : Data structure designed to be used specifically for machine learning applications representing a collection \nof samples.\n\n## Installation\nFrom pypi server\n```\npip install py4ai-core\n```\n\nFrom source\n```\ngit clone https://github.com/py4ai/py4ai-core\ncd py4ai-core\nmake install\n```\n\n## Tests \n```\nmake tests\n```\n\n## Checks \nTo run predefined checks (unit-tests, linting checks, formatting checks and static typing checks):\n```\nmake checks\n```\n\n## Examples \n\n### Data Layers\nCreating a Database of Table objects\n\n```python\nimport pandas as pd\nfrom py4ai.core.data.layer.pandas.databases import Database\n\n# sample df\ndf1 = pd.DataFrame([[1, 2, 3], [6, 5, 4]], columns=['a', 'b', 'c'])\n\n# creating a database \ndb = Database('/path/to/db')\ntable1 = db.table('df1')\n\n# write table to path\ntable1.write(df1)\n# get path  \nprint(table1.filename)\n\n# convert to pandas dataframe \ntable1.to_df()\n\n# get table from database \ndb.__getitem__('df1')\n```\n\nUsing an Archiver with Dao objects\n\n```python\nfrom py4ai.core.data.layer.pandas.archivers import CsvArchiver\nfrom py4ai.core.data.layer.pandas.dao import DataFrameDAO\n\n# create a dao object \ndao = DataFrameDAO()\n\n# create a csv archiver \narch = CsvArchiver('/path/to/csvfile.csv', dao)\n\n# get pandas dataframe \nprint(arch.data.head())\n\n# retrieve a single document object \ndoc = next(arch.retrieve())\n# retrieve a list of document objects \ndocs = [i for i in arch.retrieve()]\n# retrieve a document by it's id \narch.retrieveById(doc.uuid)\n\n# archive a single document \ndoc = next(arch.retrieve())\n# update column_name field of the document with the given value\ndoc.data.update({'column_name': 'VALUE'})\n# archive the document \narch.archiveOne(doc)\n# archive list of documents\narch.archiveMany([doc, doc])\n\n# get a document object as a pandas series \narch.dao.get(doc)\n```\n### Data Model\n\nCreating a PandasDataset object\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom py4ai.core.data.model.ml import PandasDataset\n\ndataset = PandasDataset(features=pd.concat([pd.Series([1, np.nan, 2, 3], name=\"feat1\"),\n                                            pd.Series([1, 2, 3, 4], name=\"feat2\")], axis=1),\n                        labels=pd.Series([0, 0, 0, 1], name=\"Label\"))\n\n# access features as a pandas dataframe \nprint(dataset.features.head())\n# access labels as pandas dataframe \nprint(dataset.labels.head())\n# access features as a python dictionary \ndataset.getFeaturesAs('dict')\n# access features as numpy array \ndataset.getFeaturesAs('array')\n\n# indexing operations \n# access features and labels at the given index as a pandas dataframe  \nprint(dataset.loc([2]).features.head())\nprint(dataset.loc([2]).labels.head())\n```\n\nCreating a PandasTimeIndexedDataset object\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom py4ai.core.data.model.ml import PandasTimeIndexedDataset\n\ndateStr = [str(x) for x in pd.date_range('2010-01-01', '2010-01-04')]\ndataset = PandasTimeIndexedDataset(\n    features=pd.concat([\n        pd.Series([1, np.nan, 2, 3], index=dateStr, name=\"feat1\"),\n        pd.Series([1, 2, 3, 4], index=dateStr, name=\"feat2\")\n    ], axis=1))\n```\n\n## How to contribute ? \n\nWe are very much willing to welcome any kind of contribution whether it is bug report, bug fixes, contributions to the \nexisting codebase or improving the documentation. \n\n### Where to start ? \nPlease look at the [Github issues tab](https://github.com/py4ai/py4ai-core/issues) to start working on open \nissues \n\n### Contributing to py4ai-core \nPlease make sure the general guidelines for contributing to the code base are respected\n1. [Fork](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) the py4ai-core repository. \n2. Create/choose an issue to work on in the [Github issues page](https://github.com/py4ai/py4ai-core/issues). \n3. [Create a new branch](https://docs.github.com/en/get-started/quickstart/github-flow) to work on the issue. \n4. Commit your changes and run the tests to make sure the changes do not break any test. \n5. Open a Pull Request on Github referencing the issue.\n6. Once the PR is approved, the maintainers will merge it on the main branch.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/NicolaDonelli/py4ai-core",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "py4ai-core",
            "package_url": "https://pypi.org/project/py4ai-core/",
            "platform": null,
            "project_url": "https://pypi.org/project/py4ai-core/",
            "project_urls": {
                "Homepage": "https://github.com/NicolaDonelli/py4ai-core"
            },
            "release_url": "https://pypi.org/project/py4ai-core/0.0.1/",
            "requires_dist": [
                "cfg-load (>=0.8)",
                "deprecated (>=1.2.12)",
                "dill (>=0.3)",
                "pandas (>=1.0)",
                "pymongo (>=4.0)",
                "scipy (>=1.7.3)",
                "setuptools (>=47.1)",
                "typeguard (>=2.13.0)",
                "typing-extensions (>=4.0)"
            ],
            "requires_python": "~=3.7",
            "summary": "A Python library of data structures optimized for machine learning tasks",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15337837,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a670b34fb4fabd865348b80a04b44896",
                    "sha256": "e487f9ba57ac2cd7b197287c495afd034e596be7cd5c7adb66a97e7d5a2d4d38"
                },
                "downloads": -1,
                "filename": "py4ai_core-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a670b34fb4fabd865348b80a04b44896",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": "~=3.7",
                "size": 59777,
                "upload_time": "2022-10-07T16:29:28",
                "upload_time_iso_8601": "2022-10-07T16:29:28.875492Z",
                "url": "https://files.pythonhosted.org/packages/72/5b/50f33ddadc660401b312d8d7d6542fcf0131cca61eab5f7dece9bf5769f9/py4ai_core-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5e3a2e825b28e96c28031c6c8eda679c",
                    "sha256": "4054af38a74005b3c5b125f06d55c9fe2c112517d9dade1ea3c08b609ac57c98"
                },
                "downloads": -1,
                "filename": "py4ai-core-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "5e3a2e825b28e96c28031c6c8eda679c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": "~=3.7",
                "size": 69067,
                "upload_time": "2022-10-07T16:29:30",
                "upload_time_iso_8601": "2022-10-07T16:29:30.507112Z",
                "url": "https://files.pythonhosted.org/packages/4f/93/e73ab01e77ed07f1a7ec84c6135e81dbf93a02103b8546855a59230f1416/py4ai-core-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}