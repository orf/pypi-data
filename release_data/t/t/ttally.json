{
    "0.1.0": {
        "info": {
            "author": "Sean Breckenridge",
            "author_email": "seanbrecke@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/seanbreckenridge/ttally",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ttally",
            "package_url": "https://pypi.org/project/ttally/",
            "platform": null,
            "project_url": "https://pypi.org/project/ttally/",
            "project_urls": {
                "Homepage": "https://github.com/seanbreckenridge/ttally"
            },
            "release_url": "https://pypi.org/project/ttally/0.1.0/",
            "requires_dist": [
                "click (>=8.0)",
                "autotui (>=0.4.1)",
                "more-itertools (>=8.0)"
            ],
            "requires_python": "",
            "summary": "interactive module to generate code/aliases to save things I do often",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15835929,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "debcd5f8ec4b091e02dce25c9afa82b3",
                    "sha256": "1b017c8a7b02b3d56099a29ddc4662a93e6619e871d95a31a607aaca8b45d48a"
                },
                "downloads": -1,
                "filename": "ttally-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "debcd5f8ec4b091e02dce25c9afa82b3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 16650,
                "upload_time": "2022-11-20T23:36:27",
                "upload_time_iso_8601": "2022-11-20T23:36:27.658183Z",
                "url": "https://files.pythonhosted.org/packages/16/a0/e29be128d98ac7b0f259408e80a7f78242007aa5eda3a345010d1aff8413/ttally-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "eecf686928e8d22bf27d60c12521d301",
                    "sha256": "bc50b9abeef789448aa0057e3cb364ff6eb2a1748ea7d647718ba81e17686c88"
                },
                "downloads": -1,
                "filename": "ttally-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "eecf686928e8d22bf27d60c12521d301",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16487,
                "upload_time": "2022-11-20T23:36:29",
                "upload_time_iso_8601": "2022-11-20T23:36:29.865911Z",
                "url": "https://files.pythonhosted.org/packages/d5/a3/02d8bdaa4cfcef0ed58977d79beef4b2e833aa1bf21a750fb10b5baff085/ttally-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Sean Breckenridge",
            "author_email": "seanbrecke@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# ttally\n\n**TL;DR**: This converts a file like this (config file at `~/.config/ttally.py`):\n\n```python\n# https://github.com/seanbreckenridge/ttally\n\nfrom datetime import datetime\nfrom typing import NamedTuple\n\n\nclass Weight(NamedTuple):\n    when: datetime\n    pounds: float\n\n\nclass Food(NamedTuple):\n    when: datetime\n    calories: int\n    food: str\n    quantity: float\n    water: int  # how much ml of water was in this\n\n    @staticmethod\n    def attr_validators() -> dict:\n        # https://sean.fish/d/ttally_types.py?dark\n        from seanb.ttally_types import prompt_float_default\n\n        # if I don't supply a quantity, default to 1\n        return {\"quantity\": lambda: prompt_float_default(\"quantity\")}\n\n\nclass Event(NamedTuple):\n    \"\"\"e.g. a concert or something\"\"\"\n\n    event_type: str\n    when: datetime\n    description: str\n    score: int | None\n    comments: str | None\n\n    @staticmethod\n    def attr_validators() -> dict:\n        # https://sean.fish/d/ttally_types.py?redirect\n        from seanb.ttally_types import edit_in_vim\n\n        return {\"comments\": edit_in_vim}\n\n\nfrom seanb.ttally_self import SelfTypes\n\n\nclass Self(NamedTuple):\n    when: datetime\n    what: SelfTypes\n```\n\nto (shell aliases)...\n\n```\nalias event='python3 -m ttally prompt event'\nalias event-now='python3 -m ttally prompt-now event'\nalias event-recent='python3 -m ttally recent event'\nalias food='python3 -m ttally prompt food'\nalias food-now='python3 -m ttally prompt-now food'\nalias food-recent='python3 -m ttally recent food'\nalias self='python3 -m ttally prompt self'\nalias self-now='python3 -m ttally prompt-now self'\nalias self-recent='python3 -m ttally recent self'\nalias weight='python3 -m ttally prompt weight'\nalias weight-now='python3 -m ttally prompt-now weight'\nalias weight-recent='python3 -m ttally recent weight'\n```\n\nWhenever I run any of those aliases, it inspects the model in the config file, dynamically creates and runs an interactive interface like this:\n\n<img src=\"https://raw.githubusercontent.com/seanbreckenridge/autotui/master/.assets/builtin_demo.gif\">\n\n... which saves some information I enter to a file:\n\n```yaml\n- when: 1598856786,\n  glasses\": 2.0\n```\n\n---\n\n`ttally` is an interactive module using [`autotui`](https://github.com/seanbreckenridge/autotui) to save things I do often to YAML\n\nCurrently, I use this to store info like whenever I eat something/drink water/my current weight/random thoughts periodically\n\nGiven a `NamedTuple` defined in [`~/.config/ttally.py`](https://sean.fish/d/ttally.py?redirect), this creates interactive interfaces which validate my input to save information to JSON/YAML files\n\nThe `{tuple}-now` aliases set the any `datetime` values for the prompted tuple to now\n\nThis also gives me `{tuple}-recent` aliases, which print recent items I've logged. For example:\n\n```\n$ water-recent 5\n2021-03-20 18:23:24     2.0\n2021-03-20 01:28:27     1.0\n2021-03-19 23:34:12     1.0\n2021-03-19 22:49:05     1.5\n2021-03-19 16:05:34     1.0\n```\n\n## Library Usage\n\nThe whole point of this interface is that it validates my input to types, stores it as a basic editable format (YAML), but is still loadable into typed python objects, with minimal boilerplate. I just need to add a NamedTuple to `~/.config/ttally.py`, and all the interactive interfaces and resulting YAML files are automatically created\n\nThis intentionally uses YAML and doesn't store the info into a single \"merged\" database. A single database:\n\n- requires some way to edit/delete items - at that point I'm essentially re-implementing a CRUD interface _again_\n- makes it harder to merge them together ([I've tried](https://github.com/seanbreckenridge/calories-scripts/blob/master/calmerge))\n\nYAML isn't perfect but at least I can open it in vim and delete/edit some value. Since the YAML files are pretty-printed, its also pretty trivial to grep/duplicate items by copying a few lines around. Without writing a bunch of code, this seems like the least amount of friction to immediately create new interfaces\n\nThe YAML files are versioned with the date/OS/platform, so I'm able to add items on my linux, mac, or android (using [`termux`](https://termux.com/)) and sync them across all my devices using [`SyncThing`](https://syncthing.net/). Those look like:\n\n```\nfood-darwin-seans-mbp.localdomain-2021-03.yaml\nfood-linux-bastion-2021-03.yaml\nfood-linux-localhost-2021-04.yaml\n```\n\n... which can then be combined back into python, like:\n\n```python\nfrom more_itertools import take  # just to grab a few items\n\nfrom ttally.autotui_ext import glob_namedtuple\nfrom ttally.config import Food\n\n> take(3, glob_namedtuple(Food))\n\n[Food(when=datetime.datetime(2020, 9, 27, 6, 49, 34, tzinfo=datetime.timezone.utc), calories=440, food='ramen, egg'),\nFood(when=datetime.datetime(2020, 9, 27, 6, 52, 16, tzinfo=datetime.timezone.utc), calories=160, food='2 eggs'),\nFood(when=datetime.datetime(2020, 9, 27, 6, 53, 44, tzinfo=datetime.timezone.utc), calories=50, food='ginger chai')]\n```\n\nThe `from-json` command can be used to send this JSON which matches a model, i.e. providing a non-interactive interface to add items, in case I want to [call this from a script](bin/cz)\n\n`hpi query` from [`HPI`](https://github.com/seanbreckenridge/HPI) can be used with the `ttally.funcs` module, like:\n\n```bash\n# how many calories in the last day\n$ hpi query ttally.funcs.food --recent 1d -s | jq -r '(.quantity)*(.calories)' | datamash sum 1\n2252\n```\n\nIf you'd prefer to use JSON files, you can set the `TTALLY_EXT=json` environment variable.\n\nThis can still load data from YAML or JSON (or both), every couple months I'll combine all the versioned files to a single merged file using the `merge` command:\n\n```\nttally merge food\n```\n\n## Installation\n\n```bash\npip install ttally\n```\n\n```\nUsage: ttally [OPTIONS] COMMAND [ARGS]...\n\n  Tally things that I do often!\n\n  Given a few namedtuples, this creates serializers/deserializers and an\n  interactive interface using 'autotui', and aliases to:\n\n  prompt using default autotui behavior, writing to the ttally datafile, same\n  as above, but if the model has a datetime, set it to now, query the 10 most\n  recent items for a model\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  datafile      print the datafile location\n  edit          edit the datafile\n  export        export all data from a model\n  from-json     add item by piping JSON\n  generate      generate shell aliases\n  merge         merge all data for a model into one file\n  models        list models\n  prompt        tally an item\n  prompt-now    tally an item (now)\n  recent        print recently tallied items\n  update-cache  cache export data\n```\n\n### Configuration\n\nYou need to setup a `~/.config/ttally.py` file. You can use the block above as a starting point, or with mine:\n\n```bash\ncurl -s 'https://sean.fish/d/ttally.py' > ~/.config/ttally.py\n```\n\nYou can set the `TTALLY_DATA_DIR` environment variable to the directory that `ttally` should save data to, defaults to `~/.local/share/ttally`. If you want to use a different path for configuration, you can set the `TTALLY_CFG` to the absolute path to the file.\n\nI cache the generated aliases by putting a block like this in my shell config (i.e., it runs the first time I start a terminal, but then stays the same until I remove the file):\n\n```bash\nTTALLY_ALIASES=\"${HOME}/.cache/ttally_aliases\"\nif [[ ! -e \"${TTALLY_ALIASES}\" ]]; then  # alias file doesn't exist\n\tif havecmd ttally; then  # if ttally is installed\n\t\tpython3 -m ttally generate >\"${TTALLY_ALIASES}\"  # generate and save the aliases\n\tfi\nfi\n[[ -e \"${TTALLY_ALIASES}\" ]] && source \"${TTALLY_ALIASES}\"  # if the file exists, make the aliases available\n```\n\nFor shell completion to autocomplete options/model names:\n\n```\neval \"$(_TTALLY_COMPLETE=bash_source ttally)\"  # in ~/.bashrc\neval \"$(_TTALLY_COMPLETE=zsh_source ttally)\"  # in ~/.zshrc\neval \"$(_TTALLY_COMPLETE=fish_source ttally)\"  # in ~/.config/fish/config.fish\n```\n\n### Caching\n\n`ttally update-cache` can be used to speedup the `export` and `recent` commands:\n\n```\nUsage: ttally update-cache [OPTIONS]\n\n  Caches data for 'export' and 'recent' by saving the current data and an\n  index to ~/.cache/ttally\n\nOptions:\n  --print-hashes  print current filehash debug info\n  --help          Show this message and exit.\n```\n\nI personally run it once every 5 minutes in the background, so at least my first interaction with `ttally` is guaranteed to be [fast](https://github.com/seanbreckenridge/ttally/issues/5#issuecomment-1321389800)\n\n### Shell Scripts\n\n[`cz`](bin/cz) lets me fuzzy select something I've eaten in the past using [`fzf`](https://github.com/junegunn/fzf), like:\n\n![](https://raw.githubusercontent.com/seanbreckenridge/calories-fzf/master/demo.gif)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/seanbreckenridge/ttally",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ttally",
            "package_url": "https://pypi.org/project/ttally/",
            "platform": null,
            "project_url": "https://pypi.org/project/ttally/",
            "project_urls": {
                "Homepage": "https://github.com/seanbreckenridge/ttally"
            },
            "release_url": "https://pypi.org/project/ttally/0.1.1/",
            "requires_dist": [
                "click (>=8.0)",
                "autotui (>=0.4.3)",
                "more-itertools (>=8.0)"
            ],
            "requires_python": "",
            "summary": "interactive module to generate code/aliases to save things I do often",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15835929,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4ceb661cff961d3c1c10552c7eb5cec2",
                    "sha256": "6295699c76a7ad0aa4147ba8d1ad64aec8a9ebbaf434d048d526679a88f99e3b"
                },
                "downloads": -1,
                "filename": "ttally-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4ceb661cff961d3c1c10552c7eb5cec2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18568,
                "upload_time": "2022-11-21T03:50:03",
                "upload_time_iso_8601": "2022-11-21T03:50:03.286771Z",
                "url": "https://files.pythonhosted.org/packages/1e/cf/2da20f17749c8093c578651935654827e63d93a65935d9ddc1523ada0151/ttally-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "630b42137f110a48c514a910dcba7446",
                    "sha256": "505f4cfd881ae60c1f7cb97a77f93fbdb98360973b0f1788f7f435fe4c93b1be"
                },
                "downloads": -1,
                "filename": "ttally-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "630b42137f110a48c514a910dcba7446",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 18286,
                "upload_time": "2022-11-21T03:50:05",
                "upload_time_iso_8601": "2022-11-21T03:50:05.540935Z",
                "url": "https://files.pythonhosted.org/packages/b5/8b/bbbae39f10f59ba7b3ab737a8f3602d0135f0c31cf0a6fc7faa63191e4c3/ttally-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}