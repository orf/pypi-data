{
    "0.0.2": {
        "info": {
            "author": "",
            "author_email": "Cristobal Donoso-Oliva <cridonoso@inf.udec.cl>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3"
            ],
            "description": "# ASTROMER Python library \ud83d\udd2d\n\nASTROMER is a transformer based model pretrained on millions of light curves. ASTROMER can be finetuned on specific datasets to create useful representations that can improve the performance of novel deep learning models.\n\n\u2757 This version of ASTROMER can only works on single band light curves.\n\n\ud83d\udd25 [See the official repo here](https://github.com/astromer-science/main-code)\n\n## Install\n```\npip install ASTROMER\n```\n\n## How to use it\nCurrently, there are 2 pre-trained models: `macho` and `atlas`.\nTo load weights use:\n```\nfrom ASTROMER.models import SingleBandEncoder\n\nmodel = SingleBandEncoder()\nmodel.from_pretrained('macho')\n```\nIt will automatically download the weights from [this public github repository](https://github.com/astromer-science/weights.git) and load them into the `SingleBandEncoder` instance.\n\nAssuming you have a list of vary-lenght (numpy) light curves.\n```\nimport numpy as np\n\nsamples_collection = [ np.array([[5200, 0.3, 0.2],\n                                 [5300, 0.5, 0.1],\n                                 [5400, 0.2, 0.3]]),\n\n                       np.array([[4200, 0.3, 0.1],\n                                 [4300, 0.6, 0.3]]) ]\n\n```\nLight curves are `Lx3` matrices with time, magnitude, and magnitude std.\nTo encode samples use:\n```\nattention_vectors = model.encode(samples_collection,\n                                 oids_list=['1', '2'],\n                                 batch_size=1,\n                                 concatenate=True)\n```\nwhere\n- `samples_collection` is a list of numpy array light curves\n- `oids_list` is a list with the light curves ids (needed to concatenate 200-len windows)\n- `batch_size` specify the number of samples per forward pass\n-  when `concatenate=True` ASTROMER concatenates every 200-lenght windows belonging the same object id. The output when `concatenate=True` is a list of vary-length attention vectors.\n\n## Finetuning or training from scratch\n`ASTROMER` can be easly trained by using the `fit`. It include\n\n```\nfrom ASTROMER import SingleBandEncoder\n\nmodel = SingleBandEncoder(num_layers= 2,\n                          d_model   = 256,\n                          num_heads = 4,\n                          dff       = 128,\n                          base      = 1000,\n                          dropout   = 0.1,\n                          maxlen    = 200)\nmodel.from_pretrained('macho')\n```\nwhere,\n- `num_layers`: Number of self-attention blocks\n- `d_model`: Self-attention block dimension (must be divisible by `num_heads`)\n- `num_heads`: Number of heads within the self-attention block\n- `dff`: Number of neurons for the fully-connected layer applied after the attention blocks\n- `base`: Positional encoder base (see formula)\n- `dropout`: Dropout applied to output of the fully-connected layer\n- `maxlen`: Maximum length to process in the encoder\nNotice you can ignore `model.from_pretrained('macho')` for clean training.\n```\nmode.fit(train_data,\n         validation_data,\n         epochs=2,\n         patience=20,\n         lr=1e-3,\n         project_path='./my_folder',\n         verbose=0)\n```\nwhere,\n- `train_data`: Training data already formatted as tf.data\n- `validation_data`: Validation data already formatted as tf.data\n- `epochs`: Number of epochs for training\n- `patience`: Early stopping patience\n- `lr`: Learning rate\n- `project_path`: Path for saving weights and training logs\n- `verbose`: (0) Display information during training (1) don't\n\n`train_data` and `validation_data` should be loaded using `load_numpy` or `pretraining_records` functions. Both functions are in the `ASTROMER.preprocessing` module.\n\nFor large datasets is recommended to use Tensorflow Records ([see this tutorial to execute our data pipeline](https://github.com/astromer-science/main-code/blob/main/presentation/notebooks/create_records.ipynb))\n\n## Resources\n- [ASTROMER Tutorials](https://www.stellardnn.org/astromer/)\n\n## Contributing to ASTROMER \ud83e\udd1d\nIf you train your model from scratch, you can share your pre-trained weights by submitting a Pull Request on [the weights repository](https://github.com/astromer-science/weights)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "ASTROMER,embbedings,transformers,astronomy,photometry,light curves,deep learning",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ASTROMER",
            "package_url": "https://pypi.org/project/ASTROMER/",
            "platform": null,
            "project_url": "https://pypi.org/project/ASTROMER/",
            "project_urls": {
                "Homepage": "https://github.com/astromer-science/python-library"
            },
            "release_url": "https://pypi.org/project/ASTROMER/0.0.2/",
            "requires_dist": [
                "tensorflow (>=2.6)",
                "numpy",
                "pandas",
                "tqdm",
                "seaborn",
                "scipy",
                "pip-tools ; extra == 'dev'",
                "pytest ; extra == 'dev'",
                "bumpver ; extra == 'dev'"
            ],
            "requires_python": ">=3.7",
            "summary": "Creates light curves embeddings using ASTROMER",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15920108,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "29f6edf212c497d76e19308602442956",
                    "sha256": "3762c8d95b2a08d3b7e18bc8bd1f9668f823bc1a2f2ef3a8389e5cf605f5a2b4"
                },
                "downloads": -1,
                "filename": "ASTROMER-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "29f6edf212c497d76e19308602442956",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 25307,
                "upload_time": "2022-11-28T23:07:19",
                "upload_time_iso_8601": "2022-11-28T23:07:19.745703Z",
                "url": "https://files.pythonhosted.org/packages/20/a8/c99b666bfc1616c43234133a753ac573daaaa8d2f99190bdc1586b1f3001/ASTROMER-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "75eac289e11cf0f434bf0ca5175f8e3b",
                    "sha256": "af74642cec5fe3f105a896111a30db67657bb099105a66600f365b6d1a745313"
                },
                "downloads": -1,
                "filename": "ASTROMER-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "75eac289e11cf0f434bf0ca5175f8e3b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 21519,
                "upload_time": "2022-11-28T23:07:21",
                "upload_time_iso_8601": "2022-11-28T23:07:21.876887Z",
                "url": "https://files.pythonhosted.org/packages/18/5e/5793b0f290752e46db2afcabdecc234e4bba4d9d6ddb6e5f2ca76065e584/ASTROMER-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}