{
    "0.1.0": {
        "info": {
            "author": "augcos",
            "author_email": "augcos@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# __rftorch__\n## Introduction\n__rftorch__ is a minimalistic __deep reinforcement learning (DRL)__ library written for __PyTorch__. While most well-known DRL libraries are deeply integrated with the gym enviroment, the goal of __rftorch__ is to provide a generic, minimalistic framework for working with DRL. __rftorch__ implements the main DRL algorithms, while giving complete freedom to the user on how to design the enviroment and the deep neural netowrk models.\n\nEach DRL algorithm includes an example_main.py file implementing an test case of how to train and use the agent. Default models are imported from the example_networks.py files (hyperparameters are already somewhat optimized, training is ready to go without any further modifications).\n\nThis library is still in very early development, expect things to break. Future plans include improved testing and expanding the number of DRL agorithms implemented.\n\n## How to install\nInstall the rftorch package using pip:\n```\npip install rftorch\n```\n\n## Implemented agents\n* __[Advantage Actor-Critic (A2C)](https://arxiv.org/abs/1602.01783)__\n* __[Deep Deterministic Policy Gradient (DDPG)](https://arxiv.org/abs/1509.02971)__\n* __[Deep-Q-Network (DQN)](https://arxiv.org/abs/1312.5602)__, including the main DQN improvements ([double DQN](https://arxiv.org/abs/1509.06461) and [dueling DQN](https://arxiv.org/abs/1511.06581). [Prioritized experience replay](https://arxiv.org/abs/1511.05952) coming soon...).\n* __[Proximal Policy Optimization (PPO)](https://arxiv.org/abs/1707.06347)__. For now, it is only for a deterministic action space. PPO for a continuous action space coming soon...\n\n## Example\nThis snippet is a modified version of the code included in this [example file](https://github.com/augcos/rftorch/blob/master/src/rftorch/dqn/example_main.py). \n```python\n# we import the gym enviroment and our Deep Q-Network agent\nimport gym\nimport numpy as np\nfrom rftorch.dqn.agent import DQNAgent\n\n# The lunar lander enviroment is loaded\nenv = gym.make('LunarLander-v2')\n\n# we create the Deep Q-Network agent with the default settings\nagent = DQNAgent()\n\n# we define some auxiliary variables\nscore_history = []\neps_history = []\nn_episodes = 1000\n\n# agent is trained in the enviroment\nfor i in range(n_episodes):\n    done = False\n    score = 0\n    state = env.reset()\n    while not done:\n        # we get the action using a epsilon greedy policy (see DQN implementation)\n        action = agent.get_train_action(state)\n        # we get the info from the enviroment\n        new_state, reward, done, info = env.step(action)\n        # the agent saves this interaction in the memory buffer\n        agent.save_memory(state, action, reward, new_state, done)\n        # the agent learns from the memory buffer\n        agent.learn()\n        # state is modified, and reward is added to the total score\n        state = new_state\n        score += reward\n    score_history.append(score)\n    # we print the training output\n    print(\"Episode %d - Score: %.2f - Average score: %.2f - Epsilon: %.2f\" \n        % (i, score, np.mean(score_history[-100:]), agent.epsilon))\n```\n\n## References\nCode in this library is heavily inspired by the work of [Phil Tabor](https://github.com/philtabor). Please check his youtube channel [here](https://www.youtube.com/c/MachineLearningwithPhil).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/augcos/rftorch",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rftorch",
            "package_url": "https://pypi.org/project/rftorch/",
            "platform": null,
            "project_url": "https://pypi.org/project/rftorch/",
            "project_urls": {
                "Bug Tracker": "https://github.com/augcos/rftorch/issues",
                "Homepage": "https://github.com/augcos/rftorch"
            },
            "release_url": "https://pypi.org/project/rftorch/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "The minimalistic Deep Reinforcement Learning library written for PyTorch",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14138305,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e790229d5377446f5da293d56139a3e3",
                    "sha256": "dd693de56dc02208af1190ec80afb0fb4e5894822a90af0f34d9c1b64cbc1b4b"
                },
                "downloads": -1,
                "filename": "rftorch-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e790229d5377446f5da293d56139a3e3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 26488,
                "upload_time": "2022-06-15T10:39:17",
                "upload_time_iso_8601": "2022-06-15T10:39:17.518481Z",
                "url": "https://files.pythonhosted.org/packages/8f/19/1212704f727d466b13e8534f83a9c7345000996b7dad0ab6636a02424520/rftorch-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "f95c82c7d12f892789d4e83df5351c9f",
                    "sha256": "94b6f0a43e37239a0594f1a72a6eaf3eb93955a29c5e8b90914a983c246445d5"
                },
                "downloads": -1,
                "filename": "rftorch-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "f95c82c7d12f892789d4e83df5351c9f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 17454,
                "upload_time": "2022-06-15T10:39:18",
                "upload_time_iso_8601": "2022-06-15T10:39:18.909123Z",
                "url": "https://files.pythonhosted.org/packages/84/2a/e3466cf7fffac9a1ba44df477cadc0a6fb1e24488a349f49d0890c384e05/rftorch-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}