{
    "1.0.1": {
        "info": {
            "author": "Adrian Zapa\u0142a",
            "author_email": "adrian.zapala@outlook.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "## ```aznt``` - From A to Z Number Theory\r\n* Number Theory library for Python with prime numbers.\r\n* You can pass to author's GitHub at\r\n[adrianzapala.github.io](https://adrianzapala.github.io/).\r\n\r\n## Usage\r\n\r\nThe library ```aznt``` includes package ```aznt``` with two modules: ```numtheory``` \r\nand ```primes```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* ```from aznt.numtheory import *```\r\n* ```from aznt.primes import *```\r\n\r\n## ```numtheory``` module Functions\r\n\r\n<font size=\"5\">```factorization(n)```</font>\\\r\nThis function generates prime factors of a number from a function argument.\\\r\nTime complexity: ```O(n/2)```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 1123243```\\\r\noutput: ```[11, 9283]```\r\n* For ```n = 20570952```\\\r\noutput: ```[2, 3, 17, 127, 397]```\r\n\r\n<font size=\"5\">```dividers_naive(n)```</font>\\\r\nThis function generates divisors of a number from a function argument. It returns \r\na list of these divisors.\\\r\nTime complexity: ```O(n)```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 1123243```\\\r\noutput: ```[1, 11, 121, 9283, 102113, 1123243]```\r\n* For ```n = 20570952```\\\r\noutput: ```[1, 2, 3, 4, 6, 8, 12, 17, 24, 34, 51, 68, 102, 127, 136, 204, 254, 381, 397, 408, 508, 762, 794, 1016, 1191, 1524, 1588, 2159, 2382, 3048, 3176, 4318, 4764, 6477, 6749, 8636, 9528, 12954, 13498, 17272, 20247, 25908, 26996, 40494, 50419, 51816, 53992, 80988, 100838, 151257, 161976, 201676, 302514, 403352, 605028, 857123, 1210056, 1714246, 2571369, 3428492, 5142738, 6856984, 10285476, 20570952]```\r\n\r\n<font size=\"5\">```dividers_opt(n)```</font>\\\r\nThis function calculates divisors in pairs, which multiplication product creates \r\na number from function argument. If the argument is default (```pairs=False```) \r\nand also if the numbers from these pairs are different it puts these pairs on the \r\nlist and then sort list (if the numbers are equal, it's placing only one number on the list). \r\nAlternatively, if the argument is ```True```  it join pairs of divisors (may be \r\nequal) into tuples and then append them into a list.\\\r\nThis function is working pretty much faster than ```dividers_naive()``` function.\\\r\nTime complexity: ```O(sqrt(n)```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 100``` and default argument ```pairs=False```\\\r\noutput: ```[1, 2, 4, 5, 10, 20, 25, 50, 100]```\r\n* For ```n = 100``` and argument ```pairs=True```:\\\r\noutput: ```[(1, 100), (2, 50), (4, 25), (5, 20), (10, 10)]```\r\n\r\n<font size=\"5\">```tau(n)```</font>\\\r\nThis function counts the number of divisors of an integer (including 1 and the number itself).\\\r\nTime complexity: ```O(sqrt(n))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 6```\\\r\noutput: ```4```\r\n* For ```n = 4356```\\\r\noutput: ```27```\r\n* For ```n = 12499674```\\\r\noutput: ```16```\r\n\r\n<font size=\"5\">```sigma(n)```</font>\\\r\nReturns the sum of divisors of an integer \r\n(including 1 and the number itself).\\\r\nTime complexity: ```O(sqrt(n)))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 3```\\\r\noutput: ```4```\r\n* For ```n = 343532```\\\r\noutput: ```687120```\r\n\r\n<font size=\"5\">```s(n)```</font>\\\r\nReturns the sum of proper divisors of an integer \r\n(excluding n itself).\\\r\nTime complexity: ```O(sqrt(n)))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 3```\\\r\noutput: ```1```\r\n* For ```n = 4438```\\\r\noutput: ```3194```\r\n\r\n<font size=\"5\">```gcd_mod(a, b)```</font>\\\r\nReturns Greatest Common Divisor (GCD) of two positive integers using Euclidean algorithm \r\nwith division.\\\r\nTime complexity: ```O(log n))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```a = 36```, ```b = 882```\\\r\noutput: ```18```\r\n* For ```a = 363```, ```b = 1287```\\\r\noutput: ```33```\r\n* For ```a = 23```, ```b = 3456```\\\r\noutput: ```1```\r\n* For ```a = 484```, ```b = 56```\\\r\noutput: ```4```\r\n\r\n<font size=\"5\">```gcd_substract(a, b)```</font>\\\r\nReturns Greatest Common Divisor (GCD) of two positive integers using Euclidean algorithm \r\nwith substraction.\\\r\nTime complexity: ```O(n))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```a = 36```, ```b = 882```\\\r\noutput: ```18```\r\n* For ```a = 363```, ```b = 1287```\\\r\noutput: ```33```\r\n* For ```a = 23```, ```b = 3456```\\\r\noutput: ```1```\r\n* For ```a = 484```, ```b = 56```\\\r\noutput: ```4```\r\n\r\n<font size=\"5\">```lcm(a, b)```</font>\\\r\nReturns lowest common multiple (LCM) of two positive integers.\\\r\nTime complexity: ```O(log n))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```a = 36```, ```b = 882```\\\r\noutput: ```1764```\r\n* For ```a = 363```, ```b = 1287```\\\r\noutput: ```14157```\r\n* For ```a = 23```, ```b = 3456```\\\r\noutput: ```79488```\r\n* For ```a = 484```, ```b = 56```\\\r\noutput: ```6776```\r\n\r\n<font size=\"5\">```totient(n)```</font>\\\r\nReturns Euler's totient function which counts the positive integers up to \r\na given integer n that are relatively prime to n.\\\r\nTime complexity: ```O(log n))```.\\\r\n**<span style=\"color: coral\">Examples</span>**\r\n* For ```n = 24```\\\r\noutput: ```8```\r\n* For ```n = 4```\\\r\noutput: ```2```\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aznt",
            "package_url": "https://pypi.org/project/aznt/",
            "platform": null,
            "project_url": "https://pypi.org/project/aznt/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/aznt/1.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Number theory library",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16119111,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "00bc5f16a739ce4a60b98e937d6cd750",
                    "sha256": "63c12a455989a0657598988c58c0d1d8c89566946ce6ce26107279cce1bc9013"
                },
                "downloads": -1,
                "filename": "aznt-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "00bc5f16a739ce4a60b98e937d6cd750",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 3766,
                "upload_time": "2022-12-15T21:50:26",
                "upload_time_iso_8601": "2022-12-15T21:50:26.234833Z",
                "url": "https://files.pythonhosted.org/packages/6e/03/9d67347be2cd023a99257841d11dc036c51aeb83ee59f23401f6d32aabfc/aznt-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}