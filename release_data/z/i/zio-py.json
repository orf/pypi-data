{
    "0.0.2a": {
        "info": {
            "author": "William Harvey",
            "author_email": "drwjharvey@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3.7",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "https://github.com/harveywi/ziopy/archive/0.0.2a.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/harveywi/ziopy",
            "keywords": "ZIO,IO,monads,pure fp,functional programming,monad syntax",
            "license": "Apache license 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zio-py",
            "package_url": "https://pypi.org/project/zio-py/",
            "platform": "",
            "project_url": "https://pypi.org/project/zio-py/",
            "project_urls": {
                "Download": "https://github.com/harveywi/ziopy/archive/0.0.2a.tar.gz",
                "Homepage": "https://github.com/harveywi/ziopy"
            },
            "release_url": "https://pypi.org/project/zio-py/0.0.2a/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python port of Scala ZIO for pure functional programming",
            "version": "0.0.2a",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14876249,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "73c3cdcacee051db7e263d192f71f8b2",
                    "sha256": "ef19e445673cd5498193e66cd48ef854ad24f7a51d3b7f0029a8804925a7b8df"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.2a.tar.gz",
                "has_sig": false,
                "md5_digest": "73c3cdcacee051db7e263d192f71f8b2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4662,
                "upload_time": "2019-10-13T19:40:13",
                "upload_time_iso_8601": "2019-10-13T19:40:13.041013Z",
                "url": "https://files.pythonhosted.org/packages/b1/ef/f29e5533b3b4b1ca752501c229cd6cc0ad5dd8a6af1edbfd05e0ec657587/zio_py-0.0.2a.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3a": {
        "info": {
            "author": "William Harvey",
            "author_email": "drwjharvey@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3.7",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "https://github.com/harveywi/ziopy/archive/0.0.3a.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/harveywi/ziopy",
            "keywords": "ZIO,IO,monads,pure fp,functional programming,monad syntax",
            "license": "Apache license 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zio-py",
            "package_url": "https://pypi.org/project/zio-py/",
            "platform": "",
            "project_url": "https://pypi.org/project/zio-py/",
            "project_urls": {
                "Download": "https://github.com/harveywi/ziopy/archive/0.0.3a.tar.gz",
                "Homepage": "https://github.com/harveywi/ziopy"
            },
            "release_url": "https://pypi.org/project/zio-py/0.0.3a/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python port of Scala ZIO for pure functional programming",
            "version": "0.0.3a",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14876249,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d1f7080fcf6f8919c789af35befd72ac",
                    "sha256": "3dc8af930bf3ea4db60d1dd0437dbf9fbc33986f4f034e87c7568d7b83733494"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.3a.tar.gz",
                "has_sig": false,
                "md5_digest": "d1f7080fcf6f8919c789af35befd72ac",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4663,
                "upload_time": "2019-10-13T19:58:20",
                "upload_time_iso_8601": "2019-10-13T19:58:20.184261Z",
                "url": "https://files.pythonhosted.org/packages/e2/a0/4b4cd7316cf6100fd1cfc02558d1b513e600072419517b4e52698c567d19/zio_py-0.0.3a.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4a": {
        "info": {
            "author": "William Harvey",
            "author_email": "drwjharvey@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 3.7",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "https://github.com/harveywi/ziopy/archive/0.0.4a.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/harveywi/ziopy",
            "keywords": "ZIO,IO,monads,pure fp,functional programming,monad syntax",
            "license": "Apache license 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zio-py",
            "package_url": "https://pypi.org/project/zio-py/",
            "platform": "",
            "project_url": "https://pypi.org/project/zio-py/",
            "project_urls": {
                "Download": "https://github.com/harveywi/ziopy/archive/0.0.4a.tar.gz",
                "Homepage": "https://github.com/harveywi/ziopy"
            },
            "release_url": "https://pypi.org/project/zio-py/0.0.4a/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python port of Scala ZIO for pure functional programming",
            "version": "0.0.4a",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14876249,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8335c96efc8273b7f64338e8d02f111f",
                    "sha256": "1ff159b3d17a8e85bb97e08a25fcb53224c57ecbd2106d0ac974a0859616b4ab"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.4a.tar.gz",
                "has_sig": false,
                "md5_digest": "8335c96efc8273b7f64338e8d02f111f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 4679,
                "upload_time": "2019-10-20T20:24:46",
                "upload_time_iso_8601": "2019-10-20T20:24:46.972294Z",
                "url": "https://files.pythonhosted.org/packages/f3/1f/ffd30e13464065f27dcfa21d3fea6ac247f1d94413c72e820104a14fb4b4/zio_py-0.0.4a.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.5": {
        "info": {
            "author": "William Harvey",
            "author_email": "drwjharvey@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/miiohio/ziopy",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zio-py",
            "package_url": "https://pypi.org/project/zio-py/",
            "platform": "",
            "project_url": "https://pypi.org/project/zio-py/",
            "project_urls": {
                "Homepage": "https://github.com/miiohio/ziopy"
            },
            "release_url": "https://pypi.org/project/zio-py/0.0.5/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Python port of Scala ZIO for pure functional programming",
            "version": "0.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14876249,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f99e9f3815d0666f889e8bf549e3aee4",
                    "sha256": "bd17982e1fe2afa84033d9e8e2cd368b199e57577aa4a06d09dcc9c46f29d60d"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "f99e9f3815d0666f889e8bf549e3aee4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12685,
                "upload_time": "2021-03-13T19:54:33",
                "upload_time_iso_8601": "2021-03-13T19:54:33.930798Z",
                "url": "https://files.pythonhosted.org/packages/ea/25/f9ae726173eddfd382f753f4f655d064d1cc864ee47e7ac43187f6f6b5c5/zio_py-0.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.6": {
        "info": {
            "author": "William Harvey",
            "author_email": "drwjharvey@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/miiohio/ziopy",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zio-py",
            "package_url": "https://pypi.org/project/zio-py/",
            "platform": null,
            "project_url": "https://pypi.org/project/zio-py/",
            "project_urls": {
                "Homepage": "https://github.com/miiohio/ziopy"
            },
            "release_url": "https://pypi.org/project/zio-py/0.0.6/",
            "requires_dist": [
                "typing-extensions (>=4.2.0)",
                "dataclasses ; python_version < \"3.7\""
            ],
            "requires_python": "",
            "summary": "Python port of Scala ZIO for pure functional programming",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14876249,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2779cf61d5e0be12b94b3a9393a67a18",
                    "sha256": "70c3bb43873932b210d9a4a328fd52939e2b36a66ee9ca7bf8b4b916a9e72e3a"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2779cf61d5e0be12b94b3a9393a67a18",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 15058,
                "upload_time": "2022-06-13T01:40:34",
                "upload_time_iso_8601": "2022-06-13T01:40:34.301080Z",
                "url": "https://files.pythonhosted.org/packages/a4/97/beb7c0768a3e88bd8b068728e608676a47b83bb808a6ce7499dfda4ede20/zio_py-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "William Harvey",
            "author_email": "drwjharvey@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "ZIO-py\n======\nZIO for Python (see https://github.com/zio/zio).\n\n[![Stable Version](https://img.shields.io/pypi/v/zio-py?color=blue)](https://pypi.org/project/zio-py/)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\nThis is a fairly straightforward (unofficial and plucky) port of a subset of the\ningenious [Scala ZIO](https://github.com/zio/zio) library along with some other\ntools for type-safe functional programming in Python.\n\nAbout the ZIO monad\n-------------------\nThis particular implementation of the ZIO data structure is based on the\n[functional\neffects](https://github.com/jdegoes/functional-effects/blob/master/src/main/scala/net/degoes/zio/00-intro.scala)\ntraining provided by [John De Goes](https://degoes.net/). It is a vastly\nsimplified version of the amazing official Scala library, but is still quite\nuseful: For state of the art \"errors as values\" computations, this library is\nfor you!\n\nThe `ZIO[R, E, A]` monad is basically three monads rolled into one:\n- An \"IO monad\" for writing pure functional programs. A value of type `ZIO[R, E, A]` is a program, which when evaluated given input of type `R`, either fails with a value of type `E` or succeeds with a value of type `A`.\n\n- An [either monad](https://www.freecodecamp.org/news/a-survival-guide-to-the-either-monad-in-scala-7293a680006/) that allows you to \"code to the happy path.\" If an error is encountered anywhere in a sequence of `ZIO` operations, it is returned early.\n\n- A [reader monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)#Environment_monad) for providing inputs to your program.\n\nUnlike Scala's ZIO, this implementation does not include functionality for\nparallel/concurrent programming. Since we are stuck in Python with the Global\nInterpreter Lock, we can't have nice things...so this functionality won't be\nmissed anyways. However, future work will certainly explore supporting this part\nof the Scala ZIO API.\n\nPerhaps the most important feature of ZIO-py that sets it apart from all other\nfunctional programming libraries is its support for type-safe, ergonomic, and\nquite natural \"monadic do notation.\"\n\nNotable Features\n----------------\n* State of the art \"[zivariant](https://zio.github.io/zio-prelude/api/zio/prelude/Zivariant.html)\" ZIO monad data structure.\n* `Either` monad for those times when you don't need _all_ of the power of ZIO.\n* `ZIOArrow` and `EitherArrow` combinator data structures for ergonomic and\n  type-safe \"pipeline-oriented programming\" (function composition). These\n  features are awesome for wrapping existing APIs.\n* [Monadic do\nnotation](https://stackoverflow.com/questions/57192516/is-do-notation-used-necessarily-in-the-context-of-monad),\nwhat appears to be a significant advancement in bringing ergonomic functional\nprogramming to mainstream languages.  It looks like this general idea was\nexplored in 2018 in [Exceptionally Monadic Error\nHandling](https://arxiv.org/pdf/1810.13430.pdf), albeit from the Haskell side.\nInteresting, I have not seen the idea applied anywhere in the wild.\n\nBenefits\n--------\n* Faster and safer test writing: No more mocking and other monkeypatching\n  tomfoolery. Ok, maybe there is some hyperbole here. But it should\n  significantly reduce the amount of mocking needed. Instead of mocking things,\n  you simply `my_program.provide(x)` your program a test environment, `x`,\n  before calling `unsafe_run(my_program)`. When running code in production, you\n  will `.provide` an instance of a live (real) environment.\n\n* Clear distinction of\n  [side-effecting](https://en.wikipedia.org/wiki/Side_effect_(computer_science))\n  code based on function type signatures. If a function returns a value of type\n  `ZIO[R, E, A`], you know exactly what that function takes as input, how it can\n  fail, and what it will return if it succeeds. You also know that the function\n  may cause side effects. Any other function can, with some reasonable\n  discipline, be considered free of side effects.\n\n* Code to the happy path while safely handling errors. Since `ZIO` behaves like\n  a (right-biased) Either monad, it is super easy to do [railway-oriented\n  programming](https://swlaschin.gitbooks.io/fsharpforfunandprofit/content/posts/recipe-part2.html).\n\n* Type safety. Everything is statically-checked by mypy. If you get the types\n  wrong, then there is probably a bug in your program. The mypy type checker\n  will find the bugs before they make it to production.\n\n* Implementations of \"Kleisli arrow\"-like combinator interfaces for creating\n  function pipelines (`EitherArrow` and `ZIOArrow`). These interfaces use [PEP\n  612](https://peps.python.org/pep-0612/) features to preserve function\n  parameters, making it possible to easily work with pre-existing Python\n  functions/methods. For example, it is super handy for wrapping existing APIs\n  to make them type-safe and composable.\n\n* It's pure, it's functional. It's pure functional programming. It's Pythonic.\nIt shouldn't be possible. (And someone somewhere is upset that these meddling\nkids have made it possible.)\n\nInstallation\n------------\nAt the command line:\n```bash\n$ pip install zio-py\n```\n\nAlternatively, you can install `zio-py` from source by cloning this repo and\nrunning the provided `setup.sh` script.\n\nHow to Use It\n-------------\nCheck out the [Scala ZIO documentation](https://zio.dev/) for the definitive\nguide on basic usage of ZIO.  In Scala. :)\n\nHere, we will introduce you to the style of programming that uses the generalized\nmonadic do notation that is unique to ZIO-py.\n\nUsing the \"Monadic Do Notation\"\n-------------------------------\nZIO-py features a kind of type-safe monadic do notation that obviates the need\nto festoon your pure functional programs with unruly nested `.flat_map` calls.\nUnlike other \"monadic do notation as a library\" implementations, this one is\n100% type-safe.\n\nTo use it within the body of a function:\n\n1. Decorate your function using the `@ziopy.zio.monadic` decorator. (Or,\n   correspondingly, decorate your method with `@ziopy.zio.monadic_method`. Two\n   different decorators are needed because methods take an implicit `self`\n   argument.)\n2. The first parameter to your function must be of type `ziopy.zio.ZIOMonad[R, E]`,\nwhere `R` represents the environment type and `E` represents the error type. A good\nname for this parameter is typically `do`.\n3. Add any other parameters to your function _after_ the `ZIOMonad` parameter.\n4. Return a value of type `ziopy.zio.ZIO[R, E, A]` from your function, where `A`\nrepresents the type returned when your function returns successfully.\n\nThe types `R` and `E` have to coincide for type safety. The PEP 612 features of\nthe `mypy` type checker will check this for you.\n\nThen, instead of writing\n```python\na.flat_map(lambda b: ...)\n```\nyou can write\n```python\nb = do << a\n...\n```\n\nThat's pretty much it! The type safety guarantees that, if any statement in your\nmonadic code that passed through a `do <<` produces an error, the `@monadic`\nfunction has to be capable of returning that error. The same safety idea is used\nfor accessing stuff out of the environment (the `R` in `ZIO[R, E, A]`).\n\nIt turns out to be a lot easier to use than Scala's \"for comprehension\" and\nHaskell's \"do notation\" because it's just a regular statement. So you can mix it\nwith loops, conditional logic, etc., which is not possible in those other\nlanguages.\n\nHow the Monadic Do Notation Works\n---------------------------------\nEach `do << program` invocation calls the private (and potentially impure)\n`program._run` function, which returns a value of type `Either[E, A]`. More\nspecifically, it returns either an instance of `Left[E]` or an instance of\n`Right[A]`. If `left: Left[E]` is returned, we wrap `left.value` in a special\nexception called `_RaiseLeft`.\n\nMeanwhile, the `@monadic` function decorator adds an exception handler to the\ndecorated function. It catches `raise_left: _RaiseLeft` exceptions, and returns\nthe wrapped value as a ZIO program `ZIO.fail(lambda: raise_left.value)`.\n\nThe end result is a control flow mechanism for early return of `Left[E]` values\nfrom your decorated functions.\n\nExample Programs\n----------------\n```python\nfrom typing import NoReturn, Union\n\nimport ziopy.services.console as console\nimport ziopy.services.system as system\nfrom ziopy.either import EitherArrow\nfrom ziopy.environments import ConsoleSystemEnvironment\nfrom ziopy.services.console import Console, LiveConsole\nfrom ziopy.zio import ZIO, Environment, ZIOMonad, monadic, unsafe_run\n\n\n@monadic\ndef program(\n    do: ZIOMonad[Console, Union[EOFError, KeyboardInterrupt]]\n) -> ZIO[\n    Console,\n    Union[EOFError, KeyboardInterrupt],\n    str\n]:\n    con = do << Environment()\n\n    do << con.print(\"Hello, what is your name?\")\n    name = do << con.input()\n    do << con.print(f\"Your name is: {name}\")\n    x = do << ZIO.succeed(1)\n\n    while x < 20:\n        x = do << (\n            ZIO.succeed(x)\n            .map(lambda p: p + 1)\n            .flat_map(lambda q: ZIO.succeed(q - 1))\n            .flat_map(lambda r: ZIO.succeed(r + 1))\n        )\n\n    do << con.print(f\"The value of x is: {x}\")\n    return ZIO.succeed(f\"Hello, {name}!\")\n\n\np = program().provide(LiveConsole())\nfinal_result = unsafe_run(p)\nprint(f\"Final result (1) is: {final_result}\")\n\n# You can run the same program (value) over and over again.\nfinal_result_2 = unsafe_run(p)\nprint(f\"Final result (2) is: {final_result_2}\")\n\n\n@monadic\ndef prog(\n    do: ZIOMonad[ConsoleSystemEnvironment, NoReturn]\n) -> ZIO[ConsoleSystemEnvironment, NoReturn, int]:\n    age = do << console.get_input_from_console(\n        prompt=\"How old are you?\\n\",\n        parse_value=(\n            EitherArrow.from_callable(str)\n            .map(int)\n            .catch(ValueError)\n        ),\n        default_value=21\n    )\n    do << console.print(f\"You are {age} years old.\")\n    return ZIO.succeed(age)\n\n\nunsafe_run(\n    prog().provide(\n        ConsoleSystemEnvironment(console=LiveConsole(), system=system.LiveSystem())\n    )\n)\n```\n\nHistory\n-------\nZIO-py grew out of a 2019 [Root Insurance Company](https://www.joinroot.com/) Hack Days project which experimented with porting ZIO to Python. The barrier to adoption was the fact that Python did not have a good mechanism for handling monadic programming, such as Scala's [for comprehension](https://docs.scala-lang.org/tour/for-comprehensions.html) or Haskell's [do notation](https://en.wikibooks.org/wiki/Haskell/do_notation). I implemented the beginnings of an AST transformer that made it possible to use a kind of primitive do notation [here](https://github.com/harveywi/ziopy#monad-comprehension-syntactic-sugar), but generalizing it to work with general Python AST transformations was extremely difficult. Without a better syntax for monadic programming, nobody would ever want to use it in Python. Nested `.flat_map` everywhere is a mess.\n\nAfter letting the problem simmer in my head for more than a year, I suddenly had an epiphany one morning:\n\n> \"Solve the inversion of control flow problem, and you'll have a better monadic \"do\" notation than any programming language currently offers.\"\n\nSo that's what I did. I tried out a few different designs, trying to emulate something analogous to [call/cc](https://en.wikipedia.org/wiki/Call-with-current-continuation) in a typesafe way in Python. Next, I used a [fork/exec](https://en.wikipedia.org/wiki/Fork%E2%80%93exec) strategy to simulate call/cc. Ultimately I was able to construct a design that eschewed call/cc, using only `try`/`catch` and an additional thunk in the `@monadic` decorator to achieve the desired control flow.\n\nOne of the limiting reagents was that mypy still [has some problems](https://github.com/python/mypy/issues/3157) with type inference with code that uses decorators. So, for the short term, I whipped together a simple `mypy` plugin that properly checks/modifies the type signature of functions that are decorated as `@monadic`.\n\nFiguring out a way to use the library in a type safe way was tricky. I had to subconsciously think for a few days about how to maintain the type safety. The `@monadic` decorator, `do: ZIOMonad[R, E]` argument, and mypy plugin solved that problem pretty well methinks...but YMMV.\n\nWhat's Next?\n------------\nAsync/concurrent functionality is currently on the radar. The end goal is to\nmake ZIO-py into one of the best solutions for async/concurrent programming, and\nto help developers take full advantage of the future of Python when the [global\ninterpreter lock has been removed](https://www.infoworld.com/article/3637073/python-stands-to-lose-its-gil-and-gain-a-lot-of-speed.html).\n\nStatement of Public Good\n------------------------\nThis project is made possible by:\n* The Mathematics and Informatics Institute of Ohio, a nonprofit whose mission is to enrich the citzenry of the State of Ohio via education and public domain contributions to advanced mathematics, computer science, informatics, information theory, data science, and other analytical disciplines.\n* [Root Insurance Company](https://www.joinroot.com/). This library is an open source version of one of our widely-used internal Python libraries.\n* [John De Goes](https://degoes.net/) and the many [Scala ZIO](https://github.com/zio/zio) contributors.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/miiohio/ziopy",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "zio-py",
            "package_url": "https://pypi.org/project/zio-py/",
            "platform": null,
            "project_url": "https://pypi.org/project/zio-py/",
            "project_urls": {
                "Homepage": "https://github.com/miiohio/ziopy"
            },
            "release_url": "https://pypi.org/project/zio-py/0.0.7/",
            "requires_dist": [
                "typing-extensions (>=4.2.0)",
                "dataclasses ; python_version < \"3.7\""
            ],
            "requires_python": "",
            "summary": "Python port of Scala ZIO for pure functional programming",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14876249,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "def83ca44dbacdc0a7fd8c2dc1d44920",
                    "sha256": "73c4e7f67c6dce3b767cb6e553ac8b234dc64d58c99b0c630fbc9553576ed3c6"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "def83ca44dbacdc0a7fd8c2dc1d44920",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 15583,
                "upload_time": "2022-08-25T08:54:53",
                "upload_time_iso_8601": "2022-08-25T08:54:53.698981Z",
                "url": "https://files.pythonhosted.org/packages/b7/e5/eea036a5f74c705ce4487477304d5f325784f14a123d0e94b389a64a43cc/zio_py-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "265f860fd10a39e350447ddb4680d0b3",
                    "sha256": "5b81034946a1725adb59734710e7c2e4539a576ee3daeae0fb380651c7a8aff2"
                },
                "downloads": -1,
                "filename": "zio_py-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "265f860fd10a39e350447ddb4680d0b3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 13951,
                "upload_time": "2022-08-25T08:54:55",
                "upload_time_iso_8601": "2022-08-25T08:54:55.790234Z",
                "url": "https://files.pythonhosted.org/packages/a1/d3/7b02f2ba41735babb5c5e9d46cbf815409d77efe623d0670be972c8630bb/zio_py-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}