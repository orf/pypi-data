{
    "1.0.3": {
        "info": {
            "author": "",
            "author_email": "HFT-Crypto-API <acidpictures@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "HFT-Crypto-API",
            "package_url": "https://pypi.org/project/HFT-Crypto-API/",
            "platform": null,
            "project_url": "https://pypi.org/project/HFT-Crypto-API/",
            "project_urls": {
                "Homepage": "https://github.com/hftcryptobot/HFT-Crypto-API"
            },
            "release_url": "https://pypi.org/project/HFT-Crypto-API/1.0.3/",
            "requires_dist": [
                "certifi==2020.4.5.1",
                "chardet==3.0.4",
                "docopt==0.6.2",
                "idna==2.9",
                "pipreqs==0.4.10",
                "pydantic==1.10.2",
                "pytest==6.2.1",
                "requests==2.23.0",
                "urllib3==1.25.0",
                "utils==1.0.1",
                "websockets>=9.1"
            ],
            "requires_python": "",
            "summary": "Bitmarket REST/Websocket Api implementation",
            "version": "1.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16102103,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "edac46ae607cac784457a819c253747e",
                    "sha256": "b5505192a259c89eec60d0960211d899d5844f6b7bda7938720b8f97133782a0"
                },
                "downloads": -1,
                "filename": "hft_crypto_api-1.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "edac46ae607cac784457a819c253747e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 208780,
                "upload_time": "2022-12-14T16:23:25",
                "upload_time_iso_8601": "2022-12-14T16:23:25.223204Z",
                "url": "https://files.pythonhosted.org/packages/0a/b3/ae6bf26d8068988c1768b8d36afe828477ad1702ef1cfe0a828ae97b1cfe/hft_crypto_api-1.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.3b0": {
        "info": {
            "author": "",
            "author_email": "HFT-Crypto-API <acidpictures@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3"
            ],
            "description": "# HFT CRYPTO API-BitMart\nPython module for Bitmart SDK\n\n## Installation\n\n``` pip install hftcryptoapi```\n\n# Spot Market\n## Introduction\n\n``` from hftcryptoapi.bitmart import Bitmart ```\n\n## Basic Information\n\nInitialise an instance of Bitmart client:\n```\nfrom hftcryptoapi import BrokerClient\n\napi_key = \"\"\nsecret_key = \"\"\nmemo = \"\"\n\nbroker_client  = BrokerClient(api_key, secret_key, memo, exchange=Exchange.BITMART)\n```\n\n## System Status\nService calls to check Bitmart API service status. Initate a new Bitmart service instance to call methods.\n```\nform hftcryptoapi import BitmartService\n```\n- Get System Time, returns system time in datetime format.\n```\nbitmart_service = BitmartService()\nbt_time = bitmart_service.get_system_time()\n```\n- Get System Service Status, returns system status\n```\nbitmart_service = BitmartService()\nbt_staus = bitmart_service.get_service_status()\n```\n\n## Public Market Data\nFunctions to get info from spot market public API.\nFunctions are wrapped in class MarketDataAgent and return object (or arrays) as defined in description.\n```\nfrom hftcryptoapi import MarketDataAgent\n```\n- Get Currency List\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\ncurrency_list = market_agent.get_currency_list()\n```\n\n-  Get List of Trading Pairs, return a list of all trading pairs\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\n[currency_list] = market_agent.get_list_of_trading_pairs()\n```\n- Get List of Trading Pair Details, returns currency details as Currency  object\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\ncurrency_details = market_agent.get_traiding_pair_detail()\n```\n\n- Get Ticker of All Pairs (V2), returns list of currency details as a Currency object\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\n[currency_details] = market_agent.get_all_trading_pair_details()\n```\n\n- Get K-Line Step, return klines as list\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\nk_lines = market_agent.get_kline_steps()\n```\n\n- Get K-Line, return Kline object for specified symbol and time period for SPOT and FUTURES markets\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\nsymbol_klines = market_agent.get_symbol_kline(symbol, fromTime, toTime, step, market = Market.SPOT)\n```\n\n- Get Depth\nReturns [buys], [sells] wrapped in SportDepth or FuturesDepth object, depends on market type (Market.SPOT or Market.FUTURES)\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\nsymbol_depth = market_agent.get_symbol_depth(symbol, precision, size)\n```\n\n- Get Recent Trades, returns Trade object for specified symbol and number of trades (by default: 50)\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\nbt_trades = market_agent.get_symbol_recent_trades(symbol, N)\n```\n\n- Get Futures Openinterest\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\nfutures_open_interest = market_agent.get_open_interest(Currency:object, market=Market.FUTURES)\n```\n\n- Get Current Funding Rate for futures\n```\nmarket_agent = MarketDataAgent(exchange=Exchange.BITMART)\nbt_trades = market_agent.get_current_funding_rate(Currency:object, market=Market.FUTURES)\n```\n\n\n## Funding Account Data\nSet of functions to manage used account:\n```\nfrom hftcryptoapi import BrokerClient\n```\n-  Get Account Balance, a unified method for all types of markets (SPOT, MARGIN, FUTURES). Market should be defined. Returns list of currencies/positions with attributes unique for each market:\n```\nbroker_client  = BrokerClient(...)\nspot_currencies = broker_client.get_acount_balance(symbol, market=Market.SPOT)\nspotmargin_currencies = broker_client.get_acount_balance(symbol, market=Market.SPOT_MARGIN)\nfuture_contracts = broker_client.get_acount_balance(symbol, market=Market.FUTURES)\n```\n\n- Get Basic Fee Rate, return account user fee wrapped in Fee object\n```\nbroker_client  = BrokerClient(...)\nbt_fee = broker_client.get_basic_fee_rate()\n```\n- Get Actual Trade Fee Rate, return trade fee rate for specified symbol wrapped in TradeFee object\n```\nbroker_client  = BrokerClient(...)\nbt_trade_fee = broker_client.get_trade_fee_rate(symbol)\n```\n\n\n## Spot /Margin Trading\n- Place Spot Order (V2)\n```\nbroker_client  = BrokerClient(...)\nspot_order = broker_client.create_order(symbol, side, type, market=Market.SPOT)\norder_id = broker_client.submit_order(spot_order)\n```\n\n- Place Margin Order\n```\nbroker_client  = BrokerClient(...)\nmargin_order = broker_client.create_order(symbol, side, type, market=Market.SPOT_MARGIN)\norder_id = broker_client.submit_order(margin_order)\n```\n- Cancel an Order (V3), cancel order in the account manager specified by order ID\n```\nbroker_client.cancel_order(order)\n```\n- Cancel All Orders, cancels all orders in the account manager\n```\nbroker_client.cancel_all_orders(symbol, side, market=Market.SPOT)\nbroker_client.cancel_all_orders(symbol, side, market=Market.FUTURES)\n```\n- Get Order Detail (V2), gets order details for specified order object\n```\nbt_order_with_details = broker_client.get_order_details(order:Order)\n```\n- Get User Order History (V3), return order histore for user account, return list of order objects\n```\n[all_orders] = broker_client .get_order_history(symbol, status)\n```\n\n# USD-M Futures\n\n## Basic Information\nTo access methods for Futures account/market methods should have a flag Market.FUTURES passed to.\n\n## Futures Market Data\n- Get Contract Details, create contract object for Futures market (contract)\n```\nbroker_client  = BrokerClient(...)\nfutures_contract = broker_client .get_contract(symbol, side, type, market=Market.FUTURES)\n```\n\n## Futures Trading\n- Submit Order - see spot description\n\n- Cancel Order - see spot description\n\n- Cancel All orders - see spot description\n\n- Get Order Detail - see spot description\n\n- Get Order History - see spot description\n\n- Get Current Position Detail - see spot description\n\n\n## WebSocket Subscription\n\n- Get Websocket Data, returns objects from websocket subscription  \n```\ncallback implementation\n```\n\n## Error Codes\nError code has be taken from API web-page and implemented into Error objects.\n\n# ChangeLog\n25.11.2022 Version 0.1\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "HFT-Crypto-API",
            "package_url": "https://pypi.org/project/HFT-Crypto-API/",
            "platform": null,
            "project_url": "https://pypi.org/project/HFT-Crypto-API/",
            "project_urls": {
                "Homepage": "https://github.com/hftcryptobot/HFT-Crypto-API"
            },
            "release_url": "https://pypi.org/project/HFT-Crypto-API/1.0.3b0/",
            "requires_dist": [
                "certifi==2020.4.5.1",
                "chardet==3.0.4",
                "docopt==0.6.2",
                "idna==2.9",
                "pipreqs==0.4.10",
                "pydantic==1.10.2",
                "pytest==6.2.1",
                "requests==2.23.0",
                "urllib3==1.21.1",
                "utils==1.0.1",
                "websockets>=9.1"
            ],
            "requires_python": "",
            "summary": "Bitmarket REST/Websocket Api implementation",
            "version": "1.0.3b0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16102103,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "addd0eb0b6bed163f500ffe640d6128a",
                    "sha256": "07f6906c9eae0e36d6f5e6e1a4fbdb878400050e0a4872b601a724e9f2e8d7dd"
                },
                "downloads": -1,
                "filename": "hft_crypto_api-1.0.3b0.tar.gz",
                "has_sig": false,
                "md5_digest": "addd0eb0b6bed163f500ffe640d6128a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 208792,
                "upload_time": "2022-12-14T16:26:19",
                "upload_time_iso_8601": "2022-12-14T16:26:19.575998Z",
                "url": "https://files.pythonhosted.org/packages/5e/30/d0de9543b368d74cd00b35f9d980e704c21dbf539d253f150be306c6d547/hft_crypto_api-1.0.3b0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}