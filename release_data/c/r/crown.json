{
    "0.0.7": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.0.7/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0441a39346576e66fb61a83d9e4722f7",
                    "sha256": "a2721d28089bd72ffc8636efad69d26ce75d389781f6e6896920dbee42d17500"
                },
                "downloads": -1,
                "filename": "crown-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "0441a39346576e66fb61a83d9e4722f7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 24210,
                "upload_time": "2020-12-02T15:10:30",
                "upload_time_iso_8601": "2020-12-02T15:10:30.639495Z",
                "url": "https://files.pythonhosted.org/packages/c0/55/f462d6041acab9c45ff3528e2ff309bd0fbc5f7c47bdba754668509ecbbb/crown-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.9": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.0.9/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bc0236915fc7186c57522f9989c19a69",
                    "sha256": "258e98c00516b7d8764e599352c276e094f987d89180e3c17692e5bfcd6e3d25"
                },
                "downloads": -1,
                "filename": "crown-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "bc0236915fc7186c57522f9989c19a69",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 26552,
                "upload_time": "2021-01-16T12:54:10",
                "upload_time_iso_8601": "2021-01-16T12:54:10.935674Z",
                "url": "https://files.pythonhosted.org/packages/56/d7/c8100b7b6f209b3e69527970c65debe4b6c8623acbbecbe3ff63c0906c7e/crown-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e4fb3ed16c255c107ae19cdee83cf1a5",
                    "sha256": "fcb7f571dea7a4422a81b6d4ea6036d627a587bb5f638dc1913045183b336f3b"
                },
                "downloads": -1,
                "filename": "crown-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e4fb3ed16c255c107ae19cdee83cf1a5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 27114,
                "upload_time": "2021-01-26T09:36:53",
                "upload_time_iso_8601": "2021-01-26T09:36:53.566417Z",
                "url": "https://files.pythonhosted.org/packages/13/27/7ed584de8ff88de5d8b1e47ee414fd21e982379ba5bff4a685d4de82cd7b/crown-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ad1149b1986613f6de2b0b6a6f905d79",
                    "sha256": "97a7174c09af81bc3e55ea17bf4b15b18754bfb96dc2a5b7e7acca2ddde62197"
                },
                "downloads": -1,
                "filename": "crown-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ad1149b1986613f6de2b0b6a6f905d79",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 27966,
                "upload_time": "2021-01-28T09:53:19",
                "upload_time_iso_8601": "2021-01-28T09:53:19.455040Z",
                "url": "https://files.pythonhosted.org/packages/bf/38/ad4024944bcbf7924bdf0ca94dfef3a777d8af9a06bd17df1bc3d9de90a8/crown-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.2/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4a8da9c9cb96ce1c0860d83c1dfd8710",
                    "sha256": "4937c36dd907cd1aede5c3a1e3f4e7c1545dd67fce77a96a3a152a9625f68ca6"
                },
                "downloads": -1,
                "filename": "crown-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "4a8da9c9cb96ce1c0860d83c1dfd8710",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 29063,
                "upload_time": "2021-02-02T06:14:37",
                "upload_time_iso_8601": "2021-02-02T06:14:37.641231Z",
                "url": "https://files.pythonhosted.org/packages/b3/69/54e5f687896bc78e8c21d39656e582ee1d59d0d647cf34903159e6070b51/crown-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.4/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9400550b6c14e63bd7f88ad8e984bc66",
                    "sha256": "81e8df9a86d22a063b058b09e54ecce64d368960c550ef249ec3c432e1eeac2b"
                },
                "downloads": -1,
                "filename": "crown-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "9400550b6c14e63bd7f88ad8e984bc66",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 29082,
                "upload_time": "2021-02-02T08:36:20",
                "upload_time_iso_8601": "2021-02-02T08:36:20.162739Z",
                "url": "https://files.pythonhosted.org/packages/33/e0/f26c1528af9843d9c423550b575f3fc0b4a8f07fddd88e2abb6f7a0679a0/crown-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.5": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.5/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f05a7a5dde05fb64bf87d594a092f231",
                    "sha256": "a16a38eddfa3de7134822068ca1fb152300e1cc28eb68d6e65ab199b4236211d"
                },
                "downloads": -1,
                "filename": "crown-0.1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "f05a7a5dde05fb64bf87d594a092f231",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 29138,
                "upload_time": "2021-02-02T09:06:16",
                "upload_time_iso_8601": "2021-02-02T09:06:16.811761Z",
                "url": "https://files.pythonhosted.org/packages/ef/62/6063a7e3804db25249b7234883c1479d008820c1b49ddcba434263f391e6/crown-0.1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.6": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.6/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7a8485e1fbecf71b7f758d9420aa8c3e",
                    "sha256": "c7201aeeb538fc1286b9b7fe32b5be01240f05bc1b95147cf1e515eb6b0a4946"
                },
                "downloads": -1,
                "filename": "crown-0.1.6.tar.gz",
                "has_sig": false,
                "md5_digest": "7a8485e1fbecf71b7f758d9420aa8c3e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 29158,
                "upload_time": "2021-02-18T09:34:04",
                "upload_time_iso_8601": "2021-02-18T09:34:04.506360Z",
                "url": "https://files.pythonhosted.org/packages/bb/a6/8c01fcda23fce8a3e4dee86eefd478787a8c8f2b7ba2eed02a912b24360f/crown-0.1.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.7": {
        "info": {
            "author": "machine-w",
            "author_email": "steve2008.ma@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "crown\n======\n\ncrown \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u9488\u5bf9\u65f6\u5e8f\u6570\u636e\uff08TSDB\uff09TDengine\u7684ORM\u5e93\u3002 \n\n* \u9700\u8981python 3.0\u7248\u672c\u4ee5\u4e0a\n* \u5728tdengine 2.0.8\u7248\u672c\u6d4b\u8bd5\u901a\u8fc7\n* \u89e3\u51b3mac\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u6ca1\u6709\u539f\u751fpython\u8fde\u63a5\u5668\u7684\u95ee\u9898\n* \u6781\u5927\u7684\u964d\u4f4e\u4e86python\u7a0b\u5e8f\u5458\u4f7f\u7528TDengine\u6280\u672f\u95e8\u69db\n* \u53ef\u4ee5\u65b9\u4fbf\u7684\u5c06\u6570\u636e\u8f6c\u6362\u5230numpy\u4e0epandas\n* \u76ee\u524d\u4f7f\u7528TDengine\u7684restful\u63a5\u53e3\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u4ee5\u540e\u5c06\u63d0\u4f9b\u539f\u751f\u63a5\u53e3\u5f15\u64ce\u53ef\u4f9b\u9009\u62e9\uff08\u76ee\u524d\u539f\u751f\u63a5\u53e3\u65e0\u6cd5\u5728mac\u7cfb\u7edf\u4e0a\u4f7f\u7528\uff09\n\n\u5b89\u88c5\n----------------------\n\n\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7pip,\u8f7b\u677e\u5b89\u88c5\u6700\u65b0\u7248\u672c\uff1a\n\n.. code-block:: console\n\n    pip install crown\n\n\n\u8fd8\u53ef\u4ee5\u901a\u8fc7git\u5b89\u88c5\uff0c\u9879\u76ee\u5730\u5740\uff1a https://github.com/machine-w/crown\n\n\u4f7f\u7528\u65b9\u6cd5:\n\n.. code-block:: console\n\n    git clone https://github.com/machine-w/crown.git\n    cd crowm\n    python setup.py install\n\n\n\u4f7f\u7528\u6587\u6863\n------------------------\n\n\u5efa\u7acb\u6570\u636e\u5e93\u4e0e\u5220\u9664\u6570\u636e\u5e93:\n\n.. code-block:: python\n\n    from crown import *\n\n    DATABASENAME = 'taos_test'\n    HOST = 'localhost'\n    PORT = 6041\n    # \u9ed8\u8ba4\u7aef\u53e3 6041\uff0c\u9ed8\u8ba4\u7528\u6237\u540d\uff1aroot,\u9ed8\u8ba4\u5bc6\u7801\uff1ataosdata\n    db = TdEngineDatabase(DATABASENAME,host=HOST) #\u65b0\u5efa\u6570\u636e\u5e93\u5bf9\u8c61\n    # db.connect()  # \u5c1d\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u5982\u679c\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u81ea\u52a8\u5efa\u5e93\u3002\n    # print(db.databases) #\u8fde\u63a5\u6570\u636e\u5e93db\u5bf9\u8c61\u540e\u4f1a\u81ea\u52a8\u83b7\u53d6\u5168\u90e8\u6570\u636e\u5e93\u4fe1\u606f\uff0c\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u4fdd\u5b58\u5728\u5c5e\u6027databases\u4e2d\u3002\n    # \u5982\u4e0d\u4f7f\u7528\u9ed8\u8ba4\u503c\uff0c\u53ef\u4ee5\u5982\u4e0b\u4f20\u5165\u53c2\u6570\n    # db = TdEngineDatabase(DATABASENAME,host=HOST,port=PORT,user='yourusername',passwd='yourpassword')\n    db.create_database(safe=True)  #\u5efa\u5e93\u6307\u4ee4\u3002 \uff08safe\uff1a\u5982\u679c\u5e93\u5b58\u5728\uff0c\u5219\u8df3\u8fc7\u5efa\u5e93\u6307\u4ee4\u3002\uff09\n    # db.create_database(safe=True,keep= 100,comp=0,replica=1,quorum=2,blocks=115) #\u53ef\u9009\u5b57\u6bb5\uff1a\u5efa\u5e93\u65f6\u914d\u7f6e\u6570\u636e\u5e93\u53c2\u6570\uff0c\u5177\u4f53\u5b57\u6bb5\u542b\u4e49\u8bf7\u53c2\u8003tdengine\u6587\u6863\u3002\n    db.drop_database(safe=True) #\u5220\u5e93\u6307\u4ee4 \uff08safe\uff1a\u5982\u679c\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u8df3\u8fc7\u5220\u5e93\u6307\u4ee4\u3002\uff09\n\n\u4fee\u6539\u6570\u636e\u5e93\u53c2\u6570:\n\n.. code-block:: python\n\n    db.alter_database(keep= 120,comp=1,replica=1,quorum=1,blocks=156) #\u540c\u5efa\u5e93\u53ef\u9009\u5b57\u6bb5\u3002\n\n\u6267\u884csql\u8bed\u53e5:\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u5e93\u5bf9\u8c61\u76f4\u63a5\u6267\u884csql\u8bed\u53e5\uff0c\u8bed\u53e5\u89c4\u5219\u4e0eTDengine restful\u63a5\u53e3\u8981\u6c42\u4e00\u81f4\u3002\n    res = db.raw_sql('select c1,c2 from taos_test.member1')\n    print(res,res.head,res.rowcount) #\u8fd4\u56de\u7684\u5bf9\u8c61\u4e3a\u4e8c\u7ef4\u6570\u636e\u3002res.head\u5c5e\u6027\u4e3a\u6570\u7ec4\u5bf9\u8c61\uff0c\u4fdd\u5b58\u6bcf\u4e00\u884c\u6570\u636e\u7684\u4ee3\u8868\u7684\u5217\u540d\u3002res.rowcount\u5c5e\u6027\u4fdd\u5b58\u8fd4\u56de\u884c\u6570\u3002\n    # res: [[1.2,2.2],[1.3,2.1],[1.5,2.0],[1.6,2.1]]\n    # res.head: ['c1','c2']\n    # res.rowcount: 4\n\n\u6253\u5370\u6267\u884c\u7684sql\u8bed\u53e5:\n\n.. code-block:: python\n\n    Meter1.select().one()\n    print(db.curSql) #\u53ef\u4ee5\u901a\u8fc7db\u5bf9\u8c61\u7684curSql\u5c5e\u6027\u83b7\u53d6\u5f53\u524d\u6267\u884c\u7684\u539f\u59cbsql\u8bed\u53e5\n\n\u6a21\u578b\u5b9a\u4e49:\n\n.. code-block:: python\n\n    from crown import *\n\n    DATABASENAME = 'taos_test'\n    HOST = 'localhost'\n    db = TdEngineDatabase(DATABASENAME,host=HOST) #\u65b0\u5efa\u6570\u636e\u5e93\u5bf9\u8c61\n    db.connect()  #\u5c1d\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u5982\u679c\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u81ea\u52a8\u5efa\u5e93\u3002\n    # print(db.databases) #\u8fde\u63a5\u6570\u636e\u5e93db\u5bf9\u8c61\u540e\u4f1a\u81ea\u52a8\u83b7\u53d6\u5168\u90e8\u6570\u636e\u5e93\u4fe1\u606f\uff0c\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u4fdd\u5b58\u5728\u5c5e\u6027databases\u4e2d\u3002\n\n    # \u8868\u6a21\u578b\u7c7b\u7ee7\u627f\u81eaModel\u7c7b\uff0c\u6bcf\u4e2a\u6a21\u578b\u7c7b\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u4e00\u5f20\u8868\uff0c\u6a21\u578b\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6bcf\u4e2aField\uff0c\u5bf9\u5e94\u8868\u4e2d\u7684\u4e00\u5217\n    class Meter1(Model):\n        cur = FloatField(db_column='c1')\n        curInt = IntegerField(db_column='c2')\n        curDouble = DoubleField(db_column='c3')\n        desc = BinaryField(db_column='des')\n\n        class Meta: #Meta\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u6a21\u578b\u7c7b\u7684\u914d\u7f6e\u4fe1\u606f\n            database = db #\u6307\u5b9a\u8868\u6240\u4f7f\u7528\u7684\u6570\u636e\u5e93\n            db_table = 'meter1' #\u6307\u5b9a\u8868\u540d\n\n    # \u53ef\u9009\u62e9\u7684\u5168\u90e8Field\u7c7b\u578b\u5982\u4e0b\uff0c\u7c7b\u578b\u4e0eTdengine\u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u4e00\u4e00\u5bf9\u5e94\n    class AllField(Model):\n        name_float = FloatField(column_name='nf1') #\u53ef\u9009\u9879\uff1a\u6307\u5b9a\u5217\u540d\n        name_double = DoubleField()\n        name_bigint = BigIntegerField()\n        name_int = IntegerField()\n        name_smallint = SmallIntegerField()\n        name_tinyint = TinyIntegerField()\n        name_nchar = NCharField(max_length=59,db_column='n1')\n        name_binary = BinaryField(max_length=3)\n        name_bool = BooleanField()\n        dd = PrimaryKeyField() # \u5982\u679c\u5b9a\u4e49\u4e86\u4e3b\u952e\u5217\uff0c\u5219\u4f7f\u7528\u4e3b\u952e\u5217\u4f5c\u4e3a\u4e3b\u952e\uff0c\u5982\u679c\u6ca1\u6709\u5b9a\u4e49\uff0c\u5219\u9ed8\u8ba4\u201cts\u201d\u4e3a\u4e3b\u952e\u3002\n        birthday = DateTimeField()\n        class Meta:\n            database = db\n            db_table = 'all_field'\n\n\u4e3b\u952e\u5b9a\u4e49\uff1a\n\n.. code-block:: python\n\n    #\u5b9a\u4e49\u4e3b\u952e\u65b9\u5f0f1 \n    #\u4e0d\u5b9a\u4e49\u4e3b\u952e\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4e3b\u952e\uff1a\u201cts\u201d\n    class TestPri(Model):\n        cur = FloatField(db_column='c1')\n        class Meta:\n            database = db\n    res = TestPri.describe_table() #\u83b7\u53d6\u8868\u7ed3\u6784\u4fe1\u606f\n    print(res[0][0]) # \u7ed3\u679c: \u201cts\u201d\n\n    #\u5b9a\u4e49\u4e3b\u952e\u65b9\u5f0f2\n    class TestPri(Model):\n        cur = FloatField(db_column='c1')\n        timeline = PrimaryKeyField() #\u5b9a\u4e49\u4e3b\u952e\u5217\uff0c\u4e3b\u952e\u540d\u8bbe\u7f6e\u4e3a\u5217\u540d\n        class Meta:\n            database = db\n    res = TestPri.describe_table()\n    print(res[0][0]) # \u7ed3\u679c: \u201ctimeline\u201d\n\n     #\u5b9a\u4e49\u4e3b\u952e\u65b9\u5f0f3\n    class TestPri(Model):\n        cur = FloatField(db_column='c1')\n        class Meta:\n            database = db\n            primary_key = 'timeline' # Meta\u4e2d\u5b9a\u4e3b\u952e\u540d\u79f0\n    res = TestPri.describe_table()\n    print(res[0][0]) # \u7ed3\u679c: \u201ctimeline\u201d\n    \n\n\n\u5efa\u8868\u3001\u5220\u8868\u3001\u68c0\u67e5\u8868\u662f\u5426\u5b58\u5728\uff1a\n\n.. code-block:: python\n\n    Meter1.create_table(safe=True) #\u5efa\u8868 safe\uff1a\u5982\u679c\u8868\u5b58\u5728\uff0c\u5219\u8df3\u8fc7\u5efa\u8868\u6307\u4ee4\u3002\u547d\u4ee4\u8fd0\u884c\u6210\u529f\u653e\u56deTrue,\u5931\u8d25raise\u9519\u8bef\n    # db.create_table(Meter1,safe=True) #\u901a\u8fc7\u6570\u636e\u5e93\u5bf9\u8c61\u5efa\u8868\uff0c\u529f\u80fd\u540c\u4e0a\n    Meter1.drop_table(safe=True) #\u5220\u8868 safe\uff1a\u5982\u679c\u8868\u4e0d\u5b58\u5728\uff0c\u5219\u8df3\u8fc7\u5220\u8868\u6307\u4ee4\u3002\u547d\u4ee4\u8fd0\u884c\u6210\u529f\u653e\u56deTrue,\u5931\u8d25raise\u9519\u8bef\n    # db.drop_table(Meter1,safe=True) #\u901a\u8fc7\u6570\u636e\u5e93\u5bf9\u8c61\u5220\u8868\uff0c\u529f\u80fd\u540c\u4e0a\n    Meter1.table_exists() #\u67e5\u770b\u8868\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u8fd4\u56deTrue,\u4e0d\u5b58\u5728\u8fd4\u56de\uff1aFalse\n\n\u52a8\u6001\u5efa\u8868\uff1a\n\n\u9664\u4e86\u4f7f\u7528\u5b9a\u4e49\u6a21\u578b\u7c7b\u7684\u65b9\u5f0f\u5efa\u8868\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u52a8\u6001\u5b9a\u4e49\u5b57\u6bb5\u5efa\u8868\u7684\u529f\u80fd\u3002\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u4f7f\u7528Model\u7c7b\u7684\u7c7b\u65b9\u6cd5dynamic_create_table\u65b9\u6cd5\u52a8\u6001\u5efa\u8868\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8868\u540d\uff0c\u7136\u540e\u9700\u8981\u6307\u5b9a\u6570\u636e\u5e93\uff0c\u4e0e\u662f\u5426\u5b89\u5168\u5efa\u8868\u3002\n    # \u5173\u952e\u8bcd\u53c2\u6570\u53ef\u4ee5\u4efb\u610f\u591a\u4e2a\uff0c\u6307\u5b9a\u8868\u4e2d\u7684\u5b57\u6bb5\u3002\n    Meter_dynamic= Model.dynamic_create_table('meterD',database=db,safe=True,test1 = FloatField(db_column='t1'),test2 = IntegerField(db_column='t2'))\n    # \u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\u4e3aModel\u7c7b\u5bf9\u8c61\u3002\u4f7f\u7528\u65b9\u6cd5\u4e0e\u9759\u6001\u7ee7\u627f\u7684\u6a21\u578b\u7c7b\u76f8\u540c\u3002\n    Meter_dynamic.table_exists()\n    Meter_dynamic.drop_table()\n\n\u4ece\u8868\u540d\u5efa\u7acb\u5bf9\u5e94\u7684model\u7c7b\uff1a\n\n\u6570\u636e\u5e93\u4e2d\u5df2\u6709\u7684\u6570\u636e\u5e93\u8868\uff0c\u53ef\u4ee5\u901a\u8fc7\u5df2\u77e5\u7684\u8868\u540d\u5efa\u7acb\u5bf9\u5e94\u7684model\u7c7b\u3002\n\n.. code-block:: python\n\n    nodeTable = Model.model_from_table('node_10',db) # node_10\u4e3a\u6570\u636e\u8868\u7684\u8868\u540d\n    res = nodeTable.select().one() # \u4ece\u8868\u540d\u65b0\u5efa\u7684\u7c7b\u548c\u9759\u6001\u5efa\u7acb\u7684\u7c7b\uff0c\u4f7f\u7528\u65b9\u6cd5\u5b8c\u5168\u4e00\u81f4\n    \n    \n\u52a8\u6001\u5efa\u7acb\u7684\u6216\u4ece\u6570\u636e\u5e93\u5206\u6790\u5f97\u5230\u7684model\u5bf9\u8c61\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5217\u540d\u4f5c\u4e3a\u5c5e\u6027\u540d\u8fdb\u884c\u67e5\u8be2\u64cd\u4f5c\u3002\n\n.. code-block:: python\n\n\n    res = nodeTable.select(nodeTable.c1)where(nodeTable.c1 > 1).all() # \u76f4\u63a5\u4f7f\u7528\u5217\u540d\n    res = nodeTable.select(nodeTable.c1)where(FloatField(db_column='c1') > 1).all() # \u4e5f\u53ef\u4ee5\u4f7f\u7528field\u5bf9\u8c61\u4f5c\u4e3a\u5b57\u6bb5\u68c0\u7d22\u6761\u4ef6\uff08\u591a\u4f7f\u7528\u4e8e\u5217\u540d\u4e3a\u52a8\u6001\u503c\u7684\u65f6\u5019\uff09\n    # \u76f4\u63a5\u4f7f\u7528\u5217\u540d,\u67e5\u770b\u7ed3\u679c\n    for item in res:\n        print(item.c1)\n\n\u63d2\u5165\u6570\u636e\uff1a\n\n.. code-block:: python\n\n    #\u65b9\u6cd5\u4e00\n    for i in range(1,101):\n        #\u4f7f\u7528\u6a21\u578b\u7c7b\u5b9e\u4f8b\u5316\u7684\u6bcf\u4e2a\u5bf9\u8c61\u5bf9\u5e94\u6570\u636e\u8868\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u5c5e\u6027\u53c2\u6570\u7684\u65b9\u5f0f\u7ed9\u6bcf\u4e00\u5217\u8d4b\u503c\n        m = Meter1(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1',ts= datetime.datetime.now() - datetime.timedelta(seconds=(102-i)))\n        #\u4f7f\u7528\u5bf9\u8c61\u7684save\u65b9\u6cd5\u5c06\u6570\u636e\u5b58\u5165\u6570\u636e\u5e93\n        m.save()\n    print(Meter1.select().count()) # \u7ed3\u679c\uff1a100\n    #\u65b9\u6cd5\u4e8c\n    for i in range(1,11):\n        #\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6a21\u578b\u7c7b\u7684insert\u65b9\u6cd5\u63d2\u5165\u6570\u636e\u3002\n        Meter1.insert(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1',ts= datetime.datetime.now() - datetime.timedelta(seconds=(12-i)))\n    print(Meter1.select().count()) # \u7ed3\u679c\uff1a100\n    #\u5982\u679c\u4e0d\u4f20\u5165\u65f6\u95f4\u5c5e\u6027\uff0c\u5219\u4f1a\u4ee5\u5f53\u524d\u65f6\u523b\u4e3a\u9ed8\u8ba4\u503c\u4f20\u5165\n    Meter1.insert(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1')\n    m = Meter1(cur = 1/i,curInt=i,curDouble=1/i+10,desc='g1')\n    m.save()\n\n\u67e5\u8be2\u5355\u6761\u6570\u636e\uff1a\n\n.. code-block:: python\n\n    #\u83b7\u53d6\u4e00\u6761\u6570\u636e\n    #\u4f7f\u7528select()\u7c7b\u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u5b57\u6bb5\uff08\u53c2\u6570\u7559\u7a7a\u8868\u793a\u53d6\u5168\u90e8\u5b57\u6bb5\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u94fe\u5f0f\u4f7f\u7528one\u65b9\u6cd5\u83b7\u53d6\u7b2c\u4e00\u6761\u6570\u636e\n    res = Meter1.select().one()\n    print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n    #select\u51fd\u6570\u4e2d\u53ef\u4ee5\u9009\u62e9\u8981\u8bfb\u53d6\u7684\u5b57\u6bb5\n    res = Meter1.select(Meter1.cur,Meter1.desc).one()\n    print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n    #select\u51fd\u6570\u4e2d\u53ef\u4ee5\u4f7f\u7528Model\u7684\u7c7b\u65b9\u6cd5f()\u548cfc()\u83b7\u53d6\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u5c5e\u6027\u540d\u4e0e\u5217\u540d\u5bf9\u5e94Field\u5bf9\u8c61\n    res = Meter1.select(Meter1.f('cur'),Meter1.fc('c3'),Meter1.desc).one()\n    print(res.desc,res.curDouble,res.curInt,res.fc('c3'),res.f('cur'),res.ts)\n\n\u67e5\u8be2\u5168\u90e8\u6570\u636e\uff1a\n\n.. code-block:: python\n\n    #\u83b7\u53d6\u4e00\u6761\u6570\u636e\n    #\u4f7f\u7528select()\u7c7b\u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u5b57\u6bb5\uff08\u53c2\u6570\u7559\u7a7a\u8868\u793a\u53d6\u5168\u90e8\u5b57\u6bb5\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u94fe\u5f0f\u4f7f\u7528all\u65b9\u6cd5\u83b7\u53d6\u5168\u90e8\u6570\u636e\n    res_all = Meter1.select().all()\n    for res in res_all:\n        print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n    #select\u51fd\u6570\u4e2d\u53ef\u4ee5\u9009\u62e9\u8981\u8bfb\u53d6\u7684\u5b57\u6bb5\n    res_all = Meter1.select(Meter1.cur,Meter1.desc).all()\n    for res in res_all:\n        print(res.desc,res.curDouble,res.curInt,res.cur,res.ts)\n\n\u867d\u7136TDengine\u63d0\u4f9b\u4e86\u5f88\u591a\u805a\u5408\u548c\u7edf\u8ba1\u51fd\u6570\uff0c\u4f46\u662f\u628a\u65f6\u5e8f\u6570\u636e\u5bfc\u5165numpy\u6216pandas\u7b49\u6570\u636e\u5206\u6790\u7ec4\u4ef6\u4e2d\u8fdb\u884c\u5904\u7406\u7684\u60c5\u51b5\u4e5f\u662f\u5f88\u5e38\u89c1\u7684\u64cd\u4f5c\u3002\n\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7crown\u628a\u7ed3\u679c\u6570\u636e\u5bfc\u5165numpy\u548cpandas\n\n\u8bfb\u53d6\u6570\u636e\u5230numpy\uff1a\n\n.. code-block:: python\n\n    #\u901a\u8fc7all_raw\u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u4e8c\u7ef4\u6570\u7ec4\u683c\u5f0f\u7684\u6570\u636e\u67e5\u8be2\u7ed3\u679c\u3002\u7ed3\u679c\u6bcf\u5217\u4ee3\u8868\u7684\u6807\u9898\u4fdd\u5b58\u5728\u7ed3\u679c\u5bf9\u8c61\u7684head\u5c5e\u6027\u4e2d\u3002\n    raw_results = Meter1.select(Meter1.cur,Meter1.curInt,Meter1.curDouble).all_raw()\n    #\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5c06\u7ed3\u679c\u8f6c\u6362\u4e3anumpy\u6570\u7ec4\u5bf9\u8c61\n    np_data = np.array(raw_results)\n    print(np_data)\n    print(raw_results.head)\n\n\u8bfb\u53d6\u6570\u636e\u5230pandas\uff1a\n\n.. code-block:: python\n\n    raw_results = Meter1.select().all_raw()\n    #\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8f7b\u677e\u7684\u5c06\u6570\u636e\u5bfc\u5165pandas,\u5e76\u4e14\u4f7f\u7528\u65f6\u95f4\u70b9\u4f5c\u4e3aindex,\u4f7f\u7528\u8fd4\u56de\u7684\u6570\u636e\u6807\u9898\u4f5c\u4e3a\u5217\u540d\u3002\n    pd_data = pd.DataFrame(raw_results,columns=raw_results.head).set_index('ts')\n    print(pd_data)\n\n\u9009\u62e9\u5217\u56db\u5219\u8fd0\u7b97\uff1a\n\n.. code-block:: python\n\n    #\u4f7f\u7528select()\u7c7b\u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u8fd4\u56de\u67d0\u5217\u6216\u591a\u5217\u95f4\u7684\u503c\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u3001\u53d6\u4f59\u8ba1\u7b97\u7ed3\u679c\uff08+ - * / %\uff09\n    res_all = Meter1.select((Meter1.curDouble+Meter1.cur),Meter1.ts).all()\n    for res in res_all:\n        print(res.get(Meter1.curDouble+Meter1.cur),res.ts) #\u8fd4\u56de\u7684\u7ed3\u679c\u5bf9\u8c61\u53ef\u4ee5\u7528get\u65b9\u6cd5\u83b7\u53d6\u539f\u59cb\u8ba1\u7b97\u5f0f\u7ed3\u679c\n\n    #\u5b57\u6bb5\u522b\u540d\n    res_all = Meter1.select(((Meter1.curDouble+Meter1.cur)*Meter1.curDouble).alias('new_name'),Meter1.ts).all() #\u7ed9\u8fd0\u7b97\u5f0f\u8d77\u522b\u540d\uff08\u4e0d\u4ec5\u8fd0\u7b97\u5f0f\uff0c\u5176\u4ed6\u653e\u5728select\u51fd\u6570\u4e2d\u7684\u4efb\u4f55\u5c5e\u6027\u90fd\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\uff09\n    for res in res_all:\n        print(res.new_name,res.ts) #\u4f7f\u7528\u522b\u540d\u83b7\u53d6\u8fd0\u7b97\u7ed3\u679c\n\nwhere\u67e5\u8be2\u6761\u4ef6\uff1a\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u5728select\u51fd\u6570\u540e\u94fe\u5f0f\u8c03\u7528where\u51fd\u6570\u8fdb\u884c\u6761\u4ef6\u9650\n    one_time =datetime.datetime.now() - datetime.timedelta(hours=10)\n    ress = Meter1.select().where(Meter1.ts > one_time).all()\n    #\u9650\u5b9a\u6761\u4ef6\u53ef\u4ee5\u4f7f\u7528 > < == >= <= != and or ! \u7b49\u3002\u5b57\u7b26\u7c7b\u578b\u7684\u5b57\u6bb5\u53ef\u4ee5\u4f7f\u7528 % \u4f5c\u4e3a\u6a21\u7cca\u67e5\u8be2\uff08\u76f8\u5f53\u4e8elike\uff09\n    # \u903b\u8f91\u64cd\u4f5c\u7b26\u53f7 |: \u6216 &\uff1a\u4e0e ~\uff1a\u975e\u3002\uff08\u6ce8\u610f\uff1a\u505a\u903b\u8f91\u64cd\u4f5c\u7b26\u53f7\u7684\u8868\u8fbe\u5f0f\u9700\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff09\n    ress = Meter1.select().where((Meter1.cur > 0) | (Meter1.desc % 'g%')).all()\n    #where\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4efb\u610f\u591a\u53c2\u6570\uff0c\u6bcf\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u9650\u5b9a\u6761\u4ef6\uff0c\u53c2\u6570\u6761\u4ef6\u4e4b\u95f4\u4e3a\"\u4e0e\"\u7684\u5173\u7cfb\u3002\n    ress = Meter1.select().where(Meter1.cur > 0, Meter1.ts > one_time, Meter1.desc % '%1').all()\n\n\u5206\u9875\u4e0elimit\uff1a\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u5728select\u51fd\u6570\u540e\u94fe\u5f0f\u8c03\u7528paginate\u51fd\u6570\u8fdb\u884c\u5206\u9875\u64cd\u4f5c\uff0c\u4ee5\u4e0b\u4f8b\u5b50\u4e3a\u53d6\u7b2c6\u9875 \u6bcf\u98755\u6761\u6570\u636e\u3002\n    ress_1 = Meter1.select().paginate(6,page_size=5).all()\n    ress_2 = Meter1.select().paginate(6).all() #\u9ed8\u8ba4page_size\u4e3a20\n    #\u53ef\u4ee5\u5728select\u51fd\u6570\u540e\u94fe\u5f0f\u8c03\u7528limit\u51fd\u6570\u548coffset\u51fd\u6570\u6761\u6570\u9650\u5236\u548c\u5b9a\u4f4d\u64cd\u4f5c\u3002\n    ress_3 = Meter1.select().limit(2).offset(5).all()\n    ress_4 = Meter1.select().limit(2).all()\n\n\u6392\u5e8f\uff08\u76ee\u524dtdengine\u53ea\u652f\u6301\u4e3b\u952e\u6392\u5e8f\uff09\uff1a\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u5728select\u51fd\u6570\u540e\u94fe\u5f0f\u8c03\u7528desc\u6216\u8005asc\u51fd\u6570\u8fdb\u884c\u65f6\u95f4\u8f74\u7684\u6b63\u5e8f\u6216\u8005\u5012\u5e8f\u67e5\u8be2\n    res = Meter1.select().desc().one()\n    #\u5b9a\u4e49\u6a21\u578b\u7c7b\u7684\u65f6\u5019\u5b9a\u4e49\u9ed8\u8ba4\u6392\u5e8f\u65b9\u6cd5\n    class Meter1(Model):\n        cur = FloatField(db_column='c1')\n        curInt = IntegerField(db_column='c2')\n        curDouble = DoubleField(db_column='c3')\n        desc = BinaryField(db_column='des')\n        dd = PrimaryKeyField().desc() #\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e3b\u952e\u7684\u65f6\u5019\u8c03\u7528field\u7684desc\u6216asc\u65b9\u6cd5\u5b9a\u4e49\u9ed8\u8ba4\u6392\u5e8f\n        class Meta:\n            # order_by= ['-dd'] #\u4e5f\u53ef\u4ee5\u5728\u5143\u6570\u636e\u7c7b\u4e2d\u5b9a\u4e49\u2018-dd\u2019\u4ee3\u8868\u5012\u5e8f\u2018dd\u2019 \u4ee3\u8868\u6b63\u5e8f\n            database = db\n\n\u53bb\u91cd \uff1a\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u5728select\u51fd\u6570\u540e\u94fe\u5f0f\u8c03\u7528distinct\u51fd\u6570\u5bf9\u8fd4\u56de\u7684\u6570\u636e\u5217\u8fdb\u884c\u53bb\u91cd\u590d\u64cd\u4f5c\n    res = Meter1.select().distinct().all()\n\n\u805a\u5408\u51fd\u6570\uff1a\n\n.. code-block:: python\n\n    #count\n    count = Meter1.select().count() #\u7edf\u8ba1\u884c\u6570\n    print(count) # \u7ed3\u679c\uff1a 100\n    count = Meter1.select().count(Meter1.desc) #\u7edf\u8ba1\u6307\u5b9a\u5217\u975e\u7a7a\u884c\u6570\n    print(count) # \u7ed3\u679c\uff1a 90\n    #avg\uff08sum,stddev,min,max,first,last,last_row,spread\u4f7f\u7528\u65b9\u6cd5\u4e0eavg\u76f8\u540c\uff09\n    avg1 = Meter1.select().avg(Meter1.cur,Meter1.curDouble.alias('aa')) #\u53ef\u4ee5\u540c\u65f6\u83b7\u53d6\u591a\u5217\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\n    print(avg1.get(Meter1.cur.avg()),avg1.aa) #\u6253\u5370\u7edf\u8ba1\u7ed3\u679c\n    #twa \u5fc5\u987b\u914d\u5408where\u51fd\u6570\uff0c\u4e14\u5fc5\u987b\u9009\u62e9\u65f6\u95f4\u6bb5\n    twa1 = Meter1.select().where(Meter1.ts > datetime.datetime(2020, 11, 19, 15, 9, 12, 946118),Meter1.ts < datetime.datetime.now()).twa(Meter1.cur,Meter1.curDouble.alias('aa'))\n    print(twa1.get(Meter1.cur.twa()),avg1.aa) #\u6253\u5370\u7edf\u8ba1\u7ed3\u679c\n\n    #diff\n    diffs = Meter1.select().diff(Meter1.curInt.alias('aa')) #diff\u76ee\u524d\u53ea\u53ef\u4ee5\u805a\u5408\u4e00\u4e2a\u5c5e\u6027\u3002\n    for diff1 in diffs:\n        print(diff1.aa,diff1.ts) # \u65f6\u95f4\u70b9\u6570\u636e\u540c\u65f6\u8fd4\u56de\n\n    #top(bottom\u51fd\u6570\u4f7f\u7528\u65b9\u5f0f\u76f8\u540c)\n    tops = Meter1.select().top(Meter1.cur,3,alias='aa') # top\u51fd\u6570\u9700\u8981\u63d0\u4f9b\u8981\u7edf\u8ba1\u7684\u5c5e\u6027\uff0c\u884c\u6570\uff0c\u4ee5\u53ca\u522b\u540d\n    for top1 in tops:\n        print(top1.aa,top1.ts) # \u65f6\u95f4\u70b9\u6570\u636e\u540c\u65f6\u8fd4\u56de\n    tops = Meter1.select().top(Meter1.cur,3) # \u53ef\u4ee5\u4e0d\u6307\u5b9a\u522b\u540d\n    for top1 in tops:\n        print(top1.get(Meter1.cur.top(3))) #\u4e0d\u6307\u5b9a\u522b\u540d\uff0c\u9700\u7528\u4f7f\u7528get\u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\n\n    #percentile (apercentile\u51fd\u6570\u4f7f\u7528\u65b9\u5f0f\u76f8\u540c) \n    percentile1 = Meter1.select().percentile((Meter1.cur,1,'aa'),(Meter1.curDouble,2)) #\u6bcf\u4e2a\u5c5e\u6027\u53c2\u6570\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff08\u6570\u7ec4\uff09\uff0c\u5206\u522b\u5b9a\u4e49\u8981\u7edf\u8ba1\u7684\u5c5e\u6027\uff0cP\u503c\uff08P\u503c\u53d6\u503c\u8303\u56f40\u2264P\u2264100\uff09\uff0c\u53ef\u9009\u522b\u540d\u3002\n    print(percentile1.aa)\n    print(percentile1.get(Meter1.curDouble.percentile(2)))#\u4e0d\u6307\u5b9a\u522b\u540d\uff0c\u9700\u7528\u4f7f\u7528get\u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\n\n    #leastsquares\n    leastsquares1 = Meter1.select().leastsquares((Meter1.cur,1,1,'aa'),(Meter1.curDouble,2,2)) #\u6bcf\u4e2a\u5c5e\u6027\u53c2\u6570\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff08\u6570\u7ec4\uff09\uff0c\u5206\u522b\u5b9a\u4e49\u8981\u7edf\u8ba1\u7684\u5c5e\u6027\uff0cstart_val(\u81ea\u53d8\u91cf\u521d\u59cb\u503c)\uff0cstep_val(\u81ea\u53d8\u91cf\u7684\u6b65\u957f\u503c)\uff0c\u53ef\u9009\u522b\u540d\u3002\n    print(leastsquares1.aa) # \u7ed3\u679c\uff1a {slop:-0.001595, intercept:0.212111}\n    print(leastsquares1.get(Meter1.curDouble.leastsquares(2,2))) #\u4e0d\u6307\u5b9a\u522b\u540d\uff0c\u9700\u7528\u4f7f\u7528get\u65b9\u6cd5\u83b7\u53d6\u5c5e\u6027\n\ngroup_by\u5206\u7ec4\u67e5\u8be2\uff1a\n\n.. code-block:: python\n\n    # \u53ef\u4ee5\u5728\u94fe\u5f0f\u8c03\u7528\u4e2d\u52a0\u5165group_by\u51fd\u6570\u6307\u5b9a\u8981\u5206\u7ec4\u7684\u5b57\u6bb5\u3002\u7136\u540e\u5728select\u51fd\u6570\u4e2d\u6307\u5b9a\u8981\u5206\u7ec4\u7edf\u8ba1\u7684\u805a\u5408\u51fd\u6570\uff08\u652f\u6301\u7684\u805a\u5408\u51fd\u6570\u6709\uff1acount\u3001avg\u3001sum \u3001stddev\u3001leastsquares\u3001percentile\u3001min\u3001max\u3001first\u3001last\uff09\n    groups= Meter1.select(Meter1.desc,Meter1.curInt.avg().alias('intavg'),Meter1.cur.count().alias('curcount')).group_by(Meter1.desc).all()\n    for group in groups:\n        print(group.desc)\n        if group.desc == 'g1':\n            # assert group.get(Meter1.curInt.count()) == 10\n            assert group.intavg == 5.5\n            assert group.curcount == 10\n        if group.desc == 'g2':\n            assert group.intavg == 10.5\n            assert group.curcount == 20\n\n\u65f6\u95f4\u7ef4\u5ea6\u805a\u5408interval:\n\n.. code-block:: python\n\n    # \u53ef\u4ee5\u4f7f\u7528interval\u51fd\u6570\u8c03\u7528TDengine\u65f6\u95f4\u7eac\u5ea6\u805a\u5408\u529f\u80fd,\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b \u65f6\u95f4\u95f4\u9694\u4e0eoffset\u53c2\u6570\u53c2\u8003TDengine\u6587\u6863\uff08s:\u79d2\uff0cm:\u5206\u949f\uff0ch:\u5c0f\u65f6\uff09\u3002fill\u53c2\u6570\u53ef\u9009\u5b57\u7b26\u4e32(NONE | PREV | NULL | LINEAR)\u6216\u8005\u4efb\u610f\u6570\u503c,\u4f8b\u5982\uff1afill=1.2\u5c06\u4f1a\u4ee5\u56fa\u5b9a\u503c\u586b\u5145\u3002\n    results= Meter1.select(Meter1.cur.avg().alias('aa'),Meter1.cur.first().alias('bb')).where(Meter1.ts > (datetime.datetime.now()-datetime.timedelta(days=1))).interval('10s',fill='PREV',offset='1m').all()\n    for result in results:\n        print(result.aa,result.bb)\n\njoin\u67e5\u8be2\uff1a\n\n\u76ee\u524d\u5e76\u652f\u6301\u591a\u8868join\u67e5\u8be2\uff0c\u9700\u8981\u591a\u8868\u67e5\u8be2\u7684\u60c5\u51b5\u8bf7\u4f7f\u7528raw_sql\u51fd\u6570\uff0c\u6267\u884c\u539f\u59cbsql\u8bed\u53e5\u3002\u4ee5\u540e\u7684\u7248\u672c\u4f1a\u8865\u5145\u6b64\u529f\u80fd\u3002\n\n\n\u8d85\u7ea7\u8868\u5b9a\u4e49\uff1a\n\n.. code-block:: python\n\n    # \u8d85\u7ea7\u8868\u6a21\u578b\u7c7b\u7ee7\u627f\u81eaSuperModel\u7c7b\n    class Meters(SuperModel):\n        cur = FloatField(db_column='c1')\n        curInt = IntegerField(db_column='c2')\n        curDouble = DoubleField(db_column='c3')\n        desc = BinaryField(db_column='des')\n        class Meta:\n            database = db\n            db_table = 'meters'\n            # Meta\u7c7b\u4e2d\u5b9a\u4e49\u7684Field\uff0c\u4e3a\u8d85\u7ea7\u8868\u7684\u6807\u7b7e\n            location = BinaryField(max_length=30)\n            groupid = IntegerField(db_column='gid')\n\n\u8d85\u7ea7\u8868\u7684\u5efa\u8868\u3001\u5220\u8868\u3001\u68c0\u67e5\u8868\u662f\u5426\u5b58\u5728\uff1a\n\n.. code-block:: python\n\n    Meters.create_table(safe=True) #\u5efa\u8868 safe\uff1a\u5982\u679c\u8868\u5b58\u5728\uff0c\u5219\u8df3\u8fc7\u5efa\u8868\u6307\u4ee4\u3002\u547d\u4ee4\u8fd0\u884c\u6210\u529f\u653e\u56deTrue,\u5931\u8d25raise\u9519\u8bef\n    # db.create_table(Meters,safe=True) #\u901a\u8fc7\u6570\u636e\u5e93\u5bf9\u8c61\u5efa\u8868\uff0c\u529f\u80fd\u540c\u4e0a\n    Meters.drop_table(safe=True) #\u5220\u8868 safe\uff1a\u5982\u679c\u8868\u4e0d\u5b58\u5728\uff0c\u5219\u8df3\u8fc7\u5220\u8868\u6307\u4ee4\u3002\u547d\u4ee4\u8fd0\u884c\u6210\u529f\u653e\u56deTrue,\u5931\u8d25raise\u9519\u8bef\n    # db.drop_table(Meters,safe=True) #\u901a\u8fc7\u6570\u636e\u5e93\u5bf9\u8c61\u5220\u8868\uff0c\u529f\u80fd\u540c\u4e0a\n    Meters.supertable_exists() #\u67e5\u770b\u8868\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u8fd4\u56deTrue,\u4e0d\u5b58\u5728\u8fd4\u56de\uff1aFalse\n\n\u8d85\u7ea7\u8868\u52a8\u6001\u5efa\u8868\uff1a\n\n\u8d85\u7ea7\u8868\u9664\u4e86\u4f7f\u7528\u5b9a\u4e49\u6a21\u578b\u7c7b\u7684\u65b9\u5f0f\u5efa\u8868\u5916\uff0c\u4e5f\u63d0\u4f9b\u4e86\u52a8\u6001\u5b9a\u4e49\u5b57\u6bb5\u5efa\u8868\u7684\u529f\u80fd\u3002\n\n.. code-block:: python\n\n    #\u53ef\u4ee5\u4f7f\u7528SuperModel\u7c7b\u7684\u7c7b\u65b9\u6cd5dynamic_create_table\u65b9\u6cd5\u52a8\u6001\u5efa\u8868\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8868\u540d\uff0c\u7136\u540e\u9700\u8981\u6307\u5b9a\u6570\u636e\u5e93\uff0c\u4e0e\u662f\u5426\u5b89\u5168\u5efa\u8868\n    # \u9700\u8981\u989d\u5916\u63d0\u4f9btags\u53c2\u6570\uff0c\u53c2\u6570\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178(\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\u4f8b)\uff0c\u8bbe\u7f6e\u8d85\u7ea7\u8868\u6240\u6709\u7684\u6807\u7b7e\u3002\n    # \u5173\u952e\u8bcd\u53c2\u6570\u53ef\u4ee5\u4efb\u610f\u591a\u4e2a\uff0c\u6307\u5b9a\u8868\u4e2d\u7684\u5b57\u6bb5\u3002\n    Meter_dynamic= SuperModel.dynamic_create_table('meterSD',database=db,safe=True,tags={'gid':IntegerField(db_column='tag1')},test1 = FloatField(db_column='t1'),test2 = IntegerField(db_column='t2'))\n    # \u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\u4e3aSuperModel\u7c7b\u5bf9\u8c61\u3002\u4f7f\u7528\u65b9\u6cd5\u4e0e\u9759\u6001\u7ee7\u627f\u7684\u6a21\u578b\u7c7b\u76f8\u540c\u3002\n    Meter_dynamic.supertable_exists()\n    Meter_dynamic.drop_table()\n\n\u4ece\u8868\u540d\u5efa\u7acb\u5bf9\u5e94\u7684supermodel\u7c7b\uff1a\n\n\u6570\u636e\u5e93\u4e2d\u5df2\u6709\u7684\u6570\u636e\u5e93\u8d85\u7ea7\u8868\uff0c\u53ef\u4ee5\u901a\u8fc7\u5df2\u77e5\u7684\u8868\u540d\u5efa\u7acb\u5bf9\u5e94\u7684supermodel\u7c7b\u3002\n\n.. code-block:: python\n\n    sTable = SuperModel.supermodel_from_table('rule_10',db) # rule_10\u4e3a\u6570\u636e\u8868\u7684\u8868\u540d\n    res = sTable.select().one() # \u4ece\u8868\u540d\u65b0\u5efa\u7684\u7c7b\u548c\u9759\u6001\u5efa\u7acb\u7684\u7c7b\uff0c\u4f7f\u7528\u65b9\u6cd5\u5b8c\u5168\u4e00\u81f4\n\n\u4ece\u8d85\u7ea7\u8868\u5efa\u7acb\u5b50\u8868\uff1a\n\n.. code-block:: python\n\n    SonTable_d3 = Meters.create_son_table('d3',location='beijing',groupid=3) #\u751f\u6210\u5b57\u8868\u6a21\u578b\u7c7b\u7684\u540c\u65f6\uff0c\u81ea\u52a8\u5728\u6570\u636e\u5e93\u4e2d\u5efa\u8868\u3002\n\n    SonTable_d3.table_exists() # SonTable_d3\u7684\u4f7f\u7528\u65b9\u6cd5\u548c\u7ee7\u627f\u81eaModle\u7c7b\u7684\u6a21\u578b\u7c7b\u4e00\u6837\u3002\u53ef\u4ee5\u8fdb\u884c\u63d2\u5165\u4e0e\u67e5\u8be2\u64cd\u4f5c\n    # m = SonTable_d3(cur = 65.8,curInt=10,curDouble=1.1,desc='g1',ts = datetime.datetime.now())\n    # m.save()\n\n\u65b0\u589e\u6807\u7b7e\uff1a\n\n.. code-block:: python\n\n    # \u4f7f\u7528add_tags\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7ed9\u8d85\u7ea7\u8868\u65b0\u5efa\u591a\u4e2a\u6807\u7b7e\u3002\u6bcf\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f\u4e00\u4e2aField\u5bf9\u8c61\uff08\u5fc5\u987b\u6307\u5b9adb_column\u5c5e\u6027\uff09\n    Meters.add_tags(IntegerField(db_column='add_tag_1'),IntegerField(db_column='add_tag_4'),BinaryField(max_length=30,db_column='add_tag_5'))\n\n\u5220\u9664\u6807\u7b7e\uff1a\n\n.. code-block:: python\n\n    # \u4f7f\u7528drop_tag\u65b9\u6cd5\u53ef\u4ee5\u5220\u9664\u8d85\u7ea7\u8868\u7684\u6807\u7b7e\uff0c\u53c2\u6570\u540d\u4e3a\u6807\u7b7e\u540d\uff0c\u4e00\u6b21\u53ea\u80fd\u5220\u9664\u4e00\u4e2a\u6807\u7b7e\n    Meters.drop_tag('add_tag_2')\n\n\u4fee\u6539\u6807\u7b7e\u540d\uff1a\n\n.. code-block:: python\n\n    # \u4f7f\u7528change_tag_name\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539\u8d85\u7ea7\u8868\u7684\u6807\u7b7e\u540d\uff0c\u53c2\u6570\u540d\u4e3a\u8981\u4fee\u6539\u7684\u6807\u7b7e\u540d\uff0c\u548c\u65b0\u7684\u6807\u7b7e\u540d\u3002\uff08\u6ce8\u610f\uff1a\u6b64\u65b9\u6cd5\u53ea\u4fee\u6539\u5bf9\u5e94\u8d85\u7ea7\u8868\u7684\u6807\u7b7e\u540d\uff0c\u5e76\u4e0d\u4fee\u6539\u7c7b\u7684\u5c5e\u6027\u540d\uff09\n    Meters.change_tag_name('add_tag_1','add_tag_2')\n\n\n\u4fee\u6539\u5b50\u8868\u6807\u7b7e\u503c\uff1a\n\n.. code-block:: python\n\n    TableT = Meters.create_son_table('d3_insert',location='beijing',gid=3)\n    # \u5b50\u8868\u53ef\u4ee5\u901a\u8fc7change_tag_value\u65b9\u6cd5\u4fee\u6539\u81ea\u5df1\u7684\u6807\u7b7e\u503c\u3002\n    TableT.change_tag_value(location='tianjin',gid = 6)\n\n\n\n\u5173\u4e8edebug\u4fe1\u606f\u6253\u5370\uff1a\n\n\u5982\u9700\u67e5\u770bcrown\u8c03\u7528tdengine\u5f15\u64ce\u65f6\u6267\u884c\u7684sql\u8bed\u53e5\u548c\u8fd4\u56de\u7684\u539f\u59cb\u6570\u636e\u3002\u53ea\u9700\u8981\u914d\u7f6ecrown\u6a21\u5757\u7684logger\u8bb0\u5f55\u5668\u7684\u65e5\u5fd7\u8f93\u51fa\u7ea7\u522b\u4e3adebug\u5373\u53ef\u3002\n\n.. code-block:: python\n\n    import logging\n    from crown import logger\n\n    logger.setLevel(logging.DEBUG) #\u914d\u7f6elogger\u5bf9\u8c61\uff0c\u5373\u53ef\u8f93\u51fa\u6267\u884cdebug\u4fe1\u606f",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/machine-w/crown",
            "keywords": "orm,taos,TDengine,TSDB,Time Series Database,connector,python",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "crown",
            "package_url": "https://pypi.org/project/crown/",
            "platform": "",
            "project_url": "https://pypi.org/project/crown/",
            "project_urls": {
                "Homepage": "https://github.com/machine-w/crown"
            },
            "release_url": "https://pypi.org/project/crown/0.1.7/",
            "requires_dist": null,
            "requires_python": ">=3",
            "summary": "crown is a simple and small ORM for Time Series Database (TSDB) tdengine(taos), making it easy to learn and intuitive to use.",
            "version": "0.1.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13030047,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e5196889f11718026397d92fe1153a1",
                    "sha256": "a13c86c093f7976d80bd9b388063fa00ed0f8d76721fd57b8e32bb2c4a277ba0"
                },
                "downloads": -1,
                "filename": "crown-0.1.7.tar.gz",
                "has_sig": false,
                "md5_digest": "4e5196889f11718026397d92fe1153a1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3",
                "size": 29667,
                "upload_time": "2022-02-28T03:37:41",
                "upload_time_iso_8601": "2022-02-28T03:37:41.069730Z",
                "url": "https://files.pythonhosted.org/packages/9d/43/3cb3fe61dcba1094476485bb2ffe09ddbce8898798ce10d3ab8d49d4fe9a/crown-0.1.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}