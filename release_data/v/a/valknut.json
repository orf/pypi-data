{
    "0.0.2": {
        "info": {
            "author": "Meyer Daniel",
            "author_email": "meyer.daniel67@protonmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "## Valknut 0.1.001  - WSGI Local Server, GSS & SQLite3 manager\n  D\u00e9velopp\u00e9 pour Python3 par Meyer Daniel, Juillet 2020\n  [voir mon d\u00e9p\u00f4t Github](https://github.com/daniel67-py)\n  pour m'\u00e9crire : [meyer.daniel67@protonmail.com]\n\n------\n#### Sommaire.\n+ Pr\u00e9sentation de la classe Valknut_sqlite et utilit\u00e9.\n+ Fonctions de la classe Valknut_sqlite.\n+ Exemple d'utilisation de Valknut_sqlite.\n+ Pr\u00e9sentation de la classe Valknut_gss et utilit\u00e9.\n+ Fonction principale et syntaxes d'utilisation.\n+ Fonctions de la classe Valknut_gss\n+ Pr\u00e9sentation de la classe Valknut_Server et utilit\u00e9.\n+ Fonctions de la classe Valknut_Server.\n+ Exemple d'utilisation de Valknut_Server.\n\n------\n#### Pr\u00e9sentation de la classe Valknut_sqlite et utilit\u00e9.\n  Le module Valknut pour Python 3 est un framework permettant d'utiliser une base de donn\u00e9es de type SQLite3 facilement en \u00e9conomisant des lignes de codes et donc de gagner du temps en int\u00e9grant plus facilement ce type de bases dans vos projets et programmes en Python. Il utilise le moteur de template Jinja2 pour les classe Valknut_gss et Valknut_Server mais pour le reste, il est autonome et n'utilise que des librairies int\u00e9gr\u00e9es nativement dans le langage. \n  Son appel depuis un script Python se fait simplement, en utilisant 'from *x* import ...':\n\n    >>> from valknut_sqlite import *\n\n  Il est possible \u00e9galement de l'utiliser en l'ex\u00e9cutant directement tel un programme.\n\n  Au cas o\u00f9 vous n'avez pas encore Jinja2 int\u00e9gr\u00e9 dans votre Python, installez le avec la commande suivante :\n\n    pour Linux :\n        pip install jinja2\n    pour Windows :\n        python -m pip install jinja2\n\n  Il est ensuite possible de cr\u00e9er un objet Valknut_sqlite et ainsi de manipuler la base de donn\u00e9es en faisant appel aux fonctions int\u00e9gr\u00e9es du module dans sa classe. J'en profite pour pr\u00e9ciser que sur une base de donn\u00e9es SQLite3, certaines fonctionnalit\u00e9s ne sont pas disponible comme sur une table PostGreSQL ou MySQL. Par exemple: la classe de mon module embarque une fonction permettant d'ajouter une colonne dans une table d\u00e9j\u00e0 existante tout en se servant d'une requ\u00eate SQLite, mais aucune fonction permettant de supprimer une colonne. Simplement car une telle op\u00e9ration est impossible \u00e0 faire sur une table SQLite3 avec une simple requ\u00eate SQL. Cependant, Valknut contourne le probl\u00e8me en copiant une table existante dans une nouvelle table, tout en s\u00e9lectionnant les colonnes voulues, et supprime la table d'origine.\n\n------\n#### Fonctions de la classe Valknut_sqlite.\n\n##### Valknut_sqlite_New(database)\n  Cette fonction permet d'initier une nouvelle base de donn\u00e9es en cr\u00e9ant un nouveau fichier dont le nom est pass\u00e9 par l'argument *database* . Une fois la base cr\u00e9\u00e9e, la fonction va retourner un message signalant \u00e0 l'utilisateur que le fichier disponible.\n\n##### Valknut_sqlite(database)\n  Cette fonction permet d'initier un objet Valknut_sqlite en faisant appel au fichier pass\u00e9 par l'argument *database* . Il signale \u00e0 l'utilisateur si la connection \u00e0 la base de donn\u00e9es est op\u00e9rationnelle ou non. Elle contient aussi deux variables qui influencent les retours que va donner le module :\n\n    .debug_sqlite_instruction = True / False\n\n  True si vous souhaitez que Valknut affiche la requ\u00eate SQLite utilis\u00e9e lors de vos op\u00e9rations, agit comme un mode debug en cas de difficult\u00e9s \u00e0 op\u00e9rer sur la base de donn\u00e9es elle m\u00eame.\n\n    .displaying_line = True / False\n\n  True si vous souhaitez que Valknut affiche (print) les r\u00e9sultats des fonctions de recherches, False si vous souhaitez qu'il les retournent (return).\n\n##### .new_table(table, columns)\n  Permet de cr\u00e9er une nouvelle table sans incr\u00e9mentation automatique dans la base de donn\u00e9es. L'argument *table* permet de passer le nom voulu pour la table. L'argument *columns* est un argument multiple permettant de d\u00e9finir les noms des colonnes. Syntaxe d'exemple:\n\n    .new_table('amis', 'nom', 'prenom', 'adresse', 'code_postal', 'ville', 'telephone')\n\n  Ceci va g\u00e9n\u00e9rer une table 'amis' contenant les colonnes qui suivent dans l'ordre : nom, prenom, adresse, code postal, ville, telephone.\n\n##### .new_increased_table(table, columns)\n  Permet de cr\u00e9er une nouvelle table avec une incr\u00e9mentation automatique dans la base de donn\u00e9es. L'argument *table* permet de passer le nom voulu pour la table. L'argument *columns* est un argument multiple permettant de d\u00e9finir les noms des colonnes. En plus sera rajout\u00e9 une colonne 'id' qui s'auto-incr\u00e9mentera de 1 pour chaque nouvelle entr\u00e9e ajout\u00e9e. Syntaxe d'exemple:\n\n    .new_increased_table('amis', 'nom', 'prenom', 'adresse', 'code_postal', 'ville', 'telephone')\n\n  Ceci va g\u00e9n\u00e9rer une table 'amis' contenant les colonnes qui suivent dans l'ordre : id, nom, prenom, adresse, code postal, ville, telephone.\n\n##### .copy_table(source_table, destination_table)\n  Permet de copier une table existante vers une nouvelle table de destination. L'argument *source_table* permet de passer le nom de la table \u00e0 copier, l'argument *destination_table* permet de donner le nom de la table \u00e0 cr\u00e9er et \u00e0 remplir avec la table 'source'.\n\n##### .copy_control_table(source_table, destination_table, columns)\n  Permet de copier une table existante vers une nouvelle table de destination en ne tenant compte que de certaines colonnes. L'argument *source_table* permet de passer le nom de la table \u00e0 copier, l'argument *destination_table* permet de donner le nom de la table \u00e0 cr\u00e9er et \u00e0 remplir avec les colonnes pass\u00e9es via l'argument multiple *columns*. Supposons une table 't1' contenant les colonnes 'A', 'B' et 'C', que nous souhaitons copier dans une table 't2' mais en ne tenant compte que des colonnes 'A' et 'C', ceci donnerait :\n\n    .copy_control_table('t1', 't2', 'A', 'C')\n\n##### .redo_table(source_table, columns)\n  Permet de retoucher une table en supprimant une ou plusieurs colonnes. Comme je l'expliquais en introduction, SQLite ne permet pas de faire certaines choses comme supprimer une ou plusieurs colonnes. Cette fonction contourne ce manque en copiant la table \u00e0 modifier dans une table temporaire nomm\u00e9 'valknut_temporary_table' avec les colonnes que l'on souhaite garder. Elle supprime ensuite la table d'origine, puis en cr\u00e9\u00e9e une nouvelle portant le m\u00eame nom qu'elle va remplir avec la table temporaire, avant de supprimer cette derni\u00e8re. L'argument *source_table* permet de passer le nom de la table \u00e0 retoucher, l'argument multiple *columns* permet de d\u00e9finir les colonnes que l'on souhaite conserver. Supposons une table 't1' contenant les colonnes 'A', 'B' et 'C', que nous souhaitons retoucher pour ne garder que les colonnes 'A' et 'B', ceci donnerait :\n\n    .redo_table('t1', 'A', 'B')\n\n  Notez que cette fonction se sert des fonctions *delete_table* et *copy_table* du module pour arriver \u00e0 ses fins.\n\n##### .add_values(table, elements)\n  Permet d'ajouter une entr\u00e9e dans une table non incr\u00e9mentale. L'argument *table* permet de passer le nom de la table dans laquelle les \u00e9l\u00e9ments doivent \u00eatre ajout\u00e9s. L'argument *elements* est un argument multiple permettant de passer les donn\u00e9es \u00e0 inscrire dans la table. Syntaxe d'exemple:\n\n    .add_values('amis', 'dupont', 'maurice', '2 rue des champs', '67000', 'strasbourg', '0609080706')\n\n##### .add_increased_values(table, elements)\n  Permet d'ajouter une entr\u00e9e dans une table auto-incr\u00e9mentale. L'argument *table* permet de passer le nom de la table dans laquelle les \u00e9l\u00e9ments doivent \u00eatre ajout\u00e9s. L'argument *elements* est un argument multiple permettant de passer les donn\u00e9es \u00e0 inscrire dans la table. La colonne 'id' sera renseign\u00e9e automatiquement. Syntaxe d'exemple:\n\n    .add_increased_values('amis', 'dupont', 'maurice', '2 rue des champs', '67000', 'strasbourg', '0609080706')\n\n##### .modification_values(table, column_to_modify, new_value, reference_column, reference_value)\n  Permet de modifier une entr\u00e9e dans une table en faisant appel \u00e0 une valeur de r\u00e9f\u00e9rence. L'argument *table* permet de passer le nom de la table dans laquelle l'entr\u00e9e \u00e0 modifier se trouve. L'argument *column_to_modify* permet de passer la colonne de la valeur \u00e0 modifier, *new_value* permet de passer la nouvelle valeur \u00e0 rentrer dans la colonne. L'argument *reference_column* permet de passer la colonne qui sert de r\u00e9f\u00e9rence d'identification de l'entr\u00e9e, *reference_value* permet de d\u00e9finir la valeur de la colonne de r\u00e9f\u00e9rence d'identification de l'entr\u00e9e. Syntaxe d'exemple:\n\n    .modification_values('amis', 'adresse', '4 rue des prairies', 'nom', 'dupont')\n\n  Ceci va modifier dans la table 'amis', la valeur de 'adresse' par '4 rue des prairies', l\u00e0 o\u00f9 la colonne 'nom' vaut 'dupont'. Je pr\u00e9cise que dans le cas d'une table auto-incr\u00e9ment\u00e9e, il est possible d'utiliser la colonne 'id' pour r\u00e9f\u00e9rence, en pr\u00e9cisant l'index de l'entr\u00e9e que l'on souhaite modifier.\n\n##### .delete_table(table)\n  Permet de supprimer une table ainsi que son contenu. L'argument *table* permet de passer le nom de la table que l'on souhaite supprimer.\n\n##### .purge_table(table)\n  Permet de supprimer le contenu d'une table sans supprimer la table elle-m\u00eame, ni ses colonnes. Dans le cas d'une table auto-incr\u00e9ment\u00e9e, la num\u00e9rotation recommencera \u00e0 z\u00e9ro. L'argument *table* permet de passer le nom de la table que l'on souhaite purger.\n\n##### .add_column(table, column)\n  Permet de rajouter une nouvelle colonne dans une table d\u00e9j\u00e0 existante. L'argument *table* permet de passer le nom de la table o\u00f9 l'on souhaite rajouter la colonne, l'argument *column* permet de d\u00e9finir le nom de la colonne \u00e0 rajouter.\n\n##### .delete_entry(table, column, value)\n  Permet de supprimer une entr\u00e9e dans une table. L'argument *table* permet de passer le nom de la table o\u00f9 se trouve l'entr\u00e9e \u00e0 supprimer, l'argument *column* permet de d\u00e9finir le nom de la colonne de r\u00e9f\u00e9rence pour indentifier l'entr\u00e9e \u00e0 supprimer, l'argument *value* d\u00e9finit la valeur contenu dans la colonne. Une fois identifi\u00e9, l'entr\u00e9e enti\u00e8re est supprim\u00e9e, et pas juste la valeur de la colonne. Attention cependant, si plusieurs entr\u00e9es comprennent la m\u00eame valeur pour cette colonne, elles seront toutes supprim\u00e9es.\n\n##### .search_seems_like_value(table, column, value)\n  Permet de rechercher une ou plusieurs entr\u00e9es correspondant aux crit\u00e8res de recherche et contenant le caract\u00e8re ou la suite de caract\u00e8res sp\u00e9cifi\u00e9. L'argument *table* permet de passer le nom de la table dans laquelle effectuer la recherche, l'argument *column* permet de d\u00e9finir la colonne de recherche, et l'argument *value* permet de d\u00e9finir la valeur qui nous int\u00e9resse. Cette fonction r\u00e9agit avec la variable *displaying_line*. Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction 'print' int\u00e9gr\u00e9e \u00e0 Python, si elle vaut False, la fonction retournera le r\u00e9sultat sous la forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .search_start_like_value(table, column, value)\n  Permet de recherche une ou plusieurs entr\u00e9es correspondant aux crit\u00e8res de recherche et commen\u00e7ant par le caract\u00e8re ou la suite de caract\u00e8res sp\u00e9cifi\u00e9. L'argument *table* permet de passer le nom de la table dans laquelle effectuer la recherche, l'argument *column* permet de d\u00e9finir la colonne de recherche, et l'argument *value* permet de d\u00e9finir la valeur qui nous int\u00e9resse. Cette fonction r\u00e9agit avec la variable *displaying_line*. Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction 'print' int\u00e9gr\u00e9e \u00e0 Python, si elle vaut False, la fonction retournera le r\u00e9sultat sous la forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .search_end_like_value(table, column, value)\n  Permet de recherche une ou plusieurs entr\u00e9es correspondant aux crit\u00e8res de recherche et finissant par le caract\u00e8re ou la suite de caract\u00e8res sp\u00e9cifi\u00e9. L'argument *table* permet de passer le nom de la table dans laquelle effectuer la recherche, l'argument *column* permet de d\u00e9finir la colonne de recherche, et l'argument *value* permet de d\u00e9finir la valeur qui nous int\u00e9resse. Cette fonction r\u00e9agit avec la variable *displaying_line*. Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction 'print' int\u00e9gr\u00e9e \u00e0 Python, si elle vaut False, la fonction retournera le r\u00e9sultat sous la forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .search_value(table, column, value)\n  Permet de rechercher une ou plusieurs entr\u00e9es correspondant aux crit\u00e8res de recherche. L'argument *table* permet de passer le nom de la table dans laquelle effectuer la recherche, l'argument *column* permet de d\u00e9finir la colonne de recherche, et l'argument *value* permet de d\u00e9finir la valeur qui nous int\u00e9resse. Cette fonction r\u00e9agit avec la variable *displaying_line* . Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction 'print' int\u00e9gr\u00e9e \u00e0 Python, si elle vaut False, la fonction retournera le r\u00e9sultat sous forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .between_value(table, column, interval_1, interval_2)\n  Permet de recherche une ou plusieurs entr\u00e9es se trouvant entre les limites sp\u00e9cifi\u00e9es. L'argument *table* permet de passer le nom de la table dans laquelle effectuer la recherche, l'argument *column* permet de d\u00e9finir la colonne de recherche, l'argument *interval_1* permet de fixer une limite 'basse', l'argument *interval_2* permet de fixer une limite 'haute'. Cette fonction permet d'extraire un groupe de correspondances. Cette fonction r\u00e9agit avec la variable *displaying_line* . Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction int\u00e9gr\u00e9e 'print', si elle vaut False, la fonction retournera le r\u00e9sultat sous forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .not_between_value(table, column, interval_1, interval_2)\n  Permet de rechercher une ou plusieurs entr\u00e9es se trouvant en dehors des limites sp\u00e9cifi\u00e9es. L'argument *table* permet de passer le nom de la table dans laquelle effectuer la recherche, l'argument *column* permet de d\u00e9finir la colonne de recherche, l'argument *interval_1* permet de fixer une limite 'basse', l'argument *interval_2* permet de fixer une limite 'haute'. Cette fonction permet d'extraire un groupe de correspondances. Cette fonction r\u00e9agit avec la variable *displaying_line* . Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction int\u00e9gr\u00e9e 'print', si elle vaut False, la fonction retournera le r\u00e9sultat sous forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .sort_value(table, sens, column)\n  Permet d'afficher les entr\u00e9es d'une table dans par ordre alphab\u00e9tique ou num\u00e9rique, de plus petit au plus grand ou inversement. L'argument *table* permet de passer le nom de la table dans laquelle effectuer le tri. L'argument *sens* permet de choisir le sens : 0 pour un sens ascendant, 1 pour un sens descendant. Toutes autres valeurs g\u00e9n\u00e8re une erreur. L'argument *column* permet de choisir la colonne de r\u00e9f\u00e9rence \u00e0 utiliser pour effectuer le tri : c'est un argument multiple qui permet de faire un tri sur plusieurs colonnes, dans l'ordre des colonnes sp\u00e9cifi\u00e9es. Cette fonction r\u00e9agit avec la variable *displaying_line* . Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction int\u00e9gr\u00e9e 'print', si elle vaut False, la fonction retournera le r\u00e9sultat sous forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .return_structure()\n  Permet de retourner via une fonction int\u00e9gr\u00e9e 'return' la structure de la base de donn\u00e9es, sous forme de variable de type 'dictionnaire'.\n\n##### .show_all()\n  Permet d'afficher le contenu de la base de donn\u00e9es, table par table, en affichant \u00e9galement le nom des colonnes, le tout sous forme d'arborescence.\n\n##### .show_structure()\n  Permet d'afficher la structure de la base de donn\u00e9es sous forme d'arborescence. Cette fonction se contente de donner le nom des tables et des colonnes.\n\n##### .column_sum(table, column)\n  Permet de faire la somme des valeurs contenues dans une colonne et retourne la valeur sous forme de Int ou Float. L'argument *table* permet de sp\u00e9cifier la table, l'argument *column* permet de sp\u00e9cifier la colonne sur laquelle op\u00e9rer.\n\n##### .column_total(table, column)\n  Permet de faire la somme des valeurs contenues dans une colonne et retourne la valeur sous forme de Float. L'argument *table* permet de sp\u00e9cifier la table, l'argument *column* permet de sp\u00e9cifier la colonne sur laquelle op\u00e9rer.\n\n##### .data_minimal(table, column)\n  Permet de trouver la valeur minimale dans la colonne sp\u00e9cifi\u00e9e. Ceci correspond au nombre le plus faible contenu ou \u00e0 la premi\u00e8re entr\u00e9e par ordre alphab\u00e9tique. L'argument *table* permet de sp\u00e9cifier la table, l'argument *column* permet de sp\u00e9cifier la colonne sur laquelle op\u00e9rer. La fonction retournera la valeur via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .data_maximal(table, column)\n  Permet de trouver la valeur maximale dans la colonne sp\u00e9cifi\u00e9e. Ceci correspond au nombre le plus fort contenu ou \u00e0 la derni\u00e8re entr\u00e9e par ordre alphab\u00e9tique. L'argument *table* permet de sp\u00e9cifier la table, l'argument *column* permet de sp\u00e9cifier la colonne sur laquelle op\u00e9rer. La fonction retournera la valeur via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .data_average(table, column)\n  Retournera exclusivement la valeur num\u00e9rique moyenne d'une colonne. L'argument *table* permet de sp\u00e9cifier la table, l'argument *column* permet de sp\u00e9cifier la colonne sur laquelle op\u00e9rer. La fonction retournera la valeur via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .data_crosscheck(table_1, table_2, column_t1, column_t2)\n  Permet d'afficher uniquement les entr\u00e9es identiques \u00e0 deux tables distinctes. Les arguments *table_1* et *table_2* permettent de passer le nom des tables \u00e0 analyser, l'argument *column_t1* permet de d\u00e9finir la colonne de r\u00e9f\u00e9rence de la table_1, l'argument *column_t2* permet de d\u00e9finir la colonne de r\u00e9f\u00e9rence de la table_2. Cette fonction r\u00e9agit avec la variable *displaying_line* . Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction int\u00e9gr\u00e9e 'print', si elle vaut False, la fonction retournera le r\u00e9sultat sous forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .data_union(table_1, table_2)\n  Permet d'afficher l'int\u00e9gralit\u00e9 de deux tables distinctes, sans r\u00e9p\u00e9ter les doublons. Les arguments *table_1* et *table_2* permettent de d\u00e9finir les deux tables \u00e0 comparer. Cette fonction r\u00e9agit avec la variable *displaying_line* . Si cette derni\u00e8re vaut True, l'affichage se fera via une fonction int\u00e9gr\u00e9e 'print', si elle vaut False, la fonction retournera le r\u00e9sultat sous forme d'it\u00e9rable via une fonction int\u00e9gr\u00e9e 'return'.\n\n##### .edit_structure_txt(nom_fichier_sortie = \"analyse_survival.txt\")\n  Permet d'\u00e9crire la structure d'une base de donn\u00e9es dans un fichier texte. Par d\u00e9faut, le fichier se nommera 'analyse_valknut.txt'. Il est possible cependant de changer le nom du fichier de sortie lors de l'appel de la fonction via l'argument *nom_fichier_sortie* .\n\n##### .edit_contains_csv(table, nom_fichier_sortie = \"analyse_survival.csv\")\n  Permet d'\u00e9crire le contenu d'une table dans un fichier spreadsheet (type excel). Par d\u00e9faut, le fichier se nommera 'analyse_valknut.csv'. Il est possible cependant de changer le nom du fichier de sortie lors de l'appel de la fonction via l'argument *nom_fichier_sortie* .\n\n------\n#### Exemple d'utilisation de Valknut.\n  Apr\u00e8s ces quelques lignes de descriptions des fonctionnalit\u00e9s du module, voici un exemple d'utilisation rapide pour la prise en main. Je vais cr\u00e9er une nouvelle base de donn\u00e9es que je vais nommer 'exemple.db', et y int\u00e9grer deux tables contenant une listes d'amis. Je lance ici le module directement sans l'importer, tel un script, dans l'interpreteur Python.\n\n  Cr\u00e9ation d'une nouvelle base de donn\u00e9es :\n\n    >>> a = Valknut_sqlite_New('exemple.db')\n    ### Valknut - SQLite3 manager ###\n    ...verification if access path to file is ok... True\n    ...verification if path is a valid file... True\n    ...ACCESS DATA OK - NEW DATABASE READY TO OPERATE...\n\n  Acc\u00e8s \u00e0 ma nouvelle base de donn\u00e9es :\n\n    >>> a = Valknut_sqlite('exemple.db')\n    ### Valknut - SQLite3 manager ###\n    ...verification if access path to file is ok... True\n    ...verification if path is a valid file... True\n    ...ACCESS DATAS OK !...\n\n  Je cr\u00e9\u00e9 deux tables, la premi\u00e8re se nommera 'amis_a', la seconde 'amis_b', contenant chacune les :\n\n    >>> a.new_table('amis_a', 'nom', 'prenom', 'age')\n    New table create\n    True\n    >>> a.new_table('amis_b', 'nom', 'prenom', 'age')\n    New table create\n    True\n\n  Maintenant remplissons un peu les deux tables :\n\n    >>> a.add_values('amis_a', 'dupont', 'maurice', '44')\n    True\n    >>> a.add_values('amis_a', 'durant', 'jean-jacques', '32')\n    True\n    >>> a.add_values('amis_a', 'tartenpion', 'didier', '33')\n    True\n    >>> a.add_values('amis_a', 'jeunot', 'alain', '21')\n    True\n    >>> a.add_values('amis_b', 'phong', 'lee', '34')\n    True\n    >>> a.add_values('amis_b', 'sanchez', 'manuella', '29')\n    True\n    >>> a.add_values('amis_b', 'durant', 'jean-jacques', '32')\n    True\n    >>> a.add_values('amis_b', 'tartenpion', 'didier', '33')\n    True\n\n  Regardons le contenu de notre base de donn\u00e9es :\n\n    >>> a.show_all()\n    ...OK... The database contains :\n    exemple.db\n      |\n      + - amis_a\n      |       \\ _ _ _ _ _ ['nom', 'prenom', 'age']\n      |\t\t            \t dupont - maurice - 44 - \n      |\t\t            \t durant - jean-jacques - 32 - \n      |\t            \t\t tartenpion - didier - 33 - \n      |\t\t            \t jeunot - alain - 21 - \n      + - amis_b\n      |       \\ _ _ _ _ _ ['nom', 'prenom', 'age']\n      |\t\t\t             phong - lee - 34 - \n      |\t            \t\t sanchez - manuella - 29 - \n      |\t\t            \t durant - jean-jacques - 32 - \n      |\t\t            \t tartenpion - didier - 33 - \n      | \n      |_ END OF DATAS !\n\n  Ou plus simplement, si je veux connaitre la structure :\n\n    >>> a.show_structure()\n    ...OK... This is database's tree :\n    exemple.db\n      |\n      + - amis_a\n      |       \\ _ _ _ _ _ ['nom', 'prenom', 'age']\n      + - amis_b\n      |       \\ _ _ _ _ _ ['nom', 'prenom', 'age']\n      | \n      |_ END OF DATAS !\n\n  Si je veux le contenu des deux tables sans les doublons :\n\n    >>> a.data_union('amis_a', 'amis_b')\n    ('dupont', 'maurice', '44')\n    ('durant', 'jean-jacques', '32')\n    ('jeunot', 'alain', '21')\n    ('phong', 'lee', '34')\n    ('sanchez', 'manuella', '29')\n    ('tartenpion', 'didier', '33')\n\n  Si je veux connaitre les entr\u00e9es identiques aux deux tables :\n\n    >>> a.data_crosscheck('amis_a', 'amis_b', 'nom', 'nom')\n    ('durant', 'jean-jacques', '32', 'durant', 'jean-jacques', '32')\n    ('tartenpion', 'didier', '33', 'tartenpion', 'didier', '33')\n\n  Si je veux connaitre les gens trentenaires de la table 'amis_a' :\n\n    >>> a.between_value('amis_a', 'age', 30, 39)\n    ('durant', 'jean-jacques', '32')\n    ('tartenpion', 'didier', '33')\n\n  Si je veux connaitre les gens non trentenaires de la table 'amis_a' :\n\n    >>> a.not_between_value('amis_a', 'age', 30, 39)\n    ('dupont', 'maurice', '44')\n    ('jeunot', 'alain', '21')\n\n  Si je souhaite rechercher une personne par son nom :\n\n    >>> a.search_value('amis_b', 'nom', 'sanchez')\n    ('sanchez', 'manuella', '29')\n\n  Si je veux lister la table 'amis_a' par ordre alphab\u00e9tique ascendant, par nom ou par age :\n\n    >>> a.sort_value('amis_a', 0, 'nom')\n    ('dupont', 'maurice', '44')\n    ('durant', 'jean-jacques', '32')\n    ('jeunot', 'alain', '21')\n    ('tartenpion', 'didier', '33')\n\n    >>> a.sort_value('amis_a', 0, 'age')\n    ('jeunot', 'alain', '21')\n    ('durant', 'jean-jacques', '32')\n    ('tartenpion', 'didier', '33')\n    ('dupont', 'maurice', '44')\n\n  Si je souhaite connaitre la moyenne d'age de la liste 'amis_a' :\n\n    >>> a.data_average('amis_a', 'age')\n    32.5\n\n  Si je souhaite modifier une valeur dans une entr\u00e9e , supposons que je souhaite modifier le 'nom' de 'Phong' en 'Jet', et v\u00e9rification du r\u00e9sultat :\n\n    >>> a.modification_values('amis_b', 'nom', 'jet', 'nom', 'phong')\n    True\n    >>> a.show_all()\n    ...OK... The database contains :\n    exemple.db\n      |\n      + - amis_a\n      |       \\ _ _ _ _ _ ['nom', 'prenom', 'age']\n      |\t\t\t             dupont - maurice - 44 - \n      |\t\t            \t durant - jean-jacques - 32 - \n      |\t\t            \t tartenpion - didier - 33 - \n      |\t\t            \t jeunot - alain - 21 - \n      + - amis_b\n      |       \\ _ _ _ _ _ ['nom', 'prenom', 'age']\n      |\t\t\t             jet - lee - 34 - \n      |\t            \t\t sanchez - manuella - 29 - \n      |\t\t            \t durant - jean-jacques - 32 - \n      |\t\t               \t tartenpion - didier - 33 - \n      | \n      |_ END OF DATAS !\n\n  Si je souhaite supprimer une entr\u00e9e de la liste 'amis_b' :\n\n    >>> a.delete_entry('amis_b', 'nom', 'tartenpion')\n    The value tartenpion from the column nom has been deleted !\n    True\n\n  Voil\u00e0 pour l'aper\u00e7u rapide des fonctions.\n\n------\n#### Pr\u00e9sentation de la classe Valknut_gss et utilit\u00e9.\n  Voil\u00e0 ici un script basique de mon convertisseur bas\u00e9 sur le markdown, en Python. Il est assez simple d'utilisation et me permet de g\u00e9n\u00e9rer une ou plusieurs pages standards html sans trop de fioritures tr\u00e8s rapidement. Je l'ai cr\u00e9\u00e9 pour mon utilisation personnel, et il ne respecte pas totalement les r\u00e8gles du markdown. Certaines sont identiques, d'autres sont propres \u00e0 ce module. Pour l'int\u00e9grer dans vos programmes et scripts Python, il suffit de l'importer comme ceci:\n\n    >>> from valknut_gss import *\n\n  Ce script se sert \u00e9galement de fichiers templates au choix en html. Il y en a trois de disponible dans le dossier /templates. Ils contiennent chacun jusqu'\u00e0 cinq entr\u00e9es remplissables par Jinja selon le template. La premi\u00e8re est le titre de la page (page_title), la seconde son contenu (page_contains), le troisi\u00e8me est le footer de la page (page_footer), la quatri\u00e8me remplie automatiquement le sommaire de la colonne \u00e0 gauche de la page type (page_summary) selon le mod\u00e8le, et le cinqui\u00e8me permet de remplir le header (page_header). Il y a \u00e9galement une quatri\u00e8me template nomm\u00e9 'index.html' qui est utilis\u00e9 par la classe Valknut_Server et qui permet \u00e0 cette derni\u00e8re de g\u00e9n\u00e9rer la page de la racine du server. Elle contient une entr\u00e9e sp\u00e9cifique (page_index) qui retourne par d\u00e9faut une liste des fichiers markdowns disponibles dans le dossier /container. Pour plus d'info, voir la documentation de la classe Valknut_Server.\n  J'ai d\u00e9cid\u00e9 d'int\u00e9grer la derni\u00e8re version du moteur de templates Jinja2 afin de me simplifier la tache en g\u00e9n\u00e9rant des fichiers statiques tout en utilisant des mod\u00e8les d\u00e9j\u00e0 d\u00e9finis. Il est possible de rajouter des marqueurs Jinja2 directement dans votre fichier markdown, si vous bossez strictement dans un environnement Python et que vous souhaitez cr\u00e9er des pages web dynamiques. Si il n'est pas encore int\u00e9gr\u00e9 \u00e0 votre Python, installez le de la mani\u00e8re suivante :\n\n    sous Linux:\n        pip install jinja2\n    sous Windows:\n        python -m install jinja2\n\n  Pour voir le r\u00e9sultat avant/apr\u00e8s : le fichier README.md contient le texte brute balis\u00e9 en markdown, le fichier auto_gen.html est le r\u00e9sultat g\u00e9n\u00e9r\u00e9 par mon script. La commande utilis\u00e9e pour le g\u00e9n\u00e9rer sous Python, avec mon script a \u00e9t\u00e9 :\n\n    >>> convert = Valknut_gss()\n    >>> convert.file = \"README.md\"\n    >>> convert.generate()\n\n  Aussi 'simple' que \u00e7a...\n\n  J'ai \u00e9galement int\u00e9gr\u00e9 un petit interface graphique Tkinter qui s'affiche si vous lancez le programme directement. La classe qui le contient se nomme Valknut_gss_interface() et permet de renseigner les m\u00eames \u00e9l\u00e9ments que la classe Valknut_gss(). Simple, rapide, efficace, pas prise de t\u00eate... P\u00e2t\u00e9 cornichons en clair !\n\n##### Classe principale, le point d'entr\u00e9e pour l'utilisateur.\n  La classe principale **Valknut_gss()** permet de cr\u00e9er un objet Valknut_gss et de lui d\u00e9finir le fichier \u00e0 convertir (.file), le type de feedback (.feedback), le nom du fichier de sortir (.out_file), le titre de la page (.project_title), le contenu du header (.project_header), le contenu du footer (.project_footer) et le template \u00e0 utiliser (.use_template). \n\n  La fonction .generate() lance la convertion du fichier. Par d\u00e9faut, un fichier nomm\u00e9 'auto_gen.html' va apparaitre dans le m\u00eame r\u00e9pertoire que ce script. Cette fonction analyse dans l'ordre : la pr\u00e9sence de titres en commen\u00e7ant du type h6 vers le type h1, la pr\u00e9sence de s\u00e9parateurs, la pr\u00e9sence d'exemples de codes, la pr\u00e9sence de paragraphes, la pr\u00e9sence de listes, la pr\u00e9sence de triple splats pour mettre certains passage en gras et italique, la pr\u00e9sence de double splats afin de mettre certains passages en gras, la pr\u00e9sence de single splat pour mettre certains passages en italique. la pr\u00e9sence de passage barr\u00e9, la pr\u00e9sence d'images puis de liens hypertext, et pour finir, fait une indexation des titres balis\u00e9s dans le corps du document (body), et r\u00e9cup\u00e8re une liste de ces derniers pour les ajouter comme liens internes dans une colonne d\u00e9di\u00e9e \u00e0 cet effet (variable page_summary).\n\n  Concernant les listes, et sachant que j'utilise toujours un mod\u00e8le de document tr\u00e8s basique quand j'\u00e9cris un contenu, si elles sont ins\u00e9r\u00e9es gr\u00e2ce \u00e0 des signes +, elles seront num\u00e9rot\u00e9es, et seront \u00e0 puces si utilisation du signe -. Valknut g\u00e8re actuellement les listes standards avec un seul niveau inf\u00e9rieur de listes.\n\n  Il faut savoir aussi que la variable feedback est optionnel : si elle n'est pas sp\u00e9cifi\u00e9e, elle vaudra 0, et donc le retour se fera dans le fichier 'auto_gen.html'. Si par contre elle est diff\u00e9rente de 0, le retour se fera via une fonction int\u00e9gr\u00e9e 'return' sous la forme d'une suite de caract\u00e8res. Ceci peut \u00eatre int\u00e9ressant si vous souhaitez transmettre (retourner) directement au CGI un fichier markdown, sans cr\u00e9er le moindre fichier html. Ceci peut \u00eatre utile si vous utiliser un framework du genre flask ou cherrypy, sans devoir se soucier d'un contenu autre que des fichiers markdown ou texte.\n\n  Les variables *project_title, project_header et project_footer* permettent de personnaliser le titre, le header et le footer de la page que votre navigateur va afficher dans l'onglet. Par d\u00e9faut, ce sera dans l'ordre : 'knut_page', 'knut_header', 'knut_footer', mais il suffit de sp\u00e9cifier d'autre valeurs lors de la d\u00e9finition de l'objet pour les changer.\n\n  Il faut \u00e9galement savoir que la variable *out_file* est aussi optionnelle : si feedback vaut 0, le retour sera enregistr\u00e9 dans le fichier dont le nom est pass\u00e9 dans cet argument, par d\u00e9faut 'auto_gen.html'.\n\n  De fa\u00e7on simple, voil\u00e0 comment poser les symboles dans votre fichier markdown ou texte:\n\n    ###### titre en taille h6 \u00e0 gauche de la page\n    ##### titre en taille h5 \u00e0 gauche de la page\n    #### titre en taille h4 \u00e0 gauche de la page\n    ### titre en taille h3 \u00e0 gauche de la page\n    ## titre en taille h2 \u00e0 gauche de la page\n    # titre en taille h1 \u00e0 gauche de la page\n    ------ 6 tirets seuls sur une ligne permettent d'int\u00e9grer un s\u00e9parateur\n    *** passage en gras et italique, doit \u00eatre compris entre deux triple-splats ***\n    ** passage en gras, doit \u00eatre compris entre deux double-splats **\n    * passage en italique, doit \u00eatre compris entre deux single-splat *\n    ~~ passage barr\u00e9, doit \u00eatre compris entre deux symboles d'approximation ~~\n    __ passage soulign\u00e9, doit \u00eatre compris entre deux double-underscore __\n    + en d\u00e9but de ligne g\u00e9n\u00e8re une liste num\u00e9rot\u00e9e\n    ++ en d\u00e9but de ligne g\u00e9n\u00e8re un sous-niveau de liste num\u00e9rot\u00e9e (la limite actuelle est \u00e0 15 niveaux)\n    +++ etc...\n    - en d\u00e9but de ligne g\u00e9n\u00e8re une liste \u00e0 puces\n    -- en d\u00e9but de ligne g\u00e9n\u00e8re un sous-niveau de liste \u00e0 puces (la limite actuelle est \u00e0 15 niveaux)\n    --- etc...\n    [lien vers un site](http://www.adresse_du_site.com)  pour int\u00e9grer un lien vers un site\n    ![image \u00e0 ins\u00e9rer](chemin_vers_image.jpeg)  pour int\u00e9grer une image\n    [adresse.messagerie@email.com]  pour int\u00e9grer un lien vers un mail\n    pour d\u00e9finir un paragraphe, laissez 2 espaces libres \u00e0 son d\u00e9but\n    et si vous laissez 4 espaces vides en d\u00e9but de ligne, survivaltool_gss g\u00e9n\u00e8re un exemple de code comme ces quelques lignes de syntaxes.\n\n  La fonction principale utilise neuf autres fonctions afin de cr\u00e9er le balisage dans le texte. Ceci me permet de pouvoir adapter ce petit programme facilement si je souhaite m'en servir pour chercher d'autres suites de caract\u00e8res et leur attribuer des valeurs diff\u00e9rentes.\n\n------\n#### Fonctions de la classe Valknut_gss.\n##### Fonction d\u00e9tectant les titres et les s\u00e9parateurs.\n  La premi\u00e8re fonction **per_lines(sequence, symbol_to_modify, replace_open_parse, replace_closing_parse)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence*. L'argument *symbol_to_modify* pr\u00e9cise le caract\u00e8re ou la suite de caract\u00e8res qu'il faut changer. Les arguments *replace_open_parse* et *replace_closing_parse* sont utilis\u00e9s pour pr\u00e9ciser quelle balise d'ouverture il faut inserer au moment o\u00f9 la fonction trouve la premi\u00e8re occurence du/des caract\u00e8re(s), et quelle balise de fermeture il faut ins\u00e9rer avant le retour \u00e0 la ligne. Elle est utilis\u00e9e pour baliser les titres dans un document si elle trouve un sharp ou une suite de sharps au d\u00e9but d'une ligne et ne r\u00e9agit qu'\u00e0 cette condition.\n  Il faut savoir aussi que le programme fait une indexation automatique des titres du document, et r\u00e9cup\u00e8re ces derniers pour g\u00e9n\u00e9rer automatiquement des liens internes qui seront plac\u00e9s par d\u00e9faut dans une colonne \u00e0 gauche de la page. \n\n##### Fonction d\u00e9tectant les exemple de codes / programmes.\n  La seconde fonction **per_coding_example(sequence, number_of_spaces, opening_parse, closing_parse)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence*. L'argument *number_of_spaces* pr\u00e9cise le nombre d'espaces vides que la fonction doit trouver avant de r\u00e9agir et d\u00e9duire qu'il y a un exemple de code. Dans le script, j'ai pos\u00e9 quatres intervalles vides. Les arguments *opening_parse* et *closing_parse* sont utilis\u00e9s pour pr\u00e9ciser quelle balise d'ouverture il faut ins\u00e9rer au moment o\u00f9 la fonction trouve une ligne qui d\u00e9bute par l'intervalle d'espaces libres sp\u00e9cifi\u00e9s, et quelle balise de fermeture il faut ins\u00e9rer quand la fonction va trouver une ligne vide \u00e0 la suite d'un exemple de code.\n\n##### Fonction d\u00e9tectant les listes.\n  La troisi\u00e8me fonction **per_list(sequence, begins, opening_parse, closing_parse)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence*. L'argument *begins* pr\u00e9cise le symbole \u00e0 trouver au d\u00e9but d'une ligne et qui va g\u00e9n\u00e9rer une liste \u00e0 puces ou une liste num\u00e9rot\u00e9e. Les arguments *opening_parse* et *closing_parse* sont utilis\u00e9s pour pr\u00e9ciser quelle balise d'ouverture il faut ins\u00e9rer au moment o\u00f9 la fonction trouve un d\u00e9but de liste, et quelle balise de fermeture il faut ins\u00e9rer quand la fonction va trouver une ligne vide \u00e0 la suite de la liste. Valknut permet de faire une arborescence allant jusqu'\u00e0 15 niveaux (voir les fichiers essai.md et essai.html pour se faire une id\u00e9e). Cependant il vaut mieux utiliser qu'un seul type de puces pour les arborescences complexes \u00e0 plusieurs niveaux, sous peine de g\u00e9n\u00e9rer une ou plusieurs erreurs.\n\n##### Fonction d\u00e9tectant la typographie.\n  La quatri\u00e8me fonction **per_emphasis(sequence, symbol_to_modify, replace_open_parse, replace_closing_parse)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence*. L'argument *symbol_to_modify* pr\u00e9cise le caract\u00e8re ou la suite de caract\u00e8res qu'il faut changer. Les arguments *replace_open_parse* et *replace_closing_parse* sont utilis\u00e9s pour pr\u00e9ciser quelle balise d'ouverture il faut ins\u00e9rer au moment o\u00f9 la fonction trouve la premi\u00e8re occurence du/des caract\u00e8re(s), et quelle balise de fermeture il faut ins\u00e9rer \u00e0 l'occurence suivante du/des caract\u00e8re(s). Elle est utilis\u00e9e pour baliser les passages en gras (bold), italique (italic), barr\u00e9s (strikethrough) ou soulign\u00e9s (underline) gr\u00e2ce aux divers caract\u00e8res cl\u00e9s.\n\n##### Notes concernant les listes et la typographie.\n  Concernant **per_lines** et **per_emphasis** : j'ai opt\u00e9 pour un fonctionnement de ce genre simplement pour pouvoir les utiliser s\u00e9paremment, si j'ai besoin de rechercher/remplacer des s\u00e9quences dans une suite de caract\u00e8res ou un texte qui n'ont rien \u00e0 voir avec le balisage markdown, dans un projet futur. \n\n##### Fonctions d\u00e9tectant les urls, les images et les emails.\n  La cinqui\u00e8me fonction **per_links(sequence)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence* et pose les liens hypertext.\n  La sixi\u00e8me fonction **per_images(sequence)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence* et int\u00e8gre les liens vers les images souhait\u00e9es.\n  La septi\u00e8me fonction **per_mails(sequence)** analyse le texte (suite de caract\u00e8res) pass\u00e9 dans l'argument *sequence* et int\u00e8gre les liens vers les adresses emails.\n  Notez que les images ins\u00e9r\u00e9es seront automatiquement centr\u00e9es sur la page du navigateur si vous utilisez les templates propres \u00e0 Valknut.\n\n##### Fonction d'indexation du document.\n  La huiti\u00e8me fonction **indexer(sequence)** analyse le texte pass\u00e9 dans l'argument *sequence* et modifie toutes les balises de titres html *<h.>* en y int\u00e9grant un id suivi d'un num\u00e9ro unique incr\u00e9ment\u00e9 de 1 \u00e0 chaque titre. Ceci commence \u00e0 0 (premier titre trouv\u00e9) et fini au dernier titre trouv\u00e9.\n  Notez que l'id de la balise header est automatiquement 'home' si vous utilisez les templates propres \u00e0 Valknut.\n\n##### Fonction de r\u00e9cup\u00e9ration des titres.\n  La neuvi\u00e8me fonction **chapter(sequence)** analyse le texte pass\u00e9 dans l'argument *sequence* et r\u00e9cup\u00e8re le contenu des balises de titres du document. Ceci est la seule fonction qui ne modifie pas le document final, elle ne s'occupe que de collecter les donn\u00e9es relatives aux titres et leur num\u00e9ro d'index afin de cr\u00e9er et retourner une liste de liens internes, qui sera int\u00e9gr\u00e9e dans le rendu final (\u00e0 condition bien s\u00fbr d'utiliser l'un des deux templates que j'ai mis \u00e0 disposition, ou d'en cr\u00e9er un qui tient compte de ce param\u00e8tre).\n\n#### Classe sp\u00e9ciale Valknut_gss_interface.\n  Une classe un peu sp\u00e9ciale se trouve int\u00e9gr\u00e9e dans le module Valknut_gss. Cette derni\u00e8re permet d'afficher une petite fen\u00eatre graphique utilisant Tkinter et permettant de g\u00e9n\u00e9rer des fichiers html en lui sp\u00e9cifiant le fichier markdown source, et permet \u00e9galement de renseigner le texte du header, du footer, le titre de la page, le template \u00e0 utiliser, et le nom du fichier de sortie dans lequel enregistrer le r\u00e9sultat. Son appel se fait assez basiquement, en cr\u00e9ant un objet dans un shell Python :\n\n    >>> i = Valknut_gss_interface()\n\n  Ceci permet de manipuler les fichiers html et markdown plus facilement, mais de fa\u00e7on unitaire cependant.\n\n------\n\n#### Pr\u00e9sentation de la classe Valknut_Server et utilit\u00e9.\n  Valknut int\u00e8gre un module qui permet de cr\u00e9er un serveur WSGI (Web Service Gateway Interface) et ainsi de g\u00e9n\u00e9rer un petit serveur en r\u00e9seau local. Ne pas l'utiliser comme serveur de production car il est vraiment tr\u00e8s basique et permet surtout de v\u00e9rifier le rendu d'un projet utilisant Valknut. Pour l'importer :\n\n    >>> from valknut_server import *\n\n  Il utilise la biblioth\u00e8que wsgiref int\u00e9gr\u00e9e dans Python 3 nativement, et utilise le module Valknut_gss pour afficher ses propres pages. De ce fait, Jinja2 se trouve charg\u00e9 \u00e9galement car utilis\u00e9 dans le module Valknut_gss. \n\n#### Fonctions de la classe Valknut_Server().\n  Par d\u00e9faut, son mode de d\u00e9bogage est d\u00e9sactiv\u00e9 et le port d'\u00e9mission est le 8008. Pour l'utiliser, il suffit de cr\u00e9er un objet.\n\n    >>> s = Valknut_Server()\n\n  Pour utiliser le mode de d\u00e9bogage ou non, il suffit de sp\u00e9cifier \u00e0 cet objet True pour l'activer, False pour de d\u00e9sactiver :\n\n    >>> s.debuging = True ( ou False )\n\n  Il est possible \u00e9galement de changer le port de communication, comme ceci :\n\n    >>> s.port = 7777 ( ou n'importe quel nombre entier compris entre 1024 et 65535 )\n\n  Pour lancer le serveur, il suffit de taper la commande suivante :\n\n    >>> s.serve_now()\n\n  Et le programme se lance... Pour l'arr\u00eater, il suffira d'appuyer sur la combinaison de touches Ctrl+C dans le shell Python le concernant. De base, il mettra automatiquement en ligne les fichiers markdown se trouvant dans le dossier /container et affichera la liste des documents consultables si vous tapez dans la bar d'url de votre navigateur : localhost:8008/ .\n  Si tout se passe bien, un message appara\u00eetra \u00e0 cette page, et une liste si votre dossier contient quelquechose. De base, la documentation de Valknut se trouve dedans.\n  Il est possible \u00e9galement de lui d\u00e9finir des pages manuellements gr\u00e2ce \u00e0 la fonction .transmission . Elle s'utilise de cette mani\u00e8re:\n\n    >>> s.transmission(path = \"/salut\", contains = \"Hello world et salut \u00e0 tous !\")\n\n  Ce qui aura pour effet de cr\u00e9er un embranchement sur localhost:8008/salut qui retournera le message pass\u00e9 ici dans l'argument *contains*. L'argument *path* d\u00e9finissant quant \u00e0 lui le chemin de l'embranchement.\n\n#### Exemple d'utilisation de la classe Valknut_Server().\n  Voici un petit exemple rapide pour donner une id\u00e9e de ce qu'il est possible de faire. Je vais cr\u00e9er un petit serveur. Il suffit de lancer le shell Python et de lui donner quelques instructions :\n\n    >>> from valknut_server import *\n    >>> s = Valknut_Server()\n    >>> s.transmission(path = \"/salut\", contains = \"Salut \u00e0 tous !\")\n    >>> s.transmission(path = \"/hello\", contains = \"Hello world !\")\n    >>> s.serve_now()\n\n  Ces quelques instructions vont g\u00e9n\u00e9rer un serveur. Une fois lanc\u00e9e, allez dans votre navigateur et tapez dans la bar d'url : \n\n    localhost:8008/salut\n\n  Le message propre \u00e0 cette page appara\u00eet.\n  Ensuite, allez \u00e0 l'url suivante :\n\n    localhost:8008/hello\n\n  Le message propre \u00e0 cette page appara\u00eet \u00e9galement.\n  Si vous tapez un mauvais url, Valknut va afficher une petite page d'erreur disant qu'il ne connait pas ce chemin. Et si vous tapez simplement :\n\n    localhost:8008/\n\n  Une page de base va appara\u00eetre faisant la liste des documents disponibles dans le dossier 'container'.\n\n  Et voil\u00e0.\n\n------\n#### Mot de fin.\n  Voil\u00e0 dans les grandes lignes, la base de l'utilisation du module Valknut et de ses classes Valknut_sqlite, Valknut_gss et Valknut_Server. Des modifications vont suivre pour am\u00e9liorer son fonctionnement. Je tiens \u00e0 pr\u00e9ciser que j'ai mont\u00e9 ce projet en partant de z\u00e9ro, juste par passion d'essayer de comprendre comment tout ceci peut fonctionner, par challenge personnel, et par envie de reconversion professionnelle. Je pr\u00e9cise \u00e9galement que je suis auto-didacte en programmation et que je n'ai aucun cursus scolaire li\u00e9 \u00e0 cette activit\u00e9 (\u00e0 la base je suis technicien usineur/tourneur-fraiseur, niveau bac, travaillant en usine depuis presque vingt ans). \n\n  Je pose ici mes modules en opensource pour tous. Pour toutes suggestions ou id\u00e9es, envoyer moi un mail \u00e0 l'adresse ci-dessous. Je peux \u00e9galement vous faire un programme opensource en Python int\u00e9gralement pour exploiter une base de donn\u00e9es SQLite3 avec interface Tkinter, il suffit pour cela de me contacter via le mail ici pr\u00e9sent, ou par Telegram.\n\n    email : meyer.daniel67@protonmail.com\n    telegram : @Daniel_85\n\n  Merci de respecter le travail fourni ici, et l'origine de celui-ci. Merci \u00e9galement \u00e0 vous si vous utilisez mes scripts et qu'ils vous aident \u00e0 arriver \u00e0 vos fins.\n\n------\n  Daniel. Juillet 2020.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/daniel67-py/Valknut_Project",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "valknut",
            "package_url": "https://pypi.org/project/valknut/",
            "platform": "",
            "project_url": "https://pypi.org/project/valknut/",
            "project_urls": {
                "Homepage": "https://github.com/daniel67-py/Valknut_Project"
            },
            "release_url": "https://pypi.org/project/valknut/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "markdown to GSS converter, SQLite3 management system and Micro WSGI Server",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7752744,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1398876540ea5f58ba03b7718337295f",
                    "sha256": "ca7655bcc846d1e164deac02c6178a094e2fb3fd3d057cb0985ca647eec9376f"
                },
                "downloads": -1,
                "filename": "valknut-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1398876540ea5f58ba03b7718337295f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 34828,
                "upload_time": "2020-07-21T22:23:31",
                "upload_time_iso_8601": "2020-07-21T22:23:31.212776Z",
                "url": "https://files.pythonhosted.org/packages/1d/15/d364566c91dcfafb1aa9dda4ddca23e07e5327279fa129c5d956086579d1/valknut-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "53a9d74585a6f8a083f27bea97543314",
                    "sha256": "4a18d50aef1992140349f33e1c5a001293c0232037aeb0ff4ac24dbfc19bceff"
                },
                "downloads": -1,
                "filename": "valknut-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "53a9d74585a6f8a083f27bea97543314",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 43182,
                "upload_time": "2020-07-21T22:23:32",
                "upload_time_iso_8601": "2020-07-21T22:23:32.769356Z",
                "url": "https://files.pythonhosted.org/packages/46/0f/8649e43590127485a60fce0e60586fd343678b7c0dbaa9edc3a1b0e61383/valknut-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}