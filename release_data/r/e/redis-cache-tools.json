{
    "0.1.2": {
        "info": {
            "author": "It provides simple decorators that can be added to any function to cache its return values.",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.9",
                "Topic :: Software Development :: Documentation",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Software Development :: Quality Assurance"
            ],
            "description": "# redis-cache-tools\nIt provides simple decorators that can be added to any function to cache its return values.\n\nRequirements:\n-------------\nredis 4.0.0\n\nInstallation:\n-------------\n\n    pip install redis-cache-tools\n\nUsage:\n------\n\n    from redis_cache import cache_it_json\n\n    @cache_it_json(limit=1000, expire=60 * 60 * 24)\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n\n`limit` is the maximum number of keys, `expire` is the expire time in seconds.  \nIt is always recommended to specify a expire time, since by default redis-server will only remove keys with an expire time set in a event of full memory. But if you wish your keys to never expire, set `expire` to `None`.  \n**Note that function arguments and result must be pickleable, since cache_it uses the pickle module.**\n\nIt is also possible to use redis-cache-tools as a object-oriented cache:\n        \n    >> from redis_cache import SimpleCache\n    >> c = SimpleCache(10)  # cache that has a maximum limit of 10 keys\n    >> c.store(\"foo\", \"bar\")\n    >> c.get(\"foo\")\n    'bar'\n    >> \"foo\" in c  # efficient membership test, time-complexity O(1)\n    True\n    >> len(c)  # efficient cardinality calculation, time-complexity O(1)\n    1\n    >> c.keys()  # returns all keys, time-complexity O(N) with N being the cache c cardinality\n    set(['foo'])\n    >> c.flush()  # flushes the cache, time-complexity O(N) with N being the cache c cardinality\n    >> \"foo\" in c\n    False\n    >> len(c)\n    0\n\nCheck out more examples in the test_rediscache.py file.\n\nAdvanced:\n---------\nAdvanced users can customize the decorators even more by passing a SimpleCache object. For example:\n    \n    my_cache = SimpleCache(limit=100, expire=60 * 60, hashkeys=True, host='localhost', port=6379, db=1, namespace='Fibonacci')\n    @cache_it(cache=my_cache)\n    def fib(n):\n        # ...\n\n`hashkeys` parameter makes the SimpleCache to store keys in md5 hash. It is `True` by default in decorators, but `False` by default in a new SimpleCache object.  \n`host`, `port` and `db` are the same redis config params used in StrictRedis class of redis-py.\nBy default, the `namespace` is the name of the module from which the decorated function is called, but it can be overridden with the `namespace` parameter. ",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://500apps.com",
            "keywords": "redis-cache-tools",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "redis-cache-tools",
            "package_url": "https://pypi.org/project/redis-cache-tools/",
            "platform": null,
            "project_url": "https://pypi.org/project/redis-cache-tools/",
            "project_urls": {
                "Homepage": "https://500apps.com",
                "Repository": "https://500apps.com"
            },
            "release_url": "https://pypi.org/project/redis-cache-tools/0.1.2/",
            "requires_dist": [
                "redis (>=4.0.0)"
            ],
            "requires_python": ">=3.9,<4.0",
            "summary": "redis-cache-tools is a pythonic interface for creating a cache over redis.",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16035837,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "80947e036fbe490b6f5ad02509f2a4e6",
                    "sha256": "c89b9a5d68875a0b0ae0e3ed23bb389822919c49ce50b8342f967c02a641ac34"
                },
                "downloads": -1,
                "filename": "redis_cache_tools-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "80947e036fbe490b6f5ad02509f2a4e6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9,<4.0",
                "size": 6164,
                "upload_time": "2022-12-08T14:16:55",
                "upload_time_iso_8601": "2022-12-08T14:16:55.774064Z",
                "url": "https://files.pythonhosted.org/packages/70/51/824c43ea40d5e3838e83fa6a578f8109ca80acf7ac9265d7cb73b128cb82/redis_cache_tools-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9fd9b9a8a788edca0a2ef456a561c7ad",
                    "sha256": "d7f0b5cfeaf37e8defd0bc9bef17d99cbc71b22a3e18aa55f3ea70e8ae25715e"
                },
                "downloads": -1,
                "filename": "redis-cache-tools-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "9fd9b9a8a788edca0a2ef456a561c7ad",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9,<4.0",
                "size": 6095,
                "upload_time": "2022-12-08T14:16:53",
                "upload_time_iso_8601": "2022-12-08T14:16:53.854798Z",
                "url": "https://files.pythonhosted.org/packages/57/a9/160a5538dc470360b3d7432d85c4054c9b3001bd3ba7827ce0f5b325fd1e/redis-cache-tools-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}