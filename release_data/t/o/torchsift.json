{
    "0.1.0": {
        "info": {
            "author": "Zegang Cheng",
            "author_email": "Zegang Cheng <zc2309@nyu.edu>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/chengzegang/TorchSIFT",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "torchsift",
            "package_url": "https://pypi.org/project/torchsift/",
            "platform": null,
            "project_url": "https://pypi.org/project/torchsift/",
            "project_urls": {
                "Bug Tracker": "https://github.com/chengzegang/TorchSIFT/issues",
                "Homepage": "https://github.com/chengzegang/TorchSIFT"
            },
            "release_url": "https://pypi.org/project/torchsift/0.1.0/",
            "requires_dist": [
                "torch (>=1.12.1)",
                "torchvision (>=0.13.1)",
                "numpy",
                "Pillow",
                "opencv-python",
                "setuptools"
            ],
            "requires_python": ">=3.8",
            "summary": "A Pytorch implementation of sift brute-force matcher and RANSAC",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15650263,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3c3910fac493b0c4eb0058e8bc0603a4",
                    "sha256": "728c41d09e02904162e7fd285ee34d57eb32d44c02114920f2ef42d48029db23"
                },
                "downloads": -1,
                "filename": "torchsift-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "3c3910fac493b0c4eb0058e8bc0603a4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 9387,
                "upload_time": "2022-11-04T06:37:27",
                "upload_time_iso_8601": "2022-11-04T06:37:27.151978Z",
                "url": "https://files.pythonhosted.org/packages/e9/b2/caeedab89a0f7cf1b43a952642580434be11e8aa1d3f9d744699ec5c3fc4/torchsift-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a82f0f916f38e64f3a1a517ad76ff07b",
                    "sha256": "5cbc2104e547ee28e2c0f8e323819d75484c94dcb7ce62692b6f88d0a2a989e2"
                },
                "downloads": -1,
                "filename": "torchsift-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "a82f0f916f38e64f3a1a517ad76ff07b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 10471,
                "upload_time": "2022-11-04T06:37:28",
                "upload_time_iso_8601": "2022-11-04T06:37:28.637137Z",
                "url": "https://files.pythonhosted.org/packages/37/d5/b076a41335ec919df205ca3c9e9d93f4fecab3943d8399a85b925a9aa32a/torchsift-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1a1": {
        "info": {
            "author": "Zegang Cheng",
            "author_email": "Zegang Cheng <zc2309@nyu.edu>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "```python\nfrom torchsift import sift, utils, ransac\nfrom torchvision.transforms.functional import to_pil_image, pil_to_tensor\nimport torchvision.transforms as T\nfrom PIL import Image\nimport torch\nfrom tqdm.auto import tqdm\ntorch.manual_seed(19971222)\n\n```\n\n\n\n\n    <torch._C.Generator at 0x185377b24f0>\n\n\n\n\n```python\nresize = T.Resize(256)\ntransforms = T.Compose([T.Resize(256), T.RandomRotation(30), T.RandomAffine(0, translate=(0.2, 0.2)), T.RandomPerspective(distortion_scale=0.5), T.PILToTensor()])\n```\n\n\n```python\nexample_image_path = 'example.jpg'\nimage = Image.open(example_image_path).convert('RGB')\n\nindex_image = resize(image)\nindex_image = pil_to_tensor(index_image)\nquery_image = transforms(image)\n\nidx_kps, idx_descs = sift.detect(index_image)\nindex_kps_image = utils.visualize_keypoints(index_image, idx_kps.unsqueeze(0))\n\nquery_kps, query_descs = sift.detect(query_image)\nquery_kps_image = utils.visualize_keypoints(query_image, query_kps.unsqueeze(0))\n\nside_by_side = utils.concat(index_kps_image, query_kps_image, dim=1)\nside_by_side\n```\n\n\n\n\n    \n![png](README_files/README_2_0.png)\n    \n\n\n\n\n```python\nidx_idesc_qdesc = sift.match(idx_descs.unsqueeze(0), query_descs.unsqueeze(0))\nidx_ikp, idx_qkp = sift.inflate(idx_kps.unsqueeze(0), query_kps.unsqueeze(0), idx_idesc_qdesc)\nlines_without_ransac = utils.draw_match_lines(index_image, query_image, idx_ikp.squeeze(0), idx_qkp.squeeze(0))\nlines_without_ransac\n```\n\n\n\n\n    \n![png](README_files/README_3_0.png)\n    \n\n\n\n\n```python\nH, selected_X, selected_Y, IX, IY = ransac.select(idx_ikp, idx_qkp)\nransac_index_kps_image = utils.visualize_keypoints(index_image, selected_X.unsqueeze(0))\nransac_query_kps_image = utils.visualize_keypoints(query_image, selected_Y.unsqueeze(0))\n\nransac_kps_side_by_side = utils.draw_transfrom_points(index_image, query_image, H, selected_X, selected_Y)\nransac_kps_side_by_side\n```\n\n\n\n\n    \n![png](README_files/README_4_0.png)\n    \n\n\n\n\n```python\nransac_lines_side_by_size = utils.draw_match_lines(index_image, query_image, selected_X, selected_Y)\nransac_lines_side_by_size\n```\n\n\n\n\n    \n![png](README_files/README_5_0.png)\n    \n\n\n\n\n```python\noutcome = utils.concat(side_by_side, lines_without_ransac)\noutcome = utils.concat(outcome, ransac_kps_side_by_side)\noutcome = utils.concat(outcome, ransac_lines_side_by_size)\noutcome\n```\n\n\n\n\n    \n![png](README_files/README_6_0.png)\n    \n\n\n\n\n```python\nimport time\n```\n\n\n```python\nN = 10000\nindex_images = torch.randint(0, 255, (N, 3, 64, 256), dtype=torch.uint8, device='cuda').cpu()\nquery_images = torch.randint(0, 255, (N, 3, 64, 256), dtype=torch.uint8, device='cuda').cpu()\n\nchunk_size = 512\nn_chunks = N // chunk_size\n```\n\n\n```python\n# detect keypoints and descriptors\nstart_time = time.time()\nidx_kps_descs = [sift.detect(i, device='cuda') for i in index_images]\nqry_kps_deescs = [sift.detect(q, device='cuda') for q in query_images]\nend_time = time.time()\ntotal = end_time - start_time\navg_time = (end_time - start_time) * 1000 / N\nprint(f'Total time of OpenCV SITF detecting on {N} images: {total}s')\nprint(f'Average time of OpenCV SITF detecting per image: {avg_time}ms')\n```\n\n    Total time of OpenCV SITF detecting on 10000 images: 49.44602417945862s\n    Average time of OpenCV SITF detecting per image: 4.944602417945862ms\n    \n\n\n```python\n# sample keypoints and descriptors to have the same size\nstart_time = time.time()\nidx_kps, idx_descs = list(zip(*idx_kps_descs))\nidx_kps, idx_descs = sift.sample(idx_kps, idx_descs)\nqry_kps, qry_descs = list(zip(*qry_kps_deescs))\nqry_kps, qry_descs = sift.sample(qry_kps, qry_descs)\nend_time = time.time() \ntotal = end_time - start_time\navg_time =  (end_time - start_time) * 1000 / N\nprint(f'Total time of TorchSIFT sampling on {N} images: {total}s')\nprint(f'Average time of TorchSIFT sampling per image: {avg_time}ms')\n```\n\n    Total time of TorchSIFT sampling on 10000 images: 5.820934295654297s\n    Average time of TorchSIFT sampling per image: 0.5820934295654296ms\n    \n\n\n```python\n# match keypoints and descriptors\nstart_time = time.time()\nfor i in (pbar := tqdm(range(n_chunks))):\n    idx_descs_chunk = idx_descs[i * chunk_size: (i + 1) * chunk_size]\n    idx_kps_chunk = idx_kps[i * chunk_size: (i + 1) * chunk_size]\n    qry_descs_chunk = qry_descs[i * chunk_size: (i + 1) * chunk_size]\n    qry_kps_chunk = qry_kps[i * chunk_size: (i + 1) * chunk_size]\n    idx_idesc_qdesc = sift.match(idx_descs_chunk, qry_descs_chunk)\nend_time = time.time()\ntotal = end_time - start_time\navg_time =  (end_time - start_time) * 1000 / N\nprint(f'Total time of TorchSIFT matching on {N} images: {total}s')\nprint(f'Average time of TorchSIFT matching per image: {avg_time}ms')\n    \n\n```\n\n\n      0%|          | 0/19 [00:00<?, ?it/s]\n\n\n    Total time of TorchSIFT matching on 10000 images: 1.8055212497711182s\n    Average time of TorchSIFT matching per image: 0.18055212497711182ms\n    \n\n\n```python\nN = 10000\nidx_kps = torch.randint(0, 255, (N, 256, 2), device='cuda')\nquery_kps = torch.randint(0, 255, (N, 256, 2), device='cuda')\nidx_idesc_qdesc = torch.randint(0, 255, (N, 256, 256), device='cuda')\nchunk_size = 512\nn_chunks = N // chunk_size\n```\n\n\n```python\n# ransac    \nstart_time = time.time()\nfor i in (pbar := tqdm(range(n_chunks))):\n    idx_ikp_chunk = idx_kps[i * chunk_size: (i + 1) * chunk_size]\n    idx_qkp_chunk = query_kps[i * chunk_size: (i + 1) * chunk_size]\n    idx_ikp_chunk, idx_qkp_chunk = sift.inflate(idx_ikp_chunk, idx_qkp_chunk, idx_idesc_qdesc)\n    H, selected_X, selected_Y, IX, IY = ransac.select(idx_ikp_chunk, idx_qkp_chunk)\nend_time = time.time()\ntotal = end_time - start_time\navg_time =  (end_time - start_time) * 1000 / N\nprint(f'Total time of TorchSIFT RANSAC on {N} images: {total}s')\nprint(f'Average time of TorchSIFT RANSAC per image: {avg_time}ms')\n```\n\n\n      0%|          | 0/19 [00:00<?, ?it/s]\n\n\n    Total time of TorchSIFT RANSAC on 10000 images: 34.69129657745361s\n    Average time of TorchSIFT RANSAC per image: 3.4691296577453614ms\n    \n\n\n```python\n#%%capture\n#!jupyter nbconvert --execute --to markdown README.ipynb\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/chengzegang/TorchSIFT",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "torchsift",
            "package_url": "https://pypi.org/project/torchsift/",
            "platform": null,
            "project_url": "https://pypi.org/project/torchsift/",
            "project_urls": {
                "Bug Tracker": "https://github.com/chengzegang/TorchSIFT/issues",
                "Homepage": "https://github.com/chengzegang/TorchSIFT"
            },
            "release_url": "https://pypi.org/project/torchsift/0.1a1/",
            "requires_dist": [
                "torch (>=1.12.1)",
                "torchvision (>=0.13.1)",
                "numpy",
                "Pillow",
                "opencv-python",
                "setuptools"
            ],
            "requires_python": ">=3.8",
            "summary": "A Pytorch implementation of sift brute-force matcher and RANSAC",
            "version": "0.1a1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15650263,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "95569de028779f07bfb69a08dfb901d8",
                    "sha256": "eafb6aa8824631e120376e4babcc704405105c387cc4d11fe98df13b93f49780"
                },
                "downloads": -1,
                "filename": "torchsift-0.1a1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "95569de028779f07bfb69a08dfb901d8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 9340,
                "upload_time": "2022-10-12T17:43:10",
                "upload_time_iso_8601": "2022-10-12T17:43:10.297265Z",
                "url": "https://files.pythonhosted.org/packages/6e/5b/b2756cb0e9c291393315ae475fe27b80f5b32ab563758f5c05630daa2abd/torchsift-0.1a1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5443ea48dece839527168889857480b9",
                    "sha256": "b76503f776b3ff85e9f3dacabc968754be27af17e786a5f57b451b6d74903370"
                },
                "downloads": -1,
                "filename": "torchsift-0.1a1.tar.gz",
                "has_sig": false,
                "md5_digest": "5443ea48dece839527168889857480b9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 10362,
                "upload_time": "2022-10-12T17:43:11",
                "upload_time_iso_8601": "2022-10-12T17:43:11.752664Z",
                "url": "https://files.pythonhosted.org/packages/b0/59/bab9c947b385ed072109e109b48eaff5ab1898c3da36f70b10f73badf7df/torchsift-0.1a1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}