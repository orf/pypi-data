{
    "0.1.0": {
        "info": {
            "author": "satcfdi@outlook.com",
            "author_email": "satcfdi@outlook.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: Spanish",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SAT-CFDI/python-satcfdi",
            "keywords": "cfdi,sat,facturaci\u00f3n,comprobante,retenciones,n\u00f3mina,pagos,carta porte,contabilidad,e-invoicing,DIOT",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "satcfdi",
            "package_url": "https://pypi.org/project/satcfdi/",
            "platform": null,
            "project_url": "https://pypi.org/project/satcfdi/",
            "project_urls": {
                "Homepage": "https://github.com/SAT-CFDI/python-satcfdi"
            },
            "release_url": "https://pypi.org/project/satcfdi/0.1.0/",
            "requires_dist": [
                "jinja2 (>=3.0.0)",
                "lxml (>=4.9.0)",
                "weasyprint (>=57.0)",
                "requests (>=2.0.0)",
                "cryptography (>=38.0.0)",
                "pytz (>=2022.5)",
                "xlsxwriter (>=3.0.0)",
                "pyOpenSSL (>=22.0.0)",
                "qrcode (>=7.3.0)",
                "tabulate (>=0.9.0)",
                "coverage ; extra == 'test'",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.10",
            "summary": "The best open-source python library to generate and process SAT's CFDI",
            "version": "0.1.0",
            "yanked": true,
            "yanked_reason": "obsolete"
        },
        "last_serial": 15836874,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9bf0e8f415ebb92651c2beb19adab50d",
                    "sha256": "e70c920dbd4b13eac926a57f8c5fdcbe07a783a3cf68f62538e10e26851da35b"
                },
                "downloads": -1,
                "filename": "satcfdi-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9bf0e8f415ebb92651c2beb19adab50d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 4636859,
                "upload_time": "2022-11-20T22:03:30",
                "upload_time_iso_8601": "2022-11-20T22:03:30.000767Z",
                "url": "https://files.pythonhosted.org/packages/b5/11/13e3b00b607ff415ec8886f363332b48049afc56fe00fa3ef3172719ad29/satcfdi-0.1.0-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": "obsolete"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "869864c07e5f17ac68a8f4a4d78120e5",
                    "sha256": "b0ef2092f8157de8dbb3e98ccf26f88319dac1aa7fdc1676ad40eda126ebebb3"
                },
                "downloads": -1,
                "filename": "satcfdi-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "869864c07e5f17ac68a8f4a4d78120e5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 4266969,
                "upload_time": "2022-11-20T22:03:37",
                "upload_time_iso_8601": "2022-11-20T22:03:37.551268Z",
                "url": "https://files.pythonhosted.org/packages/e7/7f/509025f2502d39b765295e9fe9b1334c1f48a069478b6e476894140444f4/satcfdi-0.1.0.tar.gz",
                "yanked": true,
                "yanked_reason": "obsolete"
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "satcfdi@outlook.com",
            "author_email": "satcfdi@outlook.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: Spanish",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SAT-CFDI/python-satcfdi",
            "keywords": "cfdi,sat,facturaci\u00f3n,comprobante,retenciones,n\u00f3mina,pagos,carta porte,contabilidad,e-invoicing,DIOT",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "satcfdi",
            "package_url": "https://pypi.org/project/satcfdi/",
            "platform": null,
            "project_url": "https://pypi.org/project/satcfdi/",
            "project_urls": {
                "Documentation": "https://satcfdi.readthedocs.io/en/latest/",
                "Homepage": "https://github.com/SAT-CFDI/python-satcfdi",
                "Source": "https://github.com/SAT-CFDI/python-satcfdi"
            },
            "release_url": "https://pypi.org/project/satcfdi/0.1.1/",
            "requires_dist": [
                "jinja2 (>=3.0.0)",
                "lxml (>=4.9.0)",
                "weasyprint (>=57.0)",
                "requests (>=2.0.0)",
                "cryptography (>=38.0.0)",
                "pytz (>=2022.5)",
                "xlsxwriter (>=3.0.0)",
                "pyOpenSSL (>=22.0.0)",
                "qrcode (>=7.3.0)",
                "tabulate (>=0.9.0)",
                "packaging (>=21.0)",
                "coverage ; extra == 'test'",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.10",
            "summary": "The best open-source python library to generate and process SAT's CFDI",
            "version": "0.1.1",
            "yanked": true,
            "yanked_reason": "obsoletet"
        },
        "last_serial": 15836874,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "75d7d78b4d57af160109d3300c10e0e2",
                    "sha256": "df18ec5df881d486534d326cf6c5bb7f873145e2862ba0cb419fa5edbcb1473c"
                },
                "downloads": -1,
                "filename": "satcfdi-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "75d7d78b4d57af160109d3300c10e0e2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 4601528,
                "upload_time": "2022-11-20T23:24:02",
                "upload_time_iso_8601": "2022-11-20T23:24:02.793572Z",
                "url": "https://files.pythonhosted.org/packages/c7/8a/7ed992a344938635ecccfa835360ae907c942cb5ec7b080dd10c1f817a80/satcfdi-0.1.1-py3-none-any.whl",
                "yanked": true,
                "yanked_reason": "obsoletet"
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8e80daf5235b03d537c2f2986bf058a1",
                    "sha256": "30f1923dede0c27ce7f15305ce46f102aa8d589152b183e4d981c2ca75ad5f8b"
                },
                "downloads": -1,
                "filename": "satcfdi-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "8e80daf5235b03d537c2f2986bf058a1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 4252064,
                "upload_time": "2022-11-20T23:24:10",
                "upload_time_iso_8601": "2022-11-20T23:24:10.786409Z",
                "url": "https://files.pythonhosted.org/packages/7d/df/168baa5ec40448034f231bf3ebe594efc0c637a32727b52e00b777f9a6f2/satcfdi-0.1.1.tar.gz",
                "yanked": true,
                "yanked_reason": "obsoletet"
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0": {
        "info": {
            "author": "satcfdi@outlook.com",
            "author_email": "satcfdi@outlook.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: Spanish",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11"
            ],
            "description": ".. image:: https://readthedocs.org/projects/satcfdi/badge/?version=latest\r\n    :target: https://satcfdi.readthedocs.io/en/latest/?badge=latest\r\n    :alt: Documentation Status\r\n\r\nGetting started\r\n===============\r\n\r\nInstallation\r\n------------\r\n\r\nAssuming that you have a supported version of Python installed, you can first\r\nset up your environment with:\r\n\r\n install satcfdi from PyPI with:\r\n\r\n.. code-block:: sh\r\n\r\n    python -m pip install satcfdi\r\n\r\nor install from source with:\r\n\r\n.. code-block:: sh\r\n\r\n    git clone https://github.com/SAT-CFDI/python-satcfdi\r\n    cd python-satcfdi\r\n    python -m pip install .\r\n\r\nUsage\r\n------------\r\n\r\nCLI, create printed representation\r\n\r\n.. code-block:: sh\r\n\r\n    satcfdi pdf mi_factura.xml\r\n\r\nLoading existing file\r\n\r\n.. code-block:: python\r\n\r\n    from satcfdi import CFDI\r\n    \r\n    # from file\r\n    cfdi = CFDI.from_file('comprobante.xml')\r\n    \r\n    # from string/bytes\r\n    cfdi = CFDI.from_string(open('comprobante.xml', 'rb').read())\r\n\r\nCreate Comprobante\r\n\r\n.. code-block:: python\r\n\r\n    from decimal import Decimal\r\n    from satcfdi import Signer\r\n    from satcfdi.create.cfd import cfdi40\r\n    from satcfdi.create import Issuer\r\n    \r\n    # Load signing certificate\r\n    signer = Signer.load(\r\n        certificate=open('csd/xiqb891116qe4_csd.cer', 'rb').read(),\r\n        key=open('csd/xiqb891116qe4_csd.key', 'rb').read(),\r\n        password=open('csd/xiqb891116qe4_csd.txt', 'r').read()\r\n    )\r\n    \r\n    # create an Emisor\r\n    emisor = Issuer(signer=signer, tax_system=\"606\")\r\n    \r\n    # create Comprobante\r\n    invoice = cfdi40.Comprobante(\r\n        emisor=emisor,\r\n        lugar_expedicion=\"56820\",\r\n        receptor=cfdi40.Receptor(\r\n            rfc='KIJ0906199R1',\r\n            nombre='KIJ, S.A DE C.V.',\r\n            uso_cfdi='G03',\r\n            domicilio_fiscal_receptor=\"59820\",\r\n            regimen_fiscal_receptor=\"601\"\r\n        ),\r\n        metodo_pago='PPD',\r\n        serie=\"A\",\r\n        folio=\"123456\",\r\n        conceptos=[\r\n            cfdi40.Concepto(\r\n                cuenta_predial='1234567890',\r\n                clave_prod_serv='80131502',\r\n                cantidad=Decimal('1.00'),\r\n                clave_unidad='E48',\r\n                descripcion='RENTA DEL MES DE ENERO 2020',\r\n                valor_unitario=Decimal('1250.30'),\r\n                traslados='IVA|Tasa|0.160000',\r\n                retenciones=['ISR|Tasa|0.100000', 'IVA|Tasa|0.106667'],\r\n                _traslados_incluidos=False\r\n            )\r\n        ]\r\n    ).process()\r\n\r\nCreate a Nomina\r\n\r\n.. code-block:: python\r\n\r\n    from datetime import date\r\n    from decimal import Decimal\r\n    from satcfdi import Signer\r\n    from satcfdi.create import Issuer\r\n    from satcfdi.create.cfd import cfdi40, nomina12\r\n    \r\n    # Load signing certificate\r\n    signer = Signer.load(\r\n        certificate=open('csd/xiqb891116qe4_csd.cer', 'rb').read(),\r\n        key=open('csd/xiqb891116qe4_csd.key', 'rb').read(),\r\n        password=open('csd/xiqb891116qe4_csd.txt', 'r').read()\r\n    )\r\n    \r\n    # create an Emisor\r\n    emisor = Issuer(signer=signer, tax_system=\"606\")\r\n    \r\n    # create Comprobante\r\n    invoice = cfdi40.Comprobante.nomina(\r\n        emisor=emisor,\r\n        receptor=cfdi40.Receptor(\r\n            rfc='KIJ0906199R1',\r\n            nombre='KIJ, S.A DE C.V.',\r\n            uso_cfdi='G03',\r\n            domicilio_fiscal_receptor=\"59820\",\r\n            regimen_fiscal_receptor=\"601\"\r\n        ),\r\n        lugar_expedicion=\"56820\",\r\n        complemento_nomina=nomina12.Nomina(\r\n            emisor=nomina12.Emisor(\r\n                registro_patronal='Z1234567890'\r\n            ),\r\n            receptor=nomina12.Receptor(\r\n                cuenta_bancaria='0001000200030004',\r\n                curp='XIQB891116MCHZRL72',\r\n                clave_ent_fed='MOR',\r\n                num_empleado='12345678',\r\n                periodicidad_pago='04',\r\n                tipo_contrato='01',\r\n                tipo_regimen='02'\r\n            ),\r\n            percepciones=nomina12.Percepciones(\r\n                percepcion=nomina12.Percepcion(\r\n                    tipo_percepcion='001',\r\n                    clave='001',\r\n                    concepto='SUELDO',\r\n                    importe_gravado=Decimal('1200'),\r\n                    importe_exento=Decimal('400')\r\n                )\r\n            ),\r\n            deducciones=nomina12.Deducciones(\r\n                deduccion=nomina12.Deduccion(\r\n                    tipo_deduccion='002',\r\n                    clave='300',\r\n                    concepto='ISR A CARGO',\r\n                    importe=Decimal('1234.73')\r\n                )\r\n            ),\r\n            tipo_nomina='O',\r\n            fecha_pago=date(2020, 1, 30),\r\n            fecha_final_pago=date(2020, 1, 31),\r\n            fecha_inicial_pago=date(2020, 1, 16),\r\n            num_dias_pagados=Decimal('16.000')\r\n        ),\r\n        serie=\"A\",\r\n        folio=\"123456\"\r\n    ).process()\r\n\r\nCreate a Pago\r\n\r\n.. code-block:: python\r\n\r\n    from datetime import date, datetime\r\n    from decimal import Decimal\r\n    \r\n    from satcfdi import Signer\r\n    from satcfdi.create.cfd import cfdi40, pago20\r\n    from satcfdi.create import Issuer\r\n    \r\n    # Load signing certificate\r\n    signer = Signer.load(\r\n        certificate=open('csd/xiqb891116qe4_csd.cer', 'rb').read(),\r\n        key=open('csd/xiqb891116qe4_csd.key', 'rb').read(),\r\n        password=open('csd/xiqb891116qe4_csd.txt', 'r').read()\r\n    )\r\n    \r\n    # create an Emisor\r\n    emisor = Issuer(signer=signer, tax_system=\"606\")\r\n    \r\n    # create Comprobante\r\n    invoice = cfdi40.Comprobante.pago(\r\n        emisor=emisor,\r\n        receptor=cfdi40.Receptor(\r\n            rfc='KIJ0906199R1',\r\n            nombre='KIJ, S.A DE C.V.',\r\n            uso_cfdi='G03',\r\n            domicilio_fiscal_receptor=\"59820\",\r\n            regimen_fiscal_receptor=\"601\"\r\n        ),\r\n        lugar_expedicion=\"56820\",\r\n        complemento_pago=pago20.Pagos(\r\n            pago=pago20.Pago(\r\n                fecha_pago=datetime(2020, 1, 1),\r\n                forma_de_pago_p='03',\r\n                moneda_p='MXN',\r\n                tipo_cambio_p=1,\r\n                docto_relacionado=pago20.DoctoRelacionado(\r\n                    id_documento='d6042dc8-d525-4e78-8d1b-092c878bd518',\r\n                    imp_pagado=Decimal(\"100.3\"),\r\n                    imp_saldo_ant=Decimal(\"203.45\"),\r\n                    num_parcialidad=3,\r\n                    moneda_dr=\"MXN\",\r\n                    objeto_imp_dr=\"01\"\r\n                )\r\n            )\r\n        ),\r\n        serie=\"A\",\r\n        folio=\"123456\"\r\n    ).process()\r\n\r\nIntegration with PAC's\r\n\r\n.. code-block:: python\r\n\r\n    from satcfdi.pacs import Environment, PAC\r\n    \r\n    # Use your preferred PAC to stamp your Comprobante\r\n    pac = PAC(environment=Environment.TEST)  # dummy\r\n    \r\n    # from satcfdi.pacs.diverza import Diverza\r\n    # pac = Diverza(rfc=\"ABC\",id=\"12345\",token=\"$123456&\", environment=Environment.TEST)\r\n    \r\n    # from satcfdi.pacs.prodigia import Prodigia\r\n    # pac = Prodigia(user=\"1234\", password=\"pass\", contrato=\"1234\", environment=Environment.TEST)\r\n    \r\n    # from satcfdi.pacs.comerciodigital import ComercioDigital\r\n    # pac = ComercioDigital(user=\"1234\", password=\"pass\", environment=Environment.TEST)\r\n    \r\n    # from satcfdi.pacs.swsapien import SWSapien\r\n    # pac = SWSapien(token=\"$1234%\", environment=Environment.TEST)\r\n\r\nStamp\r\n\r\n.. code-block:: python\r\n\r\n    from satcfdi.pacs import Accept\r\n    \r\n    doc = pac.stamp(invoice, accept=Accept.XML_PDF)\r\n    \r\n    with open('_stamped_.xml', 'wb') as f:\r\n        f.write(doc.xml)\r\n\r\nExport Options\r\n\r\n.. code-block:: python\r\n\r\n    # JSON\r\n    json = invoice.json_str()\r\n    # save to file\r\n    invoice.json_write(\"_comprobante_.json\")\r\n    # .. or alternative\r\n    with open(\"_stream_comprobante_.json\", 'w', encoding='utf-8') as f:\r\n        invoice.json_write(f)\r\n    \r\n    # XML\r\n    xml = invoice.xml_bytes()\r\n    # save to file\r\n    invoice.xml_write(\"_comprobante_.xml\")\r\n    # .. or alternative\r\n    with open(\"_stream_comprobante_.xml\", 'wb') as f:\r\n        invoice.xml_write(f)\r\n    \r\n    # HTML\r\n    html = invoice.html_str()\r\n    # save to file\r\n    invoice.html_write(\"_comprobante_.html\")\r\n    # .. or alternative\r\n    with open(\"_stream_comprobante_.html\", 'w', encoding='utf-8') as f:\r\n        invoice.html_write(f)\r\n    \r\n    # PDF\r\n    pdf = invoice.pdf_bytes()\r\n    # save to file\r\n    invoice.pdf_write(\"_comprobante_.pdf\")\r\n    # .. or alternative\r\n    with open(\"_stream_comprobante_.pdf\", 'wb') as f:\r\n        invoice.pdf_write(f)\r\n\r\nRecover Comprobantes\r\n\r\n.. code-block:: python\r\n\r\n    import datetime\r\n    from satcfdi import Signer\r\n    from satcfdi.pacs.sat import SAT, TipoDescargaMasivaTerceros\r\n    \r\n    # Load fiel\r\n    signer = Signer.load(\r\n        certificate=open('csd/xiqb891116qe4.cer', 'rb').read(),\r\n        key=open('csd/xiqb891116qe4.key', 'rb').read(),\r\n        password=open('csd/xiqb891116qe4.txt', 'r').read()\r\n    )\r\n    \r\n    sat = SAT(\r\n        signer=signer\r\n    )\r\n    \r\n    fecha_final = datetime.date.today()\r\n    fecha_inicial = fecha_final - datetime.timedelta(days=10)\r\n    \r\n    # Recover Comprobantes\r\n    for paquete_id, p in sat.recover_comprobante_iwait(\r\n        # id_solicitud=\"\",\r\n        fecha_inicial=fecha_inicial,\r\n        fecha_final=fecha_final,\r\n        rfc_receptor=sat.signer.rfc,\r\n        tipo_solicitud=TipoDescargaMasivaTerceros.CFDI\r\n    ):\r\n        with open(f\"{paquete_id}.zip\", \"wb\") as f:\r\n            f.write(p)\r\n    \r\n\r\nStatus Comprobante\r\n\r\n.. code-block:: python\r\n\r\n    from satcfdi import CFDI\r\n    from satcfdi.pacs.sat import SAT\r\n    \r\n    sat = SAT()\r\n    \r\n    cfdi = CFDI.from_file('comprobante.xml')\r\n    res = sat.status(cfdi)\r\n    print(res)\r\n\r\nContributing\r\n------------\r\n\r\nWe value feedback and contributions from our community.\r\n",
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SAT-CFDI/python-satcfdi",
            "keywords": "cfdi,sat,facturaci\u00f3n,comprobante,retenciones,n\u00f3mina,pagos,carta porte,contabilidad,e-invoicing,DIOT",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "satcfdi",
            "package_url": "https://pypi.org/project/satcfdi/",
            "platform": null,
            "project_url": "https://pypi.org/project/satcfdi/",
            "project_urls": {
                "Documentation": "https://satcfdi.readthedocs.io/en/latest/",
                "Homepage": "https://github.com/SAT-CFDI/python-satcfdi",
                "Source": "https://github.com/SAT-CFDI/python-satcfdi"
            },
            "release_url": "https://pypi.org/project/satcfdi/1.0.0/",
            "requires_dist": [
                "jinja2 (>=3.0.0)",
                "lxml (>=4.9.0)",
                "weasyprint (>=57.0)",
                "requests (>=2.0.0)",
                "cryptography (>=38.0.0)",
                "pytz (>=2022.5)",
                "xlsxwriter (>=3.0.0)",
                "pyOpenSSL (>=22.0.0)",
                "qrcode (>=7.3.0)",
                "tabulate (>=0.9.0)",
                "packaging (>=21.0)",
                "coverage ; extra == 'test'",
                "pytest ; extra == 'test'"
            ],
            "requires_python": ">=3.10",
            "summary": "The best open-source python library to generate and process SAT's CFDI",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15836874,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "04583e518cde2b0c847b17ebf3b7c811",
                    "sha256": "363f24e69ec6a88e1ad154ddaaaccfec9af09ea54031c8836603a1cda6bba3f0"
                },
                "downloads": -1,
                "filename": "satcfdi-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "04583e518cde2b0c847b17ebf3b7c811",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 4601752,
                "upload_time": "2022-11-21T06:48:16",
                "upload_time_iso_8601": "2022-11-21T06:48:16.824592Z",
                "url": "https://files.pythonhosted.org/packages/12/26/6ec8c4e7c454ac41c49b3eb0e4b602e0783fe4de1343e66a51195fcb6f47/satcfdi-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "eac5907bdabe75a24cbc48bd7cfe6999",
                    "sha256": "0415107cea447774db9f1d4833260efbf54dd0127325d02e82fe00c2f4b37bc1"
                },
                "downloads": -1,
                "filename": "satcfdi-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "eac5907bdabe75a24cbc48bd7cfe6999",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 4252496,
                "upload_time": "2022-11-21T06:48:31",
                "upload_time_iso_8601": "2022-11-21T06:48:31.569945Z",
                "url": "https://files.pythonhosted.org/packages/26/ef/e18bcd04e606c66a55c3749d4550f361e7f7c9f45f16d769dbaa98b55ad4/satcfdi-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}