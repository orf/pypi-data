{
    "0.0.0": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.0/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ff93b4e20693d86bc18da2c1630ccb02",
                    "sha256": "ac9bebeac95257f8cbd4b68cfc242983e1b8e30feeac863e98ac62b312277d57"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ff93b4e20693d86bc18da2c1630ccb02",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 32802,
                "upload_time": "2022-01-02T02:11:03",
                "upload_time_iso_8601": "2022-01-02T02:11:03.130214Z",
                "url": "https://files.pythonhosted.org/packages/fa/e6/eddea506b0a4352b882a95ec8f1c90a10b692f98c928844c2efe98965b87/camera4kivy-0.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c6551e947d754beccfd189c76ca556e8",
                    "sha256": "eededa53f0b31875b500bdc94d3dfa2a47cd8ebd60f23f50c5a70f7419fa685f"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "c6551e947d754beccfd189c76ca556e8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 37476,
                "upload_time": "2022-01-02T02:11:04",
                "upload_time_iso_8601": "2022-01-02T02:11:04.981463Z",
                "url": "https://files.pythonhosted.org/packages/8e/59/81a6c1505c13d123ee216585488e6946b2ca928a470226a97c34a2eea815/camera4kivy-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.1": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.1/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "36d68faad77b715e774bb56f77a3aa4e",
                    "sha256": "d8bd39a92d849c0ce9aa045ca53c64500652b8df9dda49c0e8297b23ea374f48"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "36d68faad77b715e774bb56f77a3aa4e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 33263,
                "upload_time": "2022-01-06T01:42:17",
                "upload_time_iso_8601": "2022-01-06T01:42:17.709511Z",
                "url": "https://files.pythonhosted.org/packages/c3/f8/c72c6fda218288a93852fa2cce3d9bb4aa12260711ff20c395e3959294c5/camera4kivy-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b215903065c8093fe80969e15dc424e",
                    "sha256": "6073c2298e93102e3396efa83f815e91ab0d636d9a1978812ecf1c58f9253ed6"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "8b215903065c8093fe80969e15dc424e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 38308,
                "upload_time": "2022-01-06T01:42:20",
                "upload_time_iso_8601": "2022-01-06T01:42:20.154309Z",
                "url": "https://files.pythonhosted.org/packages/a4/f3/e81d0d67c47c94180da8caa20a7585a2823ea741a6b0567687a96b65fb11/camera4kivy-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.2/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e74fdcc7d7592936806b25b6886c3c0",
                    "sha256": "b74099651f526aaeabbb78b1c96af449bdffb0669daa06643f64175e976b61da"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4e74fdcc7d7592936806b25b6886c3c0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 33820,
                "upload_time": "2022-01-09T19:14:32",
                "upload_time_iso_8601": "2022-01-09T19:14:32.783034Z",
                "url": "https://files.pythonhosted.org/packages/9d/e6/cb0e16ea5a691c687d8df2cf6256caffb8e72f41edbf61b24c61fb033767/camera4kivy-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "93c08d73f486e8f413ac65a73614da15",
                    "sha256": "fe0d1fda27d196a04a5748bb99b612b390123aa1e35b29233077b633125f667c"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "93c08d73f486e8f413ac65a73614da15",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 39282,
                "upload_time": "2022-01-09T19:14:36",
                "upload_time_iso_8601": "2022-01-09T19:14:36.000897Z",
                "url": "https://files.pythonhosted.org/packages/a1/f7/43d77e60028006105758d4992ec00558846f02804849d2733871ae52e948/camera4kivy-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.3/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7e9c32cf32d6c6c0114b10c93281651b",
                    "sha256": "3e753832718022317a69fba87b6c86bccc2920f927baf543820a23d1f5332945"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7e9c32cf32d6c6c0114b10c93281651b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 33838,
                "upload_time": "2022-01-14T00:14:00",
                "upload_time_iso_8601": "2022-01-14T00:14:00.833513Z",
                "url": "https://files.pythonhosted.org/packages/3c/9f/dcc6dbe257a6ef849a7e5cb831acb1f7a73775fd5025d7790b6cabb54753/camera4kivy-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9bab26d93779a0511210edf20f768b4e",
                    "sha256": "f53f23345a837944bbddd814ba2975b1e35f6b837aa10713c219656a85e0bf7c"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "9bab26d93779a0511210edf20f768b4e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 39279,
                "upload_time": "2022-01-14T00:14:04",
                "upload_time_iso_8601": "2022-01-14T00:14:04.449619Z",
                "url": "https://files.pythonhosted.org/packages/40/0c/4f9eaf99df87bc25ae2b3217142272bb6f47fc98883ef0b3781550d35a9d/camera4kivy-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.4/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "835a688efb0a5d48da26d0781f9124a6",
                    "sha256": "4cb1aad749b222ef25a33c7aab558c28e5ff03063170b3ae7983e22b79af0845"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "835a688efb0a5d48da26d0781f9124a6",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 35354,
                "upload_time": "2022-02-07T21:27:30",
                "upload_time_iso_8601": "2022-02-07T21:27:30.701012Z",
                "url": "https://files.pythonhosted.org/packages/04/9d/9f26ecc861175af18a70a55bf0eabdcf8d403756d27431abc424c64f5480/camera4kivy-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9539c33168612653606ed8dca9d63166",
                    "sha256": "9c2d36141503969ceac0bf0471cd843bbad5427ec0d245ff0dbe8581edd42f2e"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "9539c33168612653606ed8dca9d63166",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 51657,
                "upload_time": "2022-02-07T21:27:34",
                "upload_time_iso_8601": "2022-02-07T21:27:34.273496Z",
                "url": "https://files.pythonhosted.org/packages/0b/91/b43b7c3691a21c35aaf77c80aba050e81c3ed29dd366cb11a8382b39b4d5/camera4kivy-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.5": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.5/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f4513f6cf42eb2038f23aeb923637b2b",
                    "sha256": "1fc638e858d2df7690e464de0edd3e131763aa0be2ed93377df8ec910c86b2b2"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f4513f6cf42eb2038f23aeb923637b2b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 35507,
                "upload_time": "2022-02-25T04:00:31",
                "upload_time_iso_8601": "2022-02-25T04:00:31.177753Z",
                "url": "https://files.pythonhosted.org/packages/6a/d3/b611e0a3dc975d97e173ccfc5d022ee423dd6e087b8189970f9f23c4dfb2/camera4kivy-0.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "15fc3f31609e564ea27e890fd0666a81",
                    "sha256": "66bdd7f5151a5314dab91768415e3111d2035c3e90ea72cc00168b0b98150430"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "15fc3f31609e564ea27e890fd0666a81",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 52129,
                "upload_time": "2022-02-25T04:00:37",
                "upload_time_iso_8601": "2022-02-25T04:00:37.056305Z",
                "url": "https://files.pythonhosted.org/packages/6e/c6/0da65df9c6526da3408c2b060b7c7c7953d1b0d19d18aa6a4ccf6f319956/camera4kivy-0.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.6": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": "",
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.6/",
            "requires_dist": [
                "gestures4kivy (>=0.0.6)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "47057ac51c9d90dac26dad2368b75838",
                    "sha256": "ad013da8d3af8f7a88dec12c4de277a1d5474b43f56b140633ca5821f9bb61ca"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "47057ac51c9d90dac26dad2368b75838",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 35480,
                "upload_time": "2022-03-01T20:10:36",
                "upload_time_iso_8601": "2022-03-01T20:10:36.864078Z",
                "url": "https://files.pythonhosted.org/packages/5c/29/fa03a16e7866782226e979e20d8622125299fb7f80f44d291e2245bb8d37/camera4kivy-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3134db8cba4dde3d1ef05331ec9dff72",
                    "sha256": "f97e89e6c2b21d646eec043cadbaaecb96c683e0770c36d9d3302932aaff3227"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "3134db8cba4dde3d1ef05331ec9dff72",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 52237,
                "upload_time": "2022-03-01T20:10:42",
                "upload_time_iso_8601": "2022-03-01T20:10:42.330097Z",
                "url": "https://files.pythonhosted.org/packages/68/1a/4eba530967c7fcfe498b45461c5159e8b3739a0e977b97cc9364043e18d8/camera4kivy-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": null,
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.7/",
            "requires_dist": [
                "gestures4kivy (>=0.0.7)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8941fd36bf8ec29430fcf0b1efa0cae9",
                    "sha256": "9ea74f85a4a7adc312661df39a55120e73c823baf4b900641b4d989cf88ce24a"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8941fd36bf8ec29430fcf0b1efa0cae9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 36667,
                "upload_time": "2022-04-21T02:20:40",
                "upload_time_iso_8601": "2022-04-21T02:20:40.906549Z",
                "url": "https://files.pythonhosted.org/packages/61/a7/cfbdff42bf187b8006005ba415858296fc4d7264eaa84a1d907e590c4346/camera4kivy-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "805fec314798ff0ed12fbe5e038cadc8",
                    "sha256": "38f3a525bf3d0caec4c69f3e182af1b56d333aed4bb34383099759632dc84254"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "805fec314798ff0ed12fbe5e038cadc8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 54206,
                "upload_time": "2022-04-21T02:20:48",
                "upload_time_iso_8601": "2022-04-21T02:20:48.577167Z",
                "url": "https://files.pythonhosted.org/packages/1a/04/7cec2409723fb1746698c2d4848bda83ab5304b808cc94d8477d2c891d25/camera4kivy-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.9": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": null,
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.0.9/",
            "requires_dist": [
                "gestures4kivy (>=0.0.7)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4f7a5550ed4e94c027053d459bb4d923",
                    "sha256": "15b59774f6e4d908ab247b79c33ba6c9348b18947b727947b82c056ccbbfc3d2"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4f7a5550ed4e94c027053d459bb4d923",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 37134,
                "upload_time": "2022-09-09T20:30:31",
                "upload_time_iso_8601": "2022-09-09T20:30:31.282614Z",
                "url": "https://files.pythonhosted.org/packages/f4/de/1d88a05c0e86ccadbdce4fe5658ed15ac2175add2fd17b9f65e3bf257355/camera4kivy-0.0.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b24d6a375b91c26046d77de29098f879",
                    "sha256": "ed674c211aea3e1db46b745ac631e6c02d9ffe70df40bf6773c412f3e5a91d21"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "b24d6a375b91c26046d77de29098f879",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 55615,
                "upload_time": "2022-09-09T20:30:33",
                "upload_time_iso_8601": "2022-09-09T20:30:33.058066Z",
                "url": "https://files.pythonhosted.org/packages/af/96/8cc000686f053bcb57ac2394bb81f481c4316ff99bde537ee09af85d2d76/camera4kivy-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.0": {
        "info": {
            "author": "Robert Flatt",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Software Development :: Build Tools"
            ],
            "description": "Camera4Kivy\n===========\n\n*Yet Another Camera for Kivy*\n\nThis document has these sections [Overview](https://github.com/Android-for-Python/camera4kivy#overview), [Install](https://github.com/Android-for-Python/camera4kivy#install), [Examples](https://github.com/Android-for-Python/camera4kivy#examples), [Preview Widget](https://github.com/Android-for-Python/camera4kivy#preview-widget), [Image Analysis](https://github.com/Android-for-Python/camera4kivy#image-analysis), [Camera Behavior](https://github.com/Android-for-Python/camera4kivy#camera-behavior), [Camera Provider](https://github.com/Android-for-Python/camera4kivy#camera-provider), and [Known Behavior](https://github.com/Android-for-Python/camera4kivy#known-behavior).\n\nOn Android only:\n- Do not [install an arm7 build on an arm8 device](#behavior-android-armeabi-v7a-build-installed-on-an-arm64-v8a-device).\n\n## Overview\n\nAvailable on all the usual platforms.\n\n```python\nfrom camera4kivy import Preview\n```\n\nCamera4Kivy consists of a `Preview` widget with an api to connect to the physical camera unit. The Preview widget layout is [configured with Kivy properties](https://github.com/Android-for-Python/Camera4Kivy#preview-widget-properties) , the camera unit and image analysis behavior are [configured with an api](https://github.com/Android-for-Python/Camera4Kivy#preview-widget-api). For example:\n\nIn .kv\n```\n    Preview:\n        id: preview\n\taspect_ratio: '16:9'\n```\n\nIn Python\n```python\n    self.preview = Preview(aspect_ratio = '16:9')\n```\n\nTo connect the camera unit to the Preview call the preview's `connect_camera()` method, **after on_start()**. For example to connect the camera with the image analysis api enabled :\n\n```python\n    self.preview.connect_camera(enable_analyze_pixels = True)\n```\n\nWell behaved apps disconnect the camera when it is no longer in use. It is important to be well behaved.\n\n```python\n    self.preview.disconnect_camera()\n```\n\nTo take a photo:\n\n```python\n    self.preview.capture_photo()\n```\n\nThe captured file location may be specified and is also reported in a callback. A data analysis api allows per frame analysis and preview annotation or preview image replacement.\n\nOn Android a pinch/spread gesture controls zoom, and a tap overrides any automatic focus and metering (if available). Some `connect_camera()` options are platform specific.\n\nBe aware Preview operation depends on the performance of the graphics hardware. In general Preview uses the highest available resolution. On devices with low performance graphics hardware sush as low end laptops or Raspberry, you will probably have to explicitly set a lower image resolution inorder to increase the frame rate.\n\n## Install\n\nA [camera provider](https://github.com/Android-for-Python/camera4kivy#camera-provider) may be required. On a destop the camera provider is installed once. On Android the camera provider is [added to each project](https://github.com/Android-for-Python/camera4kivy#android-camera-provider).\n\n### Install Camera4Kivy on Desktop\n\n`pip3 install camera4kivy`\n\n### Install Camera4Kivy on Android\n\nCamera4Kivy depends on Buildozer 1.3.0 or later\n\n`pip3 install buildozer`\n\n#### buildozer.spec:\n\n`android.api = 30`   (or higher, min 29)\n\n`requirements = python3, kivy, camera4kivy, gestures4kivy`\n\nSet `p4a.hook` to enable the app's use of the [camera provider](https://github.com/Android-for-Python/camera4kivy#android-camera-provider). This sets the required p4a options.\n\n`p4a.hook = camerax_provider/gradle_options.py`\n\nThe implementation of the camerax gradle dependencies is architecture specific, an app built for armeabi-v7a will crash on an arm64-v8a device.\n\n#### Run Time Permissions\n\nThe following run time permissions must be in be requested in the app. As usual request these in build() or after on_start(). See the examples.\n\nAlways required: `CAMERA`\n\nRequired to record video with audio: `RECORD_AUDIO`\n\nRequired when capturing photo, screenshot, or video and saving to shared storage, and only on devices running api_version < 29: `WRITE_EXTERNAL_STORAGE`\n\n### Install Camera4Kivy on iOS\n\nInstall the 'master' (2022/04/22 or later) version of kivy-ios.\n```\npip3 install git+https://kivy/kivy-ios.git\ntoolchain build python3 kivy\n```\n\n`toolchain pip3 install camera4kivy`\n\n#### Run Time Permissions\n\nPermission to use the camera and save images is **required** by iOS. To enable permissions edit `<project>-ios/<project-Info.plist`. Add some or all of these:\n\nTo enable use of the Camera add:\n```\n        <key>NSCameraUsageDescription</key>\n\t<string> </string>\n```\nTo enable saving image captures to the Photos App (the default behavior) add:\n```\n\t<key>NSPhotoLibraryAddUsageDescription</key>\n\t<string> </string>\n```\nTo enable viewing images saved to app local storage with the File Manager:\n```\n        <key>UIFileSharingEnabled</key>\n\t<true/>\n        <key>LSSupportsOpeningDocumentsInPlace</key>\n\t<true/>\n```\n\n\n## Examples\n\nA prerequisite is that a working camera is installed. Test this with the platform's camera app before proceeding. All examples use the platform specific camera provider, and assume the typical default camera_id of '0'. If you find the example does not connect to a camera review the available camera ids and your camera provider choice.\n\n### Tested Examples and Platforms \n\nThe Photo example illustrates basic camera usage, try this first. The remaining examples illustrate image analysis using various packages. \n\nOn Android and iOS the app can rotate when the device rotates, on the desktop you can change the window size to simulate orientation, and thus rotating a mobile device. \n\n| Example | Windows | Macos | Linux | Android | iOS | Coral |\n|---------|---------|-------|-------|---------|-----|-------|\n| Photo   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | |\n| QR   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | | |\n| OpenCV | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | | |\n| MLKit | | | | :heavy_check_mark: | | |\n| TFLite   | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | | :heavy_check_mark: |\n\n- Windows : Windows 11, i7-10 @ 1.1GHz, Python 3.8.2  Kivy==2.1.0.dev0\n- Windows : Windows 10, i3-7 @ 2.4GHz, Python 3.9.7 Kivy==2.0.0\n- Macos   : Big Sur,  i5-10 @ @ 1.1GHz, Python 3.9.9 Kivy==2.0.0\n- Linux   : Raspberry Buster, Cortex-A72 @ 1.5GHz Python3.7.3 Kivy==2.0.0\n- Android : build : arm64-v8a  device: Android 12, Pixel 5\n- Android : build : armeabi-v7a device: Android 6, Nexus 5  Start is somewhat slow.\n- iOS     : iPhone SE (second generation)\n- Coral   : [Accelerator](https://coral.ai/products/accelerator) tested with Windows 11 , gave very approximately an order of magnitude speed up.\n\n### [C4K-Photo-Example](https://github.com/Android-for-Python/c4k_photo_example)\nIllustrates basic layout using screens. Basic camera functionality including photo capture, screenshot capture, and on Android capture of video with audio.\nOn Raspberry PI a mouse must be used, a touch pad does not work correctly.\n\n### [C4K-QR-Example](https://github.com/Android-for-Python/c4k_qr_example)\nEverything you need to read a restaurant menu. Long press or double click on a highlighted QR code to open a web browser. Illustrates basic analysis, screen annotation, and user interaction. \n\n### [C4K-OpenCV-Example.](https://github.com/Android-for-Python/c4k_opencv_example)\nEdge detect the video stream. Illustrates using OpenCV analysis and replacing the original preview with the transformed image.\n\n### [C4K-MLKit-Example](https://github.com/Android-for-Python/c4k_mlkit_example)\nFace detect, MLKit is Android only. Illustrates using the ImageProxy api.\n\n### [C4K-TFLite-Example](https://github.com/Android-for-Python/c4k_tflite_example)\nObject classification. Illustrates using a large Tensorflow Lite model, and writing text to the Preview image.\n\n## Preview Widget\n\nAn app can have multiple `Preview` widgets, but only one can be connected to the physical camera unit at a time. A natural way to implement this is to add a preview widget to a screen's contents, then connect to the camera unit `on_enter` and disconnect `on_pre_leave`. The C4K-Photo-Example illustrates this, the other examples simply connect the camera after `on_start()` and disconnect `on_stop()`.\n\n### Preview Widget Properties\n\nThe widget has these Kivy properties that configure its layout:\n\n#### aspect_ratio\nA string property. Either '4:3' (default) or '16:9'. \n\n#### letterbox_color\nA color property. Geometry tells us that layout of a fixed aspect ratio widget almost always results in letterboxing. Art tells us we can hide letterboxes by filling them with a color that matches the surrounding widgets. \n\n#### orientation\nA string property. One of 'portrait' , 'landscape', 'same', 'opposite'.  The default is the 'same' as the device or window. This choice modifies effective resolution, [see](https://github.com/Android-for-Python/camera4kivy#cropped-sensor-resolution). The best resolution is always obtained with 'same'.\n\n### Preview Widget API\n\nThe widget has these methods:\n\n#### Connect Camera \n\nThis may only be called after `on_start()`.\n\n```python\n    def connect_camera(self,kwargs):\n```\n\nOptional arguments:\n    \n##### camera_id\nSpecify which camera to connect to. For example `camera_id = 'front'`. A string containing an integer (default '0'), or on Android or iOS 'back' (default), or 'front'.\n\n##### mirrored\nMirrors the Preview image, default is `True`. This option is ignored on Android and iOS where by convention 'front' is always mirrored and 'back' is never mirrored. This option should usually be `True` for any camera facing the user, and `False` for any camera not facing the user. \n\nCaptures are never mirrored, except a screenshot capture if the Preview is mirrored.\n\nThe pixels argument to `image_analysis_callback()` is never mirrored, if a Preview is mirrored a `texture` result of any image analysis will be automatically mirrored in the `canvas_instructions_callback()` by the tex_size and tex_pos arguments. If image analysis genetates image annotation locations, these locations must be adjusted by the app for a mirrored preview. See the [Image Analysis Section](https://github.com/Android-for-Python/camera4kivy#image-analysis) for code fragments and links to examples.  \n\n##### filepath_callback\nOn a capture of a photo, video, or screenshot, this argument specifies a method to receive the path and name of the saved file. For example `filepath_callback = my_method`, where `def my_method(self, path):` is an app supplied method with a string argument.\n\nPhoto and Video captures may be implemented in a different thread. The only way to know that a capture is complete is a filepath_callback. There may be [latency](https://github.com/Android-for-Python/Camera4Kivy#latency) concequences of disconnecting the camera after initiating a capture and before a filepath_callback.\n\nThe filepath_callback can also be used to reset any 'video recording' indicator in the UI. While video recording is normally terminated by the user, it can also be terminated by app pause, device rotation, or camera selection. In these last cases the any recording indicator can be reset by the callback, which occurs on any capture termination regardless of cause. \n\n##### sensor_resolution\nOverrides the default sensor resolution, which is the highest resolution available, except Raspberry Pi where it is (1024, 768). Tuple of two integers, for example `sensor_resolution = (640, 480)`. The resulting capture resolution obtained depends on the behavior of the camera provider (for example it is ignored by GStreamer). The capture resolution also depends on the relative orientation and aspect ratio of the Preview. Treat the value specified as a request that may not be exactly honored.\n\n##### analyze_pixels_resolution\nSets the pixels resolution passed by `analyze_pixels_callback()`. A scalar, representing the number of pixels on the long edge, the short edge is determined using the aspect ratio. For example `analyze_pixels_resolution = 720`. The default is the minimum of cropped sensor resolution and 1024.\n\nAs an alternative, sometimes the analysis package will need to set the resolution. This is done with `self.auto_analyze_resolution` as described in [Analyze Configuration](https://github.com/Android-for-Python/camera4kivy#analyze-configuration). \n\n##### enable_analyze_pixels\nUse `enable_analyze_pixels = True` to enable the `analyze_pixels_callback()`\n\n##### enable_analyze_imageproxy\nUse `enable_analyze_imageproxy = True` to enable the `analyze_imageproxy_callback()`\nAndroid only.\n\n##### enable_zoom_gesture\nDefault True.  Android and iOS only.\n\n##### enable_focus_gesture\nDefault True. Android only.\n       \n##### imageproxy_data_format:\nApplies only to the Android ImageProxy api. 'yuv420' (default) or 'rgba'.\n\n\n#### Disconnect Camera\n\nAlways do this, it is important to disconnect the camera when not in use.\n\n```python\n    def disconnect_camera(self):\n```\n\nA disconnect while a capture is in progress generally results in termination of the capture and saving the result as usual.\n\nHowever on Android a disconnect immediately after a capture has be initiated may prevent the start of the file save and nothing is saved. A warning message is reported by filepath_callback, this may be filtered as shown in [this example](https://github.com/Android-for-Python/c4k_photo_example/blob/main/applayout/toast.py#L15)\n\n#### Capture\n```python\n    def capture_photo(self, kwargs):\n    def capture_screenshot(self, kwargs):\n    def capture_video(self, kwargs):      # Android only\n    def stop_capture_video(self):         # Android only\n```\n\nVideo capture is only available on Android.\n\nCaptures are never mirrored, except a screenshot capture if the Preview is mirrored. Capture resolution is discussed [here](https://github.com/Android-for-Python/Camera4Kivy#capture-resolution).\n\nCaptures are saved to `<location>/<subdir>/<name>.jpg` or `.mp4`. \n\nThe default values are as follows. On a desktop `<location>` is the current directory `.`, on Android `<location>` is `DCIM/<appname>`, and on iOS <location> is the Photos App. The value of `<subdir>` is the current date, the format is 'YYYY_MM_DD'. The value of `<name>` is the current time, the format is 'hh_mm_ss_xx' (xx is 1/100 sec).\n\nThe [filepath_callback](https://github.com/Android-for-Python/Camera4Kivy#filepath_callback) occurs on capture completion, with an argument that is the actual path for a particular capture. \n\nBe aware that on Android >= 10 shared storage files are saved in a database, called MediaStore, and not in a file system. The architecture of Android storage is outside the scope of this document. \n\nThe values of `<location>`, `<subdir>`, and `<name>` can be modified with optional keyword arguments to the three `capture_` methods:\n\n##### location\n\nThe value replaces the default value of `<location>`.\n\nOn a desktop the value is a directory that must exist. \n\nOn Android and iOS the value can only be `'shared'` or `'private'`, other values default to `'shared'`.\n\nOn Android the value `'shared'` specifies Android shared storage `DCIM/<appname>`. The value `'private'` specifies [app local storage](https://github.com/kivy/python-for-android/blob/develop/doc/source/apis.rst#storage-paths) `app_storage_path()/DCIM`. If you want a different location use `'private'` and move the resulting file based on the path provided by filepath_callback.\n\nOn iOS the value `'shared'` specifies the iOS Photos App. The value `'private'` specifies app local storage. For `'shared'` the filepath_callback returns an empty string, for `'private'` it returns the paths to the file in app local storage.\n\n\n##### subdir\n\nThe value replaces the default value of `<subdir>`. The subdirectory will be created or added to the Android MediaStore path. For iOS when `location='shared'` this is ignored.\n\n##### name\n\nThe value replaces the default value of `<name>`, the `.jpg` or `.mp4` extensions will be added automatically.\n\nNote that it is a characteristic of Android MediaStore that a second capture with the same subdir and name values as the first will not overwrite the first. It will create a second file named `<subdir>/<name> (1).jpg`, this name is created by Android MediaStore. The MediaStore may crash if it creates too many (31 ?) such names.\n\nFor iOS when `location='shared'` this is ignored.\n\n#### Select Camera\n\nChange the currently connected camera, camera_id must specify a physically connected camera.\n\n```python\n    def select_camera(self, camera_id):\n```\n\n#### Zoom\nOn Android only, zoom_delta() is called by pinch/spread gesture unless disabled.\nOn iOS only, zoom_abs() is called by pinch/spread gesture unless disabled.\n```python \n    def zoom_delta(self, delta_scale):  \n    def zoom_abs(self, scale):  \n```\n\n#### Flash\nAndroid only. For capture photo only, ignored for video and data.\nSequence flash : off, on, auto (default), \n```python \n    def flash(self)\n```\n\n#### Focus\nAndroid only, if available on device. Called by a tap gesture unless disabled\n```python\n    def focus(x, y): \n```\n\n## Image analysis\n\n### Overview and Examples\n\nThe programming pattern for video data analysis is to create a subclass of `Preview` and implement two predefined methods. One to analyze the frame, the second to modify the Preview image with the analysis result. In general like this:\n\n```python\nclass CustomAnalyzer(Preview):\n      def analyze_pixels_callback(self, pixels, size, image_pos,\n                                  image_scale, mirror):\n\t### Add your pixels analysis code here\n\t### Add your coordinate transforms here\n\t\t\t\t\n      def canvas_instructions_callback(self, texture, tex_size, tex_pos):\n\t### Add your Preview annotation or image replacement code here\n```\n\nThe `analyze_pixels_callback()` is called each time new pixels are available, and the `canvas_instructions_callback()` is called on each iteration of the Kivy event loop. The availability of new pixels depends on the camera data rate, and the latency of any analysis code included with the previous call of `analyze_pixels_callback()`. Thus `analyze_pixels_callback()` is typically called at a rate less than `canvas_instructions_callback()`, so the annotation update rate is typically less than the image frame rate.\n\nOn Android this is an alternative to analyze_pixels_callback(), it is used for Android only analysis packages.\n```python\n      def analyze_imageproxy_callback(self, image_proxy, image_pos,\n                                      image_scale, mirror, degrees):\n\t### Add your imageproxy specific analysis code here\n```\n\nKeep to this pattern. Perform analysis and coordinate transforms in the 'analyze_pixel_callback' (or imageproxy) method. And in 'canvas_instructions_callback' only display the results of previous calculations. Data passed from the analysis method to the display method must be passed in a thread safe way.\n\nThe `analyze_pixels_callback` method is used to analyze its RGBA `pixels` and `size` arguments. The `pos`, `scale`, and `mirror` arguments enable mapping the analyzed pixels coordinates to Preview coordinates. The `mirror` parameter is required because `pixels` image is never mirrored, but the Preview may be. An example:\n\n```python\n   def analyze_pixels_callback(self, pixels, image_size, image_pos,\n                               scale, mirror):\n\t# Convert the image encoding\t\t       \n        pil_image = Image.frombytes(mode='RGBA', size=image_size,\n\t                            data= pixels)\n        # Analyze the image\t\t\t\t    \n        barcodes = pyzbar.decode(pil_image, symbols=[ZBarSymbol.QRCODE])\n\t# Collect the results and transform the coordinates\n        found = []\n        for barcode in barcodes:\n            text = barcode.data.decode('utf-8')\n            if 'https://' in text or 'http://' in text:\n                x, y, w, h = barcode.rect\n                # Map Zbar coordinates to Kivy coordinates\n                y = image_size[1] -y -h\n                # Map Analysis coordinates to Preview coordinates\n                if mirror:\n                    x = image_size[0] -x -w\n                x = round(x * scale + image_pos[0])\n                y = round(y * scale + image_pos[1])\n                w = round(w * scale)\n                h = round(h * scale)\n                found.append({'x':x, 'y':y, 'w':w, 'h':h, 't':text})\n\t# Save the results in a thread safe way\n        self.make_thread_safe(list(found)) ## A COPY of the list\n```\n\nAnalysis and canvas annotation callbacks occur on different threads. The result of the analysis must be saved in a thread safe way, so that it is available for the canvas callback. We pass a **copy** of the result to:\n\n```python\n    @mainthread\n    def make_thread_safe(self, found):\n        self.annotations = found\n```\n\nAnd add the thread safe annotations to the canvas. \n\n```python\n    def canvas_instructions_callback(self, texture, tex_size, tex_pos):\n        # Add the annotations determinined during analyze callback.\n        Color(1,0,0,1)\n        for r in self.annotations:\n            Line(rectangle=(r['x'], r['y'], r['w'], r['h']), width = dp(2))\t\n```\nWe can also replace the existing Preview image with some other texture, positioned with the 'tex_size' and 'tex_pos' arguments. Use a thread safe texture created as a result of some image analysis like this:\n\n```python\n    def canvas_instructions_callback(self, texture, tex_size, tex_pos):\n        # Add a different preview image, which is a transformed camera image\n\t# this image has 'analyze_pixels_resolution'\n        if self.analyzed_texture:\n\t    # 'self.analyzed_texture' contents created\n\t    # by analyze_pixels_callback()\n            Color(1,1,1,1)\n            Rectangle(texture= self.analyzed_texture,\n\t              size = tex_size, pos = tex_pos)\n```\t   \nThe new texture will be automatically mirrored by 'text_size' and 'tex_pos' if required. These 'text_size' and 'tex_pos' arguments are for adding a texture, and not valid for coordinate calculations as they are potentially mirrored.\n\nSee the OpenCV example for details on creating a thread safe texture. \n\nThe above code fragments are fully implemented in two examples: [QR Reader](https://github.com/Android-for-Python/c4k_qr_example/blob/main/qrreader.py), and [OpenCV](https://github.com/Android-for-Python/c4k_opencv_example/blob/main/edgedetect.py). Similar examples exhibiting this pattern are [tflite](https://github.com/Android-for-Python/c4k_tflite_example/blob/main/classifyobject.py) and [mlkit](https://github.com/Android-for-Python/c4k_mlkit_example/blob/main/facedetect.py).\n\n### User Interaction\n\nBut wait, there is more, a user can interact with the analysis results in the Preview. The Preview subclass may have multiple inheritance, for example to allow the user to interact with annotations on the screen. The QR Reader example illustrates this, by inheriting from a gestures package:\n\n```python\n    class QRReader(Preview, CommonGestures):\n```\n\nThat package's gesture callbacks, and an annotation location test are used to initiate some action. In this case open a web browser based on a URL in a QR code, and a long press or mouse double click inside the box drawn around the QR code.\n\n```python\n    def cg_long_press(self, touch, x, y):\n        self.open_browser(x, y)\n\n    def cg_double_tap(self, touch, x, y):\n        self.open_browser(x, y)\n\n    def open_browser(self, x, y):\n        for r in self.annotations:\n            if x >= r['x'] and x <= r['x'] + r['w'] and\\\n               y >= r['y'] and y <= r['y'] + r['h']:\n                webbrowser.open_new_tab(r['t'])\n```\n\n### Coordinates and image encoding\n\n**Important**, be aware of different coordinate systems and image encoding. A test with a print statement of third party analysis code coordinates can be valuable. \n\n- Kivy image coordinates have their origin at the bottom left. Most other systems use top left (with positive y increaing downwards) as their origin.\n\n- Kivy image properties are a (width, height) tuple. Some packages, notably numpy images, reverse the order to (height, width).\n\n- Kivy pixels are encoded RGBA. Third party analysis code may expect some other encoding, both Pillow and OpenCV provide encoding converions. Some image recodings are computationally expensive.\n\n- The 'canvas_instructions_callback()' arguments 'tex_size' and 'tex_pos' are potentially mirrored and their values are not valid for coordinate mapping. Perform mapping in 'analyze_pixels_callback()' using the 'image_size' and 'image_pos' arguments.\n\n\n### Analysis Configuration\n\nImage analysis is enabled with a parameter to `connect_camera()`:\n\n`connect_camera(enable_analyze_pixels = True)`\n\nTo change the default analysis resolution specify the number of pixels in the long edge (the default is the smaller of 1024 or the cropped resolution):\n\n`connect_camera(enable_analyze_pixels = True, analyze_pixels_resolution = 720)`\n\nThe `analyze_pixels_resolution` option provides analysis images with the same orientation and aspect ratio as the Preview. \n\nAs an alternative the analysis software may set `self.auto_analyze_resolution` a two element list of [width, height]. In this case the aspect ratio is not necessarily maintained for analysis, the `analyze_pixels_callback()` `image_scale` parameter is a two element list [width, height] allowing scaling of any results. As used in [c4k_tflite_example classifyobject.py](https://github.com/Android-for-Python/c4k_tflite_example/blob/main/classifyobject.py).\n\nOn Android only, the imageproxy api is an alternative to the pixels api. \n\n`connect_camera(enable_analyze_imageproxy = True)`\n\nThe imageproxy api provides images in landscape, regardless of the preview orientation. A degrees parameter enables adjusting the analysis accordingly. Android implements automatic changes to frame rate and resolution in the case of slow analysis.\n\n### Debugging\n\nCheck that the app analysis code is doing what you expect. If the result of this is coordinates (most cases) then check these with a print statement. Move whatever you expect to be detected to the four corners of the camera view. Look the printed values, do they reflect the analysed image pixels size and orientation? Repeat for the coordinates after they are mapped to a Kivy widget.\n\nMeasure the time the analysis algorithm takes to execute on one frame. Do this in the cases of detection and nothing to detect. This along with some overhead will define the maximum analysis frame rate. The [tflite example](https://github.com/Android-for-Python/c4k_tflite_example/blob/main/classifyobject.py) monitors analysis frame rate as part of its normal operation.\n\n### Performance\n\nThe camera provides a stream of images for analysis via `analyze_pixels_callback()`. Images arrive at typically 30 fps, so given some overhead the app has probably less than 30mS to do the analysis.\n\nThe api has a builtin mechanism so that images are analyzed only when the previous analysis is complete. This mechanism does not alter the canvas instructions frame rate. If the analysis results are 'jerky' it is because the analysis algorithm is slow for the hardware.\n\nConversely, you can explicitly decrease the analysis frame rate without changing anything else using a flag set using Kivy Clock. Clock rates close to the actual analyze rate will exhibit jitter. For example for a one second analyze interval:\n\n```python\n        self.enable_analyze_frame = True\n        Clock.schedule_interval(self.analyze_filter,1)\n                                                      \n    def analyze_filter(self, dt):\n        self.enable_analyze_frame = True\n\n    def analyze_pixels_callback(self, pixels, image_size, image_pos,\n                                scale, mirror):\n\tif self.enable_analyze_frame:\n\t    self.enable_analyze_frame = False\n\t    # place usual analyse code inside this if block\n```\nOne could modify this in various ways, for example a single sample after some delay.\n\nOne way to improve performance is to reduce the `analyze_pixels_resolution` as shown above. This option may alter the qualitative behavior, perhaps because of resolution bias in some third party analyzers. Experiment, some analysis code will work well at much less than VGA resolution. \n\nThe analysis code must be lean. So for example Keras is a complete development environment, a whole bunch of stuff you don't need to run an inference. Port the application to Tensorflow Lite, then use the tflite-runtime not the full Tensorflow Lite.\n\n## Camera Behavior\n\n### A Physical Camera\n\nA camera is a single physical device with a software api, it is not a software object though it can look like one. It is a physical object with physical constraints. \n\n### Resolution\n\nIn the context of a camera, resolution has several uses. It is always a tuple, in this context (width, height).\n\n#### Sensor Resolution\n\nThis is a phyical property of the sensor module. The default behavior of `connect_camera()` is to use the maximum resolution provided by the camera provider. Is can be overridden with the `sensor_resolution` option, but in general camera providers take this a a hint which may be ignored or re-interpreted. `GStreamer` ignores this option, `picamera` may require it.\n\n#### Cropped Sensor Resolution\n\nThe [sensor resolution](https://github.com/Android-for-Python/Camera4Kivy#sensor-resolution) cropped according to the orientation of the sensor, the orientation of the Preview, and the aspect ratio of the Preview. The will impact the capture resolution, for example a 16:9 aspect image maybe cropped from a 4:3 sensor image. Thus the product of width and height will less for 16:9 that for 4:3 in this case.\n\nRotating a mobile device also rotates the sensor, the highest resolution images are obtained when the Priview widget orientation is the same as the device orientation. Conversly for example a landscape preview with the device in portrait orientation will result in an image width resolution that is the sensor height resolution.\n\nThis behaviour is a characteric of the camera sensor having physical constraints. Notably that image sensors are usually not square, they are rectangular and give the highest quality results when the sensor has the same orientation as the captured image. This is mostly transparent to the app user unless the sensor resolution is low, or a photo capture has lower than expected resolution.\n\n#### Preview Resolution\n\nIs a physical property of the screen ([display resolution](https://github.com/Android-for-Python/Camera4Kivy#display-resolution)) and the Preview widget size on the screen. The preview resolution can be less than or greater than the cropped sensor resolution.\n\n#### Capture Resolution\n\nThe resolution of a capture. A photo capture resolution is [cropped sensor resolution](https://github.com/Android-for-Python/Camera4Kivy#cropped-sensor-resolution). Video resolution is one to the standard resolutions, depending on the cropped sensor resolution. A screenshot capture size in pixels is the [Preview resolution](https://github.com/Android-for-Python/Camera4Kivy#preview-resolution). \n\n#### Analysis Resolution\n\nAnalysis resolution is less than or equal to [cropped sensor resolution](https://github.com/Android-for-Python/Camera4Kivy#cropped-sensor-resolution). It may be useful to reduce this in order to decrease analysis time, at the cost of analysis resolution.  \n\nThe `analyze_pixels_callback()` resolution may be changed with the `analyze_pixels_resolution` camera connect option. The scale parameter allows re-scaling of the analysis results to the Preview resolution.\n\nThe `analyze_imageproxy_callback()` implements a graceful degradation mechanism. This automatically reduces frame rate and/or image resolution. A very slow frame analysis will case the feed to stop.  \n\n#### Display Resolution.\n\nNothing to do with a camera, it is a physical property of a screen. A scalar measured in dpi.\n\n## Camera Provider\n\nCamera4Kivy depends on a 'camera provider' to access the OS camera api. On most platforms this uses the same provider as Kivy, with modified defaults.\n\n| Platform    | Provider      | Requires       |\n|-------------|---------------|----------------|\n| Windows     | [OpenCV](https://github.com/Android-for-Python/camera4kivy#opencv)                      |\n|             | [Gstreamer](https://github.com/Android-for-Python/camera4kivy#gstreamer)                      |\n| Macos       | [AVFoundation](https://github.com/Android-for-Python/camera4kivy#avfoundation)| OSX >= 10.7    |   \n| Linux       | [Gstreamer](https://github.com/Android-for-Python/camera4kivy#gstreamer)                      |\n|             | [OpenCV](https://github.com/Android-for-Python/camera4kivy#opencv)                      |\n| Rasberry    | [Picamera](https://github.com/Android-for-Python/camera4kivy#picamera)    | <= Buster      |\n|             | [Gstreamer](https://github.com/Android-for-Python/camera4kivy#gstreamer)  |  <= Buster |\n|             |[OpenCV](https://github.com/Android-for-Python/camera4kivy#opencv) |  <= Buster  |\n|             | [Picamera2](https://github.com/Android-for-Python/camera4kivy#picamera2)    | >= Bullseye      |\n| Android     | [CameraX](https://github.com/Android-for-Python/camera4kivy#android-camera-provider)                      |  Android >= 5.0 |\n| iOS         | [AVFoundation](https://github.com/Android-for-Python/camera4kivy#avfoundation)                      |\n\nLike Kivy, the first available provider is selected. Some camera provider specific behavior should be expected. For example a switch to a camera that does not exist will be ignored on MacOS and Rasberry Pi, but generate a screen message with OpenCV or GStreamer. Camera resolution defaults to the maximum available camera provider resolution, except on Raspberry Pi where the default is (1024, 768).\n\nYou can remove a camera provider ('picamera' in the example below) from the above lists by inserting this code **before** `from kivy.app import App`.\n\n```python\nfrom kivy import kivy_options\nproviders= list(kivy_options['camera'])\nproviders.remove('picamera')\nkivy_options['camera'] = tuple(providers)\n```\n\n### Android Camera Provider\n\n`cd <project directory>`\n\n`git clone https://github.com/Android-for-Python/camerax_provider.git`\n\n`rm -rf camerax_provider/.git`\n\nSet `p4a.hook` to enable the app's use of the camera provider.\n\n`p4a.hook = camerax_provider/gradle_options.py`\n\n### OpenCV\n\n`pip3 install opencv-python`\n\n### GStreamer\n\nDepends on the Linux flavor, but commonly:\n\n`sudo apt-get install gstreamer-1.0`\n\n`sudo apt-get install gstreamer1.0-dev`\n\n### Picamera\nPre-installed\n\n### Picamera2\n[Raspberry PI Bullseye not available](https://github.com/Android-for-Python/camera4kivy#behavior-raspberry-pi-bullseye-not-available).\n\n### AVFoundation\nPre-installed\n\n\n## Known Behavior\n\n### Behavior: Preview has no aspect_ratio = 'fill'\n\nThere is no way to specify inverted letterboxing. Where the Preview exactly fills the space available, resulting in one axis of the captured or analyzed image being partially hidden in the Preview. \n\n### Behavior: Raspberry PI Bullseye not available\n\nThe RaspberryPI video stack changed with Bullseye. In Bullseye currently the only working camera source is `libcamera`. Picamera is not availible, [apparently](https://www.raspberrypi.com/news/bullseye-camera-system/) a RPI Picamera2 Python interface is in development. And `libcamera` is not compatible with OpenCV or Kivy's GStreamer implementation. \n\n### Behavior: Android Rotation\n\nRotating the physical device through 'inverted portrait' may result in an 'inverted landscape' display. An additional rotation to 'portrait' and back to 'landscape' corrects the display. \n\n### Behavior: Android .mp4 Orientation\n\nVideo file orientation is incorrect if the preview orientation is not the same as the device orientation. Do not use this layout configuration when recording video. [Google issue tracker](https://issuetracker.google.com/issues/201085351).\n\n### Behavior: Android .jpg Orientation.\n\nSome image viewers (including Kivy Image widget) will incorrectly display a .jpg as rotated by 90 degrees. This occurs if the capture preview orientation is not the same as the device orientation, and the third party viewer does not use the Exif metadata.   \n\n### Behavior: Android connect_camera during on_start()\n\nOn Android, a `connect_camera()` called during `on_start()` will result in intermittent crashes during app start. The unfiltered logcat will contain: 'library \"libdexfile.so\" not found'.\nUse Kivy clock to schedule the `connect_camera()` one time step later.\n\n### Behavior: Android switching cameras, short duration inverted image.\n\nWhen switching cameras there may be a short duration inverted image, this is more likely on older Android devices.\n\n### Behavior: Android armeabi-v7a build installed on an arm64-v8a device\n\nThe implementation of Google's camerax gradle dependencies is architecture specific, an app built for armeabi-v7a will crash on an arm64-v8a device. To rin on an arm64-v8a device you **must** build for arm64-v8a.\n\n### Behavior: Android \"No supported surface combination\"\n\n`No supported surface combination is found for camera device - Id : 0.  May be attempting to bind too many use cases.`\n\nOn very low end Android devices the camera may have limited hardware resources. So far only one device has exhibited this issue. By default c4k configures connect_camera() for either 'photo and video` or 'photo and image analysis' - this keeps the api as simple as possible. But in this case it is too expensive for the hardware. We can override these configurations.\n\nIf the connection is only used for photo use `connect_camera(enable_video = False, ...other options..)`. If the connection is only used for video or data analysis use `connect_camera(enable_photo = False, ...other options..)`. \n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Android-for-Python/Camera4Kivy",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "camera4kivy",
            "package_url": "https://pypi.org/project/camera4kivy/",
            "platform": null,
            "project_url": "https://pypi.org/project/camera4kivy/",
            "project_urls": {
                "Homepage": "https://github.com/Android-for-Python/Camera4Kivy"
            },
            "release_url": "https://pypi.org/project/camera4kivy/0.1.0/",
            "requires_dist": [
                "gestures4kivy (>=0.1.0)"
            ],
            "requires_python": ">=3.6",
            "summary": "Yet Another Camera for Kivy",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15184684,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9764935f99f738f89ea092f6fe4ae64a",
                    "sha256": "7cfbaaf90876e4584eed49d902090c1c3e6362c249ba992f9b8a336d3d3ee440"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9764935f99f738f89ea092f6fe4ae64a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 37138,
                "upload_time": "2022-09-23T00:26:13",
                "upload_time_iso_8601": "2022-09-23T00:26:13.269338Z",
                "url": "https://files.pythonhosted.org/packages/f5/93/7d663fea0d931b0b6d18816b276f763ae56448683869bdd12d8959776252/camera4kivy-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "33b85a969bd5f0f0af22b8ba7838e599",
                    "sha256": "a26c1252c10b5815b3e7ec4d76087d58e7a24438be052e1fec46f6d2d820625b"
                },
                "downloads": -1,
                "filename": "camera4kivy-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "33b85a969bd5f0f0af22b8ba7838e599",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 55610,
                "upload_time": "2022-09-23T00:26:14",
                "upload_time_iso_8601": "2022-09-23T00:26:14.785144Z",
                "url": "https://files.pythonhosted.org/packages/f2/48/a47d0e995e5c55c3c1e565d054acbf93cee8be9cd1d2b517d2fc4c581092/camera4kivy-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}