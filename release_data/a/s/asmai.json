{
    "0.1": {
        "info": {
            "author": "Taha Zerrouki",
            "author_email": "taha.zerrouki@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Intended Audience :: End Users/Desktop",
                "Operating System :: OS Independent",
                "Programming Language :: Python"
            ],
            "description": "Asmai: (Al'asma'i) Arabic semantic analysis\n===========================================\n\n\u0645\u0643\u062a\u0628\u0629 \u0627\u0644\u0623\u0635\u0645\u0639\u064a \u0627\u0644\u062f\u0644\u0627\u0644\u064a\u0629\n======================\n\nAsmai: (Al'asma'i) Arabic semantic analysis library for Python\n\n.. figure:: doc/asmai_header.png\n   :alt: asmai logo\n\n   asmai logo\n\n.. figure:: https://img.shields.io/pypi/dm/asmai\n   :alt: PyPI - Downloads\n\n   PyPI - Downloads\n\nDeveloppers: Taha Zerrouki: http://tahadz.com taha dot zerrouki at gmail\ndot com\n\n+-------------+--------------------------------------------------------------------------------------------+\n| Features    | value                                                                                      |\n+=============+============================================================================================+\n| Authors     | `Authors.md <https://github.com/linuxscout/asmai-arabic-semantic/master/AUTHORS.md>`__     |\n+-------------+--------------------------------------------------------------------------------------------+\n| Release     | 0.1                                                                                        |\n+-------------+--------------------------------------------------------------------------------------------+\n| License     | `GPL <https://github.com/linuxscout/asmai-arabic-semantic/master/LICENSE>`__               |\n+-------------+--------------------------------------------------------------------------------------------+\n| Tracker     | `linuxscout/asmai/Issues <https://github.com/linuxscout/asmai-arabic-semantic/issues>`__   |\n+-------------+--------------------------------------------------------------------------------------------+\n| Source      | `Github <http://github.com/linuxscout/asmai-arabic-semantic>`__                            |\n+-------------+--------------------------------------------------------------------------------------------+\n| Feedbacks   | `Comments <https://github.com/linuxscout/asmai-arabic-semantic/>`__                        |\n+-------------+--------------------------------------------------------------------------------------------+\n| Accounts    | [@Twitter](https://twitter.com/linuxscout)                                                 |\n+-------------+--------------------------------------------------------------------------------------------+\n\nDescription\n-----------\n\nAsmai: (Al'asma'i) Arabic semantic analysis library for Python\n\n\u0645\u0632\u0627\u064a\u0627:\n~~~~~~\n\n-  \u0627\u0633\u062a\u062e\u0644\u0627\u0635 \u062b\u0646\u0627\u0626\u064a\u0627\u062a \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u062d\u0645\u0644 \u062f\u0644\u0627\u0644\u0627\u062a \u0645\u0646 \u0646\u0648\u0639 : (\u0641\u0627\u0639\u0644\u064a\u0629\u060c \u0645\u0641\u0639\u0648\u0644\u064a\u0629\u060c\n   \u0625\u0636\u0627\u0641\u0629)\n\n\ninstall\n~~~~~~~\n\n.. code:: shell\n\n    pip install asmai\n\nUsage\n~~~~~\n\nimport\n^^^^^^\n\n.. code:: python\n\n    pip install asmai\n\nTest\n^^^^\n\n.. code:: python\n\n    import asmai.anasem as asm\n    text  =  u\"\u064a\u0639\u0628\u062f \u0627\u0644\u0644\u0647 \u0645\u0646\u0630 \u0623\u0646 \u062a\u0637\u0644\u0639 \u0627\u0644\u0634\u0645\u0633\"\n    result  =  []\n    anasem  =  asm.SemanticAnalyzer()    \n    result  =  anasem.analyze_text(text)\n    # the result contains objets\n    anasem.pprint(result)\n\n-  Extract semantic relation, display only found relations\n\n.. code:: python\n\n    >>> import pprint\n    >>> sem_result = anasem.display_sem(result)\n    >>> pprint.pprint(sem_result)      \n    [[['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064f\u0639\u064e', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n      ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064f\u0639\u064f', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n      ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064f\u0639\u0652', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n      ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064e\u0639\u064e', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n      ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064e\u0639\u064f', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n      ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064e\u0639\u0652', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject']]]\n\n-  Extract semantic relation, display all words and tags\n\n   .. code:: python\n\n       >>> sem_result = anasem.display_sem(result, all=True)\n       >>> pprint.pprint(sem_result)\n       [('\u064a\u0639\u0628\u062f', 'O', []),\n        ('\u0627\u0644\u0644\u0647', 'O', []),\n        ('\u0645\u0646\u0630', 'O', []),\n        ('\u0623\u0646', 'O', []),\n        ('\u062a\u0637\u0644\u0639', 'B', []),\n        ('\u0627\u0644\u0634\u0645\u0633',\n         'I',\n         [['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064f\u0639\u064e', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n          ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064f\u0639\u064f', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n          ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064f\u0639\u0652', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n          ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064e\u0639\u064e', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n          ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064e\u0639\u064f', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject'],\n          ['\u0627\u0644\u0634\u0651\u064e\u0645\u0652\u0633\u064f', '\u062a\u064e\u0637\u0652\u0644\u064e\u0639\u0652', '\u0634\u064e\u0645\u0652\u0633\u064c', '\u0637\u064e\u0644\u064e\u0639\u064e', 'Subject']])]\n       >>> \n\n-  convert to pandas \\`\\`\\`python >>> import pandas as pd >>> >>> #\n   flatten the result ... df = pd.DataFrame(anasem.decode(result)) >>>\n   print(df.head()) action affix affix\\_key forced\\_word\\_case ...\n   unvocalized unvoriginal vocalized word 0 -\u064a-- -\u064a--\\|\u0627\u0644\u0645\u0636\u0627\u0631\u0639\n   \u0627\u0644\u0645\u0646\u0635\u0648\u0628:\u0647\u0648:y False ... \u064a\u0639\u0628\u062f \u0639\u0628\u062f \u064a\u064f\u0639\u064e\u0628\u0651\u0650\u062f\u064e \u064a\u0639\u0628\u062f 1 -\u064a-- -\u064a--\\|\u0627\u0644\u0645\u0636\u0627\u0631\u0639\n   \u0627\u0644\u0645\u062c\u0647\u0648\u0644 \u0627\u0644\u0645\u062c\u0632\u0648\u0645:\u0647\u0648:y False ... \u064a\u0639\u0628\u062f \u0639\u0628\u062f \u064a\u064f\u0639\u064e\u0628\u0651\u064e\u062f\u0652 \u064a\u0639\u0628\u062f 2 -\u064a--\n   -\u064a--\\|\u0627\u0644\u0645\u0636\u0627\u0631\u0639 \u0627\u0644\u0645\u062c\u0647\u0648\u0644:\u0647\u0648:y False ... \u064a\u0639\u0628\u062f \u0639\u0628\u062f \u064a\u064f\u0639\u064e\u0628\u0651\u064e\u062f\u064f \u064a\u0639\u0628\u062f 3 -\u064a--\n   -\u064a--\\|\u0627\u0644\u0645\u0636\u0627\u0631\u0639 \u0627\u0644\u0645\u0639\u0644\u0648\u0645:\u0647\u0648:y False ... \u064a\u0639\u0628\u062f \u0639\u0628\u062f \u064a\u064f\u0639\u064e\u0628\u0651\u0650\u062f\u064f \u064a\u0639\u0628\u062f 4 -\u064a--\n   -\u064a--\\|\u0627\u0644\u0645\u0636\u0627\u0631\u0639 \u0627\u0644\u0645\u062c\u0632\u0648\u0645:\u0647\u0648:y False ... \u064a\u0639\u0628\u062f \u0639\u0628\u062f \u064a\u064f\u0639\u064e\u0628\u0651\u0650\u062f\u0652 \u064a\u0639\u0628\u062f\n\n[5 rows x 50 columns] >>> df.to\\_csv(\"output/test.csv\", encoding=\"utf8\",\nsep=\":raw-latex:'\\t'\")\n\n\n\n[requirement]\n^^^^^^^^^^^^^\n\n::\n\n    1- pyarabic \n    2. sqlite\n    3. sylajone\n\nData Structure:\n---------------\n\nSemantic database\n~~~~~~~~~~~~~~~~~\n\n.. code:: sql\n\n    CREATE TABLE sqlite_sequence(name,seq);\n    CREATE TABLE \"derivations\" (\n        \"id\" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL  UNIQUE ,\n        \"verb\" varchar NOT NULL ,\n        \"transitive\" BOOL NOT NULL  DEFAULT 1,\n        \"derived\" VARCHAR NOT NULL ,\n        \"type\" VARCHAR NOT NULL \n     );\n\nCSV Structure:\n\n-  Derivattion\n\n1. id : id unique in the database\n2. verb : vocalized collocation\n3. transtive : if the verb is transitive\n4. derived : derived word from verb number\n5. type : type\n\nSemantic relations\n^^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    CREATE TABLE \"relations\" (\n        \"id\" INTEGER PRIMARY KEY  NOT NULL ,\n        first\" VARCHAR NOT NULL  DEFAULT ('') ,\n        \"second\" VARCHAR NOT NULL  DEFAULT ('') ,\n        \"rule\" VARCHAR NOT NULL  DEFAULT (0) \n     );\n\nCSV Structure:\n\n1. id : id unique in the database\n2. first: first word\n3. second: second word\n4. rule : the extraction rule number :",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://asmai.sourceforge.net/",
            "keywords": "",
            "license": "GPL",
            "maintainer": "",
            "maintainer_email": "",
            "name": "asmai",
            "package_url": "https://pypi.org/project/asmai/",
            "platform": "",
            "project_url": "https://pypi.org/project/asmai/",
            "project_urls": {
                "Homepage": "http://asmai.sourceforge.net/"
            },
            "release_url": "https://pypi.org/project/asmai/0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Asmai: (Al'asma'i) Arabic semantic analysis library for Python",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 7914433,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8cbd4fbd728e8632dca97b87d5be5d75",
                    "sha256": "536a2ce279ce6c67815481a5b9fc71e931a6450988f3d43354d625b14cb0450f"
                },
                "downloads": -1,
                "filename": "asmai-0.1-py2-none-any.whl",
                "has_sig": false,
                "md5_digest": "8cbd4fbd728e8632dca97b87d5be5d75",
                "packagetype": "bdist_wheel",
                "python_version": "py2",
                "requires_python": null,
                "size": 4332560,
                "upload_time": "2020-08-08T10:23:47",
                "upload_time_iso_8601": "2020-08-08T10:23:47.370662Z",
                "url": "https://files.pythonhosted.org/packages/fb/3a/546a1fb901061b4fa8c214d4346d615617b8576432625f4c2fb427f6a204/asmai-0.1-py2-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "15c9b54740128e39af3ed6b6a331c3fa",
                    "sha256": "2774425c726025718d3116baed2507761f3ef3aff4e6643b542f538e42468a7d"
                },
                "downloads": -1,
                "filename": "asmai-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "15c9b54740128e39af3ed6b6a331c3fa",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 4335220,
                "upload_time": "2020-08-08T10:25:23",
                "upload_time_iso_8601": "2020-08-08T10:25:23.164931Z",
                "url": "https://files.pythonhosted.org/packages/fc/4f/f096c0136c2b5ac342fe5642c41abc6358c8545d5192f6575ff58a6cf3ac/asmai-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bb87bb0af43b138eba98605db8655c74",
                    "sha256": "d29aeb7ae7ecc12e0eada21ac41be7fbf049abbb58bca8e5ce518fbbd9dfaecf"
                },
                "downloads": -1,
                "filename": "asmai-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "bb87bb0af43b138eba98605db8655c74",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 7724695,
                "upload_time": "2020-08-08T10:21:25",
                "upload_time_iso_8601": "2020-08-08T10:21:25.421303Z",
                "url": "https://files.pythonhosted.org/packages/e3/ba/99efc20677b0d3634e547052afde5f051b0c2d95626dde3ac109c37affe5/asmai-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}