{
    "0.0.0": {
        "info": {
            "author": "['Anish Pandey', 'Sushil Ghimire']",
            "author_email": "sushil79g@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "<h1>This projects aims to build a library for all the NLP processes for Nepali Language.</h1>\n\n<h2>Getting the module</h2>\n\n```bash\n!pip install git+https://github.com/sushil79g/Nepali_nlp.git\n```\n\n<h3>Loading Embedding</h3>\n\n```python\nfrom Nepali_nlp import Embeddings\nword_vec = Embeddings().load_large_vector()\n#word_vec = Embeddings().load_vector() #For small Embedding\n#from fasttext_embedding import Fasttext\n#word_vec = Fasttext().load()\n```\n\n<h3>For Nepali Synonym</h3>\n\n```python\nfrom Nepali_nlp import Synonym\nSynonym().raw_synonym(word = '\u092e\u093e\u092f\u093e',word_vec=word_vec) #method: 1\n#output -> \u0938\u094d\u0928\u0947\u0939','\u092a\u094d\u0930\u0947\u092e','\u0906\u0926\u0930','\u092e\u093e\u092f\u093e\u0901','\u0926\u092f\u093e','\u092e\u093e\u092f\u093e\u0932\u0941','\u0936\u094d\u0930\u0926\u094d\u0927\u093e','\u0906\u0924\u094d\u092e\u093f\u092f\u0924\u093e','\u0938\u094d\u092a\u0930\u094d\u0936','\u0924\u093f\u092e\u0940\nSynonym().filter_synonym(word = '\u0938\u093e\u0925\u0940',word_vec=word_vec) #method: 2\n#output -> '\u092d\u093e\u0907\u0939\u0930\u0942','\u0938\u0939\u092a\u093e\u0920\u0940','\u092a\u094d\u0930\u0947\u092e\u0940','\u0926\u093e\u0907','\u092a\u094d\u0930\u0947\u092e\u093f','\u092c\u0939\u093f\u0928\u0940'\n```\n<h3>Word-spell corrector</h3>\n\n```python\nfrom Nepali_nlp import Corrector\nCorrector().corrector(word='\u0938\u0941\u0936\u0932') #In a very raw stage for now.\n#output-> ['\u0938\u0941\u0936\u0940\u0932', '\u0938\u0941\u0936\u0940\u0932']\nCorrector().spell_correct(\"\u0915\u0938\u094d\u0924 \u092d\u0915\u094b \u0939\u0947\u0930\u094c \u0939\u0948\")\n#output-> \"\u0915\u0938\u094d\u0924\u094b \u092d\u092f\u094b \u0939\u0947\u0930 \u0939\u0948\"\n```\n<h3>Nepali text summerizer</h3>\n\n```python\nfrom Nepali_nlp import Summerize\nSummerize().show_summary(word_vec,text, length_sentence_predict=5)\n```\n<h3>Nepali unicode to Devnagiri Font</h3>\n\n```python\nfrom Nepali_nlp import Unicode\ntext = 'ma ghara jaanchhu'\nUnicode().unicode_word(text) #output-> '\u092e \u0918\u0930 \u091c\u093e\u0928\u094d\u091b\u0941'\n```\n<h3>Preeti-font character to Devnagiri Font</h3>\n\n```python\nfrom Nepali_nlp import preeti\nunicode_word = 'g]kfnL'\nprint(preeti(unicode_word)) #output-> \u0928\u0947\u092a\u093e\u0932\u0940\n```\n<h3>OCR(optical character reader)</h3>\n\n```python\nfrom Nepali_nlp import OCR\ntext = OCR(image_location)\n```\n<h3>Nepali Tokenizer</h3>\n\n```python\nfrom Nepali_nlp import Tokenizer\nTokenizer().sentence_tokenize(text) #To tokenize sentence\nTokenizer().word_tokenize(text) #To tokenize word\nTokenizer().character_tokenize(text) #To tokenize character\n```\n\n<h3>Nepali sentence similarity</h3>\n\n```python\nfrom Nepali_nlp import  Avg_vector_similar\nsentences = [\"\u0915\u0941\u092a\u094b\u0937\u0923\u0915\u0948 \u0915\u093e\u0930\u0923 \u0936\u093e\u0930\u0940\u0930\u093f\u0915 \u0930 \u092e\u093e\u0928\u0938\u093f\u0915 \u0930\u0941\u092a\u092e\u093e \u0915\u092e\u091c\u094b\u0930 \u092e\u093e\u0924\u094d\u0930 \u0939\u094b\u0907\u0928, \u0905\u0915\u093e\u0932\u092e\u0948 \u091c\u094d\u092f\u093e\u0928 \u092a\u0928\u093f \u0917\u0941\u092e\u093e\u0909\u0928\u0941\u0915\u094b \u092a\u0930\u0947\u0915\u094b \u0938\u092e\u093e\u091a\u093e\u0930 \u092c\u0917\u094d\u0930\u0947\u0932\u094d\u0924\u0940 \u0938\u0941\u0928\u094d\u0928 \u0938\u0915\u093f\u0928\u094d\u091b\",\"\u0915\u0930\u094d\u0923\u093e\u0932\u0940 \u092a\u094d\u0930\u0926\u0947\u0936 \u0938\u093e\u092e\u093e\u091c\u093f\u0915 \u0935\u093f\u0915\u093e\u0938 \u092e\u0928\u094d\u0924\u094d\u0930\u093e\u0932\u092f\u0932\u0947 \u0909\u092a\u0932\u092c\u094d\u0927 \u0917\u0930\u093e\u090f\u0915\u094b \u0924\u0925\u094d\u092f\u093e\u0902\u0915\u0932\u0947 \u0915\u0930\u094d\u0923\u093e\u0932\u0940\u092e\u093e \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u0930\u094d\u0937 \u091c\u0928\u094d\u092e\u093f\u090f\u0915\u093e \u096b \u0935\u0930\u094d\u0937\u092e\u0941\u0928\u0940\u0915\u093e \u092c\u093e\u0932\u092c\u093e\u0932\u093f\u0915\u093e \u0967 \u0939\u091c\u093e\u0930 \u091c\u0928\u093e\u092e\u0927\u094d\u092f\u0947 \u096b\u096e \u091c\u0928\u093e\u0932\u0947 \u091c\u094d\u092f\u093e\u0928 \u0917\u0941\u092e\u093e\u0909\u0901\u0926\u0948 \u0906\u090f\u0915\u094b \u0926\u0947\u0916\u093e\u090f\u0915\u094b \u091b\"]\nAvg_vector_similar().pair_similarity(word_vec, sentences) #output-> 0.6817289590835571\n```\n\n<h3>Nepali new-portal Scrapper (onlinekhabar and ekantipur for now)</h3>\n\n```python\nfrom Nepali_nlp import extract_news\nnews_link = 'https://www.onlinekhabar.com/2019/12/821094'\ntitle, news = extract_news(news_link) #onlinekhabar and ekantipur is supported at the moment.\n```\n<h3>Show latest news summary</h3>\n\n```python\nfrom Nepali_nlp import UpdateNews\ntitle, links, summerized_news = UpdateNews().show_latest(word_vec=word_vec,portal='onlinekhabar',number_of_news=5) #ekantipur portal is also supported\n```\n\nTODOs:</br>\n- [x] Nepali Embeddings \n- [x] Tokenizers (sentence, word, character) \n- [x] Stop Words\n- [x] Nepali Words Collection \n- [x] Nepali Word synonym\n- [x] Roman Nepali to Nepali\n- [x] Nepali OCR\n- [x] Summerization \n- [x] Pos_tag\n- [x] Sentence similarity score\n- [x] Spell correction\n- [ ] Named Entity Recognition (Currently)\n- [ ] Translation(Nepali<->English)",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/sushil79g/Nepali_nlp/archive/v0.2.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sushil79g/Nepali_nlp",
            "keywords": "NLP ml ai nepali",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Nepali-nlp",
            "package_url": "https://pypi.org/project/Nepali-nlp/",
            "platform": "",
            "project_url": "https://pypi.org/project/Nepali-nlp/",
            "project_urls": {
                "Bug Reports": "https://github.com/sushil79g/Nepali_nlp/issues",
                "Download": "https://github.com/sushil79g/Nepali_nlp/archive/v0.2.tar.gz",
                "Homepage": "https://github.com/sushil79g/Nepali_nlp",
                "Source": "https://github.com/sushil79g/Nepali_nlp"
            },
            "release_url": "https://pypi.org/project/Nepali-nlp/0.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Natural language processing library for Nepali langauge",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8352279,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d308a3ac0dee3c7cdf60be112dc1b338",
                    "sha256": "8908a06ba488a49b49d370fb8e67f150d79295374fb3f6f0272ccc2d91cb324b"
                },
                "downloads": -1,
                "filename": "Nepali nlp-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "d308a3ac0dee3c7cdf60be112dc1b338",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 14800,
                "upload_time": "2020-10-06T16:56:34",
                "upload_time_iso_8601": "2020-10-06T16:56:34.237594Z",
                "url": "https://files.pythonhosted.org/packages/54/06/cbe1c44596b2ec24942379237f44ed31f503c3f9a09a3406ee925d3da05c/Nepali%20nlp-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}