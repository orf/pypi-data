{
    "0.1.0": {
        "info": {
            "author": "Ailln",
            "author_email": "kinggreenhall@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/HaveTwoBrush/simple-jieba",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "simjb",
            "package_url": "https://pypi.org/project/simjb/",
            "platform": "",
            "project_url": "https://pypi.org/project/simjb/",
            "project_urls": {
                "Homepage": "https://github.com/HaveTwoBrush/simple-jieba"
            },
            "release_url": "https://pypi.org/project/simjb/0.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "A simple version of jieba.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14384902,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3ab7414c3f7afde3b3c09dd1a45d82f5",
                    "sha256": "975b8d28e6580bac90f74abc32cc3ba85b401b48d2495d6497ec9a98dfd97ddb"
                },
                "downloads": -1,
                "filename": "simjb-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "3ab7414c3f7afde3b3c09dd1a45d82f5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 7325,
                "upload_time": "2019-10-15T21:57:16",
                "upload_time_iso_8601": "2019-10-15T21:57:16.386709Z",
                "url": "https://files.pythonhosted.org/packages/94/0f/a4b0ed3db98ae73aebfcaa0abd792280955d2e85fa014718a488e4316972/simjb-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Ailln",
            "author_email": "kinggreenhall@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Ailln/simple-jieba",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "simjb",
            "package_url": "https://pypi.org/project/simjb/",
            "platform": "",
            "project_url": "https://pypi.org/project/simjb/",
            "project_urls": {
                "Homepage": "https://github.com/Ailln/simple-jieba"
            },
            "release_url": "https://pypi.org/project/simjb/0.1.2/",
            "requires_dist": [
                "setuptools (>=40.6.3)"
            ],
            "requires_python": "",
            "summary": "A simple version of jieba.",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14384902,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8aa68652f7abed6b34459e4a69506efe",
                    "sha256": "180a7c878c17008f4bcdd7aa71ee5e5686ef85a1db36315183e9ee4cdfa5ac25"
                },
                "downloads": -1,
                "filename": "simjb-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8aa68652f7abed6b34459e4a69506efe",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 1995888,
                "upload_time": "2020-09-23T22:36:39",
                "upload_time_iso_8601": "2020-09-23T22:36:39.776355Z",
                "url": "https://files.pythonhosted.org/packages/59/8d/1019ee17daf8e62798b2d556e16e2fb816f2357e41119be4f927c7fe1317/simjb-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2d1777ee9fa0d8d870a27300104a0484",
                    "sha256": "3918e47be5c4f464343ded5ad0aee53fd83ff08de24a45afe0c581efe1307632"
                },
                "downloads": -1,
                "filename": "simjb-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "2d1777ee9fa0d8d870a27300104a0484",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 2000842,
                "upload_time": "2020-09-23T22:36:42",
                "upload_time_iso_8601": "2020-09-23T22:36:42.215468Z",
                "url": "https://files.pythonhosted.org/packages/4f/33/e4bd095bb19bd1b09a31ce3b83c27a93373ada8fa70e98747055dfbe3c3a/simjb-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.2.0": {
        "info": {
            "author": "Ailln",
            "author_email": "kinggreenhall@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Simple Jieba\n\n[![Pypi](https://img.shields.io/pypi/v/simjb.svg)](https://pypi.org/project/simjb/)\n[![MIT License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/Ailln/simple-jieba/blob/master/LICENSE)\n[![stars](https://img.shields.io/github/stars/Ailln/simple-jieba.svg)](https://github.com/Ailln/simple-jieba/stargazers)\n\n\u2702\ufe0f \u7528 [100](simjb/token.py) \u884c\u5b9e\u73b0\u7b80\u5355\u7248\u672c\u7684 [jieba](https://github.com/fxsjy/jieba) \u5206\u8bcd\u3002\n\n> \u65b0\u7248\u672c\u800c\u5916\u589e\u52a0\u4e86 `add_word` \u548c `del_word` \u65b9\u6cd5\uff0c\u7528\u4e8e\u6dfb\u52a0\u548c\u5220\u9664\u8bcd\u9891\u5b57\u5178\u4e2d\u7684\u8bcd\uff0c\u56e0\u6b64\u603b\u4f53\u884c\u6570\u7565\u8d85 100\u3002\n\n## 1 \u5feb\u901f\u4e0a\u624b\n\n### 1.1 \u5b89\u88c5\n\n```bash\npip install simjb\n\n# \u6216\u8005\ngit clone https://github.com/Ailln/simple-jieba.git\ncd simple-jieba && python setup.py install\n```\n\n### 1.2 \u5206\u8bcd\n\n```python\nfrom simjb import cut\n\nresult = cut(\"\u4e3a\u4e2d\u534e\u4e4b\u5d1b\u8d77\u800c\u8bfb\u4e66\uff01\")\n# result: ['\u4e3a', '\u4e2d\u534e', '\u4e4b', '\u5d1b\u8d77', '\u800c', '\u8bfb\u4e66', '\uff01']\n```\n\n### 1.3 \u6dfb\u52a0\u8bcd\n\n```python\nfrom simjb import cut, add_word\n\nadd_word(\"\u4e2d\u534e\u4e4b\")\nresult = cut(\"\u4e3a\u4e2d\u534e\u4e4b\u5d1b\u8d77\u800c\u8bfb\u4e66\uff01\")\n# result: ['\u4e3a', '\u4e2d\u534e\u4e4b', '\u5d1b\u8d77', '\u800c', '\u8bfb\u4e66', '\uff01']\n```\n\n### 1.4 \u5220\u9664\u8bcd\n\n```python\nfrom simjb import cut, del_word\n\ndel_word(\"\u8bfb\u4e66\")\nresult = cut(\"\u4e3a\u4e2d\u534e\u4e4b\u5d1b\u8d77\u800c\u8bfb\u4e66\uff01\")\n# result: ['\u4e3a', '\u4e2d\u534e', '\u5d1b\u8d77', '\u800c', '\u8bfb'\uff0c '\u4e66', '\uff01']\n```\n\n## 2 \u6027\u80fd\u5bf9\u6bd4\n\n\u7531\u4e8e\u8be5\u7b80\u5355\u7248\u672c\u4ee3\u7801\u53ea\u5b9e\u73b0\u4e86 jieba \u5206\u8bcd\u7684\u6838\u5fc3\u529f\u80fd\uff0c\u53ef\u4ee5\u9884\u671f\u7684\u7ed3\u679c\u662f\uff1a**\u5206\u8bcd\u6b63\u786e\u7387\u4e0b\u964d\uff0c\u5206\u8bcd\u901f\u5ea6\u4e0a\u5347\u3002**\n\n\u6211\u4f7f\u7528\u4e86 [bakeoff2005](http://sighan.cs.uchicago.edu/bakeoff2005/) \u7684\u6570\u636e\u96c6\u4e2d\u7684 `Peking University` \u8bad\u7ec3\u96c6\u548c\n`Microsoft Research` \u8bad\u7ec3\u96c6\u8fdb\u884c\u6027\u80fd\u5bf9\u6bd4\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a\n\n> \u6d4b\u8bd5\u8bbe\u5907\uff1aMacBook Pro (13-inch, M1, 2020)\n\n| Peking University(pku) |       \u6b63\u786e\u7387\uff08\u6b63\u786e\u8bcd\u6570/\u6240\u6709\u8bcd\u6570\uff09        |      \u901f\u5ea6\uff08\u6240\u6709\u8bcd\u6570/\u82b1\u8d39\u65f6\u95f4\uff09       |\n|:----------------------:|:---------------------------:|:------------------------:|\n|         jieba          |   78.54% (871705/1109949)   |   172k (1109949/6.44s)   |\n|         simjb          | **80.58%** (894347/1109949) | **184k** (1109949/6.02s) |\n\n\n| Microsoft Research(msr) |        \u6b63\u786e\u7387\uff08\u6b63\u786e\u8bcd\u6570/\u6240\u6709\u8bcd\u6570\uff09        |       \u901f\u5ea6\uff08\u6240\u6709\u8bcd\u6570/\u82b1\u8d39\u65f6\u95f4\uff09       |\n|:-----------------------:|:----------------------------:|:-------------------------:|\n|          jieba          |   80.60% (1908851/2368422)   |   217k (2368422/10.92s)   |\n|          simjb          | **81.61%** (1932899/2368422) | **218k** (2368422/10.88s) |\n\n\u7136\u9e45\uff0c\u8fd9\u4e24\u4efd\u4e0d\u540c\u6570\u636e\u96c6\u7684\u7ed3\u679c\u90fd\u6709\u4e9b\u8be1\u5f02\uff01\u5c45\u7136\u5728\u5206\u8bcd\u6b63\u786e\u7387\u548c\u5206\u8bcd\u901f\u5ea6\u90fd\u6709\u5c0f\u5e45\u5ea6\u63d0\u5347\uff5e\n\n\u6211\u6700\u521d\u4ece jieba \u7684\u6e90\u7801\u4e2d\u6574\u7406\u51fa\u8fd9\u90e8\u5206\u7684\u6838\u5fc3\u4ee3\u7801\uff0c\u4ec5\u4ec5\u662f\u5e0c\u671b\u540e\u4eba\u60f3\u8981\u5b66\u4e60\u65f6\uff0c\u6709\u4e00\u4efd\u7b80\u660e\u6613\u61c2\u5730\u5b66\u4e60\u8d44\u6599\u3002\u4ece\u4e0a\u6587\u7684\u7ed3\u679c\u6765\u770b\uff0c\u8fd9\u4e2a\u7b80\u5355\u7248\u672c\u4f3c\u4e4e\u662f\u53ef\u7528\u7684\uff01\n\n\u5177\u4f53\u7684\u6d4b\u8bd5\u65b9\u6cd5\u89c1[\u8fd9\u91cc](test/README.md)\u3002\uff08\u6b22\u8fce\u5927\u5bb6\u53ef\u4ee5\u505a\u66f4\u591a\u7684\u6d4b\u8bd5\u6765\u6253\u8138\uff0c\u54c8\u54c8\u54c8\uff09\n\n## 3 \u6e90\u7801\u89e3\u6790\n\n![](./simjb/src/simple-jieba_flow_v1_20191016-0347.png)\n\n### 3.1 \u6839\u636e\u6b63\u5219\u89c4\u5219\u5207\u5206\u51fa\u533a\u5757\n\n\u9996\u5148\u5c06\u8f93\u5165\u7684\u53e5\u5b50\u4ee5\u89c4\u5219\u8fdb\u884c\u5206\u5272\uff0c\u5176\u4e2d\u6807\u70b9\u7b26\u53f7\u4f1a\u88ab\u72ec\u7acb\u7684\u5207\u5206\u5f00\u6765\uff0c\u5f97\u5230\u4e86\u4e00\u4e2a\u5207\u5206\u533a\u5757\u7684\u5217\u8868\u3002\n\n```python\nimport re\n\n\nclass Tokenizer(object):\n    def __init__(self) -> None:\n        self.normal_ptn = re.compile(r\"([\\u4E00-\\u9FD5a-zA-Z\\d+#&._%-]+)\", re.U)\n\n    def cut(self, sentence: str) -> list:\n        if type(sentence) != str:\n            raise TypeError(\"sentence must be str!\")\n\n        # \u4ee5\u975e\u6807\u70b9\u7b26\u53f7\u5206\u5272\u53e5\u5b50\n        text_blocks = self.normal_ptn.split(sentence)\n        cut_result = []\n        for index, block in enumerate(text_blocks):\n            if len(block) > 0:\n                if index % 2 == 0:\n                    cut_result.append(block)\n                else:\n                    cut_result.extend(self.__cut_util(block))\n        return cut_result\n```\n\n\u4f8b\u5b50\uff1a`\u5feb\u770b\uff0c\u662f\u6b66\u6c49\u5e02\u957f\u6c5f\u5927\u6865\uff01` => `[\"\u5feb\u770b\", \"\uff0c\", \"\u662f\u6b66\u6c49\u5e02\u957f\u6c5f\u5927\u6865\", \"\uff01\"]`\n\n\u4e0b\u4e00\u6b65\uff0c\u6211\u4eec\u4f1a\u5c06\u6587\u672c\u533a\u5757 `\u5feb\u770b` \u548c `\u662f\u6b66\u6c49\u5e02\u957f\u6c5f\u5927\u6865` \u8fdb\u884c\u5904\u7406\u3002\n\n### 3.2 \u6839\u636e\u8bcd\u5178\u751f\u6210\u6709\u5411\u65e0\u73af\u56fe\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u5757\uff0c\u4f7f\u7528\u4e00\u4e2a\u5de8\u5927\u7684\u8bcd\u9891\u8bcd\u5178\u5bf9\u5176\u8fdb\u884c\u5207\u5206\uff0c\u6784\u5efa\u51fa\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002 \u8bcd\u5178\u7684\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a\n\n```\nAT&T 3 nz\nB\u8d85 3 n\nc# 3 nz\nC# 3 nz\nc++ 3 nz\n...\n```\n\n\u8bcd\u5178\u6bcf\u4e00\u884c\u6709\u4e09\u4e2a\u503c\uff0c\u5206\u522b\u4e3a\uff1a`\u8bcd \u8bcd\u9891 \u8bcd\u6027`\u3002 \n\n> \u8bcd\u5178\u6570\u636e\u6765\u81ea jieba \u5206\u8bcd\uff0c\u636e\u8bf4\u662f\u7edf\u8ba1\u4e86 98 \u5e74\u4eba\u6c11\u65e5\u62a5\u8bed\u6599\u548c\u4e00\u4e9b\u5c0f\u8bf4\u7684\u5206\u8bcd\u7ed3\u679c\u6240\u5f97\u3002\n\n\u539f\u6765\u7684\u8bcd\u5178\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u9700\u8981\u5148\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u300c\u8bcd\u300d\u548c\u300c\u8bcd\u524d\u7f00\u300d\u7684\u8bcd\u9891\u5b57\u5178\u3002\n\u8bcd\u524d\u7f00\u5c31\u662f\u4e00\u4e2a\u8bcd\u524d\u9762\u7684\u5b57\u6784\u6210\u8bcd\uff0c\u6bd4\u5982\u6211\u4eec\u6709\u4e2a\u8bcd\u53eb`\u957f\u6c5f\u5927\u6865`\uff0c\u90a3\u4e48\u5b83\u7684\u8bcd\u524d\u7f00\u5c31\u662f`\u957f`\uff0c`\u957f\u6c5f`\uff0c`\u957f\u6c5f\u5927`\u3002\n\u6dfb\u52a0\u5b83\u4e3a\u4e86\u5728\u4e0b\u6587\u4e2d\u5339\u914d\u8bcd\u8bed\u7684\u65f6\u5019\u53ef\u4ee5\u5339\u914d\u5230\u957f\u8bcd\uff0c\u5982\u679c\u6ca1\u6709\u524d\u7f00\uff0c\u90a3\u4e48`\u957f\u6c5f\u5927\u6865`\u5c31\u53ea\u80fd\u88ab\u5339\u914d\u6210`\u957f\u6c5f`\u548c`\u5927\u6865`\u3002\n\u524d\u7f00\u7684\u8bcd\u9891\u88ab\u8bbe\u7f6e\u4e3a 0\uff0c\u8fd9\u6837\u5b83\u53ea\u8d77\u5230\u5339\u914d\u4f5c\u7528\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5206\u8bcd\u7ed3\u679c\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u63cf\u8ff0\u4e86\u8be6\u7ec6\u7684\u6784\u5efa\u8bcd\u9891\u5b57\u5178\u7684\u8fc7\u7a0b\uff1a\n\n```python\nfrom time import perf_counter\nfrom pkg_resources import resource_stream\n\n\nclass Tokenizer(object):\n    def __init__(self) -> None:\n        self.dict_path = [\"simjb\", \"src/dict.txt\"]\n        self.freq_dict = {}\n        self.freq_total = 0\n\n        self.__init_freq_dict()\n\n    def __init_freq_dict(self) -> None:\n        start_time = perf_counter()\n        with resource_stream(*self.dict_path) as stream:\n            for line in stream.readlines():\n                word, freq, _ = line.decode(\"utf-8\").split(\" \")\n                self.freq_dict[word] = int(freq)\n                self.freq_total += int(freq)\n                self.__add_prefix_word_to_dict(word)\n        end_time = perf_counter()\n        print(f\"load freq_dict cost: {end_time - start_time:.2f}s\")\n\n    def __add_prefix_word_to_dict(self, word: str) -> None:\n        for word_index in range(len(word)-1):\n            word_frag = word[:word_index + 1]\n            if word_frag not in self.freq_dict.keys():\n                self.freq_dict[word_frag] = 0\n```\n\n\u73b0\u5728\u6211\u4eec\u8981\u6765\u6784\u5efa\u300c\u6709\u5411\u65e0\u73af\u56fe\u300d`Directed Acyclic Graphs` \u4e86\uff1a\n\n```python\nfrom typing import Dict, List\n\n\nclass Tokenizer(object):\n    def __init__(self) -> None:\n        self.freq_dict = {}\n        self.freq_total = 0\n\n    def __build_dag(self, sentence: str) -> Dict[int, List[int]]:\n        dag = {}\n        sen_len = len(sentence)\n        for i in range(sen_len):\n            temp_list = []\n            j = i\n            fragment = sentence[i]\n            while j < sen_len and fragment in self.freq_dict.keys():\n                if self.freq_dict[fragment] > 0:\n                    temp_list.append(j)\n                j += 1\n                fragment = sentence[i:j+1]\n            if not temp_list:\n                temp_list.append(i)\n            dag[i] = temp_list\n        return dag\n```\n\n\u4ece\u5934\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u8bcd\uff08\u4e0a\u6587\u4e2d\u7684\u524d\u7f00\u7684\u4f5c\u7528\u5c31\u5728\u8fd9\u91cc\uff09\uff0c\u5982\u679c\u5b83\u5728\u8bcd\u9891\u5b57\u5178\u4e2d\u5c31\u8bb0\u5f55\u4e0b\u6765\uff0c\u6700\u540e\u6784\u6210\u4e86\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\n\n\u6709\u5411\u65e0\u73af\u56fe\u7684\u5b58\u50a8\u5f62\u5f0f\u662f `Dict[int, List[int]]`\uff0c\u6bcf\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u5b58\u50a8\u7684\u662f\u4ee5\u5f53\u524d\u5b57\u5f00\u59cb\u53ef\u80fd\u5f62\u6210\u7684\u8bcd\u8bed\u7d22\u5f15\uff0c\u4e3e\u4f8b\u5982\u4e0b\uff1a\n\n```python\n# \u5feb\u770b\n{0: [0], 1: [1]}\n# \u662f\u6b66\u6c49\u5e02\u957f\u6c5f\u5927\u6865\n{0: [0], 1: [1, 2, 3], 2: [2], 3: [3, 4], 4: [4, 5, 7], 5: [5], 6: [6, 7], 7: [7]}\n```\n\n\u6211\u4eec\u6765\u770b\u7b2c 2 \u53e5\u7684\u7b2c 5 \u4e2a\u5143\u7d20 `4: [4, 5, 7]`\uff0c\u5b83\u8868\u793a\u7684\u662f `(4, 4) (4, 5) (4, 7)`\uff0c\u5373 `\u957f \u957f\u6c5f \u957f\u6c5f\u5927\u6865`\u3002\n\n### 3.3 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u6700\u5927\u6982\u7387\u8def\u5f84\n\n\u6709\u4e86\u533a\u5757\u7684\u6709\u5411\u65e0\u73af\u56fe\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u8981\u60f3\u529e\u6cd5\u6c42\u89e3\u51fa\u6700\u5927\u6982\u7387\u8def\u5f84\u4e86\u3002\n\n\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u53cd\u5411\u9012\u63a8\u51fa\u57fa\u4e8e\u8bcd\u9891\u7684\u6700\u5927\u5207\u5206\u7ec4\u5408\uff0c\u5177\u4f53\u7684\u516c\u5f0f\u548c\u8be6\u7ec6\u8fc7\u7a0b\u53c2\u8003\u6587\u672b\u7ed9\u51fa\u8d44\u6599\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```python\nimport math\nfrom typing import Dict\n\nclass Tokenizer(object):\n    def __init__(self) -> None:\n        self.freq_dict = {}\n        self.freq_total = 0\n\n    def __calc_route_with_dp(self, sentence: str) -> Dict[int, tuple]:\n        dag = self.__build_dag(sentence)\n        sen_len = len(sentence)\n        route = {sen_len: (0, 0)}\n        # \u53d6 log \u9632\u6b62\u6570\u503c\u4e0b\u6ea2\uff1b\u53d6 log(1)=0 \u89e3\u51b3 log(0) \u65e0\u5b9a\u4e49\u95ee\u9898\n        log_total = math.log(self.freq_total or 1)\n        for sen_index in reversed(range(sen_len)):\n            freq_score = {}\n            for word_index in dag[sen_index]:\n                word_freq = self.freq_dict.get(sentence[sen_index:word_index + 1])\n                freq_score[word_index] = round(math.log(word_freq or 1) - log_total + route[word_index+1][1], 4)\n            route[sen_index] = max(freq_score.items(), key=lambda x: x[1])\n        return route\n```\n\n> trick: \u4f7f\u7528 log \u8fdb\u884c\u8ba1\u7b97\u6765\u9632\u6b62 python \u4ea7\u751f\u6570\u503c\u4e0b\u6ea2\u3002\n\n\u6700\u5927\u5207\u5206\u7ec4\u5408\u7684\u7ed3\u679c\u5982\u4e0b\uff1a\n\n```python\n# \u662f\u6b66\u6c49\u5e02\u957f\u6c5f\u5927\u6865\n{8: (0, 0), 7: (7, -8.8638), 6: (7, -9.8135), 5: (5, -19.0118), 4: (7, -9.6536), 3: (3, -16.965), 2: (2, -25.7804), 1: (3, -17.5314), 0: (0, -21.8544)}\n```\n\n### 3.4 \u5408\u5e76\u6240\u6709\u533a\u5757\u5207\u5206\u7ed3\u679c\n\n\u5f97\u5230\u533a\u5757\u7684\u5207\u5206\u540e\uff0c\u8fd8\u9700\u8981\u5904\u7406\u4e00\u4e9b\u7ec6\u8282\uff0c\u6bd4\u5982\u82f1\u8bed\u5355\u8bcd\uff0c\u5e94\u8be5\u5c06\u8fde\u7eed\u82f1\u6587\u5b57\u6bcd\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u7684\u82f1\u6587\u5355\u8bcd\u5207\u5206\u3002\n\n```python\nimport re\n\n\nclass Tokenizer(object):\n    def __init__(self) -> None:\n        self.en_ptn = re.compile(r\"[a-zA-Z\\d]\", re.U)\n\n    def __cut_util(self, sentence: str) -> list:\n        route = self.__calc_route_with_dp(sentence)\n        result = []\n        word_buf = \"\"\n        word_index = 0\n        while word_index < len(sentence):\n            word_index_end = route[word_index][0] + 1\n            word = sentence[word_index:word_index_end]\n            # \u5339\u914d\u51fa\u82f1\u6587\n            if self.en_ptn.match(word) and len(word) == 1:\n                word_buf += word\n                word_index = word_index_end\n            else:\n                if word_buf:\n                    result.append(word_buf)\n                    word_buf = \"\"\n                else:\n                    result.append(word)\n                    word_index = word_index_end\n        if word_buf:\n            result.append(word_buf)\n        return result\n```\n\n\u6700\u540e\u628a\u6240\u6709\u7ed3\u679c\u6c47\u603b\uff0c\u5206\u8bcd\u5c31\u5b8c\u6210\u4e86\uff01\n\n```python\n# \u8f93\u5165\n\"\u5feb\u770b\uff0c\u662f\u6b66\u6c49\u5e02\u957f\u6c5f\u5927\u6865\uff01\"\n# \u8f93\u51fa\n[\"\u5feb\", \"\u770b\", \"\uff0c\", \"\u662f\", \"\u6b66\u6c49\u5e02\", \"\u957f\u6c5f\u5927\u6865\", \"\uff01\"]\n```\n\njieba \u5206\u8bcd\u672c\u8eab\u8981\u6bd4\u8fd9\u4e2a\u66f4\u590d\u6742\uff0c\u9664\u4e86\u4e0a\u6587\u7528\u5230\u7684\u6280\u672f\uff0c\u5b83\u8fd8\u4f7f\u7528\u4e86\u8bb8\u591a\u5176\u4ed6\u6280\u672f\uff0c\u6bd4\u5982\u4f7f\u7528 HMM \u5bf9\u300c\u672a\u767b\u5f55\u8bcd\u300d\u8fdb\u884c\u5904\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u9605\u8bfb[\u6e90\u7801](https://github.com/fxsjy/jieba)\u3002\n\n## 4 \u8bb8\u53ef\u8bc1\n\n[![](https://award.dovolopor.com?lt=License&rt=MIT&rbc=green)](./LICENSE)\n\n## 5 \u53c2\u8003\u8d44\u6599\n\n- [jieba\u6e90\u7801\u89e3\u6790\uff08\u4e00\uff09\uff1a\u5206\u8bcd\u4e4b\u524d](https://www.cnblogs.com/aloiswei/p/11507763.html)\n- [jieba\u6e90\u7801\u89e3\u6790\uff08\u4e8c\uff09\uff1ajieba.cut](https://www.cnblogs.com/aloiswei/p/11567616.html)\n- [\u4e2d\u6587\u5206\u8bcd\u5de5\u5177\u63a2\u6790\uff08\u4e8c\uff09\uff1aJieba](https://www.cnblogs.com/en-heng/p/6234006.html)\n- [\u7ed3\u5df4\u5206\u8bcd2--\u57fa\u4e8e\u524d\u7f00\u8bcd\u5178\u53ca\u52a8\u6001\u89c4\u5212\u5b9e\u73b0\u5206\u8bcd](https://www.cnblogs.com/zhbzz2007/p/6084196.html)\n- [\u4e0d\u7528Trie\uff0c\u51cf\u5c11\u5185\u5b58\u52a0\u5feb\u901f\u5ea6\uff1b\u4f18\u5316\u4ee3\u7801\u7ec6\u8282](https://github.com/fxsjy/jieba/pull/187)\n- [\u4e2d\u6587\u5206\u8bcd\u76f8\u5173\u8d44\u6599](https://github.com/Ailln/nlp-roadmap#1-%E5%88%86%E8%AF%8D-word-segmentation)\n- [\u5982\u4f55\u4ece\u6a21\u677f\u521b\u5efa\u4ed3\u5e93\uff1f](https://help.github.com/cn/articles/creating-a-repository-from-a-template)\n- [\u5982\u4f55\u53d1\u5e03\u81ea\u5df1\u7684\u5305\u5230 pypi \uff1f](https://www.v2ai.cn/python/2018/07/30/PY-1.html)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Ailln/simple-jieba",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "simjb",
            "package_url": "https://pypi.org/project/simjb/",
            "platform": null,
            "project_url": "https://pypi.org/project/simjb/",
            "project_urls": {
                "Homepage": "https://github.com/Ailln/simple-jieba"
            },
            "release_url": "https://pypi.org/project/simjb/0.2.0/",
            "requires_dist": [
                "setuptools (>=40.6.3)"
            ],
            "requires_python": ">=3.6",
            "summary": "A simple version of jieba.",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14384902,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0b2585615fc666e77733a4cbc82e0729",
                    "sha256": "edff617a94e1a0d4e9888e5d10abe96a70789a77f02735f1225c452d356275e9"
                },
                "downloads": -1,
                "filename": "simjb-0.2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0b2585615fc666e77733a4cbc82e0729",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 1997035,
                "upload_time": "2022-07-09T15:03:40",
                "upload_time_iso_8601": "2022-07-09T15:03:40.910033Z",
                "url": "https://files.pythonhosted.org/packages/87/7e/b4e0decc337de034eca30597f3e18f9670f284fe6b993f216a1886d1d821/simjb-0.2.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "2b8620b2dcfc240e130e3efb7ca27096",
                    "sha256": "f54f8f6bea69331d7ff2c91e3ba9992c7ae8fb33efe6a897ab85c4fc70c845f5"
                },
                "downloads": -1,
                "filename": "simjb-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "2b8620b2dcfc240e130e3efb7ca27096",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 2001946,
                "upload_time": "2022-07-09T15:03:44",
                "upload_time_iso_8601": "2022-07-09T15:03:44.562279Z",
                "url": "https://files.pythonhosted.org/packages/38/d3/6e36ec41215485f05c7816fa482c6415dd3e107d03b6186f73785907e540/simjb-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}