{
    "1.0.1": {
        "info": {
            "author": "am230",
            "author_email": "am.230@outlook.jp",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Write javascript in python with python syntax\n\n## Usage\n\n### sample 1\n\n```python\nprint(py2js.convert('''\ndef test():\n    console.log('text')\n'''))\n```\n\noutput\n\n```javascript\nlet test = () => {\n    console.log(\"text\")\n}\n```\n\n### sample 2\n\n```python\nimport py2js\n\ndef main():\n    class Test:\n        def log(text):\n            console.log(text)\n\n    class Main(Test):\n        def __init__(self, a, b, *args) -> None:\n            self.a = a\n            self.b = b\n            self.args = args\n        \n        def sum(self):\n            self.log([self.a, self.b, *self.args].reduce(lambda sum, element: sum + element, 0))\n\n    @console.log\n    class Decorated:\n        pass\n\n    Main(1, 2, 3, 4, 5).sum()\n\nprint(py2js.convert(main))\n```\n\noutput\n\n```javascript\nlet main = () => {\n    let Test = class {\n        constructor(...args) {\n            if ('__init__' in this) this.__init__(this, ...args);\n            return new Proxy(this, {\n                apply: (target, self, args) => target.__call__(self, ...args),\n                get: (target, prop, receiver) => {\n                    if (target[prop] instanceof Function) {\n                        return (...args) => target[prop](target, ...args)\n                    } else {\n                        return target[prop]\n                    }\n                }\n            })\n        }\n        log(text) {\n            console.log(text)\n        }\n    }\n    if (typeof Test !== 'undefined') {\n        Test = new Proxy(Test, {\n            apply: (clazz, thisValue, args) => new clazz(...args)\n        })\n    };\n    let Main = class {\n        constructor(...args) {\n            if ('__init__' in this) this.__init__(this, ...args);\n            return new Proxy(this, {\n                apply: (target, self, args) => target.__call__(self, ...args),\n                get: (target, prop, receiver) => {\n                    if (target[prop] instanceof Function) {\n                        return (...args) => target[prop](target, ...args)\n                    } else {\n                        return target[prop]\n                    }\n                }\n            })\n        }\n        __init__(self, a, b, ...args) {\n            self.a = a;\n            self.b = b;\n            self.args = args\n        };\n        sum(self) {\n            self.log([self.a, self.b, ...self.args].reduce((sum, element) => sum + element, false))\n        }\n    }\n    Object.getOwnPropertyNames(Test.prototype).forEach(name => {\n        if (name !== 'constructor') {\n            Main.prototype[name] = Test.prototype[name];\n        }\n    });\n    if (typeof Main !== 'undefined') {\n        Main = new Proxy(Main, {\n            apply: (clazz, thisValue, args) => new clazz(...args)\n        })\n    };\n    let Decorated = class {\n        constructor(...args) {\n            if ('__init__' in this) this.__init__(this, ...args);\n            return new Proxy(this, {\n                apply: (target, self, args) => target.__call__(self, ...args),\n                get: (target, prop, receiver) => {\n                    if (target[prop] instanceof Function) {\n                        return (...args) => target[prop](target, ...args)\n                    } else {\n                        return target[prop]\n                    }\n                }\n            })\n        } /* pass */ /* pass */\n    }\n    Decorated = console.log(Decorated);\n    if (typeof Decorated !== 'undefined') {\n        Decorated = new Proxy(Decorated, {\n            apply: (clazz, thisValue, args) => new clazz(...args)\n        })\n    };\n    Main(true, 2, 3, 4, 5).sum()\n}\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/am230/py2js",
            "keywords": "javascript,convert",
            "license": "MIT Licence",
            "maintainer": "",
            "maintainer_email": "",
            "name": "py2js",
            "package_url": "https://pypi.org/project/py2js/",
            "platform": "any",
            "project_url": "https://pypi.org/project/py2js/",
            "project_urls": {
                "Homepage": "https://github.com/am230/py2js"
            },
            "release_url": "https://pypi.org/project/py2js/1.0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Write javascript in python with python syntax",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16057990,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c92ac4f26491da357c573775bd0b442c",
                    "sha256": "2da13b773a0e340b458a42749350a698143772ecb5e05b14cfe34d5e7ac45494"
                },
                "downloads": -1,
                "filename": "py2js-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "c92ac4f26491da357c573775bd0b442c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 7843,
                "upload_time": "2022-12-10T13:48:54",
                "upload_time_iso_8601": "2022-12-10T13:48:54.696699Z",
                "url": "https://files.pythonhosted.org/packages/0b/81/a896892249b5e218a4fe3f6631afacff31cdda7d97945f043e1b89600a55/py2js-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}