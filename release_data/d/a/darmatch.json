{
    "0.2.0": {
        "info": {
            "author": "wangzejun",
            "author_email": "wangzejunscut@126.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Operating System :: Unix",
                "Programming Language :: Python :: 2.7",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering",
                "Topic :: Software Development"
            ],
            "description": "darmatch\n========\nhttps://github.com/zejunwang1/darmatch\n\ndarmatch\n\u662f\u4e00\u4e2a\u975e\u5e38\u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u5339\u914d\u5de5\u5177\uff0c\u652f\u6301\u6b63\u5411/\u53cd\u5411\u6700\u5927\u5339\u914d\u5206\u8bcd\u548c\u591a\u6a21\u5f0f\u5b57\u7b26\u4e32\u7cbe\u786e\u5339\u914d\uff1a\n\n-  \u4ec5\u5305\u542b\u5934\u6587\u4ef6 (header-only)\n\n-  \u57fa\u4e8e\u53cc\u6570\u7ec4\u5b57\u5178\u6811 (double-array trie) \u7684\u6a21\u5f0f\u5339\u914d\n\nC++\n---\n\n\u4f7f\u7528\u793a\u4f8b\u53ef\u4ee5\u53c2\u8003 tests \u6587\u4ef6\u5939\u4e2d\u7684 test.cpp\uff1a\n\n.. code:: cpp\n\n   #include <iostream>\n   #include <darmatch.h>\n\n   int main(int argc, char** argv) {\n     std::vector<std::string> args(argv, argv + argc);\n     std::string dict_path, user_dict_path;\n     for (int i = 1; i < args.size(); i += 2) {\n       if (args[i] == \"--dict_path\") {\n         dict_path = std::string(args.at(i + 1));\n       } else if (args[i] == \"--user_dict_path\") {\n         user_dict_path = std::string(args.at(i + 1));\n       } else {\n         std::cout << \"Unknown argument: \" << args[i] << std::endl;\n         std::cout << \"Supported argument: --dict_path --user_dict_path\" << std::endl;\n         exit(EXIT_FAILURE);\n       }\n     }\n\n     /*\n       initialization methods:\n       darmatch::DarMatch da;\n       darmatch::DarMatch da(dict_path, user_dict_path = \"\");\n     */\n     darmatch::DarMatch da(dict_path, user_dict_path);\n\n     std::string text = \"\u4fc4\u7f57\u65af\u8054\u90a6\u603b\u7edf\u666e\u4eac\u51b3\u5b9a\u5728\u987f\u5df4\u65af\u5730\u533a\u5f00\u5c55\u7279\u522b\u519b\u4e8b\u884c\u52a8\u3002\";\n\n     /*\n       maximum forward matching:\n       std::vector<std::pair<size_t, std::string>> fwords = da.seg(text);\n       ----------------------------------------------\n       std::vector<std::pair<size_t, std::string>> fwords;\n       da.seg(text, fwords);\n     */\n     std::vector<std::pair<size_t, std::string>> fwords = da.seg(text);\n     std::cout << \"The Chinese word segmentation based on Maximum Forward Matching: \" << std::endl;\n     for (size_t i = 0; i < fwords.size(); i++) {\n       std::cout << fwords[i].second << \" \";\n     }\n     std::cout << std::endl;\n\n     /*\n       maximum backward matching:\n       std::vector<std::pair<size_t, std::string>> bwords = da.seg(text, false);\n       ------------------------------------------------------\n       std::vector<std::pair<size_t, std::string>> bwords;\n       da.seg(text, bwords, false);\n     */\n     std::vector<std::pair<size_t, std::string>> bwords = da.seg(text, false);\n     std::cout << \"The Chinese word segmentation based on Maximum Backward Matching: \" << std::endl;\n     for (size_t i = 0; i < bwords.size(); i++) {\n       std::cout << bwords[i].second << \" \";\n     }\n     std::cout << std::endl;\n\n     /*\n       update the double-array trie by insert:\n       da.insert(const std::string&);\n       da.insert(const std::vector<std::string>&);\n     */\n     da.insert(\"\u4fc4\u7f57\u65af\u8054\u90a6\u603b\u7edf\");\n\n     // multi-pattern string matching\n     std::vector<std::pair<size_t, std::string>> result = da.parse(text);\n     std::cout << \"The result of multi-pattern string matching: \" << std::endl;\n     for (size_t i = 0; i < result.size(); i++) {\n       std::cout << result[i].first << \"\\t\" << result[i].second << std::endl; \n     }\n     return 0;\n   }\n\n\u901a\u8fc7 cmake \u8fdb\u884c\u7f16\u8bd1\uff1a\n\n.. code:: shell\n\n   git clone https://github.com/zejunwang1/darmatch\n   cd darmatch\n   mkdir build\n   cmake ..\n   # cmake -DUSE_PREFIX_TRIE=ON ..\n   make\n\n\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\u540e\uff0c\u4f1a\u5728 darmatch/build \u6587\u4ef6\u5939\u4e2d\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 test\u3002\n\n.. code:: shell\n\n   ./test --dict_path ../tests/dict.txt\n\n\u8fd0\u884c\u540e\u7ed3\u679c\u5982\u4e0b\uff1a\n\n::\n\n   The Chinese word segmentation based on Maximum Forward Matching: \n   \u4fc4\u7f57\u65af\u8054\u90a6 \u603b\u7edf \u666e\u4eac \u51b3\u5b9a \u5728 \u987f\u5df4\u65af\u5730\u533a \u5f00\u5c55 \u7279\u522b \u519b\u4e8b\u884c\u52a8 \u3002 \n   The Chinese word segmentation based on Maximum Backward Matching: \n   \u4fc4\u7f57\u65af \u8054\u90a6\u603b\u7edf \u666e\u4eac \u51b3\u5b9a \u5728 \u987f\u5df4\u65af\u5730\u533a \u5f00\u5c55 \u7279\u522b \u519b\u4e8b\u884c\u52a8 \u3002 \n   The result of multi-pattern string matching: \n   0   \u4fc4\u7f57\u65af\u8054\u90a6\n   0   \u4fc4\u7f57\u65af\u8054\u90a6\u603b\u7edf\n   9   \u8054\u90a6\u603b\u7edf\n   21  \u666e\u4eac\n   27  \u51b3\u5b9a\n   36  \u987f\u5df4\u65af\u5730\u533a\n   51  \u5f00\u5c55\n   63  \u519b\u4e8b\u884c\u52a8\n\nPython\n------\n\nRequirements\n~~~~~~~~~~~~\n\n-  Python version >= 3.6\n\n-  pybind11 >= 2.2\n\n-  setuptools >= 0.7.0\n\n-  typing\n\nInstallation\n~~~~~~~~~~~~\n\n\u901a\u8fc7 pip \u547d\u4ee4\u76f4\u63a5\u5b89\u88c5\uff1a\n\n.. code:: shell\n\n   pip install darmatch\n\n\u6216\u8005\u4ece github \u4ed3\u5e93\u4e2d\u83b7\u53d6\u6700\u65b0\u7248\u672c\u5b89\u88c5\uff1a\n\n.. code:: shell\n\n   git clone https://github.com/zejunwang1/darmatch\n   cd darmatch\n   pip install .\n   # or:\n   python setup.py install\n\nDemo\n~~~~\n\n.. code:: python\n\n   from darmatch import DarMatch\n   da = DarMatch()\n   # da = DarMatch(dict_path, user_dict_path=\"\")\n   words = [\"\u4fc4\u7f57\u65af\u8054\u90a6\", \"\u8054\u90a6\u603b\u7edf\", \"\u666e\u4eac\", \"\u51b3\u5b9a\", \"\u987f\u5df4\u65af\u5730\u533a\", \"\u5f00\u5c55\", \"\u519b\u4e8b\u884c\u52a8\"]\n   da.insert(words)\n   text = \"\u4fc4\u7f57\u65af\u8054\u90a6\u603b\u7edf\u666e\u4eac\u51b3\u5b9a\u5728\u987f\u5df4\u65af\u5730\u533a\u5f00\u5c55\u7279\u522b\u519b\u4e8b\u884c\u52a8\u3002\"\n\n   # maximum forward matching\n   word_list = da.seg(text, forward=True, return_loc=True)\n   print(\"The Chinese word segmentation based on Maximum Forward Matching:\")\n   print(word_list)\n\n   # maximum backward matching\n   word_list = da.seg(text, forward=False, return_loc=True)\n   print(\"The Chinese word segmentation based on Maximum Backward Matching:\")\n   print(word_list)\n\n   # multi-pattern string matching\n   da.insert(\"\u4fc4\u7f57\u65af\u8054\u90a6\u603b\u7edf\")\n   word_list = da.parse(text, char_loc=True)\n   print(\"The result of multi-pattern string matching:\")\n   print(word_list)\n\n\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a\n\n::\n\n   The Chinese word segmentation based on Maximum Forward Matching:\n   [(0, '\u4fc4\u7f57\u65af\u8054\u90a6'), (5, '\u603b\u7edf'), (7, '\u666e\u4eac'), (9, '\u51b3\u5b9a'), (11, '\u5728'), (12, '\u987f\u5df4\u65af\u5730\u533a'), (17, '\u5f00\u5c55'), (19, '\u7279\u522b'), (21, '\u519b\u4e8b\u884c\u52a8'), (25, '\u3002')]\n   The Chinese word segmentation based on Maximum Backward Matching:\n   [(0, '\u4fc4\u7f57\u65af'), (3, '\u8054\u90a6\u603b\u7edf'), (7, '\u666e\u4eac'), (9, '\u51b3\u5b9a'), (11, '\u5728'), (12, '\u987f\u5df4\u65af\u5730\u533a'), (17, '\u5f00\u5c55'), (19, '\u7279\u522b'), (21, '\u519b\u4e8b\u884c\u52a8'), (25, '\u3002')]\n   The result of multi-pattern string matching:\n   [(0, '\u4fc4\u7f57\u65af\u8054\u90a6'), (0, '\u4fc4\u7f57\u65af\u8054\u90a6\u603b\u7edf'), (3, '\u8054\u90a6\u603b\u7edf'), (7, '\u666e\u4eac'), (9, '\u51b3\u5b9a'), (12, '\u987f\u5df4\u65af\u5730\u533a'), (17, '\u5f00\u5c55'), (21, '\u519b\u4e8b\u884c\u52a8')]\n\nSpeed\n~~~~~\n\n\u548c\u57fa\u4e8e Aho-Corasick \u7684\u5b57\u7b26\u4e32\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u5de5\u5177 esmre \u8fdb\u884c\u5904\u7406\u901f\u5ea6\u5bf9\u6bd4\u3002\n\n\u53ef\u4ee5\u4f7f\u7528 pip \u547d\u4ee4\u5b89\u88c5 esmre\uff1a\n\n.. code:: shell\n\n   pip install esmre\n\n\u5728 tests \u6587\u4ef6\u5939\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u5339\u914d\u9700\u8981\u7528\u5230\u7684\u5173\u952e\u8bcd\u8bcd\u5178\u6587\u4ef6\nstring_match_dict.txt\uff0c\u5171\u8ba1\u6709 348982\n\u4e2a\u5173\u952e\u8bcd\u3002\u5f85\u8fdb\u884c\u5339\u914d\u7684\u6587\u672c\u5b57\u7b26\u4e32\u6587\u4ef6 check_text.txt\uff0c\u5171\u8ba1\u6709 273864\n\u4e2a\u5b57\u7b26\u3002\n\n.. code:: shell\n\n   python test_speed.py\n\n\u8fd0\u884c\u540e\u7ed3\u679c\u5982\u4e0b\uff1a\n\n::\n\n   the number of matching results by esm:  343623\n   esm time usage: 0.4515085220336914s\n   ----------------------------------------------------\n   the number of matching results by darmatch:  343623\n   darmatch time usage: 0.1248319149017334s121s\n\n\u53ef\u4ee5\u770b\u51fa\uff0cdarmatch \u6bd4 esm \u5feb 3~4 \u500d\u5de6\u53f3\u3002\n\nContact\n-------\n\n\u90ae\u7bb1\uff1a wangzejunscut@126.com\n\n\u5fae\u4fe1\uff1aautonlp\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/zejunwang1/darmatch",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "darmatch",
            "package_url": "https://pypi.org/project/darmatch/",
            "platform": null,
            "project_url": "https://pypi.org/project/darmatch/",
            "project_urls": {
                "Homepage": "https://github.com/zejunwang1/darmatch"
            },
            "release_url": "https://pypi.org/project/darmatch/0.2.0/",
            "requires_dist": [
                "pybind11 (>=2.2)",
                "setuptools (>=0.7.0)",
                "typing"
            ],
            "requires_python": "",
            "summary": "darmatch Python bindings",
            "version": "0.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13213826,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ee79ed0a281393883f7879bf1ee6c433",
                    "sha256": "034ee9c9eb07ae8cfe36bd7b63cebd5a926d13fb1752d62500e30dfb851dcd1a"
                },
                "downloads": -1,
                "filename": "darmatch-0.2.0-cp37-cp37m-manylinux1_x86_64.whl",
                "has_sig": false,
                "md5_digest": "ee79ed0a281393883f7879bf1ee6c433",
                "packagetype": "bdist_wheel",
                "python_version": "cp37",
                "requires_python": null,
                "size": 790699,
                "upload_time": "2022-03-18T07:58:53",
                "upload_time_iso_8601": "2022-03-18T07:58:53.729157Z",
                "url": "https://files.pythonhosted.org/packages/1b/75/eb20a6f458316aaa81bd7ddf8762d23adb7bdac80e35332e808a92f3572a/darmatch-0.2.0-cp37-cp37m-manylinux1_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "74c39135a20ad6597af9a882b50f32d4",
                    "sha256": "b5f29f28602bde14c6a6b9fbe7f894297cf474051189ff8af97d9da34acb6c78"
                },
                "downloads": -1,
                "filename": "darmatch-0.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "74c39135a20ad6597af9a882b50f32d4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 6864,
                "upload_time": "2022-03-18T07:58:56",
                "upload_time_iso_8601": "2022-03-18T07:58:56.292523Z",
                "url": "https://files.pythonhosted.org/packages/b3/a5/0b56cf25f8996ae512ffdf9943e2624c52a5fa0a73d6f4e35854480db426/darmatch-0.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}