{
    "0.6.1": {
        "info": {
            "author": "Mohamed El-Kalioby",
            "author_email": "mkalioby@mkalioby.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# QyPy\n\nQuery list of dictionaries or objects as if you are filtering in  DBMS. You can get dicts/objects that are matched by OR, AND or NOT or all of them.\n\n## Installation\n\n```shell\npip install QyPy\n```\n\n## Usage\n\n```python\nfrom query import Q\nl = [{\"name\":\"John\",\"age\":\"16\"}, {\"name\":\"Mike\",\"age\":\"19\"},{\"name\":\"Sarah\",\"age\":\"21\"}]\nfiltered= Q(l,{'name__contains':\"k\", \"age__lt\":20})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'Mike', 'age': '19'}]\n```\n\nThe above filtration can be written as\n```python\nfrom query import Q\nl = [{\"name\":\"John\",\"age\":\"16\"}, {\"name\":\"Mike\",\"age\":\"19\"},{\"name\":\"Sarah\",\"age\":\"21\"}]\nfiltered= Q(l,name__contains=\"k\", age__lt = 20)\n\n```\n\n**Notes:** \n1. `Q` returns an iterator which can be converted to a list by calling `list`.\n2. Even though, age was `str` in the dict, as the value of in the query dict was `int`, QyPy converted the value in dict automatically to match the query data type. This behaviour can be stopped by passing `False` to `convert_types` parameter.\n\n## Supported filters\n* `eq`: equals and this default filter\n* `gt`: greater than.\n* `gte`: greater than or equal.\n* `lt`: less than \n* `lte`: less than or equal \n* `in`: the value in a list of a tuple.\n    * e.g.  age__in=[10,20,30]\n* `contains`: contains a substring as in the example.\n* `icontains`: case-insensitive `contains`.\n* `startswith`: checks if a value starts with a query strings.\n* `istartswith`: case-insensitive `startswith`.\n* `endswith`: checks if a value ends with a query strings.\n* `iendswith`: case-insensitive `endswith`.\n* `isnull`:  checks if the value matches any of NULL_VALUES which are `('', '.', None, \"None\", \"null\", \"NULL\")`\n  * e.g. `filter__isnull=True` or `filter__isnull=False`\n\nFor `eq`,`gt`,`gte`,`lt`,`lte`, `in`, `contains`, `icontains`, `startswith`,`istartswith`, `endswith` and `iendswith`, you can add a `n` to negate the results. e.g  `nin` which is equivalent to `not in` \n\n   \n## Advanced examples\nThis section will cover the use of `OR`, `AND` and `NOT`\n\n### Usage of `OR`\n`OR` or `__or__` takes a list of dictionaries to evaluate and returns with the first `True`.  \n```python\nfrom query import Q\nl = [{\"name\":\"John\",\"age\":\"16\"}, {\"name\":\"Mike\",\"age\":\"19\"},{\"name\":\"Sarah\",\"age\":\"21\"}]\nfiltered= Q(l,{\"OR\":[{\"name__contains\":\"k\"}, {\"age__gte\":21}]})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'Mike', 'age': '19'}, {'name': 'Sarah', 'age': '21'}]\n```\n\n### Usage of `NOT`\n`NOT` or `__not__` takes a dict for query run.  \n```python\nfrom query import Q\nl = [{\"name\":\"John\",\"age\":\"16\"}, {\"name\":\"Mike\",\"age\":\"19\"},{\"name\":\"Sarah\",\"age\":\"21\"}]\nfiltered= Q(l,{\"age__gt\":15, \"NOT\":{\"age__eq\":19}})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'John', 'age': '16'}, {'name': 'Sarah', 'age': '21'}]\n```\n\n### Usage of `AND`\n`AND` or `__and__` takes a list of dict for query run, returns with the first `False`.\n\n```python\nfrom query import Q\nl = [{\"name\":\"John\",\"age\":\"16\"}, {\"name\":\"Mike\",\"age\":\"19\"},{\"name\":\"Sarah\",\"age\":\"21\"}]\nfiltered= Q(l,{\"__and__\":[{\"age__gte\":15},{\"age__lt\":21}]})\nprint(list(filtered))\n```\noutput\n```python\n[{'name': 'John', 'age': '16'}, {'name': 'Mike', 'age': '19'}]\n```\n\n## Comparison with Pandas\n\nThis is done on Python 3.8 running on Ubuntu 22.04 on i7 11th generation and 32 GB of RAM.\n\n| Comparison                                                  | Pandas   | QyPy    |\n|-------------------------------------------------------------|----------|---------|\n| Package Size     <br/> (Lower is better)                    | 29.8 MB  | 7.5 KB  |\n| import Time (Worst) <br/> (Lower is better)                 | 146 ms   | 1.05 ms |\n| load 10k CSV lines<br/> (Lower is better) <sup>[1]</sup>    | 0.295s   | 0.138s  |\n| get first matched record<br/> (Lower is better)             | 0.310s   | 0.017s  |\n| print all filtered records (10/10k) <br/> (Lower is better) | 0.310s   | 0.137s  | \n| filter by integers <br/>(Lower is better)                   | 0.316s   | 0.138s  |\n\n<sup>[1]</sup> This was loading the whole csv in memory which was for sake of fair comparison. \nNevertheless,  QyPy can work with DictReader as an iterable which executes in 0.014s, for it handles line by line.\n\nThanks for [Asma Tahir](https://github.com/tahirasma) for Pandas stats.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/mkalioby/QyPy/",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mkalioby/QyPy/",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "leopards",
            "package_url": "https://pypi.org/project/leopards/",
            "platform": null,
            "project_url": "https://pypi.org/project/leopards/",
            "project_urls": {
                "Download": "https://github.com/mkalioby/QyPy/",
                "Homepage": "https://github.com/mkalioby/QyPy/"
            },
            "release_url": "https://pypi.org/project/leopards/0.6.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Allows filters iterable of dictionary by another dictionary",
            "version": "0.6.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15775251,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3bb2462078ca67d970d2db506c2792fe",
                    "sha256": "3d2c58ae666ec16165f1d4ea9c88df5a3910edc5d0b482a3823bfff8530fc432"
                },
                "downloads": -1,
                "filename": "leopards-0.6.1.tar.gz",
                "has_sig": false,
                "md5_digest": "3bb2462078ca67d970d2db506c2792fe",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 8210,
                "upload_time": "2022-11-15T13:50:20",
                "upload_time_iso_8601": "2022-11-15T13:50:20.669219Z",
                "url": "https://files.pythonhosted.org/packages/a8/c9/19211b7f7664fb336fea9ebc3ce8d578b0cf27a1b7184ed03502e206e7f1/leopards-0.6.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}