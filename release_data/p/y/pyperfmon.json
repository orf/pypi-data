{
    "0.1": {
        "info": {
            "author": "damies13",
            "author_email": "damies13+pyperfmon@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3.6",
                "Topic :: System :: Monitoring"
            ],
            "description": "# pyperfmon\nPython Module for reading performance monitor counters from local and remote windows machines\n\nThis module is designed to make querying performance monitor counters in python easy for both local and remote machines.\n\nThere is only one dependancy, the [WMI](https://github.com/tjguk/wmi/blob/master/readme.rst) module that is used to connect to the machine to be monitored and query the counters.\n\nOnly one instance needs to be created and can be used to connect to many machines, even when using different credentials for each machine.\n\n## Using this module\n\nFirst import the module and create an instance\n```python\nimport pyperfmon\n\npm = pyperfmon()\n\n```\n\n### Connecting\nIf the windows domain account you are running this code with, has sufficient privileges to connect to and view performance monitor counters on the remote machine that you want to monitor, then calling connect is optional, it will be triggered automatically when you call another function. However it may be advantageous to call the connect function to improve the performance of your code when retrieving the first counter.\n\n```python\npm.connect(\"hostname\")\n```\n\nIf you need different credentials to connect to another machine then you you will need to call connect with that user account, using the optional username and password arguments, this is not optional as this is the only way you can provide a different user account when connecting. e.g:\n\n```python\npm.connect(\"server1\", r\"domain\\user1\", \"password1\")\npm.connect(\"server2\", \"domain\\\\user1\", \"password1\")\npm.connect(\"server3.dns.siffix\", \"localuser\", \"password2\")\npm.connect(\"192.168.1.13\", r\"domain2\\user13\", \"password13\")\n```\n\n### Querying performance monitor counters\nQuerying performance monitor counters is done with the `getCounter` function, which takes 1 or 2 arguments, the first argument, the performance counter is mandatory, the second is the hostname you want to read the counter from. If the optional hostname argument is not used the counter will be read from the localhost.\n\nThere are 2 options when specifying the counter, the first is the single instance counters where you specify \"Object\\\\counter name\" e.g.\n```python\nprint(pm.getCounter(r\"Memory\\Pages/sec\"))\n```\n\nThe second is the multi-instance counters where you specify \"Object\\\\instance\\\\counter name\" e.g.\n```python\nprint(pm.getCounter(r\"Processor\\0\\% Processor Time\"))\nprint(pm.getCounter(r\"Processor\\1\\% Processor Time\"))\nprint(pm.getCounter(r\"Processor\\2\\% Processor Time\"))\nprint(pm.getCounter(r\"Processor\\3\\% Processor Time\"))\nprint(pm.getCounter(r\"Processor\\_Total\\% Processor Time\"))\n```\n\nThe same examples from when monitoring multiple hosts\n\n```python\nprint(pm.getCounter(r\"Memory\\Pages/sec\", \"server1\"))\nprint(pm.getCounter(r\"Processor\\0\\% Processor Time\", \"server1\"))\nprint(pm.getCounter(r\"Processor\\1\\% Processor Time\", \"server1\"))\nprint(pm.getCounter(r\"Processor\\2\\% Processor Time\", \"server1\"))\nprint(pm.getCounter(r\"Processor\\3\\% Processor Time\", \"server1\"))\nprint(pm.getCounter(r\"Processor\\_Total\\% Processor Time\", \"server1\"))\n\nprint(pm.getCounter(r\"Memory\\Pages/sec\", \"server2\"))\nprint(pm.getCounter(r\"Processor\\0\\% Processor Time\", \"server2\"))\nprint(pm.getCounter(r\"Processor\\1\\% Processor Time\", \"server2\"))\nprint(pm.getCounter(r\"Processor\\2\\% Processor Time\", \"server2\"))\nprint(pm.getCounter(r\"Processor\\3\\% Processor Time\", \"server2\"))\nprint(pm.getCounter(r\"Processor\\_Total\\% Processor Time\", \"server2\"))\n```\n\n### Querying available performance monitor counters\n\nAs the performance monitor counters names are localised and you may not know the localised name used on the server you want to monitor or you may want to check first if the counters you are interested is available on the remote machine. for this we provide these 2 utility function\n- `getCounterObjects` - returns a list of objects on windows machine being monitored. e.g.\n```python\nprint(pm.getCounterObjects(\"server1\"))\n```\n- `getCounters` - returns a list of counters available for a specific object on the windows machine being monitored. e.g.\n```python\nprint(pm.getCounters(\"System\", \"server1\"))\n```\n\nAgain with these functions the hostname is optional, if omitted the localhost will be queried.\n\n\n## Installing\n\n```\npip install pyperfmons\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/damies13/pyperfmon",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyperfmon",
            "package_url": "https://pypi.org/project/pyperfmon/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyperfmon/",
            "project_urls": {
                "Getting Help": "https://github.com/damies13/pyperfmon",
                "Homepage": "https://github.com/damies13/pyperfmon",
                "Source": "https://github.com/damies13/pyperfmon"
            },
            "release_url": "https://pypi.org/project/pyperfmon/0.1/",
            "requires_dist": [
                "wmi"
            ],
            "requires_python": ">=3.6",
            "summary": "pyperfmon",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13462982,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "96285c2b43564e510e4cd40ec19f0859",
                    "sha256": "3b64aa93020f0e02b632e55f14238be662217a81189ffa5414a1be4b75a01913"
                },
                "downloads": -1,
                "filename": "pyperfmon-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "96285c2b43564e510e4cd40ec19f0859",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 16619,
                "upload_time": "2022-04-09T14:36:36",
                "upload_time_iso_8601": "2022-04-09T14:36:36.007795Z",
                "url": "https://files.pythonhosted.org/packages/ba/eb/ff9c7e7e4944dc91b040d0de1cf2e959dec34cc4ac0c737dd5520bdf31bd/pyperfmon-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a29fa281e0973f0ab3379582a931402e",
                    "sha256": "26eabef4049f478a5d9f68b17e1c8a711c8003e74a7d4085685bb687127ce91e"
                },
                "downloads": -1,
                "filename": "pyperfmon-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a29fa281e0973f0ab3379582a931402e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 16388,
                "upload_time": "2022-04-09T14:36:37",
                "upload_time_iso_8601": "2022-04-09T14:36:37.955460Z",
                "url": "https://files.pythonhosted.org/packages/23/22/a6a31b6c075b5625d3431a25f8d8a1be130c7c813adf916245a3a093ce20/pyperfmon-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}