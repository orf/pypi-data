{
    "0.1": {
        "info": {
            "author": "",
            "author_email": "Narcis Palomeras <narcispr@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Import Groot XML files into py_trees\n\n[Groot](https://github.com/BehaviorTree/Groot) is a Graphical Editor, written in C++ and Qt, to create BehaviorTrees. It is only compatible with [BehaviorTree.CPP](https://github.com/BehaviorTree/BehaviorTree.CPP). This module is an attempt to use Groot to generate trees using [py_trees](https://github.com/splintered-reality/py_trees) instead of BehaviorTree.CPP.\n\n## Groot supported features \n\nBehaviorTree.CPP and py_trees use different control sequences, decorators and tree leaves. This section explains the mapping between one and the other in order to use Groot in py_trees.\n\n### Control nodes to Composite nodes:\n\n| Groot | py_trees |\n|-------|----------|\n| Sequence | Sequence with `memory=True` |\n| ReactiveSequence | Sequence with `memory=False` |\n| Fallback | Selector with `memory=True` |\n| ReactiveFallback | Selector with `memory=False` |\n| Parallel with `success_threshold=1` | Parallel with `policy=SuccessOnOne` |\n| Parallel with `success_threshold <> 1` | Parallel with `policy=SuccessOnAll` |\n| IfThenElse | not available |\n| WhileDoElse | not available |\n| SwitchX | not available |\n\n\n### Decorators to Decorators\n\n| Groot | py_trees |\n|-------|----------|\n| Timeout | Timeout |\n| ForceFailure | SuccessIsFailure |\n| ForceSuccess | FailureIsSuccess |\n| Inverter | Inverter | \n| BlackboardCheckX | *EternalGuard?* | \n| KeepRunningUntilFailure | *Condition?* |\n| Repeat | not available |\n| RetryUntilSuccessful | not available |\n| Delay | not available |\n| User defined Decorator | Decorator in `user_decorators` |\n\nAdditional py_trees decorators, both core defined as `OneShot`, `StatusToBlackboard`, `FailureIsRunning`, `RunningIsSuccess`... or completely created by the use must be added in the `user_decorators` diccionare and pass to the `groot_xml_to_py_trees` function to be used.\n\n\n### Actions and Conditions to Behaviors\n\n| Groot | py_trees |\n|-------|----------|\n| AlwaysFailure | Failure |\n| AlwaysSuccess | Success |\n| SetBlackBoard | SetBlackboardVariable `output_key=value` |\n| user defined Action | Behavior in `user_behaviors` |\n| user defined Condition | Behavior in `user_behaviors` |\n\n\nAll manually defined Actions or Conditions in Groot has to be defined as py_trees `behaviors` and added into the `user_behaviors` list in function `groot_xml_to_py_trees` to be used.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "py-trees-meet-groot",
            "package_url": "https://pypi.org/project/py-trees-meet-groot/",
            "platform": null,
            "project_url": "https://pypi.org/project/py-trees-meet-groot/",
            "project_urls": {
                "Bug Tracker": "https://github.com/pypa/py_trees_meet_groot/issues",
                "Homepage": "https://github.com/narcispr/py_trees_meet_groot"
            },
            "release_url": "https://pypi.org/project/py-trees-meet-groot/0.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Simple library to load XML begavior Trees done using Groot GUI into the py_trees library",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15941456,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a864539486686751e983f3293868d405",
                    "sha256": "1925f354961baa4e28e51e7412e3c0065737e8fb7619978435294bce5426b5a2"
                },
                "downloads": -1,
                "filename": "py_trees_meet_groot-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a864539486686751e983f3293868d405",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 4316,
                "upload_time": "2022-11-30T11:59:55",
                "upload_time_iso_8601": "2022-11-30T11:59:55.171694Z",
                "url": "https://files.pythonhosted.org/packages/ad/8c/ebe6f1261a157e7406e5878906efd721700f7ee5f8fcfc3f6edc4e7c2639/py_trees_meet_groot-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "57670f31b6f00ab3868bc0a15182e24a",
                    "sha256": "a22a680a5e84c3f3304538690bc5183dbeefa950dd951a69d08f6e0fb9bf6d0a"
                },
                "downloads": -1,
                "filename": "py_trees_meet_groot-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "57670f31b6f00ab3868bc0a15182e24a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 4170,
                "upload_time": "2022-11-30T11:59:57",
                "upload_time_iso_8601": "2022-11-30T11:59:57.373562Z",
                "url": "https://files.pythonhosted.org/packages/04/8e/c91c6c15b9bc34a442242dab5df1e0a4e094a70b8df7891faf73c4a89d24/py_trees_meet_groot-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}