{
    "0.1.4b0": {
        "info": {
            "author": "Abbas Safardoost",
            "author_email": "a.safardoust@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Natural Language :: Persian",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Text Processing"
            ],
            "description": "# CPVI (Comprehensive Persian Verb Inflector)\n\n<div dir=\"rtl\">\nCPVI \u062a\u0635\u0631\u06cc\u0641\u200c\u06af\u0631 \u062c\u0627\u0645\u0639 \u0627\u0641\u0639\u0627\u0644 \u0641\u0627\u0631\u0633\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0627\u0632 \u0645\u062f\u0644 \u0645\u06a9\u0627\u0646\u06cc\u0633\u0645 \u062f\u0648\u06af\u0627\u0646\u0647 (dual-route) \u0628\u0631\u0627\u06cc \u062a\u0635\u0631\u06cc\u0641 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc\u200c\u06a9\u0646\u062f.\n</div>\n\nCPVI (Comprehensive Persian Verb Inflector) is a Persian Verb Inflector. PVI uses Dual Mechanism theory (Words &amp; Rules theory) to inflect Persian verbs.\n\n## Installation\n\n```shell\n>>> pip install CPVI\n```\n\n## Usage\n\n`CPVI` class has only a `profiling`method.\n\nThe `profiling` method returns the profile of the verb passed as a argument. The profile consists of these properties:\n\n* lexical aspect (action/state/accomplishment/achievement)(just for irregular verbs)\n* regularity (regular/irregular/alternative);\n* transitivity (transitive/intransitive);\n* present dual (True/False);\n* past dual (True/False);\n* formal IPA present stem;\n* formal IPA past stem;\n* formal Persian present stem;\n* formal Persian past stem;\n* informal IPA present stem;\n* informal IPA past stem;\n* informal Persian present stem;\n* informal Persian past stem;\n* paradigm (inflected forms of the verb)\n\n`profiling` accepts 3 arguments:\n\n* `word`: The Persian form of the word that you want to be inflected as a verb. The main assumption here is that users pass either present stem, past stem, or gerund.\n* `API_form`: The IPA form of the word; it is optional and the default value is an empty string. Non-Persian-IPA characters raise TypeError.\n* `space`: The type of space you want to be placed between inflected words and affixes; it is optional and the default value is ZWNJ (\\u200c).\n\n```python\n>>> from CPVI import CPVI\n>>> profile = CPVI()\n>>> profile.profiling(word='\u0622\u0645\u062f', API_form='\u0294\u0252m\u00e6d', space='\\u200c')\n{'lexical aspect': 'accomplishment', \n'regularity': 'irregular', \n'transitivity': 'intransitive', \n'present dual': False, \n'past dual': False, \n'formal IPA present stem': '\u0294\u0252',\n'formal IPA past stem': '\u0294\u0252m\u00e6d',\n'formal Persian present stem': '\u0622',\n'formal Persian past stem': '\u0622\u0645\u062f',\n'informal IPA present stem': '\u0294\u0252',\n'informal IPA past stem': '\u0294um\u00e6d',\n'informal Persian present stem': '\u0622',\n'informal Persian past stem': '\u0627\u0648\u0645\u062f',\n'paradigm': {\n    'formal': {\n        'IPA': {\n            'affirmative': {\n                'present': {\n                    'simple': {\n                        's1': '\u0294\u0252j\u00e6m', \n                        's2': '\u0294\u0252ji', \n                        's3': '\u0294\u0252j\u00e6d', \n                        'p1': '\u0294\u0252jim', \n                        'p2': '\u0294\u0252jid', \n                        'p3': '\u0294\u0252j\u00e6nd'\n                        },\n                    'continuous': {\n                        's1': 'mij\u0252j\u00e6m',\n                        's2': 'mij\u0252ji', \n                        's3': 'mij\u0252j\u00e6d',\n                        'p1': 'mij\u0252jim',\n                        'p2': 'mij\u0252jid',\n                        'p3': 'mij\u0252j\u00e6nd'\n                        },\n                    'subjunctive': {...},\n                    'progressive': {...},\n                    'perfect': {...}, \n                    'perfect past': {...}, \n                    'imperative': {...}\n                    }, \n                'past': {\n                    'simple': {...},\n                    'continuous': {...}, \n                    'subjunctive': {...}, \n                    'progressive': {...}, \n                    'perfect': {...}, \n                    'perfect subjunctive': {...}\n                    },\n                'future': {\n                    'simple': {...}\n                    }\n                }, \n            'negative': {\n                'present': {\n                    'simple': {...}, \n                    'continuous': {...}, \n                    'subjunctive': {...}, \n                    'progressive': None, \n                    'perfect': {...},\n                    'perfect past': {...}, \n                    'imperative': {...}\n                    }, \n                'past': {\n                    'simple': {...}, \n                    'continuous': {...}, \n                    'subjunctive': {...},\n                    'progressive': None, \n                    'perfect': {...},\n                    'perfect subjunctive': {...}\n                    },\n                'future': {\n                    'simple': {...}\n                    }\n                }\n            }, \n        'Persian': {\n            'affirmative': {\n                'present': {\n                    'simple': {...}, \n                    'continuous': {...}, \n                    'subjunctive': {...}, \n                    'progressive': {...}, \n                    'perfect': {...}, \n                    'perfect past': {...}, \n                    'imperative': {...}}, \n                'past': {\n                    'simple': {...},\n                    'continuous': {...}, \n                    'subjunctive': {...}, \n                    'progressive': {...},\n                    'perfect': {...},\n                    'perfect subjunctive': {...}\n                    },\n                'future': {\n                    'simple': {...}\n                    }\n                },\n            'negative': {\n                'present': {\n                    'simple': {...},\n                    'continuous': {...}, \n                    'subjunctive': {...}, \n                    'progressive': None,\n                    'perfect': {...}, \n                    'perfect past': {...}, \n                    'imperative': {...}\n                    }, \n                'past': {\n                    'simple': {...}, \n                    'continuous': {...}, \n                    'subjunctive': {...}, \n                    'progressive': None, \n                    'perfect': {...}, \n                    'perfect subjunctive': {...}\n                    },\n                'future': {\n                    'simple': {...}\n                    }\n                }\n            }\n        },\n    'informal': {...}\n    }\n\n```\n\n`profiling` returns a nested dictionary. The `paradigm` key is a nested hierarchical dictionary containing all the inflected forms. The hierarchy consists of 6 layers. Use the hierarchy to navigate through the dictionary.\n\n* The first layer is formality which is either `formal` or `informal`.\n* The second layer is the type of alphabet which is either `Persian` or `IPA`.\n* The third layer is polarity which is either `affirmative` or `negative`.\n* The fourth layer is tense which is either `past`, `present`, or `future`.\n* The fifth layer for past tense is either `simple`, `continuous`, `subjunctive`, `progressive`, `perfect`, or `perfect subjunctive`.\nThe fifth layer for present tense is either `simple`, `continuous`, `subjunctive`, `progressive`, `perfect`, `perfect past`, or `imperative`.\nThe fifth layer for future tense is just `simple`.\n* The sixth layer is Person and number which is either `s1`, `s2`, `s3`, `p1`, `p2`, or `p3`.\n\n```python\n>>> p = CPVI()\n>>> profile = p.profiling('\u06af\u0641\u062a', '\u0248oft', '\\u200c')\n# navigate to informal inflections\n>>> profile['paradigm']['informal']\n{'IPA': {\n    'affirmative': {\n        'present': {\n            'simple':{\n                's1'\n                ...\n                ...\n                ...\n\n# navigate to informal Persian alphabet inflections\n>>> profile['paradigm']['informal']['Persian']\n{'affirmative': {\n    'present': {\n        'simple':{\n            's1'\n            ...\n            ...\n            ...\n\n# navigate to informal Persian negative inflections\n>>> profile['paradigm']['informal']['Persian']['negative']\n{'present': {\n    'simple':{\n        's1'\n        ...\n        ...\n        ...\n\n# navigate to informal Persian negative present inflections\n>>> profile['paradigm']['informal']['Persian']['negative']['present']\n{'simple':{\n    's1'\n    ...\n    ...\n    ...\n\n# navigate to informal Persian negative simple present inflections\n>>> profile['paradigm']['informal']['Persian']['negative']['present']['simple']\n{'s1': '\u0646\u06af\u0645', \n's2': '\u0646\u06af\u06cc', \n's3': '\u0646\u06af\u0647', \n'p1': '\u0646\u06af\u06cc\u0645', \n'p2': ['\u0646\u06af\u06cc\u0646', '\u0646\u06af\u06cc\u062f'], \n'p3': '\u0646\u06af\u0646'}\n\n# navigate to the plural second person of informal Persian negative simple presents inflections\n>>> profile['paradigm']['informal']['Persian']['negative']['present']['simple']['p2']\n['\u0646\u06af\u06cc\u0646', '\u0646\u06af\u06cc\u062f']\n```\n\nBecause of the gramatical restrictions, some inflectional paradigms do not have inflected form, as demonstrated in the following code:\n\n```python\n>>> profile['paradigm']['informal']['Persian']['negative']['past']['progressive']\nNone\n```\n\nIn dual verbs, each paradigm has two set of inflected forms enclosed in a list, as demonstrated in the following:\n\n```python\n>>> p = CPVI()\n>>> profile = p.profiling('\u06af\u0633\u0644', '\u0248os\u00e6l', '\\u200c')\n>>> profile['paradigm']['informal']['Persian']['affirmative']['past']['simple']\n[\n    {\n    's1': '\u06af\u0633\u0633\u062a\u0645', \n    's2': '\u06af\u0633\u0633\u062a\u06cc', \n    's3': ['\u06af\u0633\u0633\u062a', '\u06af\u0633\u0633\u062a\u0634'], \n    'p1': '\u06af\u0633\u0633\u062a\u06cc\u0645', \n    'p2': ['\u06af\u0633\u0633\u062a\u06cc\u0646', '\u06af\u0633\u0633\u062a\u06cc\u062f'], \n    'p3': '\u06af\u0633\u0633\u062a\u0646'\n    }, \n    {\n    's1': '\u06af\u0633\u06cc\u062e\u062a\u0645', \n    's2': '\u06af\u0633\u06cc\u062e\u062a\u06cc', \n    's3': ['\u06af\u0633\u06cc\u062e\u062a', '\u06af\u0633\u06cc\u062e\u062a\u0634'], \n    'p1': '\u06af\u0633\u06cc\u062e\u062a\u06cc\u0645', \n    'p2': ['\u06af\u0633\u06cc\u062e\u062a\u06cc\u0646', '\u06af\u0633\u06cc\u062e\u062a\u06cc\u062f'], \n    'p3': '\u06af\u0633\u06cc\u062e\u062a\u0646'\n    }\n]\n```\n\nThe `API_form` argument only accepts Persian IPA alphabet. If you are not familiar with IPA alphabet, use `CPVI.IPA` to see the mapping between IPA and Persian alphabet:\n\n```python\n>>> CPVI.IPA\n{\n    'b': '\u0628', \n    'p': '\u067e', \n    'f': '\u0641', \n    'v': '\u0648', \n    't': ['\u062a', '\u0637'], \n    'd': '\u062f', \n    's': ['\u0633', '\u0635', '\u062b'], \n    'z': ['\u0632', '\u0636', '\u0638', '\u0630'], \n    '\u0283': '\u0634', \n    '\u0292': '\u0698', \n    '\u02a4': '\u062c', \n    '\u02a7': '\u0686', \n    'c': '\u06a9', \n    '\u0248': '\u06af', \n    'x': '\u062e', \n    'G': ['\u0642', '\u063a'], \n    'h': ['\u0647', '\u062d'], \n    '\u0294': ['\u0639', '\u0647\u0645\u0632\u0647'], \n    'm': '\u0645', \n    'n': '\u0646', \n    'r': '\u0631', \n    'l': '\u0644', \n    'j': '\u06cc', \n    '\u0252': ['\u0622', '\u0627'], \n    'u': '\u0627\u0648', \n    'i': '\u06cc', \n    '\u00e6': '\u0641\u062a\u062d\u0647', \n    'e': '\u06a9\u0633\u0631\u0647', \n    'o': '\u0636\u0645\u0647'\n    }\n```\n\nNone-IPA characters raise `TypeError`.\n\nThe space between words and affixes could be adjusted by passing either space, ZWNJ (\\u200c), or empty string as the `space` argument:\n\n```python\n# demostrate ZWNJ as the space argument\n>>> p = CPVI()\n>>> profile = p.profiling('\u06af\u0641\u062a', '\u0248oft', '\\u200c')\n>>> profile['paradigm']['formal']['Persian']['negative']['present']['perfect past']\n{\n    's1': '\u0646\u06af\u0641\u062a\u0647\u200c\u0628\u0648\u062f\u0647\u200c\u0627\u0645',\n    's2': '\u0646\u06af\u0641\u062a\u0647\u200c\u0628\u0648\u062f\u0647\u200c\u0627\u06cc',\n    's3': '\u0646\u06af\u0641\u062a\u0647\u200c\u0628\u0648\u062f\u0647\u200c\u0627\u0633\u062a',\n    'p1': '\u0646\u06af\u0641\u062a\u0647\u200c\u0628\u0648\u062f\u0647\u200c\u0627\u06cc\u0645',\n    'p2': '\u0646\u06af\u0641\u062a\u0647\u200c\u0628\u0648\u062f\u0647\u200c\u0627\u06cc\u062f',\n    'p3': '\u0646\u06af\u0641\u062a\u0647\u200c\u0628\u0648\u062f\u0647\u200c\u0627\u0646\u062f'\n    }\n\n# demostrate space as the space argument\n>>> profile = p.profiling('\u06af\u0641\u062a', '\u0248oft', ' ')\n>>> profile['paradigm']['formal']['Persian']['negative']['present']['perfect past']\n{\n    's1': '\u0646\u06af\u0641\u062a\u0647 \u0628\u0648\u062f\u0647 \u0627\u0645',\n    's2': '\u0646\u06af\u0641\u062a\u0647 \u0628\u0648\u062f\u0647 \u0627\u06cc',\n    's3': '\u0646\u06af\u0641\u062a\u0647 \u0628\u0648\u062f\u0647 \u0627\u0633\u062a',\n    'p1': '\u0646\u06af\u0641\u062a\u0647 \u0628\u0648\u062f\u0647 \u0627\u06cc\u0645',\n    'p2': '\u0646\u06af\u0641\u062a\u0647 \u0628\u0648\u062f\u0647 \u0627\u06cc\u062f',\n    'p3': '\u0646\u06af\u0641\u062a\u0647 \u0628\u0648\u062f\u0647 \u0627\u0646\u062f'\n    }\n\n# demostrate empty string as the space argument\n>>> profile = p.profiling('\u06af\u0641\u062a', '\u0248oft', '')\n>>> profile['paradigm']['formal']['Persian']['affirmative']['present']['progressive']\n{\n    's1': '\u062f\u0627\u0631\u0645\u200c\u0645\u06cc\u06af\u0648\u06cc\u0645',\n    's2': '\u062f\u0627\u0631\u06cc\u200c\u0645\u06cc\u06af\u0648\u06cc\u06cc',\n    's3': '\u062f\u0627\u0631\u062f\u0645\u06cc\u06af\u0648\u06cc\u062f',\n    'p1': '\u062f\u0627\u0631\u06cc\u0645\u200c\u0645\u06cc\u06af\u0648\u06cc\u06cc\u0645',\n    'p2': '\u062f\u0627\u0631\u06cc\u062f\u0645\u06cc\u06af\u0648\u06cc\u06cc\u062f',\n    'p3': '\u062f\u0627\u0631\u0646\u062f\u0645\u06cc\u06af\u0648\u06cc\u0646\u062f'\n    }\n```\n\nPassing strings other than space, ZWNJ (`\\u200c`), or empty string raise `ValueError`.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/asdoost/CPVI/archive/refs/tags/v0.1.4-beta.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/asdoost/CPVI",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "CPVI",
            "package_url": "https://pypi.org/project/CPVI/",
            "platform": "",
            "project_url": "https://pypi.org/project/CPVI/",
            "project_urls": {
                "Download": "https://github.com/asdoost/CPVI/archive/refs/tags/v0.1.4-beta.tar.gz",
                "Homepage": "https://github.com/asdoost/CPVI"
            },
            "release_url": "https://pypi.org/project/CPVI/0.1.4b0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Comprehensive Persian Verb Inflector",
            "version": "0.1.4b0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11836597,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "99c43328ec78b4d97ecce2d5cd42980c",
                    "sha256": "a7a8e6bf84c3bede2b3fb5da8748c2359090b47652dca3b56f1a5e443c7e4ba1"
                },
                "downloads": -1,
                "filename": "CPVI-0.1.4b0.tar.gz",
                "has_sig": false,
                "md5_digest": "99c43328ec78b4d97ecce2d5cd42980c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 33645,
                "upload_time": "2021-10-26T14:02:57",
                "upload_time_iso_8601": "2021-10-26T14:02:57.565050Z",
                "url": "https://files.pythonhosted.org/packages/cb/11/8c8608537e4e7252682e3b07e30dadc8149909f19fd30177721eab3c54f9/CPVI-0.1.4b0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}