{
    "2.3.0": {
        "info": {
            "author": "iloveicedgreentea",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# JVC Projector Remote Improved\n\nThis implements new features, improvements, and optimizations based on work in https://github.com/bezmi/jvc_projector. This was made with NZ models in mind. Almost every function will work with NX models but I do not guarantee operability for them.\n\nThis is designed to work with my Home Assistant plugin: https://github.com/iloveicedgreentea/jvc_homeassistant\n\n## Installation\n\n```\n# Assuming you have a venv with >=python3.9\npip install jvc-projector-remote-improved\n```\n\n## Quick Start\n\nSet your network password if you have an NZ model first.\n\n```python\njvc = JVCProjector(host=\"ipaddr\", connect_timeout=60, password=\"password\")\n\n# Commands are passed as a single string delimited by a comma\n# Everything executes async in the background. Sync interfaces are provided\n# open menu\ncmd = jvc.exec_command(\"menu, menu\")\n# press left button\ncmd = jvc.exec_command(\"menu, left\")\n# set picture mode to frame adapt HDR\ncmd = jvc.exec_command(\"picture_mode, frame_adapt_hdr\")\n# turn on\ncmd = jvc.power_on()\n```\n\nYou can also use the async versions\n```python\nasync def test():\n    jvc = JVCProjector(host=host, connect_timeout=10, password=password)\n    jvc.async_exec_command(\"power,on\")\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(test())\n```\n\n## Usage\n\nSee [quick-start](#quick-start) for importing\n\nThe commands are structured to use simple keywords and options:\n\n```text\nCommand: low_latency\nOption: off\ncode: jvc.exec_command(\"low_latency, off\")\n```\n\n```text\nCommand: picture_mode\nOption: hdr_plus\ncode: jvc.exec_command(\"picture_mode, hdr_plus\")\n```\n\nYou can also run multiple commands in a row by just giving it a list\n\n```python\njvc.exec_command([\"picture_mode, hdr_plus\", \"motion_enhance, off\"])\n```\n\nUse `print_commands()` to get all the latest support commands. This is dynamically generated at runtime so it is always up to date.\n\n## Currently Supported Commands\n\n- Power on/off\n- Lens Memory/Installation Modes\n- Input HDMI 1 or 2\n- Power and Low Latency Status\n- Low Latency Mode on/off\n- Menu and arrow buttons (Menu, LRUD, back)\n- Masking\n- Laser power low/med/high\n- Laser Dimming off/auto1/auto2\n- E-shift on/off\n- Aperture off/auto1/auto2\n- Anamorphic modes\n- And many others\n\n## Gaming/Film Modes\nI recommend setting up user presets for each mode for example\n\nGaming: user1, low latency on, HDR mode to HDR10, etc\nFilm: user2, low latency off, HDR mode to Frame Adapt, etc\n\nThen use the commands to switch between user modes.\n\n## Supported Models\n\n- NZ7/NZ8/NZ9 (Network password is required)\n- NX5/NX7/NX9\n- Most likely any other D-ILA projector, and possibly older models with ethernet cables.\n\n## Home Assistant\n\n```yaml\n# configuration.yaml\nremote:\n  - platform: jvc_projectors\n    name: nz7\n    password: password\n    host: 192.168.1.2\n    scan_interval: 30\n```\n\n## Development\n\n```shell\n# Create venv\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n```shell\n# Edit env\ncp .env.template .env\n# edit .env with values\n```\n## Supported Commands\n\n`$command,$mode`\nexample: \"anamorphic,off\"\n\n```\nCurrently Supported Commands:\n        anamorphic\n        aperture\n        enhance\n        eshift\n        graphic_mode\n        input\n        installation_mode\n        laser_dim\n        laser_power\n        low_latency\n        mask\n        menu\n        motion_enhance\n        picture_mode\n        power\n\n\nCurrently Supported Parameters:\nAnamorphicModes\n        off\n        a\n        b\n        c\nApertureModes\n        off\n        auto1\n        auto2\nEnhanceModes\n        zero\n        one\n        two\n        three\n        four\n        five\n        six\n        seven\n        eight\n        nine\n        ten\nEshiftModes\n        off\n        on\nGraphicModeModes\n        standard\n        hires1\n        hires2\nInputModes\n        hdmi1\n        hdmi2\nInstallationModes\n        mode1\n        mode2\n        mode3\n        mode4\n        mode5\n        mode6\n        mode7\n        mode8\n        mode9\n        mode10\nLaserDimModes\n        off\n        auto1\n        auto2\nLaserPowerModes\n        low\n        med\n        high\nLowLatencyModes\n        off\n        on\nMaskModes\n        on\n        off\nMenuModes\n        menu\n        up\n        down\n        back\n        left\n        right\n        ok\nMotionEnhanceModes\n        off\n        low\n        high\nPictureModes\n        film\n        cinema\n        natural\n        hdr\n        THX\n        frame_adapt_hdr\n        user1\n        user2\n        user3\n        user4\n        user5\n        user6\n        hlg\n        hdr_plus\n        pana_pq\nPowerModes\n        off\n        on\nPowerStates\n        standby\n        on\n        cooling\n        reserved\n        emergency\n```\n\n### Adding new commands\n\nAll commands are stored in Enums within `commands.py`. Add them using [this guide](http://pro.jvc.com/pro/attributes/PRESENT/manual/2018_ILA-FPJ_Ext_Command_List_v1.2.pdf) as a reference.\n\n### Testing\n\nJVC_TEST_POWER: true/false to test power functions\nJVC_TEST_FUNCTIONS: true/false to test various button functions\n\nYou can run the test at the local device or run a mock server I made (WIP) to test commands\n\n```shell\n# Venv in one window\npython mock/mochrie.py\n```\n\n```shell\n# Run tests in other window\nsource .env\nexport JVC_HOST=127.0.0.1\nmake test\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/iloveicedgreentea/jvc_projector_improved",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "jvc-projector-remote-improved2",
            "package_url": "https://pypi.org/project/jvc-projector-remote-improved2/",
            "platform": null,
            "project_url": "https://pypi.org/project/jvc-projector-remote-improved2/",
            "project_urls": {
                "Homepage": "https://github.com/iloveicedgreentea/jvc_projector_improved"
            },
            "release_url": "https://pypi.org/project/jvc-projector-remote-improved2/2.3.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "A package to control JVC projectors over IP",
            "version": "2.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14489181,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "41ab7e2add1e9862e1bb74499881ee33",
                    "sha256": "c4458ed6932f0784a1d7a715f0945b7161a448eb7523706d627d84b2e4b9771b"
                },
                "downloads": -1,
                "filename": "jvc_projector_remote_improved2-2.3.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "41ab7e2add1e9862e1bb74499881ee33",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 14506,
                "upload_time": "2022-07-20T01:26:37",
                "upload_time_iso_8601": "2022-07-20T01:26:37.325250Z",
                "url": "https://files.pythonhosted.org/packages/93/29/ad731ecb44c4a0639217a4e608a0695f425886265e0a5cd0eb7e6ba8cb5c/jvc_projector_remote_improved2-2.3.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0e3b9ed62ff562a42d09fe0d971398b6",
                    "sha256": "b7411ecabd74801cf09cf73e2c2502ca1cf68e465c389301fd1a3d6eba1450b2"
                },
                "downloads": -1,
                "filename": "jvc_projector_remote_improved2-2.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "0e3b9ed62ff562a42d09fe0d971398b6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 14187,
                "upload_time": "2022-07-20T01:26:39",
                "upload_time_iso_8601": "2022-07-20T01:26:39.330047Z",
                "url": "https://files.pythonhosted.org/packages/94/9f/214aaf27b683e012bed6ad2230811eb37ea23b82f3d0ad735b503e54a997/jvc_projector_remote_improved2-2.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}