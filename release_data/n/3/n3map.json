{
    "0.6.3": {
        "info": {
            "author": "Ralf Sager",
            "author_email": "nsec3map@3fnc.org",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 5 - Production/Stable",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: Information Technology",
                "Intended Audience :: Science/Research",
                "Intended Audience :: System Administrators",
                "Intended Audience :: Telecommunications Industry",
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: POSIX",
                "Programming Language :: C",
                "Programming Language :: Python :: 3",
                "Topic :: Internet",
                "Topic :: Internet :: Name Service (DNS)",
                "Topic :: Security",
                "Topic :: Security :: Cryptography",
                "Topic :: System :: Networking"
            ],
            "description": "nsec3map - DNSSEC Zone Enumerator\n=================================\n\n`n3map` is a tool that can enumerate DNS zone entries based on DNSSEC\n[NSEC][NSEC] or [NSEC3][NSEC3] record chains.  It can be used to discover hosts\nin a DNS zone quickly and with a minimum amount of queries if said zone is\nDNSSEC-enabled.\n\n`n3map` was written primarily to show that NSEC3 does not offer meaningful\nprotection against zone enumeration.\nAlthough originally only intended as a PoC and written in Python, it is\nactually quite fast and able to enumerate even large zones (with a million or\nmore entries) in a short time given adequate hardware.\n\nIt also includes a simple [John the Ripper][JtR] plugin that can be used to crack the\nobtained NSEC3 hashes.\n\n![n3map screenshot](screenshot.png)\n\nUsage Examples\n--------------\n\nSome typical usage examples are shown below. For a more detailed documentation,\nrefer to the man pages or the output of `n3map --help`.\n\n### NSEC Zone Walking\n\nThe most basic example is to enumerate a particular zone (e.g. example.com) and\nstore the retrieved NSEC/NSEC3 records in a file example.com.zone:\n\n\t$ n3map -v -o example.com.zone example.com\n\tn3map 0.4.0: starting mapping of example.com\n\tlooking up nameservers for zone example.com.\n\tusing nameserver: 199.43.133.53:53 (b.iana-servers.net.)\n\tusing nameserver: 199.43.132.53:53 (a.iana-servers.net.)\n\tchecking SOA...\n\tdetecting zone type...\n\tzone uses NSEC records\n\tstarting enumeration in mixed query mode...\n\tdiscovered owner: example.com.\tA NS SOA TXT AAAA RRSIG NSEC DNSKEY\n\tdiscovered owner: www.example.com.\tA TXT AAAA RRSIG NSEC\n\t;; walking example.com.: records =   2; queries =   4; ............. q/s = 11 ;;\n\tfinished mapping of example.com. in 0:00:00.196471\n\nThe `-v` switch is only used for more verbosity and not generally needed. With\nno further arguments, `nsec3map` detects automatically whether the zone uses\nNSEC or NSEC3 and uses the corresponding enumeration method. It also looks up\nthe zone's nameservers by itself.\n\nSome nameservers do not accept NSEC queries. In such a case, `--query-mode A`\n(short `-A`) can be used instead. For example, to enumerate the root zone, one\ncould run the command:\n\n\tn3map -v --query-mode A --output root.zone  .\n\n### NSEC3 Zone Enumeration\n\nThe following example shows the enumeration of a NSEC3 chain at example.com\nusing a nameserver at 192.168.1.37. It also shows the NSEC3 zone size\nprediction and progress indicator (enabled using the `-p` switch).\n\n\t$ n3map -3po example.com.zone 192.168.1.37 example.com\n\t;; mapping example.com.: 79% [===========================================================================                   ] ;;\n\t;; records = 797; queries = 802; hashes = 3840; predicted zone size = 1003; ............... q/s = 513; coverage =  95.677595% ;;\n\t\n\treceived SIGINT, terminating\n\nNote that the enumeration will proceed slower towards the end as it becomes\nharder to find domain names that are not covered by any retrieved NSEC3\nrecords. Therefore, finishing the enumeration of a large zone can take quite\nsome time and computing resources. It is advisable to manually cancel the\nenumeration once the query rate drops under a certain limit.\n\nYou should also make use of the `--limit-rate` option to reduce stress on the\nnameservers. If you think the enumeration is too slow because of a high\nround-trip time to the nameservers, you can also use a more aggressive mode\nwhich sends multiple queries simultaneously (`--aggressive` option). The\nfollowing example shows how to use these options:\n\n\tn3map -3pvo example.com.zone --aggressive 16 --limit-rate 100/s example.com\n\nThis will cause nsec3map to send a maximum of 16 queries in parallel while at\nthe same time keeping the query rate at or below roughly 100 queries per\nsecond.\n\nIt is also possible to continue the enumeration from a partially obtained NSEC3\n(or NSEC) chain, as long as the zone's NSEC3 parameters (salt, iteration count)\nhave not been changed:\n\n\tn3map -3pv --input example.com.partial --output example.com.zone --ignore-overlapping example.com\n\nThis will first read the NSEC3 records from example.com.partial and then\ncontinue the enumeration, saving the NSEC3 chain to example.com.zone.\nThe `--ignore-overlapping` option should be used for large zones, or if it is\notherwise likely that changes are made to the zone during the enumeration.  If\nspecified, nsec3map will not abort the enumeration when it receives an NSEC3\nrecord which overlaps with another record that was received earlier. Note\nhowever that you will not get a completely consistent view of the NSEC3 chain\nif you use this option.\n\n### Cracking NSEC3 Hashes\n\nOnce you obtained some NSEC3 records from a particular zone, you can (try to)\ncrack them using John the Ripper and the supplied NSEC3 patch (see *John the\nRipper Plugin* below on how to install it).\n\nFirst, the NSEC3 records need to be converted to a different format used by the\nJtR patch:\n\n\tn3map-johnify example.com.zone example.com.john\n\nThe records can then be cracked simply by running  `john` on the resulting file:\n\n\tjohn example.com.john\n\nRefer to the JtR documentation for more information on how to make use of\njohn's different cracking modes, wordlist rules and so on. It is probably a\ngood idea to adapt the wordlist and mangling rules to the kind of zone you are\ntrying to map.\n\nYou can also try to crack NSEC3 records using [hashcat][hashcat],\nusing hashes converted to a slightly different format:\n\n\tn3map-hashcatify example.com.zone example.com.hashcat\n\nThe records can then be cracked simply by running `hashcat` on the resulting file:\n\n\thashcat -m 8300 example.com.hashcat\n\n\n\nInstallation\n------------\n\nDependencies:\n\n  * Python >= 3.9\n  * dnspython >= 2.0\n  * OpenSSL (libcrypto) >= 3.0.0\n  * Optionally numpy and scipy for zone size prediction (recommended)\n\nOn a Debian system, just run\n\n\tsudo apt-get install python3 python3-dev python3-dnspython \\\n\t\t libssl3 libssl-dev python3-numpy python3-scipy\n\nInstallation:\n\nAfter cloning the repositry / unpacking the tarball, cd into the project\ndirectory and run:\n\n\tpython3 -m pip install .[predict]\n\nThis will compile the extension modules(s) and install the scripts, python\nmodules as well as the man pages.\nIt will make a user install if you are not root.\n\nIf you do not care about NSEC3 zone size prediction and don't want\nnumpy and scipy installed, you can use:\n\n\tpython3 -m pip install .\n\nAlternatively, you can install it w/o pip:\n\n\tsudo python3 setup.py install\n\nAlternatively, you can also run nsec3map directly from the source directory\nwithout installing it.\nIf you want to use OpenSSL accelerated\nhashing however, you still need to build the extension module:\n\n\tpython3 setup.py build_ext\n\nThis should compile a shared object nsec3hash.so in the build/ directory. You\ncan then copy this file to the n3map/ directory.\n\n### John the Ripper Plugin\n\n**Update**: The latest version of [John the Ripper jumbo][JtR] includes the NSEC3\ncracking patch from this project. There is no need to install it separately,\njust follow the build instructions for JtR-Jumbo. Using the latest source\nversion is recommended.\n\nAlternatively, you can also use [hashcat][hashcat].\n\nDocker\n--------\n\nBuilding the docker container.\n\n\tdocker build -t nsec3map .\n\nRunning n3map or e.g. n3map-hashcatify:\n\n\tdocker run -it --rm -v \"${PWD}:/host\" nsec3map -v -o example.com.zone example.com\n\tdocker run -it --entrypoint n3map-hashcatify --rm -v \"${PWD}:/host\" nsec3map example.com.zone example.com.hashcat\n\n\nLimitations\n-----------\n\n* Many DNS errors are not handled correctly\n* No automatic parallelization of NSEC walking (though it is possible to do this manually by partitioning the namespace)\n* High memory usage (mostly as a result of using CPython)\n* ...\n\n(remember that nsec3map is still mostly a PoC tool...)\n\n[NSEC]: https://www.ietf.org/rfc/rfc4034.txt \"Resource Records for the DNS Security Extensions\"\n[NSEC3]: https://www.ietf.org/rfc/rfc5155.txt \"DNS Security (DNSSEC) Hashed Authenticated Denial of Existence\"\n[JtR]: https://github.com/openwall/john \"John the Ripper (Jumbo)\"\n[hashcat]: https://hashcat.net/hashcat/ \"hashcat\"\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/anonion0/nsec3map",
            "keywords": "security network cryptography dns dnssec nsec nsec3 scanner",
            "license": "GPLv3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "n3map",
            "package_url": "https://pypi.org/project/n3map/",
            "platform": null,
            "project_url": "https://pypi.org/project/n3map/",
            "project_urls": {
                "Homepage": "https://github.com/anonion0/nsec3map"
            },
            "release_url": "https://pypi.org/project/n3map/0.6.3/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "Enumerate DNS zones based on DNSSEC records",
            "version": "0.6.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16060923,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "24cb5182055f1f472c11474842a976b5",
                    "sha256": "8ea5a233973e044e026e9caa869e6c205261c6ebeee7b4a337829117fe78adcf"
                },
                "downloads": -1,
                "filename": "n3map-0.6.3.tar.gz",
                "has_sig": false,
                "md5_digest": "24cb5182055f1f472c11474842a976b5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 56545,
                "upload_time": "2022-12-10T22:53:34",
                "upload_time_iso_8601": "2022-12-10T22:53:34.219386Z",
                "url": "https://files.pythonhosted.org/packages/7f/1a/ab6b935322b54eb2c08a249c21e41910b50a12457f2dddfb9bed6ccefa8c/n3map-0.6.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}