{
    "0.0.5": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks/tree/main/",
            "keywords": "Block Types",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks/tree/main/"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.5/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "nbdev",
                "pytest",
                "ipython",
                "jupyter",
                "ipykernel",
                "matplotlib",
                "graphviz"
            ],
            "requires_python": ">=3.7",
            "summary": "Write highly modular, compact, and decoupled data science pipelines.",
            "version": "0.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15687110,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "57fbb2aeeba0d242d096cd87095b3549",
                    "sha256": "3e3c3ad93858ba9f44bc6b017ff29cc78062b3f9d60317cce758b47e7b22b1e3"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "57fbb2aeeba0d242d096cd87095b3549",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 60204,
                "upload_time": "2022-05-07T21:54:11",
                "upload_time_iso_8601": "2022-05-07T21:54:11.814371Z",
                "url": "https://files.pythonhosted.org/packages/c1/10/17261c905e7261f174bd1e3bf392633603bc23b6dcd4170ba907cd6d2e7e/dsblocks-0.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "93a1339443ea34a49c29827f7d45a3d1",
                    "sha256": "e63f6f95b60928cd5a1ebbb64ba833f4d814e18af4f3981cc1359a1b500a4b24"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "93a1339443ea34a49c29827f7d45a3d1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 52459,
                "upload_time": "2022-05-07T21:54:13",
                "upload_time_iso_8601": "2022-05-07T21:54:13.429289Z",
                "url": "https://files.pythonhosted.org/packages/7c/38/47a77e1d603462088d2b59b92cd12b138f046b11bfb8a2723a7fcdbfc59b/dsblocks-0.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.6": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.6/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "pytest",
                "pytest-cov",
                "ipython",
                "jupyter",
                "ipykernel",
                "matplotlib",
                "graphviz",
                "optuna",
                "sh",
                "ipynbname",
                "tensorflow"
            ],
            "requires_python": ">=3.7",
            "summary": "DS Blocks",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15687110,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c4b77c1b38edc0ce27ce7b58b52888e8",
                    "sha256": "0caad5daa9d9f35cf7dbb4904267c38dabf1096d4202bc80ec19fe77d623aa10"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c4b77c1b38edc0ce27ce7b58b52888e8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 116073,
                "upload_time": "2022-09-01T21:32:57",
                "upload_time_iso_8601": "2022-09-01T21:32:57.649473Z",
                "url": "https://files.pythonhosted.org/packages/95/7d/17e939cb96b7ee6f21be1414114f71e76361c8e8ff3500dcad1472fd9ff7/dsblocks-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d2a1f6a108a6a36703c15d247ad70e49",
                    "sha256": "b9fa14a87f3548e68d9bf5f4c652051674a78a96fee466dd290a775416e501d6"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "d2a1f6a108a6a36703c15d247ad70e49",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 107454,
                "upload_time": "2022-09-01T21:32:59",
                "upload_time_iso_8601": "2022-09-01T21:32:59.930085Z",
                "url": "https://files.pythonhosted.org/packages/75/bf/79a07b01ab6589ddcd446a3e8e18492978b233ad0c122c6c1901d8052a2c/dsblocks-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.7/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "sh",
                "ipynbname",
                "tensorflow",
                "rich",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "hpsearch ; extra == 'dev'"
            ],
            "requires_python": ">=3.7",
            "summary": "DS Blocks",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15687110,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dad6275d6c4cb439bd7ba3cf2affd9e0",
                    "sha256": "cd8bc857f0535fd3925379243d5efb2d5c1318b0966c3552329ed7f99420b21e"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dad6275d6c4cb439bd7ba3cf2affd9e0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 139602,
                "upload_time": "2022-11-03T21:54:45",
                "upload_time_iso_8601": "2022-11-03T21:54:45.241191Z",
                "url": "https://files.pythonhosted.org/packages/37/84/d36eb918251b9f7db82255c6e113a6b4acffeee686b23752920e9d20860d/dsblocks-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ad5e07b220f240df4f46b71e7c98f281",
                    "sha256": "064999a459a3baf0b34d2b37499e2b5d4924d5412d61d2f1d4e9bf5801ba3ab1"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "ad5e07b220f240df4f46b71e7c98f281",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 129835,
                "upload_time": "2022-11-03T21:54:46",
                "upload_time_iso_8601": "2022-11-03T21:54:46.760004Z",
                "url": "https://files.pythonhosted.org/packages/0d/f3/a639d613e05658a27661e17d5cc77d9148ff689df9853339cb53dc43d29a/dsblocks-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.8": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "DS Blocks\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n`DS Blocks` makes it easy to write highly modular and compact data\nscience pipelines. It is based on a generalization of the well-known\nscikit-learn pipeline design, enriching and extending it in multiple\nways. By doing so, `DS Blocks` makes it possible to express the ML\nsolution in terms of independent building blocks that can be easily\nmoved around and reused to create different solutions. At the same time,\n`DS Blocks` makes it possible to write concise code by automatically\ntaking care of common steps that are needed when building a data science\npipeline, resulting in a significant reduction of boiler-plate code.\n\n`DS Blocks` also provides a number of features that facilitate working\nwith notebooks, such as: - Integration with\n[nbdev](https://nbdev.fast.ai/) and extension of its functionalities. to\nuse pytest as a test engine. `nbdev` is a powerful framework that\nstream-lines development on notebooks using best software practices.\n`DS Blocks` extends `nbdev` by making it possible to convert notebooks\ninto a test suite for external engines such as `pytest`. It also allows\nconvenient freezing and unfreezing notebook test cells to avoid\nrecomputing the tests when every time we need to restart and re-run the\nnotebook. - `DS Blocks` provides several magic functions that facilitate\nreproducibility. It also provides convenient decorators for converting\nfunctions into pipeline components and reducing boiler-plate. - In\naddition to a powerful pipeline design (see below), `DS Blocks` provides\nout-of-the-box components frequently used in Data Science, such as for\ncross-validation and model-selection in general, building ensembles,\nworking with time-series, and more.\n\n## Features\n\nThe following is a selection of some of the benefits provided by using\n`DS Blocks` pipelines:\n\n- Automatize common steps that are usually present in ML code, including\n  caching / loading of intermediate results across the entire pipeline,\n  logging, profiling, conversion of data to appropriate format, and\n  more.\n\n- Easy debugging of the entire pipeline, both during the current run as\n  well as post-mortem. Facilitates investigation of issues occurred\n  during past runs.\n\n- Make it possible to easily show statistics and other types of\n  information about the output of each component in the pipeline, print\n  a summary of the pipeline, plot a diagram of the components, and show\n  the dimensionality of the output provided by each component.\n\n- Extend scikit-learn pipelines in several ways, including: i) make it\n  possible to use any data type in the communication between components.\n  This is done through data conversion layers that facilitate reusing\n  the components across different pipelines, regardless of the data\n  format used by rest of the components. In particular, two important\n  data types enabled in `DS Blocks` are DataFrames and dictionaries.\n  Using pandas DataFrame is suitable for many data science problems such\n  as time-series analysis, making it easy to visualize different periods\n  of time, subsets of variables and categories (i.e., normal vs\n  anomaly). While standard scikit-learn components accept DataFrame as\n  input data type, the output is always provided as a numpy array,\n  making it necessary to manually convert the output back to the\n  original DataFrame format every time, with the corresponding\n  proliferation of boiler-plate code. `DS Blocks` enables a consistent\n  use of DataFrames across the whole pipeline: when the input is a\n  DataFrame, the output will be a DataFrame as well, and when the input\n  is a numpy array the output is a numpy array.\n\n- Enable the use of sampling components that not only change the\n  variables (or columns) but also change the number of observations (or\n  rows), by either under-sampling or over-sampling. This is not\n  supported by standard scikit-learn components.\n\n## Comparison against other frameworks\n\n`DS Blocks` provides functionalities that are also present in frameworks\nsuch as [Metaflow](https://metaflow.org/),\n[Kedro](https://kedro.readthedocs.io/), \\[Ploomber\\]\n(https://ploomber.io/) and others. In this section we briefly comment on\nthe differences against these three frameworks, which are among the most\npopular ones. The main difference wrt to these frameworks is the use of\na compact design loosely similar to scikit-learn\u2019s estimator API, which\nallows to concisely express any ML solution with pipeline components\nthat are familiar in the community. Another important difference is\nthat, while our design allows to build any kind of Directed Acyclic\nGraph (DAG), we do not need to express the edges of such graph\nexplicitly, reducing the corresponding boiler-plate. Apart from those\ndifferences, we comment here on more specific differences wrt each\nframework:\n\n- The main difference wrt frameworks such as `Kedro`, is that we use a\n  pure-code approach, avoding the need of writing separate config files\n  that govern the behaviour of the pipeline.\n- The main difference wrt to `Metaflow`, is that we can to a large\n  extent keep the original code without by either wrapping it with\n  simple decorators and classes, or just constructing our pipeline as a\n  sequence of the original functions and classes. While `Metaflow`\n  allows to create flows of original functions, it uses a more verbose\n  approach for achieving this, as shown in the examples.\n- The main difference with `Ploomber`, `Luigi`, and other frameworks is\n  that our pipelines are constructed programmatically with pure python,\n  not by gluing together the inputs and outputs of applications that are\n  run separately.\n\n## Installation\n\nDS Blocks is pip installable:\n\n``` bash\npip install dsblocks\n```\n\n## Example usage\n\n### Baseline problem\n\nAs a first baseline example, we start by taking\n[Optuna](https://optuna.org/#code_examples)\u2019s quadratic problem: find\nthe value of $X$ that minimizes:\n\n$$(X-2)^2$$\n\nThis is implemented using three simple functions:\n\n``` python\nfrom dsblocks import Sequential, Component\nimport numpy as np\n```\n\n``` python\ndef subtract2 (X): \n    return X-2\ndef square (X): \n    return X*X\n\npipeline = Sequential (subtract2, square, np.argmin)\n```\n\n``` python\nX = np.arange (5)\nidx_min = pipeline (X)\nprint (f'index of X with optimal solution: {idx_min}, value: {X[idx_min]}')\n```\n\n    index of X with optimal solution: 2, value: f2\n\nSequential pipes the results from one function into the next, the final\none being `np.argmin`. In this toy example each function performs a\nsimple calculation, but in general they perform time-consuming\nprocesses.\n\nMany times, the first step of pipeline is to get the data from an\nexternal source or storage. We now augment the pipeline to include this\nstep and also include persistence and logging:\n\n``` python\ndef get_data ():\n    return np.arange (5)\n\npipeline = Sequential (get_data, subtract2, square, np.argmin,\n                       verbose=2, path_results='square_problem')\n\npipeline()\n```\n\n    applying pipeline (on whole data)\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/pipeline_result.pk\n    loaded pre-computed result\n\n    2\n\nNow we can easily load the results of intermediate steps:\n\n``` python\npipeline.subtract2.load_result ()\n```\n\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/subtract2_result.pk\n\n    array([-2, -1,  0,  1,  2])\n\n``` python\npipeline.square.load_result()\n```\n\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/square_result.pk\n\n    array([4, 1, 0, 1, 4])\n\nWe can simulate the case where there was an interrumption in the\nexecution and we need to resume it:\n\n``` python\nrm square_problem/whole/subtract2_result.pk\n```\n\n``` python\nrm square_problem/whole/square_result.pk\n```\n\n``` python\nrm square_problem/whole/pipeline_result.pk\n```\n\n``` python\npipeline ()\n```\n\n    applying pipeline (on whole data)\n    applying get_data (on whole data)\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/get_data_result.pk\n    loaded pre-computed result\n    applying subtract2 (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/subtract2_result.pk\n    applying square (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/square_result.pk\n    applying argmin (on whole data)\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/argmin_result.pk\n    loaded pre-computed result\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/pipeline_result.pk\n\n    2\n\nWe can see that the first intermediate results, from `get_data` and\n`subtract2` are loaded, while the remaining steps, whose results we\nremoved from disk, are computed and their results saved.\n\n### Example using data converters\n\nLet us modify the above problem as follows: we want to find the\nhyper-parameter `c` that minimizes the following regression problem:\n\n$$\n(X+c)^T (X+c) = Y,\n$$\n\ngiven a simple 1D dataset:\n\n$$\nX = (0, 1, 2)^T \\\\\nY = (4, 9, 16)^T\n$$\n\nwhere the ground-truth $y_i$ is always $y_i = (x_i+2) ^ 2$, and\ntherefore the optimal solution is $c=2$.\n\n``` python\nfrom dsblocks.core.data_conversion import DataConverter\nfrom sklearn.metrics import mean_squared_error\n```\n\n``` python\ndef get_data ():\n    X = np.array ([0, 1, 2])\n    Y = np.array ([4, 9, 16])\n    return X, Y\n\ndef add_c (X, c):\n    return X+c\n\ndef square (X):\n    return X*X\n\n# wrong pipeline, see below\npipeline = Sequential (get_data, add_c, square, mean_squared_error)\n```\n\nThere are two issues with the above pipeline:\n\n- The first function `get_data ()` provides a result with two variables:\n  `X` and `Y`. The subsequent components `add_c` and `square` do not\n  expect to receive `Y`, but the last function, `mean_squared_error`\n  needs it. We address this by using *data converters*, which in our\n  case drop the Y variable in all the cases except in the last step\n  where it is needed.\n\n- The function `add_c` has an additional argument `c` that is not\n  provided by the previous function. We address this by passing `c` as a\n  parameter of the first component. This will allow us later to run N\n  pipelines in parallel, one for each candidate value of `c`, so that we\n  can find a good value.\n\nBefore illustrating how those items are typically implemented with\n`DS Blocks`, let us first see a more standard solution: using wrappers\nfor data conversion, and partial functions for indicating the value of\n`c` in the pipeline. The use of wrappers is suitable for instance if we\nhave external functions that are used in our pipeline.\n\n``` python\nfrom functools import partial\n```\n\n``` python\ndef ignore_labels (func):\n    def wrapper (X, Y):\n        # 1. \"data conversion\" before calling function: Y is dropped, and only X is passed\n        result = func (X)\n        # 2. \"data conversion\" after calling the function: Y is attached to the result\n        return result, Y\n    return wrapper\n\nc = 0 # pipeline parametrized with c=0\npipeline = Sequential (get_data, \n                       ignore_labels (partial (add_c, c=c)), \n                       ignore_labels (square), \n                       mean_squared_error)\nerror = pipeline () \nprint (f'the error obtained with c={c} is {error}')\n```\n\n    the error obtained with c=0 is 74.66666666666667\n\nWhile the previous approach works fine in the previous example, our\npipelines also accept classes of objects with several methods, not only\nsimple functions. In particular, our pipelines accept estimators that\nhave methods similar to `fit`, `predict` and `transform`. For such case,\nit is more convenient to use\n[`DataConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#dataconverter)\nobjects as illustrated in the code below. A similar thing happens\nregarding the use of `partial`. Since we might have multiple methods\nwhose parameters we migth want to indicate at construction time, we need\nsomething more generic, and concise, than partial. The next code\nillustrates these ideas in `DS Blocks`.\n\n``` python\nfrom dsblocks.core.data_conversion import DataConverter\n```\n\n``` python\nclass IgnoreLabels (DataConverter):\n    def __init__ (self, **kwargs):\n        super ().__init__ (**kwargs)\n    def convert_before_applying (self, X, Y, **kwargs):\n        self.Y = Y\n        return X\n    def convert_after_applying (self, result, **kwargs):\n        return result, self.Y\n        \npipeline = Sequential (get_data,\n                       Component(add_c, c=c, data_converter=IgnoreLabels),\n                       Component(square, data_converter=IgnoreLabels), \n                       mean_squared_error)\n\nerror = pipeline () \nprint (f'the error obtained with c={c} is {error}')\n```\n\n    the error obtained with c=0 is 74.66666666666667\n\n### Using [`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\n\nWe can estimate the error obtained by multiple values of the parameter\n`c`, using a\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject. This object is a pipeline similar to `Sequential` but where the\noutputs are not piped linearly from one step to the next. By default,\nthe same initial input is fed to all the components that compose the\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject, and the output from all of them is gathered in a tuple. Both\nthings can be, however, configured though callbacks. Let us see how it\nworks in our case.\n\n``` python\nfrom dsblocks import Parallel\n```\n\n``` python\npipelines = (Sequential (get_data, \n                         Component(add_c, c=c, data_converter=IgnoreLabels),\n                         Component(square, data_converter=IgnoreLabels), \n                         mean_squared_error)\n              for c in range(0,5))\n\nparallel = Parallel (*pipelines)\n\nresult = parallel ()\n```\n\nAs we can see, our\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject is composed of 5 pipeline components, each pipeline receiving a\ndifferent value of parameter `c`. The\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject then runs those pipelines and gathers their result in a tuple.\n\nIn general, the\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject can be constructed by passing any collection of components, and\nthis collection can be heterogeneous. While in the current case, we have\nconstructed multiple copies of the same `Sequential` object, we can as\nwell have a single copy that receives different values of `c` each time,\nby using the\n[`ParallelInstances`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallelinstances)\nclass. However, its use is currently a bit more elaborate and we leave\nthis topic for an advanced tutorial. Let us see now the error as a\nfunction of `c`:\n\n``` python\nimport matplotlib.pyplot as plt\n```\n\n``` python\nplt.plot (result, 'b.-')\n```\n\n![](index_files/figure-commonmark/cell-21-output-1.png)\n\n### Fitting models and sub-classing [`Component`](https://Jaume-JCI.github.io/ds-blocks/core/components.html#component)\n\n``` python\nfrom dsblocks import Component, Sequential\nfrom dsblocks.core.data_conversion import DataConverter\nfrom sklearn.metrics import mean_squared_error\n```\n\n``` python\ndef get_data ():\n    X = np.array ([0, 1, 2])\n    Y = np.array ([4, 9, 16])\n    return X, Y\n\nclass BruteForceModel (Component):\n    def __init__ (self, c_values=range(5), **kwargs):\n        super().__init__ (**kwargs)\n    \n    def _apply (self, X):\n        return (X+self.c)**2\n\n    def _fit (self, X, Y):\n        error = np.empty ((len(self.c_values),))\n        for i, c in enumerate(self.c_values):\n            self.c = c\n            Y_hat = self._apply (X)\n            error[i] = mean_squared_error (Y, Y_hat)\n        self.c = self.c_values[np.argmin (error)]\n\npipeline = Sequential (get_data, \n                       BruteForceModel, \n                       Component(mean_squared_error, data_converter='NoConverter'))\npipeline.fit_apply ()\n```\n\n    0.0\n\n``` python\nclass IgnoreLabels (DataConverter):\n    def __init__ (self, **kwargs):\n        super ().__init__ (**kwargs)\n    \n    # transform\n    def convert_before_applying (self, X, Y, **kwargs):\n        self.Y = Y\n        return X\n    def convert_after_applying (self, result, **kwargs):\n        return result, self.Y\n    \n    # fit\n    def convert_before_fitting (self, X, Y, **kwargs):\n        self.Y = Y\n        return X, Y\n\npipeline = Sequential (Component (get_data, data_converter='NoConverter'),\n                       BruteForceModel (data_converter=IgnoreLabels),\n                       Component(mean_squared_error, data_converter='NoConverter'))\n\npipeline.fit_apply ()\n\nprint (f'value of c: {pipeline.brute_force_model.c}')\n```\n\n    value of c: 2\n\n``` python\nclass BruteForceModel ():\n    def __init__ (self, c_values=range(5), **kwargs):\n        self.c_values = c_values\n    \n    def transform (self, X):\n        return (X+self.c)**2\n\n    def fit (self, X, Y):\n        error = np.empty ((len(self.c_values),))\n        for i, c in enumerate(self.c_values):\n            self.c = c\n            Y_hat = self.transform (X)\n            error[i] = mean_squared_error (Y, Y_hat)\n        self.c = self.c_values[np.argmin (error)]\n        return self\n\npipeline = Sequential (Component (get_data, data_converter='NoConverter'),\n                       Component (BruteForceModel(), data_converter=IgnoreLabels),\n                       Component (mean_squared_error, data_converter='NoConverter'))\npipeline.fit_apply ()\n```\n\n    0.0\n\n### Using MultiSplit objects\n\n``` python\nfrom sklearn.model_selection import train_test_split\nfrom dsblocks.core.compose import MultiSplitDict\n```\n\n``` python\ndef get_data (n=225, noise=1.0):\n    X = np.arange (n) \n    Y = (X+2)**2 + np.random.randn (n) * noise\n    return X, Y\n\ndef generate_split (X, Y, proportion_training=0.8):\n    n_samples_train=int(len(X)*proportion_training)\n    n_samples_test=len(X)-n_samples_train\n    X_train, X_test, Y_train, Y_test = train_test_split(\n        X, Y, train_size=n_samples_train, test_size=n_samples_test, shuffle=False\n    )\n    data = dict (training=(X_train, Y_train),\n                 test=(X_test, Y_test))\n    return data\n\nbrute_force_model = BruteForceModel(c_values=[1.8, 1.9, 2.0, 2.1, 2.2])\npipeline = Sequential (get_data, \n                       Component(generate_split, data_converter='NoConverter'), \n                       MultiSplitDict (Component(brute_force_model, data_converter=IgnoreLabels)), \n                       MultiSplitDict(Component(mean_squared_error, data_converter='NoConverter')))\npipeline.fit_apply()\n```\n\n    {'training': 1.0385118754467242, 'test': 0.7858863403210958}\n\n### Using experiment tracking\n\n``` python\nfrom dsblocks.core.compose import SequentialWithTracking\n\ntracking_pipeline = SequentialWithTracking (pipeline)\n```\n\n    could not pickle object: Can't pickle <class 'dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager'>: it's not found as dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager\n    could not pickle object: Can't pickle <class 'dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager'>: it's not found as dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager\n\nWe can run the pipeline with different parameters and have the results\ntracked\n\n``` python\nerror = tracking_pipeline.fit_apply (n=5, noise=1000)\nprint (f'error: {error}')\nprint (f'fitted parameter: {tracking_pipeline.cls.BruteForceModel.estimator.c}')\n```\n\n    error: {'training': 577610.2579625886, 'test': 8241488.206360425}\n    fitted parameter: 1.8\n\n``` python\ndata=joblib.load ('.dsblocks/main/experiments/00000/0/whole/generate_split_result.pk')\nprint ('training X: ', data['training'][0], '\\ntraining Y: ', data['training'][1])\n```\n\n    training X:  [0 1 2 3] \n    training Y:  [-1461.89345869   -37.84917166   180.99375497   389.09645245]\n\n``` python\nerror = tracking_pipeline.fit_apply (n=1000, noise=1000)\nprint (f'error: {error}')\nprint (f'fitted parameter: {tracking_pipeline.cls.BruteForceModel.estimator.c}')\n```\n\n    error: {'training': 943850.4502534339, 'test': 986840.6863515133}\n    fitted parameter: 1.9\n\n``` python\nerror = tracking_pipeline.fit_apply (n=10000, noise=1000)\nprint (f'error: {error}')\nprint (f'fitted parameter: {tracking_pipeline.cls.BruteForceModel.estimator.c}')\n```\n\n    error: {'training': 1015048.3910494718, 'test': 992893.6028738584}\n    fitted parameter: 2.0\n\n``` python\nem = tracking_pipeline.get_experiment_manager ()\n```\n\n``` python\ndf = em.get_experiment_data ()\ndf [['parameters','scores']]\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">parameters</th>\n      <th colspan=\"2\" halign=\"left\">scores</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>function</th>\n      <th>n</th>\n      <th>noise</th>\n      <th>test</th>\n      <th>training</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>0</th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>fit_apply</td>\n      <td>5</td>\n      <td>1000</td>\n      <td>8241488.20636</td>\n      <td>577610.257963</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fit_apply</td>\n      <td>1000</td>\n      <td>1000</td>\n      <td>986840.686352</td>\n      <td>943850.450253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fit_apply</td>\n      <td>10000</td>\n      <td>1000</td>\n      <td>992893.602874</td>\n      <td>1015048.391049</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n``` python\nem.grid_search (\n    parameters_multiple_values=dict (n=[int(1e5), int(1e6), int(1e7)],\n                                     noise=[10.0,100.0,1000.0])\n)\n```\n\n``` python\ndf = tracker.get_experiment_data()\n```\n\n``` python\ndf_to_analyze = df[df[('parameters','noise')]==100.0]\nparameter_to_analyze = df_to_analyze[('parameters','n')].values\nscores_training = df_to_analyze[('scores','training')].values\nscores_test = df_to_analyze[('scores','test')].values\n\nplt.plot (parameter_to_analyze, scores_training, 'b.-')\nplt.plot (parameter_to_analyze, scores_test, 'm.-')\nplt.xlabel ('size of training set')\nplt.ylabel ('error')\nplt.legend (['training', 'test'])\n```\n\n    <matplotlib.legend.Legend at 0x7f7c689c6050>\n\n![](index_files/figure-commonmark/cell-37-output-2.png)\n\n### Integration with Optuna\n\n``` python\ndef parameter_sampler (trial):\n    noise = trial.suggest_uniform('noise', 1000, 10000)\n    n = trial.suggest_categorical('n', [100, 250, 500])\n\n    parameters = dict(noise=noise,\n                      n=n)\n\n    return parameters\n\nem.key_score = 'test'\nem.hp_optimization (parameter_sampler=parameter_sampler)\n```\n\n    [I 2022-11-07 15:57:01,416] Using an existing study with name 'hp_study' instead of creating a new one.\n    [I 2022-11-07 15:57:01,860] Trial 1 finished with value: 40098705.3785892 and parameters: {'noise': 5939.321535345923, 'n': 100}. Best is trial 1 with value: 40098705.3785892.\n    [I 2022-11-07 15:57:02,274] Trial 2 finished with value: 29027633.822648745 and parameters: {'noise': 4812.8931940501425, 'n': 500}. Best is trial 1 with value: 40098705.3785892.\n    [I 2022-11-07 15:57:02,692] Trial 3 finished with value: 112301196.54020809 and parameters: {'noise': 9672.964844509264, 'n': 250}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:03,141] Trial 4 finished with value: 26854230.185282387 and parameters: {'noise': 6112.401049845391, 'n': 100}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:03,593] Trial 5 finished with value: 1322441.1874790885 and parameters: {'noise': 1181.9655769629314, 'n': 500}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:04,041] Trial 6 finished with value: 81736165.02785024 and parameters: {'noise': 9807.565080094875, 'n': 100}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:04,506] Trial 7 finished with value: 3852312.850922469 and parameters: {'noise': 2064.469832820399, 'n': 500}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:04,956] Trial 8 finished with value: 47582425.81597208 and parameters: {'noise': 5696.634895750645, 'n': 500}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:05,420] Trial 9 finished with value: 25898857.90976508 and parameters: {'noise': 5105.352989948937, 'n': 500}. Best is trial 3 with value: 112301196.54020809.\n    [I 2022-11-07 15:57:05,886] Trial 10 finished with value: 44545213.583875455 and parameters: {'noise': 6508.861504501792, 'n': 250}. Best is trial 3 with value: 112301196.54020809.\n\n    112301196.54020809\n\n``` python\nclass AddC (Component):\n    def __init__ (self, c=0, **kwargs):\n        super ().__init__ (**kwargs, labels_included_without_fitting=True)\n        self.c = c\n    def _apply (self, X):\n        return X+self.c\n```\n\n## Documentation\n\nFor further details, please see the\n[documentation](https://jaume-jci.github.io/ds-blocks/)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.8/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "sh",
                "ipynbname",
                "tensorflow",
                "rich",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "hpsearch ; extra == 'dev'"
            ],
            "requires_python": ">=3.7,<=3.10",
            "summary": "DS Blocks",
            "version": "0.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15687110,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fd7cf64111e1f74f24c31a0b1ff831cb",
                    "sha256": "69da503496026ea2f62aee86ad8febf0f49d271674b6966a2c3beeee641dcc61"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fd7cf64111e1f74f24c31a0b1ff831cb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.10",
                "size": 143218,
                "upload_time": "2022-11-07T16:26:05",
                "upload_time_iso_8601": "2022-11-07T16:26:05.372170Z",
                "url": "https://files.pythonhosted.org/packages/cf/60/ede11d7fe6f78477ca1cdd77dcf9609cb571b0b2ba71b9716ed3f7b9d755/dsblocks-0.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c330dacd07881ac20eb5fd534648f967",
                    "sha256": "0e6df233f99fb8db55bd412941ed7ce435f32444f85adbb454879f6352e030c0"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "c330dacd07881ac20eb5fd534648f967",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.10",
                "size": 139604,
                "upload_time": "2022-11-07T16:26:07",
                "upload_time_iso_8601": "2022-11-07T16:26:07.587709Z",
                "url": "https://files.pythonhosted.org/packages/38/93/3eee71798bed0f2b75458f84a26d321709be28e2ee5654ee9b3c767965de/dsblocks-0.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}