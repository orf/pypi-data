{
    "0.0.10": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.10/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "ipynbname",
                "tensorflow",
                "rich",
                "hpsearch",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "sh ; extra == 'linux'"
            ],
            "requires_python": ">=3.7,<=3.12",
            "summary": "DS Blocks",
            "version": "0.0.10",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ba9a647701f49c1d1ecd9bddcfccd998",
                    "sha256": "388ad85d644e8e9620c6bce3d7df6c37d3c7befa425d276583297d8d1ef6de67"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.10-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ba9a647701f49c1d1ecd9bddcfccd998",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.12",
                "size": 133849,
                "upload_time": "2022-11-27T22:02:17",
                "upload_time_iso_8601": "2022-11-27T22:02:17.118216Z",
                "url": "https://files.pythonhosted.org/packages/a9/c9/471a9847a4670ece354ee0eb664447122343be1d0b65a29955ea603a2320/dsblocks-0.0.10-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "4af4ba857c8e1774fc30446bbabd74c3",
                    "sha256": "3df42547837d5b4cd96c25390afb900d0dd2352f4c0aca610c803e2bb88e0b83"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.10.tar.gz",
                "has_sig": false,
                "md5_digest": "4af4ba857c8e1774fc30446bbabd74c3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.12",
                "size": 146606,
                "upload_time": "2022-11-27T22:02:19",
                "upload_time_iso_8601": "2022-11-27T22:02:19.428185Z",
                "url": "https://files.pythonhosted.org/packages/e9/73/f4f2641a0505f9f0fd94a0e8c363a9225bed37d118e5007db4a8340d16e1/dsblocks-0.0.10.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.11": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.11/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "ipynbname",
                "tensorflow",
                "rich",
                "hpsearch",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "sh ; extra == 'linux'"
            ],
            "requires_python": ">=3.7,<=3.12",
            "summary": "DS Blocks",
            "version": "0.0.11",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d565db08467ba78746afa3a38b494fe8",
                    "sha256": "d8ab1dcd1d5947ed7190275616feaba23973c00e3ee11862377d4d78df41d833"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.11-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d565db08467ba78746afa3a38b494fe8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.12",
                "size": 153410,
                "upload_time": "2022-11-29T15:03:17",
                "upload_time_iso_8601": "2022-11-29T15:03:17.381618Z",
                "url": "https://files.pythonhosted.org/packages/66/f1/23c33c098bc358774b8a63a8f35b70360cefae7547cb7d6ef555154d13b3/dsblocks-0.0.11-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "49d1ce3d78752723fe7cbbd57477295f",
                    "sha256": "8b9bf4a3885a03376f3433883f84809d60e33c6af8be241496df750487c8874c"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.11.tar.gz",
                "has_sig": false,
                "md5_digest": "49d1ce3d78752723fe7cbbd57477295f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.12",
                "size": 165518,
                "upload_time": "2022-11-29T15:03:19",
                "upload_time_iso_8601": "2022-11-29T15:03:19.725956Z",
                "url": "https://files.pythonhosted.org/packages/ab/1e/d57cef2d1e14374254596f8da32746c72986f87a6867c71877863974a4ca/dsblocks-0.0.11.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.12": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.12/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "ipynbname",
                "tensorflow",
                "rich",
                "hpsearch",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "sh ; extra == 'linux'"
            ],
            "requires_python": ">=3.7,<=3.12",
            "summary": "DS Blocks",
            "version": "0.0.12",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c70af3609d3d73e6dd9d3a776daade1c",
                    "sha256": "e75378a6d7bdc5c6413e7810798664126dc9fe56a52e7a37166d47bf862a3184"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.12-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c70af3609d3d73e6dd9d3a776daade1c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.12",
                "size": 154027,
                "upload_time": "2022-11-30T22:47:16",
                "upload_time_iso_8601": "2022-11-30T22:47:16.718235Z",
                "url": "https://files.pythonhosted.org/packages/95/f7/288bfcea7fd23ce2c2295f87a97a08c1fcae74e4f746e3f82e7c84b1dc10/dsblocks-0.0.12-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3f6a9ebca65e75760abe35a4c971e7c5",
                    "sha256": "f6c92cef590c129fbee4423355e272f976002074df5c4b7533228a0397444ef9"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.12.tar.gz",
                "has_sig": false,
                "md5_digest": "3f6a9ebca65e75760abe35a4c971e7c5",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.12",
                "size": 166122,
                "upload_time": "2022-11-30T22:47:18",
                "upload_time_iso_8601": "2022-11-30T22:47:18.978937Z",
                "url": "https://files.pythonhosted.org/packages/a0/f6/e85c80ed74dd710f1ca8768a32ecbd8abbee1ebf967b4914b028bf70f218/dsblocks-0.0.12.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.13": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.13/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "ipynbname",
                "tensorflow",
                "rich",
                "hpsearch",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "sh ; extra == 'linux'"
            ],
            "requires_python": ">=3.7,<=3.12",
            "summary": "DS Blocks",
            "version": "0.0.13",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cfbcd812d5040b1fcb091cf4f47c2e10",
                    "sha256": "0105c24deb06965c4e786706168a75b2769dd2aa614effb89f2d516b44bd8c3b"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.13-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cfbcd812d5040b1fcb091cf4f47c2e10",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.12",
                "size": 154033,
                "upload_time": "2022-12-01T10:37:55",
                "upload_time_iso_8601": "2022-12-01T10:37:55.991802Z",
                "url": "https://files.pythonhosted.org/packages/1d/e0/0c20bd19dfd802bf55fdde905167f5a7fd73d4883d0e5ebca87e5411e7a7/dsblocks-0.0.13-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "3af92903eac2e80e13910a42d40e5ead",
                    "sha256": "73f403c7db8808064036e22335904ec47b2f2c1f7af12165bb683c90442847bb"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.13.tar.gz",
                "has_sig": false,
                "md5_digest": "3af92903eac2e80e13910a42d40e5ead",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.12",
                "size": 166158,
                "upload_time": "2022-12-01T10:37:58",
                "upload_time_iso_8601": "2022-12-01T10:37:58.071244Z",
                "url": "https://files.pythonhosted.org/packages/57/0c/283e2b0035bfb4291d2e389a1ea2b4138092af9e5ad44b4577f396c2337a/dsblocks-0.0.13.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.5": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks/tree/main/",
            "keywords": "Block Types",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks/tree/main/"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.5/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "nbdev",
                "pytest",
                "ipython",
                "jupyter",
                "ipykernel",
                "matplotlib",
                "graphviz"
            ],
            "requires_python": ">=3.7",
            "summary": "Write highly modular, compact, and decoupled data science pipelines.",
            "version": "0.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "57fbb2aeeba0d242d096cd87095b3549",
                    "sha256": "3e3c3ad93858ba9f44bc6b017ff29cc78062b3f9d60317cce758b47e7b22b1e3"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "57fbb2aeeba0d242d096cd87095b3549",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 60204,
                "upload_time": "2022-05-07T21:54:11",
                "upload_time_iso_8601": "2022-05-07T21:54:11.814371Z",
                "url": "https://files.pythonhosted.org/packages/c1/10/17261c905e7261f174bd1e3bf392633603bc23b6dcd4170ba907cd6d2e7e/dsblocks-0.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "93a1339443ea34a49c29827f7d45a3d1",
                    "sha256": "e63f6f95b60928cd5a1ebbb64ba833f4d814e18af4f3981cc1359a1b500a4b24"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "93a1339443ea34a49c29827f7d45a3d1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 52459,
                "upload_time": "2022-05-07T21:54:13",
                "upload_time_iso_8601": "2022-05-07T21:54:13.429289Z",
                "url": "https://files.pythonhosted.org/packages/7c/38/47a77e1d603462088d2b59b92cd12b138f046b11bfb8a2723a7fcdbfc59b/dsblocks-0.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.6": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.6/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "pytest",
                "pytest-cov",
                "ipython",
                "jupyter",
                "ipykernel",
                "matplotlib",
                "graphviz",
                "optuna",
                "sh",
                "ipynbname",
                "tensorflow"
            ],
            "requires_python": ">=3.7",
            "summary": "DS Blocks",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c4b77c1b38edc0ce27ce7b58b52888e8",
                    "sha256": "0caad5daa9d9f35cf7dbb4904267c38dabf1096d4202bc80ec19fe77d623aa10"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c4b77c1b38edc0ce27ce7b58b52888e8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 116073,
                "upload_time": "2022-09-01T21:32:57",
                "upload_time_iso_8601": "2022-09-01T21:32:57.649473Z",
                "url": "https://files.pythonhosted.org/packages/95/7d/17e939cb96b7ee6f21be1414114f71e76361c8e8ff3500dcad1472fd9ff7/dsblocks-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d2a1f6a108a6a36703c15d247ad70e49",
                    "sha256": "b9fa14a87f3548e68d9bf5f4c652051674a78a96fee466dd290a775416e501d6"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "d2a1f6a108a6a36703c15d247ad70e49",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 107454,
                "upload_time": "2022-09-01T21:32:59",
                "upload_time_iso_8601": "2022-09-01T21:32:59.930085Z",
                "url": "https://files.pythonhosted.org/packages/75/bf/79a07b01ab6589ddcd446a3e8e18492978b233ad0c122c6c1901d8052a2c/dsblocks-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.7": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.7/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "sh",
                "ipynbname",
                "tensorflow",
                "rich",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "hpsearch ; extra == 'dev'"
            ],
            "requires_python": ">=3.7",
            "summary": "DS Blocks",
            "version": "0.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dad6275d6c4cb439bd7ba3cf2affd9e0",
                    "sha256": "cd8bc857f0535fd3925379243d5efb2d5c1318b0966c3552329ed7f99420b21e"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dad6275d6c4cb439bd7ba3cf2affd9e0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 139602,
                "upload_time": "2022-11-03T21:54:45",
                "upload_time_iso_8601": "2022-11-03T21:54:45.241191Z",
                "url": "https://files.pythonhosted.org/packages/37/84/d36eb918251b9f7db82255c6e113a6b4acffeee686b23752920e9d20860d/dsblocks-0.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ad5e07b220f240df4f46b71e7c98f281",
                    "sha256": "064999a459a3baf0b34d2b37499e2b5d4924d5412d61d2f1d4e9bf5801ba3ab1"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "ad5e07b220f240df4f46b71e7c98f281",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 129835,
                "upload_time": "2022-11-03T21:54:46",
                "upload_time_iso_8601": "2022-11-03T21:54:46.760004Z",
                "url": "https://files.pythonhosted.org/packages/0d/f3/a639d613e05658a27661e17d5cc77d9148ff689df9853339cb53dc43d29a/dsblocks-0.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.8": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.8/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "sh",
                "ipynbname",
                "tensorflow",
                "rich",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "hpsearch ; extra == 'dev'"
            ],
            "requires_python": ">=3.7,<=3.10",
            "summary": "DS Blocks",
            "version": "0.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fd7cf64111e1f74f24c31a0b1ff831cb",
                    "sha256": "69da503496026ea2f62aee86ad8febf0f49d271674b6966a2c3beeee641dcc61"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fd7cf64111e1f74f24c31a0b1ff831cb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.10",
                "size": 143218,
                "upload_time": "2022-11-07T16:26:05",
                "upload_time_iso_8601": "2022-11-07T16:26:05.372170Z",
                "url": "https://files.pythonhosted.org/packages/cf/60/ede11d7fe6f78477ca1cdd77dcf9609cb571b0b2ba71b9716ed3f7b9d755/dsblocks-0.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c330dacd07881ac20eb5fd534648f967",
                    "sha256": "0e6df233f99fb8db55bd412941ed7ce435f32444f85adbb454879f6352e030c0"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "c330dacd07881ac20eb5fd534648f967",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.10",
                "size": 139604,
                "upload_time": "2022-11-07T16:26:07",
                "upload_time_iso_8601": "2022-11-07T16:26:07.587709Z",
                "url": "https://files.pythonhosted.org/packages/38/93/3eee71798bed0f2b75458f84a26d321709be28e2ee5654ee9b3c767965de/dsblocks-0.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.9": {
        "info": {
            "author": "Jaume Amores",
            "author_email": "jamorej@jci.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "DS Blocks\n================\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->\n\n`DS Blocks` makes it easy to write highly modular and compact data\nscience pipelines. It is based on a generalization of the well-known\nscikit-learn pipeline design, enriching and extending it in multiple\nways. By doing so, `DS Blocks` makes it possible to express the ML\nsolution in terms of independent building blocks that can be easily\nmoved around and reused to create different solutions. At the same time,\n`DS Blocks` makes it possible to write concise code by automatically\ntaking care of common steps that are needed when building a data science\npipeline, such as checkpointing, logging, profiling, data conversion,\nand more, resulting in a significant reduction of boiler-plate code.\n\n`DS Blocks` also provides a number of features that facilitate working\nwith notebooks, such as:\n\n- Integration with [nbdev](https://nbdev.fast.ai/) and extension of its\n  functionalities. `nbdev` is a powerful framework that streamlines\n  development on notebooks using best software practices. `DS Blocks`\n  extends `nbdev` by making it possible to convert notebooks into a test\n  suite for external engines such as `pytest`. It also allows convenient\n  freezing and unfreezing notebook test cells to avoid recomputing the\n  tests every time we need to restart and re-run the notebook.\n\n- `DS Blocks` provides several magic functions that facilitate\n  reproducibility. It also provides convenient decorators for converting\n  functions into pipeline components and reducing boiler-plate.\n\n- In addition to a powerful pipeline design (see below), `DS Blocks`\n  provides out-of-the-box components frequently used in Data Science,\n  such as for cross-validation and model-selection, building ensembles,\n  working with time-series, and more.\n\n## Features\n\nThe following is a selection of some of the benefits provided by using\n`DS Blocks` pipelines:\n\n- Automatize common steps that are usually present in ML code, including\n  caching / loading of intermediate results across the entire pipeline,\n  logging, profiling, conversion of data to appropriate format, and\n  more.\n\n- Easy debugging of the entire pipeline, both during the current run as\n  well as post-mortem. Facilitates investigation of issues occurred\n  during past runs.\n\n- Make it possible to easily show statistics and other types of\n  information about the output of each component in the pipeline, print\n  a summary of the pipeline, plot a diagram of the components, and show\n  the dimensionality of the output provided by each component.\n\n- Make it possible to use any data type in the communication between\n  components. This is done through data conversion layers that\n  facilitate reusing the components across different pipelines,\n  regardless of the data format used by rest of the components. This\n  functionality allows, for instance, to have a consistent use of\n  DataFrames across the whole pipeline: when the input is a DataFrame,\n  the output will be a DataFrame as well, and when the input is a numpy\n  array the output is a numpy array. This is just an example, the\n  proposed design allows to easily support many other use cases.\n\n- Enable the use of sampling components that not only change the\n  variables (or columns) but also change the number of observations (or\n  rows), by either under-sampling or over-sampling, which is not\n  supported by common pipelines such as the ones provided in\n  scikit-learn.\n\n- Integrated experiment tracking and hyper-parameter optimization.\n\n- And many more!\n\n## Comparison against other frameworks\n\n`DS Blocks` provides functionalities that are also present in frameworks\nsuch as [Metaflow](https://metaflow.org/),\n[Kedro](https://kedro.readthedocs.io/),\n[Ploomber](https://ploomber.io/), and others. In this section we briefly\ncomment on the differences against these three frameworks, which are\namong the most popular ones. An important difference with respect to\nthese frameworks is that, while our design allows to build any kind of\nDirected Acyclic Graph (DAG), we do not need to express the edges of\nsuch graph explicitly, reducing the corresponding boiler-plate. Another\ndifference is the use of a compact design loosely similar to\nscikit-learn\u2019s pipelines and estimators, which allows to concisely\nexpress any ML solution in a familiar syntax.\n\nApart from those differences, we comment here on more specific\ndifferences wrt each framework:\n\n- The main difference with respect to frameworks such as `Kedro`, is\n  that we use a pure-code approach, avoding the need of writing separate\n  config files that govern the behaviour of the pipeline.\n- The main difference wrt to `Metaflow`, is that `DS Blocks` allows to\n  keep the original code without changes, and extend its functionality\n  by simply declaring sequences of the original functions and classes.\n  While `Metaflow` allows to create flows of original functions, it uses\n  a more verbose approach for achieving this.\n- The main difference with `Ploomber`, `Luigi`, and other frameworks is\n  that our pipelines are constructed programmatically with pure python,\n  not by gluing together the inputs and outputs of applications that are\n  run separately.\n\n## Installation\n\nDS Blocks is pip installable:\n\n``` bash\npip install dsblocks\n```\n\n## Example usage\n\n### Baseline problem\n\nIn the first problem, we will only use the `Sequential` class. Let us\nimport it, together with the numpy library.\n\n``` python\nimport numpy as np\nfrom dsblocks import Sequential\n```\n\nThis first example is taken from\n[Optuna](https://optuna.org/#code_examples)\u2019s quadratic problem: find\nthe value of $X$ that minimizes:\n\n$$(X-2)^2$$\n\nWe start by using a simple data vector as input: $$X=(0,1,2,3,4)^T$$\n\n``` python\nX = np.arange (5)\n```\n\nFor the sake of this example, we decompose the aforementioned quadratic\nequation into two simple functions: `subtract2` and `square`, and add a\nthird function `np.argmin` to find the value of `X` that minimizes this\nequation. The three functions are then assembled in a `Sequential`\npipeline as follows:\n\n``` python\ndef subtract2 (X): \n    return X-2\ndef square (X): \n    return X*X\n\npipeline = Sequential (subtract2, square, np.argmin)\n```\n\nThe `Sequential` pipeline feeds the results from one function into the\nnext, the final one being `np.argmin`. In this toy example each function\nperforms a simple calculation, but in general they perform\ntime-consuming processes. After this, we obtain the result of this\npipeline by just calling it on the input data `X`:\n\n``` python\nidx_min = pipeline (X)\nprint (f'Value of X that minimizes the equation : {X[idx_min]}')\n```\n\n    Value of X that minimizes the equation : 2\n\nMany times, the first step of the pipeline is to get the data from an\nexternal source or storage. We now augment the pipeline by including a\nnew function `get_data` which runs as first step. We also include\npersistence and logging in the pipeline by passing `verbose=2` and\n`path_results='square_problem'`:\n\n``` python\ndef get_data ():\n    return np.arange (5)\n\npipeline = Sequential (get_data, subtract2, square, np.argmin,\n                       verbose=2, path_results='square_problem')\npipeline()\nprint (f'Value of X that minimizes the equation : {X[idx_min]}')\n```\n\n    applying pipeline (on whole data)\n    applying get_data (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/get_data_result.pk\n    applying subtract2 (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/subtract2_result.pk\n    applying square (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/square_result.pk\n    applying argmin (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/argmin_result.pk\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/pipeline_result.pk\n\n    Value of X that minimizes the equation : 2\n\nWe can see the logs of each step being executed and its results saved to\ndisk.\n\nNow we can easily load the results of intermediate steps:\n\n``` python\nresult = pipeline.subtract2.load_result ()\nprint ('result of X-2: ', result)\n```\n\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/subtract2_result.pk\n\n    result of X-2:  [-2 -1  0  1  2]\n\n``` python\nresult = pipeline.square.load_result()\nprint ('result of (X-2)^2: ', result)\n```\n\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/square_result.pk\n\n    result of (X-2)^2:  [4 1 0 1 4]\n\nLet us see the case where there was an interrumption in the execution\nand we need to resume it. We simulate this case by removing the\nintermediate results that happened after the interrumption:\n`subtract2_result`, `square_result`, and the final `pipeline_result`:\n\n``` python\n!rm square_problem/whole/subtract2_result.pk\n!rm square_problem/whole/square_result.pk\n!rm square_problem/whole/pipeline_result.pk\n```\n\nLet us now re-run the pipeline, and see which steps are loaded and which\nones are re-computed:\n\n``` python\npipeline ()\n```\n\n    applying pipeline (on whole data)\n    applying get_data (on whole data)\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/get_data_result.pk\n    loaded pre-computed result\n    applying subtract2 (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/subtract2_result.pk\n    applying square (on whole data)\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/square_result.pk\n    applying argmin (on whole data)\n    loading from /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/argmin_result.pk\n    loaded pre-computed result\n    saving to /home/jcidatascience/jaume/workspace/remote/ds-blocks/square_problem/whole/pipeline_result.pk\n\n    2\n\nWe can see that the first intermediate results, from `get_data` and\n`subtract2` are loaded, while the remaining steps, `subtract2`, `square`\nand the final result of the `pipeline`, are re-computed (since their\nresult was removed from disk) and their result is saved to disk.\n\nBy default, results are always loaded and saved if we provide a\n`path_results` when constructing our pipeline. This default behaviour\ncan be changed by specifying the values of\n[`load`](https://Jaume-JCI.github.io/ds-blocks/utils/session.html#load)\nand `save` at construction time. For instance:\n\n``` python\npipeline = Sequential (component_1, component2,\n                       path_results='my_results', load=False)\n```\n\nwill save the result of the computation but not load it. This might be\nuseful when we want to overwrite the previous result with a newly\ncalculated one. The following:\n\n``` python\npipeline = Sequential (component_1, component2,\n                       path_results='my_results', save=False)\n```\n\nwill load the result, if it exists. If it doesn\u2019t, it will compute the\nresult but it won\u2019t save it.\n\n### Modified problem\n\nLet us now modify the previous problem as follows: we want to find the\nhyper-parameter `c` that minimizes the following regression problem:\n\n$$\n(X+c)^T (X+c) = Y,\n$$\n\ngiven a simple 1D dataset:\n\n$$\nX = (0, 1, 2)^T \n$$\n\n$$\nY = (4, 9, 16)^T\n$$\n\nIn this data, we have $y_i = (x_i+2) ^ 2$ $\\forall i$, and therefore the\noptimal solution is $c=2$.\n\nFor this problem we will measure the regression error using\n`mean_squared_error` from sklearn. Let us import it:\n\n``` python\nfrom sklearn.metrics import mean_squared_error\n```\n\nWe decompose the problem into four functions: `get_data`, `add_c`,\n`square`, and `mean_squared_error`:\n\n``` python\ndef get_data ():\n    X = np.array ([0, 1, 2])\n    Y = np.array ([4, 9, 16])\n    return X, Y\n\ndef add_c (X, c):\n    return X+c\n\ndef square (X):\n    return X*X\n\npipeline = Sequential (get_data, add_c, square, mean_squared_error)\n```\n\nThere are two issues with the above pipeline:\n\n1.  The first function `get_data ()` returns `X` and `Y`. However, the\n    subsequent component `add_c` does not consume `Y`. Therefore, it is\n    not correct to simply pass the output of the first step directly\n    into the next step. It is only the last function of the pipeline,\n    `mean_squared_error` which consumes `Y`. We address this by using\n    *data converters*, which drop the Y variable in all the cases except\n    in the last step where it is needed.\n\n2.  The function `add_c` has an argument `c` whose value is not provided\n    by the previous step.\n\nBefore illustrating how those items are typically implemented with\n`DS Blocks`, let us first see a more standard solution: for solving\nissue 1, we use wrappers that perform data conversion from one step to\nthe next. This is suitable if we reuse external functions in our\npipeline and we cannot modify those functions to our needs. The second\nissue is addressed by using a `partial` function where we fix the value\nof `c`. Let us see the resulting code:\n\n``` python\nfrom functools import partial\n```\n\n``` python\ndef ignore_labels (func):\n    def wrapper (X, Y):\n        # 1. \"data conversion\" before calling function: Y is dropped, and only X is passed\n        result = func (X)\n        # 2. \"data conversion\" after calling the function: Y is attached to the result\n        return result, Y\n    return wrapper\n\nc = 0 # pipeline parametrized with c=0\npipeline = Sequential (get_data, \n                       ignore_labels (partial (add_c, c=c)), \n                       ignore_labels (square), \n                       mean_squared_error)\nerror = pipeline () \nprint (f'the error obtained with c={c} is {error}')\n```\n\n    the error obtained with c=0 is 74.66666666666667\n\nThe previous approach works fine in the current example. However, in\ngeneral, our pipelines are designed to not only work with functions, as\nin this example, but to also work with estimators that have methods\nsimilar to `fit`, `predict` and `transform`. For such case, it is more\nconvenient to use\n[`DataConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#dataconverter)\nobjects as illustrated in the code below. The\n[`DataConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#dataconverter)\nallows to provide different conversion rules for each one of the\nmethods, `fit` and `predict`, called by the pipeline. A similar thing\nhappens regarding the use of `partial`: it works well when the steps of\nthe pipeline are single functions, but it is more problematic when each\nstep runs more than one method (e.g., `fit` and `predict`). The next\ncode illustrates how this is addressed in `DS Blocks`.\n\nWe start by importing the\n[`DataConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#dataconverter)\nclass:\n\n``` python\nfrom dsblocks.core.data_conversion import DataConverter\n```\n\n.. and defining a DataConverter for our pipeline, as follows:\n\n``` python\nclass IgnoreLabels (DataConverter):\n    def __init__ (self, **kwargs):\n        super ().__init__ (**kwargs)\n    def convert_before_applying (self, X, Y, **kwargs):\n        self.Y = Y\n        return X\n    def convert_after_applying (self, result, **kwargs):\n        return result, self.Y\n```\n\nAs we can see, our data converter implements two methods:\n\n- `convert_before_applying`: run *before* the given step of the pipeline\n  is run. It stores the variable `Y` returned by the previous step, and\n  only returns the variable `X`, so that the current step only receives\n  `X`.\n- `convert_after_applying`: run *after* the given step of the pipeline\n  is run. It attaches the variable `Y`, stored before, to whatever is\n  returned by the current step, so that the next step of the pipeline\n  will receive both the result of the current step and `Y`.\n\nThe above two methods manage the data conversion for *applying* the\ncurrent step. In the `DS Blocks` terminology, `apply` is equivalent to\n`predict` or `transform` on a scikit-learn estimator, and can be done\neither by calling the `apply` method, calling `predict` or `transform`\n(which are aliases), or just calling the component on the input data, as\nif it were a function (i.e., using `__call__`), which is what we do in\nthis tutorial.\n\nLater we will see how we can add methods to our\n[`DataConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#dataconverter)\nin order to manage data conversion before and after calling the `fit` in\nour pipeline components.\n\nNow, in order to use the implemented\n[`DataConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#dataconverter),\nwe need to wrap the functions that need this converter in a\n[`Component`](https://Jaume-JCI.github.io/ds-blocks/core/components.html#component)\nclass. These functions are `add_c` and `square`, and we indicate the\nDataConverter they need to use as follows:\n\n``` python\nComponent (add_c, data_converter=IgnoreLabels)\nComponent (square, data_converter=IgnoreLabels)\n```\n\nFurtyermore, in the case of `add_c`, we also want to indicate the value\nof the parameter `c`. This will prove useful later when estimating the\nerror for multiple values in parallel, see `Using Parallel` below:\n\n`Component (add_c, c=c, data_converter=IgnoreLabels)`,\n\nwhere `c` is some variable defined previously. Any parameter to be used\nby a given step can be specified in such a way. When the step uses an\nobject with several methods (e.g., `fit` and `transform`), we can\nindicate parameters to be used for both methods in the same way, like\n`Component (my_object, fit_param1=value1, fit_param2=value2, transform_param1=value3, ...)`.\n\nPutting all this together, we construct `Sequential` as follows:\n\n``` python\nfrom dsblocks import Component\n```\n\n``` python\npipeline = Sequential (get_data,\n                       Component(add_c, c=c, data_converter=IgnoreLabels),\n                       Component(square, data_converter=IgnoreLabels), \n                       mean_squared_error)\n```\n\n\u2026 and call it as usual\n\n``` python\nerror = pipeline () \nprint (f'the error obtained with c={c} is {error}')\n```\n\n    the error obtained with c=0 is 74.66666666666667\n\nIn the previous construction of `Sequential`, we have steps that are\nindicated by simply passing the name of the function that implements\nthis step, like `get_data` and `mean_squared_error`. Those steps are\nautomatically wrapped into\n[`Component`](https://Jaume-JCI.github.io/ds-blocks/core/components.html#component)\nclasses, so that at the end all the steps of the pipeline are defined by\nComponents:\n\n``` python\npipeline.components\n```\n\n    [Component GetData (name=get_data),\n     Component AddC (name=add_c),\n     Component Square (name=square),\n     Component MeanSquaredError (name=mean_squared_error)]\n\nOnly when we need to specify parameters that are specific of a given\nstep we do need to explicitly use a\n[`Component`](https://Jaume-JCI.github.io/ds-blocks/core/components.html#component)\nfor doing so, as we have done for `add_c` and `square`. If the parameter\nis common for all the steps, we can just pass it in the construction of\nSequential and it will be propagated to all the components, like so:\n\n``` python\nSequential (my_step1, my_step2, my_step3,\n               data_converter=MyDataConverter)\n```\n\nin which case all the components use `MyDataConverter` for data\nconversion.\n\n### Using [`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\n\nWe can estimate the error obtained by multiple values of the parameter\n`c`, using a\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject. This object is a pipeline similar to `Sequential` but where the\noutputs are not piped linearly from one step to the next. By default,\nthe same initial input is fed to all the components that compose the\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject, and the output from all of them is gathered in a tuple. Both\nthings can be, however, configured through callbacks. Let us see how it\nworks in our case.\n\nLet\u2019s start by importing\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel):\n\n``` python\nfrom dsblocks import Parallel\n```\n\nNow we define the components to be run in this pipeline. We can do so\nwhen constructing it, `Parallel (component1, component2, component3)` or\nbeforehand,\n\n``` python\ncomponents=(component1, component2, component3)\nParallel (*components)\n```\n\nIn our case, the components to be run are each of them a Sequential\npipeline, where the only difference is the value of parameter `c`:\n\n``` python\npipelines = (Sequential (get_data, \n                         Component(add_c, c=c, data_converter=IgnoreLabels),\n                         Component(square, data_converter=IgnoreLabels), \n                         mean_squared_error)\n              for c in range(0,5))\n```\n\nWe pass those components to construct our\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\ncomponent\n\n``` python\nparallel = Parallel (*pipelines)\n```\n\n\u2026 and call that component as usual:\n\n``` python\nresult = parallel ()\nprint (f'result: {result}')\n```\n\n    result: (74.66666666666667, 27.666666666666668, 0.0, 51.666666666666664, 266.6666666666667)\n\nAs we can see, our\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject is composed of 5 pipeline components, each pipeline receiving a\ndifferent value of parameter `c`. The\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject then runs those pipelines and gathers their result in a tuple.\n\nIn general, the\n[`Parallel`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallel)\nobject can be constructed by passing any collection of components, and\nthis collection can be heterogeneous. While in the current case, we have\nconstructed multiple copies of the same `Sequential` object, we can as\nwell have a single copy that receives different values of `c` each time,\nby using the\n[`ParallelInstances`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#parallelinstances)\nclass. However, the use of such class is a bit more elaborate and we\nleave this topic for an advanced tutorial. Let us see now the error as a\nfunction of `c`:\n\n``` python\nimport matplotlib.pyplot as plt\n```\n\n``` python\nplt.plot (result, 'b.-')\n```\n\n![](index_files/figure-commonmark/cell-26-output-1.png)\n\n### Fitting models\n\nUntil now the steps of the pipeline have been functions. In our\npipelines, steps can also be specified in terms of objects. This is\nsuitable for having models or estimators whose state change as a result\nof applying the step, using methods such as `fit` or `fit_transform`, as\ndone in scikit-learn. Specifically, each object passed as one of the\nsteps needs to have at least one of the the following methods: : an\n`apply` method, which can be also called `transform` or `predict`, a\n`fit` method, and a `fit_apply` method, which can also be called\n`fit_transform` or `fit_predict`, following the same terminology as in\nscikit-learn.\n\nWe see now an example of this where we use one such object, whose class\nwe call `BruteForceModel`. This uses a simple brute-force search to find\nthe value of `c` that minimizes the error in our current objective,\ngiven a set of candidate values `c_values`:\n\n``` python\nclass BruteForceModel ():\n    def __init__ (self, c_values=range(5), **kwargs):\n        self.c_values = c_values\n    \n    def transform (self, X):\n        return (X+self.c)**2\n\n    def fit (self, X, Y):\n        error = np.empty ((len(self.c_values),))\n        for i, c in enumerate(self.c_values):\n            self.c = c\n            Y_hat = self.transform (X)\n            error[i] = mean_squared_error (Y, Y_hat)\n        self.c = self.c_values[np.argmin (error)]\n        return self\n```\n\nIn order to use such object, we need to indicate the data conversion\nstep also for both the `apply` (or `transform`) and the `fit` methods.\nSince we already did that for the `apply` method above, we just need to\nadd the data conversion for `fit`. This is done by adding a new method\n`convert_before_fitting` to the `IgnoreLabels` class:\n\n``` python\ndef convert_before_fitting (self, X, Y, **kwargs):\n    self.Y = Y\n    return X, Y\n\nIgnoreLabels.convert_before_fitting = convert_before_fitting\n```\n\nWe can construct our pipeline now, as follows:\n\n``` python\npipeline = Sequential (get_data,\n                       Component (BruteForceModel(), data_converter=IgnoreLabels),\n                       Component (mean_squared_error, data_converter='NoConverter'))\n```\n\nAs we can see above, the second component performs the data conversion\nindicated in `IgnoreLabels`, and the third component doesn\u2019t perform any\ndata conversion. In order to achieve that, we need to indicate that, for\nthe third component, the data converter is\n[`NoConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#noconverter),\nsince the default converter used by `DS Blocks` does perform a specific\ntype of data conversion when we call the `fit_apply` method, as\nexplained below.\n\nIn order to fit our newly created model, we will be calling the\n`fit_apply` method on the entire pipeline. This method is semantically\nequivalent to the `fit_transform` and `fit_predict` methods of\nscikit-learn. It makes the components of the pipeline be fitted to the\ndata, using the labels `Y`, then transform the data based on the fitted\nparameters, and pass on to the next component of the pipeline the\ntransformed data. This is the behaviour we have in scikit-learn, and\nreplicated by default in `DS Blocks`.\n\nThe default data converter used by `DS Blocks`, called\n[`GenericConverter`](https://Jaume-JCI.github.io/ds-blocks/core/data_conversion.html#genericconverter),\nmakes the sequential pipelines behave like the scikit-learn pipelines\nwhen calling the `fit_apply` method. Just like in scikit-learn, when we\nuse the default converter, the `fit` method of our components receives\nboth the data `X` and the labels `Y`, but the `apply` method only\nreceives the (transformed) data `X`.\n\nIn our current pipeline, however, we want the last component, which\napplies the `mean_squared_error` function, to receive both `X` and `Y`,\nin order to be able to calcuate such error. Therefore, in the last\ncomponent we indicate that no conversion should be applied, in order to\navoid skipping the `Y` when calling `apply` on that component.\n\nOnce defined the new pipeline, we simply call the `fit_apply` method as\nfollows:\n\n``` python\npipeline.fit_apply ()\n```\n\n    0.0\n\n### MultiSplit objects\n\nLet us now make the problem a little bit more interesting: we split the\ndata into two subsets, *training* and *test*, fit our model on the\ntraining set, and have a separate estimate of the error for each of the\ntwo subsets. For that purpose, it will be handy to use the\n[`MultiSplitComponent`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#multisplitcomponent)\nfrom `DS Blocks`. In particular, we will use the\n[`MultiSplitDict`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#multisplitdict)\nsubclass for the current problem. Let us import it, together with\n`train_test_split`.\n\n``` python\nfrom sklearn.model_selection import train_test_split\nfrom dsblocks.core.compose import MultiSplitDict\n```\n\nLet us now define a slightly different `get_data` function where we can\nindicate the number of data points we want to have, and a noise level\nthat is added to the data.\n\n``` python\ndef get_data (n=225, noise=1.0):\n    X = np.arange (n) \n    Y = (X+2)**2 + np.random.randn (n) * noise\n    return X, Y\n```\n\nLet us also define a new function `generate_split`, which splits the\ndata into training and test, and returns a dictonary with both subsets.\n\n``` python\ndef generate_split (X, Y, proportion_training=0.8):\n    n_samples_train=int(len(X)*proportion_training)\n    n_samples_test=len(X)-n_samples_train\n    X_train, X_test, Y_train, Y_test = train_test_split(\n        X, Y, train_size=n_samples_train, test_size=n_samples_test, shuffle=False\n    )\n    data = dict (training=(X_train, Y_train),\n                 test=(X_test, Y_test))\n    return data\n```\n\nFinally, we set our `BruteForceModel` component to use finer granularity\nfor the values of the c parameter:\n\n``` python\nbrute_force_model = BruteForceModel(c_values=[1.8, 1.9, 2.0, 2.1, 2.2])\n```\n\nWith all this, the new sequential pipeline is defined as follows:\n\n``` python\npipeline = Sequential (get_data, \n                       Component(generate_split, data_converter='NoConverter'), \n                       MultiSplitDict (Component(brute_force_model, data_converter=IgnoreLabels)), \n                       MultiSplitDict(Component(mean_squared_error, data_converter='NoConverter')))\n```\n\nAs we can see, the only two changes are: 1. We have an additional\ncomponent in the pipeline, which applies the function `generate_split`\n2. The two final components are wrapped in a\n[`MultiSplitDict`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#multisplitdict)\nclass.\n\nBy default,\n[`MultiSplitDict`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#multisplitdict)\nfits the wrapped component using the `training` data, i.e., the data\nfound in the `training` field of the input dictionary. After fitting the\ncomponent, it applies it separately to the training, the test, and, if\npresent, the validation subsets from the input dictionary. We can see\nthis by observing the output of the previous pipeline when calling\n`fit_apply` on it:\n\n``` python\npipeline.fit_apply()\n```\n\n    {'training': 0.9495413378781785, 'test': 0.8841783243494468}\n\nAs we can see, the model\u2019s error is estimated separately on the training\nand test set, and the output is a dictionary with the same fields as the\ninput to\n[`MultiSplitDict`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#multisplitdict).\nThe specific subsets to which the component is fitted and/or applied,\ncan be indicated by parameter as follows:\n\n``` python\nMultiSplitDict (my_component, \n                fit_to=subset_name, \n                apply_to=[subset_name_1, subset_name_2, ...])\n```\n\nwhere `subset_name` is a string indicating the name of the field where\nthe subset of data is found in the input dictionary. Let\u2019s see this:\n\n``` python\npipeline = Sequential (get_data, \n                       Component(generate_split, data_converter='NoConverter'), \n                       MultiSplitDict (Component(brute_force_model, data_converter=IgnoreLabels), \n                                       apply_to=['test']), \n                       MultiSplitDict(Component(mean_squared_error, data_converter='NoConverter'), \n                                      apply_to=['test']))\npipeline.fit_apply()\n```\n\n    {'test': 0.6858969144872996}\n\nAs we can see, the estimated error is only done now for the test set.\n\n### Experiment tracking\n\nMany times we want to be able to track the results obtained with\ndifferent values of our parameters, or multiple runs if our pipeline has\nsome stochasticity. DS Blocks provides experiment tracking through\ndifferent mechanisms. The easiest one is probably to just wrap any\npipeline created before with a\n[`TrackingComponent`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#trackingcomponent)\nwrapper. Another possibility is to use the class\n[`SequentialWithTracking`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#sequentialwithtracking)\ninstead of using `Sequential`. Let us see each of those in turn. First\nlet us import those two classes:\n\n``` python\nfrom dsblocks.core.compose import TrackingComponent, SequentialWithTracking\nimport joblib\n```\n\nUsing the first option, we can wrap the previously created `pipeline`\nobject with the\n[`TrackingComponent`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#trackingcomponent)\nclass:\n\n``` python\ntracking_pipeline = TrackingComponent (pipeline)\n```\n\nThis is appropriate if we first created the pipeline without the\nobjective of tracking the results, and later we want to add tracking to\nit. However, it is more common to directly define our pipeline with the\nobjective of tracking the results obtained with it. We do that by\nconstructing our top-level pipeline using\n[`SequentialWithTracking`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#sequentialwithtracking),\ninstead of using `Sequential` as done previously:\n\n``` python\ntracking_pipeline = SequentialWithTracking (\n    get_data, \n    Component (generate_split, data_converter='NoConverter'), \n    MultiSplitDict (Component(brute_force_model, data_converter=IgnoreLabels)), \n    MultiSplitDict (Component(mean_squared_error, data_converter='NoConverter'))\n)\n```\n\n    could not pickle object: Can't pickle <class 'dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager'>: it's not found as dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager\n    could not pickle object: Can't pickle <class 'dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager'>: it's not found as dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager\n\nAs we can see, the construction is done exactly the same way as the last\nconstruction we did with `Sequential`. Now, each time we run this\npipeline with new parameters, the resulting metrics are added to a\ndatabase which can be queried. Let\u2019s see that with three example runs:\n\n``` python\nerror = tracking_pipeline.fit_apply (n=5, noise=1000)\nprint (error)\n\nerror = tracking_pipeline.fit_apply (n=1000, noise=1000)\nprint (error)\n\nerror = tracking_pipeline.fit_apply (n=10000, noise=1000)\nprint (error)\n```\n\n    Could not run pickle object: Can't pickle <class 'dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager'>: it's not found as dsblocks.core.utils.get_ds_experiment_manager.<locals>.DSExperimentManager\n\n    {'training': 332782.06925177074, 'test': 4497361.700722283}\n    {'training': 908724.5037988542, 'test': 959655.3088879937}\n    {'training': 989310.3821379375, 'test': 991343.8955351294}\n\nWe can query now the last results as follows:\n\n``` python\nem = tracking_pipeline.get_experiment_manager ()\ndf = em.get_experiment_data ()\ndf [['parameters','scores']]\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">parameters</th>\n      <th colspan=\"2\" halign=\"left\">scores</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>function</th>\n      <th>n</th>\n      <th>noise</th>\n      <th>test</th>\n      <th>training</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>0</th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>fit_apply</td>\n      <td>5</td>\n      <td>1000</td>\n      <td>4497361.700722</td>\n      <td>332782.069252</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fit_apply</td>\n      <td>1000</td>\n      <td>1000</td>\n      <td>959655.308888</td>\n      <td>908724.503799</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fit_apply</td>\n      <td>10000</td>\n      <td>1000</td>\n      <td>991343.895535</td>\n      <td>989310.382138</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nThe table above shows from left to right: - The experiment ID\ncorresponding to the last three executions. - The parameters used for\neach execution. The first parameter included by default is the method\nused in the execution, which is always `fit_apply` in our case. The\nsecond and third parameters are `n` and `noise`, which indicate the\nnumber of observations in our data and the noise level, respectively. -\nThe metric scores obtained by each experiment. There are as many score\nnames as fields in the dictionary returned by the last component of the\npipeline, where each score name is the corresponding dictionary field.\nIn our case, we have `test` and `training`, corresponding to the test\nerror and the training error. For each score name, we have as many\nscores as runs we have done with the same parameters. In our case, we\nhave only run the pipeline one time for each set of parameters, and\ntherefore we only have one run number, `0`.\n\nThe intermediate steps of the execution are stored in a path associated\nwith each experiment ID. Let\u2019s say we want to revisit resuts for\nexperiment 1 above, in particular we want to see the output of the step\n`generate_split`. We can do that as follows:\n\n``` python\npath_results = em.get_path_results (experiment_id=1, run_number=0)\ndata=tracking_pipeline.main.generate_split.load_result(path_results=path_results)\nprint ('training X: ', data['training'][0][:3], '\\ntraining Y: ', data['training'][1][:3])\n```\n\n    training X:  [0 1 2] \n    training Y:  [  289.81113214 -1228.50705265  -570.5033283 ]\n\nAbove we have explored the result of using different combinations of\nparameters by running multiple times the `fit_apply` method of our\npipeline. Instead of doing that, we can explore many combinations of\nparameters using serach strategies like grid search or bayesian\noptimization. Let\u2019s see now how this is done with grid search, and later\nwe will see it with bayesian optimization as part of the integration\nwith `Optuna`. In order to use grid search, we can call:\n\n``` python\nem.grid_search (\n    parameters_multiple_values=dict(n=[int(1e5), int(1e6), int(1e7)],\n                                    noise=[10.0,100.0,1000.0]),\n    parameters_single_value=dict(function='fit_apply')\n)\n```\n\nwhere we have explored the combinations of `n` and `noise` that appear\nin the lists provided in `parameters_multiple_values`. At the same time,\nwe kept the parameters in `parameters_single_value` fixed to the value\nindicated, in our case the function is `fit_apply` in all the\nexperiments.\n\nIn order to inspect the results, we can obtain a dataframe with the same\nstructure as the one explained above:\n\n``` python\ndf = em.get_experiment_data()\n```\n\nBased on this, we can plot for instance the evolution of the error as a\nfunction of the total number of observations, for training and test\nseparately, fixing the noise level to 100:\n\n``` python\ndf_to_analyze = df[df[('parameters','noise')]==100.0]\n#df_to_analyze = df[df[('parameters','n')]==int(1e5)]\nparameter_to_analyze = df_to_analyze[('parameters','n')].values\n#parameter_to_analyze = df_to_analyze[('parameters','noise')].values\nscores_training = df_to_analyze[('scores','training')].values\nscores_test = df_to_analyze[('scores','test')].values\n\nplt.plot (parameter_to_analyze, scores_training, 'b.-')\nplt.plot (parameter_to_analyze, scores_test, 'm.-')\nplt.xlabel ('size of data')\n#plt.xlabel ('noise')\nplt.ylabel ('error')\nplt.legend (['training', 'test']);\n```\n\n![](index_files/figure-commonmark/cell-46-output-1.png)\n\n### Integration with Optuna\n\nIn order to use optuna-based search strategies like Bayesian\nOptimization, we first need to define a parameter sampler that makes use\nof the constructs provided in [optuna](). Let\u2019s do that for our two\nparameters, `noise` and `n`. We define a function which samples `noise`\nfrom a uniform distribution, and `n` from a discrete set of values, and\nreturns a dictionary with the sampled values:\n\n``` python\ndef parameter_sampler (trial):\n    noise = trial.suggest_uniform('noise', 1000, 10000)\n    n = trial.suggest_categorical('n', [100, 250, 500])\n\n    parameters = dict(noise=noise,\n                      n=n)\n\n    return parameters\n```\n\nNext, we need to indicate which metric score needs to be optimized by\nBayesian Optimization. This is done by indicating the value of the\n`key_score` property of our experiment manager. This property can be\nindicated at construction time, when building our\n[`SequentialWithTracking`](https://Jaume-JCI.github.io/ds-blocks/core/compose.html#sequentialwithtracking)\nobject, or just indicate it by assigning a value to it:\n\n``` python\nem.key_score = 'training'\n```\n\n\u2026by which we indicate that we will be optimizing the value of the\ntraining error.\n\nFinally, we run the Bayesian Optimization on the indicated parameters by\npassing the defined `parameter_sampler` function, and indicating\nadditional parameters that remain constant across experiments, in our\ncase `function='fit_apply'`, as follows:\n\n``` python\nem.hp_optimization (parameter_sampler=parameter_sampler, \n                    parameters=dict(function='fit_apply'))\n```\n\n    [I 2022-11-18 16:01:41,782] A new study created in RDB with name: hp_study\n    [I 2022-11-18 16:01:42,408] Trial 0 finished with value: 34975291.89393385 and parameters: {'noise': 5939.321535345923, 'n': 100}. Best is trial 0 with value: 34975291.89393385.\n    [I 2022-11-18 16:01:42,823] Trial 1 finished with value: 24467912.653205547 and parameters: {'noise': 4812.8931940501425, 'n': 500}. Best is trial 0 with value: 34975291.89393385.\n    [I 2022-11-18 16:01:43,229] Trial 2 finished with value: 105726109.1003538 and parameters: {'noise': 9672.964844509264, 'n': 250}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:43,650] Trial 3 finished with value: 36215819.30834488 and parameters: {'noise': 6112.401049845391, 'n': 100}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:44,088] Trial 4 finished with value: 1404915.7659739438 and parameters: {'noise': 1181.9655769629314, 'n': 500}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:44,526] Trial 5 finished with value: 93425542.45875728 and parameters: {'noise': 9807.565080094875, 'n': 100}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:44,979] Trial 6 finished with value: 4904244.708255151 and parameters: {'noise': 2064.469832820399, 'n': 500}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:45,416] Trial 7 finished with value: 30972553.479057707 and parameters: {'noise': 5696.634895750645, 'n': 500}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:45,869] Trial 8 finished with value: 27207384.64360299 and parameters: {'noise': 5105.352989948937, 'n': 500}. Best is trial 2 with value: 105726109.1003538.\n    [I 2022-11-18 16:01:46,338] Trial 9 finished with value: 49351456.854481995 and parameters: {'noise': 6508.861504501792, 'n': 250}. Best is trial 2 with value: 105726109.1003538.\n\n    105726109.1003538\n\nAgain, after running this we can inspect the results by obtaining the\nhistory of experiments in the form of a dataframe, as done previously:\n\n``` python\ndf = em.get_experiment_data ()\n```\n\nAnd look at the combinations of parameters and their resulting scores:\n\n``` python\ndf[['parameters', 'scores']]\n```\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"3\" halign=\"left\">parameters</th>\n      <th colspan=\"2\" halign=\"left\">scores</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>function</th>\n      <th>n</th>\n      <th>noise</th>\n      <th>test</th>\n      <th>training</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>0</th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>fit_apply</td>\n      <td>5</td>\n      <td>1000.0</td>\n      <td>4497361.700722</td>\n      <td>332782.069252</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>fit_apply</td>\n      <td>1000</td>\n      <td>1000.0</td>\n      <td>959655.308888</td>\n      <td>908724.503799</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>fit_apply</td>\n      <td>10000</td>\n      <td>1000.0</td>\n      <td>991343.895535</td>\n      <td>989310.382138</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>fit_apply</td>\n      <td>100000</td>\n      <td>10.0</td>\n      <td>101.674732</td>\n      <td>100.014967</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>fit_apply</td>\n      <td>100000</td>\n      <td>100.0</td>\n      <td>10060.595463</td>\n      <td>9960.776863</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>fit_apply</td>\n      <td>100000</td>\n      <td>1000.0</td>\n      <td>986655.689255</td>\n      <td>1000000.368654</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>fit_apply</td>\n      <td>1000000</td>\n      <td>10.0</td>\n      <td>100.209543</td>\n      <td>99.914734</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>fit_apply</td>\n      <td>1000000</td>\n      <td>100.0</td>\n      <td>10017.505157</td>\n      <td>10009.726013</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>fit_apply</td>\n      <td>1000000</td>\n      <td>1000.0</td>\n      <td>998290.266422</td>\n      <td>1000026.188421</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>fit_apply</td>\n      <td>10000000</td>\n      <td>10.0</td>\n      <td>99.995626</td>\n      <td>99.945308</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>fit_apply</td>\n      <td>10000000</td>\n      <td>100.0</td>\n      <td>9998.97338</td>\n      <td>9988.258447</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>fit_apply</td>\n      <td>10000000</td>\n      <td>1000.0</td>\n      <td>999088.076542</td>\n      <td>1000050.766496</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>fit_apply</td>\n      <td>100</td>\n      <td>5939.321535</td>\n      <td>27276806.205229</td>\n      <td>34975291.893934</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>fit_apply</td>\n      <td>500</td>\n      <td>4812.893194</td>\n      <td>31520677.399808</td>\n      <td>24467912.653206</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>fit_apply</td>\n      <td>250</td>\n      <td>9672.964845</td>\n      <td>101906074.636583</td>\n      <td>105726109.100354</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>fit_apply</td>\n      <td>100</td>\n      <td>6112.40105</td>\n      <td>14342902.683279</td>\n      <td>36215819.308345</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>fit_apply</td>\n      <td>500</td>\n      <td>1181.965577</td>\n      <td>1187953.622504</td>\n      <td>1404915.765974</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>fit_apply</td>\n      <td>100</td>\n      <td>9807.56508</td>\n      <td>85306914.7339</td>\n      <td>93425542.458757</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>fit_apply</td>\n      <td>500</td>\n      <td>2064.469833</td>\n      <td>4002535.937879</td>\n      <td>4904244.708255</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>fit_apply</td>\n      <td>500</td>\n      <td>5696.634896</td>\n      <td>27071477.780816</td>\n      <td>30972553.479058</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>fit_apply</td>\n      <td>500</td>\n      <td>5105.35299</td>\n      <td>21697305.132237</td>\n      <td>27207384.643603</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>fit_apply</td>\n      <td>250</td>\n      <td>6508.861505</td>\n      <td>33483663.716484</td>\n      <td>49351456.854482</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n## Documentation\n\nFor further details, please see the\n[documentation](https://jaume-jci.github.io/ds-blocks/)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/Jaume-JCI/ds-blocks",
            "keywords": "nbdev jupyter notebook python",
            "license": "Apache Software License 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "dsblocks",
            "package_url": "https://pypi.org/project/dsblocks/",
            "platform": null,
            "project_url": "https://pypi.org/project/dsblocks/",
            "project_urls": {
                "Homepage": "https://github.com/Jaume-JCI/ds-blocks"
            },
            "release_url": "https://pypi.org/project/dsblocks/0.0.9/",
            "requires_dist": [
                "pandas",
                "scikit-learn",
                "pyarrow",
                "numpy",
                "ipython",
                "matplotlib",
                "graphviz",
                "optuna",
                "ipynbname",
                "tensorflow",
                "rich",
                "hpsearch",
                "pytest ; extra == 'dev'",
                "pytest-cov ; extra == 'dev'",
                "ipdb ; extra == 'dev'",
                "jupyter ; extra == 'dev'",
                "ipykernel ; extra == 'dev'",
                "sh ; extra == 'linux'"
            ],
            "requires_python": ">=3.7,<=3.12",
            "summary": "DS Blocks",
            "version": "0.0.9",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15953534,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "29a1f2ba552050e05cdabc6bf909f14c",
                    "sha256": "5b705b17b6865f3e3e881870245834bad48cdb19b0edc0c0f9be535d5248bff7"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.9-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "29a1f2ba552050e05cdabc6bf909f14c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7,<=3.12",
                "size": 146692,
                "upload_time": "2022-11-22T21:20:56",
                "upload_time_iso_8601": "2022-11-22T21:20:56.276398Z",
                "url": "https://files.pythonhosted.org/packages/fa/89/eb0dd1a19672fcf36219d173ecb609274d1cf04d54efa7f1d923d50e6447/dsblocks-0.0.9-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "62f8407dd1e5c9ce72b6c68f4ab86402",
                    "sha256": "290b50f48eaaf308c05f3bed931e5ce1a056647a7518893ddb44e73cd53a9c04"
                },
                "downloads": -1,
                "filename": "dsblocks-0.0.9.tar.gz",
                "has_sig": false,
                "md5_digest": "62f8407dd1e5c9ce72b6c68f4ab86402",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7,<=3.12",
                "size": 160902,
                "upload_time": "2022-11-22T21:20:58",
                "upload_time_iso_8601": "2022-11-22T21:20:58.462296Z",
                "url": "https://files.pythonhosted.org/packages/c1/91/2528197e1130fd61d58536cc92624f5ca1cbf8ae7b1dfdd734f0889a2244/dsblocks-0.0.9.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}