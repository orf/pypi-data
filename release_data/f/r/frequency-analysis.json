{
    "0.1": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3.8",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/uqqu/frequency_analysis",
            "keywords": "frequancy analysis bigram",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "frequency-analysis",
            "package_url": "https://pypi.org/project/frequency-analysis/",
            "platform": "",
            "project_url": "https://pypi.org/project/frequency-analysis/",
            "project_urls": {
                "Homepage": "https://github.com/uqqu/frequency_analysis"
            },
            "release_url": "https://pypi.org/project/frequency-analysis/0.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11822157,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "3d41404eb756b2fcb05da15498a7c1ac",
                    "sha256": "7faf7ebd2d6f65ef69f1fac322cbcb250364264c976719c6ef7abeacdf1acaca"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1-py3.8.egg",
                "has_sig": false,
                "md5_digest": "3d41404eb756b2fcb05da15498a7c1ac",
                "packagetype": "bdist_egg",
                "python_version": "0.1",
                "requires_python": null,
                "size": 27531,
                "upload_time": "2021-10-07T09:34:05",
                "upload_time_iso_8601": "2021-10-07T09:34:05.204232Z",
                "url": "https://files.pythonhosted.org/packages/2e/14/1c59f84610710fc7df590ad3e4e122304f5d06ffef6c3802a18b735519d4/frequency_analysis-0.1-py3.8.egg",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "5db881a89847d77d00ed4f388d9438b1",
                    "sha256": "ed8cbfa07eb7ce16d16e35d3b8069442838c3619e6487e82ce18bfab9a29e2bc"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "5db881a89847d77d00ed4f388d9438b1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10278,
                "upload_time": "2021-10-07T09:34:07",
                "upload_time_iso_8601": "2021-10-07T09:34:07.084414Z",
                "url": "https://files.pythonhosted.org/packages/ef/e7/ff510a13860ed386f42868a13a2ea3d744c6ca34e5a9c43b49828eaf8056/frequency_analysis-0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "uqqu",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3.8",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/uqqu/frequency_analysis",
            "keywords": "frequency analysis bigram",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "frequency-analysis",
            "package_url": "https://pypi.org/project/frequency-analysis/",
            "platform": "",
            "project_url": "https://pypi.org/project/frequency-analysis/",
            "project_urls": {
                "Homepage": "https://github.com/uqqu/frequency_analysis"
            },
            "release_url": "https://pypi.org/project/frequency-analysis/0.1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11822157,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5e99425313143cceedc709dfd4c159ba",
                    "sha256": "c880a78dae624c1358056db26bf56c31fa9aac51cfa6571fe3827f487e785217"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "5e99425313143cceedc709dfd4c159ba",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15712,
                "upload_time": "2021-10-07T13:08:19",
                "upload_time_iso_8601": "2021-10-07T13:08:19.827729Z",
                "url": "https://files.pythonhosted.org/packages/dd/13/a8106d47db07e291bb68f18542567b80bc629d838480b774e6a7453c9021/frequency_analysis-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1.post31": {
        "info": {
            "author": "uqqu",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3.8",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/uqqu/frequency_analysis",
            "keywords": "frequency analysis bigram linguistic cryptanalysis",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "frequency-analysis",
            "package_url": "https://pypi.org/project/frequency-analysis/",
            "platform": "",
            "project_url": "https://pypi.org/project/frequency-analysis/",
            "project_urls": {
                "Homepage": "https://github.com/uqqu/frequency_analysis"
            },
            "release_url": "https://pypi.org/project/frequency-analysis/0.1.1.post31/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
            "version": "0.1.1.post31",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11822157,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b50f6230e20364a67dfa4768c5c9b1fa",
                    "sha256": "7e8652f31a0321c6d2c0010460b1cd7df4526b2a6409bdfa931ee83d32853b50"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1.1.post31.tar.gz",
                "has_sig": false,
                "md5_digest": "b50f6230e20364a67dfa4768c5c9b1fa",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15694,
                "upload_time": "2021-10-07T20:24:36",
                "upload_time_iso_8601": "2021-10-07T20:24:36.168920Z",
                "url": "https://files.pythonhosted.org/packages/df/5a/a7ddcb30f31260fb86d9cd421c7f5926a9abd8d030ac71c9d7777861a69d/frequency_analysis-0.1.1.post31.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "uqqu",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3.8",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/uqqu/frequency_analysis",
            "keywords": "frequency analysis bigram linguistic cryptanalysis",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "frequency-analysis",
            "package_url": "https://pypi.org/project/frequency-analysis/",
            "platform": "",
            "project_url": "https://pypi.org/project/frequency-analysis/",
            "project_urls": {
                "Homepage": "https://github.com/uqqu/frequency_analysis"
            },
            "release_url": "https://pypi.org/project/frequency-analysis/0.1.2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11822157,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9f685a87eddd0ddfd480ce49e5de59ab",
                    "sha256": "9314cf21940d8b7a5fea1e233a7eb3a0688a573cbfc4b51f8e2459087ddbdd13"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "9f685a87eddd0ddfd480ce49e5de59ab",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15668,
                "upload_time": "2021-10-07T20:38:50",
                "upload_time_iso_8601": "2021-10-07T20:38:50.115558Z",
                "url": "https://files.pythonhosted.org/packages/cc/de/377fcdeae01cef6b6ff23ec8bd02ef934ffeafb8ea5303ba7d6babfc861b/frequency_analysis-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "uqqu",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3.8",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/uqqu/frequency_analysis",
            "keywords": "frequency analysis bigram linguistic cryptanalysis",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "frequency-analysis",
            "package_url": "https://pypi.org/project/frequency-analysis/",
            "platform": "",
            "project_url": "https://pypi.org/project/frequency-analysis/",
            "project_urls": {
                "Homepage": "https://github.com/uqqu/frequency_analysis"
            },
            "release_url": "https://pypi.org/project/frequency-analysis/0.1.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11822157,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b07244c2eabe307030190f18bfaf424c",
                    "sha256": "14ae00dfbac4c334dc31b767d55885aec63842e886ae854499b8e24e90ed020e"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "b07244c2eabe307030190f18bfaf424c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16019,
                "upload_time": "2021-10-09T08:21:55",
                "upload_time_iso_8601": "2021-10-09T08:21:55.532591Z",
                "url": "https://files.pythonhosted.org/packages/f1/0a/cd4801a64fccf6eb8c8385832b4a21efef544d3e51f53c3dec1bf951efbe/frequency_analysis-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "uqqu",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3.8",
                "Topic :: Text Processing :: Linguistic"
            ],
            "description": "Frequency analysis\n------------------\n\nPython package for symbol/word and their bigrams frequency analysis with excel output.\n\nWhat values can be counted: quantity, quantity in the first position, quantity in the last position, average position.\n\nFor which data values can be counted: symbols, symbol bigrams, words, word bigrams.\n\nAdditional possible data: ye-yo words table for Russian language (in excel output it can be cross-referenced with words quantity).\n\nUsage\n-----\n\n1. ``pip install frequency-analysis``;\n2. Download data set of your choice;\n3. Call ``Analysis`` class with context manager (take a look at the optional arguments);\n4. Parse your data set to word list (one sentence in list for properly word position counting) and send it to one of three methods of ``Analysis``;\n5. Call ``Result`` class with context manager (with optional name argument);\n6. Call one or several of ``Result`` methods to create excel sheet(s) with appropriate data.\n\nMethods and arguments\n---------------------\n\n``Analysis`` class arguments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAll arguments are optional\n\n* *name* \u2013 the name of the folder in which the analysis will be saved\n     default ``frequency_analysis``\n* *mode* \u2013 analysis operation mode (``[n]ew``, ``[a]ppend``, ``[c]ontinue``)\n     default ``n``\n* *word\\_pattern* \u2013 regex pattern for matching inwords symbols\n    default ``[a-zA-Z\u0430-\u044f\u0410-\u042f\u0451\u0401]+(?:(?:-?[a-zA-Z\u0430-\u044f\u0410-\u042f\u0451\u0401]+)+\\|'?[a-zA-Z\u0430-\u044f\u0410-\u042f\u0451\u0401]+)\\|[a-zA-Z\u0430-\u044f\u0410-\u042f\u0451\u0401]``\n* *allowed\\_symbols* \u2013 string of symbols or list with symbol unicode decimal values, which will be counted to analysis\n    default ``[*range(32, 127), 1025, *range(1040, 1104), 1105]`` (base punctuation, base Latin, Russian Cyrillic)\n* *yo* \u2013 int for additional Russian word processing \u2013 compare words with word list to detect number of ye/yo misspelling. 0 \u2013 disabled; 1 \u2013 enabled; 2 with 'a' mode \u2013 update yo list with new data.\n     default ``0``\n\n     To use the last one you should place two word files near the running script (``yo.txt`` for words with mandatory yo and ``ye-yo.txt`` for possibly yo writing). You can use your own or take it `here <https://github.com/uqqu/yo_dict>`__.\n\n``Analysis`` class methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``count_symbols(word_list: list, [pos: bool, bigrams: bool])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMethod for counting symbol and symbol\\_bigram frequency. Counted values:\nquantity, quantity in the first position, quantity in the last position, average position in word. \n\nAverage position counted only with argument ``pos`` as ``True`` (default ``False``). Position for symbols, which matched with ``word_pattern`` counted as for \"clear\" word, for other \u2013 as for \"raw\".\n\nExample: in single word ``\u2013Yes!`` with default ``word_pattern`` positions will be counted as ``(\u2013 1), (Y 1), (e 2), (s 3), (! 5)``.\n\nBigrams counting can be disabled with argument ``bigram`` as ``False`` (default ``True``).\n\n``count_words(word_list: list, [pos: bool, bigrams: bool])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMethod for counting word and word\\_bigrams frequency. Counted values:\nquantity, quantity in the first position, quantity in the last position, average position in sentence. \n\nAverage position counted only with argument ``pos`` as ``True`` (default ``False``).\n\nBigrams counting can be disabled with argument ``bigram`` as ``False`` (default ``True``).\n\n``count_all(word_list: list, [pos: bool, symbol_bigrams: bool, word_bigrams: bool])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCombined call of previous two methods.\n\n``Result`` class arguments\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe only argument is optional\n\n* *name* \u2013 the name of the folder in which the analysis was saved\n    default ``frequency_analysis``\n\n``Result`` class methods\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n    First 6 methods can be called all it once with ``treat()`` method\n\nMany methods accept arguments ``limit``, ``chart_limit``, ``min_quantity`` and ``ignore_case``.\n\n* *limit* (default ``0``) it is a max number of elements, which will be added to the sheet. ``0`` \u2013 unlimited;\n* *chart_limit* (default ``20``) \u2013 a number of elements, which will be counted with graphical chart;\n* *min_quantity* (default ``1``) \u2013 a minimal appropriate value at with element will be added to the sheet;\n* *ignore_case* (default ``False``) \u2013 with this argument as ``True`` lower- and upper- case symbols will be united into a single element. With ``False`` \u2013 will be counted separately. ``Keyword-only``\n\n``sheet_stats()``\n^^^^^^^^^^^^^^^^^\n\nMain result info \u2013 number of entries, total count and average position (if exists) for each data type.\n\n``sheet_top_symbols([limit, chart_limit, min_quantity])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTop list of all analyzed symbols sorted by quantity. The next to it is also located the same one list, but with ignore-case. There is no need to create separate sheet, just use column of your choice.\n\n``sheet_top_symbol_bigrams([limit, chart_limit, min_quantity])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTop list of symbol bigrams sorted by quantity with additional case insensitive top-list.\n\n``sheet_all_symbol_bigrams([min_quantity, ignore_case])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n2D sheet with all bigrams quantity. ``min_quantity`` argument works here for sum of row/column values instead of each separated bigram.\n\n``sheet_top_words([limit, chart_limit, min_quantity])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTop list of analyzed words sorted by quantity. Word counting is always case insensitive, on the ``Analyze`` stage.\n\n``sheet_top_word_bigrams([limit, chart_limit, min_quantity])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTop list of analyzed word bigrams sorted by quantity.\n\n``treat([limits: tuple(four int), chart_limits: tuple(four int), min_quantities: tuple(five int)])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSingle call of all ``Result`` methods above. Calling methods in order of tuple values:\n\n1. ``sheet_top_symbols()``\n2. ``sheet_top_symbol_bigrams()``\n3. ``sheet_top_words()``\n4. ``sheet_top_word_bigrams()``\n5. ``sheet_all_symbol_bigrams()``\n\nPlease note \u2013 the last one (value for ``sheet_all_symbol_bigrams()``) there is only in the ``min_quantities`` argument. \n\nDefault values as elsewhere:\n\n* *limits* \u2013 ``(0,)*4``\n* *chart_limits* \u2013 ``(20,)*4``\n* *min_quantities* \u2013 ``(1,)*5``\n\n``sheet_custom_top_symbols(symbols: str, [chart_limit, name='Custom symbols'])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate symbols top-list as ``sheet_top_symbols()``, but only with symbols of your choice. ``name`` \u2013 ``keyword-only``\n\n``sheet_en_top_symbols(symbols: str, [chart_limit])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate symbols top-list as ``sheet_top_symbols()``, but only with base Latin symbols.\n\n``sheet_ru_top_symbols(symbols: str, [chart_limit])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate symbols top-list as ``sheet_top_symbols()``, but only with Russian Cyrillic symbols.\n\n``sheet_custom_symbol_bigrams(symbols: str, [ignore_case, name='Custom symbol bigrams'])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate symbol bigrmas 2D sheet as ``sheet_all_symbol_bigrams()``, but only with symbols of your choice. Order of symbols on the sheet will be the same as in the input argument. ``name`` \u2013 ``keyword-only``\n\n``sheet_en_symbol_bigrams([ignore_case])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate symbol bigrams 2D sheet as ``sheet_all_symbol_bigrams()``, but only with base Latin symbols.\n\n``sheet_ru_symbol_bigrams([ignore_case])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate symbol bigrams 2D sheet as ``sheet_all_symbol_bigrams()``, but only with Russian Cyrillic symbols.\n\n``sheet_yo_words([limit, min_quantity])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate cross-referenced sheet for all counted ye-yo words with their quantity and total misspells counter. Works only with analysis created with ``yo`` argument as ``1`` or ``2``.\n\nPerformed analyses\n------------------\n\n* English analysis with `EuroMatrixPlus/MultiUN <http://www.euromatrixplus.net/multi-un/>`__ English data set (3.1Gb .xml, 2.4\\*10\\ :sup:`9` symbols, 379\\*10\\ :sup:`6` words)\n\n   * https://github.com/uqqu/frequency\\_analysis/tree/master/examples/en/multiUN\n\n* Russian analysis with `EuroMatrixPlus/MultiUN <http://www.euromatrixplus.net/multi-un/>`__ Russian data set (4.3Gb .xml, 2.2\\*10\\ :sup:`9` symbols, 270\\*10\\ :sup:`6` words)\n\n   * https://github.com/uqqu/frequency\\_analysis/tree/master/examples/ru/multiUN\n\n* Russian analysis with `OpenCorpora <http://opencorpora.org/>`__ data set (528Mb .xml, 11.7\\*10\\ :sup:`6` symbols, 1.6\\*10\\ :sup:`6` words)\n\n   * https://github.com/uqqu/frequency\\_analysis/tree/master/examples/ru/annot\\_opcorpora",
            "description_content_type": "text/x-rst",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/uqqu/frequency_analysis",
            "keywords": "frequency analysis bigram linguistic cryptanalysis",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "frequency-analysis",
            "package_url": "https://pypi.org/project/frequency-analysis/",
            "platform": "",
            "project_url": "https://pypi.org/project/frequency-analysis/",
            "project_urls": {
                "Homepage": "https://github.com/uqqu/frequency_analysis"
            },
            "release_url": "https://pypi.org/project/frequency-analysis/0.1.4/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Symbol/symbol bigram/word/word bigram frequency analyzer with excel output.",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 11822157,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c4f187c972c95a18d3aa41aae7aca944",
                    "sha256": "71f73794e6f9999d178df42ebf44f7524e35a535e8fc645fbdeca189f1c6bc78"
                },
                "downloads": -1,
                "filename": "frequency_analysis-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "c4f187c972c95a18d3aa41aae7aca944",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16265,
                "upload_time": "2021-10-25T10:33:47",
                "upload_time_iso_8601": "2021-10-25T10:33:47.596716Z",
                "url": "https://files.pythonhosted.org/packages/a6/b4/f04ae9104628b21738906657da923fb5799f82f6a31b8b564cb2751cd3d8/frequency_analysis-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}