{
    "2.0.0": {
        "info": {
            "author": "Nikolas Virionis",
            "author_email": "nikolas.virionis@bandtec.com.br",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# spotify-recommender\n\n<img src='https://storage.googleapis.com/pr-newsroom-wp/1/2018/11/Spotify_Logo_CMYK_Green.png' width='60%'>\n\n- [Setup](#setup)\n- [Methods](#methods)\n- [Packages used](#packages-used)\n- [OG Scripts](#og-scripts)\n\n## Setup\n\n### Requirements:\n  - Python installed<br>\n The ideal version, to run the package is 3.8.x, the version in which the package was built over,<br> however,\n older versions of python 3 shouldn't have any issues, as the package does not use any <br> \n fancy, new methods, not supported by older versions of Python 3.x\n  - Network Connection<br>\n So that a wide range of songs can be analised, it is imperative to have a network connection, at least for the first time executing a script using this package\n  - <strong>A fitting playlist</strong><br>\n The perfect use case for this package is that of one big playlist (500+ songs), which you feel like listening to some of them, then others but never all of them\n Still, in the first versions of this package, this playlist will have to have at least two of your favorite songs.\n  - ### Patience\n It may seem funny or a joke, but the first mapping process of the playlist to a local pandas DataFrame, it will take a good while, up to 2.5 to 3 second per song, at 20-40Mbps Internet connection, being in Latam. All these factors play a part in the time for it to load.\n Just to make it clear, cpu, ram, these will not help much, the issue is to have up to 5 different http requests per song, which make this take so long\n  - Jupyter Notebook<br>\n Not exactly a requirement but it is advised that a jupyter notebook is used ( even more advised to use the vscode extension for jupyter notebooks ), because it is important, or at least more confortable, to have the variable still in memory and then decide how to use it, without having to run the script multiple times\n  - Spotify access<br>\n I mean, you know thJsonat already, right?\n\n  - Installing the package<br>\n~~~ps1\npip install spotify-recommender\n~~~\n\n\n  - Importing the package<br>\n\nFirstly, it's necessary to import the method start_api from the package spotify_recommender.api:\n ~~~ python\n from spotify_recommender.api import start_api\n ~~~\n\n### Starting the api\n  - Gathering the initial information: (playlist_url, user_id)\n  --- Playlist URL: The playlist url is available when right clicking the playlist name / or going to the three dots that represent the playlist options \n\n  --- User ID: The use rid is available when clicking the account profile information\n\n  - Calling the function:\n~~~python\napi = start_api(playlist_url='<PLAYLIST_URL>', user_id='<USER_ID>')\n~~~\n\n  - Getting the Auth Token:\n  It is a hash token that expires 60 minutes after it is generated, first you need to say that you want to be redirected (y), then press \"Get Token\", and then select the 5 scope options, but if it is not the first time you are executing the script in less than an hour, then press(n) and paste the token:\n\n  Then generate it, after that hit crtl+A / command+A to select it all then crtl+C / command+C to copy it\n  Then paste it in the field requiring it and press enter\n  Then if you already have a previously generated CSV file format playlist, type csv then enter, if you do not have the playlist as previously generated, press web, but know that it will take a good while as said [here](#patience),and if this is the case, go get a coffee, or tea if you are into that sort of thing.\n\n\n## Methods\n - get_playlist()\n~~~python\napi.get_playlist()\n# Function that returns the pandas DataFrame representing the base playlist\n~~~ \n - playlist_to_csv()\n~~~python\napi.playlist_to_csv()\n# Function that creates a csv format file containing the items in the playlist\n# Especially useful when re running the script without having changed the playlist\n~~~ \n - get_medium_term_favorites_playlist(with_distance: bool, generate_csv: bool, generate_parquet: bool, build_playlist: bool)\n~~~python\napi.get_medium_term_favorites_playlist(generate_csv=True, build_playlist=True)\n# Function that returns the pandas DataFrame representing the \n# medium term top 5 recommendation playlist\n# All parameters are defaulted to False\n# The \"distance\" is a mathematical value with no explicit units, that is \n# used by te algorithm to find the closest songs\n# build_playlist will change the user's library\n~~~ \n - get_short_term_favorites_playlist(with_distance: bool, generate_csv: bool, generate_parquet: bool, build_playlist: bool)\n~~~python\napi.get_short_term_favorites_playlist(generate_csv=True, build_playlist=True)\n# Function that returns the pandas DataFrame representing the \n# short term top 5 recommendation playlist\n# All parameters are defaulted to False\n# The \"distance\" is a mathematical value with no explicit units, that is \n# used by te algorithm to find the closest songs\n# build_playlist will change the user's library\n~~~ \n - get_recommendations_for_song(song: str, K: int, with_distance: bool, generate_csv: bool, generate_parquet: bool, build_playlist: bool)\n~~~python\napi.get_recommendations_for_song(song='<SONG_NAME>', K=50)\n# Function that creates returns the pandas DataFrame representing the \n# given song recommendation playlist\n# the 'song' and 'K' parameters are mandatory and the rest is\n# defaulted to False\n# The \"distance\" is a mathematical value with no explicit units, that is \n# used by te algorithm to find the closest songs\n# build_playlist will change the user's library\n~~~ \n\n\n## OG Scripts\n### Context\nThis script, in jupyter notebook format for organization purposes, applies the technique called K Nearest Neighbors to find the 50 closest songs to either one chosen or one of the users top 5(short term), all within a specific Spotify playlist, in order to maintain the most consistency in terms of the specific chosen style, and creates a new playlist with those songs in the user's library, using their genres, artists and overall popularity as metrics to determine indexes of comparison between songs\n\n### Variations\nThere are also 2 variations from that, which consist of medium term favorites related top 100 and \"short term top 5\" related top 50 songs. They vary from OG model since the base song(s) is(are) not chosen by hand but statistically\n\n### DISCLAIMER ###\nNot fit for direct use since some information such as client id, client secret, both of which are, now, in a hidden script on .gitignore so that it is not made public, have to be informed in order for the Spotify Web API to work properly.\nAnd also, these scripJsonts are deprecated, so they will not have any maintenance or overtime improvements\n\n\n\n\n\n## Packages used\n - Pandas \n~~~ps1\npip install pandas\n~~~\n - Requests\n~~~ps1\npip install requests\n~~~\n - Webbrowser\n~~~ps1\npip install webbrowser\n~~~\n - Json (json)\n - Operator (operator)\n - Functools (functools)\n - Os (os)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/nikolas-virionis/spotify-api",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "spotify-playlist-recommender",
            "package_url": "https://pypi.org/project/spotify-playlist-recommender/",
            "platform": "",
            "project_url": "https://pypi.org/project/spotify-playlist-recommender/",
            "project_urls": {
                "Homepage": "https://github.com/nikolas-virionis/spotify-api"
            },
            "release_url": "https://pypi.org/project/spotify-playlist-recommender/2.0.0/",
            "requires_dist": [
                "pandas",
                "requests",
                "webbrowser",
                "check-manifest ; extra == 'dev'",
                "pytest (>=3.7) ; extra == 'dev'",
                "twine ; extra == 'dev'"
            ],
            "requires_python": ">=3",
            "summary": "Python package which takes the songs of a greater playlist as starting point to make recommendations of songs based on up to 5 specific songs within that playlist, using K-Nearest-Neighbors Technique",
            "version": "2.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12733425,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "307d2575c05ae93cf843a2656b838bb8",
                    "sha256": "d4838c7d399399a8910501e8dd0971a1a94a9d232a8d3b612e7b70e710225104"
                },
                "downloads": -1,
                "filename": "spotify_playlist_recommender-2.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "307d2575c05ae93cf843a2656b838bb8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3",
                "size": 12398,
                "upload_time": "2022-01-29T22:23:04",
                "upload_time_iso_8601": "2022-01-29T22:23:04.180785Z",
                "url": "https://files.pythonhosted.org/packages/39/79/5dce32dd5638a5a5cfa13df41bb5d243e4bc51530e64dda0c9a491912d53/spotify_playlist_recommender-2.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}