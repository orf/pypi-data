{
    "0.24": {
        "info": {
            "author": "Klemen Zaletelj, Toma\u017e Bregar, Domen Gorjup, Janko Slavi\u010d",
            "author_email": "janko.slavic@fs.uni-lj.si, ladisk@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "pyEMA\n=====\n\nExperimental and operational modal analysis\n\nCheck out the `documentation`_.\n\nBasic usage\n-----------\n\nMake an instance of ``Model`` class:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   a = pyema.Model(\n       frf_matrix,\n       frequency_array,\n       lower=50,\n       upper=10000,\n       pol_order_high=60\n       )\n\nCompute poles:\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n   a.get_poles()\n\nDetermine correct poles:\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe stable poles can be determined in two ways: \n\n1. Display **stability chart** (deprecated) \n\n.. code:: python\n\n    a.stab_chart()\n\nor use the new function that also contains the stability chart and more:\n\n.. code:: python\n\n    a.select_poles()\n\nThe stability chart displayes calculated poles and the user can hand-pick the stable ones. Reconstruction is done on-the-fly. \nIn this case the reconstruction is not necessary since the user can access FRF matrix and modal constant matrix:\n\n.. code:: python\n\n    a.H # FRF matrix     \n    a.A # modal constants matrix\n\n2. If the approximate values of natural frequencies are already known, it is not necessary to display the stability chart:\n\n.. code:: python\n\n    approx_nat_freq = [314, 864]     \n    a.select_closest_poles(approx_nat_freq)\n\nIn this case, the reconstruction is not computed. ``get_constants`` must be called (see below).\n\nNatural frequencies and damping coefficients can now be accessed:\n\n.. code:: python\n\n   a.nat_freq # natrual frequencies\n   a.nat_xi # damping coefficients\n\nReconstruction:\n~~~~~~~~~~~~~~~\n\nThere are two types of reconstruction possible: \n\n1. Reconstruction using **own** poles:\n\n.. code:: python\n\n    H, A = a.get_constants(whose_poles='own', FRF_ind='all')\n\nwhere **H** is reconstructed FRF matrix and **A** is a matrix of modal constants.\n\n2. Reconstruction on **c** using poles from **a**:\n\n.. code:: python\n\n    c = pyema.Model(frf_matrix, frequency_array, lower=50, upper=10000, pol_order_high=60)\n\n    H, A = c.get_constants(whose_poles=a, FRF_ind=\u00e2\u20ac\u02dcall\u00e2\u20ac\u2122) \n\n|DOI|\n|Build Status|\n\n.. _documentation: https://pyema.readthedocs.io/en/latest/basic_usage.html\n\n.. |DOI| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.4016671.svg?\n   :target: https://doi.org/10.5281/zenodo.4016671\n\n.. |Build Status| image:: https://travis-ci.com/ladisk/pyEMA.svg?branch=master\n   :target: https://travis-ci.com/ladisk/pyEMA\n\n\n\n\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ladisk/pyEMA",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sdypy-EMA",
            "package_url": "https://pypi.org/project/sdypy-EMA/",
            "platform": "",
            "project_url": "https://pypi.org/project/sdypy-EMA/",
            "project_urls": {
                "Homepage": "https://github.com/ladisk/pyEMA"
            },
            "release_url": "https://pypi.org/project/sdypy-EMA/0.24/",
            "requires_dist": [
                "numpy (>=1.14.3)",
                "tqdm (>=4.23.4)",
                "matplotlib (>=3.3.1)",
                "scipy (>=1.1.0)",
                "pytest (>=3.0.5)"
            ],
            "requires_python": "",
            "summary": "Experimental and operational modal analysis.",
            "version": "0.24",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10006052,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6107513c907aa24fae5befc67ccdd6cf",
                    "sha256": "0335222f2b944f614397d0ce00ae5f8720b8cc47ce1f7e73d30fc6d5f3297a3e"
                },
                "downloads": -1,
                "filename": "sdypy_EMA-0.24-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6107513c907aa24fae5befc67ccdd6cf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 44415,
                "upload_time": "2021-04-07T14:23:05",
                "upload_time_iso_8601": "2021-04-07T14:23:05.562337Z",
                "url": "https://files.pythonhosted.org/packages/77/07/fd83ab945184df43fbb8682f21d8e271109077576c86c7bf35ed308f7d8b/sdypy_EMA-0.24-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "68e19e92a78b6f52cec8b60d1a3e6133",
                    "sha256": "d4ac63bfe87e2aef4ddbb46590b8669fa4cb002569dd5beb8b6be32874970926"
                },
                "downloads": -1,
                "filename": "sdypy-EMA-0.24.tar.gz",
                "has_sig": false,
                "md5_digest": "68e19e92a78b6f52cec8b60d1a3e6133",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 18560,
                "upload_time": "2021-04-07T14:23:09",
                "upload_time_iso_8601": "2021-04-07T14:23:09.327001Z",
                "url": "https://files.pythonhosted.org/packages/15/4f/c460d00ee1c4d8f7cd0fce0f556ea33992d331c97376a8f551503ff76397/sdypy-EMA-0.24.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}