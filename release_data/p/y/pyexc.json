{
    "1.0.0a0": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Natural Language :: English",
                "Natural Language :: Persian",
                "Programming Language :: C",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: Implementation :: CPython"
            ],
            "description": "# Pyexc\nSimple python exception managing written in C as python extension.\n\n> version: 1.0.0 - alpha\n\n> **ThreadSafe**\n\n> License: *GNU GPLv3*\n\n```python\ntry:\n    # ...\nexcept Exception as e:\n    pyexc.set(e)\n\n# ...\npyexc.raise_exc() # or pyexc.print_exc() or ...\n```\n\n## Installation\n> requirements: **setuptools**\n\n**clone** project from here and install by *setup.py* file:\n```bash\npython3 setup.py install\n```\nOr `python3 setup.py build` if you want just build it.\n\n------\n(Linux Only) Use **PIP** to install:\n```bash\n$ pip3 install -U pyexc\n```\n\n\n## API\n**Pyexc** includes 7 functions:\n- includes:\n    - [data](#def-data---tuplebaseexception--none-any)\n    - [clear](#def-clear---bool)\n    - [occurred](#def-occurred---bool)\n    - [set](#def-settype-baseexception--typebaseexception-args-str---block-bool-----bool)\n    - [raise_exc](#def-raise_excdefault-baseexception--typebaseexception-----noreturn)\n    - [print_exc](#def-print_excexception-baseexception--typebaseexception-----none)\n    - [exc_info](#exc_info----tuplebaseexceptiontypebaseexceptionnone-anynone-tracebacktypenone)\n\n#### def data() -> Tuple[BaseException | None, Any]\nReturns setted exception/args as tuple.\n```python\npyexc.set(TypeError, \"Hi\")\npyexc.data() # (<class 'TypeError'>, \"Hi\")\n```\n\n#### def clear() -> bool\nClears setted exception and args. \\\nReturns True if ok.\n\n#### def occurred() -> bool\nReturns True if an exception setted.\n\n#### def set(type: BaseException | Type[BaseException], args: str = ..., block: bool = ...) -> bool\nSet exception.\n\n- Parameters:\n    - type [`BaseException | Type[BaseException]`] Exception type.\n    - args [`str`] Exception argument.\n    - block [`bool`] If True and an exception setted, break and returns False. (default False)\n\nReturns True if setted.\n\n#### def raise_exc(default: BaseException | Type[BaseException] = ...) -> NoReturn\nRaise setted exception.\n\n- Parameters:\n    - default [`BaseException | Type[BaseException]`] Default exception if not exception setted. (default SystemError)\n\n#### def print_exc(exception: BaseException | Type[BaseException] = ...) -> None\nPrint exception in stderr (with traceback).\n\n- Parameters:\n    - exception [`BaseException`] an raised exception to print.\n\n```python\npyexc.set(TypeError)\npyexc.print_exc()\n# or\ntry:\n    raise TypeError()\nexcept Exception as e:\n    pyexc.print_exc(e)\n```\n\n#### exc_info: () -> Tuple[BaseException|Type[BaseException]|None, Any|None, TracebackType|None]\nReturns pack of setted exception, exception args or setted data, and exception traceback.\n\n## Example\n```python\nimport pyexc\n\ndef handler():\n    try:\n        ...\n    except Exception as e:\n        pyexc.set(e)\n\nhandler()\nif pyexc.occurred():\n    pyexc.print_exc()\n    pyexc.clear()\n```\n\n### TODO\n- Add callback\n- Add call",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/awolverp/pyexc/",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyexc",
            "package_url": "https://pypi.org/project/pyexc/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyexc/",
            "project_urls": {
                "Bug Tracker": "https://github.com/awolverp/pyexc/issues/new",
                "Github": "https://github.com/awolverp/pyexc/",
                "Homepage": "https://github.com/awolverp/pyexc/"
            },
            "release_url": "https://pypi.org/project/pyexc/1.0.0a0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "PyExc - Python C Extension to Manage Exceptions ...",
            "version": "1.0.0a0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15977378,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "350da39e85f420bd0ed2b1df6e26436f",
                    "sha256": "1d767a798a3a27b002afef88a0945603b564cd57854216e87841c6eddc13c2a9"
                },
                "downloads": -1,
                "filename": "pyexc-1.0.0a0.tar.gz",
                "has_sig": false,
                "md5_digest": "350da39e85f420bd0ed2b1df6e26436f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 2472,
                "upload_time": "2022-12-03T08:33:13",
                "upload_time_iso_8601": "2022-12-03T08:33:13.302339Z",
                "url": "https://files.pythonhosted.org/packages/f4/5a/ad6b44e035ba30e711d09763c4b876f8d51e9a06933dfab22a1ac2d71e1e/pyexc-1.0.0a0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}