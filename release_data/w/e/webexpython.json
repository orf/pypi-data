{
    "0.2": {
        "info": {
            "author": "Josh Kittle - josh.kittle@gmail.com",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Python Package for Cisco Webex Calling API\n\n## Webex API Documentation\n\n- https://developer.webex.com/docs/\n\n## Installation\n\n```bash\npip install webexpython\n```\n\ntesting in a lab is highly recommended prior to using in a production environment. (Devnet Sandboxes are great for this!)\n\n## Reserve a DevNet Sandbox (if required)\n\nThe\tDevNet\tSandbox\tis\taccessible\t through\tCisco\tDevNet\tat\thttp://developer.cisco.com\n\nSelect\tCollaboration\ton\tthe\tright\thand category menu\tand\tthen look\tfor\tthe\t\u201cCollaboration\t12.5\u201d\ttile.\t\nHit\treserve.\n\nTo connect to the lab, you'll need to use VPN.\n\nVPN Credentials will be sent to your DevNet registered email account, or you can view the _OUTPUT_ from the topology page. \n\nOnce connected, you can click on the server, in this case CUCM, and select _ATTRIBUTES_ to find username, password, and hostname / ip address.\n\n\n\n## Notes\n\nThe webexpython package was written to enable ease of configuration for webex calling parameters. \nNote: There is currently only limited API support for Webex calling. Some features simply cannot be configured via API. Sorry. :(\n\n## Configuration Pre-Requisites\n\nYou will require a bearer token from Cisco in order to use the webex api.  \n\nTALK MORE ABOUT HOW TO SET THAT UP HERE\n\n1) Get an access code.   \n\nUse the HTML below to create grant.html and get an access code.  You will be prompted to login, and the acceess code will be available in the URL bar as a parameter (code=your access code). Write down this code.\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Get an authorization code</title>\n    <meta charset='utf-8'>\n  </head>\n  <body>\n        <h1>Get a webex teams authorization code</h1>\n        </div>\n        <div class='spacer-small'></div>\n        <div class='center'>\n          <a href=\"https://webexapis.com/v1/authorize?client_id=<insert your client id here>&response_type=code&redirect_uri=http%3A%2F%2Fwebex.com&scope=spark-admin%3Abroadworks_subscribers_write%20meeting%3Aadmin_preferences_write%20spark%3Aall%20meeting%3Aadmin_preferences_read%20analytics%3Aread_all%20meeting%3Aadmin_participants_read%20spark-admin%3Apeople_write%20spark%3Apeople_write%20spark%3Aorganizations_read%20spark-admin%3Aworkspace_metrics_read%20spark-admin%3Aplaces_read%20spark-admin%3Awholesale_billing_reports_read%20spark-compliance%3Ateam_memberships_write%20spark%3Aplaces_read%20identity%3Atokens_read%20spark-compliance%3Amessages_read%20spark-admin%3Adevices_write%20spark-admin%3Aworkspaces_write%20spark%3Acalls_write%20spark-compliance%3Ameetings_write%20meeting%3Aadmin_schedule_write%20Identity%3Aone_time_password%20identity%3Aplaceonetimepassword_create%20spark-admin%3Aorganizations_write%20spark-admin%3Aworkspace_locations_read%20spark%3Adevices_write%20spark-admin%3Abroadworks_billing_reports_write%20spark%3Axapi_commands%20spark-compliance%3Awebhooks_read%20spark-admin%3Acall_qualities_read%20spark-compliance%3Amessages_write%20spark%3Akms%20meeting%3Aparticipants_write%20meeting%3Aadmin_transcripts_read%20spark-admin%3Apeople_read%20spark-compliance%3Amemberships_read%20spark-admin%3Aresource_groups_read%20meeting%3Arecordings_read%20meeting%3Aparticipants_read%20meeting%3Apreferences_write%20spark-admin%3Awholesale_billing_reports_write%20spark-admin%3Aorganizations_read%20meeting%3Aadmin_recordings_read%20spark-compliance%3Awebhooks_write%20meeting%3Atranscripts_read%20identity%3Atokens_write%20spark%3Axapi_statuses%20meeting%3Aschedules_write%20spark-compliance%3Ateam_memberships_read%20spark-admin%3Adevices_read%20meeting%3Acontrols_read%20spark-admin%3Ahybrid_clusters_read%20spark-admin%3Aworkspace_locations_write%20spark-admin%3Atelephony_config_read%20spark-admin%3Atelephony_config_write%20spark-admin%3Abroadworks_billing_reports_read%20meeting%3Aadmin_schedule_read%20spark-admin%3Abroadworks_enterprises_write%20meeting%3Aschedules_read%20spark-compliance%3Amemberships_write%20spark-admin%3Abroadworks_enterprises_read%20spark%3Acalls_read%20spark-admin%3Aroles_read%20meeting%3Arecordings_write%20meeting%3Apreferences_read%20spark-compliance%3Ameetings_read%20spark-admin%3Aworkspaces_read%20spark%3Adevices_read%20spark-admin%3Aresource_group_memberships_read%20spark-compliance%3Aevents_read%20spark-admin%3Aresource_group_memberships_write%20spark-compliance%3Arooms_read%20spark-admin%3Abroadworks_subscribers_read%20meeting%3Acontrols_write%20meeting%3Aadmin_recordings_write%20spark-admin%3Ahybrid_connectors_read%20audit%3Aevents_read%20spark-compliance%3Ateams_read%20spark-admin%3Aplaces_write%20spark-admin%3Alicenses_read%20spark-compliance%3Arooms_write%20spark%3Aplaces_write&state=set_state_here\">\n            <div class='button' style='width:512px;'>GRANT</div>\n          </a>\n        </div>\n      </div>\n    </section>\n  </body>\n</html>\n```\n\n## Create your config.py file\nWe will store your sensitive information (tokens, secrets, etc) in this file.  Create a file config.py\nand define the variables shown, populating them with the values issued by the webex api process.\n\n```python\nbearer_token = <insert value here in double quotes>\nrefresh_token = <insert value here in double quotes> \nclient_id = <insert value here in double quotes>\nclient_secret = <insert value here in double quotes>\n```\n\nFill in your unique values between the quotes\n\n## Package Usage \n\n```python\nfrom webexpython import webex\n\n\n```\n\n## Token Management\n\n#### Get a bearer token from the refresh token \nBearer tokens expire fairly quickly (14 days?) so we will fetch a new bearer token using our refresh token before running calls against the API so we know our token will work\n\n```python\nfrom webexpython import webex\nimport config\nimport urllib.parse\n\nrefresh_token = config.refresh_token\nclient_id = config.client_id\nclient_secret = config.client_secret\n\naccess_token = webex.refreshToken(client_id,client_secret,refresh_token)\nprint(access_token)\n```\n\n## Users\n\n#### Get User ID for a single user from email address \nYou will need to get the user ID for a user before doing most other configuration tasks. In this example\nwe first use the refresh token to get an updated bearer/access token. We then use the new access token\nto fetch the user ID value.  While other examples in this documentation may reference using a bearer\ntoken directly, we consider it a best practice to execute a refreshToken function prior to making other\ncalls to ensure you are not attempting to use stale credentials, which will lead to other problems.\n\n\n```python\nfrom webexpython import webex\nimport config\n\nrefresh_token = config.refresh_token\nclient_id = config.client_id\nclient_secret = config.client_secret\n\naccess_token = webex.refreshToken(client_id,client_secret,refresh_token)\n\nuserId = webex.getUserId(access_token,\"user@domain.com\")\nprint(\"Received UserID: \" + userId)\n```\n\n#### Configure the 'zero out' feature for voicemail for a single user\n\n\n```python\nimport config,webex\nbearer_token = config.bearer_token\n#First we will fetch the userId from the email address\nuserId = webex.getUserId(bearer_token,\"user@domain.com\") \nenableOrDisable = \"enable\" # or \"disable\"\ndestination = \"1000\"\nzeroOut = webex.setVoicemailZeroOut(bearer_token, enableOrDisable, userId, destination)\nprint(zeroOut)\n```\n\n## Organization\n\n#### Get a list of the licenses assigned to the Organization \n\n```python\nimport config,webex\nbearer_token = config.bearer_token\norgId = \"X1zF69zcGFyazovL3VzL09SR0FOSVpBVElPTi8wNzExNTgyZS1kNGMxLTRmNWItYmVmZi03ZjdiMjM4Yjg3MTQ\"\nlicenses = webex.getLicenses(bearer_token,orgId)\nprint(licenses)\n```\n\n#### Get a list of the locations (and location IDs) within the Organization \n\n```python\nimport config,webex\nbearer_token = config.bearer_token\norgId = \"X1zF69zcGFyazovL3VzL09SR0FOSVpBVElPTi8wNzExNTgyZS1kNGMxLTRmNWItYmVmZi03ZjdiMjM4Yjg3MTQ\"\nlocations = webex.getLocations(bearer_token,orgId)\nprint(locations)\n\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "webexpython",
            "package_url": "https://pypi.org/project/webexpython/",
            "platform": null,
            "project_url": "https://pypi.org/project/webexpython/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/webexpython/0.2/",
            "requires_dist": [
                "requests"
            ],
            "requires_python": ">=3.10",
            "summary": "Empty",
            "version": "0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13854467,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "09c301e808ef4e62a599cc80400c5bdb",
                    "sha256": "5819c860ea0290f55142f2d1964d7c5423d9812b7305991616c9f71e991b9efe"
                },
                "downloads": -1,
                "filename": "webexpython-0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "09c301e808ef4e62a599cc80400c5bdb",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 6958,
                "upload_time": "2022-05-18T15:05:07",
                "upload_time_iso_8601": "2022-05-18T15:05:07.357299Z",
                "url": "https://files.pythonhosted.org/packages/f3/50/15244b5db3f3f75625bf1f10b692974ac3f67a02417c75a2491cae711ae3/webexpython-0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "67ed370e7155292343822377d60f4f5c",
                    "sha256": "819aef9d5a70fbb4f416d9b52f8275a171a39b0e1a13aaaf949c6cd16495998b"
                },
                "downloads": -1,
                "filename": "webexpython-0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "67ed370e7155292343822377d60f4f5c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 4835,
                "upload_time": "2022-05-18T15:05:09",
                "upload_time_iso_8601": "2022-05-18T15:05:09.277285Z",
                "url": "https://files.pythonhosted.org/packages/07/16/604115d496451fedeee76f0b91a6b018239b58662ccf4c68764b3149f700/webexpython-0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}