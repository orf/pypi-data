{
    "1.0.0": {
        "info": {
            "author": "ABN AMRO",
            "author_email": "resc@nl.abnamro.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Repository Scanner Version Control System Scanner (RESC-VCS-SCANNER)\n<!-- TABLE OF CONTENTS -->\n## Table of contents\n1. [About the component](#about-the-component)\n2. [Getting started](#getting-started)\n    - [Prerequisites](#prerequisites)\n    - [Run locally from source](#run-locally-from-source)\n    - [Run locally using docker](#run-locally-using-docker)\n3. [Testing](#testing)\n\n<!-- ABOUT THE COMPONENT -->\n## About the component\nThe RESC-VCS-Scanner component uses the Gitleaks binary file to scan the source code for secrets.\n\n<!-- GETTING STARTED -->\n## Getting started\n\nThese instructions will help you to get a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n- [Git](https://git-scm.com/downloads)\n- [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n- [Python 3.9.0](https://www.python.org/downloads/release/python-390/)\n\n### Run locally from source\n<details>\n  <summary>Preview</summary>\n\n  **Prerequisites:**   \n  * RabbitMQ and RESC web service must be up and running locally.</br>\n  If you have already deployed RESC through helm in Kubernetes, then rabbitmq and resc webservice are already running for you.</br> \n  * Install Gitleaks [v8.8.8](https://github.com/zricethezav/gitleaks/releases/tag/v8.8.8) on your system.\n  * Download the rule config toml file to `/tmp/temp_resc_rule.toml` location by running below command from a Git Bash terminal.\n  * Send some repositories to 'repositories' topics of RabbitMQ server by referring the README of RESC-VCS-SCRAPER component.\n\n  ```bash\n  curl https://raw.githubusercontent.com/zricethezav/gitleaks/master/config/gitleaks.toml > /tmp/temp_resc_rule.toml\n  ```\n\n  Clone the repository, open the Git Bash terminal from /components/resc-vcs-scanner folder, and run below commands.  \n\n  #### 1. Create virtual environment:\n  ```bash\n  cd components/resc-vcs-scanner\n  pip install virtualenv\n  virtualenv venv\n  source venv/Scripts/activate\n  ```\n #### 2. Install resc_vcs_scanner package:\n  ```bash\n  pip install -e .\n  ```\n #### 3. Set below environment variables:\n\n ```bash\n  export RESC_RABBITMQ_SERVICE_HOST=127.0.0.1   #  The hostname/IP address of the rabbitmq server\n  export RESC_RABBITMQ_SERVICE_PORT_AMQP=30902  #  The amqp port of the rabbitmq server\n  export RABBITMQ_DEFAULT_VHOST=resc-rabbitmq   #  The virtual host name of the rabbitmq server\n  export RABBITMQ_USERNAME=queue_user    #  The username used to connect to the rabbitmq projects and repositories topics\n  export RABBITMQ_PASSWORD=\"\" # The password used to connect to the rabbitmq projects and repositories topics can be found for the value of queues_password field in /deployment/kubernetes/example-values.yaml file\n  export RABBITMQ_QUEUE=repositories # The name of the queue from which secret scanner will read repositories\n  export RESC_API_NO_AUTH_SERVICE_HOST=127.0.0.1 #  The hostname/IP address where RESC web service is running\n  export RESC_API_NO_AUTH_SERVICE_PORT=30900  #  The port number where RESC web service is running\n  export VCS_INSTANCES_FILE_PATH=\"\" # The absolute path to vcs_instances_config.json file containing the vcs instances definitions\n  export GITHUB_PUBLIC_USERNAME=\"\" # Your GitHub username\n  export GITHUB_PUBLIC_TOKEN=\"\" #  Your GitHub personal access token\n  export GITLEAKS_PATH=\"\" # The absolute path to gitleaks binary executable\n ```\n \n You need to replace the following values with your custom values: RABBITMQ_PASSWORD, VCS_INSTANCES_FILE_PATH, GITHUB_PUBLIC_USERNAME, GITHUB_PUBLIC_TOKEN and GITLEAKS_PATH.  \n\n #### Structure of vcs instances config json\nThe vcs_instances_config.json file must have the following format: \n_**Note:**_ You can add multiple vcs instances.\n\n<details>\n  <summary>Preview</summary>\n\nExample:\n```json\n{\n  \"vcs_instance_1\": {\n    \"name\": \"GITHUB_PUBLIC\",\n\t\"scope\": [\"kubernetes\"], \n    \"exceptions\": [],\n    \"provider_type\": \"GITHUB_PUBLIC\",\n    \"hostname\": \"github.com\",\n    \"port\": \"443\",\n    \"scheme\": \"https\",\n    \"username\": \"GITHUB_PUBLIC_USERNAME\",\n    \"token\": \"GITHUB_PUBLIC_TOKEN\",\n    \"organization\": \"\"\n  }\n}\n```\n* scope: List of GitHub accounts you want to scan.\n  For example, lets'say you want to scan all the repositories for the following GitHub accounts.\n  https://github.com/kubernetes  \n  https://github.com/docker\n  \n  Then you need to add those accounts to scope like: [\"kubernetes\", \"docker\"]. All the repositories from those accounts will be scanned. \n* exceptions (optional): If you want to exclude any account from scan, then add it to exceptions. Default is empty exception.\n\nThe **output** messages of `collect_projects` command has the following format:\n\n```json\n{\n  \"project_key\": \"kubernetes\",\n  \"vcs_instance_name\": \"GITHUB_PUBLIC\",\n}\n```\n</details>\n\n #### 4. Run the secret scan task:  \n  This task reads the repositories from a RabbitMQ channel called 'repositories', runs scan using [Gitleaks](https://github.com/zricethezav/gitleaks) and saves the findings metadata to database. \n\n  This can be done via the following command:  \n  ```bash\n  celery  -A  vcs_scanner.secret_scanners.celery_worker worker --loglevel=INFO -E -Q repositories --concurrency=1  --prefetch-multiplier=1\n```\n</details>\n\n### Run locally using docker\n<details>\n  <summary>Preview</summary>\nRun the RESC VCS Scanner docker image locally by running the following commands:  \n\n- Pull the docker image from registry: \n```bash\ndocker pull rescabnamro/resc-vcs-scanner:1.0.0\n```\n\n- Alternatively, build the docker image locally by running: \n```bash\ndocker build -t rescabnamro/resc-vcs-scanner:1.0.0 .\n```\n\n- Run the vcs-scanner by using below command: \n```bash\ndocker run -v <path to vcs_instances_config.json in your local system>:/tmp/vcs_instances_config.json -e RESC_RABBITMQ_SERVICE_HOST=\"host.docker.internal\" -e RESC_RABBITMQ_SERVICE_PORT_AMQP=30902 -e RABBITMQ_DEFAULT_VHOST=resc-rabbitmq -e RABBITMQ_USERNAME=queue_user -e RABBITMQ_PASSWORD=\"<the password of queue_user>\" -e RABBITMQ_QUEUE=\"repositories\" -e RESC_API_NO_AUTH_SERVICE_HOST=\"host.docker.internal\" -e RESC_API_NO_AUTH_SERVICE_PORT=30900 -e VCS_INSTANCES_FILE_PATH=\"/tmp/vcs_instances_config.json\" -e GITHUB_PUBLIC_USERNAME=\"<your github username>\" -e GITHUB_PUBLIC_TOKEN=\"<your github personal access token>\" -e GITLEAKS_PATH=\"/vcs_scanner/gitleaks_config/seco-gitleaks-linux-amd64\" --name resc-vcs-scanner rescabnamro/resc-vcs-scanner:1.0.0 celery  -A vcs_scanner.secret_scanners.celery_worker worker --loglevel=INFO -E -Q repositories --concurrency=1  --prefetch-multiplier=1\n```\n\nTo create vcs_instances_config.json file please refer to: [Structure of vcs_instances_config.json](#structure-of-vcs-instances-config-json)\n</details>\n\n### Run locally as a CLI tool (Still in development) \n\n<details>\n  <summary>Preview</summary>\n\n  It is also possible to run the component as a CLI tool to scan VCS repositories.\n  #### 1. Create virtual environment:\n  ```bash\n  cd components/resc-vcs-scanner\n  pip install virtualenv\n  virtualenv venv\n  source venv/Scripts/activate\n  ```\n #### 2. Install resc_vcs_scanner package:\n  ```bash\n  pip install -e .\n  ```\n #### 3. Run CLI scanner:\n  ```bash\n  secret_scanner --help\n  ```\n  Example:\n  ```bash\n  secret_scanner  --repo-url=<repository url> --gitleaks-rules-path=<path to gitleaks toml rule> --gitleaks-path=<path to gitleaks binary>\n  ```\n</details>\n\n## Testing \nRun below commands to make sure that the unit tests are running and that the code matches quality standards:\n\n_**Note:**_ To run these tests you need to install [tox](https://pypi.org/project/tox/). This can be done on Linux and Windows with Git Bash.\n```bash\npip install tox      # install tox locally\n\ntox -v -e sort       # Run this command to validate the import sorting\ntox -v -e lint       # Run this command to lint the code according to this repository's standard\ntox -v -e pytest     # Run this command to run the unit tests\ntox -v               # Run this command to run all of the above tests\n```\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ABNAMRO/repository-scanner",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "resc-vcs-scanner",
            "package_url": "https://pypi.org/project/resc-vcs-scanner/",
            "platform": null,
            "project_url": "https://pypi.org/project/resc-vcs-scanner/",
            "project_urls": {
                "Homepage": "https://github.com/ABNAMRO/repository-scanner"
            },
            "release_url": "https://pypi.org/project/resc-vcs-scanner/1.0.0/",
            "requires_dist": [
                "celery (==5.2.4)",
                "amqp (==5.1.1)",
                "requests (==2.25.1)",
                "typing (==3.7.4.3)",
                "pydantic (==1.8.2)",
                "GitPython (==3.1.27)",
                "resc-backend (>=1.0.0)",
                "tenacity (==8.0.1)"
            ],
            "requires_python": "",
            "summary": "RESC Version Control System Scanner",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16008425,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9df0381839a9c846af48a5c7178de312",
                    "sha256": "747c82696f025f93a3a47d6bafa7ba2226ed6132f61f34da3d7ed5313fdd6745"
                },
                "downloads": -1,
                "filename": "resc_vcs_scanner-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9df0381839a9c846af48a5c7178de312",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 23347,
                "upload_time": "2022-12-06T13:47:39",
                "upload_time_iso_8601": "2022-12-06T13:47:39.186021Z",
                "url": "https://files.pythonhosted.org/packages/b8/3f/6d4cfbd0fa540e2508c54ac48eb800e9c09ac042adab0ba828c7b0d176e7/resc_vcs_scanner-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "470b0e657f707b799932f1eb1a2a13be",
                    "sha256": "48ad9d41f74efe2309b27cb17af42d9315a84254eb4c422bd99de095725d6e3e"
                },
                "downloads": -1,
                "filename": "resc_vcs_scanner-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "470b0e657f707b799932f1eb1a2a13be",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16821,
                "upload_time": "2022-12-06T13:47:41",
                "upload_time_iso_8601": "2022-12-06T13:47:41.015192Z",
                "url": "https://files.pythonhosted.org/packages/3c/79/be018a6742f91a62ce893eaeb51717b73d0ba38ed582a6731202f814fb86/resc_vcs_scanner-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}