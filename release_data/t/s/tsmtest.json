{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "Tommer Rissin <tommerrissin@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Traveling-salesman\n\nA class for testing discrete optimization algorithms using the \"traveling salesman\" problem.\n\n**discrete optimization:** arranging an array of several member in the optimal order according to a cost (score)\nfunction.\n\n## Class structure\n\nOn creation the class generates n random two-dimensional coordinates in a map of 1000x1000. The locations can be\ngenerated either randomly or in the shape of a circle\n\nThe route is represented in a list with all the location names, and the order is the route.\n\nThe class contains several attributes and methods for ease of use during testing.\n\n### Attributes and properties\n\n* **`locations` -** dictionary, containing all the coordinates. e.g:\n  ```instace.locations = {1: (153, 636), 2: (23, 523), 3: (864, 41)}```\n* **`circle` -** boolean(getter), `True` if generated locations in a circle.\n* **`initial_route` -** list(getter), the names of locations in the ordered they were generated in.\n\n### Methods\n\n* **instance initiation -** there are two optional arguments:\n  * `locations = int` which accepts an integer and determines the number of generated locations(default is 10)\n  * `circle = bool` which accepts a boolean and determines if the locations are to be generated in a circle(default\n    is `False`)\n* **`distance` -** evaluates the route inputted through the argument `route`. the route must be a list containing the\n  names of locations in the order to be traveled. the function returns the sum of all distances between locations in the\n  order of the route list. this distance will be used as the cost of a solution by the optimizer.\n* **`plot` -** show a plot of a given route. has two optional arguments:\n  * `route` - a list containing the names of locations if the order to be traveled. if this argument is empty,\n    the `initial_route` will be used.\n  * `labels` - boolean, if `True` adds labels to all locations.\n* **`random_route` -** returns a random route. it should be noted that when `circle = False` the initial_route can also\n  serve as a random route since the locations are random. has one optional argument:\n  * **`seed` -** accepts any, uses the input as the random seed.\n* **`add_location` -** adds a single location to the `locations` dictionary, and the `initial_route` list. has two\n  mandatory arguments and one optional argument:\n  * `x` - the x coordinate, must be in range of 1, 1000. required argument\n  * `y` - the y coordinate, must be in range of 1, 1000. required argument\n  * `name` - the name, or key of the location. if `None`, will use an integer that is not already present\n    in `locations.keys()`. if the passed through key already exists in the `locations` dictionary, the old location will\n    be overwritten.\n\n## Usage\n\nto create an instance of the `TSM` class:\n\n```python\nfrom TSM import TSM\n\ntsm = TSM(locations=10, circle=False)\n```\n\nto get the initial route, and a random route\n\n```python\ninit_route = tsm.initial_route   # return: [0,1,2,3,4,5,6,7,8,9]\nrand_route = tsm.random_route()  # return: [5,3,4,7,9,1,0,6,2,8]\n```\n\nto get the distance of a route.\n\n```python\ndistance = tsm.distance(route=rand_route)  # return: 58317\n```\n\nto add a location\n\n```python\nprint(len(tsm.initial_route))  # out: 10\n\ntsm.add_location(x=500, y=250)\n\nprint(len(tsm.initial_route))  # out: 11\n```\n\nto plot a route\n\n```python\nopt_route = [5,3,4,7,9,1,0,6,2,8]  # the optimal route found with an optimization algorithm\n\ntsm.plot(route=opt_route)\n```\n\nthe printed plot:\n\n![Figure_1](https://user-images.githubusercontent.com/76598250/114361374-59cd3900-9b76-11eb-98ae-f5a87cca2261.png)\n\n## Using circle\n\nSometimes it is useful to know the true global optima to check how far off the result from the optimization algorithm\nis. In order to do that, I've added the `circle` argument when creating the instance. When using this option, the\nlocations will be generated in the shape of a circle, this means that the `initial_route`\nis also the global minima for this set of locations. It is important to note that the optimal route can start and end\nanywhere, therefore, the optimal route found by an algorithm might not be 100% identical to the `initial_route` from\nthe `TSM` class but would still be a global optima. to make sure you have achieved a true optimal route you should make\nsure its cost (total distance) is identical to the initial route and not that the route itself is identical.\n\nhere is a plot of the initial cost of 50 locations (optimal cost= 6153.5)\n\n![Figure_1](https://user-images.githubusercontent.com/76598250/114386249-42e81000-9b91-11eb-867a-be24bab5c67a.png)\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT License  Copyright (c) [2022] [Tommer Rissin & Yossi Rissin]  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "TSMtest",
            "package_url": "https://pypi.org/project/TSMtest/",
            "platform": null,
            "project_url": "https://pypi.org/project/TSMtest/",
            "project_urls": {
                "Bug Tracker": "https://github.com/Tommer-R/Traveling-salesman/issues",
                "Homepage": "https://github.com/Tommer-R/Traveling-salesman"
            },
            "release_url": "https://pypi.org/project/TSMtest/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Traveling salesman problem for testing and benchmarking optimization algorithms",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15980133,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fbc9f28ab5d31554bac0482dcd46d45f",
                    "sha256": "1e2e1b1595ea1edcc82c4062b0cceb7f6562a5b89066b5d745fc498db79c3678"
                },
                "downloads": -1,
                "filename": "tsmtest-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fbc9f28ab5d31554bac0482dcd46d45f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 8409,
                "upload_time": "2022-12-03T17:35:11",
                "upload_time_iso_8601": "2022-12-03T17:35:11.376110Z",
                "url": "https://files.pythonhosted.org/packages/2e/28/42075f969517fbcde83293e5e51e0cdfb254d6e246ac54770ac4bf89d170/tsmtest-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7668bd057d282b08996a2e148b45946c",
                    "sha256": "0470f7aa544bd7b743677fd108b35a226b619c853c25b58f5b3c142eb5d5182a"
                },
                "downloads": -1,
                "filename": "tsmtest-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "7668bd057d282b08996a2e148b45946c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 10186,
                "upload_time": "2022-12-03T17:35:13",
                "upload_time_iso_8601": "2022-12-03T17:35:13.095638Z",
                "url": "https://files.pythonhosted.org/packages/48/e6/166fb75827ad70baf7a82027d2096c1da492b942a14a6362a491a39e0cb3/tsmtest-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}