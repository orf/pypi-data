{
    "1.3.4": {
        "info": {
            "author": "morninbru",
            "author_email": "haykh.astro@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# OOMpy a/k/a order-of-magnitude python\n\nOOMpy is a python package for working with physical units and quantities. Unlike `astropy` it works in gaussian units, supports a multitude of physical dimensions, constants, and conversion between them. \n\n## Installation\n\n```sh\npip install oompy\n```\n\n## Usage\n\nImporting the main objects:\n```python\n# import units and constants\nfrom oompy import Units as u\nfrom oompy import Constants as c\n```\n\n### Simple manipulations and unit conversions\n\nSeveral common usage examples:\n```python\n# example #1\nm_m87 = 6.5e9 * u.Msun\nrg_m87 = c.G * m_m87 / c.c**2\nrg_m87 >> 'au'\n#       ^\n#       |\n# basic conversion\n#\n# Output: 64.16104122314108 au\n```\n\n```python\n# example #2\npsr_bfield = 1e12 * u.G    # magnetic field in Gauss\ngold_density = 19.3 * u.g / u.cm**3\n((psr_bfield / c.c)**2).cgs\n#                        ^\n#                        |\n#                 convert to cgs\n#\n# Output: 1112.6500560536185 g cm^-3\n#\n(psr_bfield / c.c)**2 / gold_density >> \"\"\n#\n# Output: 57.650261971690085\n```\n\n```python\n# example #3\ngamma_factor = 1000\nb_field = u.MG        # = Mega Gauss \nomega_B = (c.q_e * b_field / (c.m_e * c.c))\nsync_omega = gamma_factor**2 * omega_B\n\nc.hbar * sync_omega >> 'keV'\n#                       ^\n#                       |\n#             understands powers of 10 prefixes \n#               (from 1e-12 to 1e18)\n#\n# Output: 11.576759893742388 keV\n\n# example #4\n# get the reduced physical type of the quantity (i.e., dimension in base units)\n~(c.hbar * sync_omega)\n#\n# Output: {<Type.MASS: 3>: Fraction(1, 1), <Type.LENGTH: 1>: Fraction(2, 1), <Type.TIME: 2>: Fraction(-2, 1)}\n```\n\n```python\n# example #5\n# compare physical quantities in arbitrary units\n(c.R_sun >> 'ly') == c.R_sun # True\nc.M_sun < (c.m_e >> \"lb\") # False\nc.R_sun >= (c.m_e >> \"lb\") # Error: incompatible units\n```\n\nTo see all units and/or constants:\n```python\nu.all\nc.all\n```\n\nCreate your own quantities:\n```python\nfrom oompy import Quantity\n# example #4\nmy_speed = Quantity('25 m sec^-1')\n#                      ^\n#                      |\n#                 as a string\nrabbit_speed = Quantity(55, 'mi hr^-1')\n#                         ^\n#                         |\n#                     as a tuple\nelephant_speed = Quantity('km hr^-1')\n(elephant_speed * my_speed / rabbit_speed) >> 'ly Gyr^-1'\n#                                                  ^\n#                                                  |\n#                                           converts lightyear per Gigayear :)\n#\n# Output: 0.9421232705492877 ly Gyr^-1\n```\n\n### Vague conversions\nThis technique enables a comparison between incompatible units under certain assumptions. For instance, one might assume that we consider a photon, and thus its energy, wavelength and frequency are connected via `c` and `h`. \n\n```python\nfrom oompy import Assumptions as assume\n\n# uses h\nfreq = 5 * u.GHz\nfreq >> assume.Light >> \"cm\"\n#\n# Output: 5.995849160000001 cm\n\n# uses h-bar as freq has a dimension of radians per second\nfreq = 2 * c.pi * u.rad / u.sec\nfreq >> assume.Light >> \"eV\"\n#\n# Output: 4.1356667496413186e-15 eV\n\n# temperature to/from energy\n10000 * u.K >> assume.Thermal >> \"eV\"\n#\n# Output: 0.8617339407568576 eV\n```\n\nTo list all the available assumptions:\n```python\nlist(assume)\n```\n\n## For developers\n\nTesting the code is done in three steps using `black` to check the formatting, `mypy` to check the types and typehints, and `pytest` to run the tests. First install all the dependencies:\n\n```sh\npip install black mypy pytest\n```\n\nThen run the tests one-by-one:\n\n```sh\nblack oom --check --diff\nmypy oom\npytest\n```\n\nThese tests are also run automatically on every commit using GitHub Actions.\n\n## To do\n\n- [ ] add more units & constants\n- [x] (added in v1.1.0) comparison of quantities (`==`, `!=`, `>`, `<`, `>=`, `<=`)\n- [x] (added in v1.1.0) conversion with an rshift (`>>`) operator\n- [x] (added in v1.1.0) base unit extraction (with `~`)\n- [x] (added in v1.2.0) add a possibility to perform vague conversions (e.g. Kelvin to eV, Hz to erg) etc.\n- [x] (added in v1.3.0) unit tests\n- [ ] distance to redshift vague conversion\n- [ ] add formatting and TeX support\n- [ ] add a way to work with scaling relations\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/haykh/oom",
            "keywords": "",
            "license": "BSD 3-Clause License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "oompy",
            "package_url": "https://pypi.org/project/oompy/",
            "platform": null,
            "project_url": "https://pypi.org/project/oompy/",
            "project_urls": {
                "Homepage": "https://github.com/haykh/oom"
            },
            "release_url": "https://pypi.org/project/oompy/1.3.4/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Tools for working with physical units and quantities",
            "version": "1.3.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15968132,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "64be7bd19e8d8ccbc74c4c02620cd72d",
                    "sha256": "49e0c215758b87dd2d3352fa6cfa8bdd953fe979be52ca1e187d03eae014c1b2"
                },
                "downloads": -1,
                "filename": "oompy-1.3.4.tar.gz",
                "has_sig": false,
                "md5_digest": "64be7bd19e8d8ccbc74c4c02620cd72d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 26183,
                "upload_time": "2022-12-02T09:37:16",
                "upload_time_iso_8601": "2022-12-02T09:37:16.803248Z",
                "url": "https://files.pythonhosted.org/packages/ed/7c/01dcd0bd48858980013fb418d6cd8c866ec5b06a74f8f985dfa1140cb24d/oompy-1.3.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}