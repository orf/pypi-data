{
    "0.0.1": {
        "info": {
            "author": "Bruno Gonz\u00e1lez",
            "author_email": "brunogllaga@icloud.com",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 2.7",
                "Programming Language :: Python :: 3.3",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7"
            ],
            "description": "# TIPLSB: Firmas incrementales en im\u00e1genes basado en LSB y funciones HASH\n\nTIPLSB (Trace Image Path with LSB) es un algoritmo el cual permite almacenar en una \u00fanica imagen un\nn\u00famero finito de firmas, estas firmas denotan las distintas \"manos\" por las cuales ha\npasado una imagen a lo largo del tiempo.\n\nLas distintas firmas que contiene una imagen se encuentran almacenadas de forma\nincremental, permitiendo por tanto obtener el recorrido lineal que ha tenido la imagen.\nEste recorrido debe ser algo confidencial, por lo que no\ncualquier usuario podr\u00e1 obtenerlo.\n\nEste algoritmo implementa un m\u00e9todo con el cual \u00fanicamente aquellos usuarios\nque haya realizado una firma en la imagen podr\u00e1n obtener el recorrido. Este siempre\nser\u00e1 de las firmas posteriores a la suya, siendo por tanto el autor original el \u00fanico que\npueda obtener el recorrido completo.\n\nLa realizaci\u00f3n de este proyecto surge de la asignatura de **Trabajo de Fin de\nGrado** para la obtenci\u00f3n del t\u00edtulo en el grado de **Ingenier\u00eda Inform\u00e1tica - Tecnolog\u00edas\nInform\u00e1ticas** en la **Universidad de Sevilla**.\n\n## Autor\n* **Bruno Gonz\u00e1lez** - [brunogonzalezlla](https://github.com/brunogonzalezlla/)\n\n## Tutores\n* **F\u00e9lix Gudiel**\n* **Victor \u00c1lvarez**\n\n## Tabla de contenido\n  * [Instalaci\u00f3n](#Instalacion)\n  * [Gu\u00eda de uso](#Guia)\n    * [Clase tiplsb](#Clasetiplsb)\n      * [Ejemplo](#ClasetiplsbEjemplo)\n    * [Funci\u00f3n tip_decode](#Funciontipdecode)\n      * [Ejemplo](#FunciontipdecodeEjemplo)\n  * [Integraci\u00f3n con Django](#Integracion)\n    * [views.py](#Views)\n    * [urls.py](#Urls)\n      \n\n<a name = \"Instalacion\"></a>\n## Instalaci\u00f3n\nEste proyecto est\u00e1 disponible en [PyPI](https://pypi.org/project/TIPLSB/) y pueden instalarlo con:\n\n    pip install TIPLSB\n\nDe manera alternativa, puedes instalarlo directamente del repositorio:\n\n    git clone https://github.com/brunogonzalezlla/TIPLSBlib\n    cd TIPLSBlib\n    python3 setup.py install\n\n\n<a name = \"Guia\"></a>\n## Gu\u00eda de uso\n\nLos dos elementos principales de la liber\u00eda son los siguiente:\n\n* Clase **tiplsb**: esta es la clase principal de la librer\u00eda. Mediante ella se realizar\u00e1n las diferentes firmas en \nlas im\u00e1genes y permitir\u00e1 la consulta de los detallen asociados.\n\n* Funci\u00f3n **tip_decode** : mediante esta funci\u00f3n obtendremos el recorrido (firmas realizadas) en una imagen.\n\n<a name = \"Clasetiplsb\"></a>\n### Clase tiplsb\n\nLa clase **tiplsb** est\u00e1 compuesta por los siguiente par\u00e1metros de entrada\n\n    tiplsb(path, hash='sha256', version='0.0.1', redundancy=5)\n\nEl primer par\u00e1metro a establecer en la creaci\u00f3n de un objeto de tipo **tiplsb** es _path_, \nen ella estableceremos la ruta de la imagen que queremos utilizar.\n\nSiempre que creemos un objeto del tipo **tiplsb** se comprobar\u00e1 de manera autom\u00e1tica\nsi la imagen introducida ya se encuentra inicializada.\n\nConsideramos que una imagen se encuentra inicializada cuando ya se ha realizado una firma\nsobre ella.\n\nEs por ello que la clase podr\u00e1 recibir como entrada tres par\u00e1metros extras, los cuales si\nla imagen no se encontrase ya inicializada ser\u00edan utilizados para su configuraci\u00f3n. \nEstos tres par\u00e1metros de configuraci\u00f3n ser\u00edan los siguientes:\n\n* **hash**: el algoritmo que realiza las firmas hace uso de una funci\u00f3n hash. Por defecto\nse usa SHA-256, sin embargo la clase permite la utilizaci\u00f3n de otras funciones:\n  * SHA-1: Se deber\u00e1 establecer 'sha1'.\n  * SHA224: Se deber\u00e1 establecer 'sha224'.\n  * SHA256: Se deber\u00e1 establecer 'sha256'.\n  * SHA-384: Se deber\u00e1 establecer 'sha384'.\n  * SHA-512: Se deber\u00e1 establecer 'sha512'.\n  * SHA-256 (Por defecto): Se deber\u00e1 establecer 'sha256'.\n\n\n* **version**: el n\u00famero de versi\u00f3n utilizado para realizar firmas ir\u00e1 incrustado en la\npropia imagen. Debido a los posibles cambios que pueda sufrir la librer\u00eda se permitir\u00e1 \nla modificaci\u00f3n de este par\u00e1metro. Por defecto utilizar\u00e1 la versi\u00f3n m\u00e1s reciente.\n\n\n* **redundancy**: para evitar posibles perdidas de datos cada vez que se realice\nuna firma esta ser\u00e1 replicada un n\u00famero _n_ de veces. Mediante el par\u00e1metro **redundancy**\npodremos establecer esta _n_. Por defecto en esta versi\u00f3n estar\u00e1 inicializado a 5.\n\n\nUna vez que dispongamos de un objeto creado correctamente podremos realizar las siguientes\nacciones:\n\n* objeto.**add(author, platform, date=False)**: este m\u00e9todo permitir\u00e1 realizar una firma\nsobre la imagen establecida en la creaci\u00f3n del objeto. Recibir\u00e1 los siguiente par\u00e1metros:\n  * **author**: Se indicar\u00e1 el nombre, correo, id... del usuario que va a realizar la firma.\n  * **platform**: Se indicar\u00e1 la plataforma en la cual se ha realizado la firma.\n  * **date**: Por defecto cuando se realiza una firma se establece la fecha actual. Sin embargo\n  se permite que establecer una fecha que la sustituya.\n  \n\n* objeto.**save(path='')**: una vez que hemos realizado una firma podremos generar la\ncorrespondiente imagen en formato **png**. Por defecto la imagen se generar\u00e1 en la ruta\nactual, sin embargo podemos personalizar la ruta estableciendo el par\u00e1metro _path_.\n\n<a name = \"ClasetiplsbEjemplo\"></a>\n#### Ejemplo\n    \n    from TIPLSB import tiplsb \n    \n    obj = tiplsb(\"img/600x600.png\")\n    obj.add(\"Hola\", \"PlataformaMundo\")\n    obj.save()\n\n<a name = \"Funciontipdecode\"></a>\n### Funci\u00f3n tip_decode\n\nLa  funci\u00f3n **tip_decode** est\u00e1 compuesta por los siguiente par\u00e1metros de entrada:\n\n    tip_decode(path_original, path_modified)\n\nEsta funci\u00f3n permite obtener el recorrido de la imagen. Para poder obtenerlo ser\u00e1 \nnecesario disponer de dos im\u00e1genes.\n\nLa ruta de la imagen que introduciremos en **path_modified** ser\u00e1 de la cual\nqueremos obtener el recorrido.\n\nPara poder obtener este recorrido ser\u00e1 necesaria una \"llave\", esta se tratar\u00e1 de la\nimagen introducida en **path_original**. \n\nPodr\u00e1 ser la imagen original sin firmas (en caso\nde querer obtener el recorrido completo de la imagen) o una copia de la imagen en la cual el\nn\u00famero de firmas totales sea menor al de la imagen introducida en **path_modified** \n(en este caso obtendremos las firmas posteriores a la \u00faltima de _path_original_)\n\nLa funci\u00f3n devolver\u00e1 un diccionario en el cual las claves ser\u00e1n enteros empezando por 0 \nque denotar\u00e1n el orden en el cual se han realizado las firmas. Sus valores asociados\nser\u00e1n las firmas.\n\n    {0: Primera firma, 1: Segunda firma, ...}\n\n<a name = \"FunciontipdecodeEjemplo\"></a>\n#### Ejemplo\n\n    from TIPLSB import tip_decode\n    \n    dec = tip_decode('img/600x600.png', 'img/600x600_2_firmas.png')\n    print(dec)\n    > {0: 'TIPLSB|Hola|PlataformaMundo|22:43:21.975652', 1: 'TIPLSB|Bruno|TIPLSBapp|23:15:06.175428'}\n\n<a name = \"Integracion\"></a>\n## Integraci\u00f3n con Django\nTIPLSB est\u00e1 pensada para ser implementada en plataformas que permitan la compartici\u00f3n\nde im\u00e1genes. Es por ello que se ha desarrollado un ejemplo de integraci\u00f3n con el \nframework web Django.\n\nUna vez implementada la librer\u00eda, cada vez que una p\u00e1gina sea cargada todas las\nim\u00e1genes que aparezcan contendr\u00e1n una firma con la informaci\u00f3n del usuario que la\nobserva.\n\nLa forma en la que se identificar\u00e1n a los usuarios ser\u00e1 elecci\u00f3n del propio administrador\ndel sistema.\n\n<a name = \"Views\"></a>\n### views.py\nDebemos a\u00f1adir una vista nueva la cual ser\u00e1 la encargada de devolver las im\u00e1genes firmadas.\n\nA\u00f1adimos el siguiente extracto:\n\n    from TIPLSB import tiplsb\n    from PIL import Image\n    from django.http import HttpResponseNotFound, HttpResponse\n    from os.path import exists\n\n    ...\n\n    def tiplsb_img(request, path):\n        # Comprobamos si la imagen solicitada existe\n        if exists(\"static/\"+path):\n            obj = tiplsb(\"static/\"+path)\n\n            # Debemos establecer el autor con el cual queremos que se realice la firma.\n            # Tambi\u00e9n debemos establecer el nombre de nuestra plataforma.\n            obj.add(\"Identificador\", \"MiWebDjango\")\n    \n            array = obj.img_array.reshape(obj.height, obj.width, 3)\n            image = Image.fromarray(array.astype('uint8'), 'RGB')\n    \n            response = HttpResponse(content_type='image/png')\n    \n            image.save(response, \"PNG\")\n            return response\n        else:\n            return HttpResponseNotFound(\"Image not found\")\n\nComo se explica en los comentarios del extracto de c\u00f3digo es necesario que el administrador\nestablezca un criterio a la hora de establecer el autor de la firma.\n\nUn criterio sencillo para establecer un autor a la hora de firmar es el uso\nde la IP del usuario que solicita la imagen. Sin embargo lo m\u00e1s recomendable ser\u00eda\nutilizar identificadores para los cuales \u00fanicamente el administrador del sistema sea\ncapaz de obtener la informaci\u00f3n relevante.\n\nOtro punto a destacar es que debe existir una carpeta _static_ en la ra\u00edz de nuestro\nproyecto. En esta carpeta deben ubicarse las im\u00e1genes utilizadas en el sitio web. \n\n    settings.py\n\n    ...\n\n    STATIC_URL = 'static/'\n\n    ...\n\nEn caso de disponer de una carpeta con otro nombre bastar\u00e1 con modificar\nlas siguientes l\u00edneas\n\n    if exists(\"mi_carpeta_de_imagenes/\"+path):\n            obj = tiplsb(\"mi_carpeta_de_imagenes/\"+path)\n\n\n<a name = \"Urls\"></a>\n### urls.py\nEn el archivo _urls.py_ deberemos a\u00f1adir a la variable _urlpatterns_ la siguiente l\u00ednea:\n\n    urlpatterns = [\n        ...\n        path('tiplsb_img/<str:path>', views.tiplsb_img, name='tiplsb'),\n        ...\n    ]\n\n### Ejemplo\nUna vez que hayamos realizado los pasos anteriores correctamente ya podremos hacer uso\nde las im\u00e1genes ubicadas en _static_:\n\n    <img src=\"/tiplsb_img/img.png\">\n\n## Licencia\nEste software tiene licencia MIT.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "https://github.com/brunogonzalezlla/TIPLSBlib/archive/v0.1.tar.gz",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/brunogonzalezlla/TIPLSBlib",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "TIPLSB",
            "package_url": "https://pypi.org/project/TIPLSB/",
            "platform": null,
            "project_url": "https://pypi.org/project/TIPLSB/",
            "project_urls": {
                "Download": "https://github.com/brunogonzalezlla/TIPLSBlib/archive/v0.1.tar.gz",
                "Homepage": "https://github.com/brunogonzalezlla/TIPLSBlib"
            },
            "release_url": "https://pypi.org/project/TIPLSB/0.0.1/",
            "requires_dist": [
                "Pillow",
                "numpy"
            ],
            "requires_python": "",
            "summary": "Library to trace the path of an image based on LSB and RSA.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13960710,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2f6d7e622728ebfeb181b9d23043c242",
                    "sha256": "9febe7bc1df787188b4a6a55dd15a15192ad2f774d9456a246eb92cf1c48f623"
                },
                "downloads": -1,
                "filename": "TIPLSB-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2f6d7e622728ebfeb181b9d23043c242",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 9951,
                "upload_time": "2022-05-28T01:04:15",
                "upload_time_iso_8601": "2022-05-28T01:04:15.793639Z",
                "url": "https://files.pythonhosted.org/packages/b4/79/fd845794daf2bfbff9243443402efc83c720c35ff9d76675b8fa37d9bac6/TIPLSB-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ae61d244857f21e1ccfac5c855413112",
                    "sha256": "69b49c589a15675d1c040d164b93d588da76fa5e451ab96cdabb4ffc225a2b6e"
                },
                "downloads": -1,
                "filename": "TIPLSB-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ae61d244857f21e1ccfac5c855413112",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12525,
                "upload_time": "2022-05-28T01:04:17",
                "upload_time_iso_8601": "2022-05-28T01:04:17.725436Z",
                "url": "https://files.pythonhosted.org/packages/e8/7b/dd87276f82d6a56e4768101e0c69962a7e985d5191b2451a29df0cf38b2d/TIPLSB-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}