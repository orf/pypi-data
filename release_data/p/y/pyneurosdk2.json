{
    "1.0.3.0": {
        "info": {
            "author": "Brainbit Inc.",
            "author_email": "support@brainbit.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.com/brainbit-inc/brainbit-sdk",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyneurosdk2",
            "package_url": "https://pypi.org/project/pyneurosdk2/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyneurosdk2/",
            "project_urls": {
                "Homepage": "https://gitlab.com/brainbit-inc/brainbit-sdk"
            },
            "release_url": "https://pypi.org/project/pyneurosdk2/1.0.3.0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Python wrapper for NeuroSDK2",
            "version": "1.0.3.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15880167,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e811ccdf3a85889c96ccd2d982516e1e",
                    "sha256": "4e0ef986761637f14161a90e7ff195ee1507dae80ce2de2dcd5dba2f07542f73"
                },
                "downloads": -1,
                "filename": "pyneurosdk2-1.0.3.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e811ccdf3a85889c96ccd2d982516e1e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 1545115,
                "upload_time": "2022-11-24T14:36:01",
                "upload_time_iso_8601": "2022-11-24T14:36:01.022311Z",
                "url": "https://files.pythonhosted.org/packages/bc/a9/7f58821274e9c3ed5cd761e4e713f346be84573150d3aa6d08c518126071/pyneurosdk2-1.0.3.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.3.0.post1": {
        "info": {
            "author": "Brainbit Inc.",
            "author_email": "support@brainbit.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Python NeuroSDK 2\r\n\r\nWelcome to the Python NeuroSDK 2. The library is intended for python version 3.7 and higher, Windows version 10 and higher.\r\n\r\n## Documentation\r\n\r\n- [Installing](#installing)\r\n- [Description](#description)\r\n- [Searching device](#searching-device)\r\n- [Connection](#connection)\r\n- [Parameters](#paramaters)\r\n- [Receiving signal](#receiving-signal)\r\n- [Clean up](#clean_up)\r\n\r\n## Installing\r\n\r\n```\r\npip install pyneurosdk2\r\n```\r\n\r\n## Description\r\n\r\nThe package has the following structure:\r\n - neurosdk - the main package with the implementation of methods with sample\r\n - libs - contain dll library files\r\n\r\nThe library provides three main modules:\r\n\r\n- scanner - to search for devices\r\n\r\n```python\r\nfrom neurosdk.scanner import Scanner\r\n```\r\n\r\n- sensor - methods of interaction with the device\r\n\r\n```python\r\nfrom neurosdk.sensor import Sensor\r\n```\r\n\r\n- types - implementation of all types of the library, you can either connect everything or only those necessary for a specific task\r\n\r\n```python\r\nfrom neurosdk.cmn_types import *\r\n```\r\n\r\nHere is a description of how to work with a BrainBit device.\r\n\r\n## Searching device\r\n\r\nThe `Scanner` class is used to search for a device. For a correct search, you must specify the list of device types, in this case the list will consist of one type - BrainBit. Instance creation:\r\n\r\n```python\r\nscanner = Scanner([SensorFamily.SensorLEBrainBit])\r\n```\r\n\r\nSearch start:\r\n\r\n```python\r\nscanner.Start()\r\n```\r\n\r\nStop search:\r\n\r\n```python\r\nscanner.Stop()\r\n```\r\n\r\nAll found devices can be obtained using the method:\r\n\r\n```python\r\nsensors = scanner.Sensors()\r\n```\r\n\r\nDuring the search, an `sensorsChanged` callback will be called, which will display a list of found devices. If the device leaves the scanner's field of view for any reason, the device will disappear from the list after 12 seconds.\r\n\r\n```python\r\ndef sensorFound(scanner, sensors):\r\n   for i in range(len(sensors)):\r\n       print('Sensor %s' % sensors[i])\r\n\r\nscanner.sensorsChanged = sensorFound\r\n```\r\n\r\nThe sensor's list will contain records of the SensorInfo type with fields:\r\n\r\n- SensFamily: SensorFamily\r\n- SensModel: int\r\n- Name: str\r\n- Address: str\r\n- SerialNumber: str\r\n- PairingRequired: bool\r\n\r\n## Connection\r\n\r\nNext, you can create any device from the list using the method:\r\n\r\n```python\r\nsensor = scanner.CreateSensor(sensInfo)\r\n```\r\nWhen created, the device will connect automatically. This is a blocking function, so it is desirable to call it from an separate thread. Upon successful connection, a sensor instance will be returned. If unsuccessful, an exception is thrown. On subsequent connections and disconnections, a callback will be called indicating the state of the device.\r\n\r\nTo disconnect from the device, use the following method:\r\n\r\n```python\r\nsensor.Disconnect()\r\n```\r\n\r\nTo connect to a device created but not connected for any reason, the method:\r\n\r\n```python\r\nsensor.Connect()\r\n```\r\n\r\nIt is blocking too.\r\n\r\n## Parameters\r\n\r\nSDK allows you to get information about the connected device:\r\n\r\n```python\r\nprint(sensor.SensFamily) # SensorFamily.SensorLEBrainBit\r\nprint(sensor.Features) # [<SensorFeature.FeatureSignal: 0>, ...]\r\nprint(sensor.Commands) # [<SensorCommand.CommandStartSignal: 0>,...]\r\nprint(sensor.Parameters)\r\nprint(sensor.Name) # BrainBit\r\nprint(sensor.State) # SensorState.StateInRange\r\nprint(sensor.Address) # AA:BB:CC:DD:EE:FF\r\nprint(sensor.SerialNumber) # 123456\r\nprint(sensor.BattPower) # 50\r\nprint(sensor.SamplingFrequency) # SensorSamplingFrequency.FrequencyHz250\r\nprint(sensor.Gain) # SensorGain.SensorGain6\r\nprint(sensor.DataOffset) # SensorDataOffset.DataOffset0\r\nprint(sensor.Version) # SensorVersion(FwMajor=50, FwMinor=0, FwPatch=0, HwMajor=1, HwMinor=0, HwPatch=0, ExtMajor=65)\r\n```\r\n\r\nIf you need to change any property, you first need to check if it is writable. This can be done by reading the list of device parameters, where each parameter will have an access level:\r\n\r\n```\r\n[ParameterInfo(Param=<SensorParameter.ParameterOffset: 8>, ParamAccess=<SensorParamAccess.ParamAccessRead: 0>),  \r\n ParameterInfo(Param=<SensorParameter.ParameterState: 1>,  ParamAccess=<SensorParamAccess.ParamAccessReadNotify: 2>)\r\n ...]\r\n```\r\n\r\nAnd also check the support of certain modules:\r\n\r\n```python\r\nsensor.IsSupportedFeature(sensor_future)\r\nsensor.IsSupportedCommand(sensor_command)\r\nsensor.IsSupportedParameter(sensor_parameter)\r\n```\r\n\r\n## Receiving signal\r\n\r\nYou can start the signal with the following command:\r\n\r\n```python\r\nsensor.ExecCommand(SensorCommand.CommandStartSignal)\r\n```\r\n\r\nStop:\r\n\r\n```python\r\nsensor.ExecCommand(SensorCommand.CommandStopSignal)\r\n```\r\n\r\nYou can get the signal value using the callback:\r\n\r\n```python\r\ndef onBrainBitSignalDataReceived(sensor, data):\r\n   print(data)\r\n\r\nsensor.brainBitSignalDataReceived = onBrainBitSignalDataReceived\r\n```\r\n\r\nAfter you have finished working with the signal, you can unsubscribe from the callback as follows:\r\n\r\n```python\r\nsensor.brainBitSignalDataReceived = None\r\n```\r\n\r\nIt gives a list of packages. Each package contains:\r\n- PackNum: int\r\n- Marker: int\r\n- O1: float\r\n- O2: float\r\n- T3: float\r\n- T4: float\r\n\r\nIt is values from 4 channels in mV, a number for each packet and a marker if it was sent and this feature is supported by the device.\r\n\r\nSimilarly, to get resistance values:\r\n\r\n```python\r\ndef onBrainBitResistDataReceived(sensor, data):\r\n   print(data)\r\n\r\nsensor.brainBitResistDataReceived = onBrainBitResistDataReceived\r\n\r\nsensor.ExecCommand(SensorCommand.CommandStartResist)\r\nsensor.ExecCommand(SensorCommand.CommandStopResist)\r\n```\r\n\r\nThe callback returns one packet of samples, each packet contains the resistance values in mV:\r\n- O1: float\r\n- O2: float\r\n- T3: float\r\n- T4: float\r\n\r\nAfter you have finished working with the resistance, you can unsubscribe from the callback as follows:\r\n\r\n```python\r\nsensor.brainBitResistDataReceived = None\r\n```\r\n\r\n## Clean up\r\n\r\nAfter you finish working with the device, you need to clean up the resources used. This happens in the destructor of the scanner and sensor, so if they were not called by the system, you must call them manually.\r\n\r\n```python\r\ndel sensor\r\ndel scanner\r\n```\r\n\r\n## License\r\n\r\nCopyright (c) Brainbit Inc. All rights reserved.\r\n\r\nLicensed under the [MIT license](LICENSE).\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.com/brainbit-inc/brainbit-sdk",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pyneurosdk2",
            "package_url": "https://pypi.org/project/pyneurosdk2/",
            "platform": null,
            "project_url": "https://pypi.org/project/pyneurosdk2/",
            "project_urls": {
                "Homepage": "https://gitlab.com/brainbit-inc/brainbit-sdk"
            },
            "release_url": "https://pypi.org/project/pyneurosdk2/1.0.3.0.post1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Python wrapper for NeuroSDK2",
            "version": "1.0.3.0.post1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15880167,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1607487adda129954a7c29934666e9ed",
                    "sha256": "7e2147e205aec0f228875cb1ba7d9d4d00bf9a3b3cb1af78073bf6003ed186a8"
                },
                "downloads": -1,
                "filename": "pyneurosdk2-1.0.3.0.post1.tar.gz",
                "has_sig": false,
                "md5_digest": "1607487adda129954a7c29934666e9ed",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 1545123,
                "upload_time": "2022-11-24T15:04:53",
                "upload_time_iso_8601": "2022-11-24T15:04:53.366925Z",
                "url": "https://files.pythonhosted.org/packages/d1/9e/d07cab76bb98b55b4c2d0d160c314bf8aa11d8dce92b777ae24bf1e55baf/pyneurosdk2-1.0.3.0.post1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}