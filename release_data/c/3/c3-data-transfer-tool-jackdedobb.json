{
    "1.0.94": {
        "info": {
            "author": "Jackson DeDobbelaere",
            "author_email": "jackson.dedobbelaere@c3.ai",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# C3 Data Transfer Tool Package\n\n## Summary\nWelcome to the C3 Data Transfer Tool package! Below you will find documentation\\\non how to quickly transfer data between C3 environments.\n\nNote: We have 2 step process for transferring data:\n1. Utilize c3DataTransfer.downloadDataFromC3Env() to extract data from an environment.\n1. Utilize c3DataTransfer.uploadDataToC3Env() to load data into an environment.\n\n## Python Function Documentation\n* c3DataTransfer.parseEnvironmentArguments()\n    * Run python *pyScriptName*.py -h to see a list of parameters to call python script with.\\\n    You must include a call to c3DataTransfer.parseEnvironmentArguments() within script to see -h.\n    * sendDeveloperData = True: send usage statistics to better improve application.\n\n* c3DataTransfer.downloadDataFromC3Env():\n    * environmentArguments: pass in the output from c3DataTransfer.parseEnvironmentArguments().\n    * dataTypeExports: 2d array where first column is string of C3Type and second column\\\n    is boolean dict with the following keys: downloadData, refreshCalcFields, numRecordsPerFile, & filter.\n        * downloadData: upload data for this type to the env.\n        * refreshCalcFields: refresh calc fields for this type on env.\n        * numRecordsPerFile = 2000: number of files to split records into, also the number of map-reduce jobs.\n        * filter = '': filter on C3 type for which records to extract.\n        * include = 'this': include on C3 type for which records to extract. Also, see stripMetadataAndDerived toggle.\n    * dataDownloadFolder: filePath to where to download the exported files to.\n    * errorOutputFolder = dataDownloadFolder + '_Errors': filePath to where refreshCalc errors are stored.\n    * priority = 0: priority of export jobs, import jobs (coming soon), and refreshCalcFields jobs\n    * errorSleepTimeSeconds = 15: time to sleep when request fails before retrying.\n    * refreshPollTimeSeconds = 15: time between refreshCalc status pings.\n    * stripMetadataAndDerived = True: strips out the metadata & derived fields (calcs, fkey, etc.).\n    * masterRefreshDataSwitch = True: has to be true in order to refresh any C3 types.\n    * masterDownloadDataSwitch = True: has to be true in order to download any C3 types.\n    * maxColumnPrintLength = 150: max print length.\n    * promptUsersForWarnings = True: prompt users for warnings for accidental folder removals and resuming of queues.\n    * sendDeveloperData = True: send usage statistics to better improve application.\n\n* c3DataTransfer.uploadDataToC3Env():\n    * environmentArguments: pass in the output from c3DataTransfer.parseEnvironmentArguments().\n    * dataTypeImports: 2d array where first column is string of C3Type and second column\\\n    is boolean dict with the following keys: removeData, uploadData, refreshCalcFields, useSQLOnRemove, & disableDownstreamOnRemove.\n        * removeData: remove current data for this type on env.\n        * uploadData: upload data for this type to the env.\n        * refreshCalcFields: refresh calc fields for this type on env.\n        * useSQLOnRemove = False: if the operation can be handled via multi-row SQL operations, it will.\n        * disableDownstreamOnRemove = False: disables any downstream asynchronous processing that would happen as a result of the operation (e.g. calc fields).\n    * dataUploadFolder: filePath to where dataUploads folder is located.\n    * errorOutputFolder = dataUploadFolder + '_Errors': filePath to where refreshCalc errors are stored.\n    * batchSize = 250: size of batches to upload data.\n    * priority = 0: priority of export jobs, import jobs (coming soon), and refreshCalcFields jobs\n    * errorSleepTimeSeconds = 15: time to sleep when request fails before retrying.\n    * refreshPollTimeSeconds = 15: time between refreshCalc status pings.\n    * masterRemoveDataSwitch = True: has to be true in order to remove any C3 types.\n    * masterUploadDataSwitch = True: has to be true in order to upload any C3 types.\n    * masterRefreshDataSwitch = True: has to be true in order to refresh any C3 types.\n    * maxColumnPrintLength = 150: max print length.\n    * promptUsersForWarnings = True: prompt users for warnings for accidental folder removals and resuming of queues.\n    * sendDeveloperData = True: send usage statistics to better improve application.\n\n* c3DataTransfer.callC3TypeAction() [Helper, Dynamic Filters]\n    * environmentArguments: pass in the output from c3DataTransfer.parseEnvironmentArguments().\n    * c3Type: the C3 type that contains the API.\n    * action: the API off the C3 type to call.\n    * payload: the payload to send with function parameters of the action.\n    * sendDeveloperData = True: send usage statistics to better improve application.\n\n\n## Usage Instructions\n#### Download Procedure\nGenerate a python script that utilizes this library that specifies the types\\\nyou would like to download and the folder location in which to download to.\\\nCall C3DataTransfer.downloadDataToC3Env(). See [Example PY Data Download Script](#example-py-data-upload-script).\n\nRun the script with the proper command line parameters, pointing to the\\\nenvironment in which you wish to download data from. See [Example Command Line Commands](#example-command-line-commands).\n\n#### Upload Procedure\nGenerate a python script that utilizes this libary to specify what data\\\nfrom the folder (that was just migrated to) you would like to upload.\\\nCall c3DataTransfer.uploadDataToC3Env(). See [Example PY Data Upload Script](#example-py-data-upload-script).\n\nRun the script with the proper command line parameters, pointing to the\\\nenvironment in which you wish to upload data to. See [Example Command Line Commands](#example-command-line-commands).\n\n\n## Example Migration\n\n### Example PY Data Download Script\n```\n# clear && python [PY_FILE_PATH] -env [ENVIRONMENT] -tt [TENANT]:[TAG] -up [USER]:[PASS]\n# clear && python [PY_FILE_PATH] -env [ENVIRONMENT] -tt [TENANT]:[TAG] -auth [AUTH_TOKEN]\n\n# pip install c3-data-transfer-tool-jackdedobb\n\nimport json\nimport os\nfrom c3DataMigration import c3DataTransfer\n\n\nif __name__ == '__main__':\n  dataDownloadFolder = '/'.join([os.path.dirname(os.path.abspath(__file__)), 'dataDownloads'])\n  environmentArguments = c3DataTransfer.parseEnvironmentArguments()\n\n  def formatIntersectsFilter (field, arrayValues):\n    arrayValuesString = ','.join('\"{}\"'.format(x) for x in arrayValues)\n    return 'intersects({field}, [{arrayValuesString}])'.format(\n      field=field,\n      arrayValuesString=arrayValuesString\n    )\n\n  consumptionForecastRunIds = [\n    '2021-10-01T00:00:00.000',\n    '2021-11-01T00:00:00.000',\n    '2021-12-01T00:00:00.000',\n    '2022-01-01T00:00:00.000',\n    '2022-02-01T00:00:00.000',\n  ]\n\n  consumptionForecastRunFilter = formatIntersectsFilter('id', consumptionForecastRunIds)\n\n  # Example Static Filter\n  itemFacilityConsumptionForecastFilter = formatIntersectsFilter('run', consumptionForecastRunIds)\n\n  # Example Dynamic Filter\n  itemFacilityConsumptionForecastFetchResult = c3DataTransfer.callC3TypeAction(environmentArguments, 'ItemFacilityConsumptionForecast', 'fetch', {\n    'spec': {\n      'filter': formatIntersectsFilter('run', consumptionForecastRunIds),\n      'include': 'id',\n      'limit':   -1,\n    }\n  })\n  itemFacilityConsumptionForecastFetchResults = json.loads(itemFacilityConsumptionForecastFetchResult.text)\n  itemFacilityConsumptionForecastIds = [x['id'] for x in itemFacilityConsumptionForecastFetchResults['objs']]\n  itemFacilityConsumptionForecastMeasurementFilter = formatIntersectsFilter('forecast', itemFacilityConsumptionForecastIds)\n\n  numRecordsPerFile = 10000\n  dataTypeExports = [\n    ['BusinessChangeRule',                         { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': '1 == 1'                                         }],\n    ['ConsumptionForecastRun',                     { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': consumptionForecastRunFilter                     }],\n    ['ItemFacilityConsumptionForecast',            { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': itemFacilityConsumptionForecastFilter            }],\n    ['ItemFacilityConsumptionForecastMeasurement', { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': itemFacilityConsumptionForecastMeasurementFilter }],\n    ['Item',                                       { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': '1 == 1'                                         }],\n    ['Facility',                                   { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': '1 == 1'                                         }],\n    ['NewCustomerRule',                            { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': '1 == 1'                                         }],\n    ['NonTypicalOrder',                            { 'downloadData': True, 'refreshCalcFields': True, 'numRecordsPerFile': numRecordsPerFile, 'filter': '1 == 1'                                         }],\n  ]\n\n  c3DataTransfer.downloadDataFromC3Env(\n    environmentArguments =     environmentArguments,\n    dataTypeExports =          dataTypeExports,\n    dataDownloadFolder =       dataDownloadFolder,\n    errorOutputFolder =        dataDownloadFolder + '_Errors',\n    priority =                 0,\n    errorSleepTimeSeconds =    5,\n    refreshPollTimeSeconds =   1,\n    stripMetadataAndDerived =  True,\n    masterRefreshDataSwitch =  True,\n    masterDownloadDataSwitch = True,\n  )\n```\n\n### Example PY Data Upload Script\n```\n# clear && python [PY_FILE_PATH] -env [ENVIRONMENT] -tt [TENANT]:[TAG] -up [USER]:[PASS]\n# clear && python [PY_FILE_PATH] -env [ENVIRONMENT] -tt [TENANT]:[TAG] -auth [AUTH_TOKEN]\n\n# pip install c3-data-transfer-tool-jackdedobb\n\nimport os\nfrom c3DataMigration import c3DataTransfer\n\n\nif __name__ == '__main__':\n  dataUploadFolder = '/'.join([os.path.dirname(os.path.abspath(__file__)), 'dataUploads'])\n  environmentArguments = c3DataTransfer.parseEnvironmentArguments()\n\n  dataTypeImports = [\n    ['BusinessChangeRule',     { 'removeData': True,  'uploadData': True,  'refreshCalcFields': True, 'useSQLOnRemove': True, 'disableDownstreamOnRemove': True }],\n    ['ConsumptionForecastRun', { 'removeData': True,  'uploadData': True,  'refreshCalcFields': True, 'useSQLOnRemove': True, 'disableDownstreamOnRemove': True }],\n    ['Item',                   { 'removeData': True,  'uploadData': True,  'refreshCalcFields': True, 'useSQLOnRemove': True, 'disableDownstreamOnRemove': True }],\n    ['Facility',               { 'removeData': True,  'uploadData': True,  'refreshCalcFields': True, 'useSQLOnRemove': True, 'disableDownstreamOnRemove': True }],\n    ['NewCustomerRule',        { 'removeData': True,  'uploadData': True,  'refreshCalcFields': True, 'useSQLOnRemove': True, 'disableDownstreamOnRemove': True }],\n    ['NonTypicalOrder',        { 'removeData': True,  'uploadData': True,  'refreshCalcFields': True, 'useSQLOnRemove': True, 'disableDownstreamOnRemove': True }],\n  ]\n\n  c3DataTransfer.uploadDataToC3Env(\n    environmentArguments =    environmentArguments,\n    dataTypeImports =         dataTypeImports,\n    dataUploadFolder =        dataUploadFolder,\n    errorOutputFolder =       dataUploadFolder + '_Errors',\n    batchSize =               200,\n    priority =                0,\n    errorSleepTimeSeconds =   5,\n    refreshPollTimeSeconds =  1,\n    masterRemoveDataSwitch =  True,\n    masterUploadDataSwitch =  True,\n    masterRefreshDataSwitch = True,\n  )\n```\n\n### Example Command Line Commands\n```\nclear && python [PY_FILE_PATH] -env [ENVIRONMENT] -tt [TENANT]:[TAG] -up [USER]:[PASS]\nclear && python [PY_FILE_PATH] -env [ENVIRONMENT] -tt [TENANT]:[TAG] -auth [AUTH_TOKEN]\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/c3-e/c3open/tools/jack-transfer-tool",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "c3-data-transfer-tool-jackdedobb",
            "package_url": "https://pypi.org/project/c3-data-transfer-tool-jackdedobb/",
            "platform": null,
            "project_url": "https://pypi.org/project/c3-data-transfer-tool-jackdedobb/",
            "project_urls": {
                "Homepage": "https://github.com/c3-e/c3open/tools/jack-transfer-tool"
            },
            "release_url": "https://pypi.org/project/c3-data-transfer-tool-jackdedobb/1.0.94/",
            "requires_dist": [
                "progress",
                "pytz",
                "reprint",
                "requests"
            ],
            "requires_python": ">=3.6",
            "summary": "Tool to help extracting and uploading data to C3 environments.",
            "version": "1.0.94",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15934339,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "1fb954150da541751f2a695ce84fd69e",
                    "sha256": "6da73a1fa4f6db0ef56bba0e3bc36ae84a01a24ae613e8705b828e56ef6477b4"
                },
                "downloads": -1,
                "filename": "c3_data_transfer_tool_jackdedobb-1.0.94-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "1fb954150da541751f2a695ce84fd69e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 37324,
                "upload_time": "2022-11-17T23:34:32",
                "upload_time_iso_8601": "2022-11-17T23:34:32.824679Z",
                "url": "https://files.pythonhosted.org/packages/8d/43/bb4007c2ebeb700244236eddb143c200c63d5e15e08c9947d418edc1a38d/c3_data_transfer_tool_jackdedobb-1.0.94-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "57ab55a1c7c2f425e3a88f158452aef2",
                    "sha256": "b112d1087d9fcc6506b687fcddf93d3e64ac6d7f5eb31c4a3197f68aacef7a26"
                },
                "downloads": -1,
                "filename": "c3-data-transfer-tool-jackdedobb-1.0.94.tar.gz",
                "has_sig": false,
                "md5_digest": "57ab55a1c7c2f425e3a88f158452aef2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 31907,
                "upload_time": "2022-11-17T23:34:34",
                "upload_time_iso_8601": "2022-11-17T23:34:34.789107Z",
                "url": "https://files.pythonhosted.org/packages/8d/20/24c6c6f7eae7d4de1a2ae534a72d6a8e84313033b245b8503ef9cd5ba3d7/c3-data-transfer-tool-jackdedobb-1.0.94.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}