{
    "1.0.0a2": {
        "info": {
            "author": "Isak Paulo de Andrade Ruas",
            "author_email": "isakruas@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 1 - Planning",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3.10",
                "Topic :: Internet :: WWW/HTTP",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Software Development :: Build Tools",
                "Topic :: Software Development :: Libraries :: Application Frameworks",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "### *Integra\u00e7\u00e3o do n\u00facleo Ripda*\n\n[![Documentation Status](https://readthedocs.org/projects/ripda/badge/?version=latest)](https://ripda.readthedocs.io/en/latest/?badge=latest)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/isakruas/ecutils.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/isakruas/ripda/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/isakruas/ripda.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/isakruas/ripda/alerts/)\n[![Latest Version](https://img.shields.io/pypi/v/ripda.svg?style=flat)](https://pypi.python.org/pypi/ripda/)\n\n> *Ripda* \u00e9 um mini *framework* que visa facilitar a implementa\u00e7\u00e3o de qualquer sistema baseado em blockchain.\n\nIntrodu\u00e7\u00e3o\n==========\n\nO qu\u00e3o f\u00e1cil pode ser implementar um sistema baseado em blockchain?\n\nQuando me propus a desenvolver este mini framework, estava buscando uma maneira simples e r\u00e1pida de implementar uma solu\u00e7\u00e3o baseada em blockchain, que fosse o mais personaliz\u00e1vel poss\u00edvel, e que fosse em uma linguagem  de programa\u00e7\u00e3o flex\u00edvel.\n\nA ideia inicial era criar a estrutura base de uma criptomoeda, inteiramente com Python, mas no decorrer da estrutura\u00e7\u00e3o, percebi que poderia estender este projeto para qualquer sistema que necessite de salvar dados em uma estrutura de blockchain.\n\nVoc\u00ea ir\u00e1 notar que parte da estrutura da Ripda segue o princ\u00edpio de algumas criptomoedas, como a necessidade de minera\u00e7\u00e3o dos dados para salv\u00e1-los em uma cadeia de blocos, transa\u00e7\u00f5es, etc. Uma das grandes diferen\u00e7as \u00e9 que aqui, voc\u00ea tem total controle sobre o qu\u00e3o dif\u00edcil pode ser este processo de organiza\u00e7\u00e3o dos dados.\n\nPor debaixo dos panos, Ripda utiliza o FastAPI para servir os dados de maneira mais perform\u00e1tica poss\u00edvel, e fornece uma estrutura para que facilmente, voc\u00ea possa estender a estrutura do mini framework e adicionar mais funcionalidades.\n\nApesar de utilizar o FastAPI para servir os dados, voc\u00ea notar\u00e1 que grande parte da estrutura\u00e7\u00e3o dos comandos, s\u00e3o inspirados no Django. Trabalhei com Djando por muitos anos, e gosto da maneira em que s\u00e3o utilizados os comandos no terminal, me inspirei grande parte na estrutura do Django para montar a forma como s\u00e3o organizados os comandos por aqui.\n\nRespondendo a pergunta inicial: f\u00e1cil, muito f\u00e1cil utilizando Ripda.\n\n\nConfigura\u00e7\u00f5es\n=============\n\n\nComo configurar um aplicativo na utilizando a estrutura do Ripda?\n\n\nO aplicativo Ripda modelo possui quatro arquivos, ``manage.py`` que \u00e9 utilizado para execu\u00e7\u00e3o dos comandos principais, ``models.py`` no qual voc\u00ea pode definir novos modelos a serem criados no banco de dados, para extender a aplica\u00e7\u00e3o, ``urls.py``, que voc\u00ea pode utilizar para criar novas rotas ou adicionar novos protocolos as rotas j\u00e1 existentes e ``settings.py`` que voc\u00ea definirar todas as configura\u00e7\u00f5es a serem usadas pela aplica\u00e7\u00e3o.\n\n``models.py``\n\n    from sqlmodel import Field, SQLModel\n\n    \"\"\"\n    crie seus modelos aqui\n    \"\"\"\n\n``urls.py``\n\n    from ripda import __version__\n    from ripda.core.management.commands.runserver import app\n\n    from models import *\n\n    \"\"\"\n    crie suas rotas aqui\n    \"\"\"\n\n\n    @app.get('/')\n    async def root():\n        return {\n            'ripda': __version__\n        }\n\n\n``settings.py``\n\n    import pathlib\n\n    HANDLER_MODULE: str = 'urls'\n\n    MODELER_MODULE: str = 'models'\n\n    # Diret\u00f3rio raiz do projeto\n    BASE_DIR = pathlib.Path(__file__).parent.parent.resolve()\n\n    # N\u00f3 em que a carteira ser\u00e1 servida\n    NODE_HOST: str = 'localhost'\n    NODE_PORT: int = 1050\n\n    # Dificuldade em encontrar um hash; \u00e9 medido pela quantidade de zeros no in\u00edcio do hash.\n    HASH_DIFFICULTY: int = 4\n\n    # Valor inicial padr\u00e3o de nonce para testar\n    MINER_NONCE_START: float = 0.0\n\n    # Valor final padr\u00e3o de nonce para testar\n    MINER_NONCE_STOP: float = 100.0\n\n    # Varia\u00e7\u00e3o num\u00e9rica entre nonces\n    MINER_NONCE_STEP: float = 0.001\n\n    # PostgreSQL\n    ENGINE_HOST: str = str()\n    ENGINE_PORT: int = int()\n    ENGINE_USER: str = str()\n    ENGINE_PASSWORD: str = str()\n    ENGINE_DB: str = 'ripda'\n\n\n``manage.py``\n\n    import os\n    import sys\n\n\n    def main():\n        os.environ.setdefault('RIPDA_SETTINGS_MODULE', 'settings')\n        try:\n            from ripda.core.management import execute_from_command_line\n        except ImportError as exc:\n            raise ImportError(\n                \"Couldn't import Ripda\"\n            ) from exc\n        execute_from_command_line(sys.argv)\n\n\n    if __name__ == '__main__':\n        main()\n\n\nSalvos estes arquivos dentro de um m\u00f3dulo Python, voc\u00ea ter\u00e1 \u00e0 sua disposi\u00e7\u00e3o toda estrutura blockchain montada, ponta para utiliza\u00e7\u00e3o.\n\nComandos\n========\n\nS\u00e3o no total quatro comandos principais para se iniciar a aplica\u00e7\u00e3o, o primeiro \u00e9 o ``migrate``, este comando ir\u00e1 criar todas as tabelas necess\u00e1rias para funcionamento da Ripda em seu banco de dados. Aten\u00e7\u00e3o, este comando ir\u00e1 apagar todas as tabelas e dados caso j\u00e1 existam no banco de dados.\n\n    python manage.py runserver\n\nO segundo comando \u00e9 o ``populate``, este comando \u00e9 utilizado quando se deseja popular o banco de dados com algumas transa\u00e7\u00f5es faker para testar ou validar alguma nova funcionalidade. Ser\u00e3o criadas no total 1000 transa\u00e7\u00f5es no banco, com dados quase aleat\u00f3rios, para que voc\u00ea possa utilizar.\n\n    python manage.py populate\n\nO terceiro comando \u00e9 o ``miner``, este comando, ao contr\u00e1rio dos anteriores, requer a passagem de um argumento adicional, o ``maker``. Como o nome sugere, este comando \u00e9 o respons\u00e1vel pela minera\u00e7\u00e3o dos dados, ou seja, sua organiza\u00e7\u00e3o em uma estrutura de blockchain.\n\n    python manage.py miner maker 1fd840bb7bad535ba1e8f587b41e5b27\n\nO \u00faltimo comando \u00e9 o ``runserver``, este comando \u00e9 respons\u00e1vel por servir os endpoints publicamente. S\u00e3o criados dois depois, ``\\blocks`` e ``\\transactions`` , no qual ``transactions`` aceita os protocolos ``GET`` e ``POST`` e ``blocks`` somente ``GET``.\n\n    python manage.py runserver\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/isakruas/ripda",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ripda",
            "package_url": "https://pypi.org/project/ripda/",
            "platform": null,
            "project_url": "https://pypi.org/project/ripda/",
            "project_urls": {
                "Bug Reports": "https://github.com/isakruas/ripda/issues",
                "Documentation": "https://ripda.readthedocs.io/en/latest/",
                "Homepage": "https://github.com/isakruas/ripda",
                "Source": "https://github.com/isakruas/ripda/"
            },
            "release_url": "https://pypi.org/project/ripda/1.0.0a2/",
            "requires_dist": [
                "ecutils",
                "fastapi",
                "uvicorn[standard]",
                "sqlmodel",
                "tqdm",
                "asyncpg"
            ],
            "requires_python": ">=3.10",
            "summary": "Ripda Core integration",
            "version": "1.0.0a2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13584236,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "df5c7ed53439e8b598e41978315562f0",
                    "sha256": "2de0378b498680ebd91b4fd5b2f813fa6a883fda22f60943b3e37250745fda83"
                },
                "downloads": -1,
                "filename": "ripda-1.0.0a2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "df5c7ed53439e8b598e41978315562f0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 19794,
                "upload_time": "2022-04-21T22:24:54",
                "upload_time_iso_8601": "2022-04-21T22:24:54.708209Z",
                "url": "https://files.pythonhosted.org/packages/40/90/dc99b5124e0829f13421932d83fde287067463aea9d5c8bb1b0652595b62/ripda-1.0.0a2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a925f5f4b636c06df065d39402ca7df3",
                    "sha256": "e6bc7035cfe54945c843c6937070a4a615ba305d078a452d2fb98ce7771e6b59"
                },
                "downloads": -1,
                "filename": "ripda-1.0.0a2.tar.gz",
                "has_sig": false,
                "md5_digest": "a925f5f4b636c06df065d39402ca7df3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 15576,
                "upload_time": "2022-04-21T22:24:56",
                "upload_time_iso_8601": "2022-04-21T22:24:56.008422Z",
                "url": "https://files.pythonhosted.org/packages/af/23/c91f3218384bd172a17d90a54a24f7cf20cdb9062b88bb0c290c0881d96d/ripda-1.0.0a2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}