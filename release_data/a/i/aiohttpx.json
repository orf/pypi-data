{
    "0.0.1": {
        "info": {
            "author": "Tri Songz",
            "author_email": "ts@growthengineai.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3.7",
                "Topic :: Software Development :: Libraries"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/GrowthEngineAI/aiohttpx",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiohttpx",
            "package_url": "https://pypi.org/project/aiohttpx/",
            "platform": null,
            "project_url": "https://pypi.org/project/aiohttpx/",
            "project_urls": {
                "Homepage": "https://github.com/GrowthEngineAI/aiohttpx"
            },
            "release_url": "https://pypi.org/project/aiohttpx/0.0.1/",
            "requires_dist": [
                "httpx",
                "pydantic",
                "lazyops (>=0.2.0)"
            ],
            "requires_python": "",
            "summary": "A Python Wrapper for httpx that combines the httpx.AsyncClient with the httpx.Client to allow both async and sync requests",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16082473,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "08260468beeb86c2361af1defa24f6c4",
                    "sha256": "f88bbb71344ccabcaac2132ac0426fd5f26a1990adfb3a1d4de0b198eb384420"
                },
                "downloads": -1,
                "filename": "aiohttpx-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "08260468beeb86c2361af1defa24f6c4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 17736,
                "upload_time": "2022-12-12T23:39:27",
                "upload_time_iso_8601": "2022-12-12T23:39:27.708949Z",
                "url": "https://files.pythonhosted.org/packages/b7/5e/d54dc62e16f5d5a084cc7535c20d002289ed1a5e322d91c5c54a0f1120e5/aiohttpx-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "c9d546056cb9d9938bf8fffd658c3c30",
                    "sha256": "b793e32d8253cdf81c722d299a80bb79d0f6c5ddca1f0f599887a1f365bbc1a3"
                },
                "downloads": -1,
                "filename": "aiohttpx-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "c9d546056cb9d9938bf8fffd658c3c30",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 15906,
                "upload_time": "2022-12-12T23:39:30",
                "upload_time_iso_8601": "2022-12-12T23:39:30.158047Z",
                "url": "https://files.pythonhosted.org/packages/22/99/34f30c39f4298a656810d43902a2d7b185398dea3bed1ffcf1b764708d1c/aiohttpx-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "Tri Songz",
            "author_email": "ts@growthengineai.com",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3.7",
                "Topic :: Software Development :: Libraries"
            ],
            "description": "# aiohttpx\n A Python Wrapper for httpx that combines the httpx.AsyncClient with the httpx.Client to allow both async and sync requests\n \n **Latest Version**: [![PyPI version](https://badge.fury.io/py/aiohttpx.svg)](https://badge.fury.io/py/aiohttpx)\n\n---\n\n### Installation\n\n```bash\n# Install from pypi\npip install --upgrade aiohttpx\n\n# Install from Github\npip install --upgrade git+https://github.com/trisongz/aiohttpx\n\n```\n\n---\n\n## Usage\n\n`aiohttpx` is a wrapper around `httpx` that provides a unified `async` + `sync` interface for making HTTP requests. This is useful for making HTTP requests in both `async` and `sync` codebases. \n\nAdditionally, it includes a `ProxyClient` that can be used for scraping / high volume requests that would otherwise be blocked by the target server by using a rotating proxy pool through `AWS API Gateway`.\n\n```python\n\nimport asyncio\n\nimport aiohttpx\n\nasync def test_requests():\n    # Notice it utilizes async context manager but can use sync methods.\n\n    async with aiohttpx.Client() as client:\n        # Make an Async GET request\n        response = await client.async_get(\"https://httpbin.org/get\")\n        print(response.json())\n\n        # Make a Sync GET request\n        response = client.get(\"https://httpbin.org/get\")\n        print(response.json())\n    \n    # The same applies with the sync context manager\n    with aiohttpx.Client() as client:\n        # Make an Async GET request\n        response = await client.async_get(\"https://httpbin.org/get\")\n        print(response.json())\n\n        # Make a Sync GET request\n        response = client.get(\"https://httpbin.org/get\")\n        print(response.json())\n\n\nasync def test_proxies():\n    # Here we will test the ProxyClient\n    # some magic/notes:\n    \n    # there is a wrapper for BeautifulSoup that is enabled for GET \n    # requests. This can be triggered by passing `soup_enabled=True` \n    # to the request method.\n    \n    # the ProxyClient will automatically terminate the api gateways upon \n    # exit from the context manager in both sync and async.\n\n    # however if no context manager is used, then the ProxyClient will \n    # need to be manually terminated by calling \n    # `client.shutdown()` | `await client.async_shutdown()`\n\n    # You can choose to perserve the api gateways by passing \n    # `reuse_gateways=True` to the ProxyClient constructor. \n    # This is useful if you want to reuse the same api gateways \n    # for multiple requests.\n\n    # You can also increase the number of gateways per region to \n    # increase the number of concurrent requests. This can be done by \n    # passing `gateways_per_region=10` to the ProxyClient constructor.\n\n    # by default the ProxyClient will use the `us-east-1` region. \n    # You can change this by passing `regions=[\"us-west-2\"]` or \n    # `regions=\"us\"` for all us regions to the ProxyClient constructor.\n\n\n    base_url = \"https://www.google.com\"\n\n    async with aiohttpx.ProxyClient(base_url = base_url) as client:\n        # Make an Async GET request\n        response = await client.async_get(\n            \"/search\", \n            params = {\"q\": \"httpx\"},\n            soup_enabled = True\n        )\n        print(response.soup)\n        print(response.soup.title.text)\n\n        # Make a Sync GET request\n        response = client.get(\n            \"/search\", \n            params = {\"q\": \"httpx\"},\n            soup_enabled = True\n        )\n        print(response.soup)\n        print(response.soup.title.text)\n    \n    # Upon exiting the context manager, the api gateways will be terminated.\n\n\nasync def run_tests():\n    await asyncio.gather(\n        test_requests(),\n        test_proxies()\n    )\n\nasyncio.run(run_tests())\n\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/GrowthEngineAI/aiohttpx",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiohttpx",
            "package_url": "https://pypi.org/project/aiohttpx/",
            "platform": null,
            "project_url": "https://pypi.org/project/aiohttpx/",
            "project_urls": {
                "Homepage": "https://github.com/GrowthEngineAI/aiohttpx"
            },
            "release_url": "https://pypi.org/project/aiohttpx/0.0.2/",
            "requires_dist": [
                "httpx",
                "pydantic",
                "lazyops (>=0.2.0)"
            ],
            "requires_python": "",
            "summary": "A Python Wrapper for httpx that combines the httpx.AsyncClient with the httpx.Client to allow both async and sync requests",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16082473,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6f301c99fdce1db77cc9409a686a9b6b",
                    "sha256": "df28eb0ddcba17a148e02a5cf33e1f3c741351391b9085a767057fbf1067f4c4"
                },
                "downloads": -1,
                "filename": "aiohttpx-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6f301c99fdce1db77cc9409a686a9b6b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 18351,
                "upload_time": "2022-12-13T05:36:14",
                "upload_time_iso_8601": "2022-12-13T05:36:14.472926Z",
                "url": "https://files.pythonhosted.org/packages/72/0a/81ce51d5a6d638c47f3898047e5185d75f114a3d30b75235d8e3d6768d02/aiohttpx-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7fe1fb74021d4a034d601ed53d660687",
                    "sha256": "07d42bed395b3cb66739db46c199d56fa10669e2a09f5814556a6810e4f8b36b"
                },
                "downloads": -1,
                "filename": "aiohttpx-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "7fe1fb74021d4a034d601ed53d660687",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16525,
                "upload_time": "2022-12-13T05:36:15",
                "upload_time_iso_8601": "2022-12-13T05:36:15.913144Z",
                "url": "https://files.pythonhosted.org/packages/62/a0/173305a1bf4fa31b9a682804436b9bb4379f0599d692de81bcfdcae0acf7/aiohttpx-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}