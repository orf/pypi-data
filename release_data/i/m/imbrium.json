{
    "0.1.1": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.1/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fc4bfed20c2868cd2569ff1e29d68b85",
                    "sha256": "283a429b6c6f147e3cf9ff6537894d17821b6cd07c868d34bf20eb1f598a6a61"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fc4bfed20c2868cd2569ff1e29d68b85",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 22525,
                "upload_time": "2022-07-03T00:46:56",
                "upload_time_iso_8601": "2022-07-03T00:46:56.495578Z",
                "url": "https://files.pythonhosted.org/packages/8c/a9/e9fe69f19d1c22a7211abcb7ce08e9ee58838db71bf894b070b3e18b3140/Imbrium-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a80f3ba66f1f72d692b07d071bf0c747",
                    "sha256": "cdeaf9df5be89a2c49eebe545485ad04566b51496d20d16d7ac2d08065d8c5bb"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a80f3ba66f1f72d692b07d071bf0c747",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12526,
                "upload_time": "2022-07-03T00:46:58",
                "upload_time_iso_8601": "2022-07-03T00:46:58.995751Z",
                "url": "https://files.pythonhosted.org/packages/d9/99/6d2933e3c3500eb2eff53785168d1d263f5b8990913d1fa65637714a7d1f/Imbrium-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.2": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.2/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a2bf500092e1f8876637a7137c108354",
                    "sha256": "206e81ca66a378edb01ed198373fcd03f5b0558f41e4899a32b694de99663483"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a2bf500092e1f8876637a7137c108354",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 22791,
                "upload_time": "2022-07-07T22:14:27",
                "upload_time_iso_8601": "2022-07-07T22:14:27.138245Z",
                "url": "https://files.pythonhosted.org/packages/ac/22/171c3c27ce0e8dd9f9ca96f685f3ab34ab4365450b0d9e2f754d26c70acd/Imbrium-0.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8285de4715efbd29b61ba608dac2de8a",
                    "sha256": "55a880049b9ff5ba85e26e060553871f084f2c0c6a41fd7bb541724db3b686bc"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "8285de4715efbd29b61ba608dac2de8a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 12821,
                "upload_time": "2022-07-07T22:14:28",
                "upload_time_iso_8601": "2022-07-07T22:14:28.803444Z",
                "url": "https://files.pythonhosted.org/packages/7d/cf/d1a3f36351066224769cda805290810481172c40a320489e872d2af52b32/Imbrium-0.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.3": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.3/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0a99d59834b9623edadfdab04a81df3b",
                    "sha256": "edacd0349070b90108e230d96175f989f593cc4a6e5f629d9782b2e335a499af"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0a99d59834b9623edadfdab04a81df3b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 24465,
                "upload_time": "2022-07-12T11:51:39",
                "upload_time_iso_8601": "2022-07-12T11:51:39.072077Z",
                "url": "https://files.pythonhosted.org/packages/7f/12/35c2f70411bd53ea46ccadaccc56f12b5bc240c0d5f0b276141eb1f5e193/Imbrium-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "de9127235a75fce71c2648135b8b205f",
                    "sha256": "bb17cbae6cb613a72dfc89cf06632d965ed7874958dff1fe1083ec10ae8856a7"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "de9127235a75fce71c2648135b8b205f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 14237,
                "upload_time": "2022-07-12T11:51:41",
                "upload_time_iso_8601": "2022-07-12T11:51:41.264843Z",
                "url": "https://files.pythonhosted.org/packages/67/be/9508a559c447961815c6fe8798792950a50b1cb85cadf7bf1f8d892f31ac/Imbrium-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.4": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.4/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a5c9503ec886e047482e5c504c0c16fc",
                    "sha256": "611f7ab0cfe252af521bfcba46fdf59f81205bb7f650004de281ff7553b7b2c3"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a5c9503ec886e047482e5c504c0c16fc",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 25345,
                "upload_time": "2022-07-22T22:54:58",
                "upload_time_iso_8601": "2022-07-22T22:54:58.280752Z",
                "url": "https://files.pythonhosted.org/packages/22/0c/ca5295040a28c6ee2a599ac2d2cf73f17a54e57d27ff98046e677bd4acfa/Imbrium-0.1.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "d112a500a4b1539c7a8b579fb5af0dbb",
                    "sha256": "c9377e5dc8245b2e34d695f2a6ff91bbe697dc805ec8f16f8725e610a7a09f0f"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.4.tar.gz",
                "has_sig": false,
                "md5_digest": "d112a500a4b1539c7a8b579fb5af0dbb",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 16745,
                "upload_time": "2022-07-22T22:55:01",
                "upload_time_iso_8601": "2022-07-22T22:55:01.392081Z",
                "url": "https://files.pythonhosted.org/packages/c3/eb/d2481927714e3d996530d5980db5f343310c12afae56b361f11d799ac0a8/Imbrium-0.1.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.5": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.5/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b10d6381841af02d0899ee878eb0c9a1",
                    "sha256": "19578696854f414bfac611802370484fe81924bb4d53ad5a774b115bfda563b3"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "b10d6381841af02d0899ee878eb0c9a1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 27728,
                "upload_time": "2022-07-31T00:33:04",
                "upload_time_iso_8601": "2022-07-31T00:33:04.337414Z",
                "url": "https://files.pythonhosted.org/packages/10/c0/dd23d2de5811006e5def426882d681c01802ece3ed6bd26c016cab8543c6/Imbrium-0.1.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0a70a0e0cab34c4cc6cefb2b28d783e8",
                    "sha256": "e80325d7bf4efd6fa3909c9d4482f71ab51ed12d021121796a5cfc9129afb28a"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.5.tar.gz",
                "has_sig": false,
                "md5_digest": "0a70a0e0cab34c4cc6cefb2b28d783e8",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 24902,
                "upload_time": "2022-07-31T00:33:07",
                "upload_time_iso_8601": "2022-07-31T00:33:07.312891Z",
                "url": "https://files.pythonhosted.org/packages/10/9a/7069e25220a0c4abec2e3f6b31eabb05053cb2fc18668c99fd5a3655f9b1/Imbrium-0.1.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.6": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.6/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "81c2f2c8266d94e3a5b09b0d759674ab",
                    "sha256": "7cfaab58438c7bcb3369330b92da1fce78776af7497d8893da4b92a20d24f704"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "81c2f2c8266d94e3a5b09b0d759674ab",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 27932,
                "upload_time": "2022-08-02T23:01:10",
                "upload_time_iso_8601": "2022-08-02T23:01:10.352305Z",
                "url": "https://files.pythonhosted.org/packages/33/e4/d7e693d3ac7867334ed869c98028c820d985afc01fd681c3dd36e400a039/Imbrium-0.1.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b058189dc880087e5e25c07f5d21f3a",
                    "sha256": "f7c8f356a261b399d09177ccb82cd680224f244388c223f489608d5e06f409da"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.6.tar.gz",
                "has_sig": false,
                "md5_digest": "9b058189dc880087e5e25c07f5d21f3a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 21681,
                "upload_time": "2022-08-02T23:01:12",
                "upload_time_iso_8601": "2022-08-02T23:01:12.862748Z",
                "url": "https://files.pythonhosted.org/packages/be/ca/038e45dc3594f422c7e26ee0aa086c3afb3ee589b14aa3937e183dd7dad2/Imbrium-0.1.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.7": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.7/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "abe87b14c7debb59fdaff20d7e933299",
                    "sha256": "89aa7c9df6ab61f174912797c725d065574a29cf71bdef4f1e33a343efff27ec"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "abe87b14c7debb59fdaff20d7e933299",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 27809,
                "upload_time": "2022-09-19T18:49:55",
                "upload_time_iso_8601": "2022-09-19T18:49:55.383930Z",
                "url": "https://files.pythonhosted.org/packages/40/59/4e017a00db2d1f3cb792451998d5b39db8806552ba16c277b64bcd2cdc25/Imbrium-0.1.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "012d93ef2aee3e60d266e1e6584a4583",
                    "sha256": "1fce9ba4cb31a8d071638eed0fc263929e12a758bac66a033b0cd66a648da097"
                },
                "downloads": -1,
                "filename": "Imbrium-0.1.7.tar.gz",
                "has_sig": false,
                "md5_digest": "012d93ef2aee3e60d266e1e6584a4583",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 21002,
                "upload_time": "2022-09-19T18:49:58",
                "upload_time_iso_8601": "2022-09-19T18:49:58.995464Z",
                "url": "https://files.pythonhosted.org/packages/4a/33/82befd777c06ee6f89611cb0df8e5ee32142bae6a0d77efa741f7a48622f/Imbrium-0.1.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.8": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/0.1.8/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "0.1.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "61c1443367468c1b2147e96d87587b37",
                    "sha256": "6091228e436eb15ace394aba1f7671f429e7c4813f312f0b036e48cc7cfecb71"
                },
                "downloads": -1,
                "filename": "imbrium-0.1.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "61c1443367468c1b2147e96d87587b37",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 25810,
                "upload_time": "2022-09-25T23:17:51",
                "upload_time_iso_8601": "2022-09-25T23:17:51.412196Z",
                "url": "https://files.pythonhosted.org/packages/7f/61/4e3f437105c08af5e9e8adf25be606154ea00e72a6b3cb6c72d5b0fe1615/imbrium-0.1.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "073ac603ae677468dd79abcda0512a4e",
                    "sha256": "246e72999294bd1f33b19fb3a6ff14ac56144d07491c3a4ad34c71975e2c6a71"
                },
                "downloads": -1,
                "filename": "imbrium-0.1.8.tar.gz",
                "has_sig": false,
                "md5_digest": "073ac603ae677468dd79abcda0512a4e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 21416,
                "upload_time": "2022-09-25T23:17:54",
                "upload_time_iso_8601": "2022-09-25T23:17:54.039401Z",
                "url": "https://files.pythonhosted.org/packages/58/a6/4633943f4f863d1cbf2fbc636acb4ac7aa9f77a627fa85895dd70aba4ce0/imbrium-0.1.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0": {
        "info": {
            "author": "Maximilian Mekiska",
            "author_email": "maxmekiska@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: Microsoft :: Windows",
                "Programming Language :: Python :: 3.7",
                "Topic :: Scientific/Engineering :: Artificial Intelligence"
            ],
            "description": "# imbrium\n\n\n## Pip install\n\n```shell\npip install imbrium\n```\n\nStandard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step\nTime Series Forecasting.\n\n\n                      \u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\n                      \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\n                      \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\n                      \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\n                      \u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\n                      \u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\n\n\n\n## About imbrium\n\nThe objective of this library is to become a repository of deep learning architectures\nwhich specialize in time series forecasting. The main focus lies on making the process of creating and applying deep\nlearning architectures user friendly. Ideally, complex architectures can be created without the user needing to\nbuild any part of the architecture from scratch. From a user perspective the focus will shift from architecture building to\nsolely high level, low-code architecture configuration.\n\n## Contribute\n\nFeel free to contribute to imbrium. Any contributions are most welcome. Especially new contributed architectures will\nhelp imbrium to achieve its objectives more quickly. Imbrium does not only need to be based on Keras but could\nfurther be extended to Pytorch or any other machine learning framework.\n\nRecently, graph based neural networks have shown great promise when applied to time series forecasting tasks.\nIf you are familiar with graph based neural network time series forecasting, please feel free to contribute such architectures to imbrium.\n\n\n## imbrium 1.0.0 changes\n\nThe follwoing important name changes have been performed:\n\n```\n- univarstandard => univarpure\n- BasicMultStepUniVar => PureUni\n- univarhybrid => univarhybrid (unchanged)\n- HybridMultStepUniVar => HybridUni\n- multivarstandard => multivarpure\n- BasicMultSTepMultVar => PureMulti\n- multivarhybrid => multivarhybrid (unchanged)\n- HybridMultStepMultVar => HybridMulti\n```\n\n## Try imbrium\n\nPlease ignore all cudart dlerror/warnings, since no GPU is setup in this jupyter binder environment:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/maxmekiska/ImbriumTesting-Demo/main?labpath=TestImbrium.ipynb) <br>\n\n\nFor more testing, please visit the dedicated Demo & Testing repository at: https://github.com/maxmekiska/ImbriumTesting-Demo\n\n## Basics\n\nThis library aims to ease the application of deep learning models for time\nseries forecasting. Multiple architectures are offered with a fixed\nnumber of layers however the user has full control over the number of neurons\nper layer, activation function type, loss function type, optimizer type and\nmetrics applied.\n\n\nThe library differentiates between two\nmodes:\n\n1. Univariate-Multistep forecasting\n2. Multivariate-Multistep forecasting\n\nThese two main modes are further divided based on the complexity of the underlying model architectures:\n\n1. Pure\n2. Hybrid\n\nPure supports the following architectures:\n\n- Multilayer perceptron (MLP)\n- Recurrent neural network (RNN)\n- Long short-term memory (LSTM)\n- Gated recurrent unit (GRU)\n- Convolutional neural network (CNN)\n- Bidirectional recurrent neural network (BI-RNN)\n- Bidirectional long-short term memory (BI-LSTM)\n- Bidirectional gated recurrent unit (BI-GRU)\n- Encoder-Decoder recurrent neural network\n- Encoder-Decoder long-short term memory\n- Encoder-Decoder convolutional neural network (Encoding via CNN, Decoding via GRU)\n- Encoder-Decoder gated recurrent unit\n\nHybrid supports:\n\n- Convolutional neural network + recurrent neural network (CNN-RNN)\n- Convolutional neural network + Long short-term memory (CNN-LSTM)\n- Convolutional neural network + Gated recurrent unit (CNN-GRU)\n- Convolutional neural network + Bidirectional recurrent neural network (CNN-BI-RNN)\n- Convolutional neural network + Bidirectional long-short term memory (CNN-BI-LSTM)\n- Convolutional neural network + Bidirectional gated recurrent unit (CNN-BI-GRU)\n\nPlease note that each model is supported by a prior input data pre-processing procedure which allows to set a look-back period, look-forward period, sub-sequences division (only for hybrid architectures) and data scaling method.\n\nThe following scikit-learn scaling procedures are supported:\n\n- StandardScaler\n- MinMaxScaler\n- MaxAbsScaler\n- Normalizing ([0, 1])\n- None (raw data input)\n\nDuring training/fitting, callback conditions can be defined to guard against\noverfitting.\n\nTrained models can furthermore be saved or loaded if the user wishes to do so.\n\n## How to use imbrium?\n\nAttention: Typing has been left in the below examples to ease the configuration readability.\n\n### Univariate Models:\n\n1. Univariate-Multistep forecasting - Pure architectures\n\n```python3\nfrom imbrium.predictors.univarpure import PureUni\n\npredictor = PureUni(steps_past: int, steps_future: int, data = DataFrame(),\n                    scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_mlp(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (25,'relu'),\n                                          'layer2': (25, 'relu')})\n\npredictor.create_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                      metrics: str = 'mean_squared_error',\n                      layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                            'layer2': (50, 'relu')})\n\npredictor.create_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu')})\n\npredictor.create_birnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_encdec_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                             metrics: str = 'mean_squared_error',\n                             layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (100, 'relu')})\n\npredictor.create_encdec_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                    batch_size: int = 10, monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor = PureUni(steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n\n2. Univariate-Multistep forecasting - Hybrid architectures\n\n```python3\nfrom imbrium.predictors.univarhybrid import HybridUni\n\npredictor = HybridUni(sub_seq: int, steps_past: int, steps_future: int, data =          DataFrame(), scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_cnnrnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnlstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                         metrics: str = 'mean_squared_error',\n                         layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnngru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbirnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                           metrics: str = 'mean_squared_error',\n                           layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                    batch_size: int = 10, monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor =  HybridUni(sub_seq: int, steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n\n### Multivariate Models:\n\n1. Multivariate-Multistep forecasting - Pure architectures\n\n```python3\nfrom imbrium.predictors.multivarpure import PureMulti\n\n# please make sure that the target feature is the first variable in the feature list\npredictor = PureMulti(steps_past: int, steps_future: int, data = DataFrame(), features = [], scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_mlp(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (25,'relu'),\n                                           'layer2': (25, 'relu')})\n\npredictor.create_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                      metrics: str = 'mean_squared_error',\n                      layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                            'layer2': (50, 'relu')})\n\npredictor.create_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (40, 'relu'), 'layer1': (50,'relu'),\n                                           'layer2': (50, 'relu')})\n\npredictor.create_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                     metrics: str = 'mean_squared_error',\n                     layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu')})\n\npredictor.create_birnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_bigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                       metrics: str = 'mean_squared_error',\n                       layer_config: dict = {'layer0': (50, 'relu'), 'layer1': (50, 'relu')})\n\npredictor.create_encdec_rnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_lstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                             metrics: str = 'mean_squared_error',\n                             layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\npredictor.create_encdec_cnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (100, 'relu')})\n\npredictor.create_encdec_gru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                            metrics: str = 'mean_squared_error',\n                            layer_config: dict = {'layer0': (100, 'relu'), 'layer1': (50, 'relu'), 'layer2': (50, 'relu'), 'layer3': (100, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                    batch_size: int = 10, monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor = PureMulti(steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n2. Multivariate-Multistep forecasting - Hybrid architectures\n\n```python3\nfrom imbrium.predictors.multivarhybrid import HybridMulti\n\n# please make sure that the target feature is the first variable in the feature list\npredictor = HybridMulti(sub_seq: int, steps_past: int, steps_future: int, data = DataFrame(), features:list = [], scale: str = '')\n\n# Choose between one of the architectures:\n\npredictor.create_cnnrnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnlstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                         metrics: str = 'mean_squared_error',\n                         layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnngru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                        metrics: str = 'mean_squared_error',\n                        layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbirnn(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbilstm(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                           metrics: str = 'mean_squared_error',\n                           layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\npredictor.create_cnnbigru(optimizer: str = 'adam', loss: str = 'mean_squared_error',\n                          metrics: str = 'mean_squared_error',\n                          layer_config = {'layer0': (64, 1, 'relu'), 'layer1': (32, 1, 'relu'), 'layer2': (2), 'layer3': (50, 'relu'), 'layer4': (25, 'relu')})\n\n# Fit the predictor object - more callback settings at:\n\n# https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping\n\npredictor.fit_model(epochs: int, show_progress: int = 1, validation_split: float = 0.20,\n                    batch_size: int = 10, monitor='loss', patience=3)\n\n# Have a look at the model performance\npredictor.show_performance()\n\n# Make a prediction based on new unseen data\npredictor.predict(data: array)\n\n# Safe your model:\npredictor.save_model()\n\n# Load a model:\n# Step 1: initialize a new predictor object with same characteristics as model to load\n# Step 2: Do not pass in any data\n# Step 3: Invoke the method load_model()\n# optional Step 4: Use the setter method set_model_id(name: str) to give model a name\n\nloading_predictor =  HybridMulti(sub_seq: int, steps_past: int, steps_future: int)\nloading_predictor.load_model(location: str)\nloading_predictor.set_model_id(name: str)\n```\n\n\n## References\nBrwonlee, J., 2016. Display deep learning model training history in keras [Online]. Available from:\nhttps://machinelearningmastery.com/display-deep-\nlearning-model-training-history-in-keras/.\n\nBrwonlee, J., 2018a. How to develop convolutional neural network models for time series forecasting [Online]. Available from:\nhttps://machinelearningmastery.com/how-to-develop-convolutional-\nneural-network-models-for-time-series-forecasting/.\n\nBrwonlee, J., 2018b. How to develop lstm models for time series forecasting [Online]. Available from:\nhttps://machinelearningmastery.com/how-to-develop-\nlstm-models-for-time-series-forecasting/.\n\nBrwonlee, J., 2018c. How to develop multilayer perceptron models for time series forecasting [Online]. Available from:\nhttps://machinelearningmastery.com/how-to-develop-multilayer-\nperceptron-models-for-time-series-forecasting/.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/maxmekiska/Imbrium",
            "keywords": "machineleaning,keras,deeplearning,timeseries,forecasting",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "imbrium",
            "package_url": "https://pypi.org/project/imbrium/",
            "platform": null,
            "project_url": "https://pypi.org/project/imbrium/",
            "project_urls": {
                "Homepage": "https://github.com/maxmekiska/Imbrium"
            },
            "release_url": "https://pypi.org/project/imbrium/1.0.0/",
            "requires_dist": [
                "tensorflow (==2.9.1)",
                "scikit-learn (==0.21.3)",
                "matplotlib (==3.5.2)",
                "numpy (==1.21.6)",
                "pandas (==0.25.1)"
            ],
            "requires_python": "",
            "summary": "Standard and Hybrid Deep Learning Multivariate-Multi-Step & Univariate-Multi-Step Time Series Forecasting.",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15605564,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0ee89120b88ee3cb4ca9ddaaa96e2019",
                    "sha256": "bf81b181bb1b56c59e50e47381a726db7d527171c795bfe28557e3fdada119de"
                },
                "downloads": -1,
                "filename": "imbrium-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0ee89120b88ee3cb4ca9ddaaa96e2019",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 24113,
                "upload_time": "2022-11-01T02:35:11",
                "upload_time_iso_8601": "2022-11-01T02:35:11.563494Z",
                "url": "https://files.pythonhosted.org/packages/99/66/ce2c17e741289ac83b86f363d5e3c92b1f0b08c29e1b190eb0324f50d216/imbrium-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "6b08fe82abe1aed7b924ffaa075bf1a9",
                    "sha256": "3e62983a8e89504831c1c6f4e13a7c9e1086fbb0c5af290fabb6cfe836ca8e2a"
                },
                "downloads": -1,
                "filename": "imbrium-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "6b08fe82abe1aed7b924ffaa075bf1a9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 17940,
                "upload_time": "2022-11-01T02:35:14",
                "upload_time_iso_8601": "2022-11-01T02:35:14.097554Z",
                "url": "https://files.pythonhosted.org/packages/ae/2c/01ae856c36c73a9a6a137ae63fa1d69c7c78b6ec5cb097ce605c52732fd0/imbrium-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}