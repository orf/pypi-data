{
    "0.0.1": {
        "info": {
            "author": "Cui Zy",
            "author_email": "1776228595@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "**Auto_Taste_ML 0.0.1**\n\n# Illustrate\uff1a\n\n\u200b\tThis is a machine learning expansion package for Cui Lianshan and his friends. It has a strong socialist open source sharing spirit, and is extremely creative and combat effective. Let us applaud them here :clinking_glasses: :clinking_glasses:\n\n## Spend\n\nTest set data location:\uff1a{Example}\n\nThe configuration is as follows\uff1a\n\n|        | Windows            | Windows            | MacOS   | Linux               |\n| ------ | ------------------ | ------------------ | ------- | ------------------- |\n| Config | i7-9750H           | i7-9750H           | M1      | E5-2640 V4          |\n| Cores  | 6 cores 12 threads | 6 cores 12 threads | 8 cores | 20 cores 40 threads |\n| Freq   | 2.67GHz            | 3.2GHz             |         | 2.40GHz             |\n\n\u8fd0\u884c\u901f\u5ea6\u5bf9\u6bd4\u7ed3\u679c\u5982\u4e0b\uff1a\n\n| Not integrated      | Windows1 | Windows2  | MacOS      | Linux      |\n| ------------------- | -------- | --------- | ---------- | ---------- |\n| ALL_FUNCTION        | 47.364   | 43.681    | 34.013     | ==27.282== |\n| binary_ROC()        | 45.809   | 42.964    | 32.751     | ==32.143== |\n| auto_model()        | 53.498   | 48.649    | ==38.267== | 40.794     |\n| estimator_violion() | 1.191    | ==1.021== | 1.678      | 2.395      |\n\n\n\n| \u96c6\u6210                | Windows1 | Windows2              | MacOS                                                        | Linux                                                        |\n| ------------------- | -------- | --------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| binary_ROC()        | 46.2 s   | 43.2 s                | CPU times: user 4.82 s, sys: 365 ms, total: 5.18 s Wall time: ==32.9s== | CPU times: user 9.59 s, sys: 3.89 s, total: 13.5 s Wall time: 33.3 s |\n| auto_model()        | 50.4 s   | 47.1 s                | CPU times: user 9.75 s, sys: 247 ms, total: 10 s Wall time: ==38.1 s== | CPU times: user 15.1 s, sys: 1.68 s, total: 16.8 s Wall time: 41.1 s |\n| estimator_violion() | 1.16 s   | Wall time: ==1.01 s== | CPU times: user 2.02 s, sys: 70.1 ms, total: 2.09 s Wall time: 1.69 s | CPU times: user 3.85 s, sys: 2.32 s, total: 6.17 s Wall time: 2.23 s |\n\n## Request_install\n\nYou can refer to learning the environment backup in the current directory: Auto_ML_C.yaml\n\nThe main software involved is as follows:\n\n| Package          | \u6700\u4f4e\u7248\u672c\u2014\u2014\u5f85\u68c0\u6d4b |\n| ---------------- | ---------------- |\n| python=3.8.10    |                  |\n| seaborn=0.11.2   |                  |\n| pandas=1.3.3     |                  |\n| matplotlib=3.4.2 |                  |\n| numpy=1.20.3     |                  |\n\n\n\n# Content:\n\n\u200b\tThis package is based on Sklearn, imblance and other machine learning expansion packages. It is currently planned to be divided into two parts:\n\n- Classification task\n\n  1. binary_classfication.py\n\n     \n\n     |                                           | Function                                                     | Rturn                                                 |\n     | ----------------------------------------- | ------------------------------------------------------------ | ----------------------------------------------------- |\n     | cal_add_1(num1,num2):wave:                | welcome                                                      | num1,num2                                             |\n     | LogisticRegressionCV_mdoel(X, Y,cv)       |                                                              |                                                       |\n     | SGDClassifier_model(X,Y,cv)               |                                                              |                                                       |\n     | LinearDiscriminantAnalysis_model(X, Y,cv) |                                                              |                                                       |\n     | LinearSVC_model(X, Y,cv)                  |                                                              |                                                       |\n     | SVC_model(X, Y,cv)                        |                                                              |                                                       |\n     | DecisionTreeClassifier_model(X,Y,cv)      |                                                              |                                                       |\n     | AdaBoostClassifier_model(X,Y,cv)          |                                                              |                                                       |\n     | BaggingClassifier_model(X, Y,cv)          |                                                              |                                                       |\n     | GradientBoostingClassifier_model(X, Y,cv) |                                                              |                                                       |\n     | RandomForestClassifier_model(X, Y,cv)     |                                                              |                                                       |\n     | KNeighborsClassifier_model(X, Y,cv)       |                                                              |                                                       |\n     | BernoulliNB_model(X, Y,cv)                |                                                              |                                                       |\n     | GaussianNB_model(X,Y,cv)                  |                                                              |                                                       |\n     | Below is the total function               |                                                              |                                                       |\n     | binary_ROC(X,Y,k,fig_name)                | Plot the best ROC under scalar hyperparameter search         | fig                                                   |\n     | auto_model(X, Y, k)                       | Model's scalar hyperparameter search results                 | Auc_data, Acc_data, <br />Recall_data, Precision_data |\n     | estimator_violion(df1,df2,fig_name)       | Draw a violin chart for the Dataframe of the auto_model result | fig                                                   |\n     \n     \n     \n     \n     \n  3. Multi-class function\n     \n     Develeping :man_health_worker:\n     \n  3. \u7279\u5f81\u7b5b\u9009\u51fd\u6570Feature_struction\n  \n     | Name                                                        | Function                                                     | Rturn     |\n     | ----------------------------------------------------------- | ------------------------------------------------------------ | --------- |\n     | data_enhance_show(X,Y[[\"Taste_num\"]],location,kind=\"SMOTE\") | A variety of visualization methods to reduce dimensionality to visualize the data to be enhanced | DataFRmae |\n     | data_enhance(X.iloc[:,:-1],Y[[\"Taste_num\"]])                | Use multiple indicators to evaluate the results of different enhancement methods | DataFrame |\n     | data_enhance_compare(tmp1,location,name)                    | Visualize the return result of function 2                    | Fig       |\n  \n     \n  \n  4. The progress bar version of hyperparameter optimization! ! ! ! Surely series next time!\n\n\n\n# How to Use\n\n## Installation\n\n```python\n# Method 1\n# Create a new environment, here is conda as an example\nconda create --name Auto_ML_C python=3.8.10\n\n# Activate the newly created environment\nconda activate Auto_ML_C\n\n# Installation package\npip install Auto_ML_C==0.0.11\npip install imblearn\n\n# Suggest the pipeline of Jupyter notebook [optional, recommended]\nconda install jupyter notebook\nconda install ipykernel \npython -m ipykernel install --user --name Auto_ML_C --display-name   \"Auto_ML_C\"\n# Install Sklearn 0.6.  this will fixed next version\nconda install -c conda-forge sklearn-contrib-lightning\n\n# Method2\n# Use the yaml environment file on the GitHub homepage to directly copy the current environment\nconda env create -n Auto_ML_C -f Auto_ML_C.yaml\n\n# Activate the newly created environment\nconda activate \n\n# Suggest the pipeline of Jupyter notebook [optional, recommended]\nconda install jupyter notebook\nconda install ipykernel \npython -m ipykernel install --user --name Auto_ML_C --display-name   \"Auto_ML_C\"\n```\n\n\n\n## Feature_struction\n\n```python\nimport auto_ml_c.Feature_structure as fs\nimport pandas as pd\ndf = pd.read_csv(\"1_23\u80bd\u5168\u90e8\u7684\u6784\u6548\u6570\u636e.csv\")\nX = df.iloc[:,2:]\nY = df[[\"Taste\"]]\nY[\"Taste_num\"] = 10\nfor i in range(Y.shape[0]):\n    if Y[\"Taste\"].iloc[i] == \"Umami\":\n        Y[\"Taste_num\"].iloc[i] = 1\n    elif Y[\"Taste\"].iloc[i] == \"Bitter\":\n        Y[\"Taste_num\"].iloc[i] = 0\n        \n# Function 1: Use a variety of visualization methods to reduce dimensionality to visualize the data to be enhanced       \n# \u51fd\u65701\uff1a \u91c7\u7528\u591a\u79cd\u53ef\u89c6\u5316\u65b9\u6cd5\u8fdb\u884c\u964d\u7ef4\u53ef\u89c6\u5316\u5f85\u589e\u5f3a\u6570\u636e\nlocation = \"\"\ntmp = fs.data_enhance_show(X,Y[[\"Taste_num\"]],location,kind=\"SMOTE\")  \ntmp\n\n# Function 2: Using multiple indicators to evaluate the results of different enhancement methods\n# \u51fd\u65702\uff1a \u91c7\u7528\u591a\u6307\u6807\u8bc4\u4ef7\u4e0d\u540c\u589e\u5f3a\u65b9\u6cd5\u540e\u7684\u7ed3\u679c\ntmp1 = fs.data_enhance(X.iloc[:,:-1],Y[[\"Taste_num\"]])\ntmp1\n\n# Function 3: Visualize the return result of function 2\n# \u51fd\u65703\uff1a\u53ef\u89c6\u5316\u51fd\u65702\u7684\u8fd4\u56de\u7ed3\u679c\nlocation = \"\"\nname=\"Test\"\ntmp2 = fs.data_enhance_compare(tmp1,location,name)\ntmp2\n```\n\n![image-20211026201938046](README/image-20211026201938046.png)\n\n\n\n![image-20211026202033919](README/image-20211026202023150.png)\n\n\n\n## Binary Classication\n\n```python\n# Here is an example of the function binary_classfication_ws  \n# \u8fd9\u91cc\u4ee5\u51fd\u6570binary_classfication_ws\u4e3e\u4f8b\n\n# \u5f00\u59cb\u52a0\u8f7d\u73af\u5883\nimport pandas as pd\nimport numpy as np\nimport auto_ml_c.binary_classfication as abc\n\n# \u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e\ndf = pd.read_csv(\"2_data_deal_smote.csv\")\nX = df.iloc[:,:-1]\nY = df[\"label\"]\nscore = 'accuracy'\n\n# The first function, draw ROC image\ntmp_a = abc.binary_ROC(X,Y,cv,\"111\",\"accuracy\")\n\n# The second function, get Auc_data, Acc_data, Recall_data, Precision_data\ntmp_b1,tmp_b2,tmp_b3,tmp_b4 = abc.auto_model(X,Y,cv,\"accuracy\")\n\n# The third function, draw the evaluation graph obtained by function 2 auto_model\ntmp_c = abc.estimator_violion(tmp_b1,tmp_b2,\"Violionplot\")\n```\n\n<img src=\"README/binary_ROC.png\" alt=\"binary_ROC\" style=\"zoom:50%;\" />\n\n![estimator_violion](README/estimator_violion.png)\n\n\n\n# ConTact\n\nVX\uff1aCuizy13390906310_ic\n\nQQ\uff1a1776228595\n\nE-mail\uff1a1776228595@qq.com\n\nGitHub\uff1a\u5730\u5740\u5f85\u586b\u5199\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/SynchronyML/Auto_Taste_ML",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "Auto-Taste-ML",
            "package_url": "https://pypi.org/project/Auto-Taste-ML/",
            "platform": "",
            "project_url": "https://pypi.org/project/Auto-Taste-ML/",
            "project_urls": {
                "Bug Tracker": "https://github.com/SynchronyML/Auto_Taste_ML/issues",
                "Homepage": "https://github.com/SynchronyML/Auto_Taste_ML"
            },
            "release_url": "https://pypi.org/project/Auto-Taste-ML/0.0.1/",
            "requires_dist": [
                "numpy (>=1.11.0)",
                "seaborn (>=0.11.2)",
                "pandas (>=1.3.3)",
                "matplotlib (>=3.4.2)",
                "xgboost (>=1.4.0)",
                "scikit-learn (>=0.24.2)"
            ],
            "requires_python": ">=3.8.10",
            "summary": "A small example package",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12348442,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fb145009b7e71bd246e7b84882c28a7b",
                    "sha256": "182687ef28301b29979a8ec52824c843b3a5d0f211a8d41db63ca9b3223818e0"
                },
                "downloads": -1,
                "filename": "Auto_Taste_ML-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fb145009b7e71bd246e7b84882c28a7b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8.10",
                "size": 13544,
                "upload_time": "2021-12-18T15:02:29",
                "upload_time_iso_8601": "2021-12-18T15:02:29.187655Z",
                "url": "https://files.pythonhosted.org/packages/5e/2e/d4b091c2678e1cd90f2947a18e35ee6f9f4130ff35a74d7d55d9e1465fd8/Auto_Taste_ML-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "65a52fed81d8a645f92f1b833de4aee6",
                    "sha256": "73dc96b120ae0f23f94184a6f39c1b890869a5721aea493ef34aa54bf218037a"
                },
                "downloads": -1,
                "filename": "Auto_Taste_ML-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "65a52fed81d8a645f92f1b833de4aee6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8.10",
                "size": 13233,
                "upload_time": "2021-12-18T15:02:31",
                "upload_time_iso_8601": "2021-12-18T15:02:31.268576Z",
                "url": "https://files.pythonhosted.org/packages/7f/0a/87f6f82effe41e158578fb4274e5d188969170996b66e3eb0e5e68a03293/Auto_Taste_ML-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}