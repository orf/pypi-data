{
    "1.0.0": {
        "info": {
            "author": "Daniel Garcia (cr0hn) - @ggdaniel",
            "author_email": "cr0hn@cr0hn.com",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "Intended Audience :: Other Audience",
                "Intended Audience :: System Administrators",
                "License :: OSI Approved :: BSD License",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python :: 3.5",
                "Topic :: Security"
            ],
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cr0hn/aiotasks",
            "keywords": "",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiotasks",
            "package_url": "https://pypi.org/project/aiotasks/",
            "platform": "",
            "project_url": "https://pypi.org/project/aiotasks/",
            "project_urls": {
                "Homepage": "https://github.com/cr0hn/aiotasks"
            },
            "release_url": "https://pypi.org/project/aiotasks/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Celery like task manager for new AsyncIO Python module",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 2744193,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "aa4075701c20a317cc6d188929c207cc",
                    "sha256": "ba1bcc17d6a2593fec48ef647a8beea3ef49061491d0651dfdf12dd0f4c119e1"
                },
                "downloads": -1,
                "filename": "aiotasks-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "aa4075701c20a317cc6d188929c207cc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 21199,
                "upload_time": "2017-01-17T14:58:44",
                "upload_time_iso_8601": "2017-01-17T14:58:44.144279Z",
                "url": "https://files.pythonhosted.org/packages/4b/5b/e54494c692452f172dec0e6977a2534dee7d43c6d1e8badb58208e9b5c79/aiotasks-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0a2": {
        "info": {
            "author": "Daniel Garcia (cr0hn) - @ggdaniel",
            "author_email": "cr0hn@cr0hn.com",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Console",
                "License :: OSI Approved :: BSD License",
                "Operating System :: MacOS",
                "Operating System :: Microsoft :: Windows",
                "Operating System :: POSIX",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6"
            ],
            "description": "aiotasks\n========\n\n*aiotasks: A Celery like task manager that distributes Asyncio coroutines*\n\n.. image::  doc/source/_static/logo-128x128.png\n    :height: 64px\n    :width: 64px\n    :alt: aiohttp-cache logo\n\n.. image:: https://travis-ci.org/cr0hn/aiotasks.svg?branch=master\n    :target: https://travis-ci.org/cr0hn/aiotasks\n\n.. image:: https://img.shields.io/pypi/l/Django.svg\n    :target: https://github.com/cr0hn/aiotasks/blob/master/LICENSE\n\n.. image:: https://img.shields.io/pypi/status/Django.svg\n    :target: https://pypi.python.org/pypi/aiotasks/1.0.0\n\n.. image:: https://codecov.io/gh/cr0hn/aiotasks/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/cr0hn/aiotasks\n\n\n+----------------+------------------------------------------------+\n|Project site    | https://github.com/cr0hn/aiotasks              |\n+----------------+------------------------------------------------+\n|Issues          | https://github.com/cr0hn/aiotasks/issues/      |\n+----------------+------------------------------------------------+\n|Documentation   | https://aiotasks.readthedocs.org/              |\n+----------------+------------------------------------------------+\n|Author          | Daniel Garcia (cr0hn) - @ggdaniel              |\n+----------------+------------------------------------------------+\n|Latest Version  | 1.0.0-alpha                                    |\n+----------------+------------------------------------------------+\n|Python versions | 3.5 or above                                   |\n+----------------+------------------------------------------------+\n\n\nWhat's aiotasks\n---------------\n\naiotasks is an asynchronous task queue/job queue based on distributed message passing based on Python asyncio framework. Based on the Celery Task Queue ideas, but focusing in performance, non-blocking, event-driven.\n\naiotasks doesn't does pulling or active waiting for tasks jobs, instead use asyncio framework to suspend the execution until any new data are received by the broker actively.\n\n    aiotaks is still under development. Not as active as I would like (for time limitations), but the project is in active development.\n\n    If you wan't contribute, take a look to the TODO.md file.\n\nUsage\n-----\n\n    You can find examples at *examples* folder.\n\nYou can run aiotasks as two ways:\n\n- Launching a aiotasks manager in an independent console / process (like Celery does), and then send any tasks to aiotasks thought the broker.\n- Running the standalone way: Launching the client and the server in an unique point an running both at the same time.\n\nRunning using the manager\n+++++++++++++++++++++++++\n\n    Currently there's a limitation for launching the tasks. Python files with the tasks should be in a package to be able for aiotasks to import them.\n\n    This limitation is in TODO to fix in the future, to allow to import .py directly without be inside in a package.\n\n**Run the manager**\n\n.. code-block:: bash\n\n    > aiotasks -vvvv worker -A examples.launch_manager_tasks_and_launch_in_console\n\n**Send the tasks**\n\n.. code-block:: bash\n\n    > python examples/launch_manager_tasks_and_launch_in_console.py\n\nRunning standalone\n++++++++++++++++++\n\n.. code-block:: bash\n\n    > python examples/standalone_tasks_standalone.py\n\nDefining tasks\n--------------\n\nThis concept was ported from Celery. Define any tasks is very simple, only need to decorate a function with *task* function.\n\n.. code-block:: python\n\n    from aiotasks import build_manager\n\n    manager = build_manager(\"redis://\")\n\n    @manager.task()  # <-- DEFINITION OF TASK\n    async def task_01(num):  # <-- TASK SHOULD BE A **COROUTINE**\n        print(\"Task 01 starting: {}\".format(num))\n        await asyncio.sleep(2, loop=manager.loop)\n        print(\"Task 01 stopping\")\n\n\nSending info to tasks\n---------------------\n\nCurrently aiotasks only support send information using the *delay(...)* method and need to be access to the task definition:\n\n.. code-block:: python\n\n    from aiotasks import build_manager\n\n    manager = build_manager(\"redis://\")\n\n    @manager.task()\n    async def task_01(num):\n        await asyncio.sleep(0, loop=manager.loop)\n\n    async def generate_tasks():\n        # Generates 5 tasks\n        for x in range(5):\n            await task_01.delay(x)  # <-- METHOD DELAY SEND A TASK\n\n    if __name__ == '__main__':\n        manager.loop.run_until_complete(generate_tasks())\n\nSending info to tasks & wait for response\n-----------------------------------------\n\nWe can also send for a task job and wait for the response in a **non-blocking mode**:\n\n.. code-block:: python\n\n    from aiotasks import build_manager\n\n    manager = build_manager(\"redis://\")\n\n    @manager.task()\n    async def task_01(num):\n        await asyncio.sleep(0, loop=manager.loop)\n\n    async def generate_tasks():\n        # Generates 5 tasks\n        async with task_01.wait(x) as f:  # <-- NON-BLOCKING WAITING FOR RESPONSE\n            print(f)\n\n    if __name__ == '__main__':\n        manager.loop.run_until_complete(generate_tasks())\n\nBackends\n--------\n\nCurrently only two backend are supported:\n\n- Redis: redis://HOST:PORT/DB\n- In memory: memory://\n\n**Redis**\n\nConnect to localhost and default Redis options:\n\n.. code-block:: python\n\n    from aiotasks import build_manager\n\n    manager = build_manager(\"redis://\")\n\n    ...\n\nCustom Redis server:\n\n.. code-block:: python\n\n    from aiotasks import build_manager\n\n    manager = build_manager(\"redis://:mypassword@10.0.0.1/12\")\n\n    ...\n\n**In memory**\n\nThis execution mode is useful to do small and local tasks. For example: If you're using aiohttp and want to send and email in a background way, you can use the standalone way and the memory backend.\n\n.. code-block:: python\n\n    from aiotasks import build_manager\n\n    manager = build_manager(\"memory://\")\n\n    ...\n\n\nVersion 1.0.0-a2\n================\n\nNew features\n------------\n\n- Add: new function **send_to** to avoid the need to has access to function to send the task to manager. Now we can use them instead of **task.delay(...)**.\n- Add: new function **current_app** that will return the aiotask manager instance.\n- Add: integrated cycle of deploy using Travis.\n\nImprovements and fixes\n----------------------\n\n- Imp: the import method for tasks was changed. Now we can import tasks from a different directory or current directory.\n\n\nVersion 1.0.0-a1\n================\n\nFirst release",
            "description_content_type": null,
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/cr0hn/aiotasks",
            "keywords": "",
            "license": "BSD",
            "maintainer": "",
            "maintainer_email": "",
            "name": "aiotasks",
            "package_url": "https://pypi.org/project/aiotasks/",
            "platform": "",
            "project_url": "https://pypi.org/project/aiotasks/",
            "project_urls": {
                "Homepage": "https://github.com/cr0hn/aiotasks"
            },
            "release_url": "https://pypi.org/project/aiotasks/1.0.0a2/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "A Celery like task manager that distributes Asyncio coroutines",
            "version": "1.0.0a2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 2744193,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6910bdba470688cf071c6c709f2c8ab9",
                    "sha256": "c96519191275bd99ecd94ff19f0a688951c0a4551ded8045b53217c12ee42237"
                },
                "downloads": -1,
                "filename": "aiotasks-1.0.0a2.tar.gz",
                "has_sig": false,
                "md5_digest": "6910bdba470688cf071c6c709f2c8ab9",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 27348,
                "upload_time": "2017-03-31T16:03:00",
                "upload_time_iso_8601": "2017-03-31T16:03:00.274103Z",
                "url": "https://files.pythonhosted.org/packages/3b/73/8bdfc6bc22b688a1726d98a7616cad800c570fb94ee6747e487d50135a9e/aiotasks-1.0.0a2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}