{
    "1.0.0": {
        "info": {
            "author": "Ryan McConnell",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# observer_hooks\nA quick & dirty, but flexable way to attach side effects to functions and methods.\nIntended to accomplish something similar to the \"observer pattern\" in simple context.\n\nFor methods, an instance member to hold weak references to functions and methods is automatically created. By default\nthe instance member is the same name as the method with an underscore prepended. This can be changed with the event_name\nargument.\n\nSide effects can be chained normally.\n\n## Usage\n\nAttach a side effect to a function:\n```python\nfrom observer_hooks import notify\n\n@notify()\ndef some_function(param):\n    return f\"param: {param}\"\n\n\ndef side_effect(param):\n    print(param)\n\n\nsome_function.subscribe(side_effect)\nassert some_function(1) == 'param: 1'\n```\n\nAttach a side effect to a method:\n```python\nfrom observer_hooks import notify\n\nclass A:\n    @notify()\n    def notify_some_action(self):\n        pass\n\nclass B:\n    def __init__(self, a:A):\n        self.a = a\n        a.notify_some_action.subscribe(self.a_some_action)\n    \n    def a_some_action(self):\n        print('received')\n\nb = B(A())\nb.a.notify_some_action()\n```\n\nExample with __slots__:\n```python\nfrom observer_hooks import notify\n\nclass A:\n    __slots__ = '_notify_some_action',\n    \n    @notify()\n    def notify_some_action(self):\n        pass\n\ndef a_some_action():\n    print('received')\n\na = A()\na.notify_some_action.subscribe(a_some_action)\na.notify_some_action()\n```\n\nBlock certain side effects from firing:\n```python\nfrom observer_hooks import notify, BlockSideEffects\n\nclass A:\n    __slots__ = '_notify_some_action',\n\n    @notify()\n    def notify_some_action(self):\n        pass\n\ndef a_some_action():\n    print('blocked')\n\ndef a_some_action2():\n    print('not blocked')\n\na = A()\na.notify_some_action.subscribe(a_some_action)\na.notify_some_action.subscribe(a_some_action2)\nwith BlockSideEffects(a.notify_some_action, only=(a_some_action,)):\n    a.notify_some_action()\n```\n\nThe HardRefEventHandler will hold non-weak references to lambda and partial functions\n```python\nfrom observer_hooks import notify, HardRefEventHandler\n\n@notify(handler_t=HardRefEventHandler)\ndef notify_some_action():\n    return 'return value'\n\ndef some_action():\n    print('Hi')\n\ndef scope():\n    notify_some_action.subscribe(lambda: some_action())\n\nscope()\nprint(notify_some_action())\n```\n\nThe \"pass_ref\" parameter will pass the \"self\" reference to side-effect functions and the switch_event_handler method on descriptors will switch the event handler type\n```python\nfrom observer_hooks import notify, HardRefEventHandler\nclass SomeClass:\n    @notify(pass_ref=True)\n    def method(self):\n        pass\n\ns = SomeClass()\n\ndef method(other):\n    assert other is s\n\ns.method.switch_event_handler(HardRefEventHandler())\ns.method.subscribe(method)\ns.method()\n```\n\nInherit or copy parameters from a superclasses descriptor with 'notify_copy_super'\n\n```python\nfrom observer_hooks import notify, notify_copy_super\n\n\nclass A:\n    @notify(pass_ref=True, no_origin=True, auto_fire=False)\n    def method(self):\n        print('this wont print')\n\n\nclass B(A):\n    pass\n\n\nclass C(B):\n    @notify_copy_super(auto_fire=True)\n    def method(self):\n        print('neither will this')\n\n\ndef side_effect(x):\n    print('hi', x)\n\n\nc = C()\nc.method.subscribe(side_effect)\nc.method()\n```\n\n\nNotes:\n- The parameter \"auto_fire\" will disable all side effects and instead the .emit() function can be used to manually trigger the side effects\n- Redefined methods in child classes also need the decorator and will override behavior to the specifications of the new decorator\n- Inherited methods will only fire once even if they are re-defined and super is called\n- Inherited methods do not need to be re-defined\n\n# Future plans\n\n- Implement access to the originating functions return value\n  - Either a member of the object that replaces the function for non-thread safe applications or a special parameter\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ILikesCaviar/ObserverHooks",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "observer-hooks",
            "package_url": "https://pypi.org/project/observer-hooks/",
            "platform": null,
            "project_url": "https://pypi.org/project/observer-hooks/",
            "project_urls": {
                "Homepage": "https://github.com/ILikesCaviar/ObserverHooks"
            },
            "release_url": "https://pypi.org/project/observer-hooks/1.0.0/",
            "requires_dist": [
                "ordered-set (>=4.1.0)"
            ],
            "requires_python": ">=3.0",
            "summary": "Easy, minimalist tools for function side-effects and observer pattern with weak references",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14619376,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e413d3c5d9dfd771f04e7fd427f9c87e",
                    "sha256": "4d2fc89a1dffb48b895a4a7962ab43ac25c566114c309326eedbd21ba5ecdf86"
                },
                "downloads": -1,
                "filename": "observer_hooks-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e413d3c5d9dfd771f04e7fd427f9c87e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.0",
                "size": 7164,
                "upload_time": "2022-08-02T01:37:10",
                "upload_time_iso_8601": "2022-08-02T01:37:10.838910Z",
                "url": "https://files.pythonhosted.org/packages/d9/e9/d2dd2ac78e431423d270dc289ce718d5e35cb20ccc41a8a37a9f5aa212ae/observer_hooks-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "94b3681836fb49b3478787357bc4c350",
                    "sha256": "0845469693130ddf2964be12b5b2607a12a9d48ec7e1f48078292081581a037b"
                },
                "downloads": -1,
                "filename": "observer-hooks-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "94b3681836fb49b3478787357bc4c350",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.0",
                "size": 7511,
                "upload_time": "2022-08-02T01:37:12",
                "upload_time_iso_8601": "2022-08-02T01:37:12.995804Z",
                "url": "https://files.pythonhosted.org/packages/ad/74/9f6c159a9689dd7c411cec045646aa5e3fe6c151382e67c244d71077a4d5/observer-hooks-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}