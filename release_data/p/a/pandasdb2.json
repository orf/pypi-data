{
    "2.0": {
        "info": {
            "author": "Shneor Elmaleh",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shner-elmo/db-wrapper",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pandasdb2",
            "package_url": "https://pypi.org/project/pandasdb2/",
            "platform": null,
            "project_url": "https://pypi.org/project/pandasdb2/",
            "project_urls": {
                "Homepage": "https://github.com/shner-elmo/db-wrapper"
            },
            "release_url": "https://pypi.org/project/pandasdb2/2.0/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "A wrapper for SQLite3",
            "version": "2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15036724,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "42f4d372f2e2b547ac7eaa8b1ec51e17",
                    "sha256": "73b94ce796d5fa518d263d011758b33efbdcf673bc17c6477831ee91fe80be6d"
                },
                "downloads": -1,
                "filename": "pandasdb2-2.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "42f4d372f2e2b547ac7eaa8b1ec51e17",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 10902,
                "upload_time": "2022-09-03T23:07:19",
                "upload_time_iso_8601": "2022-09-03T23:07:19.342567Z",
                "url": "https://files.pythonhosted.org/packages/b2/7d/b71051523200e7a7512e870d31485031d169d8173f93568cec63da714ed6/pandasdb2-2.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "aa423bc0a75a06f44e77b9d16d84e1cc",
                    "sha256": "d8d308ae47f69a985b9754f60b110eaf65bff309680f798506d76b7ba164229c"
                },
                "downloads": -1,
                "filename": "pandasdb2-2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "aa423bc0a75a06f44e77b9d16d84e1cc",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 9247,
                "upload_time": "2022-09-03T23:07:21",
                "upload_time_iso_8601": "2022-09-03T23:07:21.136472Z",
                "url": "https://files.pythonhosted.org/packages/b4/67/1153cbebfe858002b8ab85bf9074c1a6e590cb796490d710ad55f2403669/pandasdb2-2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.1": {
        "info": {
            "author": "Shneor Elmaleh",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Pandas-DB\n\n### A lightweight object for analyzing data directly from a Database without having to load anything onto memory\n\n---\n\nYou can get the package directly from [PyPI](https://pypi.org/project/pandasdb2/)\n```\npip install pandasdb2\n```\n---\n## Why use Pandas-DB?\n\nPandas-db is a read-only package that allows you to view, analyze and explore all the content in a given Database (supported file extensions: db, sql, and sqlite)\n\nThe advantage of using this over something like Pandas is that your not storing anything onto memory and therefore the `db` object is very light compared to a regular Pandas `DataFrame` \n\nThe instance only stores the names of the tables as attributes (which is great for auto-complete), the Table and Column objects as the attribute values, and of course a reference to the SQLite connection object. \n\nSo whenever you call a method to get some data, for ex: `db.table.data(10)` or `db.column.describe()`;  \nthe function runs a query that gets the data directly from the Database, so there is no need to store anything in memory.  \n\nYou can think of it as a wrapper for SQLite so there is no need to type SQL queries manually, but also has some of the most common methods and functions from Pandas so you also don't need to store the table data onto memory. \n\nAnd to top it off, it makes it easy to import the tables from a database onto pandas for further analysis, for ex:\n```python\nfrom pandasdb import DataBase\ndb = DataBase(db_file)\n\ndf1 = db.orders.to_df()\ndf2 = db.accounts.to_df()\n```\n\n\nFor the full tutorial click [here](#now-lets-dive-onto-the-pandasdb-package)\n\n---\n## Memory Usage\n\nNow let's visualize this and see the amount of memory a `DataBase` object consumes compared to a Pandas `DataFrame`\n\nImport the package:\n```python\nfrom pandasdb import DataBase\n```\n```python\ndb = DataBase('data/forestation.db')\n```\n\nUsing `asizeof.asizeof()` from the `pympler` package we can get the number of Bytes an object is taking in memory\n```python\nfrom pympler import asizeof\n\ndef mb_size(*obj): \n    \"\"\" Print object size in Megabytes \"\"\"\n    size = asizeof.asizeof(*obj)\n    print(f'{size / 1e+6:,f} MB')\n```\n\nDatabase object size in Megabytes:\n```python\nmb_size(db)\n```\n```\n0.006320 MB\n```\nLess than 1% of a Megabyte, which is almost nothing\n\nNow let's compare the memory it takes to store just one table as a DataFrame:\n```python\ndf = db.forest_area.to_df()\nmb_size(df)\n```\n```\n1.691432 MB\n```\n\nAnd if we were to store all three tables from our Database as Dataframes, we will be using:\n```python\ntables = [db.forest_area.to_df(), db.land_area.to_df(), db.regions.to_df()]\nmb_size(*tables)\n```\n```\n3.510600 MB\n```\n\nNow 3.5 Megabytes isn't much, but you need to keep in mind that these tables only have about 5k rows each,\nso as you start working with more data this number gets exponentially larger.\n\n```python\n# close database\ndb.exit()\n```\n\nFor example, this Database contains one table with almost two million rows:\n```python\ndb = DataBase('.../yfin_data.db')\nprint(f'tables={db.tables}')\nprint(f'shape={db.stock_data.shape}')\n```\n```\ntables=['stock_data']\nshape=(18078890, 9)\n```\n\nFunction for getting the size in Gigabytes\n```python\ndef gb_size(obj): \n    \"\"\" Print object size in Gigabytes \"\"\"\n    size = asizeof.asizeof(obj)\n    print(f'{size / 1e+9:,f} GB')\n```\n\n`db` object size:\n```python\ngb_size(db)\n```\n```\n0.000005 GB\n```\n\n`dataframe` object size:\n```python\ndataframe = db.stock_data.to_df()\ngb_size(dataframe)\n```\n```\n6.961891 GB\n```\nAs you can see, while the Dataframe size increases the DataBase object remains almost the same size.\n\n---\n\n### Now let's dive onto the pandasdb package\n\nOnce you have the package installed, import the package:\n```python\nfrom pandasdb import DataBase\n```\n\nTo instantiate the DataBase class you need to pass the path to the Database file, which could be one of the following extensions: db, sql, or sqlite\n```python\ndb = DataBase('data/forestation.db')\n```\n\nGet a list of all the tables \n```python\ndb.tables\n```\n```\n['forest_area', 'land_area', 'regions']\n```\n\nTo get the table object we can either use square brackets or type the name as an attribute, just like in Pandas\n```python\ndb['forest_area']\n```\n```\n     country_code  country_name  year  forest_area_sqkm\n0             ABW         Aruba  2016           4.20000\n1             AFG   Afghanistan  2016       13500.00000\n2             AGO        Angola  2016      577311.99220\n3             ALB       Albania  2016        7705.39978\n4             AND       Andorra  2016         160.00000\n           ...           ...   ...               ...\n5881          XKX        Kosovo  1990               NaN\n5882          YEM   Yemen, Rep.  1990        5490.00000\n5883          ZAF  South Africa  1990       92410.00000\n5884          ZMB        Zambia  1990      528000.00000\n5885          ZWE      Zimbabwe  1990      221640.00000\n[5886 rows x 4 columns]\n```\n\nOr:\n```python\ndb.forest_area\n```\n```\n     country_code  country_name  year  forest_area_sqkm\n0             ABW         Aruba  2016           4.20000\n1             AFG   Afghanistan  2016       13500.00000\n2             AGO        Angola  2016      577311.99220\n3             ALB       Albania  2016        7705.39978\n4             AND       Andorra  2016         160.00000\n           ...           ...   ...               ...\n5881          XKX        Kosovo  1990               NaN\n5882          YEM   Yemen, Rep.  1990        5490.00000\n5883          ZAF  South Africa  1990       92410.00000\n5884          ZMB        Zambia  1990      528000.00000\n5885          ZWE      Zimbabwe  1990      221640.00000\n[5886 rows x 4 columns]\n```\n\nGet a list of the table columns\n```python\ndb.forest_area.columns\n```\n```\n['country_code', 'country_name', 'year', 'forest_area_sqkm']\n```\n\nGet table shape:\n```python\ndb.forest_area.shape\n```\n```\n(5886, 4)\n```\n\nGet the first 20 rows \n```python\ndb.forest_area.data(20)\n```\n```\n[('ABW', 'Aruba', 2016, 4.199999869),\n ('AFG', 'Afghanistan', 2016, 13500.0),\n ('AGO', 'Angola', 2016, 577311.9922),\n ('ALB', 'Albania', 2016, 7705.39978),\n ('AND', 'Andorra', 2016, 160.0),\n ...\n```\nOr you can use the `iloc` property to get a slice:\n```python\ndb.regions.iloc[5:10]\n```\n```\n[('Angola', 'AGO', 'Sub-Saharan Africa', 'Lower middle income'),\n ('Antigua and Barbuda', 'ATG', 'Latin America & Caribbean', 'High income'),\n ('Argentina', 'ARG', 'Latin America & Caribbean', 'High income'),\n ('Armenia', 'ARM', 'Europe & Central Asia', 'Upper middle income'),\n ('Aruba', 'ABW', 'Latin America & Caribbean', 'High income')]\n```\n---\n\nColumns:\n```python\ndb.regions.region\n```\n```\nOut[18]: \n0                      South Asia\n1           Europe & Central Asia\n2      Middle East & North Africa\n3             East Asia & Pacific\n4           Europe & Central Asia\n                  ...            \n214    Middle East & North Africa\n215    Middle East & North Africa\n216            Sub-Saharan Africa\n217            Sub-Saharan Africa\n218                         World\nName: region, Length: 219, dtype: object\n```\n\nGet the Python and SQL data type of the column:\n```python\ndb.regions.region.type, db.regions.region.sql_type\n```\n```\n(str, 'TEXT')\n```\n\nDescribe the column: \n```python\ndb.forest_area.country_name.describe()\n```\n```\n{'len': 5886,\n 'count': 5886,\n 'min': 'Afghanistan',\n 'max': 'Zimbabwe',\n 'unique': 218}\n```\nNote that the len returns the number of rows/ items in the column, while count excludes None values\n\nDescribe a numeric column:\n```python\ndb.forest_area.forest_area_sqkm.describe()\n```\n```\n{'len': 5886,\n 'count': 5570,\n 'min': 0.799999982,\n 'max': 41282694.9,\n 'sum': 2178158753.6738772,\n 'avg': 391051.84087502287,\n 'median': 20513.00049}\n```\n\nGet a dictionary with each distinct value and its count:\n```python\ndb.regions.region.value_counts()\n```\n```\n{'Europe & Central Asia': 58,\n 'Sub-Saharan Africa': 48,\n 'Latin America & Caribbean': 42,\n 'East Asia & Pacific': 38,\n 'Middle East & North Africa': 21,\n 'South Asia': 8,\n 'North America': 3,\n```\n\nGet the most common value:\n```python\ndb.regions.income_group.mode()\n```\n```\n{'High income': 81}\n```\n\nGet all unique/ distinct values in a column:\n```python\ndb.forest_area.country_name.unique()\n```\n```\n['Aruba',\n 'Afghanistan',\n 'Angola',\n ...\n 'Zambia',\n 'Zimbabwe']\n```\n\nWhen you're done you should always call the `exit()` method to close the SQL connection safely\n```python\ndb.exit()\n```\n\nNow let's use another Database\n```python\ndb = DataBase('data/parch-and-posey.sql')\n\nfor table in db.tables:\n    print(table, db.get_columns(table_name=table))\n```\n```\nweb_events ['id', 'account_id', 'occurred_at', 'channel']\nsales_reps ['id', 'name', 'region_id']\nregion ['id', 'name']\norders ['id', 'account_id', 'occurred_at', 'standard_qty', 'gloss_qty', 'poster_qty', 'total', 'standard_amt_usd', 'gloss_amt_usd', 'poster_amt_usd', 'total_amt_usd']\naccounts ['id', 'name', 'website', 'lat', 'long', 'primary_poc', 'sales_rep_id']\n```\n\nYou can apply a function to the whole column like so: \n```python\ncolumn = db.accounts.primary_poc.apply(lambda x: x.split(' ')[-1])\n\nfor last_name in column:\n    print(last_name)\n```\n```\nTuma\nShields\nLupo\nBanda\nCrusoe\n...\n```\n\nSimilarly, the Table object has an `applymap` method, which maps/ applies the function on each cell in the table\n\nFirst, let's have a look at the table:\n```python\ndb.sales_reps\n```\n```\n        id                 name  region_id\n0   321500        Samuel Racine          1\n1   321510         Eugena Esser          1\n2   321520      Michel Averette          1\n3   321530        Renetta Carew          1\n4   321540          Cara Clarke          1\n..     ...                  ...        ...\n45  321950         Elwood Shutt          4\n46  321960  Maryanna Fiorentino          4\n47  321970  Georgianna Chisholm          4\n48  321980       Micha Woodford          4\n49  321990          Dawna Agnew          4\n\n[50 rows x 3 columns]\n```\n\nAnd now we're going to pass a lambda function that will take the cell value and return the number of characters by converting it to a string:\n```python\ntable = db.sales_reps.applymap(lambda x: len(str(x)))\n\nfor row in table:\n    print(row)\n```\n```\n(6, 13, 1)\n(6, 12, 1)\n(6, 15, 1)\n(6, 13, 1)\n(6, 11, 1)\n...\n```\n\nYou can also iterate directly on the table/ column object: \n```python\nfor row in db.sales_reps:\n    print(row)\n```\n```\n(321500, 'Samuel Racine', 1)\n(321510, 'Eugena Esser', 1)\n(321520, 'Michel Averette', 1)\n(321530, 'Renetta Carew', 1)\n(321540, 'Cara Clarke', 1)\n...\n```\n\nConvert a table to a `DataFrame`:\n```python\ndf = db.orders.to_df()\ntype(df)\n```\n```\npandas.core.frame.DataFrame\n```\n\nSimilarly, you can convert a column to a Pandas `Series`\n```python\nser = db.orders.occurred_at.to_series()\ntype(ser)\n```\n```\npandas.core.series.Series\n```\n\nAnd finally, you can pass an SQL query to `db.query()` which will return a `DataFrame` with the results:\n```python\nq = \"\"\"\nSELECT * FROM forest_area\nJOIN regions\n    ON regions.country_code = forest_area.country_code -- remove name and keep code ?#\n    AND regions.country_name = forest_area.country_name\nJOIN land_area\n    ON land_area.country_code = forest_area.country_code\n    AND land_area.country_name = forest_area.country_name\n    AND land_area.year = forest_area.year\n\"\"\"\ndf = db.query(q)\ndf\n```\n```\n        id  account_id          occurred_at  ...    id_3               name_2 region_id\n0        1        1001  2015-10-06 17:13:58  ...  321500        Samuel Racine         1\n1        2        1001  2015-11-05 03:08:26  ...  321500        Samuel Racine         1\n2        3        1001  2015-12-04 03:57:24  ...  321500        Samuel Racine         1\n3        4        1001  2016-01-02 00:55:03  ...  321500        Samuel Racine         1\n4        5        1001  2016-02-01 19:02:33  ...  321500        Samuel Racine         1\n...    ...         ...                  ...  ...     ...                  ...       ...\n9068  9069        4491  2016-10-04 15:43:29  ...  321960  Maryanna Fiorentino         4\n9069  9070        4491  2016-10-04 23:42:41  ...  321960  Maryanna Fiorentino         4\n9070  9071        4491  2016-11-06 07:23:45  ...  321960  Maryanna Fiorentino         4\n9071  9072        4491  2016-12-18 03:21:31  ...  321960  Maryanna Fiorentino         4\n9072  9073        4501  2016-05-30 00:46:53  ...  321970  Georgianna Chisholm         4\n\n[9073 rows x 14 columns]\n```\n\nAs you can see the duplicated columns are automatically renamed with a number at the end\n```python\ndf.columns\n```\n```\nIndex(['id', 'account_id', 'occurred_at', 'channel', 'id_2', 'name', 'website',\n       'lat', 'long', 'primary_poc', 'sales_rep_id', 'id_3', 'name_2',\n       'region_id'],\n      dtype='object')\n```\n\nClose the connection\n```python\ndb.exit()\n```\n\n ---\n\n TODO:\n - [ ] Move Table and Column objects to a dictionary\n - [ ] Support mathematical operations between Column objects (db.table.col1 * db.table.col2)\n - [ ] Replace `to_string()` in `__repr__()` with a custom one\n - [ ] Add filter function\n - [ ] Add cache system for most common properties\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/shner-elmo/db-wrapper",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pandasdb2",
            "package_url": "https://pypi.org/project/pandasdb2/",
            "platform": null,
            "project_url": "https://pypi.org/project/pandasdb2/",
            "project_urls": {
                "Homepage": "https://github.com/shner-elmo/db-wrapper"
            },
            "release_url": "https://pypi.org/project/pandasdb2/2.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "A wrapper for SQLite3",
            "version": "2.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15036724,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "dfc304c0b6f2a767bb8c2599117218be",
                    "sha256": "f144bdfe27988414bfdf5f8c3bdd6b12b3d9c474dff4a050f3e93357957992ef"
                },
                "downloads": -1,
                "filename": "pandasdb2-2.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "dfc304c0b6f2a767bb8c2599117218be",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 16117,
                "upload_time": "2022-09-08T19:12:55",
                "upload_time_iso_8601": "2022-09-08T19:12:55.020731Z",
                "url": "https://files.pythonhosted.org/packages/c6/80/4e38980a94cf7c1e7f41430912d6a19cfa9fc5018414c9327cb644626565/pandasdb2-2.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a4ac48324cacbd8d6051d45af1311977",
                    "sha256": "613355e2494d85d3f6c02994744587d2bbda99412b749a1717d02e5e53cacf2b"
                },
                "downloads": -1,
                "filename": "pandasdb2-2.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a4ac48324cacbd8d6051d45af1311977",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 17537,
                "upload_time": "2022-09-08T19:12:57",
                "upload_time_iso_8601": "2022-09-08T19:12:57.044193Z",
                "url": "https://files.pythonhosted.org/packages/d5/d7/53666f1881be166fa420bdb49e7495262e14d83d190815609a4d8f9397ca/pandasdb2-2.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}