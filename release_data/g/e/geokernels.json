{
    "0.1.3": {
        "info": {
            "author": "Sebastian Haan",
            "author_email": "sebhaan@sigmaterra.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# geokernels: Geodesic kernels for Gaussian Process regression \nThis package is an extension of scikit-learn's gaussian_process kernel package\nsklearn.gaussian_process.kernels.py.\n\nThe following kernels are added to the default kernels as geodesic kernel versions:\n\n- 'RBF_geo' (RBF kernel with geodesic distance metric)\n- 'Matern_geo' (Matern kernel with geodesic distance metric)\n- 'RationalQuadratic_geo' (Rational Quadratic kernel with geodesic distance metric)\n\nAll kernels can be used as drop-in replacement for the scikit-learn kernels RBF, Matern, \nand RationalQuadratic, respectively. \n\nThe geodesic kernels address the problem if spatial coordinates of a dataset are given\nas Latitude and Longitude (WGS84 coordinate system). This avoids the typical geospatial issue \nof having to transform the data coordinates into a local projected cartesian system beforehand, \nwhich can lead to inaccuracies at larger distances (e.g., continental scale or overlapping \nprojected coordinate reference zones). \n\nSolving the geodesic problem is accomplished by defining a kernel that combines the \ngeodesic distance metric for the spatial part with the Euclidean distance metric\nfor all non-spatial features (e.g., for spatial-temporal modeling). For more implementation\ndetails, see sklearn_geokernels.kernels.py\n\nThe geodesic distance is computed via Vincenty's solution to the inverse geodetic problem, \nwhich is based on the WGS84 reference ellipsoid and is accurate to within 1 mm or better.\nWhile the accuracy is comparable with other libraries for geodesic distance calculation,\nsuch as GeographicLib/geopy, the geodesic distance computation implemented here is optimized \nfor speed and tailored towards integration into Gaussian Process regression with scikit-learn.\nFor more details, please see references and documentation in sklearn_geokernels.geodesics.py.\n\nBoth, anisotropic (one length-scale per feature) and isotropic (same length-scale for all features) \nkernels are supported. One important difference in comparison to the default sklearn kernels is the \nsettings for the length-scale parameters in case of anisotropic kernel: Due to the non-euclidean metric \nfor the geodesic distance, only one length-scale parameter is required instead of two separate for the two \nspatial dimensions (Latitude, Longitude) of the dataset. Thus, for an anisotropic kernel, the number \nof length-scales is one less than the number of dimensions of the data. \n\n\n\n## Installation\n\n``` sh\npip install geokernels\n```\n\n## Requirements\n\n- scikit-learn\n- numba\n\n## Example\n\n``` python\n#import standard libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.gaussian_process import GaussianProcessRegressor\n# Import kernels similar to importing sklearn.gaussian_process.kernels :\nfrom geokernels.kernels import RBF_geo, Matern_geo, RationalQuadratic_geo, WhiteKernel\nfrom geokernels.test_kernels import make_simdata1\n\n# Add data: needs to include in the first two columns Latitude (first) and Longitude (second) coordinates.\n# for testing use function make_simdata1 to generate 3 dim dataset (first two dimensions are Latitude, Longitude):\nX, y = make_simdata1(n_samples = 100, noise = 0.1) \n\n# Split in train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Define Kernel. Here we choose an anisotropic RBF kernel. Note that there is only one length-scale parameter for\n# the geodesic distance based on the combined first two features, Latitude and Longitude, and one length-scale\n# per remaining feature (in this case only one more). See description above\nkernel = 1.0 * (\n    RBF_geo(length_scale = [1e6, 1], length_scale_bounds = [(1e4, 1e7),(0.1, 1e4)]) \n    + WhiteKernel(noise_level_bounds=(1e-4, 10)))\n\ngp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=7)\n# Fit GP, which includes default hyperparameter optimization\ngp.fit(X_train, y_train)\n\n# Make predictions on test data\ny_pred, y_std = gp.predict(X_test, return_std=True)\ngp.score(X_test, y_test)\n```\n\n## Testing\n\nTest functions and more examples can be found in geokernels.test_geodesics and geokernels.test_kernels. \n\nTest for all kernels:\n``` python\nfrom geokernels.test_kernels import test_allkernels\ntest_allkernels()\n```\nComparison between geokernel's geodesic distance implementation and geographiclib/geopy:\n(Note that this requires installation of at least geographiclib: pip install geographiclib)\n``` python\nfrom geokernels.test_geodesics import test_geodesic_vincenty, test_geodesic_geographiclib, test_accuracy\ndist_vincenty = test_geodesic_vincenty()\ndist_geographiclib = test_geodesic_geographiclib()\ntest_accuracy()\n```\n\n## References\n\n- Carl Edward Rasmussen, Christopher K. I. Williams (2006). \u201cGaussian Processes for Machine Learning\u201d. The MIT Press.\n- David Duvenaud (2014). \u201cThe Kernel Cookbook: Advice on Covariance functions\u201d.\n- Vincenty, Thaddeus (August 1975b). Geodetic inverse solution between antipodal points. DMAAC Geodetic Survey Squadron. doi:10.5281/zenodo.32999.\n- https://scikit-learn.org/stable/modules/classes.html#module-sklearn.gaussian_process\n- https://en.wikipedia.org/wiki/Vincenty's_formulae\n\n\n## Contributors\n\nWritten by: Sebastian Haan\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/sigmaterra/geokernels",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "geokernels",
            "package_url": "https://pypi.org/project/geokernels/",
            "platform": null,
            "project_url": "https://pypi.org/project/geokernels/",
            "project_urls": {
                "Homepage": "https://github.com/sigmaterra/geokernels"
            },
            "release_url": "https://pypi.org/project/geokernels/0.1.3/",
            "requires_dist": [
                "numba (>=0.53)",
                "scikit-learn (>=1.0)"
            ],
            "requires_python": ">=3.8",
            "summary": "Geodesic Gaussian Process kernels for scikit-learn",
            "version": "0.1.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14531224,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0e437f1b29eae696debaca37412ad87e",
                    "sha256": "0675ba816c4ada2fd401ad2c2b359dd722f18e445ad6cd700c8df4c5b50b9170"
                },
                "downloads": -1,
                "filename": "geokernels-0.1.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "0e437f1b29eae696debaca37412ad87e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 56705,
                "upload_time": "2022-07-22T00:50:26",
                "upload_time_iso_8601": "2022-07-22T00:50:26.505316Z",
                "url": "https://files.pythonhosted.org/packages/93/d6/b58c173e5838a10e8bd124cb6cfc2aba8284a3f3c764249957f91f384f31/geokernels-0.1.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bb40fb20e2e9de0d4d0ea1983dd81064",
                    "sha256": "266070bcbddae7aeda9324301c4f5c286935617174b8d77010277484d4928a8b"
                },
                "downloads": -1,
                "filename": "geokernels-0.1.3.tar.gz",
                "has_sig": false,
                "md5_digest": "bb40fb20e2e9de0d4d0ea1983dd81064",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 29191,
                "upload_time": "2022-07-22T00:50:30",
                "upload_time_iso_8601": "2022-07-22T00:50:30.928886Z",
                "url": "https://files.pythonhosted.org/packages/39/74/72299d67117aee077a4817b41ddf4df999a79e87a0dd6b0e0a72092edd94/geokernels-0.1.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}