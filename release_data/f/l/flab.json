{
    "0.0.6": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/0.0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "0.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f85742fa73580bd23cf848fcf7222919",
                    "sha256": "a963764e16d4a3a14b0611a23f70660811f8108bfac8276cb46cc34d1735a1b4"
                },
                "downloads": -1,
                "filename": "flab-0.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f85742fa73580bd23cf848fcf7222919",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31142,
                "upload_time": "2022-01-06T05:09:27",
                "upload_time_iso_8601": "2022-01-06T05:09:27.996679Z",
                "url": "https://files.pythonhosted.org/packages/29/f0/8add041f1ae7d840407714aff8c46d87573131264381601b0ee244208d12/flab-0.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "94dcad2eaf60c3cf938ec7775fa29de3",
                    "sha256": "5509bc50d3a9beaba43ccce6af7745fd91ec4cb1e316257ca292aeffcf54efad"
                },
                "downloads": -1,
                "filename": "flab-0.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "94dcad2eaf60c3cf938ec7775fa29de3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 46937,
                "upload_time": "2022-01-06T05:09:29",
                "upload_time_iso_8601": "2022-01-06T05:09:29.848147Z",
                "url": "https://files.pythonhosted.org/packages/56/27/580b86b712a48b2f27b0d97eab663d2de7b24d5ef67c2bf4abe7f2199a88/flab-0.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.0": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "897731efd159b9f4d775ee87a87ea65b",
                    "sha256": "6cf118484f08bff7cdc4e3438aecd54365252fa63594e1b77fae52acf8c9c3f5"
                },
                "downloads": -1,
                "filename": "flab-1.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "897731efd159b9f4d775ee87a87ea65b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31716,
                "upload_time": "2022-01-20T14:00:31",
                "upload_time_iso_8601": "2022-01-20T14:00:31.862148Z",
                "url": "https://files.pythonhosted.org/packages/13/be/369b4051457453113c548552e23c59df259035ffae46a6a7174a0cbee3c2/flab-1.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "80f64f7da3254b965d6c7691313012a1",
                    "sha256": "2dfd1a0d5d18680a8fb6ae69214119e9d3f3685db777bf1209437c5110ff4d6d"
                },
                "downloads": -1,
                "filename": "flab-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "80f64f7da3254b965d6c7691313012a1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47394,
                "upload_time": "2022-01-20T14:00:33",
                "upload_time_iso_8601": "2022-01-20T14:00:33.874197Z",
                "url": "https://files.pythonhosted.org/packages/da/e5/7beedd578b1914fe0b9e456caaff2f17ba2b4ccbb0fd26c4accbf63ee1e3/flab-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.1": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f5725809bbf44104cc7d2656d3594529",
                    "sha256": "3967a493977adfde5a9831a50cc727bf77400167bf3f7130523fbb4f74d1c1c7"
                },
                "downloads": -1,
                "filename": "flab-1.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f5725809bbf44104cc7d2656d3594529",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31718,
                "upload_time": "2022-01-20T14:28:29",
                "upload_time_iso_8601": "2022-01-20T14:28:29.503754Z",
                "url": "https://files.pythonhosted.org/packages/49/e4/ba517d3be190864c1a5248ce322556c50db6f8d50f504f464f8decde85e1/flab-1.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "041e28a0b5004cdd7bc26733d50b36e4",
                    "sha256": "433143234636b6cdb89906242d2163139b4d25478daff8ad2cfe8d08e32795e6"
                },
                "downloads": -1,
                "filename": "flab-1.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "041e28a0b5004cdd7bc26733d50b36e4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47402,
                "upload_time": "2022-01-20T14:28:31",
                "upload_time_iso_8601": "2022-01-20T14:28:31.889756Z",
                "url": "https://files.pythonhosted.org/packages/22/e6/41ac1221138fcc9e676490f9a7c308a72421e48ec8c4bb034be7315b5971/flab-1.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.2": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2a6cfcd63a360f3f7edd52aa26070e19",
                    "sha256": "9e2ad31fdbf8b38fe293b930454f0e231555479073fed3ca8b1c514ba65719fb"
                },
                "downloads": -1,
                "filename": "flab-1.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2a6cfcd63a360f3f7edd52aa26070e19",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31800,
                "upload_time": "2022-01-20T18:23:51",
                "upload_time_iso_8601": "2022-01-20T18:23:51.673822Z",
                "url": "https://files.pythonhosted.org/packages/f2/44/01d7a944195cc886b7961b819bcbc94d97d4ab89f9c71584441199aa1270/flab-1.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "72ca8dc62ca85662f37ca6e9b4a1b28b",
                    "sha256": "e688912f4c04875348809da31a96f5c11e35b9861f5e2ca2b473e5468d526bb0"
                },
                "downloads": -1,
                "filename": "flab-1.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "72ca8dc62ca85662f37ca6e9b4a1b28b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47613,
                "upload_time": "2022-01-20T18:23:53",
                "upload_time_iso_8601": "2022-01-20T18:23:53.832507Z",
                "url": "https://files.pythonhosted.org/packages/03/05/50d9d9499a90911e92ae35e3aa257cd19760a4fb8cb9c71db333e3229eeb/flab-1.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.3": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.3/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "25fed51af8aa33fde7e886fec068c593",
                    "sha256": "435f69fee34a757d58124769a6b67fe3667d6a8bb7984e6a1eb1c161cd43e412"
                },
                "downloads": -1,
                "filename": "flab-1.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "25fed51af8aa33fde7e886fec068c593",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31803,
                "upload_time": "2022-01-20T18:29:55",
                "upload_time_iso_8601": "2022-01-20T18:29:55.706875Z",
                "url": "https://files.pythonhosted.org/packages/69/a3/4c432176ae70aa6c052916b8dd0ee66a4a7251b2e06a7a7a462f05897793/flab-1.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "22a99d0a1a7a47e54b7594d899772df6",
                    "sha256": "805dce989875b4433ffc35e329bdf2b0908a531d0a305b2ed014fef8ccd87035"
                },
                "downloads": -1,
                "filename": "flab-1.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "22a99d0a1a7a47e54b7594d899772df6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47626,
                "upload_time": "2022-01-20T18:29:57",
                "upload_time_iso_8601": "2022-01-20T18:29:57.652451Z",
                "url": "https://files.pythonhosted.org/packages/30/4b/8f46f5f182f40ff21666a8b605a892cab1c9547584847567ebfe61df901b/flab-1.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.4": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.4/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "83bd3cf13b390ca37128d52775a35ac3",
                    "sha256": "8ec80710b21d8389f863c5d0e2b929209d597f4461b054633fa7b52ee561a6d8"
                },
                "downloads": -1,
                "filename": "flab-1.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "83bd3cf13b390ca37128d52775a35ac3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31828,
                "upload_time": "2022-01-20T18:34:25",
                "upload_time_iso_8601": "2022-01-20T18:34:25.890542Z",
                "url": "https://files.pythonhosted.org/packages/1f/1a/d691427ce81584b67aa086dbc3746df5c96e46f26e522c0886ca3cd41ffe/flab-1.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "da8be193bb419bbdb74f18b592d1583c",
                    "sha256": "6e80190eb33a696bb71e1268998754b87907a4d19814a73218df19ba8a505c95"
                },
                "downloads": -1,
                "filename": "flab-1.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "da8be193bb419bbdb74f18b592d1583c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47641,
                "upload_time": "2022-01-20T18:34:27",
                "upload_time_iso_8601": "2022-01-20T18:34:27.994476Z",
                "url": "https://files.pythonhosted.org/packages/c6/d5/32c0eb740f9bc54fc19804b0862fa2b0ea3cbbbc3d66c8710d522dde53d7/flab-1.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.5": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.5/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "c29b3d93ea528cde74a974d57538b307",
                    "sha256": "3d4287052867565a8890315cf2f9ae25da7d9fce9196d09ccb1f28c93ee0379c"
                },
                "downloads": -1,
                "filename": "flab-1.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "c29b3d93ea528cde74a974d57538b307",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31881,
                "upload_time": "2022-01-20T18:46:35",
                "upload_time_iso_8601": "2022-01-20T18:46:35.270167Z",
                "url": "https://files.pythonhosted.org/packages/46/7b/982332ba959571fc84bbc41d1299dcc4c136b14674ae87469d50cf9b780b/flab-1.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a02e7d0d0bef1d854cda9cd3dfb0be17",
                    "sha256": "971bd9daf026ce30a283e02b4c727632f36da9e4ab09704aa60d05a823ac445a"
                },
                "downloads": -1,
                "filename": "flab-1.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "a02e7d0d0bef1d854cda9cd3dfb0be17",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47708,
                "upload_time": "2022-01-20T18:46:36",
                "upload_time_iso_8601": "2022-01-20T18:46:36.977497Z",
                "url": "https://files.pythonhosted.org/packages/24/0d/5a93c372da35551413b5c23b55c6f7316960983d4ef20955063357c58c48/flab-1.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.6": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.6/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6ea38ca5f69d7196c59d6b99cda81e21",
                    "sha256": "8095893c6e82f440b6dd3c01220de64952b19c4f5c39dbb5f733a9676623d554"
                },
                "downloads": -1,
                "filename": "flab-1.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6ea38ca5f69d7196c59d6b99cda81e21",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31895,
                "upload_time": "2022-01-20T18:52:33",
                "upload_time_iso_8601": "2022-01-20T18:52:33.520754Z",
                "url": "https://files.pythonhosted.org/packages/f4/bf/037d7e6fdd62123d660913b64b21afab6c19fa790c0f22c11f260b3e6706/flab-1.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ce1ed7971e33863567da0c3bb0fef296",
                    "sha256": "eefc596637b3e1f9b15fde98bc9136f85533413923c42b91df17a99f2a4750e4"
                },
                "downloads": -1,
                "filename": "flab-1.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "ce1ed7971e33863567da0c3bb0fef296",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47744,
                "upload_time": "2022-01-20T18:52:35",
                "upload_time_iso_8601": "2022-01-20T18:52:35.187727Z",
                "url": "https://files.pythonhosted.org/packages/5c/65/93e9e0805a5b616a8ae0ee7a98ca6bed53747815214e8cdcab4dd6bad4a7/flab-1.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.7": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.7/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4acd81a696f82e6d45802e8d79f3df65",
                    "sha256": "5d82d482c2510b0d164069462110ebb78fa3e68f8e6a7c1a0cebfa4a5089f1bf"
                },
                "downloads": -1,
                "filename": "flab-1.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4acd81a696f82e6d45802e8d79f3df65",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31943,
                "upload_time": "2022-01-24T15:27:02",
                "upload_time_iso_8601": "2022-01-24T15:27:02.968571Z",
                "url": "https://files.pythonhosted.org/packages/c3/6d/d1d7a53fd199a8fa8001ae67d07f1a3a71428d3b481f503ec3d9178d73a0/flab-1.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e31545d4ede226b29a6f53c17ee63019",
                    "sha256": "30b5b5947d0e6fee8d38a0bb5c173f3d9635664dcfb792c8a931b389dba6f5de"
                },
                "downloads": -1,
                "filename": "flab-1.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "e31545d4ede226b29a6f53c17ee63019",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47700,
                "upload_time": "2022-01-24T15:27:05",
                "upload_time_iso_8601": "2022-01-24T15:27:05.157611Z",
                "url": "https://files.pythonhosted.org/packages/78/5e/852666d4c8e31bceb99b7aedf18da9af5e98d4bd6df982babccf7ff35ede/flab-1.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0.8": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": "",
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.0.8/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.0.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "704946700f2182142d554af34e011328",
                    "sha256": "cff323efb71d52f2c03d871ffc85d45976a932f2a356c2d73e73e567c1b6753b"
                },
                "downloads": -1,
                "filename": "flab-1.0.8-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "704946700f2182142d554af34e011328",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 31955,
                "upload_time": "2022-01-24T15:36:24",
                "upload_time_iso_8601": "2022-01-24T15:36:24.478985Z",
                "url": "https://files.pythonhosted.org/packages/07/37/57e550b2257b8199e6f1b91cfdd8d0760c2111610d4aa40054616e1e8aac/flab-1.0.8-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "371603cd93b9e64dd8c7b698947d50e2",
                    "sha256": "dfb112f242e8366a4176e577366bb13190819cb8548a8b882a999fd0fded4ecb"
                },
                "downloads": -1,
                "filename": "flab-1.0.8.tar.gz",
                "has_sig": false,
                "md5_digest": "371603cd93b9e64dd8c7b698947d50e2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 47717,
                "upload_time": "2022-01-24T15:36:26",
                "upload_time_iso_8601": "2022-01-24T15:36:26.282898Z",
                "url": "https://files.pythonhosted.org/packages/5e/ed/311c8b79268ad43fcaf0c6fd86d2d00d3a1d4e34d10f2f72e741ecedfa60/flab-1.0.8.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.0": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e407ee2f0d70328afbf3800856255ee1",
                    "sha256": "f947ef835f1c003686fa11741428932e0e2015859a6af48f32ed268149013cd2"
                },
                "downloads": -1,
                "filename": "flab-1.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e407ee2f0d70328afbf3800856255ee1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 32382,
                "upload_time": "2022-04-07T13:54:32",
                "upload_time_iso_8601": "2022-04-07T13:54:32.273494Z",
                "url": "https://files.pythonhosted.org/packages/08/5f/02e4bad0c080909b5d4296bc4da5d1cc63711ff14337983599cd4e2b36de/flab-1.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0dbc2c0bcb554ed209b2b78e51af2e20",
                    "sha256": "d89336b29804d8588d02624e4757b3ebb7b9585f15a0a3e60fc6e9154995fb0b"
                },
                "downloads": -1,
                "filename": "flab-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "0dbc2c0bcb554ed209b2b78e51af2e20",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 48525,
                "upload_time": "2022-04-07T13:54:34",
                "upload_time_iso_8601": "2022-04-07T13:54:34.526969Z",
                "url": "https://files.pythonhosted.org/packages/36/8c/40fe626d5e8fd821bc37ce751f7d2f547f95e0576fa57071c1001eaa76a5/flab-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.1": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/1.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "1.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "38d4a23bd49884e5af9ddb18c8b19c23",
                    "sha256": "53db21218d08ecd68c5e2a31df96b4202bebbc808a07359e5ba0b90292036f28"
                },
                "downloads": -1,
                "filename": "flab-1.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "38d4a23bd49884e5af9ddb18c8b19c23",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 32717,
                "upload_time": "2022-04-11T18:09:06",
                "upload_time_iso_8601": "2022-04-11T18:09:06.845352Z",
                "url": "https://files.pythonhosted.org/packages/cf/8b/c99efb2fa87f0ba693fce019c2f2f659d2adcb9b285288a3f91d5751481a/flab-1.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "20093df3c2b47c25a76d5af47c1bded4",
                    "sha256": "e9a52ffcc937f2c81883c30ee514f586d48f014ac00bbd75e43f510dae4b8867"
                },
                "downloads": -1,
                "filename": "flab-1.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "20093df3c2b47c25a76d5af47c1bded4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 49131,
                "upload_time": "2022-04-11T18:09:09",
                "upload_time_iso_8601": "2022-04-11T18:09:09.772516Z",
                "url": "https://files.pythonhosted.org/packages/0e/b6/fc45e2d18c2b8c723ebef491211cd4fea8bb783c5687cbf0cd8aed5c91a3/flab-1.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.0": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.0/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "02cf7917b851be27547171b2be11d841",
                    "sha256": "78f3712461a8bc649cc7c986007f8ef70673afec0902a6eb69287a4c55b898d1"
                },
                "downloads": -1,
                "filename": "flab-2.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "02cf7917b851be27547171b2be11d841",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 35570,
                "upload_time": "2022-07-17T18:26:12",
                "upload_time_iso_8601": "2022-07-17T18:26:12.756859Z",
                "url": "https://files.pythonhosted.org/packages/ec/5c/ba039acc0782d00885e64f052bf04e8e2e185caa186660c43db491adfd85/flab-2.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "93d5e55747a649fa5416f0e14c3fc764",
                    "sha256": "e7c8d2a9c3c9efc297d76993aae8ac0f21e76c849e63b613aca460da6b5e6e55"
                },
                "downloads": -1,
                "filename": "flab-2.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "93d5e55747a649fa5416f0e14c3fc764",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 51132,
                "upload_time": "2022-07-17T18:26:16",
                "upload_time_iso_8601": "2022-07-17T18:26:16.428273Z",
                "url": "https://files.pythonhosted.org/packages/00/19/ba518db478e2b6895b6cc2550c5a2618027ee17da005f4aec243110b25aa/flab-2.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.1": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "ebeaee30237d237d0aa2d27b4a2ef829",
                    "sha256": "d79aafdc6a3c3641393210f5341a40a87a41a11a31aadc16057816dc6c2bc6ef"
                },
                "downloads": -1,
                "filename": "flab-2.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "ebeaee30237d237d0aa2d27b4a2ef829",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 35996,
                "upload_time": "2022-07-17T18:48:46",
                "upload_time_iso_8601": "2022-07-17T18:48:46.297384Z",
                "url": "https://files.pythonhosted.org/packages/b7/41/6e3d62125002307859216f842ca2f298e53365c5a0d5bdfde2b8909b9584/flab-2.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "a5e72d0b7940e854c096b65695c45c0d",
                    "sha256": "f5ee56920af246ecef2cd329703df7a1500c811af72a5d34a0778e38c2882f00"
                },
                "downloads": -1,
                "filename": "flab-2.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "a5e72d0b7940e854c096b65695c45c0d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 52381,
                "upload_time": "2022-07-17T18:48:49",
                "upload_time_iso_8601": "2022-07-17T18:48:49.486222Z",
                "url": "https://files.pythonhosted.org/packages/df/03/8498b18c6e8ec8f380799541e33f6852f7907e8266d6d7f2b62b21b7dcfe/flab-2.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.2": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cd4ea6f7fa3eca4a0af8b5d838058de3",
                    "sha256": "a89bcd9f028a2933506661934a312a9f9ea7f95cd11a730ef15eefbfec143f80"
                },
                "downloads": -1,
                "filename": "flab-2.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "cd4ea6f7fa3eca4a0af8b5d838058de3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 38684,
                "upload_time": "2022-10-14T15:22:44",
                "upload_time_iso_8601": "2022-10-14T15:22:44.662680Z",
                "url": "https://files.pythonhosted.org/packages/5c/08/049755275286726b36e1ad9ba00ae46256a713e2daecd04ecddba9b531ac/flab-2.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "591adc9943667d525f70ed3c58db75b4",
                    "sha256": "c6c897886afac2c9d0e3321ac2ccf68e48b47ec06b3ab052dba5d1ea0d879c7d"
                },
                "downloads": -1,
                "filename": "flab-2.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "591adc9943667d525f70ed3c58db75b4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55395,
                "upload_time": "2022-10-14T15:22:46",
                "upload_time_iso_8601": "2022-10-14T15:22:46.911559Z",
                "url": "https://files.pythonhosted.org/packages/55/bb/0f4d85f586fbf55be05f10d98854ae5971bd6d7b6088cffa8c62bc0bca66/flab-2.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.3": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.3/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4e8f8216faf090a818f4196b4a812084",
                    "sha256": "71445bbd3d3e713c1257d85e0cff92dd6ca06e57855065caba939be6d3b40bde"
                },
                "downloads": -1,
                "filename": "flab-2.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4e8f8216faf090a818f4196b4a812084",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 39157,
                "upload_time": "2022-10-14T16:49:43",
                "upload_time_iso_8601": "2022-10-14T16:49:43.033418Z",
                "url": "https://files.pythonhosted.org/packages/ef/53/77410b498155247b8a7c23b1ce9c029781a1a4b4ba1d797f6f102896b5fa/flab-2.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "7ce654e297fa458e2e4e839f826d5d34",
                    "sha256": "ecc795fa25b4d11c562c38aa9fb3726e1fc5535c3f4bae04a3b562be9793f76b"
                },
                "downloads": -1,
                "filename": "flab-2.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "7ce654e297fa458e2e4e839f826d5d34",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55555,
                "upload_time": "2022-10-14T16:49:44",
                "upload_time_iso_8601": "2022-10-14T16:49:44.872166Z",
                "url": "https://files.pythonhosted.org/packages/71/de/88aecfa445a8cc17b82c825910141a83dabd76e253312aa277b22121c96d/flab-2.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.4": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.4/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "506f76998b158dc04f68a684ca4632e7",
                    "sha256": "ece573e2fdcad1abe91ba967da5efb86adc9c77b7e95ac47539aec02544c42b8"
                },
                "downloads": -1,
                "filename": "flab-2.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "506f76998b158dc04f68a684ca4632e7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 39168,
                "upload_time": "2022-10-14T18:06:36",
                "upload_time_iso_8601": "2022-10-14T18:06:36.957540Z",
                "url": "https://files.pythonhosted.org/packages/fb/ca/0fea5f1ef13e758468b35c9e05532695274ca09b46242e613597af5e735c/flab-2.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "99e1dd47a7d5563318a296913aac4122",
                    "sha256": "730f629005de0330cde965e92819626616ac8d94d4e031be7373e8c9f2154717"
                },
                "downloads": -1,
                "filename": "flab-2.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "99e1dd47a7d5563318a296913aac4122",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55586,
                "upload_time": "2022-10-14T18:06:39",
                "upload_time_iso_8601": "2022-10-14T18:06:39.494021Z",
                "url": "https://files.pythonhosted.org/packages/f9/2f/806148fce3bfc1e1e36bf873ac323183336fcca1edb3553c1d2c30c2f420/flab-2.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.5": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.5/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5ac815ed86b3c008219818f0d47dd86a",
                    "sha256": "7759e33852cfa5d55ad90e58a85f7fde99d7199a23571f7074442efec48291d2"
                },
                "downloads": -1,
                "filename": "flab-2.0.5-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5ac815ed86b3c008219818f0d47dd86a",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 39208,
                "upload_time": "2022-10-14T18:09:37",
                "upload_time_iso_8601": "2022-10-14T18:09:37.708642Z",
                "url": "https://files.pythonhosted.org/packages/1d/5c/e3fee99906d5a3d8f9f1a06c08b720ee6689cd93503c171f7414c1dec9df/flab-2.0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "cf9c5783bababad64ccd25212d1f9f73",
                    "sha256": "e4266532039821e9842cc07285c460926f7c5d42960e7d216e5198cfc93b427a"
                },
                "downloads": -1,
                "filename": "flab-2.0.5.tar.gz",
                "has_sig": false,
                "md5_digest": "cf9c5783bababad64ccd25212d1f9f73",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55687,
                "upload_time": "2022-10-14T18:09:40",
                "upload_time_iso_8601": "2022-10-14T18:09:40.307163Z",
                "url": "https://files.pythonhosted.org/packages/9f/da/f883a6a0312ba581a966059c3172144c9b1a26d245528fac717854566a19/flab-2.0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.6": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.6/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.6",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "a3c5fa5b666bd215f11664225b0b86be",
                    "sha256": "5e6894461474de2c5073e89dab8a17bb5aa8b07a051a960c1df3eb401cfe6755"
                },
                "downloads": -1,
                "filename": "flab-2.0.6-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "a3c5fa5b666bd215f11664225b0b86be",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 39128,
                "upload_time": "2022-10-17T11:54:05",
                "upload_time_iso_8601": "2022-10-17T11:54:05.205694Z",
                "url": "https://files.pythonhosted.org/packages/38/12/9e0c88f90dab3e5c2a516a98745c45d9eea573b803643664c02cc195768d/flab-2.0.6-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8015afdea67d77ccf9ee6a241db8ff8d",
                    "sha256": "5806f14ec5a0723222394f0aff0e73fc45d9e6ae4c505ad7fe43b4490acac66e"
                },
                "downloads": -1,
                "filename": "flab-2.0.6.tar.gz",
                "has_sig": false,
                "md5_digest": "8015afdea67d77ccf9ee6a241db8ff8d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55287,
                "upload_time": "2022-10-17T11:54:07",
                "upload_time_iso_8601": "2022-10-17T11:54:07.532583Z",
                "url": "https://files.pythonhosted.org/packages/52/5f/4c12d20c11a90427a3efabaf6368b125c1f63fa706745630aa26f1245fd9/flab-2.0.6.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "2.0.7": {
        "info": {
            "author": "Nicholas A. Jose",
            "author_email": "njose40707@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# flab\n\nAuthor: Nicholas A. Jose\n\nFor code documentation, go to https://flab.readthedocs.io/en/latest/\n\n## Recent Updates\n1.0.0: Device objects have publicly accessible attributes and methods.\n\n1.0.7: Resolution of bug in booting. Boot script no longer requires changing of directories.\n\n1.1.0: Resolved issues in closing flab and multiprocessing. Requires Python 3.9 or later\n\n1.1.1: Resolved issue in listing tasks\n\n2.0.0: BootManager contains functionality for network communication. Flab objects are now initialized with queues as \noptional arguments. TaskManager no longer implements QThread (as a \"QTask\") such that\nflab is no longer dependent on PyQT. Templates are now included within flab.Templates. These are DeviceTemplate, DriverTemplate\nand ProtocolTemplate, which may be inherited by Device classes.\n\n2.0.1: Resolved bug in distribution\n\n2.0.2: Docstrings created \n\n2.0.3: Docstrings amended\n\n2.0.4/2.0.5: Setup file amended\n\n2.0.6/7: Resolved bug in Flab inheritance\n\n## Summary\n\nFlab was created to be a fast, flexible and fun framework for creating automated chemical laboratories. As a coding\nframework, rather than defining specific sequence of automated actions, FLab aims to make the task of creating automated \nsystems significantly simpler. \n\nFlab achieves its flexibility via the following principles:\n\n1. Modularity via inheritance\n2. Parallelization via threaded, asynchronous and multiprocess computing\n3. Synchronization via a universal object space\n4. Intuitive via minimalist and physically relevant ontologies\n5. Accessible via open-source distribution (currently under GNU GPL v3)\n\nFlab abstracts an experimental project into its main components: \n1. physical devices (the Device class)\n2. actions (the Task class)\n3. user interfaces (the UI class)\n\nThis package provides methods for the management of a shared object space (the Flab class), parallel/synchronised tasks \n(the TaskManager class), configuring shared devices (the DeviceManager class), and interfaces (the UiManager class).\nThis package also includes methods for running a given project (BootManager)\n\n## Installation\n\nTo install flab, enter into the terminal\n\n    python3 -m pip install flab\n\nThe dependency PyQt5 must also be installed, using\n\n    python3 -m pip install PyQt5\n\n## Directory structure\nBefore beginning any project with Flab, the working directory must be set up properly.\nThe working directory has the following structure. All projects are stored in the \"Projects\" folder. Any other code \n(such as a custom flab distribution) or data can also be kept in this working directory.\n\n    Working_directory/\n    \n    \u2502  \u251c Projects/\n    \n    \u2502  \u2502  \u251c example_project_1/ \n    \n    \u2502  \u2502  \u2514 example_project_2/\n    \n    \u2502  \u2514 Other_folders/\n\n\nA project directory has the following structure: \n\n    example_project/\n    \n    \u251c Boot/\n    \n    \u251c Tasks/\n\n    \u251c Devices/\n    \n    \u2502  \u251c Drivers/ \n    \n    \u2502  \u2514 Protocols/\n    \n    \u251c UIs/\n    \n    \u2502  \u251c Actions/ \n    \n    \u2502  \u2514 Designs/\n\n    \u2502  \u2514 Windows/\n\n\nA project directory may be automatically created using flab's create_project_directory() method\n\n## Flab Objects\n\nA Flab object acts as a space for the shared storage of:\n1. devices (in the devices dictionary)\n2. tasks (in the tasks dictionary)\n3. variables (in the vars dictionary), \n4. modules (in the modules dictionary)\n\nThe Flab class inherits DeviceManager, TaskManager and UiManager, such that methods in those classes may be easily \ncustomized. These managers contain methods for manipulating devices, tasks and ui's.\n\nA Flab object can also be created with optional queues to enable communication with a user interface (the \"ui_queue\") and a \nmachine (\"flab_queue\"), which are None by default. Messages from flab can also be output to the terminal/command line with the \nboolean \"print_status\"\n\nExample usage: Creating flab without queues and not printing to the command line/terminal\n\n    from flab import Flab\n    flab = Flab.Flab(print_status = False)\n\n## Tasks\n\nTasks are essentially routines or programs, which can be run in a variety of fashions depending on user input. Task files\nare saved as python files with the Tasks folder of a project.\n\nTasks must be first loaded into flab with the load_task(task_name) method. They may then be started or stopped using the \nstart_task(task_name, *args, **kwargs) and stop_task(task_name, *args, **kwargs) methods.\n\nExample usage:\n\n    flab.load_task('HelloWorld')\n    flab.start_task('HelloWorld')\n    flab.stop_task('HeloWorld')\n\nMultiple tasks can be loaded simulataneously with the flab.load_tasks method. All the tasks in a given project can be loaded \nusing flab.load_all_tasks(). Tasks can also be dynamically reloaded by using the reload_task and reload_tasks \nmethods. All tasks may be stopped in one line with the command \"flab.stop_all_tasks()\". Task objects do not have publicly accessible\nattributes.\n\nEach task requires three attributes:\n1. task_name: a string that matches the filename\n2. task_type: a string that determines how the task is run. Either \"thread\", \"asyncio\" or \"process\"\n3. task_stopped: a Boolean flag indicating if the task has been stopped.\n\nEach task requires three methods:\n\n1. __ init __(self, flab): initializes the Task object with the shared flab space\n2. run(self, *args, **kwargs): this is called when flab.start_task is called. This method can contain while loops, which\n       can be externally closed with the flag task_stopped.\n3. stop(self, *args, **kwargs): this is called when flab.stop_task is called. This method can be used to modify the task_stopped\n   flag\n\n###Threaded Tasks\n\nBy default,\nall tasks are \"threads\" -- meaning that they run on a single CPU and are essentially \"queued.\" See python's threading library\nfor a more detailed description.\n\nThreaded Task Example:\n\n    #HelloWorld continuously prints 'HelloWorld' every second until stopped\n\n    import time\n    class Task():\n    \n        task_name = 'HelloWorld'\n        task_type = 'thread'\n        task_stopped = False\n    \n        def __init__(self,flab):\n            self.flab = flab\n    \n        def run(self):\n            self.task_stopped = False\n            while not self.task_stopped:\n                print('Hello World')\n                time.sleep(1)\n    \n        def stop(self):\n            self.flab.tasks['HelloWorld'].task_stopped = True\n\n\n###Asyncio Tasks\n\nAn asynchronous task can be used to make running some routines more efficient. This utilizes\npython's asyncio library.\n\nAn asyncio task has several key differences to a threaded task:\n1. the asyncio library must be imported\n2. task_type = 'asyncio'\n3. run and stop methods must be defined with an \"async\" prefix, shown below:\n    \n    \n    async def run(self):...\n    \n    async def stop(self):...\n\n4. instead of using python's time.sleep(seconds) method for blocking, use:\n\n    await asyncio.sleep(seconds)\n\nAsyncio Task Example 1:\n\n    #This task prints Hello World continuously, every second, until stopped.\n\n    import asyncio\n    class Task():\n    \n        task_name = 'HelloWorldAsyncio'\n        task_type = 'asyncio'\n        task_stopped = False\n    \n        def __init__(self,flab):\n            self.flab = flab\n    \n        async def run(self):\n            self.task_stopped = False\n            while not self.task_stopped:\n                print('Hello World')\n                await asyncio.sleep(1)\n    \n        async def stop(self):\n            self.flab.tasks['HelloWorldAsyncio'].task_stopped = True #a flag to stop the script\n\nThere are two ways to run multiple asyncio tasks simultaneously. The first requires the definition of multiple asyncio\nfunctions within one task. If this is done, the functions must be gathered at the end of the run method, as seen in the example\nbelow.\n\n    #This task runs two counting tasks asynchronously. \n    #A flab variable \"count\" is used for counting.\n    #count() adds one to the count\n    #count2() adds two to the count\n    #when run correctly, the Python console should print multiples of three\n\n    import asyncio\n    class Task():\n    \n        task_name = 'CountAsyncio'\n        task_type = 'asyncio'\n        task_stopped = False\n    \n        def __init__(self,flab):\n            self.flab = flab\n    \n        async def run(self):\n            self.task_stopped = False\n            self.flab.add_var(0, 'count')\n            async def count():\n                while not self.task_stopped:\n                    self.flab.vars['count'] = self.flab.vars['count'] + 1\n                    await asyncio.sleep(1)\n                    print(self.flab.vars['count'])\n            async def count2():\n                while not self.task_stopped:\n                    self.flab.vars['count'] = self.flab.vars['count'] + 2\n                    await asyncio.sleep(1)\n            await asyncio.gather(count(),count2())\n    \n        async def stop(self):\n            self.flab.tasks['scratch'].task_stopped = True #a flag to stop the script\n\nIn the second manner, two separate asyncio tasks may be defined separately. However, both tasks must be called simultaneously\nusing flab.start_asyncio_tasks(task_names), where task_names is a list of the task names\n   \nExample: AsyncCount\n \n    #This task runs one counting task asynchronously. \n    #A flab variable \"count\" is used for counting.\n    #This task increases the count by one and prints the current count value\n\n    import asyncio\n\n    class Task():\n\n        task_name = 'AsyncCount'\n        task_type = 'asyncio'\n        task_stopped = False\n    \n        def __init__(self,flab):\n            self.flab = flab\n    \n        async def run(self):\n            self.task_stopped = False\n            self.flab.add_var(0, 'count')\n            while not self.task_stopped:\n                self.flab.vars['count'] = self.flab.vars['count'] + 1\n                await asyncio.sleep(1)\n                print(self.flab.vars['count'])\n    \n        async def stop(self):\n            self.flab.tasks['AsyncCount'].task_stopped = True #a flag to stop the script\n\nExample: AsyncCount2\n\n    #This task runs one counting task asynchronously. \n    #A flab variable \"count\" is used for counting.\n    #This task increases the count by two\n\n    import asyncio\n\n    class Task():\n    \n        task_name = 'AsyncCount2'\n        task_type = 'asyncio'\n        task_stopped = False\n    \n        def __init__(self,flab):\n            self.flab = flab\n    \n        async def run(self):\n            self.task_stopped = False\n            while not self.task_stopped:\n                self.flab.vars['count'] = self.flab.vars['count'] + 2\n                await asyncio.sleep(1)\n    \n        async def stop(self):\n            self.flab.tasks['AsyncCount2'].task_stopped = True #a flag to stop the script\n\nExample: Running and stopping AsyncCount and AsyncCount2\n\n    flab.load_tasks(['AsyncCount','AsyncCount2'])\n    flab.start_asyncio_tasks(['AsyncCount','AsyncCount2'])\n    flab.stop_asyncio_tasks(['AsyncCount','AsyncCount2'])\n\n###Process Tasks\n\nProcess tasks are executing using Python's multiprocessing library, meaning that they are distributed across different CPUs.\nThis distribution makes the sharing of data i.e. flab slightly more complicated.\n\nA process task has several key differences to a threaded task:\n1. task_type = 'process'\n2. The flag boolean used to stop a loop should be defined as a flab variable instead of a task variable\n\nProcess Example:\n\n\n    #This task prints 'Hello World' every second within a separate process\n    #A flab variable self.flab.vars['HelloWorldProcess_stopped'] is used instead of a Boolean flag within the Task so that external \n    other processes can signal this process to stop\n\n    class Task():\n\n        task_name = 'HelloWorldProcess'\n        task_type = 'process'\n    \n        def __init__(self,flab):\n            self.flab = flab\n    \n        def run(self):\n            self.flab.add_var(False,'HelloWorldProcess_stopped')\n            while not self.flab.vars['HelloWorldProcess_stopped']:\n                print('Hello World')\n                time.sleep(1)\n    \n        def stop(self):\n            self.flab.vars['HelloWorldProcess_stopped'] = True\n\nLoading, starting and stopping a process is exactly the same as starting a thread. There are a few differences when a process\nis started within a boot script, which is discussed in the Boot section.\n\nExample: Loading, starting and stopping process tasks\n\n    flab.load_task('HelloWorldProcess')\n    flab.start_task('HelloWorldProcess')\n    flab.stop_task('HeloWorldProcess')\n\n## Devices\n\nDevice classes are representations of physical laboratory devices. For example - a balance would become BalanceDevice,\nor a hot plate would become HotPlateDevice.\n\nTo digitally represent the properties and actions of a device we provide the following abstraction:\n\n1. How a computer digitally communicates with the device, explicitly defined in the Driver class.\n2. How a device is used within a given task, explicitly defined in the Protocol class.\n3. The specific configuration of the device, explicitly defined in the Device class.\n\nThe Device class inherits Driver and Protocol classes. Methods for drivers and/or protocols may already be provided by\nthe device manufacturer or third parties. If these are provided in python, they may be used in place of a user-defined\ndriver or protocol class by using python's import function.\n\nDevice class files are saved in the Devices folder of a given project.\n\nA Device class has two key requirements:\n1. device_name: a string matching the filename\n2. an __ init __ method that does not take any input arguments\n3. the method set_flab() which passes a flab object/reference to a device\n\nExample: DeviceTemplate\n\n    from flab.Templates import DriverTemplate\n    from flab.Templates import ProtocolTemplate\n    import inspect\n    \n    class Device(DriverTemplate.Driver, ProtocolTemplate.Protocol):\n    \n        device_name = 'DeviceTemplate'\n        protocol_name = 'ProtocolTemplate'\n        driver_name = 'DriverTemplate'\n        version = '2.0.1'\n    \n        def __init__(self):\n            self.device_name = 'DeviceTemplate'\n            self.protocol_name = 'ProtocolTemplate'\n            self.driver_name = 'DriverTemplate'\n    \n        #returns the value of a Device attribute\n        def get(self, attribute_name):\n            return self.__getattribute__(attribute_name)\n    \n        #sets the value of a Device attribute\n        def set(self, attribute_name, value):\n            self.__setattr__(attribute_name, value)\n    \n        #returns the name of a Device\n        def get_device_name(self):\n            return self.device_name\n    \n        #sets the name of a Device\n        def set_device_name(self, device_name):\n            self.device_name = device_name\n    \n        #returns the flab object of a Device\n        def get_flab(self):\n            return self.flab\n    \n        #sets the flab object of a Device\n        def set_flab(self, flab):\n            self.flab = flab\n    \n        #returns the attributes of a Device in a list\n        def list_attributes(self):\n            variables = []\n            for i in inspect.getmembers(self):\n                if not inspect.ismethod(i[1]) and not inspect.ismethoddescriptor(i[1]) and not inspect.isbuiltin(i[1]) and not '__' in i[0]:\n                    variables.append(i[0])\n            return variables\n    \n        #returns the methods of a Device in a list\n        def list_methods(self):\n            variables = []\n            for i in inspect.getmembers(self):\n                if inspect.ismethod(i[1]) and not inspect.ismethoddescriptor(i[1]) and not inspect.isbuiltin(i[1]) and not '__' in i[0]:\n                    variables.append(i[0])\n            return variables\n    \n        #returns the arguments of a method of a Device in a list\n        def list_method_args(self,method_name):\n            fullargspec = inspect.getfullargspec(self.get(method_name))\n            return fullargspec\n\nThe Device class is primarily used for defining any configuration parameters that are specific to given use-case.\nFor example, the below Device class for controlling hotplates is used to specify default temperatures\n\nExample: IkaDefaultsDevice\n\n    #A Device class for IKA RCT Digital hotplates\n    \n    from Projects.Working.Devices.Drivers import IkaDriver\n    from Projects.Working.Devices.Protocols import IkaProtocol\n    \n    class Device(IkaDriver.Driver, IkaProtocol.Protocol):\n    \n        device_name = 'IkaDefaultsDevice'\n    \n        #Default parameters\n        default_temperature = 100\n    \n        def __init__(self):\n            pass\n    \n        def set_default_temperature(self, new_default):\n            self.default_temperature = new_default\n    \n        def get_default_temperature(self):\n            return self.default_temperature\n\nUse the flab method \"load_device\" to load a given device into the flab devices dictionary.\nThis dictionary can then be used to call upon device properties and functions.\n\nExample: loading and using device\n\n    flab.load_device('DeviceTemplate')\n    flab.devices['DeviceTemplate'].hello_world()\n\n    flab.load_device('IkaDefaultsDevice')\n    flab.devices['IkaDefaultsDevice'].set_default_temperature(50)\n\nIf a change has been made to the ExampleDevice class, the device module may be dynamically reloaded\ninto flab.\n\nExample: reloading and using device\n\n    flab.reload_device('ExampleDevice')\n    flab.devices['ExampleDevice'].example_function()\n\n###Drivers\n\nUnlike a Task, a Driver has relatively fewer requirements. A Driver must define:\n\n1. driver_name: a string matching the filename\n2. an __ init __ method that does not accept any arguments\n\nAny other methods and variables are given by the programmer. A certain degree of expertise in digital communication is \nrequired to program drivers, which is not covered in this guide.\n\nExample: DriverTemplate\n    \n    class Driver():\n    \n        driver_name = 'DriverTemplate'\n        version = '2.0.1'\n    \n        def __init__(self):\n            pass\n    \n        #returns the value of a Driver attribute\n        def get(self, attribute_name):\n            return self.__getattribute__(attribute_name)\n    \n        #sets the value of a Driver attribute\n        def set(self, attribute_name, value):\n            self.__setattr(attribute_name, value)\n    \n        #returns the name of a Driver\n        def get_driver_name(self):\n            return self.driver_name\n    \n        #sets the name of a Driver\n        def set_driver_name(self, driver_name):\n            self.driver_name = driver_name\n\n\nSome equipment providers or third parties already provide drivers in python, which can be adapted. Below is a Driver\nused for collecting data from Arduino Mega controllers using the pyfirmata library. \n\nExample: ArduinoMegaDriver\n    \n    #A class for driving Arduino Mega using the pyfirmata library (https://pypi.org/project/pyFirmata/)\n\n    from pyfirmata import Arduino, util, ArduinoMega\n\n    class Driver(ArduinoMega):\n    \n        port = 'NA'\n        is_arduino_connected = False\n        print_status = True\n        driver_name = 'ArduinoMegaDriver'\n        mega = {'digital': tuple(x for x in range(56)),'analog': tuple(x for x in range(16)),'pwm': tuple(x for x in range(2, 14)),'use_ports': True,'disabled': (0, 1, 14, 15)}\n    \n        def __init__(self):\n            pass\n    \n        #set the communication port\n        def set_port(self,port):\n            self.port = port\n\n        #get the communication port\n        def get_port(self):\n            return self.port\n    \n        #connect the arduino\n        #the port must be defined before connecting the arduino\n        def connect_arduino(self):\n            if (not self.is_arduino_connected) and (self.port != 'NA'):\n                try:\n                    self.ard = Arduino(self.port)\n                    self.ard.setup_layout(self.mega)\n                    self.it = util.Iterator(self.ard)\n                    self.it.start()\n                    self.is_arduino_connected = True\n                    if self.print_status:\n                        self.flab.display('Arduino connected successfully')\n                    return 0\n                except Exception as e:\n                    if self.print_status:\n                        self.flab.display(str(e))\n                        self.flab.display('Error connecting Arduino Mega. Check connection')\n                    return e\n                finally:\n                    pass\n            else:\n                return 0\n\n        #get if arduino is connected\n        def get_arduino_connected(self):\n            return self.is_arduino_connected\n\n        #I define this here because pyfirmata does not actually return a voltage when a pin is read - it is a number between\n        #0 to 1\n        def get_voltage(self, pin):\n            try:\n                v = self.ard.analog[pin].read() * 5.0\n            except Exception as e:\n                v = -1\n            finally:\n                pass\n            return v\n\nSometimes, it is necessary to completely define a driver from scratch. For serial communication, python's serial \nlibrary can be used to create methods for communication. Below is an example of a Driver that defines serial communication\nfunctions, and can be inherited by other drivers.\n\nExample: SerialDriver\n\n    #A generic class for drivers using serial communication.\n\n    import serial\n    import time\n\n    class Driver():\n    \n        driver_name = 'SerialDriver'\n    \n        #default parameters\n    \n        port = 'NA'\n        #ASCII character at the beginning of a transmission\n        beg_char = '/'\n        #ASCII character at ending of a transmission\n        end_char = '\\r'\n        #time to pause after sending a transmission\n        pause_time = 0.1\n        bd = 9600\n        to = 1\n    \n        def __init__(self):\n            pass\n    \n        #set the current port\n        def set_port(self, port):\n            self.port = port\n    \n        #return the current port\n        def get_port(self):\n            return self.port\n    \n        # open serial communication\n        def open_ser(self):\n            try:\n                self.ser = serial.Serial(port=self.port, baudrate=self.bd, timeout=self.to)\n                return 0\n            except Exception as e:\n                print(e)\n                return e\n    \n        # close serial communication\n        def close_ser(self):\n            self.ser.close()\n    \n        # check serial port\n        def check_ser(self):\n            check = self.ser.is_open\n            return check\n    \n        #write a string message over the serial port\n        def write(self,mess):\n            try:\n                write_str = self.beg_char + mess + self.end_char\n                write_byt = write_str.encode()\n                self.ser.write(write_byt)\n                time.sleep(self.pause_time)\n                self.ser.flushInput()\n                self.ser.flushOutput()\n                return 0\n            except Exception as e:\n                print(e)\n                return e\n    \n        def read(self,nbyt):\n            try:\n                read_byt = self.ser.read(nbyt)\n                read_str = str(read_byt.decode())\n                return read_str\n            except Exception as e:\n                print(e)\n                return ''\n    \n        #write and read (without flushing buffer)\n        def write_read(self,mess,nbyt):\n            try:\n                write_str = self.beg_char + mess + self.end_char\n                write_byt = write_str.encode()\n                self.ser.write(write_byt)\n                time.sleep(self.pause_time)\n                read_byt = self.ser.read(nbyt)\n                read_str = str(read_byt.decode())\n                self.ser.flushInput()\n                self.ser.flushOutput()\n                return read_str\n            except Exception as e:\n                print(e)\n                return ''\n    \n        #write and read (without flushing buffer)\n        def write_readline(self,mess):\n            try:\n                write_str = self.beg_char + mess + self.end_char\n                write_byt = write_str.encode()\n                self.ser.write(write_byt)\n                time.sleep(self.pause_time)\n                read_byt = self.ser.readline()\n                read_str = str(read_byt.decode())\n                self.ser.flushInput()\n                self.ser.flushOutput()\n                return read_str\n            except Exception as e:\n                print(e)\n                return ''\n\nBelow is an example of a driver for a hotplate that inherits the SerialDriver class to facilitate digital communications.\nSerial commands for communication can often be found in the manuals of equipment.\n\nExample: IkaDriver\n\n    #A class for driving IKA RCT digital hotplate\n\n    from Projects.Example.Devices.Drivers import SerialDriver\n\n    class Driver(SerialDriver.Driver):\n    \n        driver_name = 'IkaDriver'\n    \n        port = 'NA'\n        #ASCII character at the beginning of a transmission\n        beg_char = '/'\n        #ASCII character at ending of a transmission\n        end_char = ' \\r \\n'\n        #time to pause after sending a transmission\n        pause_time = 0.1\n        bd = 9600\n        to = 1\n    \n        def __init__(self):\n            super().__init__()\n    \n        def read_name(self):\n            s = 'IN_NAME'\n            r = self.write_read(s, 80)\n            return r\n    \n        def read_external_sensor(self):\n            s = 'IN_PV_1'\n            r = self.write_read(s, 80)\n            return r[:len(r)-4]\n    \n        def read_hotplate_sensor(self):\n            s = 'IN_PV_2'\n            r = self.write_read(s, 80)\n            return r[:len(r)-4]\n    \n        def read_stirring_speed(self):\n            s = 'IN_PV_4'\n            r = self.write_read(s, 80)\n            return r\n    \n        def read_temperature_setpoint(self):\n            s = 'IN_SP_1'\n            r = self.write_read(s, 80)\n            return r[:len(r)-4]\n    \n        def read_safety_temperature_setpoint(self):\n            s = 'IN_SP_3'\n            r = self.write_read(s, 80)\n            return r\n    \n        def read_stirring_speed_setpoint(self):\n            s = 'IN_SP_4'\n            r = self.write_read(s, 80)\n            return r[:len(r)-4]\n    \n        def set_temperature(self, t):\n            s = 'OUT_SP_1 ' + str(t)\n            r = self.write(s)\n    \n        def set_stirring_speed(self, rpm):\n            s = 'OUT_SP_4 ' + str(rpm)\n            r = self.write(s)\n    \n        def start_heater(self):\n            s = 'START_1'\n            r = self.write(s)\n    \n        def stop_heater(self):\n            s = 'STOP_1'\n            r = self.write(s)\n    \n        def start_stirring(self):\n            s = 'START_4'\n            r = self.write(s)\n    \n        def stop_stirring(self):\n            s = 'STOP_4'\n            r = self.write(s)\n    \n        def reset(self):\n            s = 'RESET'\n            r = self.write(s)\n    \n        def set_operating_mode(self, mode):\n            if mode == 'A' or mode == 'B' or mode == 'D':\n                s = 'SET_MODE_' + mode\n                r = self.write(s)\n                return mode\n            else:\n                return -1\n    \n        def set_echo_safety_temperature(self,t):\n            s = 'OUT_SP_12@' + str(t)\n            r = self.write_read(s, 80)\n            return r\n    \n        def set_echo_safety_stirring_speed(self,rpm):\n            s = 'OUT_SP_42@' + str(rpm)\n            r = self.write_read(s, 80)\n            return r\n    \n        def watchdog_one(self, m):\n            s = 'OUT_WD1@' + str(m)\n            r = self.write(s)\n    \n        def watchdog_two(self, m):\n            s = 'OUT_WD2@m' + str(m)\n            r = self.write(s)\n\n###Protocols\n\nA Protocol class provides higher level functions that define the actions a device will take in a project. Protocols\nwill often utilize the functions defined in a given Driver class. It is good practice to note which Driver class a \nProtocol is compatible with.\n\nA protocol requires:\n1. protocol_name: a string matching the filename\n2. an __ init __ method that does not accept any arguments\n\nExample: ProtocolTemplate\n\n    class Protocol():\n    \n        protocol_name = 'ProtocolTemplate'\n        version = '2.0.1'\n    \n        def __init__(self):\n            pass\n    \n        #returns the value of a Protocol attribute\n        def get(self, attribute_name):\n            return self.__getattribute__(attribute_name)\n    \n        #sets the value of a Protocol attribute\n        def set(self, attribute_name, value):\n            self.__setattr(attribute_name, value)\n    \n        #returns the name of a Protcol\n        def get_protocol_name(self):\n            return self.protocol_name\n    \n        #sets the name of a Protocol\n        def set_protocol_name(self, protocol_name):\n            self.protocol_name = protocol_name\n\nProtocols can also define how a given device is initialized, and how the user may interact with the device. For example\nin the below protocol for hotplates, additional code is given to ensure a robust connection and startup of the device.\n\nExample: IkaProtocol\n\n    #A class for IKA RCT Digital hotpolate protocols\n\n    class Protocol():\n    \n        protocol_name = 'IkaProtocol'\n        print_status = True\n    \n        con_status = False  # is IKA connected (serial port)\n        ini_status = False  # is IKA initialized\n    \n        def __init__(self):\n            pass\n    \n        def connect(self):\n            con_err = \"\"\n            if self.get_port() == 'NA':\n                con_err = con_err + \"Ika port not assigned.\"\n            else:\n                try:\n                    self.open_ser()\n                    self.check_ser()\n                except Exception as e:\n                    con_err = con_err + \"Ika connection error. Check port assignment.\"\n                    self.display_status(con_err)\n            if con_err == '':\n                self.con_status = True\n                self.display_status(\"Ika connected successfully.\")\n            return self.con_status\n    \n        #Initialize the hotplate by reading its name\n        def initialize(self):\n            ini_err = ''\n            if self.con_status:\n                if not self.ini_status:\n                    try:\n                        name = self.read_name()\n                        if name == '':\n                            self.ini_status = False\n                            self.display_status(\"Ika initialization faiulre: check device\")\n                        else:\n                            self.ini_status = True\n                            self.display_status(\"Ika initialized successfully\")\n                            self.display_status(name)\n                    except:\n                        ini_err = \"Ika initialization failure: check serial connection.\"\n                        self.display_status(ini_err)\n                        self.ini_status = False\n            else:\n                ini_err = 'Ika initialization failure: not connected.'\n                self.display_status(ini_err)\n                self.ini_status = False\n    \n            return self.ini_status\n    \n        def display_status(self, s):\n            if self.printstatus:\n                self.flab.display(s)\n\nFinally, designing a task which utilizes a device requires correct usage of the underlying Device, Driver and Protocol\nclasses. See below the task \"LoadStartIka\", which automatically loads, initializes and starts a hotplate.\n\nExample: LoadStartIka\n\n    #A task for loading, initializing and starting a IKA RCT Digital hotplate with a default temperature\n    \n    class Task():\n    \n        task_name = 'LoadStartIka'\n        task_type = 'thread'\n        task_stopped = False\n    \n        #initialize all tasks with a flab object.\n        def __init__(self, flab):\n            self.flab = flab\n    \n        #method called when task is run\n        def run(self):\n            self.task_stopped = False\n            load_err = ''\n            try:\n                #load the device into flab\n                self.flab.load_device('IkaDefaultsDevice')\n                p = self.flab.devices['IkaDefaultsDevice']\n                #set the device port\n                p.set_port('/dev/tty.usbmodem7_____SM96_s_Q1')\n                #set the device temperature\n                p.set_temperature(p.default_temperature)\n                #start the heater\n                p.start_heater() \n            except Exception as e:\n                load_err = 'Error loading and starting IkaDefaultsDevice'\n                self.flab.ui.print(load_err)\n                self.flab.ui.print(e)\n            finally:\n                pass\n            if load_err == '':\n                self.flab.ui.print('IkaDefaultsDevice loaded and started successfully')\n    \n        def stop(self):\n            self.task_stopped = True\n            self.flab.devices['IkaDefaultsDevice'].start_heater() \n\n## UIs\n\nUIs are classes that govern how users (humans or otherwise) interact with running programs. The most common UI is graphical\n(a GUI). A UI can be thought of as a hybrid between a Device and a Task. UI classes are saved in the UIs folder of a project.\n\nEach UI requires the following:\n\n1. ui_name: a string that matches the filename\n2. __ init __(self, flab): initializes the UI object with the shared flab object\n3. run(self, *args, **kwargs): this defines how a ui runs. This method can contain while loops, which\n       can be externally closed with the flag task_stopped.\n4. stop(self, *args, **kwargs): this defines how a ui stops. This method can be used to modify a ui_stopped\n   flag\n   \nUIs inherit classes stored in the Designs and Actions folders, which describe the layout of the UI and the corresponding\nactions of the UI elements respectively.\n\nIn HelloWorldUI, the UI class inherits the Ui_MainWindow class of HelloWorldDesign and the Actions class of HelloWorldActions.\nThe HelloWorldUI run method uses PyQt5 to create a window (QtWidgets.QMainWindow) to run in.\nNote: GUI libraries typically run within the main method. If you wish to start multiple UIs or to run a UI in a separate task,\nit is best to create a separate process task for running the UI.\n\nExample: HelloWorldUI\n    \n    #A GUI for HelloWorld\n\n    from Projects.Example.UIs.Designs import HelloWorldDesign\n    from Projects.Example.UIs.Actions import HelloWorldActions\n    from PyQt5 import QtWidgets\n\n    import sys\n\n    class UI(HelloWorldDesign.Ui_MainWindow, HelloWorldActions.Actions):\n    \n        ui_name = 'HelloWorldUI'\n    \n        def __init__(self, flab):\n            self.flab = flab\n    \n        #The method responsible for starting the UI\n        def run(self):\n            app = QtWidgets.QApplication(sys.argv)\n            self.MainWindow = QtWidgets.QMainWindow()\n            self.setupUi(self.MainWindow)\n            self.configure_actions()\n            self.MainWindow.show()\n            app.exec_()\n    \n    \n        #The method responsible for stopping the UI\n        def stop(self):\n            pass\n\nUIs may be loaded into flab with the flab method load_ui(ui_name)\n\n    flab = Flab.Flab()\n    flab.load_ui('HelloWorldUi')\n    flab.uis['HelloWorldUi'].run()\n\n###Designs\n\nDesign classes may be created by a range of methods - by directly coding, using libraries such as Tkinter, or through applications\nlike QtDesigner. Design class files are stored in the Designs folder. \n*.ui files can be converted to *.py files automatically using the function convert_ui(ui_name), which is defined in UiManager.\n\nExample: .ui to .py conversion.    \n\n    flab = Flab.Flab()\n    flab.convert_ui(''HelloWorldUi')\n\nExample: HelloWorldDesign\n\n    # -*- coding: utf-8 -*-\n\n    # Form implementation generated from reading ui file '/Users/nicholasjose/Dropbox (Cambridge CARES)/Python/pyflab/Projects/Working/UIs/Designs/HelloWorldDesign.ui'\n    #\n    # Created by: PyQt5 UI code generator 5.15.4\n    #\n    # WARNING: Any manual changes made to this file will be lost when pyuic5 is\n    # run again.  Do not edit this file unless you know what you are doing.\n\n    from PyQt5 import QtCore, QtGui, QtWidgets\n     \n    class Ui_MainWindow(object):\n        def setupUi(self, MainWindow):\n            MainWindow.setObjectName(\"MainWindow\")\n            MainWindow.resize(1068, 716)\n            self.centralwidget = QtWidgets.QWidget(MainWindow)\n            self.centralwidget.setObjectName(\"centralwidget\")\n            self.label = QtWidgets.QLabel(self.centralwidget)\n            self.label.setGeometry(QtCore.QRect(390, 330, 91, 16))\n            self.label.setObjectName(\"label\")\n            self.pushButton = QtWidgets.QPushButton(self.centralwidget)\n            self.pushButton.setGeometry(QtCore.QRect(370, 360, 113, 32))\n            self.pushButton.setObjectName(\"pushButton\")\n            MainWindow.setCentralWidget(self.centralwidget)\n            self.statusbar = QtWidgets.QStatusBar(MainWindow)\n            self.statusbar.setObjectName(\"statusbar\")\n            MainWindow.setStatusBar(self.statusbar)\n    \n            self.retranslateUi(MainWindow)\n            QtCore.QMetaObject.connectSlotsByName(MainWindow)\n    \n        def retranslateUi(self, MainWindow):\n            _translate = QtCore.QCoreApplication.translate\n            MainWindow.setWindowTitle(_translate(\"MainWindow\", \"Hello World\"))\n            self.label.setText(_translate(\"MainWindow\", \"Hello What?\"))\n            self.pushButton.setText(_translate(\"MainWindow\", \"Click me\"))\n\n\n###Actions\n\nAction classes are used to define the actions that a UI undertakes after events. For example, in HelloWorldDesign,\nto define what happens after pushButton is clicked.\nActions are defined in separate classes to enable programmers to easily change actions without affecting the UI's design,\nand vice versa.\n\nEach Actions class is defined with:\n1. actions_name: a string matching the class filename\n2. an __ init __ function that accepts a flab object as an input.\n\nIn the below example, upon clicking pushButton, defined within HelloWorldDesign, the test of label, also defined with \nHelloWorldDesign, displays \"Hello World\"\n\nActions Example:\n\n    #Hello World UI Actions\n\n    class Actions():\n    \n        actions_name = 'HelloWorldActions'\n    \n        def __init__(self, flab):\n            self.flab = flab\n    \n        def configure_actions(self):\n            self.pushButton.clicked.connect(self.hello_world)\n    \n        def hello_world(self):\n            self.label.setText('Hello World')\n\n## Boot\n\nBoot scripts are used to start programs. The BootManager class implements Python's multiprocessing SyncManager class to\ncreate the shared flab object, using namespaces and queues.\n\nEvery flab object must be initialized with queues, which are used to exchange information between separate \"flab\" process and \"ui\"\nprocesses. These queues may or may not further used by the programmer, depending on the complexity of the program.\n\nThe flab queue stores commands for processes that execute actions within the flab environment (e.g. controlling devices).\nThe UI queue stores commands or strings for UI processes to execute or display\n\nBefore starting any specific code for your project, use the following steps to create a shared flab object\n\n1. Create a BootManager object\n2. Create a UI queue and a flab queue\n3. Create a shared flab object using boot_manager.create_flab_proxy(ui_queue, flab_queue)\n\nThese steps are illustrated in the below example, which starts HelloWorldUI\n\nNote: in V1.0.7+ the working directory does not need to be changed within the bootscript\n\nExample: HelloWorldBoot\n\n    from flab import BootManager\n    import os\n    \n    if __name__ == '__main__':\n\n        #1. create a boot_manager\n        boot_manager = BootManager.BootManager()\n    \n        #2. create the queues\n        ui_queue = boot_manager.create_queue()\n        flab_queue = boot_manager.create_queue()\n    \n        #3. create a flab object proxy\n        f = boot_manager.create_flab_proxy(ui_queue = ui_queue, flab_queue = flab_queue)\n    \n        #convert and run HelloWorldUI\n        f.convert_ui('HelloWorldDesign')\n        f.load_ui('HelloWorldUi')\n        f.uis['HelloWorldUi'].run()\n\nBootManager also contains separate functions for starting processes (start_process and start_processes), which can be used\nto start multiple running processes from the boot script. This is illustrated in the Console Project, below.\n\n## The Console Project\n\nThe Console Project is essentially a user input console that allows you to access the flab object and run tasks in real time.\nThis is extremely useful for quickly prototyping code, as you do not need to restart python each time you need to modify a task.\nInstead, you can simply change a task, save the file, \"reload\" the task in flab, and start it.\n\nThe Console takes only flab commands as inputs. For example\n\n    flab.start_task('HelloWorld')\n\nbecomes\n    \n    >start_task('Hello World')\n\nthe display method can be used to print out data in the console. For example\n\n    >display('Hello World')\n\ndisplays\n\n    'Hello World'\n\nIf you wish to print out attributes, for example, the items in a flab dictionary or a flab variable, you need to use\n\n    >display(flab.attribute)\n\nfor example\n\n    >display(flab)\n\noutputs\n\n    <flab.Flab.Flab object at 0x7fafde453fa0>\n\nand\n\n    >display(flab.tasks)\n\noutputs\n\n    {'ConsoleUiProcess': <Projects.Console.Tasks.ConsoleUiProcess.Task object at 0x7f88dbd68ac0>,\n    'ConsoleFlabProcess': <Projects.Console.Tasks.ConsoleFlabProcess.Task object at 0x7f88dbd68c10>, \n    'HelloWorld': <Projects.Console.Tasks.HelloWorld.Task object at 0x7f88dbd5f850>}\n\n## Quick Start\n\nTo quickly get started with flab using Console:\n\n1. Install the FLab package\n2. Create a Projects directory\n3. Download the Console Project from github, and copy it into your Projects folder.\n4. Run ConsoleBoot.py from the Boot folder\n5. Type in start_task('HelloWorld'). You should see repeated lines of 'Hello World' printed\n6. Type in stop_task('HelloWorld'). The printing should stop.\n\n#The Console2 Project\nConsole2 is an expansion of Console, and contains buttons for easy access to flab methods, and text browsers that display\nthe properties of devices, variables and running tasks.\n\nMore documentation on the use of Console2 will be uploaded soon.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/njoseGIT/flab",
            "keywords": "",
            "license": "GNU GPL3",
            "maintainer": "",
            "maintainer_email": "",
            "name": "flab",
            "package_url": "https://pypi.org/project/flab/",
            "platform": null,
            "project_url": "https://pypi.org/project/flab/",
            "project_urls": {
                "Homepage": "https://github.com/njoseGIT/flab"
            },
            "release_url": "https://pypi.org/project/flab/2.0.7/",
            "requires_dist": null,
            "requires_python": ">=3.9",
            "summary": "A fast, flexible and fun framework for creating automated laboratories",
            "version": "2.0.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15435596,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6c36c420f7542b2ad0aee881085ed673",
                    "sha256": "e74bd64df76bc2620de80ba5289eaa404245b5772adcc45c84510c062c9d5dbb"
                },
                "downloads": -1,
                "filename": "flab-2.0.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6c36c420f7542b2ad0aee881085ed673",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9",
                "size": 39081,
                "upload_time": "2022-10-17T12:00:21",
                "upload_time_iso_8601": "2022-10-17T12:00:21.410456Z",
                "url": "https://files.pythonhosted.org/packages/25/a5/304a899704a4e850f117b7aaacb342f4596054cc29008047eccef051eb50/flab-2.0.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8278a4dcc7ca85367369d1a3d107208f",
                    "sha256": "379703357af87a064243ca360b9a7b8717e297aaf682b4e3b74229aba35a1f64"
                },
                "downloads": -1,
                "filename": "flab-2.0.7.tar.gz",
                "has_sig": false,
                "md5_digest": "8278a4dcc7ca85367369d1a3d107208f",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9",
                "size": 55262,
                "upload_time": "2022-10-17T12:00:24",
                "upload_time_iso_8601": "2022-10-17T12:00:24.917954Z",
                "url": "https://files.pythonhosted.org/packages/7f/44/0bc8b946b77b3857617f2a28278b29c1d999ee8848ffd40bafafb9e0f548/flab-2.0.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}