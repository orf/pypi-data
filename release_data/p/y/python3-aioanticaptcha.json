{
    "1.1": {
        "info": {
            "author": "Andr\u00e9 Fran\u00e7a",
            "author_email": "rsp.assistencia@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# python3-aioanticaptcha\n\n\n[![PyPI version](https://badge.fury.io/py/python3-aioanticaptcha.svg)](https://badge.fury.io/py/python3-anticaptcha)\n[![Python versions](https://img.shields.io/pypi/pyversions/python3-aioanticaptcha.svg?logo=python&logoColor=FBE072)](https://badge.fury.io/py/python3-anticaptcha)\n\nPython library forked from  [anticaptchaofficial](https://github.com/AdminAnticaptcha/anticaptcha-python).\n\n\nThe main purpose of the fork was to add implementation for async request using [aiohttp](https://docs.aiohttp.org/en/stable/)\n\n## How to install?\n\n```bash\npip install python3-aioanticaptcha\n```\n\n### Source\n```bash\ngit clone https://github.com/andrersp/aioanticaptcha\npython setup.py install\n```\n___\n\n&nbsp;\n\nExample how to create [Recaptcha V2](https://anti-captcha.com/apidoc/task-types/RecaptchaV2TaskProxyless) task and receive g-response:\n\n```python\nimport asyncio\nfrom aioanticaptcha.recaptchav2proxyless import *\n\n\nasync def main():\n\n    async with recaptchaV2Proxyless() as solver:\n        solver.set_verbose(1)\n        solver.set_key(\"YOUR_KEY\")\n        solver.set_website_url(\"https://website.com\")\n        solver.set_website_key(\"SITE_KEY\")\n\n        # only for V2-invisible Recaptcha! :\n        # solver.set_is_invisible(1)\n\n        g_response = solver.solve_and_return_solution()\n        if g_response != 0:\n            print(\"g-response: \" + g_response)\n        else:\n            print(\"task finished with error \" + solver.error_code)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\nReport previosly solved Recaptcha V2/V3/Enterprise as incorrect:\n```python\n...\nsolver.report_incorrect_recaptcha()\n```\n\nReport it as correct to improve your quality:\n```python\n...\nsolver.report_correct_recaptcha()\n```\n---\n&nbsp;\n\nSolve [image captcha](https://anti-captcha.com/apidoc/task-types/ImageToTextTask):\n\n```python\nimport asyncio\nfrom aioanticaptcha.imagecaptcha import *\n\n\nasync def main():\n    async with imagecaptcha() as solver:\n        solver.set_verbose(1)\n        solver.set_key(\"YOUR_KEY\")\n        captcha_text = await solver.solve_and_return_solution(\"captcha.jpeg\")\n        if captcha_text != 0:\n            print(\"captcha text \" + captcha_text)\n        else:\n            print(\"task finished with error \" + solver.error_code)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\nReport previosly solved image captcha as incorrect:\n```python\n...\nsolver.report_incorrect_image_captcha()\n```\n\n---\n\n&nbsp;\n\nSolve [Funcaptcha](https://anti-captcha.com/apidoc/task-types/FunCaptchaTaskProxyless) (Arkoselabs):\n\n```python\nimport asyncio\nfrom aioanticaptcha.funcaptchaproxyless import *\n\n\nasync def main():\n    async with funcaptchaProxyless() as solver:\n        solver.set_verbose(1)\n        solver.set_key(\"YOUR_KEY\")\n        solver.set_website_url(\"https://website.com\")\n        solver.set_website_key(\"XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX\")\n\n        token = solver.solve_and_return_solution()\n        if token != 0:\n            print(\"result token: \" + token)\n        else:\n            print(\"task finished with error \" + solver.error_code)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n___\n\n&nbsp;\n\nSolve [GeeTest](https://anti-captcha.com/apidoc/task-types/GeeTestTask) captcha:\n\n```python\nimport asyncio\nfrom aioanticaptcha.geetestproxyless import *\n\n\nasync def main():\n    async with geetestProxyless() as solver:\n        solver.set_verbose(1)\n        solver.set_key(\"YOUR_API_KEY\")\n        solver.set_website_url(\"https://address.com\")\n        solver.set_gt_key(\"CONSTANT_GT_KEY\")\n        solver.set_challenge_key(\"VARIABLE_CHALLENGE_KEY\")\n        token = solver.solve_and_return_solution()\n        if token != 0:\n            print(\"result tokens: \")\n            print(token)\n        else:\n            print(\"task finished with error \" + solver.error_code)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n___\n\n&nbsp;\n\nSolve [HCaptcha](https://anti-captcha.com/apidoc/task-types/HCaptchaTask):\n\n```python\nfrom aioanticaptcha.hcaptchaproxyless import *\nimport asyncio\n\n\nasync def main():\n    async with hCaptchaProxyless() as solver:\n        solver.set_verbose(1)\n        solver.set_key(\"YOUR_KEY\")\n        solver.set_website_url(\"https://website.com\")\n        solver.set_website_key(\"SITE_KEY\")\n\n        g_response = solver.solve_and_return_solution()\n        if g_response != 0:\n            print(\"g-response: \" + g_response)\n        else:\n            print(\"task finished with error \" + solver.error_code)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n___\n\nCheck out [examples](https://github.com/andrersp/aioanticaptcha) for other captcha types\n\nLicense\n[MIT](https://choosealicense.com/licenses/mit/)\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/andrersp/aioanticaptcha",
            "keywords": "python,anti-captcha,async",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "python3-aioanticaptcha",
            "package_url": "https://pypi.org/project/python3-aioanticaptcha/",
            "platform": "",
            "project_url": "https://pypi.org/project/python3-aioanticaptcha/",
            "project_urls": {
                "Homepage": "https://github.com/andrersp/aioanticaptcha"
            },
            "release_url": "https://pypi.org/project/python3-aioanticaptcha/1.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Async lib for  Anti-Captcha service.",
            "version": "1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13080890,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "19485dd2fd66db6968865da5ec619a30",
                    "sha256": "ed2a9f52ec785d684de1006374dcb4c83eb76a0bde9f44e890ce5d99e5d01cfc"
                },
                "downloads": -1,
                "filename": "python3-aioanticaptcha-1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "19485dd2fd66db6968865da5ec619a30",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 7922,
                "upload_time": "2022-03-04T16:11:09",
                "upload_time_iso_8601": "2022-03-04T16:11:09.227758Z",
                "url": "https://files.pythonhosted.org/packages/54/83/57df9e6b63d251f086603cc5103d738a63cb02892d4b2adce29a7f1ff055/python3-aioanticaptcha-1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}