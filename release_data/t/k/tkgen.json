{
    "0.2.1": {
        "info": {
            "author": "Th\u00e9o Cavignac",
            "author_email": "theo.cavignac@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: BSD License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Software Development :: User Interfaces"
            ],
            "description": "# TkGen \n\n## About\n\n`tkgen` is a python package that automatically generate a Tkinter form window from a Pyskema schema.\nIt provide a simple interface to initialize the window and collect the data inputed by user.\nThe data is provided as python native objects that would be valid regarding the schema.\nIt depends on tkinter and Pyskema.\n\n## Installation\n\nRecommended:\nUse `pip install tkgen`.\n\nManual:\nClone this project.\nRun `pip install .` in this folder.\n\n## Usage\n\nThe main entrypoint of this package is the function `tkgen.make_form`.\nHere is a minimal exemple of its usage:\n```python\nfrom tkgen import make_form\nfrom pyskema import Node, AtomType\n\nschema = Node.of_record({\n    \"a\": Node.of_atom(AtomType.INT),\n})\n\nwin = make_form(schema, print)\nwin.mainloop()\n```\n\nThe first parameter of `make_toplevel` (the model) is the schema that define the form.\nThe second parameter (the callback) is a function to be called when the form is submitted.\nThe callback is passed a single argument which is either None (if the user pressed cancel) or the data inputed.\nThis dictionary mirror the structure of the model.\n\n### Extracting data\n\nOnce the form is filled, you want to access its data.\nThis is done through the callback parameter of `make_form`.\nThis callback is an arbitrary function you should provide that will receive the data in the form of a dictionary.\n\nHere is a simple example of saving the data in an arbitrary json file:\n\n```python\nimport json\nfrom tkgen import make_form\nfrom pyskema import Node, AtomType\n\nmodel = Node.of_record({\n    \"filename\": Node.of_atom(AtomType.STR),\n    \"Plumbus\": Node.of_record({\n        \"number of schleem\": Node.of_atom(AtomType.STR),\n        \"length of dinglepop\": Node.of_atom(AtomType.FLOAT),\n        \"color of fleeb\": Node.of_atom(AtomType.OPTION, [\n            \"pink\",\n            \"red\",\n            \"octarine\",\n        ]),\n    }),\n})\n\ndef save_data(result):\n    filename = result[\"filename\"]\n    data = result[\"Plumbus\"]\n    with open(filename, \"w\") as f:\n        json.dump(f, data)\n\nwin = make_form(model, save_data)\nwin.mainloop()\n```\n\n### Loading data\n\nYou may want to be able to load back some data from a previous instance of the form.\nThis is possible thanks to the `init_data` optional parameter.\nFor simplicity it is also possible through the optional `data` parameter of `make_form`.\n\nIf you were to use the previous example and save a file named *plumbus.json*, the following example would load data from the json file and produce a filled form identical to what it looked when you saved the file.\n\n```python\nimport json\nfrom tkgen import make_form\nfrom pyskema import Node, AtomType\n\nmodel = Node.of_record({\n    \"filename\": Node.of_atom(AtomType.STR),\n    \"Plumbus\": Node.of_record({\n        \"number of schleem\": Node.of_atom(AtomType.STR),\n        \"length of dinglepop\": Node.of_atom(AtomType.FLOAT),\n        \"color of fleeb\": Node.of_atom(AtomType.OPTION, [\n            \"pink\",\n            \"red\",\n            \"octarine\",\n        ]),\n    }),\n})\n\nwith open(filename, \"r\") as f:\n    data = json.load(f)\n\nsaved_data = {\n    \"filename\": filename,\n    \"Plumbus\": data,\n}\n\ndef save_data(result):\n    filename = result[\"filename\"]\n    data = result[\"Plumbus\"]\n    with open(filename, \"w\") as f:\n        json.dump(f, data)\n\nwin = make_form(model, save_data, init_data=saved_data)\nwin.mainloop()\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://gitlab.com/Lattay/python-tkgen",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "tkgen",
            "package_url": "https://pypi.org/project/tkgen/",
            "platform": null,
            "project_url": "https://pypi.org/project/tkgen/",
            "project_urls": {
                "Homepage": "https://gitlab.com/Lattay/python-tkgen"
            },
            "release_url": "https://pypi.org/project/tkgen/0.2.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "A Tkinter form dialog factory",
            "version": "0.2.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15091010,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "80e6496c647d751ee99a23e78c2f9a1a",
                    "sha256": "ad615224deca2754866c235158a3de553562bad0bef1c2ebdfe2d28966c033f4"
                },
                "downloads": -1,
                "filename": "tkgen-0.2.1.tar.gz",
                "has_sig": false,
                "md5_digest": "80e6496c647d751ee99a23e78c2f9a1a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 10287,
                "upload_time": "2022-09-14T12:01:11",
                "upload_time_iso_8601": "2022-09-14T12:01:11.550200Z",
                "url": "https://files.pythonhosted.org/packages/d2/3e/5adc0ea54c0317c47a8ab938c173fdc28840b2476ab65caed7d3fd844f4c/tkgen-0.2.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}