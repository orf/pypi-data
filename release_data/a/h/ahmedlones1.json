{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "ahmedlone127@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Programming Language :: Python :: 2",
                "Programming Language :: Python :: 2.7",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Topic :: Software Development :: Build Tools"
            ],
            "description": "\n# NLU: The Power of Spark NLP, the Simplicity of Python\nJohn Snow Labs' NLU is a Python library for applying state-of-the-art text mining, directly on any dataframe, with a single line of code.\nAs a facade of the award-winning Spark NLP library, it comes with hundreds of pretrained models in tens of languages - all production-grade, scalable, and trainable.\n\n## Project's Website\nTake a look at our official Spark NLU page: [https://nlu.johnsnowlabs.com/](https://nlu.johnsnowlabs.com/)  for user documentation and examples\n\n\n\n## NLU in action \n<img src=\"http://ckl-it.de/wp-content/uploads/2020/08/My-Video6.gif\" width=\"1800\" height=\"500\"/>\n\n\n\n## Getting Started with NLU \nTo get your hands on the power of NLU, you just need to install it via pip and ensure Java 8 is installed and properly configured. Checkout [Quickstart for more infos](https://nlu.johnsnowlabs.com/docs/en/install)\n```bash \npip install nlu\n``` \n\n## Loading and predict with any model in 1 line python \n```python\nimport nlu \nnlu.load('sentiment').predict('I love NLU! <3') \n``` \n\n## Loading and predict with multiple models in 1 line \n\nGet 6 different embeddings in 1 line and use them for downstream data science tasks! \n\n```python \nnlu.load('bert elmo albert xlnet glove use').predict('I love NLU! <3') \n``` \n\n## What kind of models does NLU provide? \nNLU provides everything a data scientist might want to wish for in one line of code!  \n - NLU provides everything a data scientist might want to wish for in one line of code!\n - 350 + pre-trained models\n - 100+ of the latest NLP word embeddings ( BERT, ELMO, ALBERT, XLNET, GLOVE, BIOBERT, ELECTRA, COVIDBERT) and different variations of them\n - 50+ of the latest NLP sentence embeddings ( BERT, ELECTRA, USE) and different variations of them\n - 50+ Classifiers (NER, POS, Emotion, Sarcasm, Questions, Spam)\n - 40+ Supported Languages\n - Labeled and Unlabeled Dependency parsing\n - Various Text Cleaning and Pre-Processing methods like Stemming, Lemmatizing, Normalizing, Filtering, Cleaning pipelines and more\n\n\n## Classifiers trained on many different different datasets \nChoose the right tool for the right task! Whether you analyze movies or twitter, NLU has the right model for you! \n\n- trec6 classifier \n- trec10 classifier \n- spam classifier \n- fake news classifier \n- emotion classifier \n- cyberbullying classifier \n- sarcasm classifier \n- sentiment classifier for movies \n- IMDB Movie Sentiment classifier \n- Twitter sentiment classifier \n- NER pretrained on ONTO notes \n- NER trainer on CONLL \n- Language classifier for 20 languages on the wiki 20 lang dataset. \n\n## Utilities for the Data Science NLU applications \nWorking with text data can sometimes be quite a dirty Job. NLU helps you keep your hands clean by providing lots of components that take away data engineering intensive tasks. \n\n- Datetime Matcher\n- Pattern Matcher\n- Chunk Matcher\n- Phrases Matcher\n- Stopword Cleaners\n- Pattern Cleaners\n- Slang Cleaner \n\n## Where can I see NLUs entire offer? \nCheckout the [NLU Namespace](https://nlu.johnsnowlabs.com/docs/en/namespace) for everything that NLU has to offer! \n\n\n\n## Supported Data Types\n- Pandas DataFrame and Series\n- Spark DataFrames\n- Modin with Ray backend\n- Modin with Dask backend\n- Numpy arrays\n- Strings and lists of strings \n\n\nCheckout the following notebooks for examples on how to work with NLU.\n\n\n# NLU Demos on Datasets\n- [Kaggle Twitter Airline Sentiment Analysis NLU demo](https://www.kaggle.com/kasimchristianloan/nlu-sentiment-airline-demo)\n- [Kaggle Twitter Airline Emotion Analysis NLU demo](https://www.kaggle.com/kasimchristianloan/nlu-emotion-airline-demo)\n- [Kaggle Twitter COVID Sentiment Analysis NLU demo](https://www.kaggle.com/kasimchristianloan/nlu-covid-sentiment-showcase)\n- [Kaggle Twitter COVID Emotion Analysis nlu demo](https://www.kaggle.com/kasimchristianloan/nlu-covid-emotion-showcase)\n\n\n# NLU component examples\n\nThe following are Collab examples which showcase each NLU component and some applications.\n\n- ### Named Entity Recognition (NER)\n    - [NER pretrained on ONTO Notes](https://colab.research.google.com/drive/1_sgbJV3dYPZ_Q7acCgKWgqZkWcKAfg79?usp=sharing)\n    - [NER pretrained on CONLL](https://colab.research.google.com/drive/1CYzHfQyFCdvIOVO2Z5aggVI9c0hDEOrw?usp=sharing)\n- ### Part of speech (POS)\n    - [POS pretrained on ANC dataset](https://colab.research.google.com/drive/1tW833T3HS8F5Lvn6LgeDd5LW5226syKN?usp=sharing)\n- ###  Classifiers\n    - [Unsupervised Keyword Extraction with YAKE](https://colab.research.google.com/drive/1BdomIc1nhrGxLFOpK5r82Zc4eFgnIgaO?usp=sharing)\n    - [Toxic Text Classifier](https://colab.research.google.com/drive/1QRG5ZtAvoJAMZ8ytFMfXj_W8ogdeRi9m?usp=sharing)\n    - [Twitter Sentiment Classifier](https://colab.research.google.com/drive/1H1Gekn2qzXzOf5rrT8LmHmmuoOGsiu8m?usp=sharing)\n    - [Movie Review Sentiment Classifier](https://colab.research.google.com/drive/1k5x1zxnG4bBkmYAc-bc63sMA4-oQ6-dP?usp=sharing)\n    - [Sarcasm Classifier](https://colab.research.google.com/drive/1XffsjlRp9wxZgxyYvEF9bG2CiX-pjBEw?usp=sharing)\n    - [50 Class Questions Classifier](https://colab.research.google.com/drive/1OwlmLzwkcJKhuz__RUH74O9HqFZutxzS?usp=sharing)\n    - [20 Class Languages Classifier](https://colab.research.google.com/drive/1CzMfRFJZsj4j1fhormDQdHOIV5IybC57?usp=sharing)\n    - [Fake News Classifier](https://colab.research.google.com/drive/1QuoeGLgmtkUnDQQ2oVS1tuZC2qHDj3p9?usp=sharing)\n    - [E2E Classifier](https://colab.research.google.com/drive/1OSkiXGEpKlm9HWDoVb42uLNQQgb7nqNZ?usp=sharing)\n    - [Cyberbullying Classifier](https://colab.research.google.com/drive/1OSkiXGEpKlm9HWDoVb42uLNQQgb7nqNZ?usp=sharing)\n    - [Spam Classifier](https://colab.research.google.com/drive/1u-8Fs3Etz07bFNx0CDV_le3Xz73VbK0z?usp=sharing)\n- ### Word Embeddings \n    - [BERT Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1Rg1vdSeq6sURc48RV8lpS47ja0bYwQmt?usp=sharing)\n    - [ALBERT Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/18yd9pDoPkde79boTbAC8Xd03ROKisPsn?usp=sharing)\n    - [ELMO Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1TtNYB9z0yH8d1ZjfxkH0TVxQ2O_iOYVV?usp=sharing)\n    - [XLNET Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1C9T29QA00yjLuJ1yEMTbjUQMpUv35pHb?usp=sharing)\n    - [ELECTRA Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1FueGEaOj2JkbqHzdmxwKrNMHzgVt4baE?usp=sharing)\n    - [COVIDBERT Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1Yzc-GuNQyeWewJh5USTN7PbbcJvd-D7s?usp=sharing)\n    - [BIOBERT Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1llANd-XGD8vkGNMcqTi_8Dr_Ys6cr83W?usp=sharing)\n    - [GLOVE Word Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1IQxf4pJ_EnrIDyd0fAX-dv6u0YQWae2g?usp=sharing)\n- ### Sentence Embeddings\n    - [BERT Sentence Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1FmREx0O4BDeogldyN74_7Lur5NeiOVye?usp=sharing)\n    - [ELECTRA Sentence Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1VXHH0ltHF_hXdiRqRlrV_lymAO4ws5PO?usp=sharing)\n    - [USE Sentence Embeddings and T-SNE plotting](https://colab.research.google.com/drive/1gZzOMiCovmrp7z8FIidzDTLS0nt8kPJT?usp=sharing)\n\n- ### Dependency Parsing \n    - [Untyped Dependency Parsing](https://colab.research.google.com/drive/1PC8ga_NFlOcTNeDVJY4x8Pl5oe0jVmue?usp=sharing)\n    - [Typed Dependency Parsing](https://colab.research.google.com/drive/1KXUqcF8e-LU9cXnHE8ni8z758LuFPvY7?usp=sharing)\n\n- ### Text Pre Processing and Cleaning\n    - [Tokenization](https://colab.research.google.com/drive/13BC6k6gLj1w5RZ0SyHjKsT2EOwJwbYwb?usp=sharing)\n    - [Stopwords removal](https://colab.research.google.com/drive/1nWob4u93t2EJYupcOIanuPBDfShtYjGT?usp=sharing)\n    - [Stemming](https://colab.research.google.com/drive/1gKTJJmffR9wz13Ms3pDy64jhUI8ZHZYu?usp=sharing)\n    - [Lemmatization](https://colab.research.google.com/drive/1cBtx9cVCjavt-Oq5TG1lO-9JfUfqznnK?usp=sharing)\n    - [Normalizing](https://colab.research.google.com/drive/1kfnnwkiQPQa465Jic6va9QXTRssU4mlX?usp=sharing)\n    - [Spellchecking](https://colab.research.google.com/drive/1bnRR8FygiiN3zJz3mRdbjPBUvFsx6IVB?usp=sharing)\n    - [Sentence Detecting](https://colab.research.google.com/drive/1CAXEdRk_q3U5qbMXsxoVyZRwvonKthhF?usp=sharing)\n\n- ### Chunkers\n    - [N Gram](https://colab.research.google.com/drive/1pgqoRJ6yGWbTLWdLnRvwG5DLSU3rxuMq?usp=sharing)\n    - [Entity Chunking](https://colab.research.google.com/drive/1svpqtC3cY6JnRGeJngIPl2raqxdowpyi?usp=sharing)\n- ### Matchers\n    - [Date Matcher](https://colab.research.google.com/drive/1JrlfuV2jNGTdOXvaWIoHTSf6BscDMkN7?usp=sharing)\n\n\n# Need help? \n- [Ping us on Slack](https://spark-nlp.slack.com/archives/C0196BQCDPY) \n- [Post an issue on Github](https://github.com/JohnSnowLabs/nlu/issues)\n\n# Simple NLU Demos\n- [NLU different output levels Demo](https://colab.research.google.com/drive/1C4N3wpC17YzZf9fXHDNAJ5JvSmfbq7zT?usp=sharing)\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "ahmedlones1",
            "package_url": "https://pypi.org/project/ahmedlones1/",
            "platform": "",
            "project_url": "https://pypi.org/project/ahmedlones1/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/ahmedlones1/0.0.1/",
            "requires_dist": [
                "pyspark (<2.5,>=2.4.0)",
                "spark-nlp (<2.7,>=2.6.2)",
                "numpy",
                "pyarrow (>=0.16.0)",
                "pandas",
                "dataclasses"
            ],
            "requires_python": "",
            "summary": "asdkakdjasdas",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 8827861,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "745777d8db47c077be993c66a2679555",
                    "sha256": "a798e7b040e28ec03ea95e1b85cf7d02abbbe979beee9054bc459be5441a7f55"
                },
                "downloads": -1,
                "filename": "ahmedlones1-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "745777d8db47c077be993c66a2679555",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 136344,
                "upload_time": "2020-12-05T12:13:30",
                "upload_time_iso_8601": "2020-12-05T12:13:30.746713Z",
                "url": "https://files.pythonhosted.org/packages/e2/8b/51b8d37380f58535f55333287d78c8934eab2fd9b15f3baaeb26bbab86d9/ahmedlones1-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "9b545fd1f7ad7fc7ee8a8f907f91e7e6",
                    "sha256": "884bb7a52db3bcd32edade8c2bcc00b579334d28c331cc105346fb69e1cb5be4"
                },
                "downloads": -1,
                "filename": "ahmedlones1-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "9b545fd1f7ad7fc7ee8a8f907f91e7e6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 73848,
                "upload_time": "2020-12-05T12:13:33",
                "upload_time_iso_8601": "2020-12-05T12:13:33.047531Z",
                "url": "https://files.pythonhosted.org/packages/37/f8/56772013b70bda3384e6caee697e659c95431587a6d1a9194dc2118c2939/ahmedlones1-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}