{
    "0.0.1": {
        "info": {
            "author": "Turing Quantum",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "VisualQ",
            "package_url": "https://pypi.org/project/VisualQ/",
            "platform": "",
            "project_url": "https://pypi.org/project/VisualQ/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/VisualQ/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "a Quantum computation Framework.",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12482140,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "424be3d0af576551ca66cd5a17c0c488",
                    "sha256": "05196378c98c3f8e7edbf6cecb4f27e06085620161201f98b21def1d1905b221"
                },
                "downloads": -1,
                "filename": "VisualQ-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "424be3d0af576551ca66cd5a17c0c488",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 5608,
                "upload_time": "2021-11-05T03:16:40",
                "upload_time_iso_8601": "2021-11-05T03:16:40.032711Z",
                "url": "https://files.pythonhosted.org/packages/8b/23/5bf5a75e86d760c6b10b5396a9648c4309998d5f19b7b1f72f81f3bb5ddc/VisualQ-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "TuringQ",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: Microsoft",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# DeepQuantum \r\n---\r\n\r\n## \u7f16\u5199\u76ee\u7684\r\n\u672c\u6587\u6863\u4ecb\u7ecd\u4e86DeepQuantum\u91cf\u5b50\u8ba1\u7b97\u8f6f\u4ef6\u5e93\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5305\u62ec\u5bf9\u91cf\u5b50\u8ba1\u7b97\u7684\u4e00\u822c\u6027\u77e5\u8bc6\u8fdb\u884c\u4ecb\u7ecd\u4ee5\u53ca\u8f6f\u4ef6\u5e93\u7684\u529f\u80fd\u51fd\u6570\u7684\u4ecb\u7ecd\uff0c\u6307\u5bfc\u7528\u6237\u81ea\u884c\u642d\u5efa\u6a21\u62df\u7684\u901a\u7528\u578b\u91cf\u5b50\u903b\u8f91\u95e8\u7ebf\u8def\u4ee5\u53ca\u5df2\u5b9a\u4e49\u7684\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\u5c42\u3002\r\n\r\n---\r\n## \u8fd0\u884c\u73af\u5883\r\n| \u786c\u4ef6\u73af\u5883 |               |  \u8f6f\u4ef6\u73af\u5883  |                   |\r\n| :--: | :-----------: | :----: | :---------------: |\r\n|  \u540d\u79f0  |      \u578b\u53f7       |   \u540d\u79f0   |        \u7248\u672c         |\r\n| CPU  | Intel/AMD/ARM |  \u64cd\u4f5c\u7cfb\u7edf  | Windows/Linux/MAC |\r\n|  \u5185\u5b58  |      2GB      | \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 |   Pytorch 1.10    |\r\n|  \u786c\u76d8  |      8GB      |   \u8bed\u8a00   |   Python 3.6\u53ca\u4ee5\u4e0a   |\r\n\r\n***\r\n## \u76ee\u5f55\r\n* [\u4f7f\u7528\u8bf4\u660e](#1)\r\n    - [\u4f9d\u8d56\u5e93\u5b89\u88c5](#1.1)\r\n    - [\u8fd0\u884c\u6b65\u9aa4](#1.2)\r\n* [\u5b50\u7a0b\u5e8f\u4f5c\u7528\u4e3e\u4f8b](#2)\r\n    - [Circuit\u7c7b\u7684\u4f5c\u7528](#2)\r\n    - [\u7c7b\u5916\u8c03\u7528\u51fd\u6570](#2.2)\r\n    - [\u57fa\u4e8eDeepQuantum\u7684\u91cf\u5b50\u7ebf\u8def](#2.3)\r\n* [\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc](#3)\r\n    - [ QuConv](#3.1)\r\n    - [DeQuConv](#3.2)\r\n    - [QuPool](#3.3)\r\n    - [DeQuPool](#3.4)\r\n    - [QuLinear](#3.5)\r\n    - [QuAE](#3.6)\r\n    - [QuGRU](#3.7)\r\n    - [QuSAAE](#3.8)\r\n    - [QuML](#3.9)\r\n    - [QuAttention](#3.10)\r\n* [TorchScript IR](#4)\r\n    - [TorchScript\u7b80\u4ecb](#4)\r\n    - [DeepQuantum](#4.2)\r\n* [\u7ec4\u7ec7\u4ea4\u6d41\u65b9\u5f0f](#5)\r\n* [\u8d21\u732e\u8005](#6)\r\n* [\u9e23\u8c22](#7)\r\n* [\u8bb8\u53ef\u8bc1](#8)\r\n* [To-List](#9)\r\n\r\n<span id=\"1\"></span>\r\n***\r\n## \u4f7f\u7528\u8bf4\u660e\r\n\r\n<span id=\"1.1\"></span>\r\n### \u4f9d\u8d56\u5e93\u5b89\u88c5\r\n* Pytorch 1.10\u7248\u672c\u4ee5\u4e0a\r\n* Numpy\r\n* Scipy\r\n* typing\r\n\r\n### \u5b89\u88c5\u547d\u4ee4\r\n\u4ee5deepquantum 0.0.2\u7248\u672c\u4e3a\u4f8b\uff1a\r\n`pip install deepquantum==0.02`\r\n\u4e0a\u8ff0\u7684\u4f9d\u8d56\u5305\u5728\u5b89\u88c5DeepQuantum\u65f6\uff0c\u4f1a\u9644\u5e26\u5b89\u88c5\uff0c\u65e0\u987b\u53e6\u5916\u5b89\u88c5\u3002\r\n\r\n<span id=\"1.2\"></span>\r\n### \u8fd0\u884c\u6b65\u9aa4\r\n\u8fd0\u884c\u4ee3\u7801\u5e93\u4ee3\u7801\u540e\uff0c\u9996\u5148\u53ef\u4ee5\u5b9e\u4f8b\u5316\u4e00\u4e2a\u91cf\u5b50\u7ebf\u8defCircuit\uff0c\u53c2\u6570\u4e3a\u7ebf\u8def\u7684\u6bd4\u7279\u6570\uff0c\u968f\u540e\u53ef\u4ee5\u9009\u62e9\u6dfb\u52a0\u95e8\uff0c\u4f8b\u5982\u6dfb\u52a0\u4e00\u4e2arx\u65cb\u8f6c\u95e8\uff0c\u53c2\u6570\u4e2d\u7b2c\u4e00\u4f4d\u4e3a\u76ee\u6807\t\u6bd4\u7279\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4f4d\u4e3a\u65cb\u8f6c\u89d2\u5ea6\uff1b\r\n\r\n```python\r\ncir=Circuit(2)\r\ncir.rx(1,torch.tensor(0.2))\r\n```\r\n\u6dfb\u52a0\u91cf\u5b50\u903b\u8f91\u95e8\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u67e5\u770b\u5df2\u7ecf\u6dfb\u52a0\u7684\u95e8\u7684\u9149\u77e9\u9635\uff1b\r\n```python\r\ncir.U\r\ntensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\r\n        [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\r\n        [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\r\n        [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\r\n```\r\n\u968f\u540e\u9009\u62e9\u518d\u6dfb\u52a0\u4e00\u4e2a\u53d7\u63a7\u975e\u95e8\uff0c\u5176\u63a7\u5236\u6bd4\u7279\u4f4d\u662f0\uff0c\u53d7\u63a7\u6bd4\u7279\u4f4d\u662f1\uff0c\u518d\u6b21\u6253\u5370\u5df2\u6dfb\u52a0\u7684\u95e8\u7684\u9149\u77e9\u9635\uff1b\r\n```python\r\ncir.cnot(0,1)\r\ncir.U\r\ntensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\r\n        [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\r\n        [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\r\n        [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\r\n\r\n```\r\n\u6700\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7get()\u51fd\u6570\u5f97\u5230\u6574\u4e2a\u91cf\u5b50\u7ebf\u8def\u4e0a\u6240\u6709\u903b\u8f91\u95e8\u7684\u6574\u4f53\u9149\u77e9\u9635\u3002\r\n```python\r\ncir.get()\r\ntensor([[0.9950+0.0000j, 0.0000-0.0998j, 0.0000+0.0000j, 0.0000+0.0000j],\r\n        [0.0000-0.0998j, 0.9950+0.0000j, 0.0000+0.0000j, 0.0000+0.0000j],\r\n        [0.0000+0.0000j, 0.0000+0.0000j, 0.0000-0.0998j, 0.9950+0.0000j],\r\n        [0.0000+0.0000j, 0.0000+0.0000j, 0.9950+0.0000j, 0.0000-0.0998j]])\r\n```\r\n\r\n<span id=\"2\"></span>\r\n***\r\n## \u5b50\u7a0b\u5e8f\u4f5c\u7528\u4e3e\u4f8b\r\n### Circuit\u7c7b\u7684\u4f5c\u7528\t\r\nCircuit\u7c7b\u5b9a\u4e49\u4e86\u91cf\u5b50\u7ebf\u8def\u5305\u542b\u7684\u4fe1\u606f\uff0c\u901a\u8fc7\u5b9e\u4f8b\u5316Circuit\u7c7b\u53ef\u4ee5\u6a21\u62df\u642d\u5efa\u91cf\u5b50\u7ebf\u8def\u3002Circuit\u7c7b\u7684\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u5305\u542b\u4e09\u4e2a\u7a7a\u5217\u8868\uff0c\u5206\u522b\u7528\u4e8e\u4fdd\u5b58\u653e\u7f6e\u95e8\u7684\u8d44\u6e90\u4fe1\u606f\u3001\u653e\u7f6e\u95e8\u7684\u9149\u77e9\u9635\u4ee5\u53ca\u7528\u4e8e\u6d4b\u91cf\u7684\u9149\u77e9\u9635\uff0c\u8fd8\u63d0\u4f9b\u4e00\u4e2a\u521d\u59cb\u5316\u7684|00...0>\u6001\u3002\r\n```python\r\nclass Circuit(object):\r\n    def __init__(self, n:int):\r\n        self.n_qubits = n  # \u603bQuBit\u7684\u4e2a\u6570\r\n        self.U = torch.eye(int(2**self.n_qubits)) + 0j\r\n        self.u = []    # \u987a\u5e8f\u4fdd\u5b58\u9149\u77e9\u9635\r\n\r\n        #\u7ebf\u8def\u7684\u521d\u59cb\u6001\uff0c\u9ed8\u8ba4\u5168\u4e3a|0>\u6001\r\n        self.state_init = torch.zeros(int(2**self.n_qubits))\r\n        self.state_init[0] = 1\r\n        self.state_init = self.state_init + 0j\r\n```\r\nCircuit\u7684\u51fd\u6570\u5305\u62ecrx\u3001rxx\u3001x_gate\u3001cnot\u7b49\u6dfb\u52a0\u95e8\u7684\u51fd\u6570\uff0c\r\n```python\r\n    def cnot(self, control_qubit: int, target_qubit: int):\r\n        assert isinstance(target_qubit, int), \\\r\n            \"target qubit is not integer\"\r\n        assert isinstance(control_qubit, int), \\\r\n            \"control qubit is not integer\"\r\n        assert control_qubit <= self.n_qubits\r\n        assert 0 <= target_qubit < self.n_qubits, \\\r\n            \"target qubit is not available\"\r\n        self._add_u(two_qubit_control_gate(x_gate(), self.n_qubits, control_qubit, target_qubit))\r\n\r\n    def x_gate(self, target_qubit:int):\r\n        assert isinstance(target_qubit, int), \\\r\n            \"target qubit is not integer\"\r\n        assert 0 <= target_qubit < self.n_qubits, \\\r\n            \"target qubit is not available\"\r\n        self._add_u(gate_expand_1toN(x_gate(), self.n_qubits, target_qubit))\r\n```\r\n\u8fd8\u5305\u62ec\u7528\u4e8e\u8ba1\u7b97\u6574\u4f53\u7ebf\u8def\u9149\u77e9\u9635\u7684get\u51fd\u6570\uff0c\r\n```python\r\n    def get(self):\r\n        self.U = gate_sequence_product(self.u, self.n_qubits)\r\n        return self.U\r\n```\r\n\u4ee5\u53ca\u91cd\u7f6e\u7ebf\u8def\u7684clear\u51fd\u6570\u3002\r\n```python\r\n    def clear(self):\r\n        # \u6e05\u7a7a\r\n        self.u = []\r\n        self.U = torch.eye(int(2**self.n_qubits)) + 0j\r\n```\r\n\r\n<span id=\"2.2\"></span>\r\n### \u7c7b\u5916\u8c03\u7528\u51fd\u6570\r\n|           \u51fd\u6570\u540d\u79f0            |                    \u529f\u80fd                    |\r\n| :-----------------------: | :--------------------------------------: |\r\n|       multi_kron \u51fd\u6570       | \u6b64\u51fd\u6570\u7528\u4e8e\u5bf9\u591a\u4e2a\u9149\u77e9\u9635\u8fdb\u884c\u6c42\u514b\u7f57\u5185\u514b\u79ef\u7684\u64cd\u4f5c\u3002\u6570\u5b66\u4e0a\uff0c\u514b\u7f57\u5185\u514b\u79ef\u662f\u4e24\u4e2a\u4efb\u610f\u5927\u5c0f\u7684\u77e9\u9635\u95f4\u7684\u8fd0\u7b97\u3002\u514b\u7f57\u5185\u514b\u79ef\u662f\u5f20\u91cf\u79ef\u7684\u7279\u6b8a\u5f62\u5f0f |\r\n|        rx\u3001ry\u3001rz\u51fd\u6570         | \u6b64\u7c7b\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316\u4e00\u4e2a\u5355\u6bd4\u7279\u7684\u65cb\u8f6c\u95e8\u9149\u77e9\u9635\u3002\u914d\u548cgate_expand_1toN\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u5355\u6bd4\u7279\u9149\u77e9\u9635\u6269\u5f20\u6210\u5728\u6574\u4e2a\u7ebf\u8def\u4e0a\u7684\u9149\u77e9\u9635 |\r\n|          cont\u51fd\u6570           | \u6b64\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316\u4e00\u4e2a\u4e24\u6bd4\u7279\u7684\u53d7\u63a7\u975e\u95e8\u3002\u914d\u548ctwo_qubit_control_gate\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u4e24\u6bd4\u7279\u9149\u77e9\u9635\u6269\u5f20\u6210\u5728\u6574\u4e2a\u7ebf\u8def\u4e0a\u7684\u9149\u77e9\u9635 |\r\n|  x_gate\u3001y_gate\u3001z_gate\u51fd\u6570   |             \u6b64\u7c7b\u51fd\u6570\u7528\u4e8e\u521d\u59cb\u5316\u4e00\u4e2a\u6ce1\u5229\u77e9\u9635              |\r\n|     gate_expand_1toN      |        \u6b64\u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u5355\u6bd4\u7279\u95e8\u7684\u9149\u77e9\u9635\u6269\u5f20\u6210n\u6bd4\u7279\u9149\u77e9\u9635         |\r\n| two_qubit_control_gate\u51fd\u6570  |        \u6b64\u51fd\u6570\u7528\u4e8e\u5c06\u4e24\u6bd4\u7279\u53d7\u63a7\u95e8\u7684\u9149\u77e9\u9635\u6269\u5f20\u6210n\u6bd4\u7279\u9149\u77e9\u9635         |\r\n| two_qubit_rotation_gate\u51fd\u6570 |        \u6b64\u51fd\u6570\u7528\u4e8e\u5c06\u4e24\u6bd4\u7279\u65cb\u8f6c\u95e8\u7684\u9149\u77e9\u9635\u6269\u5f20\u6210n\u6bd4\u7279\u9149\u77e9\u9635         |\r\n|   multi_control_gate \u51fd\u6570   |        \u6b64\u51fd\u6570\u7528\u4e8e\u5c06\u591a\u6bd4\u7279\u63a7\u5236\u95e8\u7684\u9149\u77e9\u9635\u6269\u5f20\u6210n\u6bd4\u7279\u9149\u77e9\u9635         |\r\n| gate_sequence_product \u51fd\u6570  |   \u6b64\u51fd\u6570\u88abCircuit\u7c7b\u5185\u90e8get\u51fd\u6570\u8c03\u7528\uff0c\u7528\u4e8e\u8ba1\u7b97\u6574\u4e2a\u7ebf\u8def\u7684\u6574\u4f53\u9149\u77e9\u9635   |\r\n|           dag\u51fd\u6570           |            \u6b64\u51fd\u6570\u7528\u4e8e\u6c42\u67d0\u4e2a\u9149\u77e9\u9635\u7684\u5171\u8f6d\u8f6c\u7f6e\u77e9\u9635            |\r\n|         ptrace \u51fd\u6570         | \u6b64\u51fd\u6570\u7528\u4e8e\u5bf9\u67d0\u4e2a\u5bc6\u5ea6\u77e9\u9635\u505a\u504f\u8ff9\u6d4b\u91cf\uff0c\u5b9a\u4e49\u4e0e\u514b\u7f57\u5185\u514b\u79ef\u8fd0\u7b97\u76f8\u53cd\u7684\u8fd0\u7b97\u53eb\u505a\u504f\u8ff9\u8fd0\u7b97  |\r\n|         measure\u51fd\u6570         | \u6b64\u51fd\u6570\u4f7f\u7528\u6ce1\u5229z\u77e9\u9635\u4f5c\u4e3a\u6d4b\u91cf\u7b97\u5b50\uff0c\u5bf9\u67d0\u4e2a\u5bc6\u5ea6\u77e9\u9635\u6d4b\u91cf\u6c42\u671f\u671b\uff0c\u83b7\u5f97n\u6bd4\u7279\u4e2a\u6d4b\u91cf\u7ed3\u679c |\r\n|            I\u51fd\u6570            |               \u6b64\u51fd\u6570\u7528\u4e8e\u751f\u6210\u5355\u4f4d\u77e9\u9635                |\r\n|        Hadamard\u51fd\u6570         |             \u6b64\u51fd\u6570\u7528\u4e8e\u751f\u6210\u4e00\u4e2a\u5355\u6bd4\u7279\u54c8\u8fbe\u739b\u95e8             |\r\n|        encoding\u51fd\u6570         |               \u6b64\u51fd\u6570\u7528\u4e8e\u7f16\u7801\u5bc6\u5ea6\u77e9\u9635                |\r\n|        IsUnitary\u51fd\u6570        |             \u6b64\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u77e9\u9635\u662f\u5426\u4e3a\u9149\u77e9\u9635              |\r\n|      IsNormalized\u51fd\u6570       |             \u6b64\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u77e2\u91cf\u662f\u5426\u5f52\u4e00              |\r\n|       IsHermitian\u51fd\u6570       |             \u6b64\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u77e9\u9635\u662f\u5426\u662f\u5384\u5bc6\u77e9\u9635             |\r\n|      get_fidelity\u51fd\u6570       |                \u6b64\u51fd\u6570\u7528\u4e8e\u4fdd\u771f\u5ea6\u8ba1\u7b97                |\r\n|   get_trace_distance\u51fd\u6570    |                \u6b64\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u8ff9\u8ddd\u79bb                |\r\n\r\n<span id=\"2.3\"></span>\r\n### \u57fa\u4e8eDeepQuantum\u7684\u91cf\u5b50\u7ebf\u8def\r\n\u91cf\u5b50\u7ebf\u8def\u662f\u7531\u91cf\u5b50\u7ebf\u4e92\u8fde\u7684\u91cf\u5b50\u95e8\u7684\u96c6\u5408\u3002\u5728\u57fa\u4e8eDeepQuantum\u7684\u91cf\u5b50\u8ba1\u7b97\u4e2d\uff0c\u7ebf\u8def\u7684\u5b9e\u9645\u7ed3\u6784\u3001\u95e8\u7684\u6570\u91cf\u548c\u7c7b\u578b\u4ee5\u53ca\u4e92\u8fde\u65b9\u6848\u7531\u6240\u8981\u6267\u884c\u7684\u5e7a\u6b63\u53d8\u6362U\u51b3\u5b9a\u3002\r\n\r\n#### \u9149\u77e9\u9635\u7ef4\u5ea6\r\n\u4ee53\u6bd4\u7279\u7ebf\u8def\u4e3a\u4f8b\uff1a\r\n1. \u91cf\u5b50\u6bd4\u7279\u662f\u4e8c\u7ef4\u590d\u5411\u91cf\u7a7a\u95f4\u4e2d\u7684\u5411\u91cf\r\n2. \u82e5\u8003\u8651\u4e00\u4e2a\u7531n\u4e2a\u91cf\u5b50\u6bd4\u7279\u7ec4\u6210\u7684\u7cfb\u7edf\uff0c\u5219\u5176\u7a7a\u95f4\u662f\u4e00\u4e2a$2^n$\u7ef4\u7684\u5e0c\u4f2f\u7279\u590d\u7a7a\u95f4\uff0c\u5373$2^3=8$\r\n\r\n##### \u9149\u77e9\u9635\r\n1. \u91cf\u5b50\u6bd4\u7279\u7684\u6f14\u5316\u662f\u7ebf\u6027\u7684\uff0c\u6240\u4ee5\u91cf\u5b50\u95e8\u53ef\u4ee5\u7528\u77e9\u9635\u8fdb\u884c\u8868\u793a\uff08\u9149\u77e9\u9635\uff09\r\n2. \u91cf\u5b50\u95e8\u77e9\u9635\u7684\u6761\u4ef6\uff1a\u7ecf\u8fc7\u91cf\u5b50\u95e8\u4f5c\u7528\u540e\u5f97\u5230\u7684\u72b6\u6001\u4e5f\u8981\u6ee1\u8db3\u57fa\u6001\u7cfb\u6570\u5e73\u65b9\u548c\u4e3a1\r\n3. \u5355\u91cf\u5b50\u6bd4\u7279\u95e8\u7684\u76f8\u5e94\u77e9\u9635U\uff08\u9149\u77e9\u9635\uff09\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u662f\u201c\u9149\u6027\u201d\uff0c\u5373 $U^\\dagger U=I$, \u5176\u4e2d$U^\\dagger$\u662fU\u7684\u5171\u8f6d\u8f6c\u7f6e\uff0cI\u662f\u5355\u4f4d\u77e9\u9635\u3002\r\n  \u9149\u6027\u9650\u5236\u662f\u5bf9\u91cf\u5b50\u95e8\u7684\u552f\u4e00\u9650\u5236\uff0c\u6bcf\u4e2a\u9149\u77e9\u9635\u90fd\u5b9a\u4e49\u4e00\u4e2a\u6709\u6548\u7684\u91cf\u5b50\u95e8\r\n\r\n#### \u7ea0\u7f20\u6001\r\n\u5bf9\u4e8e\u4e00\u4e2a\u91cf\u5b50\u7cfb\u7edf\uff0c\u5904\u4e8e\u7ea0\u7f20\u72b6\u6001\u7684\u5b50\u7cfb\u7edf\u4e4b\u95f4\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u5bf9\u4e00\u4e2a\u5b50\u7cfb\u7edf\u7684\u6d4b\u91cf\u884c\u4e3a\u4f1a\u6539\u53d8\u53e6\u5916\u4e00\u4e2a\u5b50\u7cfb\u7edf\u7684\u72b6\u6001\r\n\r\n#### CNOT\u95e8\uff08\u53d7\u63a7\u975e\u95e8\uff09\r\n\u5c06\u63a7\u5236\u91cf\u5b50\u6bd4\u7279\u548c\u76ee\u6807\u91cf\u5b50\u6bd4\u7279\u4f5c\u5f02\u6216\u8fd0\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\u50a8\u5b58\u5728\u76ee\u6807\u91cf\u5b50\u6bd4\u7279\u4e2d\r\n\r\n#### Toffoli\u95e8\r\n1. Toffoli\u63a5\u53d7\u4e09\u4e2a\u6bd4\u7279\u4f5c\u4e3a\u8f93\u5165\uff0c\u5176\u4e2d\u4e24\u4e2a\u63a7\u5236\u6bd4\u7279\uff08\u4e0d\u53d7\u95e8\u7684\u5f71\u54cd\uff09\uff0c\u4e00\u4e2a\u76ee\u6807\u6bd4\u7279\uff1b\u5f53\u4e24\u4e2a\u63a7\u5236\u6bd4\u7279\u90fd\u4e3a1\u65f6\uff0c\u5bf9\u76ee\u6807\u6bd4\u7279\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5426\u5219\u76ee\u6807\u6bd4\u7279\u4fdd\u6301\u4e0d\u53d8\u3002\r\n2. \u82e5\u8fde\u7eed\u8fdb\u884c\u4e24\u6b21Toffoli\u95e8\u64cd\u4f5c\uff0c\u7ed3\u679c\u4e0d\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64Toffoli\u95e8\u662f\u53ef\u9006\u95e8\uff0c\u9006\u662f\u5b83\u672c\u8eab\r\n\r\n#### \u6ce1\u5229X\u95e8\r\n\u5355\u6bd4\u7279\u91cf\u5b50\u95e8\uff0c\u76f8\u5f53\u4e8e\u903b\u8f91\u95e8\u4e2d\u7684\u975e\u95e8\uff0c\u91cf\u5b50\u975e\u95e8\u7684\u4f5c\u7528\u662f\u7ebf\u6027\u7684\u3002\r\n$$\r\nX=\\begin{bmatrix}\r\n   0 & 1 \\\\\r\n   1 & 0\r\n\\end{bmatrix}\r\n$$\r\n$$\\alpha \\lvert{0}\\rangle+\\beta \\lvert{1}\\rangle \\xrightarrow{X} \\alpha \\lvert{1}\\rangle+\\beta \\lvert{0}\\rangle\u200b$$\r\n\r\n#### \u6ce1\u5229Y\u95e8\r\n\u5355\u6bd4\u7279\u91cf\u5b50\u95e8\r\n\r\n\r\n$$\r\nY=\\begin{bmatrix}\r\n   0 & -i \\\\\r\n   i & 0\r\n\\end{bmatrix}\r\n$$\r\n\r\n\r\n#### \u6ce1\u5229Z\u95e8\r\n\u5355\u6bd4\u7279\u91cf\u5b50\u95e8\uff0c\u5b83\u4fdd\u6301$\\lvert{0}\\rangle$\u4e0d\u53d8\uff0c\u7ffb\u8f6c$\\lvert{1}\\rangle$\u7684\u7b26\u53f7\u53d8\u4e3a$-\\lvert{1}\\rangle$\r\n\r\n$$\r\nZ=\\begin{bmatrix}\r\n   1 & 0 \\\\\r\n   0 & -1\r\n\\end{bmatrix}\r\n$$\r\n\r\n$$\\alpha \\lvert{0}\\rangle+\\beta \\lvert{1}\\rangle \\xrightarrow{Z} \\alpha \\lvert{0}\\rangle-\\beta \\lvert{1}\\rangle$$\r\n\r\n\r\n#### \u4ea4\u6362\u95e8\r\n$$\r\nSWAP=\\begin{bmatrix}\r\n   1 & 0 & 0 & 0 \\\\\r\n   0 & 0 & 1 & 0 \\\\\r\n   0 & 1 & 0 & 0 \\\\\r\n   0 & 0 & 0 & 1 \\\\\r\n\\end{bmatrix}\r\n$$\r\n\r\n\r\n\r\n#### \u54c8\u8fbe\u739b\u95e8\r\n$$\r\nH=\\frac{1}{\\sqrt{2}}\\begin{bmatrix}\r\n   1 & 1 \\\\\r\n   1 & -1\r\n\\end{bmatrix}\r\n$$\r\n\r\n\r\n\u54c8\u8fbe\u739b\u95e8\u53ef\u4ee5\u5c06$\\lvert{0}\\rangle$\u53d8\u4e3a$(\\lvert{0}\\rangle+\\lvert{1}\\rangle)/\\sqrt{2}$\uff0c\u628a$\\lvert{1}\\rangle$\u53d8\u5230\u540c\u6837\u7684$(\\lvert{0}\\rangle-\\lvert{1}\\rangle)/\\sqrt{2}$\uff08\u8fde\u7eed\u4e24\u6b21\u5e94\u7528\u54c8\u8fbe\u739b\u95e8\u7b49\u4e8e\u4ec0\u4e48\u4e5f\u6ca1\u505a\uff09\r\n\r\n#### \u5f20\u91cf\u79ef\r\n\r\n$$\r\n\\begin{bmatrix}\r\n\r\n\r\n1 & 0 \\\\\r\n0 & 1 \\\\\r\n\r\n\r\n\\end{bmatrix} \r\n\r\n\r\n\\bigotimes \r\n\r\n\r\n  \\begin{bmatrix} \r\n\r\n\r\n2 & 3 \\\\ \r\n4 & 5 \\\\ \r\n\r\n\r\n\\end{bmatrix} = \\begin{bmatrix}\r\n   1\\times2 & 1\\times3 & 0\\times2 & 0\\times3 \\\\\r\n   1\\times4 & 1\\times5 & 0\\times4 & 0\\times5 \\\\\r\n   0\\times2 & 0\\times3 & 1\\times2 & 1\\times3 \\\\\r\n   0\\times4 & 0\\times5 & 1\\times4 & 1\\times5 \\\\\r\n\\end{bmatrix}\r\n$$\r\n\r\n\r\n##### \u793a\u4f8b\r\n```python\r\nfrom deepquantum.utils import multi_kron\r\n\r\na = torch.tensor([[1, 0], [0, 1]])\r\nb = torch.tensor([[1, 0], [0, 1]])\r\n\r\nresult = multi_kron([a, b])\r\n```\r\n\r\n#### \u5171\u8f6d\u8f6c\u7f6e\u77e9\u9635\r\n- \u5171\u8f6d\u590d\u6570\uff1a\u5b9e\u90e8\u76f8\u540c\uff0c\u865a\u90e8\u4e92\u4e3a\u76f8\u53cd\u6570\u7684\u590d\u6570\u4e92\u4e3a\u5171\u8f6d\u590d\u6570\r\n- \u5171\u8f6d\u8f6c\u7f6e\uff1a\u5148\u8fdb\u884c\u5171\u8f6d\u64cd\u4f5c\uff0c\u7136\u540e\u5bf9\u77e9\u9635\u8fdb\u884c\u8f6c\u7f6e\r\n##### \u793a\u4f8b\r\n```python\r\nfrom deepquantum.utils import dag\r\n\r\na = torch.randint(0,4,(2,2)) + 0j\r\na_dag = dag(a)\r\n```\r\n\r\n#### \u5bc6\u5ea6\u77e9\u9635\r\n\u5f53\u91cf\u5b50\u7cfb\u7edf\u5904\u4e8e\u7eaf\u6001\u65f6\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u901a\u5e38\u7528\u6ce2\u51fd\u6570\u6216\u6001\u77e2\u91cf\u8868\u793a\uff1b\u5f53\u7cfb\u7edf\u5904\u4e8e\u6df7\u5408\u6001\u65f6\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7528\u5bc6\u5ea6\u77e9\u9635\u8868\u793a\u3002\r\n##### \u5bc6\u5ea6\u77e9\u9635\u8ba1\u7b97\r\n1. \u7eaf\u6001\uff1a$\\rho = \\lvert{\\psi}\\rangle\\langle{\\psi}\\lvert$\r\n2. \u6df7\u6001\uff1a$\\rho_{mix} = \\sum_{i} p_{i} \\lvert{\\psi}\\rangle\\langle{\\psi}\\lvert$\r\n##### \u793a\u4f8b\r\n```python\r\nfrom deepquantum.utils import encoding\r\n\r\na = torch.randint(0,4,(2,2))\r\na_enc = encoding(a)\r\n```\r\n\r\n\r\n#### \u504f\u8ff9\r\n\u5bf9\u4e8e\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5b50\u7cfb\u7edf\u7684\u91cf\u5b50\u7cfb\u7edf\uff0c\u5e94\u7528\u504f\u8ff9\u8fd0\u7b97\u53ef\u4ee5\u6c42\u89e3\u4e0d\u540c\u5b50\u7cfb\u7edf\u7684\u7ea6\u5316\u5bc6\u5ea6\u77e9\u9635\r\n##### \u793a\u4f8b\r\n```python\r\nimport torch\r\nfrom deepquantum.utils import ptrace, encoding\r\n    \r\na = torch.ones(8,8)\r\na_enc = encoding(a)\r\n\r\na_ptr = ptrace(a_enc,1,2)\r\n```\r\n\r\n#### \u6d4b\u91cf\r\n\u4f7f\u7528DeepQuantum\u4e2d\u7684measure()\u51fd\u6570\u5bf9\u67d0\u4e2a\u5b50\u7cfb\u7edf\u8fdb\u884c\u6d4b\u91cf\u6c42\u671f\u671b\r\n##### \u793a\u4f8b\r\n```python\r\nfrom deepquantum.utils import expecval_ZI, measure, encoding\r\n\r\na = torch.rand(8,8)   # 3\u4e2a\u91cf\u5b50\u6bd4\u7279\r\na_enc = encoding(a)   # \u8ba1\u7b97\u5bc6\u5ea6\u77e9\u9635\r\na_exp = expecval_ZI(a_enc, 3, 0)\r\na_measure = measure(a_enc, 3)\r\n```\r\n\r\n#### \u4fdd\u771f\u5ea6\r\n\u8868\u793a\u4fe1\u606f\u5728\u4f20\u8f93\u548c\u5904\u7406\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u539f\u6765\u72b6\u6001\u7684\u7a0b\u5ea6\uff0c\u8fd9\u91cc\u7528\u6765\u8861\u91cf\u8f93\u5165\u8f93\u51fa\u91cf\u5b50\u6001\u4e4b\u95f4\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\r\n##### \u793a\u4f8b\r\n```python\r\nfrom deepquantum.utils import get_fidelity,encoding\r\n\r\na = torch.rand(8,8)\r\nb = torch.rand(8,8)\r\na = encoding(a)\r\nb = encoding(b)\r\n\r\nfidelity = get_fidelity(a,b)\r\n```\r\n\r\n<span id=\"3\"></span>\r\n***\r\n## \u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\r\n\r\n<span id=\"3.1\"></span>\r\n### QuConv\r\nDeepQuantum\u4e3a\u65b9\u4fbf\u7528\u6237\u4f7f\u7528\u63d0\u4f9b\u4e86\u91cf\u5b50\u5377\u79ef\u6838\uff0c\u91cf\u5b50\u5377\u79ef\u4e4b\u540e\u53ef\u4ee5\u662f\u91cf\u5b50\u5c42\u6216\u7ecf\u5178\u5c42\u3002\u4e0e\u7ecf\u5178\u5377\u79ef\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u91cf\u5b50\u7535\u8def\u53ef\u4ee5\u751f\u6210\u9ad8\u5ea6\u590d\u6742\u7684\u5185\u6838\uff0c\u5176\u8ba1\u7b97\u81f3\u5c11\u5728\u539f\u5219\u4e0a\u662f\u7ecf\u5178\u4e0a\u96be\u4ee5\u5904\u7406\u7684\u3002\r\n\r\n#### QuConv\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* QuConvXYZ\uff1a\u5728\u91cf\u5b50\u7ebf\u8def\u4e0a\u653e\u7f6e\u4e86\u5355\u6bd4\u7279\u6ce1\u5229\u65cb\u8f6c\u95e8\u4ee5\u53ca\u53cc\u6bd4\u7279\u65cb\u8f6c\u95e8\uff0c\u5982$R_x(\\theta_1)$\u3001$R_y(\\theta_3)$\u3001$R_z(\\theta_5)$\u4ee5\u53ca$R_{xx}(\\theta_6)$\u7b49\uff0c\u8be5\u91cf\u5b50\u5377\u79ef\u6838\u670914\u4e2a\u53c2\u6570\r\n* QuConvSXZ\uff1a\u7ec4\u6210\u548cQuConvXYZ\u76f8\u540c\uff0c\u4f46\u662f\u6240\u5305\u542b\u7684\u53c2\u6570\u8f83\u5c11\uff0c\u7ebf\u8def\u8f83\u7b80\u5355\r\n\r\n#### QuConv\u4f7f\u7528\u65b9\u6cd5\r\n\u4ee5QuConvXYZ\u4e3a\u4f8b\uff0c\u9996\u5148\u8f93\u5165\u4e00\u4e2a\u6570\u636e\u5b9e\u4f8b\u5316\u91cf\u5b50\u5377\u79ef\u6838\uff0c\u8fd9\u91cc\u6ce8\u610f\u5b9e\u4f8b\u5316\u6570\u636e\u5fc5\u987b\u4e3a2\u7684\u500d\u6570\r\n```python\r\nQuConv=QuConvXYZ(4)  #\u5b9a\u4e49\u4e864\u6bd4\u7279\u91cf\u5b50\u7ebf\u8def\r\n```\r\n\u63a5\u4e0b\u6765\u5c06\u8f93\u5165\u6570\u636e\u7f16\u7801\u6210\u91cf\u5b50\u6001\uff0c\u5e76\u8f93\u5165\u5230\u5b9a\u4e49\u7684\u5377\u79ef\u6838\u4e2d\r\n```python\r\nX=torch.rand(16,16)  #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u7ef4\u5ea6\u7684\u77e9\u9635\r\nX=encoding(X)      #\u5c06\u7ecf\u5178\u6570\u636e\u7f16\u7801\u6210\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\r\n\r\nout=QuConv(X)\r\n```\r\nQuConvSXZ\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0eQuConvXYZ\u65b9\u6cd5\u7c7b\u4f3c\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import encoding\r\n\r\nclass My_QuConv(nn.Module):\r\n    def __init__(self,n_qubits):\r\n        super(My_QuConv, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.linear = nn.Linear(250,2**self.n_qubits)\r\n        self.QuConvX = Qnn.QuConvXYZ(self.n_qubits)\r\n        self.QuConvS = Qnn.QuConvSXZ(self.n_qubits)\r\n        \r\n    def forward(self,x):\r\n        x = self.linear(x)\r\n        x = Gram(x)      #\u5c06\u5411\u91cfx\u8f93\u5165\u5230Gram\u51fd\u6570\u4e2d\u7f16\u7801\u4e3a\u5bf9\u5e94\u7684\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\r\n        x = self.QuConvX(x)\r\n        out = self.QuConvS(x)\r\n        return out\r\n    \r\n#\u521d\u59cb\u5316\u6a21\u578b\u65f6\u8f93\u5165\u9700\u8981\u662f2\u7684\u500d\u6570    \r\nmodule = My_QuConv(4)\r\nx = torch.rand(1,250)\r\nresult = module(x)\r\n```\r\n\r\n<span id=\"3.2\"></span>\r\n### DeQuConv\r\nDeepQuantum\u63d0\u4f9b\u4e86DeQuConv\u662f\u4e0a\u8ff0QuConv\u7684$U^\\dagger$\uff0c\u5728\u91cf\u5b50\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u76f8\u5f53\u4e8e\u6570\u636e\u5728QuConv\u7684\u91cf\u5b50\u7ebf\u8def\u4e2d\u9006\u6f14\u5316\u3002\r\n\r\n#### DeQuConv\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* DeQuConvXYZ\uff1a\u5728\u91cf\u5b50\u7ebf\u8def\u4e0a\u653e\u7f6e\u4e86\u5355\u6bd4\u7279\u6ce1\u5229\u65cb\u8f6c\u95e8\u4ee5\u53ca\u53cc\u6bd4\u7279\u65cb\u8f6c\u95e8\u540cQuConv\uff0c\u7136\u540e\u4f7f\u7528dag()\u64cd\u4f5c\u5f97\u5230$U$\u7684\u5171\u8f6d\u8f6c\u7f6e\u77e9\u9635$U^\\dagger$\r\n* DeQuConvSXZ\uff1a\u4e0e\u4e0a\u8ff0\u7c7b\u4f3c\r\n\r\n#### DeQuConv\u4f7f\u7528\u65b9\u6cd5\r\nDeQuConv\u4f7f\u7528\u65b9\u6cd5\u4e0eQuConv\u76f8\u540c\uff0c\u8bf7\u53c2\u7167QuConv\u7684\u4f7f\u7528\u65b9\u6cd5\u3002\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import Gram\r\n\r\nclass My_DeQuConv(nn.Module):\r\n    def __init__(self,n_qubits):\r\n        super(My_DeQuConv, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.linear = nn.Linear(250,2**self.n_qubits)\r\n        self.DeQuConvX = Qnn.DeQuConvXYZ(self.n_qubits)\r\n        \r\n    def forward(self,x):\r\n        x = self.linear(x)\r\n        x = Gram(x)\r\n        out = self.DeQuConvX(x)\r\n        return out\r\n\r\nmodule = My_DeQuConv(4)\r\nx = torch.rand(1,250)\r\nresult = module(x)\r\n```\r\n\r\n<span id=\"3.3\"></span>\r\n### QuPool\r\nDeepQuantum\u63d0\u4f9b\u4e86\u91cf\u5b50\u6c60\u5316\u6838\u65b9\u4fbf\u7528\u6237\u76f4\u63a5\u4f7f\u7528\uff0c\u5f15\u5165\u53d7\u63a7\u95e8\u5c06\u76f8\u90bb\u7ebf\u8def\u7684\u91cf\u5b50\u6001\u7ea0\u7f20\u8d77\u6765\uff0c\u6a21\u62df\u7ecf\u5178\u6c60\u5316\u63d0\u53d6\u6570\u636e\u66f4\u6df1\u5c42\u6b21\u7279\u5f81\u7684\u4f5c\u7528\u3002\r\n\r\n#### QuPool\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* QuPoolXYZ\uff1a\u5728\u91cf\u5b50\u7ebf\u8def\u4e0a\u653e\u7f6e\u4e86\u5355\u6bd4\u7279\u6ce1\u5229\u65cb\u8f6c\u95e8\u4ee5\u53ca\u53d7\u63a7\u95e8cnot()\uff0c\u5176\u4e2d\u5355\u6bd4\u7279\u6ce1\u5229\u65cb\u8f6c\u95e8\u5982$R_x(\\theta_1)$\u3001$R_y(\\theta_3)$\u3001$R_z(\\theta_5)$\r\n* QuPoolSX\uff1a\u53ea\u5305\u542b\u4e86\u5355\u6bd4\u7279x\u6ce1\u5229\u65cb\u8f6c\u95e8\u548c\u53d7\u63a7\u95e8cnot()\r\n\r\n#### QuPool\u4f7f\u7528\u65b9\u6cd5\r\n\u4ee5QuPoolXYZ\u4e3a\u4f8b\uff0c\u9996\u5148\u8f93\u5165\u4e00\u4e2a\u6570\u636e\u5b9e\u4f8b\u5316\u91cf\u5b50\u6c60\u5316\u6838\uff0c\u8fd9\u91cc\u6ce8\u610f\u793a\u4f8b\u5316\u65f6\u7684\u6570\u5fc5\u987b\u4e3a2\u7684\u500d\u6570\r\n```python\r\nQuPool=QuPoolXYZ(4)  #\u5b9a\u4e49\u4e864\u6bd4\u7279\u91cf\u5b50\u7ebf\u8def\r\n```\r\n\u63a5\u4e0b\u6765\u5c06\u8f93\u5165\u6570\u636e\u7f16\u7801\u6210\u91cf\u5b50\u6001\uff0c\u5e76\u8f93\u5165\u5230\u5b9a\u4e49\u7684\u5377\u79ef\u6838\u4e2d\r\n```python\r\nX=torch.rand(16,16)  #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u7ef4\u5ea6\u7684\u77e9\u9635\r\nX=encoding(X)      #\u5c06\u7ecf\u5178\u6570\u636e\u7f16\u7801\u6210\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\r\n\r\nout=QuPool(X)\r\n```\r\nQuPoolSX\u7684\u4f7f\u7528\u65b9\u6cd5\u4e0eQuPoolXYZ\u65b9\u6cd5\u7c7b\u4f3c\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import Gram\r\n\r\nclass My_QuPool(nn.Module):\r\n    def __init__(self,n_qubits):\r\n        super(My_QuPool, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.linear = nn.Linear(250,2**self.n_qubits)\r\n        self.QuConvX = Qnn.QuConvXYZ(self.n_qubits)\r\n        self.QuPoolX = Qnn.QuPoolXYZ(self.n_qubits)\r\n        self.QuPoolS = Qnn.QuPoolSX(self.n_qubits)\r\n        \r\n    def forward(self,x):\r\n        x = self.linear(x)\r\n        x = Gram(x)\r\n        x = self.QuConvX(x)\r\n        x = self.QuPoolX(x)\r\n        out = self.QuPoolS(x)\r\n        return out\r\n\r\nmodule = My_QuPool(4)\r\nx = torch.rand(1,250)\r\nresult = module(x)\r\n```\r\n\r\n<span id=\"3.4\"></span>\r\n### DeQuPool\r\n\u540c\u7406DeQuPool\u662f\u4e0a\u8ff0QuPool\u91cf\u5b50\u7ebf\u8def$U$\u9149\u77e9\u9635\u77e9\u9635\u7684$U^\\dagger$\u3002\r\n\r\n#### DeQuPool\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* DeQuPoolXYZ\uff1a\u5728\u91cf\u5b50\u7ebf\u8def\u4e0a\u653e\u7f6e\u4e86\u5355\u6bd4\u7279\u6ce1\u5229\u65cb\u8f6c\u95e8\u4ee5\u53ca\u53d7\u63a7\u95e8\u540cQuPool\uff0c\u7136\u540e\u4f7f\u7528dag()\u5f97\u5230$U$\u9149\u77e9\u9635\u7684$U^\\dagger$\r\n* DeQuPoolSX\uff1a\u4e0e\u4e0a\u8ff0\u7c7b\u4f3c\r\n\r\n#### DeQuPool\u4f7f\u7528\u65b9\u6cd5\r\nDeQuPool\u4f7f\u7528\u65b9\u6cd5\u4e0eQuPool\u76f8\u540c\uff0c\u8bf7\u53c2\u7167QuPool\u7684\u4f7f\u7528\u65b9\u6cd5\u3002\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import Gram\r\n\r\nclass My_DeQuPool(nn.Module):\r\n    def __init__(self,n_qubits):\r\n        super(My_DeQuPool, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.linear = nn.Linear(250,2**self.n_qubits)\r\n        self.QuConvX = Qnn.QuConvXYZ(self.n_qubits)\r\n        self.QuPoolX = Qnn.QuPoolXYZ(self.n_qubits)\r\n        self.DeQuPoolX = Qnn.DeQuPoolXYZ(self.n_qubits)\r\n        self.DeQuPoolS = Qnn.DeQuPoolSX(self.n_qubits)\r\n        \r\n    def forward(self,x):\r\n        x = self.linear(x)\r\n        x = Gram(x)\r\n        x = self.QuConvX(x)\r\n        x = self.QuPoolX(x)\r\n        x = self.DeQuPoolX(x)\r\n        out = self.DeQuPoolS(x)\r\n        return out\r\n    \r\nmodule = My_DeQuPool(4)\r\nx = torch.rand(1,250)\r\nresult = module(x)\r\n```\r\n\r\n<span id=\"3.5\"></span>\r\n### QuLinear\r\nDeepQuantum\u4e2d\u7684QuLinear\u662f\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\u4e2d\u88ab\u7528\u6765\u66ff\u4ee3PyTorch\u4e2d\u7684nn.Linear,\u589e\u5f3a\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b\u7684\u3002\r\n\r\n#### QuLinear\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* QuLinear:\u5148\u5b9a\u4e49\u91cf\u5b50\u7ebf\u5f62\u6210\u7684\u8f93\u5165\u548c\u8f93\u51fa\u7ef4\u5ea6\uff0c\u7136\u540e\u5c06\u6570\u636e\u8f93\u5165\u5230QuLinear\u4e2d\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\r\n\r\n#### QuLinear\u4f7f\u7528\u65b9\u6cd5\r\n\u9996\u5148\u5b9a\u4e49\u8f93\u5165\u7279\u5f81\u548c\u8f93\u51fa\u7279\u5f81\u7ef4\u5ea6\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u8f93\u51fa\u7ef4\u5ea6out_features\u9700\u8981\u6ee1\u8db3$2^1\\leq2^i\\leq2^{in-features}$\r\n```python\r\nQL=QuLinear(6,32)  #\u5b9a\u4e49\u4e86\u8f93\u5165\u548c\u8f93\u51fa\u7279\u5f81\r\n```\r\n\u63a5\u4e0b\u6765\u751f\u6210\u8f93\u5165\u6570\u636e\uff0c\u7528\u6237\u8fd9\u91cc\u5e94\u8be5\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\uff0c\u4e0a\u4e00\u6b65\u7684\u5b9a\u4e49\u4e5f\u9700\u8981\u6839\u636e\u9700\u8981\u81ea\u884c\u5b9a\u4e49\r\n```python\r\nX=torch.rand(64,1)  #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u7ef4\u5ea6\u7684\u77e9\u9635\r\n\r\nout=QL(X)\r\nprint('\u7ed3\u679c\uff1a',out)\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u7ed3\u679c\uff1a tensor([[0.0834, 0.0257, 0.0419, 0.0088, 0.0652, 0.0187, 0.0434, 0.0105, 0.1252,\r\n         0.0317, 0.0511, 0.0113, 0.0973, 0.0239, 0.0466, 0.0113, 0.0141, 0.0157,\r\n         0.0067, 0.0228, 0.0223, 0.0134, 0.0236, 0.0210, 0.0284, 0.0137, 0.0218,\r\n         0.0143, 0.0145, 0.0254, 0.0122, 0.0339]],\r\n       grad_fn=<UnsqueezeBackward0>)\r\n```\r\n\u8fd9\u91cc\u8f93\u5165\u7684\u6570\u636eX\u662f\u7528\u6237\u9700\u8981\u505a\u7ebf\u6027\u6fc0\u6d3b\u7684\u7ecf\u5178\u6570\u636e\uff0c\u8f93\u5165QuLinear\u540e\u4f1a\u81ea\u52a8\u5c06\u5176\u7f16\u7801\u4e3a\u91cf\u5b50\u6001\uff0c\u7ecf\u8fc7\u6f14\u5316\u540e\u5bf9\u5176\u8fdb\u884c\u6d4b\u91cf\u5e76\u8f93\u51fa\u7ed3\u679c\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\n\r\nclass My_QuLinear(nn.Module):\r\n    def __init__(self,n_qubits,out_qubits):\r\n        super(My_QuLinear, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.out_features = 2**out_qubits\r\n        self.linear = nn.Linear(250,self.n_qubits)\r\n        self.Qulinear = Qnn.QuLinear(self.n_qubits,self.out_features)\r\n        \r\n    def forward(self,x):\r\n        x = self.linear(x)\r\n        out = self.Qulinear(x)\r\n        return out\r\n    \r\nmodule = My_QuLinear(6,5)\r\nx=torch.rand(1,250)\r\nresult = module(x)\r\nprint('\u7ed3\u679c\uff1a',result)\r\n\r\n#\u7ed3\u679c\u5982\u4e0b\r\n\u7ed3\u679c\uff1a tensor([[0.0298, 0.0751, 0.0795, 0.0231, 0.0986, 0.0326, 0.0480, 0.0834, 0.0207,\r\n         0.0434, 0.0542, 0.0129, 0.0597, 0.0230, 0.0282, 0.0551, 0.0113, 0.0191,\r\n         0.0258, 0.0065, 0.0273, 0.0128, 0.0130, 0.0264, 0.0053, 0.0163, 0.0125,\r\n         0.0058, 0.0198, 0.0059, 0.0105, 0.0143]],\r\n       grad_fn=<UnsqueezeBackward0>)\r\n```\r\n\r\n<span id=\"3.6\"></span>\r\n### QuAE\r\n\u91cf\u5b50\u81ea\u7f16\u7801\u7f51\u7edc\u6765\u538b\u7f29\u548c\u91cd\u6784\u8f93\u5165\u91cf\u5b50\u6001\uff0c\u4e3a\u6b64\u9700\u8981\u7528\u91cf\u5b50\u7ebf\u8def\u5b9e\u73b0\u7f16\u7801\u5668encoder\u7f51\u7edc\u548c\u89e3\u7801\u5668decode\u7f51\u7edc\u3002DeepQuantumy\u63d0\u4f9b\u5df2\u5b9a\u4e49\u597d\u7684AE\u7f51\u7edc\u53ea\u9700\u5c06\u6570\u636e\u8f93\u5165\u5373\u53ef\u91cd\u6784\u51fa\u91cf\u5b50\u6001\u3002\r\n\r\n#### QuAE \u63d0\u4f9b\u7684\u63a5\u53e3\r\n* Qu_AEnet\uff1a\u5b9e\u4f8b\u5316\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\u5c42\u540e\uff0c\u8f93\u5165\u538b\u7f29\u6570\u636eX,\u5355\u4f4d\u77e9\u9635I\uff0c\u7f16\u7801\u540e\u4fdd\u7559\u7684\u6bd4\u7279\u6570N\u548c\u4e22\u5f03\u7684\u6bd4\u7279\u6570N_Trash\r\n\r\n#### QuAE\u4f7f\u7528\u65b9\u6cd5\r\n\u9996\u5148\u5b9e\u4f8b\u5316\u91cf\u5b50\u81ea\u7f16\u7801\u7f51\u7edc\u7684\u6bd4\u7279\u6570\r\n```python\r\nQuAE=Qu_AEnet(8) #\u5b9e\u4f8b\u5316\u4e00\u4e2a8\u6bd4\u7279\u7684\u91cf\u5b50\u81ea\u7f16\u7801\u7f51\u7edc\r\n```\r\n\u8fd9\u91cc\u5bf9\u5e94\u7684\u8f93\u5165\u6570\u636e\u5e94\u4e3a$2^8\\times2^8$\u7684\u6570\u636e\uff0c\u5047\u5982\u4fdd\u75597\u6bd4\u7279\u7684\u6570\u636e\u90a3\u4e48\u5355\u4f4d\u77e9\u9635\u4e3a$2^{8-7}\\times2^{8-7}$\r\n```python\r\nx=torch.rand(256,256)  #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u7ef4\u5ea6\u7684\u77e9\u9635\r\nX=encoding(x)       #\u5c06\u7ecf\u5178\u6570\u636e\u7f16\u7801\u4e3a\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\r\nI=torch.eye(2)      #\u751f\u6210\u7b26\u5408\u8981\u6c42\u7684\u5355\u4f4d\u77e9\u9635I\r\n```\r\n\u5c06\u6570\u636e\u8f93\u5165\u5230\u91cf\u5b50\u81ea\u7f16\u7801\u7f51\u7edc\u4e2d\r\n```python\r\nout=QuAE(X,I,7,1)\r\nprint('\u7ed3\u679c',out)\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u7ed3\u679c tensor([[ 1.4972e-01+1.4203e-08j,  2.3368e-03+6.4389e-02j,\r\n         -6.2205e-02+1.0121e-02j,  ...,\r\n          1.7100e-03+1.3212e-03j, -1.2927e-03+2.9093e-03j,\r\n          3.4853e-04+3.0846e-03j],\r\n        [ 2.3368e-03-6.4389e-02j,  1.2847e-01+6.9849e-09j,\r\n         -7.1227e-02+1.1383e-02j,  ...,\r\n          2.5565e-03-3.5899e-03j, -2.1651e-03+2.4778e-03j,\r\n         -1.0873e-03-2.9004e-03j],\r\n        [-6.2205e-02-1.0121e-02j, -7.1227e-02-1.1383e-02j,\r\n          1.3469e-01-6.2864e-09j,  ...,\r\n         -1.5109e-03+1.5907e-03j,  1.0315e-03-2.6573e-03j,\r\n          2.4558e-03+1.2072e-04j],\r\n        ...,\r\n        [ 1.7100e-03-1.3212e-03j,  2.5565e-03+3.5899e-03j,\r\n         -1.5109e-03-1.5907e-03j,  ...,\r\n          1.6151e-04+5.8208e-10j, -1.2107e-04-1.3201e-05j,\r\n          9.0529e-05-6.1642e-05j],\r\n        [-1.2927e-03-2.9093e-03j, -2.1651e-03-2.4778e-03j,\r\n          1.0315e-03+2.6573e-03j,  ...,\r\n         -1.2107e-04+1.3195e-05j,  3.0566e-04+9.3714e-09j,\r\n          8.7468e-05+7.1358e-05j],\r\n        [ 3.4853e-04-3.0846e-03j, -1.0873e-03+2.9004e-03j,\r\n          2.4558e-03-1.2071e-04j,  ...,\r\n          9.0531e-05+6.1647e-05j,  8.7472e-05-7.1363e-05j,\r\n          3.6828e-04+3.1723e-09j]], grad_fn=<MmBackward0>)\r\n```\r\n\u7528\u6237\u53ef\u4ee5\u53c2\u7167\u4ee5\u4e0a\u65b9\u6cd5\uff0c\u6839\u636e\u81ea\u5df1\u7684\u6570\u636e\u5b9a\u4e49\u91cf\u5b50\u7ebf\u8def\u6570\u91cf\u4ee5\u53ca\u4fdd\u7559\u6bd4\u7279\u6570N\u7b49\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import Gram\r\n\r\nclass My_QuAE(nn.Module):\r\n    def __init__(self,n_qubits,n_retain):\r\n        super(My_QuAE, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.n_retain = n_retain\r\n        self.n_trash = self.n_qubits-self.n_retain\r\n        self.QuAE = Qnn.Qu_AEnet(self.n_qubits)\r\n        self.I = torch.eye(2**self.n_trash)\r\n        \r\n    def forward(self,x):\r\n        x = Gram(x)\r\n        out = self.QuAE(x, self.I, self.n_retain, self.n_trash)\r\n        return out\r\n \r\nmodule = My_QuAE(8,7)\r\nx = torch.rand(1,256)\r\nresult = module(x)\r\n\r\n```\r\n\u6ce8\u610f\u521d\u59cb\u5316\u65f6\u9700\u8981\u6ee1\u8db3$0\\leq{n retain}\\leq{n qubits}$\r\n\r\n<span id=\"3.7\"></span>\r\n### QuGRU\r\nGRU(Gate Recurrent Unit)\u662f\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u7684\u4e00\u79cd\uff0c\u662f\u4e3a\u4e86\u89e3\u51b3\u957f\u671f\u8bb0\u5fc6\u548c\u53cd\u5411\u4f20\u64ad\u4e2d\u7684\u68af\u5ea6\u7b49\u95ee\u9898\u800c\u63d0\u51fa\u6765\u7684\u3002QuGRU\u539f\u7406\u5728\u7ecf\u5178GRU\u4e0a\u505a\u4e86\u903b\u8f91\u4e0a\u7684\u6620\u5c04\u3002\r\n\r\n#### QuGRU\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* QuGRU\uff1a\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u9700\u8981\u8f93\u5165\u4e09\u4e2a\u6570\uff0c\u5206\u522b\u662f\u8f93\u5165\u7ef4\u5ea6\u3001\u9690\u85cf\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\uff0c\u7136\u540e\u5c06\u6570\u636ex\u8f93\u5165\u6a21\u578b\uff0c\u5f97\u5230QuGRU\u8ba1\u7b97\u540e\u7ed3\u679c\r\n\r\n#### QuGRU\u4f7f\u7528\u65b9\u6cd5\r\n\u9996\u5148\u5b9a\u4e49\u8f93\u5165\u7ef4\u5ea6\u3001\u9690\u85cf\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u9690\u85cf\u7ef4\u5ea6$2^1\\leq2^i\\leq2^{input-dim}$\r\n```python\r\nQG=QuGRU(3,8,3)  #\u5b9a\u4e49\u4e86\u8f93\u5165\u3001\u9690\u85cf\u4ee5\u53ca\u8f93\u51fa\u7ef4\u5ea6\r\n```\r\n\u63a5\u4e0b\u6765\u751f\u6210\u8f93\u5165\u6570\u636e\uff0c\u7528\u6237\u8fd9\u91cc\u5e94\u8be5\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\uff0c\u4e0a\u4e00\u6b65\u7684\u5b9a\u4e49\u4e5f\u9700\u8981\u6839\u636e\u9700\u8981\u81ea\u884c\u5b9a\u4e49\u3002\u6ce8\u610f\u8fd9\u91cc\u5f20\u91cf\u8f93\u5165\u7ef4\u5ea6\u4e3a(batch_size, seq_length, input_dim)\r\n```python\r\nX=torch.rand(1,8,3)  #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u7ef4\u5ea6\u7684\u77e9\u9635\r\n\r\nout=QG(X)\r\nprint('\u7ed3\u679c',out)\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u7ed3\u679c tensor([[-0.0015, -0.0575,  0.1222]], grad_fn=<AddmmBackward0>)\r\n```\r\n\u8fd9\u91cc\u8f93\u5165\u6570\u636ex\u662f\u7528\u6237\u9700\u8981\u8f93\u5165QuGRU\u7684\u7ecf\u5178\u6570\u636e\uff0c\u8f93\u5165QuGRU\u540e\u4f1a\u81ea\u52a8\u5c06\u5176\u7f16\u7801\u4e3a\u91cf\u5b50\u6001\u6570\u636e\u7ecf\u8fc7\u6f14\u5316\u540e\u8f93\u5165\u7b26\u5408\u8981\u6c42\u7684\u7ed3\u679c\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\n\r\nclass My_QuGRU(nn.Module):\r\n    def __init__(self,input_dim, hidden_dim, Quoutput_dim):\r\n        super(My_QuGRU, self).__init__()\r\n        self.n_qubits = input_dim\r\n        self.hidden_dim = hidden_dim\r\n        self.output_dim = Quoutput_dim\r\n        self.QuGRU = Qnn.QuGRU(self.n_qubits,self.hidden_dim, self.output_dim)\r\n        self.linear = nn.Linear(self.output_dim,4)\r\n        \r\n    def forward(self,x):\r\n        x = self.QuGRU(x)\r\n        out = self.linear(x)\r\n        return out\r\n    \r\nmodule = My_QuGRU(3,8,3)\r\nx=torch.rand(1,8,3)\r\nresult = module(x)\r\nprint('\u7ed3\u679c\uff1a',result)\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u7ed3\u679c\uff1a tensor([[-0.0485,  0.3078,  0.5784, -0.1791]], grad_fn=<AddmmBackward0>)\r\n```\r\n\r\n<span id=\"3.8\"></span>\r\n### QuSAAE\r\n\u5728\u91cf\u5b50\u5bf9\u6297\u81ea\u7f16\u7801\u7f51\u7edc\u4e2d\uff0c\u7f16\u7801\u5668\u5bf9\u8f93\u5165\u6570\u636eX\u8fdb\u884c\u538b\u7f29\uff0c\u4e3b\u8981\u4fdd\u7559\u4e0e\u6807\u7b7e\u6570\u636eY\u65e0\u5173\u7684\u6570\u636e$Z_x$\u3002\u89e3\u7801\u5668\u8f93\u5165$Z_x$\u548cY\u7684\u6df7\u5408\u6570\u636e\uff0c\u91cd\u6784\u8f93\u5165\u6570\u636e$R_x$\u3002\u5224\u522b\u5668\u8f93\u5165$Z_x$\u53ca\u5176\u6b63\u6001\u5206\u5e03\u6570\u636e\u7528\u4e8e\u540e\u7eed\u7684\u8bad\u7ec3\u548c\u4f18\u5316\u3002\r\n\r\n#### QuSAAE \u7b97\u6cd5\u903b\u8f91\u56fe\r\n\r\n<img src=\"./deepquantum/pictures/SAAE.png\" style=\"zoom:45%\">\r\n\r\n#### QuSAAE\u63d0\u4f9b\u63a5\u53e3\r\n* Q_Encoder\uff1a\u5148\u5b9e\u4f8b\u5316\u91cf\u5b50\u7f16\u7801\u5668\u540e\uff0c\u8f93\u5165\u6570\u636e\u548c\u4fdd\u7559\u6bd4\u7279\u6570\r\n\r\n* Q_Decoder\uff1a\u5148\u5b9e\u4f8b\u5316\u540e\uff0c\u8f93\u5165$Z_x$\u548cY\r\n\r\n* Q_Discriminator\uff1a\u6839\u636e$Z_x$\u5b9e\u4f8b\u5316\uff0c\u7136\u540e\u8f93\u5165\u5224\u522b\u6570\u636e\r\n\r\n#### QuSAAE\u4f7f\u7528\u65b9\u6cd5\r\n\u8c03\u7528DeepQuantum 0.0.2\u7248\u672c\u53ca\u4ee5\u4e0a\u4e2d\u7684\u91cf\u5b50\u7f16\u7801\u5668\r\n```python\r\nQE=Q_Encoder(6)    #\u5b9e\u4f8b\u5316\u4e00\u4e2a6\u6bd4\u7279\u7684\u91cf\u5b50\u7f16\u7801\u5668\r\n```\r\n\u8fd9\u91cc\u4f7f\u75286\u6bd4\u7279\u5b9e\u4f8b\u5316\u91cf\u5b50\u7f16\u7801\u5668\uff0c\u5bf9\u5e94\u7684\u8f93\u5165\u6570\u636eX\u7684\u7ef4\u5ea6\u5e94\u4e3a$2^6\\times2^6$\r\n```python\r\nX=torch.rand(64,64) #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u7ef4\u5ea6\u7684\u77e9\u9635\r\nX=encoding(X)      #\u5c06\u7ecf\u5178\u6570\u636e\u7f16\u7801\u6210\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\r\nZx=QE(X,4)        #\u8f93\u5165\u91cf\u5b50\u5224\u522b\u5668\u4e2d\u5e76\u8f93\u5165\u4fdd\u7559\u7684\u6bd4\u7279\u6570\r\n\r\n```\r\n\u5c06\u6570\u636eX\u8f93\u5165\u5230\u5b9e\u4f8b\u5316\u7684\u91cf\u5b50\u7f16\u7801\u5668\u4e2d\uff0c\u5e76\u7f16\u7801\u538b\u7f29\u5f97\u5230$Z_x$\u7ef4\u5ea6\u4e3a$2^4\\times2^4$,\u89e3\u7801\u5668\u548c\u5224\u522b\u5668\u7684\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5747\u53ef\u6839\u636e\u8f93\u5165\u6570\u636e\u7ef4\u5ea6\u5bf9\u91cf\u5b50\u7f16\u7801\u5668\uff0c\u91cf\u5b50\u89e3\u7801\u5668\u3001\u91cf\u5b50\u5224\u522b\u5668\u7684\u7ebf\u8def\u6570\u8fdb\u884c\u5b9a\u4e49\u3002\r\n```python\r\nY=torch.rand(64,64) #\u968f\u673a\u751f\u6210\u4e00\u4e2a\u6807\u7b7e\u6570\u636e\r\nY=encoding(Y)     #\u5c06\u7ecf\u5178\u6570\u636e\u7f16\u7801\u6210\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\r\nQD=Q_Decoder(10)   #\u5b9e\u4f8b\u5316\u4e00\u4e2a10\u6bd4\u7279\u7684\u91cf\u5b50\u89e3\u7801\u5668\r\nRx=QD(Zx,Y,6)     #\u5c06\u7f16\u7801\u5f97\u5230\u7684Zx\u548cY\u8f93\u5165\uff0c\u89e3\u7801\u91cd\u5efa\u5f97\u52302^6*2^6\u7684Rx\r\nQDis=Q_Discriminator(4) #\u6839\u636eZx\u5b9a\u4e49\u91cf\u5b50\u5224\u522b\u5668\r\nQDisS=QDis(Zx)  #\u91cf\u5b50\u5224\u522b\u5668\u793a\u4f8b\u8f93\u5165\r\n```\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import Gram\r\n\r\nclass My_QuSAAE(nn.Module):\r\n    def __init__(self,n_qubits, n_retain, ):\r\n        super(My_QuSAAE, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.n_retain = n_retain\r\n        self.linearE = nn.Linear(250, 2**self.n_qubits)\r\n        self.QuEncoder = Qnn.Q_Encoder(self.n_qubits)\r\n        self.linearD = nn.Linear(33,2**self.n_qubits)\r\n        self.QuDecoder = Qnn.Q_Decoder(self.n_qubits+self.n_retain)\r\n        self.QuDiscriminator = Qnn.Q_Discriminator(self.n_retain)\r\n        \r\n    def forward(self, x, y):\r\n        x = self.linearE(x)\r\n        x = Gram(x)\r\n        x = self.QuEncoder(x, self.n_retain)\r\n        y = self.linearD(y)\r\n        y = Gram(y)\r\n        rx = self.QuDecoder(x,y,self.n_qubits)\r\n        out = self.QuDiscriminator(x)\r\n        return rx,out\r\n    \r\nmodule = My_QuSAAE(6,4)\r\nx = torch.rand(1,250)\r\ny = torch.rand(1,33)\r\nRx,result = module(x, y)\r\nprint('\u91cd\u5efa\u6570\u636e',Rx)\r\nprint('\u91cf\u5b50\u5224\u522b\u5668\u7ed3\u679c\uff1a',result)\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u91cd\u5efa\u6570\u636e tensor([[ 0.0089+3.8299e-09j,  0.0014+4.3687e-03j,  0.0005+4.3297e-03j,\r\n          ..., -0.0031+1.5534e-03j, -0.0011-1.4202e-03j,\r\n         -0.0010-5.6579e-04j],\r\n        [ 0.0014-4.3687e-03j,  0.0109+5.4006e-09j,  0.0031+5.9140e-04j,\r\n          ...,  0.0014+8.9393e-03j,  0.0006-7.0626e-04j,\r\n         -0.0008-2.0498e-03j],\r\n        [ 0.0005-4.3297e-03j,  0.0031-5.9140e-04j,  0.0076-8.1491e-10j,\r\n          ...,  0.0007+1.7250e-03j,  0.0006+4.0059e-03j,\r\n          0.0010+1.1066e-03j],\r\n        ...,\r\n        [-0.0031-1.5534e-03j,  0.0014-8.9393e-03j,  0.0007-1.7250e-03j,\r\n          ...,  0.0160-2.7931e-09j,  0.0009-1.2880e-03j,\r\n         -0.0046-1.0336e-03j],\r\n        [-0.0011+1.4202e-03j,  0.0006+7.0627e-04j,  0.0006-4.0059e-03j,\r\n          ...,  0.0009+1.2880e-03j,  0.0156+7.2760e-12j,\r\n          0.0029-4.8818e-03j],\r\n        [-0.0010+5.6579e-04j, -0.0008+2.0498e-03j,  0.0010-1.1066e-03j,\r\n          ..., -0.0046+1.0336e-03j,  0.0029+4.8818e-03j,\r\n          0.0188-1.9008e-10j]], grad_fn=<AddBackward0>)\r\n\u91cf\u5b50\u5224\u522b\u5668\u7ed3\u679c\uff1a tensor([[0.6479],\r\n        [0.3726],\r\n        [0.4541],\r\n        [0.4984]])\r\n```\r\n\u6ce8\u610f\u8fd9\u91cc\u4e2d\u95f4\u5f15\u5165\u7684\u6570\u636eY\u7528\u6237\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u81ea\u884c\u4fee\u6539\r\n\r\n<span id=\"3.9\"></span>\r\n### QuML(Mutual Learning)\r\n\u4e3b\u8981\u601d\u60f3\u662f\u4e2d\u95f4\u4f7f\u7528\u4e00\u4e2a\u91cf\u5b50\u4e92\u4fe1\u606f\u7684\u8fc7\u7a0b\uff0c\u4ea4\u4e92\u540e\u7684\u4fe1\u606f\u5404\u81ea\u90fd\u5305\u542b\u7740\u81ea\u5df1\u548c\u5bf9\u65b9\u7684\u7279\u5f81\uff0c\u518d\u5206\u522b\u5c06\u5404\u81ea\u91cf\u5b50\u4e92\u4fe1\u606f\u540e\u7684\u4fe1\u606f\u4e0e\u7ecf\u5178\u5377\u79ef\u5f97\u5230\u7684\u4fe1\u606f\u62fc\u63a5\uff0c\u518d\u8fdb\u884c\u540e\u9762\u7684\u5377\u79ef\u53ca\u5168\u8fde\u63a5\u8fc7\u7a0b\uff0c\u6700\u540e\u5f97\u5230\u5305\u542b\u53cc\u65b9\u4fe1\u606f\u7684\u7ed3\u6784\u3002\r\n\r\n\r\n#### QuML\u7ed3\u6784\u56fe\r\n<img src=\"./deepquantum/pictures/QuML.png\" style=\"zoom:70%\">\r\n\r\n#### QuML\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* Qu_conv_mutual\uff1a\u5148\u5b9e\u4f8b\u5316\u6a21\u578b\uff0c\u7136\u540e\u5c06\u9700\u8981\u5f97\u5230\u4e92\u4fe1\u606f\u7684\u4e24\u4e2a\u8f93\u5165\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u5373\u53ef\u5f97\u5230\u4e24\u8005\u95f4\u7684\u7279\u5f81\u7ed3\u679c\r\n\r\n#### QuML\u4f7f\u7528\u65b9\u6cd5\r\n\u8c03\u7528DeepQuantum 0.0.2\u7248\u672c\u4e2d\u7684Qu_conv_mutual\u6a21\u578b\r\n```python\r\nQuCM=Qu_conv_mutual(64,25)    #\u5b9e\u4f8b\u5316\u4e92\u4fe1\u606f\u6a21\u578b\r\n```\r\n\u5b9e\u4f8b\u5316\u540e\u5c06\u9700\u8981\u8fdb\u884c\u4e92\u5b66\u4e60\u7684\u6570\u636e\u8f93\u5165\u5230\u6a21\u578b\u4e2d\uff0c\u6ce8\u610f\u8fd9\u91cc\u53ef\u76f4\u63a5\u8f93\u5165\u539f\u59cb\u6570\u636e\u4e0d\u9700\u8981\u7f16\u7801\u4e3a\u91cf\u5b50\u6001\u6570\u636e\r\n```python\r\nX=torch.linspace(1,10,steps=150,dtype=int)  #\u5c061~10\u6570\u636e\u5e73\u5747\u5206\u6210150\u4e2a\u6570\u636e\uff0c\u7ec4\u62101*150\u7684\u4e00\u7ef4\u5411\u91cf\r\nY=torch.linspace(1,10,steps=1000,dtype=int)  #\u5c061~10\u6570\u636e\u5e73\u5747\u5206\u62101000\u4e2a\u6570\u636e\uff0c\u7ec4\u62101*1000\u7684\u4e00\u7ef4\u5411\u91cf\r\n```\r\n\u5c06\u6570\u636eX\u548cY\u8f93\u5165\u5230QuCM\u4e2d\u5373\u53ef\u5f97\u5230\u4e92\u5b66\u4e60\u540e\u7684\u7ed3\u679c\r\n```python\r\nout=QuCM(x,y)  #\u5c06\u9700\u8981\u4e92\u5b66\u4e60\u7684\u7ed3\u679c\u8f93\u5165\u5230\u6a21\u578b\u4e2d\r\nprint('\u7ed3\u679c\uff1a',out)  #\u6253\u5370\u7ed3\u679c\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u7ed3\u679c\uff1a tensor([-298.0587], grad_fn=<ViewBackward0>)\r\n```\r\n\u7528\u6237\u53ef\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u5b9a\u4e49\u8f93\u5165\u6570\u636e\u5e76\u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\n\r\nclass My_QuML(nn.Module):\r\n    def __init__(self,embedding_num_x, embedding_num_y):\r\n        super(My_QuML, self).__init__()\r\n        self.embedx = embedding_num_x\r\n        self.embedy = embedding_num_y\r\n        self.QuML = Qnn.Qu_conv_mutual(self.embedx,self.embedy)\r\n        self.linearx = nn.Linear(250, 150)\r\n        self.lineary = nn.Linear(33,1000)\r\n        \r\n    def forward(self, x, y):\r\n        x = self.linearx(x).int()\r\n        x = abs(x)\r\n        y = self.lineary(y).int()\r\n        y = abs(y)\r\n        out = self.QuML(x,y)\r\n        return out\r\n    \r\nmodule = My_QuML(64,25)\r\nx = torch.linspace(1,10,steps=250)\r\ny = torch.linspace(1,10,steps=33)\r\nresult = module(x, y)\r\nprint('\u7ed3\u679c\uff1a',result)\r\n\r\n#\u8f93\u51fa\u7ed3\u679c\r\n\u7ed3\u679c\uff1a tensor([-653.8476], grad_fn=<ViewBackward0>)\r\n```\r\n\u6ce8\u610f\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u7684\u6570\u636e\u96c6\u9700\u8981\u4e3a\u6b63\u6574\u6570\u7ec4\u6210\u7684\u5411\u91cf\r\n\r\n<span id=\"3.10\"></span>\r\n### QuAttention\r\n\u91cf\u5b50\u6ce8\u610f\u529b\u673a\u5236\u662f\u7ecf\u5178\u6ce8\u610f\u529b\u673a\u5236\u7684\u91cf\u5b50\u7248\u672c\uff0c\u7528\u91cf\u5b50\u6bd4\u7279\u7684\u65b9\u5f0f\u8fdb\u884c\u7f16\u7801\u548c\u4fe1\u606f\u5904\u7406\u3002\u91cf\u5b50\u7ebf\u8def\u7684\u662f\u5bf9\u91cf\u5b50\u4fe1\u606f\u7684\u64cd\u4f5c\u65b9\u6cd5\uff0c\u901a\u8fc7\u91cf\u5b50\u7ebf\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u542b\u6709\u91cf\u5b50\u4fe1\u606f\u7684\u91cf\u5b50\u6bd4\u7279\u8fdb\u884c\u65cb\u8f6c\uff0c\u6f14\u5316\u7b49\u64cd\u4f5c\u3002\r\n\r\n#### QuAttention\u63d0\u4f9b\u7684\u63a5\u53e3\r\n* QuAttention\uff1a\u5148\u521d\u59cb\u5316\u91cf\u5b50\u6ce8\u610f\u529b\u673a\u5236\u6bd4\u7279\u6570n\uff0c\u7136\u540e\u5c06\u8f93\u5165\u6570\u636e\u6309\u5b9a\u4e49\u7684\u6bd4\u7279\u6570\u5206\u5272\u6210\u6570\u4efd,\u6bcf\u4efd\u7684\u7ef4\u5ea6\u4e3a$1\\times2^n$\uff0c\u5c06\u5176\u7f16\u7801\u4e3a\u91cf\u5b50\u6001\u5bc6\u5ea6\u77e9\u9635\u5e76\u6dfb\u52a0\u5230\u540c\u4e00\u5217\u8868\u4e2d\uff0c\u6700\u540e\u5c06\u6574\u4e2a\u5217\u8868\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u5f97\u5230\u7ed3\u679c\r\n\r\n#### QuAtttention\u4f7f\u7528\u65b9\u6cd5\r\n\u9996\u5148\u5b9e\u4f8b\u5316\u6a21\u578b\r\n```python\r\nqubits = 2 # \u8bbe\u5b9a\u6bd4\u7279\u6570\r\nquattention = QuAttention(qubits)\r\n```\r\n\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u7684\u662f2\u6bd4\u7279\u7ebf\u8def\u7684\u6ce8\u610f\u529b\u673a\u5236\u6a21\u578b\uff0c\u8fd9\u91cc\u7684\u8f93\u5165\u6570\u636e\u9700\u8981\u4e3a$2^2$\u7684\u6574\u6570\u500d\uff0c\u5e76\u5c06\u6570\u636e\u5207\u6210\u6570\u4efd\u957f\u5ea6\u4e3a$2^2$\u7684\u5411\u91cf\u653e\u5165\u5217\u8868\u4e2d\r\n```python\r\ntemp = torch.rand(200)\r\ndata = temp.reshape(1,-1) # \u8f93\u5165\u6570\u636e\u62c9\u957f\u4e3a\u4e00\u7ef4\u5411\u91cf\r\nk = int(2**qubits) # \u8bbe\u5b9a\u5207\u7247\u7ef4\u5ea6\r\nstate_list = []\r\nfor i in range(0,data.shape[1],k):\r\n    state = data[0,i:i+k].reshape(1,-1)\r\n    x = Gram(state)\r\n    state_list.append(x)\r\n```\r\n\u6700\u540e\u5c06\u5f97\u5230\u7684\u5217\u8868\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c\r\n```python\r\noutput = quattention(state_list)\r\n```\r\n\r\n#### \u793a\u4f8b\r\n```python\r\nimport torch\r\nimport torch.nn as nn\r\nimport deepquantum.nn as Qnn\r\nfrom deepquantum.utils import Gram\r\n\r\nclass My_QuAttention(nn.Module):\r\n    def __init__(self, n_qubits, slice_n):\r\n        super(My_QuAttention, self).__init__()\r\n        self.n_qubits = n_qubits\r\n        self.slice_n = slice_n\r\n        self.linear = nn.Linear(100,2**self.n_qubits*self.slice_n )\r\n        self.QuAttn = Qnn.QuAttention(self.n_qubits)\r\n        \r\n        \r\n    def forward(self,x):\r\n        x = self.linear(x)\r\n        state_list = []\r\n        k = 2**self.n_qubits\r\n        for i in range(0,k*self.slice_n, k):\r\n            state = x[0, i:i+k].reshape(1,-1)\r\n            data = Gram(state)\r\n            state_list.append(data)\r\n        out = self.QuAttn(state_list)\r\n        return out\r\n    \r\nmodule = My_QuAttention(2,10)\r\nx = torch.rand(1,100)\r\nresult = module(x)\r\n```\r\n\r\n\r\n<span id=\"4\"></span>\r\n***\r\n## TorchScript IR\r\n### TorchScript\u7b80\u4ecb\r\n<p>  PyTorch\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u79cd\u5373\u65f6\uff08just-in-time, JIT\uff09\u7f16\u8bd1\u5185\u8054\u52a0\u8f7d\u65b9\u5f0f\uff0c\u5373\u5728\u4e00\u4e2aPython\u6587\u4ef6\u4e2d\uff0c\u5c06C++\u4ee3\u7801\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u9012\u7ed9PyTorch\u4e2d\u8d1f\u8d23\u5185\u8054\u7f16\u8bd1\u7684\u51fd\u6570\u3002\u5728\u8fd0\u884cPython\u6587\u4ef6\u65f6\uff0c\u5373\u65f6\u7f16\u8bd1\u51fa\u52a8\u6001\u94fe\u63a5\u6587\u4ef6\uff0c\u5e76\u5bfc\u5165\u51fd\u6570\u8fdb\u884c\u540e\u7eed\u8fd0\u7b97\u3002torch.jit.torchscript\u662fPyTorch\u63d0\u4f9b\u7684\u5373\u65f6\u7f16\u8bd1\u6a21\u5757\uff0c\u5b83\u662fPython\u8bed\u8a00\u7684\u4e00\u4e2a\u9759\u6001\u7c7b\u578b\u5b50\u96c6\uff0c\u5e76\u4e14\u652f\u6301Python\u8bed\u6cd5\u540c\u65f6\u4e5f\u4ecePython\u4e2d\u5206\u79bb\u51fa\u6765\uff0c\u53ea\u4e13\u6ce8\u4e8ePython\u4e2d\u7528\u4e8e\u5728Pytorch\u4e2d\u8868\u793a\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u6240\u9700\u7684\u7279\u6027\u3002</p>\r\n\r\n<span id=\"4.2\"></span>\r\n### DeepQuantum\r\nDeepQuantum\u662f\u57fa\u4e8ePyTorch\u6846\u67b6\u5f00\u53d1\u7684\uff0c\u91cf\u5b50\u7ecf\u5178\u6df7\u5408\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u548c\u90e8\u7f72\u662f\u57fa\u4e8e\u540c\u4e00\u6709\u5411\u65e0\u73af\u56fe(DAG)\u8fdb\u884c\u7684\uff0cDeepQuantum 0.0\u7248\u672c\u662f\u652f\u6301TorchScript\u8fdb\u884c\u8ddf\u8e2a\u548c\u7f16\u8bd1\u7684\uff0c\u53ef\u4f7f\u7528\u8be5\u7248\u672c\u7684\u5bf9\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\u5c42\u7b97\u5b50\u8fdb\u884c\u5b9a\u4e49\u548c\u68af\u5ea6\u8ba1\u7b97\uff0c\u5e76\u5bf9\u8ba1\u7b97\u8fc7\u7a0b\u91cd\u5199\u7f16\u8bd1\u5668\u505a\u5230\u5c06\u91cf\u5b50\u795e\u7ecf\u7f51\u7edc\u7684DAG\u7ed3\u6784\u50a8\u5b58\u5728CPU\u4e2d\uff0c\u800c\u63a8\u5bfc\u8fc7\u7a0b\u5728QPU\u6216\u6a21\u62dfQPU\u4e0a\u8fdb\u884c\u8ba1\u7b97\u63d0\u5347\u8fd0\u7b97\u6548\u7387\u3002\r\n\r\n<span id=\"5\"></span>\r\n***\r\n## \u7ec4\u7ec7\u4ea4\u6d41\u65b9\u5f0f\r\n<img src=\"./deepquantum/pictures/DeepQuantum\u4ea4\u6d41\u7fa4.png\" style=\"zoom:100%\">\r\n\r\n**QQ\u7fa4\uff1a727013373**\r\n\r\n**\u4ea4\u6d41\u90ae\u7bb1\uff1aAlgorithms-Applications@turingq.com**\r\n\r\n<span id=\"6\"></span>\r\n***\r\n ## \u8d21\u732e\u8005\r\n **\u56fe\u7075\u91cf\u5b50 \u7b97\u6cd5\u5e94\u7528\u90e8\u95e8**\r\n\r\n<span id=\"7\"></span>\r\n***\r\n## \u9e23\u8c22\r\n### \u53c2\u8003\u8d44\u6599\r\n[1] M. A. Nielsen and I. L. Chuang, Quantum Computation and Quantum Information: 10th Anniversary Edition, 10th ed. (Cambridge University Press, New York, NY, USA, 2011).</br>\r\n\r\n[2]Alireza Makhzani,Jonathon Shlens,Navdeep Jaitly,Ian J. Goodfellow. Adversarial Autoencoders.[J]. CoRR,2015,abs/1511.05644:\r\n\r\n[3]Shayakhmetov Rim,Kuznetsov Maksim,Zhebrak Alexander,Kadurin Artur,Nikolenko Sergey,Aliper Alexander,Polykovskiy Daniil. Erratum: Addendum: Molecular Generation for Desired Transcriptome Changes With Adversarial Autoencoders.[J]. Frontiers in pharmacology,2020,11:\r\n\r\n[4]Maxwell Henderson, Samriddhi Shakya, Shashindra Pradhan, Tristan Cook. \u201cQuanvolutional Neural Networks: Powering Image Recognition with Quantum Circuits.\u201darXiv:1904.04767, 2019.\r\n\r\n[5] PyTorch\u5b98\u65b9\u6587\u6863\uff1a[https://pytorch.org/docs/stable/index.html](https://pytorch.org/docs/stable/index.html)\r\n\r\n<span id=\"8\"></span>\r\n***\r\n## \u8bb8\u53ef\u8bc1\r\nCopyright 2021 TuringQ\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n<span id=\"9\"></span>\r\n***\r\n## To-do List\r\n\r\n- [x] QuConv\r\n- [x] DeQuConv\r\n- [x] QuPool\r\n- [x] DeQuPool\r\n- [x] QuLinear\r\n- [x] QuAE\r\n- [x] QuGRU\r\n- [x] QuSAAE\r\n- [x] QuQML\r\n- [x] QuAttention\r\n- [ ] GAT \r\n- [ ] QuBiAAE\r\n- [ ] QuReinforce\r\n- [ ] Qustyle-GAN\r\n\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "VisualQ",
            "package_url": "https://pypi.org/project/VisualQ/",
            "platform": "",
            "project_url": "https://pypi.org/project/VisualQ/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/VisualQ/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Simplified version deepquantum for visualization.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12482140,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "58c8280f745731725ae9cfd61268f086",
                    "sha256": "317a1bd5fe422e50f6f833c9473371e049ee885da52e5a095161eeb397557787"
                },
                "downloads": -1,
                "filename": "VisualQ-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "58c8280f745731725ae9cfd61268f086",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 54039,
                "upload_time": "2022-01-05T08:58:07",
                "upload_time_iso_8601": "2022-01-05T08:58:07.071357Z",
                "url": "https://files.pythonhosted.org/packages/18/43/bedc524398ddcf1ac61d099214029d6e3ceac61b7af4743145b2302e71d0/VisualQ-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}