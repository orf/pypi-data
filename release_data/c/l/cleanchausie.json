{
    "1.0.0": {
        "info": {
            "author": "Alec Rosenbaum",
            "author_email": "engineering@close.io",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/closeio/cleanchausie",
            "keywords": "",
            "license": "MIT",
            "maintainer": "Alec Rosenbaum",
            "maintainer_email": "engineering@close.io",
            "name": "cleanchausie",
            "package_url": "https://pypi.org/project/cleanchausie/",
            "platform": "any",
            "project_url": "https://pypi.org/project/cleanchausie/",
            "project_urls": {
                "Homepage": "http://github.com/closeio/cleanchausie"
            },
            "release_url": "https://pypi.org/project/cleanchausie/1.0.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data validation and transformation library for Python. Successor to CleanCat.",
            "version": "1.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15838218,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8fc52544c86d785c6960b7459b487b6a",
                    "sha256": "8dbf697170347f7db6019fbe4c9f2ee323d3070547ef0442cda7706c7fd9d1b5"
                },
                "downloads": -1,
                "filename": "cleanchausie-1.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8fc52544c86d785c6960b7459b487b6a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 20217,
                "upload_time": "2022-11-08T17:43:34",
                "upload_time_iso_8601": "2022-11-08T17:43:34.728512Z",
                "url": "https://files.pythonhosted.org/packages/51/b2/b2c4f170613b23d223805ef5a5cdeb377706191c5e357a7d82338c643be8/cleanchausie-1.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.0": {
        "info": {
            "author": "Alec Rosenbaum",
            "author_email": "engineering@close.io",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/closeio/cleanchausie",
            "keywords": "",
            "license": "MIT",
            "maintainer": "Alec Rosenbaum",
            "maintainer_email": "engineering@close.io",
            "name": "cleanchausie",
            "package_url": "https://pypi.org/project/cleanchausie/",
            "platform": "any",
            "project_url": "https://pypi.org/project/cleanchausie/",
            "project_urls": {
                "Homepage": "http://github.com/closeio/cleanchausie"
            },
            "release_url": "https://pypi.org/project/cleanchausie/1.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data validation and transformation library for Python. Successor to CleanCat.",
            "version": "1.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15838218,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "be8d94f2cef822f0d4aaa6988c75117d",
                    "sha256": "7daa6b677b81004db29025a7493cc921f6019e1b555112a686aa91342c3bd415"
                },
                "downloads": -1,
                "filename": "cleanchausie-1.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "be8d94f2cef822f0d4aaa6988c75117d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 21206,
                "upload_time": "2022-11-14T14:51:13",
                "upload_time_iso_8601": "2022-11-14T14:51:13.561440Z",
                "url": "https://files.pythonhosted.org/packages/47/b6/3909256bbdccd0b71d40be98e7dbab68a6576a9cefd108ae45f2f1558f26/cleanchausie-1.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.2.0": {
        "info": {
            "author": "Alec Rosenbaum",
            "author_email": "engineering@close.io",
            "bugtrack_url": null,
            "classifiers": [
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# CleanChausie\n\nCleanChausie is a data validation and transformation library for Python. It is a successor to CleanCat.\n\n*Interested in working on projects like this? [`Close`](https://close.com) is looking for [great engineers](https://jobs.close.com) to join our team.*\n\nKey features:\n\n- Operate on/with type-checked objects that have good IDE/autocomplete support\n- Annotation-based declarations for simple fields\n- Composable/reusable fields and field validation logic\n- Support (but not require) passing around a context (to avoid global state)\n  - Context pattern is compatible with explicit sqlalchemy-based session management. i.e. pass in a session when validating\n- Cleanly support intra-schema field dependencies (i.e. one field can depend on the validated value of another)\n- Explicit nullability/omission parameters\n- Errors returned for multiple fields at a time, with field attribution\n\n## Installation\n\nCleanChausie requires Python 3.8+.\nTo install, run `python3 -m pip install cleanchausie`.\n\n## CleanChausie by example\n\n### A basic example in Flask\n\nThis shows:\n\n- Annotation-based declarations for simple fields.\n- Type-checked objects (successful validation results in initialized instances of the schema)\n\n```python\nfrom typing import List\nfrom cleanchausie.fields import (\n  EmailField, ListField, URLField, ValidationError, field\n)\nfrom cleanchausie.schema import Schema\nfrom flask import app, request, jsonify\n\nclass JobApplication(Schema):\n  first_name: str\n  last_name: str\n  email: str = field(EmailField())\n  urls: List[str] = field(ListField(URLField(default_scheme='http://')))\n\n@app.route('/job_application', methods=['POST'])\ndef test_view():\n  result = JobApplication.clean(request.json)\n  if isinstance(result, ValidationError):\n    return jsonify({'errors': [{'msg': e.msg, 'field': e.field} for e in result.errors] }), 400\n\n  # Now \"result\" has the validated data, in the form of a `JobApplication` instance.\n  assert isinstance(result, JobApplication)\n  name = f'{result.first_name} {result.last_name}'\n```\n\n### Errors (per-field, and all at once)\n\n\"Expected\" errors (as a result of validation not passing) in CleanChausie\naren't handled with exceptions, they're _returned_. This gives us a few things:\n\n- We can easily detect when our _validation routine_ isn't working how it's\n  expected to (because exceptions are the result of _unexpected_ scenarios, and\n  _aren't_ used for control flow)\n- We can easily return structured information about these errors (like which\n  field they're for)\n- We can easily handle multiple errors in the same round trip, returned at the\n  same time.\n\nErrors are returned as a flat list, which simplifies handling _nested_ fields.\nEach `Error` has a `field` tuple, which allows individual errors to reference\nfields deeply nested inside of embedded objects or lists.\n\nLet's start with a simple example:\n\n```python\nfrom cleanchausie.fields import Error, ValidationError\nfrom cleanchausie.schema import Schema\n\nclass PerFieldErrorExampleSchema(Schema):\n  first_name: str\n  last_name: str\n\nresult = PerFieldErrorExampleSchema.clean({})\nassert isinstance(result, ValidationError)\nassert result.errors == [\n  Error(msg='This field is required.', field=('last_name',)),\n  Error(msg='This field is required.', field=('first_name',))\n]\n```\n\nNow let's add some nesting:\n\n```python\nfrom cleanchausie.fields import (\n  field, ListField, NestedField, ValidationError, Error\n)\nfrom cleanchausie.schema import Schema\n\nclass PhoneSchema(Schema):\n  country_code: str\n  number: str\n\nclass AddressSchema(Schema):\n  street_name: str\n  street_number: str\n  zip: str\n\nclass UserSchema(Schema):\n  email: str\n  phone = field(NestedField(PhoneSchema))\n  addresses = field(ListField(NestedField(AddressSchema)))\n\nresult = UserSchema.clean(\n  {\n    \"phone\": {\"number\": \"1234567890\"},\n    \"addresses\": [{\"street_name\": \"High St\", \"street_number\": \"1337\"}],\n  }\n)\nassert isinstance(result, ValidationError)\nassert sorted(result.errors, key=lambda e: e.field) == [\n  Error(msg=\"This field is required.\", field=(\"addresses\", 0, \"zip\")),\n  Error(msg=\"This field is required.\", field=(\"email\",)),\n  Error(msg=\"This field is required.\", field=(\"phone\", \"country_code\")),\n]\n```\n\n### Explicit nullability\n\nNullability is explicit, and CleanChausie differentiates between:\n\n- value is required and non-nullable\n- value is required and nullable (if `None` is explicitly passed)\n- omittable (expressed as an `omitted` constant)\n- omittable, defaulting to a specific value\n\nThese variants can either be expressed explicitly, or CleanChausie will\ndefine them automatically to match a Schema's type annotations.\n\n```python\nfrom typing import Optional, Union\nfrom cleanchausie.consts import OMITTED\nfrom cleanchausie.fields import field, StrField, Omittable, Required\nfrom cleanchausie.schema import Schema\n\n# auto define fields based on annotations\nclass NullabilityExample(Schema):\n  nonnull_required: str\n  nullable_required: Optional[str]\n  nonnull_omittable: Union[str, OMITTED]\n  nullable_omittable: Optional[Union[str, OMITTED]]\n\n# or define the same fields explicitly\nclass NullabilityExplicitExample(Schema):\n  nonnull_required = field(StrField())\n  nullable_required = field(StrField(), nullability=Required(allow_none=True))\n  nonnull_omittable = field(StrField(), nullability=Omittable(allow_none=False))\n  nullable_omittable = field(StrField(), nullability=Omittable())\n```\n\n### Composable/Reusable fields\n\n```python\nfrom cleanchausie.fields import field, StrField, IntField\nfrom cleanchausie.schema import Schema\n\n@field(parents=StrField())\ndef name_field(value: str) -> str:\n  return value.strip()\n\nage_field = IntField(min_value=0)\nscore_field = IntField(min_value=0, max_value=100)\n\nclass ReusableFieldsExampleSchema(Schema):\n  first_name = name_field\n  age = age_field\n  score = score_field\n```\n\n### Context support\n\nCleanChausie supports passing in a _context_ during validation. This is\ncommonly useful for validation-important information or implementation details\nthat aren't _really_ part of the validated data and shouldn't be serialized as\na field.\n\nFor example, a database `session` often has a short lifecycle and should\nbe discarded after it's been used. If this was passed in as a field, a\nreference would stick around on the validated schema. If we're just trying to\nbe explicit about session management, we should pass it in using a context\ninstead:\n\n```python\nimport attrs\nfrom cleanchausie.fields import field, StrField\nfrom cleanchausie.schema import Schema\n\nclass MyModel:  # some ORM model\n  id: str\n  created_by_id: str  # User id\n\n@attrs.frozen\nclass Context:\n  authenticated_user: 'User'  # the User making a request\n  session: 'Session'  # active ORM Session\n\nclass ContextExampleSchema(Schema):\n  @field(parents=StrField(), accepts=(\"id\",))\n  def obj(self, value: str, context: Context) -> MyModel:\n    # in real usage this might look more like:\n    #   context.session\n    #     .query(MyModel)\n    #     .filter(MyModel.created_by_id == authenticated_user.id)\n    #     .filter(MyModel.id == value)\n    return context.session.find_by_user_and_id(\n      value, context.authenticated_user.id\n    )\n\nwith atomic() as session:\n  result = ContextExampleSchema.clean(\n    data={'id': 'mymodel_primarykey'},\n    context=Context(authenticated_user=EXAMPLE_USER, session=session)\n  )\nassert isinstance(result, ContextExampleSchema)\nassert isinstance(result.obj, MyModel)\n```\n\n### Intra-schema field dependencies\n\nFields can depend on each other! This is common in a few real-life use cases:\n\n- An object can have an owning user/organization, which we might want to fetch\n  first and reference while validating other fields\n- We might want to automatically _derive_ a field's value based on other\n  required values\n- We might want to force field evaluation order to put the most expensive\n  checks last\n\nThe semantics here is actually pretty straightforward! All you have to do when\ndefining a field is add an argument with a name matching another field. When\nvalidating, CleanChausie will first validate the other field, then pass the\nresulting value into subsequent fields that depend on them. For example:\n\n```python\nfrom cleanchausie.fields import field\nfrom cleanchausie.schema import Schema\n\nclass DependencyExampleSchema(Schema):\n  a: str\n  b: str\n  \n  @field()\n  def a_and_b(self, a: str, b: str) -> str:\n    return f'{a}::{b}'\n\n\nresult = DependencyExampleSchema.clean(\n  data={'a': 'foo', 'b': 'bar'},\n)\nassert isinstance(result, DependencyExampleSchema)\nassert result.a_and_b == 'foo::bar'\n```\n\nOr we can write fields that both accept a value, and depend on the\nalready-valid values from other fields:\n\n```python\nimport attr\nfrom cleanchausie.fields import field, StrField\nfrom cleanchausie.schema import Schema\n\n@attr.frozen\nclass B:\n  val: str\n\nclass DependencyExample2Schema(Schema):\n  a: str\n\n  @field(parents=StrField())\n  def b(self, value: str) -> B:\n    return B(val=value)\n\n  @field()\n  def a_and_b(self, a: str, b: B) -> str:\n    return f\"{a}::{b.val}\"\n```\n\n## Release process\n\n- Make sure to thoroughly review and test the code changes.\n- Make sure you have [`releaserabbit`](https://github.com/closeio/releaserabbit) installed.\n- From the project's root run `releaserabbit` with the desired version increment - `major`, `minor` or `patch`.\n- A version bump should happen automatically, and the new version should be uploaded to PyPI.\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "http://github.com/closeio/cleanchausie",
            "keywords": "",
            "license": "MIT",
            "maintainer": "Alec Rosenbaum",
            "maintainer_email": "engineering@close.io",
            "name": "cleanchausie",
            "package_url": "https://pypi.org/project/cleanchausie/",
            "platform": "any",
            "project_url": "https://pypi.org/project/cleanchausie/",
            "project_urls": {
                "Homepage": "http://github.com/closeio/cleanchausie"
            },
            "release_url": "https://pypi.org/project/cleanchausie/1.2.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Data validation and transformation library for Python. Successor to CleanCat.",
            "version": "1.2.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15838218,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "86e69c631dcbec80de1bdb209f043b46",
                    "sha256": "d4ca930d671ca4db0ee929e95bfe76617e9905de3685c7fe5cc5aecd9b2bc557"
                },
                "downloads": -1,
                "filename": "cleanchausie-1.2.0.tar.gz",
                "has_sig": false,
                "md5_digest": "86e69c631dcbec80de1bdb209f043b46",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 23909,
                "upload_time": "2022-11-21T09:51:51",
                "upload_time_iso_8601": "2022-11-21T09:51:51.555386Z",
                "url": "https://files.pythonhosted.org/packages/77/b6/15ed6570abdc891f975c693dc7b6cb746aa9f57a77909d16a25597b7f91c/cleanchausie-1.2.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}