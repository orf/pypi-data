{
    "0.0.0": {
        "info": {
            "author": "",
            "author_email": "f.lombardi@tudelft.nl",
            "bugtrack_url": null,
            "classifiers": [],
            "description": ".. image:: https://img.shields.io/gitter/room/RAMP-project/RAMP\n   :target: https://gitter.im/RAMP-project/community\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n|\n\n.. image:: https://github.com/RAMP-project/RAMP/blob/documentation/docs/source/_static/RAMP_logo_basic.png?raw=true\n   :width: 300\n\n\n*An open-source bottom-up stochastic model for generating multi-energy load profiles* (`RAMP Website <https://ramp-project.netlify.app/>`_)\n\n\nWhat is RAMP\n============\nRAMP is a bottom-up stochastic model for the generation\nof high-resolution multi-energy profiles, conceived for\napplication in contexts where only rough information about users'\nbehaviour are obtainable. Those may range from remote villages to whole countries. RAMP provides an easy and intuitve\nAPI for building up stochastic profiles.\n\n.. image:: https://github.com/RAMP-project/RAMP/blob/master/docs/figures/Example_output.jpg?raw=true\n   :width: 600\n\nRecommended installation method\n===============================\n\nThe easiest way to make RAMP software working is to use the free\nconda package manager which can install the current and future RAMP\ndepencies in an easy and user friendly way.\n\nTo get conda, `download and install \"Anaconda Distribution\" <https://www.anaconda.com/products/individual>`_, or `\"miniconda\" <https://docs.conda.io/en/latest/miniconda.html>`_ which is lighter.\nYou can install RAMP using pip, conda or from source code.\n\nInstalling through pip\n----------------------\n1. For installing RAMP software, it is suggested to create a new environment by running the following command in the anaconda prompt:\n\n.. code-block:: python\n\n   conda create -n ramp python=3.8\n\n2. If you create a new environment for ramp, to use it, you need to activate the ramp environment each time by writing\nthe following line in *Anaconda Prompt*\n\n.. code-block:: python\n\n   conda activate ramp\n\n3. Now you can use pip to install ramp on your environment as follow:\n\n.. code-block:: python\n\n  pip install ramp\n\n.. Installing through conda\n.. ==========================\n\n\nInstalling throguh source code\n------------------------------\nYou can also install RAMP from the source code! To do so, you first need to download the source code first:\n\n1. you can use git to clone the repository using:\n\n.. code-block:: bash\n\n   git clone https://github.com/RAMP-project/RAMP.git\n\n2. you may download the source code directly from:\n\n`\"RAMP GitHub Repository\" <https://github.com/RAMP-project/RAMP/tree/development>`_.\n\nIn this case, the source code will be downloaded as a zip file, so you need the extract the files.\n\nAfter downloading the source code using any of abovementioned ways, you need to use your **anaconda prompt** to install the code.\nYou can follow the first two steps mentioned in **Installing throguh pip**. Then you need to change the directory of the promt to the folder that source code is saved (where you can find the *setup.py* file). To install the RAMP software use:\n\n.. code-block:: bash\n\n   python setup.py\n\n.. .. code-block:: bash\n\n..    pip install -e.\n\n\n\nRequirements\n============\nRAMP has been tested on macOS, Windows and Linux.\n\nFor running RAMP, a couple of things are needed:\n\n#. The Python programming language, version 3.6 or higher\n#. A number of Python adds-on packages:\n\n   * `Pandas  <https://pandas.pydata.org/>`_\n   * `Numpy  <https://numpy.org/>`_\n   * `Matplotlib  <https://matplotlib.org/>`_\n   * `Openpyxl  <https://openpyxl.readthedocs.io/en/stable/>`_\n\n\nQuick start\n===========\nThere are different ways to build a model using RAMP!\n\nExample python input files\n--------------------------\nThree different input files are provided as example representing three different categories of appliancces that can be modelled with RAMP.\nTo have a look to the python files, you can download them using the \"download_example\" function:\n\n.. code-block:: python\n\n   from ramp import download_example\n\n   download_example(\"the specfic folder directory to save the files\")\n\n-  ``input_file_1.py``: represents the most basic electric appliances,\n   is an example of how to model lightbulbs, radios, TVs, fridges, and\n   other electric appliances. This input file is based on the ones used\n   for `this\n   publication <https://doi.org/10.1016/j.energy.2019.04.097>`__.\n\n-  ``input_file_2.py``: shows how to model thermal loads, with the\n   example of a \u201cshower\u201d appliance. The peculiarity of thermal appiances\n   is that the nominal power can be provided as external input as a\n   \u201ccsv\u201d file (in this case, ``shower_P.csv``). For the example \u201cshower\u201d\n   appliance, the varying nominal power accounts for the effect of\n   groundwater temperature variation throughout the year. This input\n   file is based on that used for `this\n   publication <https://doi.org/10.3390/app10217445>`__.\n\n-  ``input_file_3.py``: represents an example of how to model electric\n   cooking appliances. In this input file two different kind of meals\n   are modelled: 1) short and repetitive meals (e.g.\u00a0breakfast); and 2)\n   main meals (e.g.\u00a0lunch, dinner). Repetitive meals do not vary across\n   days, whilst main meals do so. In particular, every household can\n   randomly choose between 3 different types of main meal every day.\n   Such variability in meal preferences is modelled by means of two\n   parameters: the ``user preference`` and the ``preference index``. The\n   ``user preference`` defines how many types of meal are available for\n   each user to choose every day (e.g.\u00a03). Then, each of the available\n   meal options is modelled separately, with a different\n   ``preference index`` attached. The stochastic process randomly varies\n   the meal preference of each user every day, deciding whether they\n   want a \u201ctype 1\u201d meal, or a \u201ctype 2\u201d, etc. on a given day. This input\n   file is used in `this\n   publication <https://doi.org/10.1109/PTC.2019.8810571>`__\n\nSpreadsheet input files\n-----------------------\n\nIt is also possible to use spreadsheets as input files. To do so you\nneed to run the ``ramp`` command with the option ``-i``:\n\n.. code-block:: bash\n\n   ramp -i <path to .xlsx input file>\n\nIf you already know\nhow many profile you want to simulate you can indicate it with the\n``-n`` option:\n\n.. code-block:: bash\n\n   ramp -i <path to .xlsx input file> -n 10\n\nwill simulate 10 profiles. Note that you can use this option without\nproviding a ``.xlsx`` input file with the ``-i`` option, this will then\nbe equivalent to running ``python ramp_run.py`` from the ``ramp`` folder\nwithout being prompted for the number of profile within the console.\n\nIf you have existing python input files, you can convert them to\nspreadsheet. To do so, go to ``ramp`` folder and run\n\n.. code-block:: bash\n\n   python ramp_convert_old_input_files.py -i <path to the input file you wish to convert>\n\nBuilding a model with a python script\n-------------------------------------\n\n.. code-block:: python\n\n   # importing functions\n   from ramp import User,calc_peak_time_range,yearly_pattern\n\n   # Create a user category\n   low_income_households = User(\n    user_name = \"low_income_household\", # an optional feature for the User class\n    num_users = 10, # Specifying the number of specific user category in the community\n   )\n\nYou can add appliances to a user category by:\n\n.. code-block:: python\n\n   # adding some appliances for the household\n   radio = low_income_household.add_appliance(\n    name = \"Small Radio\", # optional feature for the appliance class\n    number = 1, # how many radio each low income household holds\n    power = 10, # RAMP does not take care of unit of measures , watt\n    func_time = 120, # Total functioning time of appliance in minutes\n    num_windows = 2, # in how many time-windows the appliance is used\n   )\n\nThe use time frames can be specified using the 'window' method for each appliance of the user category:\n\n.. code-block:: python\n\n   # Specifying the functioning windows\n   radio.windows(\n    window_1 = [480,540], # from 8 AM to 9 AM\n    window_2 = [1320,1380], # from 10 PM to 11 PM\n   )\n\nNow you can generate your **stochastic Profiles**:\n\n.. code-block:: python\n\n   # generating load_curves\n   load = low_income_household.generate_aggregated_load_profiles(\n      prof_i = 1, # the ith day profile\n      peak_time_range = calc_peak_time_range(), # the peak time range\n      Year_behaviour = yearly_pattern(), # defining the yearly pattern (like weekdays/weekends)\n   )\n\nContributing\n============\nThis project is open-source. Interested users are therefore invited to test, comment or contribute to the tool. Submitting issues is the best way to get in touch with the development team, which will address your comment, question, or development request in the best possible way. We are also looking for contributors to the main code, willing to contibute to its capabilities, computational-efficiency, formulation, etc.\n\nTo contribute changes:\n\n#. Fork the project on GitHub\n#. Create a feature branch (e.g. named \"add-this-new-feature\") to work on in your fork\n#. Add your name to the `AUTHORS <https://github.com/RAMP-project/RAMP/blob/development/AUTHORS>`_ file\n#. Commit your changes to the feature branch\n#. Push the branch to GitHub\n#. On GitHub, create a new pull request from the feature branch\n\nWhen committing new changes, please also take care of checking code stability by means of the `qualitativte testing <https://github.com/RAMP-project/RAMP/blob/development/CONTRIBUTING.md>`_ functionality.\n\n\nHow to cite\n===========\nPlease cite the original Journal publication if you use RAMP in your research:\n\n*F. Lombardi, S. Balderrama, S. Quoilin, E. Colombo, Generating high-resolution multi-energy load profiles for remote areas with an open-source stochastic model, Energy, 2019,*\n`https://doi.org/10.1016/j.energy.2019.04.097 <https://doi.org/10.1016/j.energy.2019.04.097>`_\n\nList of publications\n====================\nThis is an up-to-date list of publications featuring RAMP:\n\n`[1] <https://doi.org/10.3390/en14144232>`_ *William Clements, Surendra Pandit, Prashanna Bajracharya, Joe Butchers, Sam Williamson, Biraj Gautam, and Paul Harper. Techno-Economic Modelling of Micro-Hydropower Mini-Grids in Nepal to Improve Financial Sustainability and Enable Electric Cooking, Energies (2020), 14, no. 14: 4232.*\n\n`[2] <https://doi.org/10.1088/1748-9326/ac0cab>`_ *Giacomo Falchetta, Nicol\u00f2 Stevanato, Magda Moner-Girona, Davide Mazzoni, Emanuela Colombo, Manfred Hafner, The M-LED platform: advancing electricity demand assessment for communities living in energy poverty, Environmental Reasearch Letters (2021)*\n\n`[3] <https://doi.org/10.3390/app10217445>`_ *Nicol\u00f2 Stevanato, Lorenzo Rinaldi, Stefano Pistolese, Sergio Balderrama, Sylvain Quoilin, Emanuela Colombo, Modeling of a Village-Scale Multi-Energy System for the Integrated Supply of Electric and Thermal Energy, Applied Sciences (2020)*\n\n`[4] <http://hdl.handle.net/11311/1143671>`_ *Francesco Lombardi, Sylvain Quoilin, Emanuela Colombo, Modelling distributed Power-to-Heat technologies as a flexibility option for smart heat-electricity integration, Proceedings of ECOS 2020, pp. 2369-2380*\n\n`[5] <http://hdl.handle.net/11311/1139750>`_ *Sergio Balderrama, Gabriela Pe\u00f1a Balderrama, Francesco Lombardi, Nicol\u00f2 Stevanato, Andreas Sahlberg, Mark Howells, Emanuela Colombo and Sylvain Quoilin, Model-Base cost evaluation of Microgrids systems for rural Electrification and energy planning purposes, Proceedings of ISES Solar World Congress 2019*\n\n`[6] <https://doi.org/10.1016/j.esd.2020.07.002>`_ *Nicol\u00f2 Stevanato, Francesco Lombardi, Giulia Guidicini, Lorenzo Rinaldi, Sergio Balderrama, Matija Pavi\u010devi\u0107, Sylvain Quoilin, Emanuela Colombo, Long-term sizing of rural microgrids: Accounting for load evolution through multi-step investment plan and stochastic optimization, Energy for Sustainable Development (2020), 58, pp. 16-29*\n\n`[7] <https://doi.org/10.1109/ICCEP.2019.8890129>`_ *Claudio Del Pero, Fabrizio Leonforte, Francesco Lombardi, Nicol\u00f2 Stevanato, Jacopo Barbieri, Nicol\u00f2 Aste, Harold Huerto, Emanuela Colombo,\nModelling of an integrated multi-energy system for a nearly Zero Energy Smart District,\nProceedings of ICCEP 2019*\n\n`[8] <http://hdl.handle.net/11311/1121368>`_ *Sergio Balderrama, Francesco Lombardi, Nicol\u00f2 Stevanato, Gabriela Pe\u00f1a, Emanuela Colombo, Sylvain Quoilin,\nAutomated evaluation of levelized cost of energy of isolated micro-grids for energy planning purposes in developing countries,\nProceedings of ECOS 2019*\n\n`[9] <https://doi.org/10.1109/PTC.2019.8810571>`_ *Nicol\u00f2 Stevanato, Francesco Lombardi, Emanuela Colombo, Sergio Balderrama, Sylvain Quoilin,\nTwo-Stage Stochastic Sizing of a Rural Micro-Grid Based on Stochastic Load Generation,\n2019 IEEE Milan PowerTech, Milan, Italy, 2019, pp. 1-6.*\n\n`[10] <https://doi.org/10.1016/j.energy.2019.01.004>`_ *Francesco Lombardi, Matteo Vincenzo Rocco, Emanuela Colombo,\nA multi-layer energy modelling methodology to assess the impact of heat-electricity integration strategies: the case of the residential cooking sector in Italy,\nEnergy (2019)*\n\n\nLicense\n=======\nCopyright 2019 RAMP, contributors listed in **Authors**\n\nLicensed under the European Union Public Licence (EUPL), Version 1.2-or-later; you may not use this file except in compliance with the License.\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an **\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND**, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n\n.. note::\n\n   This project is under active development!\n\n",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/RAMP-project/RAMP",
            "keywords": "",
            "license": "European Union Public License 1.2",
            "maintainer": "",
            "maintainer_email": "",
            "name": "rampdemand",
            "package_url": "https://pypi.org/project/rampdemand/",
            "platform": null,
            "project_url": "https://pypi.org/project/rampdemand/",
            "project_urls": {
                "Homepage": "https://github.com/RAMP-project/RAMP"
            },
            "release_url": "https://pypi.org/project/rampdemand/0.0.0/",
            "requires_dist": null,
            "requires_python": ">.3.6.0",
            "summary": "An open-source python package for building bottom-up stochastic model for generating multi-energy load profiles",
            "version": "0.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15889560,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "817602135da195f87691c3f8524e0ace",
                    "sha256": "4abc1650028cce44d18066dbc1802709f045116929b2cae27846367f06a3511b"
                },
                "downloads": -1,
                "filename": "rampdemand-0.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "817602135da195f87691c3f8524e0ace",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">.3.6.0",
                "size": 2627189,
                "upload_time": "2022-11-25T11:45:37",
                "upload_time_iso_8601": "2022-11-25T11:45:37.058274Z",
                "url": "https://files.pythonhosted.org/packages/d9/54/7cb819f124ca1116890bb006a7ed82c9ce347ba045ff7b14c3186fa028a2/rampdemand-0.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}