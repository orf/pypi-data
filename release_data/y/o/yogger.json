{
    "0.0.2": {
        "info": {
            "author": "yaphott",
            "author_email": "yaphott@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Software Development",
                "Topic :: Software Development :: Libraries",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: System :: Logging",
                "Topic :: Utilities"
            ],
            "description": "# Yogger\n\n[Yogger](https://github.com/yaphott/yogger) aims to provide an ideal logging setup with utilities to dump the stack and local variables.\n\n> Supports` requests.Request` and `requests.Response` objects if the **Requests** package is installed.\n\nExample of logger output:\n\n```text\n[ 2022-11-17 10:16:09.0918  INFO  my_package.base ]  Something we want to log.\n[ 2022-11-17 10:16:09.0918  DEBUG  my_package.base ]  Something we want to log.\n[ 2022-11-17 10:16:09.0918  WARNING  my_package.base ]  Something we want to log.\n[ 2022-11-17 10:16:09.0918  ERROR  my_package.base ]  Something we want to log.\n[ 2022-11-17 10:16:09.0918  CRITICAL  my_package.base ]  Something we want to log.\n```\n\nExample of object representation in dump:\n\n```python\nexample = {\n    \"id\": 123456790,\n    \"profile\": {\n        \"name\": \"John Doe\",\n        \"birthdate\": datetime.date(2000, 1, 1),\n        \"weight_kg\": 86.18,\n    },\n    \"video_ids\": [123, 456, 789],\n}\n```\n\n```text\nexample = <builtins.dict>\n  example['id'] = 123456790\n  example['profile'] = <builtins.dict>\n    example['profile']['name'] = 'John Doe'\n    example['profile']['birthdate'] = datetime.date(2000, 1, 1)\n    example['profile']['weight_kg'] = 86.18\n  example['video_ids'] = [123, 456, 789]\n```\n\n## Requirements:\n\n**Yogger** requires Python 3.9 or higher, is platform independent, and requires no outside dependencies.\n\n## Installing\n\nMost stable version from [**PyPi**](https://pypi.org/project/yogger/):\n\n```bash\npip install yogger\n```\n\nDevelopment version from [**GitHub**](https://github.com/yaphott/yogger):\n\n```bash\ngit clone git+https://github.com/yaphott/yogger.git\ncd yogger\npip install .\n```\n\n## Usage\n\nImport packages and instantiate a logger:\n\n```python\nimport logging\nimport yogger\n\nlogger = logging.getLogger(__name__)\n```\n\nInstall the logger class and configure with your package name:\n\n> Place at the start of the top-level function.\n\n```python\ndef _cli():\n    yogger.install()\n    yogger.configure(__name__)\n    # or\n    # yogger.configure(\"my_package\")\n```\n\n## Support for dumping stack and locals\n\nUse the `dump_on_exception` **context manager**:\n\n```python\nwith yogger.dump_on_exception():\n    raise SomeException\n```\n\nExample of output:\n\n```text\n[ 2022-11-17 10:16:09.0918  CRITICAL  yogger.base ]\nDumped stack and locals to '/tmp/my_package_stack_and_locals_hp0ngc90'\n\nCopy and paste the following to view:\n    cat '/tmp/my_package_stack_and_locals_hp0ngc90'\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nSomeException\n```\n\nTo quickly view the contents run the bash command from the dump message:\n\n> Example here is from the log message above:\n\n```Bash\ncat '/tmp/my_package_stack_and_locals_hp0ngc90'\n```\n\nTo handle without using the context manager, something like this would also suffice:\n\n```python\nimport inspect\n```\n\n```python\ntry:\n    ...\nexcept Exception as e:\n    trace = inspect.trace()\n    if len(trace) > 1:\n        logfile_path = yogger.dump_stack_and_locals(trace[1:], e=e)\n```\n\n## Library\n\n### yogger.install\n\nFunction to install the logger class and instantiate the global logger.\n\n| Function Signature |\n| :----------------- |\n| install()          |\n\n| Parameters |\n| :--------- |\n| Empty      |\n\n### yogger.configure\n\nFunction to prepare for logging.\n\n| Function Signature                                                             |\n| :----------------------------------------------------------------------------- |\n| configure(package_name, \\*, verbosity=0, dump_locals=False, persist_log=False) |\n\n| Parameters              |                                                                                    |\n| :---------------------- | :--------------------------------------------------------------------------------- |\n| **package_name**_(str)_ | Name of the package to dump from trace stack.                                      |\n| **verbosity**_(int)_    | Level of verbosity (0-2).                                                          |\n| **dump_locals**_(bool)_ | Dump locals to the logfile (in addition to stack) when log_level>=logging.WARNING. |\n| **persist_log**_(bool)_ | Create the logfile in the current working directory instead of \"/tmp\".             |\n\n### yogger.dump_on_exception\n\nContext manager that dumps the stack and locals to a file if an exception is raised.\n\n| Function Signature  |\n| :------------------ |\n| dump_on_exception() |\n\n| Parameters |\n| :--------- |\n| Empty      |\n\n### yogger.dump_stack_and_locals\n\nDump the stack and locals to a file.\n\n| Function Signature                                          |\n| :---------------------------------------------------------- |\n| dump_stack_and_locals(trace, \\*, e=None, logfile_path=None) |\n\n| Parameters                           |                                 |\n| :----------------------------------- | :------------------------------ |\n| **trace**_(list[inspect.FrameInfo])_ | Trace to dump                   |\n| **e**_(Exception)_                   | Exception that was raised.      |\n| **logfile_path**_(str)_              | Custom path to use for logfile. |\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/yaphott/yogger",
            "keywords": "yogger log logging dump stack trace locals",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "yogger",
            "package_url": "https://pypi.org/project/yogger/",
            "platform": null,
            "project_url": "https://pypi.org/project/yogger/",
            "project_urls": {
                "Homepage": "https://github.com/yaphott/yogger"
            },
            "release_url": "https://pypi.org/project/yogger/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.9, <4",
            "summary": "Ideal logging setup with utilities to dump the stack and local variables",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15858672,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8c43e33ae702bef4e302bd2dfecb38b8",
                    "sha256": "c4bfb359d7b73da09d1fa1ebbff5437d54dcd37b6fc7fd722959d744339db790"
                },
                "downloads": -1,
                "filename": "yogger-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8c43e33ae702bef4e302bd2dfecb38b8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.9, <4",
                "size": 11634,
                "upload_time": "2022-11-22T19:50:53",
                "upload_time_iso_8601": "2022-11-22T19:50:53.424879Z",
                "url": "https://files.pythonhosted.org/packages/c0/d8/029639495bbf05ff4878ed0288987cba1a5aacede323a4c2c7b98ece4d8a/yogger-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "fc58aa9878429438eee9aeed3324a89c",
                    "sha256": "66391c5b7704ab3080b81c49b8683416c289f3a64f79f83796e0813c19978cbb"
                },
                "downloads": -1,
                "filename": "yogger-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "fc58aa9878429438eee9aeed3324a89c",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.9, <4",
                "size": 12904,
                "upload_time": "2022-11-22T19:50:54",
                "upload_time_iso_8601": "2022-11-22T19:50:54.595332Z",
                "url": "https://files.pythonhosted.org/packages/20/b1/05955026a37b6ffa5be0aa9e024aea4c11ac2d8c96817d6d534f2c349704/yogger-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}