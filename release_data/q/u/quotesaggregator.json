{
    "0.1.0": {
        "info": {
            "author": "Lucas",
            "author_email": "lmr2199@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mrlucasrib/QuotesAggregator",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "quotesaggregator",
            "package_url": "https://pypi.org/project/quotesaggregator/",
            "platform": "",
            "project_url": "https://pypi.org/project/quotesaggregator/",
            "project_urls": {
                "Homepage": "https://github.com/mrlucasrib/QuotesAggregator",
                "Repository": "https://github.com/mrlucasrib/QuotesAggregator"
            },
            "release_url": "https://pypi.org/project/quotesaggregator/0.1.0/",
            "requires_dist": [
                "aiologger (>=0.6.1,<0.7.0)",
                "aiomysql (>=0.0.21,<0.0.22)",
                "pytz (>=2021.1,<2022.0)",
                "websockets (>=9.0.1,<10.0.0)",
                "asyncio (>=3.4.3,<4.0.0)",
                "prodict (>=0.8.16,<0.9.0)",
                "cryptography (>=3.4.7,<4.0.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "QuotesAggregator is a quote aggregator program that stores the instant values of various currencies to create and save 1, 5 and 10 minute candles in a database through the Poloniex API.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10291605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "fbcbf373a0d948d179b73b20ed16e3f9",
                    "sha256": "6c4d7a66fde8776e36d09b4858216e8951bb8c7221257feaf1117c10e2bef17e"
                },
                "downloads": -1,
                "filename": "quotesaggregator-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "fbcbf373a0d948d179b73b20ed16e3f9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 11115,
                "upload_time": "2021-05-07T22:51:49",
                "upload_time_iso_8601": "2021-05-07T22:51:49.284044Z",
                "url": "https://files.pythonhosted.org/packages/e5/e1/d6a66913e32e8692c78229d7d17d92380636d1019ef0988a6d83187f08f4/quotesaggregator-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "101fbb39f7f923e22ce25c0058516df4",
                    "sha256": "bc6436d07420c472b8a13561a9db4ca364b2145e05d9c7a3b14bd3d24f2e99fe"
                },
                "downloads": -1,
                "filename": "quotesaggregator-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "101fbb39f7f923e22ce25c0058516df4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 12419,
                "upload_time": "2021-05-07T22:51:50",
                "upload_time_iso_8601": "2021-05-07T22:51:50.960577Z",
                "url": "https://files.pythonhosted.org/packages/dc/40/34257cf6016fc6708c237a40b72fe9f35be35adcf56b1120e1cebfd0c99f/quotesaggregator-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Lucas",
            "author_email": "lmr2199@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# QuotesAggregator\n\nQuotesAggregator \u00e9 um programa agregador de cota\u00e7\u00f5es que armazena os valores instant\u00e2neos de v\u00e1rias moedas para criar e\nsalvar candles de 1, 5 e 10 minutos num banco de dados atrav\u00e9s da API da Poloniex.\n\n- Gr\u00e1ficos gerados a partir do banco de dados:\n\n![Gr\u00e1fico de 1 minuto](.github/chart1.png)\n![Gr\u00e1fico de 5 minutos](.github/chart5.png)\n![Gr\u00e1fico de 10 minutos](.github/chart10.png)\n\n## Como Utilizar\n\n### Pr\u00e9-requisitos\n\n- Docker\n\n### Utilizando\n\n```shell\ndocker-compose up\n```\n\n#### Executando testes unit\u00e1rios\n\n```shell\n# Na pasta raiz do projeto\n# Lembre-se de criar um virtual env\npip install --no-cache-dir -r requirements.txt\npytest\n```\n\n### Criando graficos\n\n[Clique aqui](createcharts/README.md)\n\n## Decis\u00f5es de arquitetura\n\n- Uso de websokets ao inv\u00e9s da HTTP API\n    - Para manter a consist\u00eancia dos dados seria necess\u00e1rio fazer varias requisi\u00e7\u00f5es a HTTP API e por conta disso,\n      poderia ser bloqueado ou ter requisi\u00e7\u00f5es recusadas, al\u00e9m de receber dados desnecess\u00e1rios. Por conta disso,\n      utilizei websockets API, dessa forma basta inscrever-se no canal para receber a atualiza\u00e7\u00e3o das moedas.\n- Uso de bibliotecas asyncio\n    - O programa demanda muito IO (receber os dados da API, salva-los), por isso, optei por utilizar bibliotecas\n      ass\u00edncronas para isso, dessa forma o programa n\u00e3o \u00e9 bloqueado enquanto a recebimento ou envio de dados.\n- Utiliza\u00e7\u00e3o do prodict\n    - Para facilitar a leitura do c\u00f3digo, utilizei uma classe que se comporta como um dicion\u00e1rio, por\u00e9m deixa os\n      atributos mais leg\u00edveis e funcionalidade de autocomplete.\n- Objeto candle n\u00e3o contem a currency_id\n    - Uma estrat\u00e9gia poss\u00edvel, seria utilizar outra chave do candle contendo o \u2018id\u2019 da moeda, por\u00e9m ao utiliza-lo seria\n      necess\u00e1rio iterar, no pior caso, sobre toda a lista, ou seja, O(n). Utilizando um dicion\u00e1rio que se comporta como\n      um HashMap a complexidade de tempo cai para [O(1) no caso m\u00e9dio](https://wiki.python.org/moin/TimeComplexity#dict)\n      , ou seja, a complexidade de tempo para encontrar os candles \u00e9 O(1).\n- N\u00e3o Utiliza\u00e7\u00e3o de ORM\n    - Tamb\u00e9m seria poss\u00edvel utilizar um ORM para facilitar a intera\u00e7\u00e3o com o banco de dados, por\u00e9m optei por utilizar\n      consultas SQL para demonstrar os meus conhecimentos em SQL (Mesmo que, nessa prova, apenas consultas simples s\u00e3o\n      necess\u00e1rias).\n\n### Funcionamento\n\nApos se inscrever no canal Ticker Data \u00e9 recebido a atualiza\u00e7\u00e3o do valor das moedas, este valor \u00e9 processado e a partir\ndele \u00e9 criado um objeto chave-valor que contem uma lista de 3 candles de 1 5, 10 minutos respetivamente, ent\u00e3o estes\ncandles recebem atualiza\u00e7\u00e3o constantemente, at\u00e9 que o per\u00edodo do candle se encerre e ele seja salvo e os seus atributos\nsobrescritos.\n\n### Resultados\n\nOs candles gerados podem ser encontrados atrav\u00e9s do banco de dados dispon\u00edvel na porta `34807` da sua maquina. Al\u00e9m\ndisso, o programa gera logs vis\u00edveis no stdout do docker.\n\n### Dificuldades (Resolvidas)\n\n- Como nunca havia testado m\u00e9todos ass\u00edncronos ainda, foi dif\u00edcil entender como faze-lo.\n- Ao criar a tabela, utilizei float para os campos, e n\u00e3o comportava o tamanho de alguns valores recebidos, mudei para\n  DECIMAL, que inclusive \u00e9 mais adequado para valores monet\u00e1rios por problemas de arredondamento em outros tipos de\n  dados.\n- Por desconhecer o modulo aiomysql, cometi o erro de n\u00e3o fazer o commit na transa\u00e7\u00e3o do banco de dados, e por isso, os\n  dados n\u00e3o eram salvos. Para corrigir habilitei o autocommit na chamada.\n- Tentei algumas abordagens para saber quando salvar o candle, uma delas deixava os valores de abertura-fechamento\n  errado, pois ele considerava o valor pertencente ao per\u00edodo como valor inicial, sendo que o valor do final de um deve\n  ser igual ao inicial do outro, al\u00e9m disso, o candle de 1 minuto estava sendo atualizado a cada 2 minutos, pois eu\n  utilizei o modulo de 2 ao inv\u00e9s do de 1, porque todo numero dividido por um tem resto 0, ent\u00e3o ele salvaria o candle\n  antes de o minuto ser finalizado. A solu\u00e7\u00e3o foi junto ao modulo, verificar se o tempo do candle atual era diferente do\n  novo valor recebido.\n\n# Observa\u00e7\u00e3o importante\n\nUm dos criterios da avalia\u00e7\u00e3o \u00e9 o formato de distribui\u00e7\u00e3o, e tendo em vista que o programa \u00e9 uma biblioteca que ao\nchamar \u00e9 sempre executada (N\u00e3o dando espa\u00e7o para que outro script consuma qualquer parte do mesmo), o programa \u00e9\ndistribuido atrav\u00e9s de um \"executavel\" hospedado no The Python Package Index (PyPi)\n. [Link aqui](https://pypi.org/project/quotesaggregator/)\n\nPara executa-lo fa\u00e7a (fora do projeto):\n\n```shell\npipenv install quotesaggregator\npipenv shell\nexport QUOTESAGGREGATOR_DB_HOST=localhost \nexport QUOTESAGGREGATOR_DB_PORT=3306 \nexport QUOTESAGGREGATOR_DB_USER=admin\nexport QUOTESAGGREGATOR_DB_PASSWORD=admin\nexport QUOTESAGGREGATOR_DB_NAME=quotes\n\nagregator-run\n```\n\nLembre-se que o container do MySQL deve estar rodando ou tamb\u00e9m \u00e9 poss\u00edvel usar outro banco MySQL desde que ele possua a\ntabela (comando de cria\u00e7\u00e3o em [db-init/init.sql](db-init/init.sql)).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mrlucasrib/QuotesAggregator",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "quotesaggregator",
            "package_url": "https://pypi.org/project/quotesaggregator/",
            "platform": "",
            "project_url": "https://pypi.org/project/quotesaggregator/",
            "project_urls": {
                "Homepage": "https://github.com/mrlucasrib/QuotesAggregator",
                "Repository": "https://github.com/mrlucasrib/QuotesAggregator"
            },
            "release_url": "https://pypi.org/project/quotesaggregator/0.1.1/",
            "requires_dist": [
                "aiologger (>=0.6.1,<0.7.0)",
                "aiomysql (>=0.0.21,<0.0.22)",
                "pytz (>=2021.1,<2022.0)",
                "websockets (>=9.0.1,<10.0.0)",
                "asyncio (>=3.4.3,<4.0.0)",
                "prodict (>=0.8.16,<0.9.0)",
                "cryptography (>=3.4.7,<4.0.0)"
            ],
            "requires_python": ">=3.8,<4.0",
            "summary": "QuotesAggregator is a quote aggregator program that stores the instant values of various currencies to create and save 1, 5 and 10 minute candles in a database through the Poloniex API.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10291605,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8f8e7274b858820f468fc99985346184",
                    "sha256": "5d8ab82b5a9485217f5ff217f1c5f8a380c7ffd3ef928ea331765a167efe8008"
                },
                "downloads": -1,
                "filename": "quotesaggregator-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8f8e7274b858820f468fc99985346184",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8,<4.0",
                "size": 117287,
                "upload_time": "2021-05-07T23:54:05",
                "upload_time_iso_8601": "2021-05-07T23:54:05.232601Z",
                "url": "https://files.pythonhosted.org/packages/8d/06/35ecc9b799ff64a36c8a2707ef8a035c594d9d612aab79b16365531a27cb/quotesaggregator-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "bc194cfa04afc81413b654a598fada18",
                    "sha256": "d2ecd5f0c360f16eb6470a7a97dc5c78d81bce40d285c1d1f4f012139781d7c6"
                },
                "downloads": -1,
                "filename": "quotesaggregator-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "bc194cfa04afc81413b654a598fada18",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8,<4.0",
                "size": 119131,
                "upload_time": "2021-05-07T23:54:07",
                "upload_time_iso_8601": "2021-05-07T23:54:07.501061Z",
                "url": "https://files.pythonhosted.org/packages/ae/d0/56ac914305659a3dc5d0965fe603dc19d1b18cd0fccd653d76130b9f205d/quotesaggregator-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}