{
    "0.4.1": {
        "info": {
            "author": null,
            "author_email": "Andrey Kolotev <kolotev@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
                "Operating System :: Unix",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Software Development :: Libraries :: Java Libraries",
                "Topic :: Software Development :: Libraries :: Python Modules",
                "Topic :: Text Processing :: Markup :: XML"
            ],
            "description": "JSaxonPy\n========\n\n[![PyPI](https://img.shields.io/pypi/v/jsaxonpy.svg)]()\n\njsaxonpy - the python package to be used for your Java Saxon XSLT\ntransformations in your python applications.\n\n\nInstallation\n------------\n\n```\npip install jsaxonpy\n```\n\nQuick overview\n--------------\n\n```python\n>>> from jsaxonpy import Xslt\n>>> t = Xslt()\n>>> xml = \"<root><child>text</child></root>\"\n>>> xsl = \"\"\"\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n  <xsl:template match=\"/\">\n    <xsl:copy-of select=\".\"/>\n  </xsl:template>\n</xsl:stylesheet>\n\"\"\"\n>>> t.transform(xml, xsl)\n'<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><child>text</child></root>'\n```\n\nYou can supply params if you needed as python dictioary with keys & values as strings (`str` type).\n```\n>>> params = {\"param1\": \"value1\", \"param2\": \"value2\"}\n>>> out = t.transform(xml, xsl, params)\n ```\n\n`xml` and `xsl` arguments could be either string documents (`str` type) or\nfiles names wrapped into pathlib.Path(...) class, before being passed.\n\nAlso you can run transformations using threads or multiple processes using\nconcurrent.futures or multiprocessing modules. The only known limitation is\nnot to run transformations (using `Xslt` class) using multi-processing in parent\nprocess, you can successfully run it in children. If you try to run in parent process and in children processes, then you application would hang. With threading instantiation of `Xslt` class works both in main thread and in children threads.\n\nExamples\n========\n\nThreads\n-------\n```\nfrom concurrent.futures\n\nxsl_file = '...'\nworker_args = []\n\nwith ThreadPoolExecutor(max_workers=3) as executor:\nfor xml_file in [\"file1.xml\", \"file2.xml\", ..., \"fileN.xml\"]:\n    worker_args.append((Path(xml_file), Path(xsl_file)))\n    for out in executor.map(func, worker_args):\n        assert out == xml\n```\n\nProcesses\n---------\n```\nfrom concurrent.futures import ProcessPoolExecutor\n\nxsl_file = '...'\nworker_args = []\n\nwith ProcessPoolExecutor(max_workers=3) as executor:\nfor xml_file in [\"file1.xml\", \"file2.xml\", ..., \"fileN.xml\"]:\n    worker_args.append((Path(xml_file), Path(xsl_file)))\n    for out in executor.map(func, worker_args):\n        assert out == xml\n```\n\nNotes\n=====\n\nSupported and tested versions of Saxon are 9, 10, 11.\n\nBefore executing you application it is expected you set your java related\nenvironment variables, including the `CLASSPATH` to point to your Java Saxon\ninstallation.\n\nYou can use `JVM_OPTIONS` environment variable to set java virtual environment,\nsee example below.\n\n```\nexport JVM_OPTIONS=\"-Xrs -Xmx3024m -XX:ActiveProcessorCount=24\";\nexport CLASSPATH=/usr/local/Saxon-J/saxon-he-11.4.jar;\nyour_python_app.py\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "jsaxonpy",
            "package_url": "https://pypi.org/project/jsaxonpy/",
            "platform": null,
            "project_url": "https://pypi.org/project/jsaxonpy/",
            "project_urls": {
                "Home": "https://github/kolotev/jsaxonpy",
                "Source": "https://github/kolotev/jsaxonpy"
            },
            "release_url": "https://pypi.org/project/jsaxonpy/0.4.1/",
            "requires_dist": [
                "pyjnius",
                "tox>=3.3.0 ; extra == \"dev\"",
                "bump2version ; extra == \"dev\"",
                "pytest >=7.2.0 ; extra == \"test\"",
                "pytest-xdist ; extra == \"test\"",
                "pytest-cov ; extra == \"test\"",
                "pytest-html ; extra == \"test\"",
                "hypothesis ; extra == \"test\"",
                "black ; extra == \"test\"",
                "isort ; extra == \"test\"",
                "flake8 ; extra == \"test\""
            ],
            "requires_python": ">=3.7",
            "summary": "jsaxonpy - the python package to be used for your Java Saxon XSLT",
            "version": "0.4.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15848527,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "addb9af608835b0374aab52b18f0518f",
                    "sha256": "49a769ca10c6b16e58e737f9ded6eb2fe113efcaa1847be432b3bfd82ead740e"
                },
                "downloads": -1,
                "filename": "jsaxonpy-0.4.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "addb9af608835b0374aab52b18f0518f",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 16698,
                "upload_time": "2022-11-22T02:05:34",
                "upload_time_iso_8601": "2022-11-22T02:05:34.178508Z",
                "url": "https://files.pythonhosted.org/packages/1e/11/9332aedadc9b8b2fd3ab94287cd743e793a1c32105ae35a785cb2f9deb73/jsaxonpy-0.4.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "2eb303c5603b92c615f32fd08768e1a6",
                    "sha256": "58ce09e8d103ab631073ba996e1c44c5eda90161c74eb4f648f64edd0bd15fa6"
                },
                "downloads": -1,
                "filename": "jsaxonpy-0.4.1.tar.gz",
                "has_sig": false,
                "md5_digest": "2eb303c5603b92c615f32fd08768e1a6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 16309,
                "upload_time": "2022-11-22T02:05:36",
                "upload_time_iso_8601": "2022-11-22T02:05:36.794228Z",
                "url": "https://files.pythonhosted.org/packages/55/0e/3b286ad1fcd9697f7e446c9c41b8f4606f4fe9cb63b9e4083d7c812eb79f/jsaxonpy-0.4.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}