{
    "0.0.1": {
        "info": {
            "author": "\u5927\u9093",
            "author_email": "thunderhit@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/thunderhit/tidytextpy",
            "keywords": "tidytext,text analysis,sentiment,sentiment analysis,natural language processing,R,python",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "tidytextpy",
            "package_url": "https://pypi.org/project/tidytextpy/",
            "platform": "",
            "project_url": "https://pypi.org/project/tidytextpy/",
            "project_urls": {
                "Homepage": "https://github.com/thunderhit/tidytextpy"
            },
            "release_url": "https://pypi.org/project/tidytextpy/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "\u5c06R\u8bed\u8a00tidytext\u5305\u79fb\u690d\u5230Python\uff0c\u53ef\u7b80\u5355\u8c03\u7528unnest_tokens\u3001get_sentiments\u3001get_stopwords\u3001bind_tf_idf\u7b49\u51fd\u6570\u3002",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10351292,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "012ca29c4635c55f41e9f6fe2bcfb8a4",
                    "sha256": "61b3e6a925b48a301d0eb2094b8b5b09390f13096bbeaa21e676e5bcbdadc0a5"
                },
                "downloads": -1,
                "filename": "tidytextpy-0.0.1.macosx-10.9-x86_64.tar.gz",
                "has_sig": false,
                "md5_digest": "012ca29c4635c55f41e9f6fe2bcfb8a4",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 398875,
                "upload_time": "2020-08-21T04:21:19",
                "upload_time_iso_8601": "2020-08-21T04:21:19.349505Z",
                "url": "https://files.pythonhosted.org/packages/ea/c8/9fc2ba4f89d5c076d0d38daaa6341038424552a460179a1bb0fe8f184557/tidytextpy-0.0.1.macosx-10.9-x86_64.tar.gz",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b884fb3d8bf0acef07a2516bd50f779",
                    "sha256": "4b4834e6172e65eb5d9d6e9d837272ac69dcba9b1ca2246f6b3bdd6ce3557ad6"
                },
                "downloads": -1,
                "filename": "tidytextpy-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "8b884fb3d8bf0acef07a2516bd50f779",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 398565,
                "upload_time": "2020-08-21T04:21:15",
                "upload_time_iso_8601": "2020-08-21T04:21:15.584520Z",
                "url": "https://files.pythonhosted.org/packages/36/01/38b1229d9ba854724bfcef6c175b3f5a66105e5b35d939257d987f515e76/tidytextpy-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "\u5927\u9093",
            "author_email": "thunderhit@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/thunderhit/tidytextpy",
            "keywords": "tidytext,text analysis,sentiment,sentiment analysis,natural language processing,R,python",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "tidytextpy",
            "package_url": "https://pypi.org/project/tidytextpy/",
            "platform": "",
            "project_url": "https://pypi.org/project/tidytextpy/",
            "project_urls": {
                "Homepage": "https://github.com/thunderhit/tidytextpy"
            },
            "release_url": "https://pypi.org/project/tidytextpy/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "\u5c06R\u8bed\u8a00tidytext\u5305\u79fb\u690d\u5230Python\uff0c\u53ef\u7b80\u5355\u8c03\u7528unnest_tokens\u3001get_sentiments\u3001get_stopwords\u3001bind_tf_idf\u7b49\u51fd\u6570\u3002",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10351292,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "58223a8ba46c1391c43e70507aff8162",
                    "sha256": "4d0c87fdad1471df2a59ae9d594c98cc1a0d4cd2c288ca088bf3a185868e6982"
                },
                "downloads": -1,
                "filename": "tidytextpy-0.0.2.macosx-10.9-x86_64.tar.gz",
                "has_sig": false,
                "md5_digest": "58223a8ba46c1391c43e70507aff8162",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 398875,
                "upload_time": "2020-08-21T04:37:26",
                "upload_time_iso_8601": "2020-08-21T04:37:26.559905Z",
                "url": "https://files.pythonhosted.org/packages/ec/c6/edbb07f986b31ddb663faba9c2562f501134cae0c096499c8edf27292d2b/tidytextpy-0.0.2.macosx-10.9-x86_64.tar.gz",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "24f1016e243b847ff85a51a93892d8a9",
                    "sha256": "0fc482b462901bc2e31f2c18f47b35d21ba63c8c8959ad2aa40a4692b9d33827"
                },
                "downloads": -1,
                "filename": "tidytextpy-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "24f1016e243b847ff85a51a93892d8a9",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 401007,
                "upload_time": "2020-08-21T04:37:24",
                "upload_time_iso_8601": "2020-08-21T04:37:24.498883Z",
                "url": "https://files.pythonhosted.org/packages/4c/c4/fe766d6a07aea4997a3623ede3dc7916fac1f317d711aea6dbc41635a638/tidytextpy-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.0": {
        "info": {
            "author": "\u5927\u9093",
            "author_email": "thunderhit@qq.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "# TidyTextPy\n\ntidytext\u662fR\u8bed\u8a00\u7684\u6587\u672c\u5206\u6790\u5305\uff0c\u4e00\u822c\u6570\u636e\u4f1a\u6574\u7406\u4e3adataframe\uff0c\u6bcf\u884c\u90fd\u662f\u7531docid-word-freq\u7ec4\u6210\u3002\u6709\u4e00\u672cR\u8bed\u8a00\u7684\u6587\u672c\u6316\u6398\u4e66\u300aText mining with R\u300b\uff0c\u77e5\u8bc6\u4f53\u7cfb\u633a\u5b8c\u6574\u7684\uff0c\u8be5\u4e66\u4e3b\u529b\u5206\u6790\u5de5\u5177\u662fR\u8bed\u8a00\u7684tidytext\u5305\u3002\n\n\n\n\u6700\u65e9 https://github.com/machow/tidytext-py \u9879\u76ee\u521d\u6b65\u5b9e\u73b0\u4e86R\u8bed\u8a00\u4e2d\u7684unntest_tokens\u548cbind_tf_idf\uff0c\u4f46\u672a\u5b9e\u73b0get_sentiments\u548cget_stopwords\uff0c\u672c\u9879\u76ee\u4e3b\u8981\u662f\u57fa\u4e8ehttps://github.com/machow/tidytext-py\uff0c\u5c06\u5176\u5b8c\u5584\u3002\n\n\n\n\u672c\u9879\u76ee\u53ef\u80fd\u56fe\u7247\u770b\u4e0d\u5230\uff0c\u5927\u5bb6\u53ef\u4ee5\u70b9\u51fb\u94fe\u63a5:https://pan.baidu.com/s/1Lf8fd7Ra4A3GwoViLyZQnA  \u5bc6\u7801:wucj \u4e0b\u8f7d\u672c\u6587\u4ee3\u7801\u548c\u6570\u636e\u3002\n\n# \u5b89\u88c5\n\n```\npip install tidytextpy\n```\n\n\n\n# \u5b9e\u9a8c\u6570\u636e\n\n\u8fd9\u91cc\u4f7f\u7528\u4e2d\u6587\u79d1\u5e7b\u5c0f\u8bf4\u300a\u4e09\u4f53\u300b\u4e3a\u4f8b\u5b50\uff0c\u542b\u6ce8\u91ca\u5171213\u7ae0\uff0c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6784\u5efa\u4e09\u4f53\u5c0f\u8bf4\u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6db5\n- chapterid \u7b2c\u51e0\u7ae0\n- title \u7ae0(\u8282)\u6807\u9898\n- text \u6bcf\u7ae0\u8282\u7684\u6587\u672c\u5185\u5bb9(\u5206\u8bcd\u540e\u4ee5\u7a7a\u683c\u95f4\u9694\u7684\u6587\u672c\uff0c\u5f62\u6001\u7c7b\u4f3c\u82f1\u6587)\n\n\n```python\nimport pandas as pd\nimport jieba\nimport re\npd.set_option('display.max_rows', 6)\n\nraw_texts = open('\u4e09\u4f53.txt', encoding='utf-8').read()\ntexts = re.split('\u7b2c\\d+\u7ae0', raw_texts)\ntexts = [text for text in texts if text]\n#\u4e2d\u6587\u591a\u4e86\u4e0b\u9762\u4e00\u884c\u4ee3\u7801\uff08\u6784\u9020\u7528\u7a7a\u683c\u95f4\u9694\u7684\u5b57\u7b26\u4e32\uff09\ntexts = [' '.join(jieba.lcut(text)) for text in texts if text]\ntitles = re.findall('\u7b2c\\d+\u7ae0 (.*?)\\n', raw_texts)\n\ndata = {'chapterid': list(range(1, len(titles)+1)),\n        'title': titles,\n        'text': texts}\ndf = pd.DataFrame(data)\ndf\n```\n\n    Building prefix dict from the default dictionary ...\n    Loading model from cache /var/folders/sc/3mnt5tgs419_hk7s16gq61p80000gn/T/jieba.cache\n    Loading model cost 0.592 seconds.\n    Prefix dict has been built successfully.\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>chapterid</th>\n      <th>title</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>\u79d1\u5b66\u8fb9\u754c(1)</td>\n      <td>\u79d1\u5b66 \u8fb9\u754c ( 1 ) \\n \\n         \u604b\u4e0a\u4f60 \u770b\u4e66 \u7f51   630book...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>\u79d1\u5b66\u8fb9\u754c(2)</td>\n      <td>\u79d1\u5b66 \u8fb9\u754c ( 2 ) \\n \\n         \u604b\u4e0a\u4f60 \u770b\u4e66 \u7f51   630book...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>\u53f0\u7403</td>\n      <td>\u53f0\u7403 \\n \\n         \u604b\u4e0a\u4f60 \u770b\u4e66 \u7f51   630bookla   \uff0c \u6700\u5feb...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>211</td>\n      <td>\u3010\u65f6\u95f4\u4e4b\u5916\uff0c\u6211\u4eec\u7684\u5b87\u5b99\u3011(2)</td>\n      <td>\u3010 \u65f6\u95f4 \u4e4b\u5916 \uff0c \u6211\u4eec \u7684 \u5b87\u5b99 \u3011 ( 2 ) \\n \\n         \u604b\u4e0a\u4f60 ...</td>\n    </tr>\n    <tr>\n      <th>211</th>\n      <td>212</td>\n      <td>\u3010\u65f6\u95f4\u4e4b\u5916\uff0c\u6211\u4eec\u7684\u5b87\u5b99\u3011(3)</td>\n      <td>\u3010 \u65f6\u95f4 \u4e4b\u5916 \uff0c \u6211\u4eec \u7684 \u5b87\u5b99 \u3011 ( 3 ) \\n \\n         \u604b\u4e0a\u4f60 ...</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>213</td>\n      <td>\u6ce8\u91ca</td>\n      <td>\u6ce8\u91ca \\n \\n         \u604b\u4e0a\u4f60 \u770b\u4e66 \u7f51   630bookla   \uff0c \u6700\u5feb...</td>\n    </tr>\n  </tbody>\n</table>\n<p>213 rows \u00d7 3 columns</p>\n</div>\n\n\n\n# tidytextpy\u5e93\n- get_stopwords \u505c\u7528\u8bcd\u8868\n- get_sentiments \u60c5\u611f\u8bcd\u5178\n- unnest_tokens \u5206\u8bcd\u51fd\u6570\n- bind_tf_idf  \u8ba1\u7b97tf-idf\n\n\n\n\n# \u505c\u7528\u8bcd\u8868\nget_stopwords(language)  \u83b7\u53d6\u5bf9\u5e94\u8bed\u8a00\u7684\u505c\u7528\u8bcd\u8868\uff0c\u76ee\u524d\u4ec5\u652f\u6301chinese\u548cenglish\u4e24\u79cd\u8bed\u8a00\n\n\n```python\nfrom tidytextpy import get_stopwords\n\ncn_stps = get_stopwords('chinese')\n#\u524d20\u4e2a\u4e2d\u6587\u7684\u505c\u7528\u8bcd\ncn_stps[:20]\n```\n\n\n\n\n    ['\u3001',\n     '\u3002',\n     '\u3008',\n     '\u3009',\n     '\u300a',\n     '\u300b',\n     '\u4e00',\n     '\u4e00\u4e9b',\n     '\u4e00\u4f55',\n     '\u4e00\u5207',\n     '\u4e00\u5219',\n     '\u4e00\u65b9\u9762',\n     '\u4e00\u65e6',\n     '\u4e00\u6765',\n     '\u4e00\u6837',\n     '\u4e00\u822c',\n     '\u4e00\u8f6c\u773c',\n     '\u4e03',\n     '\u4e07\u4e00',\n     '\u4e09']\n\n\n\n\n```python\nen_stps = get_stopwords()\n#\u524d20\u4e2a\u82f1\u6587\u6587\u7684\u505c\u7528\u8bcd\nen_stps[:20]\n```\n\n\n\n\n    ['i',\n     'me',\n     'my',\n     'myself',\n     'we',\n     'our',\n     'ours',\n     'ourselves',\n     'you',\n     'your',\n     'yours',\n     'yourself',\n     'yourselves',\n     'he',\n     'him',\n     'his',\n     'himself',\n     'she',\n     'her',\n     'hers']\n\n\n\n# \u60c5\u611f\u8bcd\u5178\n**get_sentiments('\u8bcd\u5178\u540d')** \u8c03\u7528\u8bcd\u5178\uff0c\u8fd4\u56de\u8bcd\u5178\u7684dataframe\u6570\u636e\u3002\n\n- [afinn](http://www2.imm.dtu.dk/pubdb/pubs/6010-full.html) sentiment\u53d6\u503c-5\u52305\n- [bing](https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html) sentiment\u53d6\u503c\u4e3apositive\u6216negative\n- [nrc](http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm) sentiment\u53d6\u503c\u4e3apositive\u6216negative\uff0c\u53ca\u7ec6\u7c92\u5ea6\u7684\u60c5\u7eea\u5206\u7c7b\u4fe1\u606f\n- [dutir](https://github.com/ZaneMuir/DLUT-Emotionontology) sentiment\u4e3a\u4e2d\u6587\u4e03\u79cd\u60c5\u7eea\u7c7b\u522b\uff08\u7ec6\u7c92\u5ea6\u60c5\u7eea\u5206\u7c7b\u4fe1\u606f\uff09\n- hownet sentiment\u4e3apositive\u6216negative\n\n\u5176\u4e2dhownet\u548cdutir\u4e3a**\u4e2d\u6587\u60c5\u611f\u8bcd\u5178**\n\n\n```python\nfrom tidytextpy import get_sentiments\n\n#\u5927\u8fde\u7406\u5de5\u5927\u5b66\u60c5\u611f\u672c\u4f53\u5e93\uff0c\u5171\u4e03\u79cd\u60c5\u7eea\uff08sentiment\uff09\nget_sentiments('dutir')\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sentiment</th>\n      <th>word</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>\u60ca</td>\n      <td>\u51b7\u4e0d\u9632</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>\u60ca</td>\n      <td>\u60ca\u52a8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>\u60ca</td>\n      <td>\u73cd\u95fb</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>27411</th>\n      <td>\u60e7</td>\n      <td>\u5306\u731d</td>\n    </tr>\n    <tr>\n      <th>27412</th>\n      <td>\u60e7</td>\n      <td>\u5fe7\u5fc3\u4ef2\u5fe1</td>\n    </tr>\n    <tr>\n      <th>27413</th>\n      <td>\u60e7</td>\n      <td>\u9762\u9762\u53ae\u89d1</td>\n    </tr>\n  </tbody>\n</table>\n<p>27414 rows \u00d7 2 columns</p>\n</div>\n\n\n\n\n```python\nget_sentiments('nrc')\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>word</th>\n      <th>sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abacus</td>\n      <td>trust</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>abandon</td>\n      <td>fear</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>abandon</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>13898</th>\n      <td>zest</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>13899</th>\n      <td>zest</td>\n      <td>trust</td>\n    </tr>\n    <tr>\n      <th>13900</th>\n      <td>zip</td>\n      <td>negative</td>\n    </tr>\n  </tbody>\n</table>\n<p>13901 rows \u00d7 2 columns</p>\n</div>\n\n\n\n# \u5206\u8bcd\n``unnest_tokens(__data, output, input)``\n- ``__data`` \u5f85\u5904\u7406\u7684dataframe\u6570\u636e\n- output \u65b0\u751f\u6210\u7684dataframe\u4e2d\uff0c\u7528\u4e8e\u5b58\u50a8\u5206\u8bcd\u7ed3\u679c\u7684\u5b57\u6bb5\u540d\n- input \u5f85\u5206\u8bcd\u6570\u636e\u7684\u5b57\u6bb5\u540d(\u5f85\u5904\u7406\u7684dataframe\u6570\u636e)\n\n\n\n```python\nfrom tidytextpy import unnest_tokens\n\ntokens = unnest_tokens(df, output='word', input='text')\ntokens\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>chapterid</th>\n      <th>title</th>\n      <th>word</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>\u79d1\u5b66\u8fb9\u754c(1)</td>\n      <td>\u79d1\u5b66</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>\u79d1\u5b66\u8fb9\u754c(1)</td>\n      <td>\u8fb9\u754c</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>\u79d1\u5b66\u8fb9\u754c(1)</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>213</td>\n      <td>\u6ce8\u91ca</td>\n      <td>\u60f3\u5230</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>213</td>\n      <td>\u6ce8\u91ca</td>\n      <td>\u6697\u7269\u8d28</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>213</td>\n      <td>\u6ce8\u91ca</td>\n      <td>\u3002</td>\n    </tr>\n  </tbody>\n</table>\n<p>556595 rows \u00d7 3 columns</p>\n</div>\n\n\n\n## \u5404\u7ae0\u8282\u7528\u8bcd\u91cf\n\u4ece\u8fd9\u91cc\u5f00\u59cb\u4f1a\u7528\u5230plydata\u7684\u7ba1\u9053\u7b26>> \u548c\u76f8\u5173\u7684\u5e38\u7528\u51fd\u6570\uff0c\u5efa\u8bae\u5927\u5bb6\u9047\u5230\u4e0d\u61c2\u7684\u5730\u65b9\u67e5\u9605plydata\u6587\u6863\n\n\n```python\nfrom plydata import count, group_by, ungroup\n\n\nwordfreq = (df \n            >> unnest_tokens(output='word', input='text') #\u5206\u8bcd\n            >> group_by('chapterid')  #\u6309\u7ae0\u8282\u5206\u7ec4\n            >> count() #\u5bf9\u6bcf\u7ae0\u7528\u8bcd\u91cf\u8fdb\u884c\u7edf\u8ba1\n            >> ungroup() #\u53bb\u9664\u5206\u7ec4\n           )\n\nwordfreq\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>chapterid</th>\n      <th>n</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2549</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2666</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1726</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>211</td>\n      <td>2505</td>\n    </tr>\n    <tr>\n      <th>211</th>\n      <td>212</td>\n      <td>2646</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>213</td>\n      <td>2477</td>\n    </tr>\n  </tbody>\n</table>\n<p>213 rows \u00d7 2 columns</p>\n</div>\n\n\n\n## \u7ae0\u8282\u7528\u8bcd\u91cf\u53ef\u89c6\u5316\n\u4f7f\u7528plotnine\u8fdb\u884c\u53ef\u89c6\u5316\n\n\n```python\nfrom plotnine import ggplot, aes, theme, geom_line, labs, theme, element_text\nfrom plotnine.options import figure_size\n\n(ggplot(wordfreq, aes(x='chapterid', y='n'))+\n geom_line()+\n labs(title='\u4e09\u4f53\u7ae0\u8282\u7528\u8bcd\u91cf\u6298\u7ebf\u56fe',\n      x='\u7ae0\u8282', \n      y='\u7528\u8bcd\u91cf')+\n theme(figure_size=(12, 8),\n       title=element_text(family='Kai', size=15), \n       axis_text_x=element_text(family='Kai'),\n       axis_text_y=element_text(family='Kai'))\n)\n```\n\n\n![png](output_14_0.png)\n\n\n\n\n\n    <ggplot: (338899281)>\n\n\n\n# \u60c5\u611f\u5206\u6790\n\u91cd\u8981\u7684\u4e8b\u60c5\u591a\u91cd\u590d\u4e00\u904do(*\uffe3\ufe36\uffe3*)o\n\n**get_sentiments('\u8bcd\u5178\u540d')** \u8c03\u7528\u8bcd\u5178\uff0c\u8fd4\u56de\u8bcd\u5178\u7684dataframe\u6570\u636e\u3002\n\n- [afinn](http://www2.imm.dtu.dk/pubdb/pubs/6010-full.html) sentiment\u53d6\u503c-5\u52305\n- [bing](https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html) sentiment\u53d6\u503c\u4e3apositive\u6216negative\n- [nrc](http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm) sentiment\u53d6\u503c\u4e3apositive\u6216negative\uff0c\u53ca\u7ec6\u7c92\u5ea6\u7684\u60c5\u7eea\u5206\u7c7b\u4fe1\u606f\n- [dutir](https://github.com/ZaneMuir/DLUT-Emotionontology) sentiment\u4e3a\u4e2d\u6587\u4e03\u79cd\u60c5\u7eea\u7c7b\u522b\uff08\u7ec6\u7c92\u5ea6\u60c5\u7eea\u5206\u7c7b\u4fe1\u606f\uff09\n- hownet sentiment\u4e3apositive\u6216negative\n\n\u5176\u4e2dhownet\u548cdutir\u4e3a**\u4e2d\u6587\u60c5\u611f\u8bcd\u5178**\n\n\n## \u60c5\u611f\u8ba1\u7b97\n\u8fd9\u91cc\u4f1a\u7528\u5230plydata\u7684\u5f88\u591a\u77e5\u8bc6\u70b9\uff0c\u5927\u5bb6\u53ef\u4ee5\u67e5\u770bhttps://plydata.readthedocs.io/en/latest/index.html \u76f8\u5173\u51fd\u6570\u7684\u6587\u6863\u3002\n\n![](img/inner-join.gif)\n\n\n```python\nfrom plydata import inner_join, count, define, call\nfrom plydata.tidy import spread\n\nchapter_sentiment_score = (\n    df #\u5206\u8bcd\n    >> unnest_tokens(output='word', input='text') \n    >> inner_join(get_sentiments('hownet')) #\u8ba9\u5206\u8bcd\u7ed3\u679c\u4e0ehownet\u8bcd\u8868\u4ea4\u96c6\uff0c\u7ed9\u6bcf\u4e2a\u8bcd\u5206\u914dsentiment\n    >> count('chapterid', 'sentiment')#\u7edf\u8ba1\u6bcf\u7ae0\u4e2d\u6bcf\u7c7bsentiment\u7684\u4e2a\u6570\n    >> spread('sentiment', 'n') #\u5c06sentiment\u4e2d\u7684positive\u548cnegative\u8f6c\u5316\u4e3a\u4e24\u5217\n    >> call('.fillna', 0) #\u5c06\u7f3a\u5931\u503c\u66ff\u6362\u4e3a0\n    >> define(score = '(positive-negative)/(positive+negative)') #\u8ba1\u7b97\u6bcf\u4e00\u7ae0\u7684\u60c5\u611f\u5206score\n)\n\nchapter_sentiment_score\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>chapterid</th>\n      <th>negative</th>\n      <th>positive</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>93.0</td>\n      <td>56.0</td>\n      <td>-0.248322</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>98.0</td>\n      <td>83.0</td>\n      <td>-0.082873</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>54.0</td>\n      <td>37.0</td>\n      <td>-0.186813</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>210</th>\n      <td>211</td>\n      <td>56.0</td>\n      <td>73.0</td>\n      <td>0.131783</td>\n    </tr>\n    <tr>\n      <th>211</th>\n      <td>212</td>\n      <td>71.0</td>\n      <td>67.0</td>\n      <td>-0.028986</td>\n    </tr>\n    <tr>\n      <th>212</th>\n      <td>213</td>\n      <td>75.0</td>\n      <td>74.0</td>\n      <td>-0.006711</td>\n    </tr>\n  </tbody>\n</table>\n<p>213 rows \u00d7 4 columns</p>\n</div>\n\n\n\n## \u4e09\u4f53\u5c0f\u8bf4\u60c5\u611f\u8d70\u52bf\n\u6211\u8bb0\u5f97\u770b\u5b8c\u300a\u4e09\u4f53\u300b\u540e\uff0c\u5f88\u60b2\u89c2\uff0c\u89c9\u5f97\u4eba\u7c7b\u4f3c\u4e4e\u6c38\u8fdc\u9003\u4e0d\u8fc7\u5b87\u5b99\u7684\u65f6\u7a7a\u89c4\u5f8b\uff0c\u5fc3\u60c5\u5341\u5206\u538b\u6291\u3002\u5982\u679c\u5bf9\u7167\u5c0f\u8bf4\u8fdb\u884c\u7ae0\u8282\u7684\u60c5\u611f\u5206\u6790\uff0c\u5e94\u8be5\u6574\u4f53\u60c5\u611f\u5206\u7684\u8d70\u52bf\u5927\u591a\u57280\u4ee5\u4e0b\u3002\n\n\n```python\nfrom plotnine import ggplot, aes, geom_line, element_text, labs, theme\n\n(ggplot(chapter_sentiment_score, aes('chapterid', 'score'))+\n geom_line()+\n labs(x='\u7ae0\u8282', y='\u60c5\u611f\u503cscore', title='\u300a\u4e09\u4f53\u300b\u5c0f\u8bf4\u60c5\u611f\u8d70\u52bf\u56fe')+\n theme(title=element_text(family='Kai'))\n)\n```\n\n\n![png](output_18_0.png)\n\n\n\n\n\n    <ggplot: (364328989)>\n\n\n\n# tf-idf\n\u76f8\u6bd4\u4e4b\u524d\u7684\u4ee3\u7801\uff0cbind_tf_idf\u8fd0\u884c\u8d77\u6765\u5f88\u6162\u5f88\u6162\u3002\u6240\u4ee5\u8fd9\u91cc\u7528\u522b\u7684\u6570\u636e\u505a\u5b9e\u9a8c\n\n## tf-idf\u5b9e\u9a8c\u6570\u636e\n\n\n```python\nimport pandas as pd\npd.set_option('display.max_rows', 6)\n\nzen = \"\"\"\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\"\"\"\n\nzen_split = zen.splitlines()\n\ndf = pd.DataFrame({'docid': list(range(len(zen_split))),\n                  'text': zen_split})\n\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>docid</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>The Zen of Python, by Tim Peters</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>19</td>\n      <td>If the implementation is hard to explain, it's...</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>20</td>\n      <td>If the implementation is easy to explain, it m...</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>21</td>\n      <td>Namespaces are one honking great idea -- let's...</td>\n    </tr>\n  </tbody>\n</table>\n<p>22 rows \u00d7 2 columns</p>\n</div>\n\n\n\n## bind_tf_idf\ntf\u8868\u793a\u8bcd\u9891\uff0cidf\u8868\u793a\u8bcd\u8bed\u5728\u6587\u672c\u4e2d\u7684\u7a00\u7f3a\u6027\uff0c\u4e24\u8005\u7684\u7ed3\u5408\u4f53\u73b0\u4e86\u4e00\u4e2a\u8bcd\u7684\u4fe1\u606f\u91cf\u3002\u627e\u51fa\u5c0f\u8bf4\u4e2dtf-idf\u6700\u5927\u7684\u8bcd\u3002\n\n``bind_tf_idf(_data, term, document, n)``\n\n- ``_data`` \u4f20\u5165\u7684df\n- term df\u4e2d\u8bcd\u8bed\u5bf9\u5e94\u7684\u5b57\u6bb5\u540d\n- document df\u4e2d\u6587\u6863id\u7684\u5b57\u6bb5\u540d\n- n df\u4e2d\u8bcd\u9891\u6570\u5bf9\u5e94\u7684\u5b57\u6bb5\u540d\n\n\n```python\nfrom tidytextpy import bind_tf_idf\nfrom plydata import count, group_by, ungroup\n\ntfidfs = (df\n          >> unnest_tokens(output='word', input='text')\n          >> count('docid', 'word')\n          >> bind_tf_idf(term='word', document='docid', n='n')\n         )\n\ntfidfs\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>docid</th>\n      <th>word</th>\n      <th>n</th>\n      <th>tf</th>\n      <th>idf</th>\n      <th>tf_idf</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>the</td>\n      <td>1</td>\n      <td>0.142857</td>\n      <td>1.386294</td>\n      <td>0.198042</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>zen</td>\n      <td>1</td>\n      <td>0.142857</td>\n      <td>2.995732</td>\n      <td>0.427962</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>of</td>\n      <td>1</td>\n      <td>0.142857</td>\n      <td>1.897120</td>\n      <td>0.271017</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>137</th>\n      <td>21</td>\n      <td>more</td>\n      <td>1</td>\n      <td>0.090909</td>\n      <td>2.995732</td>\n      <td>0.272339</td>\n    </tr>\n    <tr>\n      <th>138</th>\n      <td>21</td>\n      <td>of</td>\n      <td>1</td>\n      <td>0.090909</td>\n      <td>1.897120</td>\n      <td>0.172465</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>21</td>\n      <td>those</td>\n      <td>1</td>\n      <td>0.090909</td>\n      <td>2.995732</td>\n      <td>0.272339</td>\n    </tr>\n  </tbody>\n</table>\n<p>140 rows \u00d7 6 columns</p>\n</div>\n\n\n\n\n\n<br>\n\n<br>\n\n# \u5982\u679c\n\n\u5982\u679c\u60a8\u662f\u7ecf\u7ba1\u4eba\u6587\u793e\u79d1\u4e13\u4e1a\u80cc\u666f\uff0c\u7f16\u7a0b\u5c0f\u767d\uff0c\u9762\u4e34\u6d77\u91cf\u6587\u672c\u6570\u636e\u91c7\u96c6\u548c\u5904\u7406\u5206\u6790\u8270\u5de8\u4efb\u52a1\uff0c\u53ef\u4ee5\u53c2\u770b[\u300apython\u7f51\u7edc\u722c\u866b\u4e0e\u6587\u672c\u6570\u636e\u5206\u6790\u300b](https://ke.qq.com/course/482241?tuin=163164df)\u89c6\u9891\u8bfe\u3002\u4f5c\u4e3a\u6587\u79d1\u751f\uff0c\u4e00\u6837\u4e5f\u662f\u4ece\u4e24\u773c\u4e00\u62b9\u9ed1\u5f00\u59cb\uff0c\u8fd9\u95e8\u8bfe\u7a0b\u662f\u7528\u4e94\u5e74\u65f6\u95f4\u51dd\u7f29\u51fa\u6765\u7684\u3002\u81ea\u8ba4\u4e3a\u8bb2\u7684\u5f88\u901a\u4fd7\u6613\u61c2o(*\uffe3\ufe36\uffe3*)o\uff0c\n\n- python\u5165\u95e8\n- \u7f51\u7edc\u722c\u866b\n- \u6570\u636e\u8bfb\u53d6\n- \u6587\u672c\u5206\u6790\u5165\u95e8\n- \u673a\u5668\u5b66\u4e60\u4e0e\u6587\u672c\u5206\u6790\n- \u6587\u672c\u5206\u6790\u5728\u7ecf\u7ba1\u7814\u7a76\u4e2d\u7684\u5e94\u7528\n\n\u611f\u5174\u8da3\u7684\u7ae5\u978b\u4e0d\u59a8 \u6233\u4e00\u4e0b[\u300apython\u7f51\u7edc\u722c\u866b\u4e0e\u6587\u672c\u6570\u636e\u5206\u6790\u300b](https://ke.qq.com/course/482241?tuin=163164df)\u8fdb\u6765\u770b\u770b~\n\n[![](img/\u8bfe\u7a0b.png)](https://ke.qq.com/course/482241?tuin=163164df)\n\n\n\n# \u66f4\u591a\n\n- [B\u7ad9:\u5927\u9093\u548c\u4ed6\u7684python](https://space.bilibili.com/122592901/channel/detail?cid=66008)\n\n- \u516c\u4f17\u53f7\uff1a\u5927\u9093\u548c\u4ed6\u7684python\n\n- [\u77e5\u4e4e\u4e13\u680f\uff1a\u6570\u636e\u79d1\u5b66\u5bb6](https://zhuanlan.zhihu.com/dadeng)\n\n<br>\n\n\n![](img/\u5927\u9093\u548c\u4ed6\u7684Python.png)\n\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/hidadeng/tidytextpy",
            "keywords": "tidytext,text analysis,sentiment,sentiment analysis,natural language processing,R,python",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "tidytextpy",
            "package_url": "https://pypi.org/project/tidytextpy/",
            "platform": "",
            "project_url": "https://pypi.org/project/tidytextpy/",
            "project_urls": {
                "Homepage": "https://github.com/hidadeng/tidytextpy"
            },
            "release_url": "https://pypi.org/project/tidytextpy/1.0/",
            "requires_dist": null,
            "requires_python": ">=3.5",
            "summary": "\u5c06R\u8bed\u8a00tidytext\u5305\u79fb\u690d\u5230Python\uff0c\u53ef\u7b80\u5355\u8c03\u7528unnest_tokens\u3001get_sentiments\u3001get_stopwords\u3001bind_tf_idf\u7b49\u51fd\u6570\u3002",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10351292,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0dbe0895400d6f1a2a621a0e3b59dcf7",
                    "sha256": "531a9a04055a467876aa7748b9323d9413fd7cacd31f5cf35b235188b680ccb0"
                },
                "downloads": -1,
                "filename": "tidytextpy-1.0.macosx-10.9-x86_64.tar.gz",
                "has_sig": false,
                "md5_digest": "0dbe0895400d6f1a2a621a0e3b59dcf7",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 398912,
                "upload_time": "2021-05-14T03:12:12",
                "upload_time_iso_8601": "2021-05-14T03:12:12.014120Z",
                "url": "https://files.pythonhosted.org/packages/89/80/63a5786ade5fb55016cfccc64520326eabff26e87b7de2f8ba9763121931/tidytextpy-1.0.macosx-10.9-x86_64.tar.gz",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "080a4dd38ee493fe2721eb38c40a7205",
                    "sha256": "3d6086c42977ddfbafd942c9cbd938554ffe7bf0d508c6ab0984aa7c5eb4e700"
                },
                "downloads": -1,
                "filename": "tidytextpy-1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "080a4dd38ee493fe2721eb38c40a7205",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 401009,
                "upload_time": "2021-05-14T03:12:01",
                "upload_time_iso_8601": "2021-05-14T03:12:01.875260Z",
                "url": "https://files.pythonhosted.org/packages/d0/12/459f06d428e147bb901d310c19371160c679bf650ae6e29739151ed68ada/tidytextpy-1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}