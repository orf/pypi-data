{
    "0.1": {
        "info": {
            "author": "cml",
            "author_email": "caimengli0660@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Web Environment",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: MacOS",
                "Operating System :: MacOS :: MacOS X",
                "Operating System :: POSIX :: BSD",
                "Operating System :: POSIX :: Linux",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Topic :: Internet",
                "Topic :: Software Development :: Build Tools",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": "# [Yz-RPC](https://github.com/ml444/yz-rpc)\n--------------\n\n## Introduction\nA gRPC framework for automatically generating protobuf files.\n\u4e00\u4e2a\u81ea\u52a8\u751f\u6210protobuf\u6587\u4ef6\u7684grpc\u6846\u67b6\u3002\n\nThe purpose of `yzrpc` is to write code in a development method similar \nto http WEB when developing back-end RPC services. The command line generates \nprotobuf with one click without paying attention to the writing on the protobuf file. \nAt the same time, it provides a code structure specification reference.\n\nyzrpc \u76ee\u7684\u4e3a\u4e86\u5f00\u53d1\u540e\u7aefRPC\u670d\u52a1\u65f6\uff0c\u80fd\u591f\u4ee5\u7c7b\u4f3chttp WEB\u7684\u5f00\u53d1\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801\uff0c\n\u547d\u4ee4\u884c\u4e00\u952e\u751f\u6210protobuf\uff0c\u800c\u4e0d\u5fc5\u8fc7\u5173\u6ce8protobuf\u534f\u8bae\u6587\u4ef6\u4e0a\u7684\u7f16\u5199\uff0c\n\u540c\u65f6\u63d0\u4f9b\u4e00\u79cd\u4ee3\u7801\u7ed3\u6784\u89c4\u8303\u53c2\u8003\u3002\n\n\n## Quick start\n\u53ef\u4ee5\u901a\u8fc7`createproject`\u548c`createtapp`\u4e24\u4e2a\u547d\u4ee4\u5feb\u901f\u521b\u5efa\u5de5\u7a0b\u548c\u5185\u90e8\u7684\u63a5\u53e3\u5e94\u7528\u6a21\u5757\u3002\n**\u5b89\u88c5\u6a21\u5757**\n```shell\n$ pip install yzrpc\n```\n\u793a\u4f8b\uff1a\n1. \u521b\u5efa\u5de5\u7a0b\uff1a\n    ```shell\n    $ yzrpc createproject myproject\n    ```\n    **\u6ce8\u610f\uff1a** *\u521b\u5efa\u9879\u76ee\u65f6\u4f1a\u68c0\u6d4b\u5f53\u524d\u76ee\u5f55\u662f\u5426\u4e0e\u9879\u76ee\u540d\u540c\u540d\uff0c\n    \u5982\u679c\u540c\u540d\u9ed8\u8ba4\u5df2\u7ecf\u521b\u5efa\u5de5\u7a0b\u6839\u76ee\u5f55\uff0c\u4f1a\u8be2\u95ee\u662f\u5426\u8986\u76d6\u8be5\u5de5\u7a0b\u3002*\n\n2. \u521b\u5efa\u5de5\u7a0b\u5185\u90e8\u5e94\u7528\uff1a\n    ```shell\n    $ yzrpc createapp myapp01 -D ./myproject/src\n\n    # \u6216\u8005\n    $ cd myproject\n    $ yzrpc createapp myapp01\n    ```\n\n    \u7ecf\u8fc7`createproject` \u548c `createapp`\u4e24\u4e2a\u547d\u4ee4\u540e\uff0c\u4f1a\u4ea7\u751f\u5982\u4e0b\u7684\u4ee3\u7801\u7ed3\u6784\uff1a\n    ```\n    .\n    \u251c\u2500\u2500 docs\t\t        \u8bf4\u660e\u6587\u6863\u3001\u63a5\u53e3\u6587\u6863\u7b49\u6587\u6863\u7684\u5b58\u653e\u76ee\u5f55\n    \u251c\u2500\u2500 migrations\t\t    \u6570\u636e\u8868\u8fc1\u79fb\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n    \u251c\u2500\u2500 src\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 apps \u63a5\u53e3\u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u76ee\u5f55\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 myapp01\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 controllers.py  \u63a7\u5236\u5c42\uff1a\u5c01\u88c5\u6570\u636e\u4ea4\u4e92\u64cd\u4f5c\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0   \u00a0 \u251c\u2500\u2500 models.py       \u6a21\u578b\u5c42\uff1a\u5b9e\u73b0\u6570\u636e\u8868\u4e0e\u6a21\u578b\u7684\u5b9a\u4e49\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 schemas.py      \u6a21\u5f0f\u5c42\uff1a\u5b9a\u4e49\u63a5\u53e3\u6570\u636e\u53c2\u6570\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0  \u00a0\u00a0 \u251c\u2500\u2500 tests.py        \u5355\u5143\u6d4b\u8bd5\u6587\u4ef6\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 views.py        \u89c6\u56fe\u5c42\uff1a\u63a5\u53e3\u5b9a\u4e49\u5c42\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf/\t\t    \u914d\u7f6e\u6587\u4ef6\u7684\u5b58\u653e\u76ee\u5f55\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 const/\t\t    \u516c\u5171\u5e38\u91cf\u5b58\u653e\u76ee\u5f55\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 protos/\t\t    protobuf\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 services/\t\t\u901a\u8fc7grpc-tools\u751f\u6210\u7684\u670d\u52a1\u8c03\u7528\u6a21\u5757\u7684\u5b58\u653e\u76ee\u5f55\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 utils/\t\t    \u62bd\u79bb\u51fa\u7684\u516c\u5171\u4ee3\u7801\u6a21\u5757\u5b58\u653e\u76ee\u5f55\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.py\t\u7a0b\u5e8f\u7684\u8bbe\u7f6e\u6587\u4ef6\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.py\t\t\u7a0b\u5e8f\u7684\u5165\u53e3\u6587\u4ef6\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 requirements.txt\n    \u2514\u2500\u2500 README.md\n    ```\n\n    \u751f\u6210\u7684MVCS(`models`,`views`, `controllers`, `schemas`)\u6a21\u7248\u4e2d\uff0c\n    \u9700\u8981\u6ce8\u610f`schemas.py`\u548c`views.py`\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u751f\u6210protobuf\u7684\u5173\u952e\u3002\n\n    \u5728\u751f\u6210\u7684\u4ee3\u7801\u6a21\u7248\u4e2d\uff0c\u5df2\u7ecf\u63d0\u4f9b\u76f8\u5173\u7684\u793a\u4f8b\uff1a\n    `schemas.py`:\n    ```python\n    from enum import Enum\n    from typing import (\n        Optional, Any, List, Tuple, Dict,\n        Mapping, Union, Sequence, Iterable\n    )\n    from yzrpc.schema import SchemaBase\n\n\n    class CommonBase(SchemaBase):\n        class Config:\n            orm_mode = True\n\n\n    class EnumExample(Enum):\n        A = 1\n        B = 2\n        C = 3\n\n\n    class EmbedInfo(CommonBase):\n        name: str\n        age: int\n\n\n    class SchemaExample(CommonBase):\n        int_exa: int\n        str_exa: str\n        bool_exa: bool\n        float_exa: float\n        bytes_exa: bytes\n        tuple_exa: tuple\n        list_exa: list\n        dict_exa: dict\n        enum_exa: EnumExample\n        embed_exa: EmbedInfo\n\n        exa_any: Any\n        exa_list: List\n        exa_tuple: Tuple\n        exa_dict: Dict[str, int]\n        exa_mapping: Mapping[str, int]\n        exa_list_embed: List\n        exa_sequence: Sequence[int]\n        exa_iterable: Iterable[str]\n        exa_list_multi: List[EmbedInfo]\n        exa_union: Union[int, EmbedInfo, EnumExample, str]  # \u4e0d\u63a8\u8350\n        exa_optional: Optional[EmbedInfo]                   # \u4e0d\u63a8\u8350\n        exa_optional_multi: Optional[EmbedInfo]             # \u4e0d\u63a8\u8350\n        exa_optional_multi_l: Optional[list]                # \u4e0d\u63a8\u8350\n\n    ```\n    `schemas.py`\u662f\u7ee7\u627f\u4e8e`pydantic`\u8fd9\u4e2a\u5e93\u6765\u8fdb\u884c\u7c7b\u578b\u68c0\u6d4b\u7684\uff0c\n    \u5728`schemas.py`\u4e2d\u5b9a\u4e49rpc\u63a5\u53e3\u7684\u8bf7\u6c42\u7c7b\u578b\u548c\u54cd\u5e94\u7c7b\u578b\u3002\n    **\u6ce8\u610f\uff1a** \u8bf7\u6c42\u7c7b\u578b\u548c\u54cd\u5e94\u7c7b\u578b\u5fc5\u987b\u7ee7\u627f\u4e8e`SchemaBase`\u8fd9\u4e2a\u57fa\u7c7b\u3002\n\n    `views.py`:\n    ```python\n    from typing import Iterable, Iterator\n    from yzrpc.servicer import ServicerBase, GRPCMethod\n\n    # from src.services import myapp01_pb2\n    # from src.services import myapp01_pb2_grpc\n\n    from .schemas import SchemaExample\n\n\n    class Myapp01Servicer(ServicerBase):\n        @GRPCMethod(before_requests=[], after_responses=[])\n        def get_one(self, request: SchemaExample, context) -> SchemaExample:\n            return request\n\n        @GRPCMethod()\n        def get_some(self, request: Iterator[SchemaExample], context) -> Iterable[SchemaExample]:\n            return request\n\n        @GRPCMethod()\n        def list_some(self, request: SchemaExample, context) -> Iterable[SchemaExample]:\n            pass\n\n        @GRPCMethod()\n        def update_some(self, request: Iterator[SchemaExample], context) -> SchemaExample:\n            pass\n    ```\n    \u9700\u8981\u53d8\u6210RPC\u63a5\u53e3\u7684\u65b9\u6cd5\u7528`GRPCMethod()`\u5c01\u88c5\uff0c\u53ef\u4f20\u5165`before_requests`\u548c`after_responses`\u53c2\u6570\uff0c\u4f5c\u4e3a\u8be5\u63a5\u53e3\u7684\u9884\u5904\u7406\u64cd\u4f5c\u3002\n    **\u6ce8\u610f\uff1a** \u8bf7\u6c42\u53c2\u6570\u7684\u548c\u8fd4\u56de\u53c2\u6570\u7684\u7c7b\u578b\u6807\u6ce8\u4e0d\u53ef\u5ffd\u7565\u4e0d\u5199\uff0c\u8be5\u7c7b\u578b\u6807\u6ce8\u662f\u751f\u6210protobuf\u534f\u8bae\u7684service\u6570\u636e\u7684\u5173\u952e\u3002\n\n3. \u5728app\u7684MVCS\u6a21\u5757\u7f16\u5199\u76f8\u5173\u7684\u4e1a\u52a1\u4ee3\u7801\u540e\uff0c\u8fd0\u884c\u547d\u4ee4\u751f\u6210protobuf\u6587\u4ef6:\n    ```shell\n    $ yzrpc generateproto\n    ```\n    ```shell\n    $ tree ./src/protos \n    ./src/protos\n    \u2514\u2500\u2500 myapp01.proto\n    ```\n\n4. \u6839\u636eprotobuf\u6587\u4ef6\u751f\u6210pb\u6a21\u5757\uff1a\n    ```shell\n    $ yzrpc generatemodule\n\n    $ tree ./src/services \n    ./src/services\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 myapp01_pb2.py\n    \u2514\u2500\u2500 myapp01_pb2_grpc.py\n    ```\n\n5. \u7f16\u5199\u5355\u5143\u6d4b\u8bd5\n    \u5728`myproject/src/apps/myapp01/tests.py`\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5355\u5143\u6d4b\u8bd5\u6a21\u7248\uff1a\n    ```python\n    import pytest\n    from yzrpc.tests import *\n\n\n    from src.services.myapp01_pb2 import SchemaExample\n\n\n    @pytest.fixture(scope='module')\n    def grpc_add_to_server():\n        from src.services.myapp01_pb2_grpc import add_Myapp01Servicer_to_server\n        return add_Myapp01Servicer_to_server\n\n\n    @pytest.fixture(scope='module')\n    def current_servicer():\n        from .views import Myapp01Servicer\n        return Myapp01Servicer\n\n\n    @pytest.fixture(scope='module')\n    def grpc_stub(grpc_channel):\n        from src.services.myapp01_pb2_grpc import Myapp01Stub\n\n        return Myapp01Stub(grpc_channel)\n\n    # \u6d4b\u8bd5\u7528\u4f8b\n    def test_get_one(grpc_stub):\n        request = SchemaExample(int_exa=1, str_exa='test')\n        context = MockContext()\n        response = grpc_stub.get_one(request, context)\n        assert isinstance(response, SchemaExample)\n        assert response.int_exa == 1\n        assert response.str_exa == 'test'\n    ```\n    \u5f00\u53d1\u4eba\u5458\u53ea\u9700\u5173\u6ce8\u6700\u4e0b\u9762\u7684\u6d4b\u8bd5\u7528\u4f8b\u5373\u53ef\uff0c\u4e4b\u4e0a\u7684\u662f\u6839\u636eapp\u4e0d\u540c\u81ea\u52a8\u5bfc\u5165\u7684\u6a21\u5757\u3002\u65e0\u9700\u7406\u4f1a\u3002\n    \u5f00\u53d1\u4eba\u5458\u6839\u636e\u9700\u8981\u6269\u5c55\u6d4b\u8bd5\u7528\u4f8b\u3002\n    \u8be5\u6d4b\u8bd5\u6a21\u5757\u662f\u57fa\u4e8e`pytest`\u6784\u5efa\u7684\uff0c\u8fd0\u884c\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u5b89\u88c5`pytest`\u3002\n\n    \u8fd0\u884c\u6d4b\u8bd5\uff1a\n    ```shell\n    $ yzrpc runtest\n    ```\n    \u8be5\u547d\u4ee4\u4f1a\u81ea\u52a8\u641c\u7d22\u9879\u76ee\u4e0b\u7684\u6240\u6709`tests.py`\u6587\u4ef6\u3002\n\n6. \u542f\u52a8\u670d\u52a1\n    ```shell\n    $ python src/main.py\n    ===>\u5f53\u524d\u73af\u5883\u4e3a\uff1adev!\u5bfc\u5165\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a\uff1aconfig_dev.ini\n    Starting server at 2021-04-23 11:35:28.902143\n    Server is listening port 50051\n    Registered handlers:\n    ===> -------------->myapp01<---------------\n    ===> Myapp01: get_one(SchemaExample) -> SchemaExample\n    ===> Myapp01: get_some(SchemaExample) -> SchemaExample\n    ===> Myapp01: list_some(SchemaExample) -> SchemaExample\n    ===> Myapp01: update_some(SchemaExample) -> SchemaExample\n    ```\n    \u670d\u52a1\u7684\u542f\u52a8\u53c2\u6570\u6709:\n    - --host=localhost\n    - --port=50051\n    - --max_workers=1   # \u6700\u5927\u7ebf\u7a0b\u6570\n    - --autoreload      # \u81ea\u52a8\u91cd\u8f7d\u529f\u80fd\uff0c\u5f00\u53d1\u9636\u6bb5\u4f7f\u7528\n    - --async           # \u8be5\u53c2\u6570\u542f\u52a8\u5f02\u6b65\u534f\u7a0b\u65b9\u5f0f\n\n    \u8fd9\u4e9b\u53c2\u6570\u90fd\u5c01\u88c5\u5728settings\u91cc\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539\u914d\u7f6e\u3002\n\n7. \u5ba2\u6237\u7aef\u8c03\u7528\n    ```python\n    from yzrpc.client import Client\n    from src.apps.myapp01.schemas import SchemaExample\n\n    with Client('localhost:50051', 'myapp01', 'Myapp1') as client:\n        request = SchemaExample(str_exa='testing', ...)\n        response = client.call('get_one', request)\n        print(response)\n        print(type(response))\n        print(response.str_exa)\n    ```\n    \u6216\u8005\uff1a\n    ```python\n    from yzrpc.client import Client\n    from src.apps.myapp01.schemas import SchemaExample\n\n    client = Client('localhost:50051', 'myapp01', 'Myapp1')\n    request = SchemaExample(str_exa='testing', ...)\n    response = client.call('get_one', request)\n    print(response)\n    print(type(response))\n    print(response.str_exa)\n    client.close()\n    ```\n    \u6839\u636e\u5177\u4f53\u4e1a\u52a1\u5f00\u53d1\u9700\u6c42\u8fdb\u884c\u4e8c\u6b21\u5c01\u88c5\u3002\n\n## Documentation\n\n[\u6682\u65e0](https://github.com/ml444/yz-rpc/README.md).\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ml444/yz-rpc",
            "keywords": "rpc,grpc,async,yzrpc",
            "license": "Apache License Version 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "yzrpc",
            "package_url": "https://pypi.org/project/yzrpc/",
            "platform": "",
            "project_url": "https://pypi.org/project/yzrpc/",
            "project_urls": {
                "Homepage": "https://github.com/ml444/yz-rpc"
            },
            "release_url": "https://pypi.org/project/yzrpc/0.1/",
            "requires_dist": [
                "grpcio (>=1.35.0)",
                "grpcio-tools (>=1.35.0)",
                "Jinja2 (<3,>=2.11.3)",
                "pydantic (<2,>=1.8)"
            ],
            "requires_python": ">=3.6",
            "summary": "A gRPC framework for automatically generating protobuf files.",
            "version": "0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 10181447,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2d88eb761b3eeefa5d47b4ed74f79c23",
                    "sha256": "ad5958b98702c0ace8e23085944f31c7c7d7a27612d1afb16477a8b2083ee27c"
                },
                "downloads": -1,
                "filename": "yzrpc-0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2d88eb761b3eeefa5d47b4ed74f79c23",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 130789,
                "upload_time": "2021-04-27T03:35:04",
                "upload_time_iso_8601": "2021-04-27T03:35:04.174609Z",
                "url": "https://files.pythonhosted.org/packages/b2/ab/2fda09f645d0b8a7660cfc2cc3bd5e4106e7bad18ef293058b1f45db5c7d/yzrpc-0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}