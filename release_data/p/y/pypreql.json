{
    "0.0.1rc1": {
        "info": {
            "author": "",
            "author_email": "preql-community@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "## PreQL\n\nPreql [Pre-quel] is a declarative, typed language that compiles to SQL [sequel].\n\n\n## Why?\n\nSQL is fantastic.\n\nSQL has been the de-facto language for working with data for decades. Data professionals \ncan use a common, declarative syntax to interact with anything from local file based databases\nto global distributed compute clusters.\n\nSQL solves the wrong problem.\n\nSQL is a declarative language for reading and manipulating data in tables in SQL databases.\n\nThis is a perfect fit for an application interacting with a datastore. \n\nBut in data warehouses, a _table_ is an leaky abstraction. Users actually want to declare\n_conceptual_ queries. Seeing revenue by product line is a goal; the table that contains\nthe products and the table that contains revenue are implementation details.\n\nThis mismatch between what is being declared\nleads to a sprawling mass of SQL that is duplicative an hard to follow and is critical \nto business function. Fortune 500 companies spend millions of dollars trying to reverse \nengineer the original intent of SQL to document dataflwo or lineage, or to refactor\nbusiness logic when moving to a new database.\n\n## How PreQL solves this\n\nPreQL separates declared conceptual manipulation - [Profit] = [Revenue] - [Cost] from the\ndatabase that implements those concepts and executes queries. This allows conceptual \nmanipulation to be strongly typed and validated through static analysis, which can then be \nexplicitly tested against the declared concrete datasources to produce empirical\nproof of correctness. Additionally, the two definitions can be independently evolved\nover time. \n\nA new analyst in a company can be productive in PreQL in minutes; a new analyst with SQL might\ntake a month to understand which tables are relevant. \n\n#### SQL\n```sql\nUSE AdventureWorks;\n\nSELECT t.Name, SUM(s.SubTotal) AS [Sub Total],\nSTR(Sum([TaxAmt])) AS [Total Taxes],\nSTR(Sum([TotalDue])) AS [Total Sales]\n\nFROM Sales.SalesOrderHeader AS s\n\nINNER JOIN Sales.SalesTerritory as t ON\n\ns.TerritoryID = t.TerritoryID\n\nGROUP BY t.Name\nORDER BY t.Name\n```\n\n### PreQL\n```sql\nSELECT \n    territory_name,\n    sub_total,\n    total_taxes,\n    total_sales\norder by territory_name desc\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "pypreql",
            "package_url": "https://pypi.org/project/pypreql/",
            "platform": null,
            "project_url": "https://pypi.org/project/pypreql/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/pypreql/0.0.1rc1/",
            "requires_dist": [
                "lark",
                "jinja2"
            ],
            "requires_python": "",
            "summary": "Declarative, typed query lanuage.",
            "version": "0.0.1rc1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 14450414,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "f78a0470d4d4d8b9e3709540389e2252",
                    "sha256": "b166f6db32881e21d9a0d92994bd839d1dbdbf410502c5a57874f4e1195f11ce"
                },
                "downloads": -1,
                "filename": "pypreql-0.0.1rc1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "f78a0470d4d4d8b9e3709540389e2252",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 14810,
                "upload_time": "2022-07-16T00:03:47",
                "upload_time_iso_8601": "2022-07-16T00:03:47.901159Z",
                "url": "https://files.pythonhosted.org/packages/a5/46/240f6bafe2b325bb2dc4d90deaf2f724787e7adc47fd006823e0137f6591/pypreql-0.0.1rc1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}