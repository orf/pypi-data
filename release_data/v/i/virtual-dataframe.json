{
    "0.5": {
        "info": {
            "author": "Philippe Prados",
            "author_email": "github@prados.fr",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Natural Language :: English",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.8",
                "Topic :: Scientific/Engineering"
            ],
            "description": "# Virtual DataFrame\n\n[Full documentation](https://pprados.github.io/virtual_dataframe/)\n\n## Motivation\n\nWith Panda-like dataframe, do you want to create a code, and choose at the end, the framework to use?\nDo you want to be able to choose the best framework after simply performing performance measurements?\nThis framework unifies multiple Panda-compatible components, to allow the writing of a single code, compatible with all.\n\n## Synopsis\n\nWith some parameters and Virtual classes, it's possible to write a code, and execute this code:\n\n- With or without multicore\n- With or without cluster (multi nodes)\n- With or without GPU\n\nTo do that, we create some virtual classes, add some methods in others classes, etc.\n\nIt's difficult to use a combinaison of framework, with the same classe name, with similare semantic, etc.\nFor example, if you want to use in the same program, Dask, cudf, pandas, modin, pyspark or pyspark+rapids,\nyou must manage:\n\n- `pandas.DataFrame`, `pandas,Series`\n- `modin.pandas.DataFrame`, `modin.pandas.Series`\n- `cudf.DataFrame`, `cudf.Series`\n- `dask.DataFrame`, `dask.Series`\n- `pyspark.pandas.DataFrame`, `pyspark.pandas.Series`\n\n With `cudf`, the code must call `.to_pandas()`. With dask, the code must call `.compute()`, can use `@delayed` or\n`dask.distributed.Client`. etc.\n\nWe propose to replace all these classes and scenarios, with a *uniform model*,\ninspired by [dask](https://www.dask.org/) (the more complex API).\nThen, it is possible to write one code, and use it in differents environnements and frameworks.\n\nThis project is essentially a back-port of *Dask+Cudf* to others frameworks.\nWe try to normalize the API of all frameworks.\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/pprados/virtual_dataframe",
            "keywords": "dataframe",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "virtual-dataframe",
            "package_url": "https://pypi.org/project/virtual-dataframe/",
            "platform": null,
            "project_url": "https://pypi.org/project/virtual-dataframe/",
            "project_urls": {
                "Homepage": "https://github.com/pprados/virtual_dataframe"
            },
            "release_url": "https://pypi.org/project/virtual-dataframe/0.5/",
            "requires_dist": [
                "pandas (>1.4)",
                "python-dotenv (>=0.20)",
                "GPUtil (>=1.4.0)"
            ],
            "requires_python": ">=3.8",
            "summary": "Bridge between pandas, cudf, modin, dask, dask-modin, dask-cudf, spark or spark+rapids",
            "version": "0.5",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15838187,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "51e3f7278a7ecf62f6a7e19ac1760a3d",
                    "sha256": "bf5b63731100229a2c740b5e97bf6f83fb5177e4a87b015ad15209f6c2dec380"
                },
                "downloads": -1,
                "filename": "virtual_dataframe-0.5-py3-none-any.whl",
                "has_sig": true,
                "md5_digest": "51e3f7278a7ecf62f6a7e19ac1760a3d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 23989,
                "upload_time": "2022-11-21T09:49:28",
                "upload_time_iso_8601": "2022-11-21T09:49:28.282397Z",
                "url": "https://files.pythonhosted.org/packages/da/e4/07e5b9da1eebcf3b601ff61ed6fd9a72ec84ff42421e8ee9c56efc3a0a75/virtual_dataframe-0.5-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1eaeb188be8671c6d25b34cbc9fa9e5a",
                    "sha256": "2c91519b7fc6a4459e71458de505aa1a5c3813c8ff38686a34f4989af667e595"
                },
                "downloads": -1,
                "filename": "virtual_dataframe-0.5.tar.gz",
                "has_sig": true,
                "md5_digest": "1eaeb188be8671c6d25b34cbc9fa9e5a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 62505,
                "upload_time": "2022-11-21T09:49:30",
                "upload_time_iso_8601": "2022-11-21T09:49:30.765400Z",
                "url": "https://files.pythonhosted.org/packages/23/86/8b26072fb5a49d81e25cfdcc53b8bc7c2f68b1eac17ca961b9cdfb0e79c1/virtual_dataframe-0.5.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}