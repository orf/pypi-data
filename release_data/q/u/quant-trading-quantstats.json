{
    "0.0.23": {
        "info": {
            "author": "Ran Aroussi",
            "author_email": "ran@aroussi.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Intended Audience :: Developers",
                "Intended Audience :: Financial and Insurance Industry",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Topic :: Office/Business :: Financial",
                "Topic :: Office/Business :: Financial :: Investment",
                "Topic :: Scientific/Engineering",
                "Topic :: Scientific/Engineering :: Information Analysis",
                "Topic :: Scientific/Engineering :: Mathematics",
                "Topic :: Software Development :: Libraries",
                "Topic :: Software Development :: Libraries :: Python Modules"
            ],
            "description": ".. image:: https://img.shields.io/badge/python-3.5+-blue.svg?style=flat\n    :target: https://pypi.python.org/pypi/quantstats\n    :alt: Python version\n\n.. image:: https://img.shields.io/pypi/v/quantstats.svg?maxAge=60\n    :target: https://pypi.python.org/pypi/quantstats\n    :alt: PyPi version\n\n.. image:: https://img.shields.io/pypi/status/quantstats.svg?maxAge=60\n    :target: https://pypi.python.org/pypi/quantstats\n    :alt: PyPi status\n\n.. image:: https://img.shields.io/travis/ranaroussi/quantstats/master.svg?maxAge=1\n    :target: https://travis-ci.org/ranaroussi/quantstats\n    :alt: Travis-CI build status\n\n.. image:: https://img.shields.io/pypi/dm/quantstats.svg?maxAge=2592000&label=installs&color=%2327B1FF\n    :target: https://pypi.python.org/pypi/quantstats\n    :alt: PyPi downloads\n\n.. image:: https://www.codefactor.io/repository/github/ranaroussi/quantstats/badge\n    :target: https://www.codefactor.io/repository/github/ranaroussi/quantstats\n    :alt: CodeFactor\n\n.. image:: https://img.shields.io/github/stars/ranaroussi/quantstats.svg?style=social&label=Star&maxAge=60\n    :target: https://github.com/ranaroussi/quantstats\n    :alt: Star this repo\n\n.. image:: https://img.shields.io/twitter/follow/aroussi.svg?style=social&label=Follow&maxAge=60\n    :target: https://twitter.com/aroussi\n    :alt: Follow me on twitter\n\n\\\n\nQuantStats: Portfolio analytics for quants\n==========================================\n\n**QuantStats** Python library that performs portfolio profiling, allowing quants and portfolio managers to understand their performance better by providing them with in-depth analytics and risk metrics.\n\n`Changelog \u00bb <./CHANGELOG.rst>`__\n\nQuantStats is comprised of 3 main modules:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. ``quantstats.stats`` - for calculating various performance metrics, like Sharpe ratio, Win rate, Volatility, etc.\n2. ``quantstats.plots`` - for visualizing performance, drawdowns, rolling statistics, monthly returns, etc.\n3. ``quantstats.reports`` - for generating metrics reports, batch plotting, and creating tear sheets that can be saved as an HTML file.\n\nHere's an example of a simple tear sheet analyzing a strategy:\n\nQuick Start\n===========\n\n.. code:: python\n\n    %matplotlib inline\n    import quantstats as qs\n\n    # extend pandas functionality with metrics, etc.\n    qs.extend_pandas()\n\n    # fetch the daily returns for a stock\n    stock = qs.utils.download_returns('FB')\n\n    # show sharpe ratio\n    qs.stats.sharpe(stock)\n\n    # or using extend_pandas() :)\n    stock.sharpe()\n\nOutput:\n\n.. code:: text\n\n    0.8135304438803402\n\n\nVisualize stock performance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    qs.plots.snapshot(stock, title='Facebook Performance')\n\n    # can also be called via:\n    # stock.plot_snapshot(title='Facebook Performance')\n\nOutput:\n\n.. image:: https://raw.githubusercontent.com/ranaroussi/quantstats/dev/docs/snapshot.jpg\n    :alt: Snapshot plot\n\n\nCreating a report\n~~~~~~~~~~~~~~~~~\n\nYou can create 7 different report tearsheets:\n\n1. ``qs.reports.metrics(mode='basic|full\", ...)`` - shows basic/full metrics\n2. ``qs.reports.plots(mode='basic|full\", ...)`` - shows basic/full plots\n3. ``qs.reports.basic(...)`` - shows basic metrics and plots\n4. ``qs.reports.full(...)`` - shows full metrics and plots\n5. ``qs.reports.html(...)`` - generates a complete report as html\n\nLet' create an html tearsheet\n\n.. code:: python\n\n    (benchmark can be a pandas Series or ticker)\n    qs.reports.html(stock, \"SPY\")\n\nOutput will generate something like this:\n\n.. image:: https://raw.githubusercontent.com/ranaroussi/quantstats/dev/docs/report.jpg\n    :alt: HTML tearsheet\n\n(`view original html file <https://rawcdn.githack.com/ranaroussi/quantstats/bd0e70bd284798a58c569363bc7e1c3c8c6e3fd9/docs/tearsheet.html>`_)\n\n\nTo view a complete list of available methods, run\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    [f for f in dir(qs.stats) if f[0] != '_']\n\n\n.. code:: text\n\n\t['avg_loss',\n\t 'avg_return',\n\t 'avg_win',\n\t 'best',\n\t 'cagr',\n\t 'calmar',\n\t 'common_sense_ratio',\n\t 'comp',\n\t 'compare',\n\t 'compsum',\n\t 'conditional_value_at_risk',\n\t 'consecutive_losses',\n\t 'consecutive_wins',\n\t 'cpc_index',\n\t 'cvar',\n\t 'drawdown_details',\n\t 'expected_return',\n\t 'expected_shortfall',\n\t 'exposure',\n\t 'gain_to_pain_ratio',\n\t 'geometric_mean',\n\t 'ghpr',\n\t 'greeks',\n\t 'implied_volatility',\n\t 'information_ratio',\n\t 'kelly_criterion',\n\t 'kurtosis',\n\t 'max_drawdown',\n\t 'monthly_returns',\n\t 'outlier_loss_ratio',\n\t 'outlier_win_ratio',\n\t 'outliers',\n\t 'payoff_ratio',\n\t 'profit_factor',\n\t 'profit_ratio',\n\t 'r2',\n\t 'r_squared',\n\t 'rar',\n\t 'recovery_factor',\n\t 'remove_outliers',\n\t 'risk_of_ruin',\n\t 'risk_return_ratio',\n\t 'rolling_greeks',\n\t 'ror',\n\t 'sharpe',\n\t 'skew',\n\t 'sortino',\n\t 'tail_ratio',\n\t 'to_drawdown_series',\n\t 'ulcer_index',\n\t 'ulcer_performance_index',\n\t 'upi',\n\t 'utils',\n\t 'value_at_risk',\n\t 'var',\n\t 'volatility',\n\t 'win_loss_ratio',\n\t 'win_rate',\n\t 'worst']\n\n.. code:: python\n\n    [f for f in dir(qs.plots) if f[0] != '_']\n\n.. code:: text\n\n\t['daily_returns',\n\t 'distribution',\n\t 'drawdown',\n\t 'drawdowns_periods',\n\t 'earnings',\n\t 'histogram',\n\t 'log_returns',\n\t 'monthly_heatmap',\n\t 'returns',\n\t 'rolling_beta',\n\t 'rolling_sharpe',\n\t 'rolling_sortino',\n\t 'rolling_volatility',\n\t 'snapshot',\n\t 'yearly_returns']\n\n\n**\\*\\*\\* Full documenttion coming soon \\*\\*\\***\n\nIn the meantime, you can get insights as to optional parameters for each method, by using Python's ``help`` method:\n\n.. code:: python\n\n    help(qs.stats.conditional_value_at_risk)\n\n.. code:: text\n\n\tHelp on function conditional_value_at_risk in module quantstats.stats:\n\n\tconditional_value_at_risk(returns, sigma=1, confidence=0.99)\n\t    calculats the conditional daily value-at-risk (aka expected shortfall)\n\t    quantifies the amount of tail risk an investment\n\n\nInstallation\n------------\n\nInstall using ``pip``:\n\n.. code:: bash\n\n    $ pip install quantstats --upgrade --no-cache-dir\n\n\nInstall using ``conda``:\n\n.. code:: bash\n\n    $ conda install -c ranaroussi quantstats\n\n\nRequirements\n------------\n\n* `Python <https://www.python.org>`_ >= 3.5+\n* `pandas <https://github.com/pydata/pandas>`_ (tested to work with >=0.24.0)\n* `numpy <http://www.numpy.org>`_ >= 1.15.0\n* `scipy <https://www.scipy.org>`_ >= 1.2.0\n* `matplotlib <https://matplotlib.org>`_ >= 3.0.0\n* `seaborn <https://seaborn.pydata.org>`_ >= 0.9.0\n* `tabulate <https://bitbucket.org/astanin/python-tabulate>`_ >= 0.8.0\n* `yfinance <https://github.com/ranaroussi/yfinance>`_ >= 0.1.38\n* `plotly <https://plot.ly/>`_ >= 3.4.1 (optional, for using ``plots.to_plotly()``)\n\nQuestions?\n----------\n\nThis is a new library... If you find a bug, please\n`open an issue <https://github.com/ranaroussi/quantstats/issues>`_\nin this repository.\n\nIf you'd like to contribute, a great place to look is the\n`issues marked with help-wanted <https://github.com/ranaroussi/quantstats/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22>`_.\n\n\nKnown Issues\n------------\n\nFor some reason, I couldn't find a way to tell seaborn not to return the\nmonthly returns heatmap when instructed to save - so even if you save the plot (by passing ``savefig={...}``) it will still show the plot.\n\n\nLegal Stuff\n------------\n\n**QuantStats** is distributed under the **Apache Software License**. See the `LICENSE.txt <./LICENSE.txt>`_ file in the release for details.\n\n\nP.S.\n------------\n\nPlease drop me a note with any feedback you have.\n\n**Ran Aroussi**",
            "description_content_type": "",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/ranaroussi/quantstats",
            "keywords": "quant algotrading algorithmic-trading quantitative-trading quantitative-analysis algo-trading visualization plotting",
            "license": "Apache Software License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "quant-trading-quantstats",
            "package_url": "https://pypi.org/project/quant-trading-quantstats/",
            "platform": "any",
            "project_url": "https://pypi.org/project/quant-trading-quantstats/",
            "project_urls": {
                "Homepage": "https://github.com/ranaroussi/quantstats"
            },
            "release_url": "https://pypi.org/project/quant-trading-quantstats/0.0.23/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Portfolio analytics for quants",
            "version": "0.0.23",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13318755,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "8eb5ee56c311cf3bb4ff53d7959ac725",
                    "sha256": "786f0dc3e2b38c710f231e54e25af0e41a8b3920e7b117ff05bc883e52ff89bd"
                },
                "downloads": -1,
                "filename": "quant-trading-quantstats-0.0.23.tar.gz",
                "has_sig": false,
                "md5_digest": "8eb5ee56c311cf3bb4ff53d7959ac725",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 31270,
                "upload_time": "2022-03-28T05:40:57",
                "upload_time_iso_8601": "2022-03-28T05:40:57.523260Z",
                "url": "https://files.pythonhosted.org/packages/4d/7c/32ddeef612d6719aea7a5294ca679a116c656b63328d4edb2caa14ff341d/quant-trading-quantstats-0.0.23.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}