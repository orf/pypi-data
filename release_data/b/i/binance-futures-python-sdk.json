{
    "1.7": {
        "info": {
            "author": "",
            "author_email": "",
            "bugtrack_url": null,
            "classifiers": [
                "Intended Audience :: Developers",
                "Intended Audience :: Financial and Insurance Industry",
                "License :: OSI Approved :: MIT License",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# Binance Public API Connector Python\n[![Python 3.6](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis is a lightweight library that works as a connector to [Binance Futures public API](https://binance-docs.github.io/apidocs/futures/en/)\n\n- Supported APIs:\n    - USDT-M Futures `/fapi/*`\n    - COIN-M Delivery `/dapi/*`\n    - Futures/Delivery Websocket Market Stream\n    - Futures/Delivery User Data Stream\n- Inclusion of examples\n- Customizable base URL, request timeout\n- Response metadata can be displayed\n\n## Installation\n\n```bash\npip install -i https://test.pypi.org/simple/ binance-futures-python-sdk\n```\n\n## RESTful APIs\n\nUsage examples:\n```python\nfrom binance.futures import Futures \n\nclient = Futures()\nprint(client.time())\n\nclient = Futures(key='<api_key>', secret='<api_secret>')\n\n# Get account information\nprint(client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 59808\n}\n\nresponse = client.new_order(**params)\nprint(response)\n```\nPlease find `examples` folder to check for more endpoints.\n\n### Base URL\n\nFor USDT-M Futures, if `base_url` is not provided, it defaults to `fapi.binance.com`.<br/>\nFor COIN-M Delivery, if `base_url` is not provided, it defaults to `dapi.binance.com`.<br/>\nIt's recommended to pass in the `base_url` parameter, even in production as Binance provides alternative URLs\n\n### Optional parameters\n\nPEP8 suggests _lowercase with words separated by underscores_, but for this connector,\nthe methods' optional parameters should follow their exact naming as in the API documentation.\n\n```python\n# Recognised parameter name\nresponse = client.query_order('BTCUSDT', orderListId=1)\n\n# Unrecognised parameter name\nresponse = client.query_order('BTCUSDT', order_list_id=1)\n```\n\n### RecvWindow parameter\n\nAdditional parameter `recvWindow` is available for endpoints requiring signature.<br/>\nIt defaults to `5000` (milliseconds) and can be any value lower than `60000`(milliseconds).\nAnything beyond the limit will result in an error response from Binance server.\n\n```python\nfrom binance.futures import Futures as Client\n\nclient = Client(key, secret)\nresponse = client.query_order('BTCUSDT', orderId=11, recvWindow=10000)\n```\n\n### Timeout\n\n`timeout` is available to be assigned with the number of seconds you find most appropriate to wait for a server response.<br/>\nPlease remember the value as it won't be shown in error message _no bytes have been received on the underlying socket for timeout seconds_.<br/>\nBy default, `timeout` is None. Hence, requests do not time out.\n\n```python\nfrom binance.futures import Futures as Client\n\nclient= Client(timeout=1)\n```\n\n### Response Metadata\n\nThe Binance API server provides weight usages in the headers of each response.\nYou can display them by initializing the client with `show_limit_usage=True`:\n\n```python\nfrom binance.futures import Futures as Client\n\nclient = Client(show_limit_usage=True)\nprint(client.time())\n```\nreturns:\n\n```python\n{'data': {'serverTime': 1587990847650}, 'limit_usage': {'x-mbx-used-weight': '31', 'x-mbx-used-weight-1m': '31'}}\n```\nYou can also display full response metadata to help in debugging:\n\n```python\nclient = Client(show_header=True)\nprint(client.time())\n```\n\nreturns:\n\n```python\n{'data': {'serverTime': 1587990847650}, 'header': {'Context-Type': 'application/json;charset=utf-8', ...}}\n```\n\nIf `ClientError` is received, it'll display full response meta information.\n\n### Display logs\n\nSetting the log level to `DEBUG` will log the request URL, payload and response text.\n\n### Error\n\nThere are 2 types of error returned from the library:\n- `binance.error.ClientError`\n    - This is thrown when server returns `4XX`, it's an issue from client side.\n    - It has 4 properties:\n        - `status_code` - HTTP status code\n        - `error_code` - Server's error code, e.g. `-1102`\n        - `error_message` - Server's error message, e.g. `Unknown order sent.`\n        - `header` - Full response header. \n- `binance.error.ServerError`\n    - This is thrown when server returns `5XX`, it's an issue from server side.\n\n## Websocket\n\n```python\nfrom binance.websocket.futures.websocket_client import FuturesWebsocketClient as WebsocketClient\n\ndef message_handler(message):\n    print(message)\n\nws_client = WebsocketClient()\nws_client.start()\n\nws_client.mini_ticker(\n    symbol='bnbusdt',\n    id=1,\n    callback=message_handler,\n)\n\n# Combine selected streams\nws_client.instant_subscribe(\n    stream=['bnbusdt@bookTicker', 'ethusdt@bookTicker'],\n    callback=message_handler,\n)\n\nws_client.stop()\n```\nMore websocket examples are available in the `examples` folder\n\n### Heartbeat\n\nOnce connected, the websocket server sends a ping frame every 3 minutes and requires a response pong frame back within\na 10 minutes period. This package handles the pong responses automatically.\n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://git.toolsfdg.net/andrea-c/binance-futures-python-sdk",
            "keywords": "Binance,Public API",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "binance-futures-python-sdk",
            "package_url": "https://pypi.org/project/binance-futures-python-sdk/",
            "platform": "",
            "project_url": "https://pypi.org/project/binance-futures-python-sdk/",
            "project_urls": {
                "Homepage": "https://git.toolsfdg.net/andrea-c/binance-futures-python-sdk"
            },
            "release_url": "https://pypi.org/project/binance-futures-python-sdk/1.7/",
            "requires_dist": [
                "autobahn (==21.2.1)",
                "Twisted (==21.2.0)",
                "requests (==2.25.1)",
                "pyOpenSSL (==19.0.0)",
                "service-identity (==21.1.0)"
            ],
            "requires_python": ">=3.6",
            "summary": "This is a lightweight library that works as a connector to Binance Futures public API.",
            "version": "1.7",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12088827,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6ecb3fa6aeffd89d93f00bb38caead94",
                    "sha256": "3c0bb27400ecd24afc74021aef0290f287a15516fdb774b89fcc986296d330b5"
                },
                "downloads": -1,
                "filename": "binance_futures_python_sdk-1.7-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6ecb3fa6aeffd89d93f00bb38caead94",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 34271,
                "upload_time": "2021-11-22T05:50:05",
                "upload_time_iso_8601": "2021-11-22T05:50:05.833110Z",
                "url": "https://files.pythonhosted.org/packages/3b/aa/72f1b12e723a7e1edf411006c0455e0f465eaf9b99c012eaee7e0e2706a8/binance_futures_python_sdk-1.7-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "39e923d27446266fa26e1fe540f780be",
                    "sha256": "187f216c8d4cb74eebadc27022f86fb9640b91fc5c89d6af2a4dd650bc7f7330"
                },
                "downloads": -1,
                "filename": "binance-futures-python-sdk-1.7.tar.gz",
                "has_sig": false,
                "md5_digest": "39e923d27446266fa26e1fe540f780be",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 29337,
                "upload_time": "2021-11-22T05:50:07",
                "upload_time_iso_8601": "2021-11-22T05:50:07.731801Z",
                "url": "https://files.pythonhosted.org/packages/34/c9/539687f4adb760eac51de7af6e400eb42f10bc33851d9c5e9877ed93a816/binance-futures-python-sdk-1.7.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}