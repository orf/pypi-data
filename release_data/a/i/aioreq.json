{
    "1.0.0b0": {
        "info": {
            "author": null,
            "author_email": null,
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 2 - Pre-Alpha",
                "Framework :: AsyncIO",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: Implementation :: CPython",
                "Topic :: Internet :: WWW/HTTP"
            ],
            "description": "**Aioreq** is a Python low-level asynchronous HTTP client library. It is built on top of TCP sockets and implements the HTTP protocol entirely on his own.\n\n[mygit]: https://github.com/karosis88/aioreq\n[documentation]: https://karosis88.github.io/aioreq/\n\n---\n\n## Documentation\n[Click here][documentation]\n\n## Install\n``` shell\n$ pip install aioreq\n```\n\n## Usage\n### Basic usage\n---\n``` python\n>>> import aioreq\n>>> import asyncio\n>>>\n>>> cl = aioreq.Client()\n>>>\n>>> resp = asyncio.run(\n>>>\tcl.get('https://www.google.com')\n>>>\t)\n>>> resp\n<Response 200 OK>\n>>> resp.status\n200\n>>> resp.status_message\n'OK'\n>>> resp.request\n<Request GET https://www.google.com>\n>>> headers = resp.headers # dict\n>>> body = resp.body # bytes object\n```\n\nAlternatively, the best practice is to use a **Context manager**.\n``` python\nimport aioreq\nimport asyncio\n\nasync def main():\n        async with aioreq.Client() as cl:\n                await cl.get('https://google.com')\n```\n### More advanced usage\n---\n\nThis code will asynchronously send 100 get requests to [`google.com`](https://www.google.com), which is much faster than synchronous libraries.\n\n``` python\n>>> import asyncio\n>>> import aioreq\n>>>\n>>> async def main():\n>>>    async with aioreq.http.Client() as cl:\n>>>        tasks = []\n>>>        for j in range(100):\n>>>            tasks.append(\n>>>\t\t            asyncio.create_task(\n>>>\t\t  \t        cl.get('https://www.google.com/', )\n>>>                             )\n>>> \t\t\t    )\n>>>        await asyncio.gather(*tasks)\n>>>\n>>> asyncio.run(main())\n```\n\n### Streams\n---\nWe occasionally use the HTTP protocol to download videos, photos, and possibly files. When downloading very large files, Stream must be used instead of the default Client. When a client downloads videos or files, the server responds with all information including headers, status code, status message, and full body, which can be very large. As a result, we cannot store it in RAM. Stream only returns a portion of the body per iteration, allowing us to write it to disk, then receive another portion and solve the ram overflow problem.\n\nThere is some fundamental Stream usage.\n``` python\n>>> import aioreq\n>>> import asyncio\n>>> \n>>> async def main():\n>>>        local_file = open('test', 'wb')\n>>>        async with aioreq.StreamClient() as cl:\n>>>                # This code iterates through the message and yields each received chunk separately.\n>>>                async for chunk in cl.get('https://pathtoverybigfile.aioreq'):\n>>>                        local_file.write(chunk)\n\n\n```\n\n## Benchmarks\n**Aioreq** is a very fast library, and we compared it to other Python libraries to demonstrate its speed.\n\n\n\n\nI used these libraries to compare speed.\n* [httpx](https://github.com/encode/httpx)\n* [requests](https://github.com/psf/requests)\n---\n### Benchmark run\n\nFirst, clone aioreq [repository][mygit].\n\nThen...\n\n```shell\n$ cd aioreq\n$ python -m venv venv\n$ source ./venv/bin/activate\n$ pip install '.[benchmarks]'\n$ cd benchmarks\n$ python run_tests_functions.py\n```\n---\n### Benchmark results\n\nThis is the **average** execution time of each library for **200 asynchronous requests** where responses was received without **chunked** transfer encoding.\n<br/>\n\n\nBenchmark settings.\n\n* **Url** - https://www.github.com\n* **Requests count** - 200 for async and 5 for sync libs\n\n#### With `Content-Length`\n``` shell\n$ cd becnhmarks\n$ python run_tests_functions.py\n========================\nBenchmark settings\n        Async lib test requests count : 200\n        Sync lib test requests count  : 5\n=======================\nFunction test for aioreq completed. Total time: 1.2442591340004583\nReceived statuses\n        {301: 200}\nFunction test for requests completed. Total time: 1.6835168350007734\nReceived statuses\n        {200: 5}\nFunction test for httpx completed. Total time: 1.691718664000291\nReceived statuses\n        {301: 200}\n```\n\n#### With `Transfer-Encoding: Chunked`\nThis is the **average** execution time of each library for **100 asynchronous requests** where responses was received with **chunked** transfer encoding.\n<br/>\n\nBenchmark settings.\n\n* **Url** - https://www.youtube.com\n* **Requests count** - 100 for async and 5 for sync libs\n\n```shell\n$ cd benchmarks\n$ python run_tests_functions.py\n========================\nBenchmark settings\n        Async lib test requests count : 100\n        Sync lib test requests count  : 5\n=======================\nFunction test for aioreq completed. Total time: 3.837283965000097\nReceived statuses\n        {200: 100}\nFunction test for requests completed. Total time: 6.098562907998712\nReceived statuses\n        {200: 5}\nFunction test for httpx completed. Total time: 6.467480723000335\nReceived statuses\n        {200: 100}\n```\n\nAs you can see, the synchronous code lags far behind when we make many requests at the same time.<br />\n\n## Supported Features\n**Aioreq** support basic features to work with **HTTP/1.1**.<br />More functionality will be avaliable in future realeases.<br />\nThis is the latest version features.\n* Keep-Alive (Persistent Connections)\n* Automatic accepting and decoding responses. Using `Accept-Encoding` header\n* HTTPS support, TLS/SSL Verification using [certifi](https://github.com/certifi/python-certifi) library\n* Request Timeouts\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": null,
            "license": null,
            "maintainer": null,
            "maintainer_email": null,
            "name": "aioreq",
            "package_url": "https://pypi.org/project/aioreq/",
            "platform": null,
            "project_url": "https://pypi.org/project/aioreq/",
            "project_urls": {
                "Homepage": "https://github.com/karosis88/aioerq",
                "Source": "https://github.com/karosis88/aioreq"
            },
            "release_url": "https://pypi.org/project/aioreq/1.0.0b0/",
            "requires_dist": [
                "certifi",
                "dnspython",
                "aiohttp; extra == 'benchmark'",
                "httpx; extra == 'benchmark'",
                "requests; extra == 'benchmark'",
                "fastapi; extra == 'tests'",
                "pytest; extra == 'tests'",
                "pytest-asyncio; extra == 'tests'",
                "uvicorn; extra == 'tests'",
                "uvloop; extra == 'uvloop'"
            ],
            "requires_python": ">=3.10",
            "summary": "Asynchronous HTTP library.",
            "version": "1.0.0b0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15928488,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "11f3f8d8514c654f6b19bd97033c88cf",
                    "sha256": "44672947b3278ca8b744ffef3e11fa46f871aff4230f22fd7d0383e683d50925"
                },
                "downloads": -1,
                "filename": "aioreq-1.0.0b0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "11f3f8d8514c654f6b19bd97033c88cf",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10",
                "size": 24315,
                "upload_time": "2022-11-29T13:54:21",
                "upload_time_iso_8601": "2022-11-29T13:54:21.120194Z",
                "url": "https://files.pythonhosted.org/packages/3b/24/a9fab28cf274e56cadd7ea74f987299f2fc0f3e7f020323119a2122c730f/aioreq-1.0.0b0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "baf34155d45724690fd0d0cf9eebf5e3",
                    "sha256": "ee55848db7dbaa5a53d670ddf329201437b294f5c11ec5ff978784490efe461b"
                },
                "downloads": -1,
                "filename": "aioreq-1.0.0b0.tar.gz",
                "has_sig": false,
                "md5_digest": "baf34155d45724690fd0d0cf9eebf5e3",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10",
                "size": 18003,
                "upload_time": "2022-11-29T13:54:23",
                "upload_time_iso_8601": "2022-11-29T13:54:23.974841Z",
                "url": "https://files.pythonhosted.org/packages/89/44/fc7cb23764e3fb6d6463b9680658aa794e413703add06918828111f3c91a/aioreq-1.0.0b0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}