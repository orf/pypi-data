{
    "1.1.2": {
        "info": {
            "author": "zhuofalin",
            "author_email": "1822643111@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/zhuofalin/cnoan.git",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cnoan",
            "package_url": "https://pypi.org/project/cnoan/",
            "platform": null,
            "project_url": "https://pypi.org/project/cnoan/",
            "project_urls": {
                "Homepage": "https://github.com/zhuofalin/cnoan.git"
            },
            "release_url": "https://pypi.org/project/cnoan/1.1.2/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Convert Chinese numerals and Arabic numerals.",
            "version": "1.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13779398,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "b3712eb9fe9912a74620e72dee9d5652",
                    "sha256": "4d98fe5b28190931d368d16baec925a36e390cf922ba0c847866e4f9e27df234"
                },
                "downloads": -1,
                "filename": "cnoan-1.1.2-py3.9.egg",
                "has_sig": false,
                "md5_digest": "b3712eb9fe9912a74620e72dee9d5652",
                "packagetype": "bdist_egg",
                "python_version": "1.1.2",
                "requires_python": ">=3.6",
                "size": 5596,
                "upload_time": "2022-05-11T05:48:32",
                "upload_time_iso_8601": "2022-05-11T05:48:32.306699Z",
                "url": "https://files.pythonhosted.org/packages/3f/d1/37348a402bf71346caa347837a2f92acaa499784bccd1eca33444d60854b/cnoan-1.1.2-py3.9.egg",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "1.1.8": {
        "info": {
            "author": "zhuofalin",
            "author_email": "1822643111@qq.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8"
            ],
            "description": "## Chinese numerals and Arabic numerals conversion\r\n\r\nThere should be emojis here (\u25cf'\u25e1'\u25cf)\r\n\r\nProject Description and Description [English Version](readme.md)  \r\n\u5de5\u7a0b\u8bf4\u660e\u4e0e\u63cf\u8ff0[\u4e2d\u6587\u7248\u672c](readme_cn.md)\r\n\r\n\u2660 **`cnoan`** is a toolkit to quickly convert `Chinese numbers` and `Arabic numbers`! in  \r\n  **`cn`** refers to Chinese numerals  \r\n  **`an`** refers specifically to Arabic numerals  \r\n  **`o`** stands for reciprocal  \r\n\r\n\u2665 The Chinese `\u4e92` in the interchange is difficult to translate and shorthand /(\u3112o\u3112)/~~\r\nIf the first letter of `mutual` is used, then the name of this project will feel like \ud83d\udc0e people  \r\n(spread bad speech \ud83d\udd2a, close the small black house\u274e);   \r\nRoughly, it means mutual rotation. The two are connected through __c__, which can only reflect the meaning of one-way or one-path \ud83d\udc49;   \r\nTherefore, `o` is used to connect in the middle, which can reflect the concept of `\u00b7mutual\u00b7` `\u00b7ring\u00b7` to a certain extent;  \r\n\r\n\u2666 This project is based on the ideas and guidance of [cn2an](https://github.com/Ailln/cn2an.git) to update the functions of the problems encountered or existing;\r\nWelcome to star and follow, everyone to maintain and improve together;   \r\n\r\n\u2663 Hey, it's great *\u2605,\u00b0*:.\u2606(\uffe3\u25bd\uffe3)/$:*.\u00b0\u2605* .  \r\n\r\n-----\r\n\r\n## Directory Structure\r\n````\r\n   Catalog Name                 Function and Description                             What's New\r\n|--------------------------------------------------------------------------------------------------------\r\n|---an2cn.py         Convert Arabic numerals to Chinese numerals               Newly defined class names\r\n|--------------------------------------------------------------------------------------------------------\r\n|---base.py          This is the base class of the project,                             None\r\n                     which contains the base class of ConvertBase \r\n|--------------------------------------------------------------------------------------------------------\r\n|---cn2an.py         Convert Chinese numbers to Arabic numbers                 Newly defined class names\r\n|--------------------------------------------------------------------------------------------------------\r\n|---config.yaml      The configuration of the project,                         Add the abnormal field\r\n                     mainly the definition of the matching rules \r\n|--------------------------------------------------------------------------------------------------------\r\n|---setup.py         Project packaging and publishing                          Add my information\r\n|--------------------------------------------------------------------------------------------------------\r\n|---translate.py     Convert the content in the sentence                       Modified regular expression\r\n                     that determines the conversion\r\n                     With parameters\r\n|--------------------------------------------------------------------------------------------------------\r\n|---utils.py         Definition of basic functions in utils.py                          None\r\n|--------------------------------------------------------------------------------------------------------\r\n|---requirement.txt  The package required by the project                                None\r\n|--------------------------------------------------------------------------------------------------------\r\n````\r\n------\r\n\r\n## Project Function\r\n### basic function\r\n#### 1.1 `Chinese numbers` => `Arabic numbers`\r\n\r\n- Support `Chinese numbers` => `Arabic numbers`;\r\n- Support `Uppercase Chinese numbers` => `Arabic numbers`;\r\n- Support `Chinese numbers and Arabic numbers` => `Arabic numbers`;\r\n\r\n#### 1.2 `Arabic numbers` => `Chinese numbers`\r\n\r\n- Support `Arabic numbers` => `Chinese numbers`;\r\n- Support `Arabic numbers` => `Uppercase Chinese numbers`;\r\n- Support `Arabic numerals` => `Uppercase RMB`;\r\n\r\n#### 1.3 Sentence Transformation\r\n\r\n- Support `Chinese numbers` => `Arabic numbers`;\r\n    - support `date`;\r\n    - support `score`;\r\n    - support `percent`;\r\n    - support `Celsius`;\r\n\r\n- Support `Arabic numbers` => `Chinese numbers`;\r\n    - support `date`;\r\n    - support `score`;\r\n    - support `percent`;\r\n    - support `Celsius`;\r\n\r\n#### 1.4 Others\r\n\r\n- support `decimal`;\r\n- support `negative numbers`;\r\n- Support for `HTTP API`.\r\n\r\n### Function updates & Fixes\r\n- \ud83c\udf88 Redefine the field position to be translated (translated) (\u25cf'\u25e1'\u25cf)\r\n  The original project (transform+cn2en) will have the following situations\r\n    ````\r\n    \u4e03\u4e0a\u516b\u4e0b --> 7\u4e0a8\u4e0b\r\n    \u4e24\u4eba    --> 2\u4eba\r\n    \u4e00\u65e6    --> 1\u65e6\r\n    ````\r\n  In fact, in practical applications, we do not want it to be converted. Therefore, the premise of conversion is redefined in this project\r\n   ```python\r\n    'Original': \r\n        self.cn_pattern = f\"\u8d1f?([\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u62fe\u767e\u4f70\u5343\u4edf\u4e07\u4ebf]+\u70b9)?[\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u62fe\u767e\u4f70\u5343\u4edf\u4e07\u4ebf]+\"\r\n    ```\r\n  ```python\r\n  'Now':\r\n        self.cn_pattern = f\"\u8d1f?-?\u6b63?\\+?([\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341][\\s\\t]*[\u5341\u62fe\u767e\u4f70\u5343\u4edf\u4e07\u4ebf]+)(\u70b9[\u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341]+)?\"\r\n  ```\r\n  Of course, I can't guarantee that this rule can help you solve the corresponding business needs. Therefore, you can redefine it in __self.cn_pattern__ of [translate](translate.py).\r\n\r\n- \ud83c\udf88 Introduced isolation conversion and regression of abnormal words o(*\uffe3\u25bd\uffe3*)\u30d6\r\nWhen the above redefinition criteria are defined, situations such as `Wanning`, `In case`, and `seven up and eight down` can be avoided, but it is still necessary to sigh the vastness and profoundness of Chinese  \r\n\r\n![1](https://img1.baidu.com/it/u=1108671039,3873010749&fm=253&fmt=auto&app=138&f=GIF?w=254&h=245)\r\n````python\r\n'E.g':\r\n    '\u4e00\u4e94\u4e00\u5341'\r\n...\r\n````\r\nIf the word is thrown in directly, the following results will be obtained:\r\n````python\r\n:return: '\u4e00\u4e9410'\r\n````\r\nThis doesn't work. In this project, I classify this similar content as `abnormal words`, refer to [abnormal_words in config](config.yaml)\r\n````python\r\n'Thinking':\r\n# encoder\r\n  masks = ['1510', ''] # list[str, str, ...] define abnormal words\r\n  inputs = str('XXXxxx')\r\n  mask_contents = {}\r\n  for index, item in enumerate(masks):\r\n      if item in inputs:\r\n          mask = f'_MASK_{index}_'\r\n          mask_contents[mask] = item\r\n          inputs = inputs.replace(item, mask)\r\n# decoder\r\n  for contents in list(mask_contents.keys()):\r\n      if contents in output:\r\n          output = output.replace(contents, mask_contents[contents])\r\n````\r\n- \ud83c\udf88 Modify a point in the original project\r\nThere is a situation in the original engineering quantity: when `\u4e24`\u3001`\u7518`\uff0c`\u5e7a`, etc. appear in the text, and are not the content to be converted, when the following demo segment is executed,\r\n````python\r\n  inputs = str('XXXXxxx')\r\n  inputs = inputs.replace(\"twenty\", \"twenty\").replace(\"half\", \"0.5\").replace(\"two\", \"2\")\r\n````\r\nThese words will be converted in advance, so this project will do the corresponding conversion after regularization judgment.\r\n\r\n- \ud83c\udf88 Do a little of detail\r\nWe often define an unwritten rule in our daily tasks and writing papers:\r\n10,000 has to be written in the style of 10,000, so this project is also 'forced' to join this rule \ud83d\ude14  \r\n\r\nAfter the above series of operations, the final effect is as follows:\r\n```python\r\nfrom cnoan.translate import Translate\r\ninputs = '\u8fd9\u4eba\u574f\u6ef4\u5f88\uff0c\u738b\u5c3c\u739b\u4e00\u4e94\u4e00\u5341\u7684\u6536\u5165\u4e3a\u4e00\u4e07\u5143, \u800c\u4e24\u4eba\u5374\u544a\u8bc9\u6211\u662f\u4e8c\u5343\u5143'\r\nmode = 'cn2an'\r\ntans = Translate()\r\nprint(tans.convert(\"\u8fd9\u4eba\u574f\u6ef4\u5f88\uff0c\u738b\u5c3c\u739b\u4e00\u4e94\u4e00\u5341\u7684\u6536\u5165\u4e3a\u4e00\u4e07\u5143, \u800c\u4e24\u4eba\u5374\u544a\u8bc9\u6211\u662f\u4e8c\u5343\u5143\", \"cn2an\"))\r\n# \u8fd9\u4eba\u574f\u6ef4\u5f88\uff0c\u738b\u5c3c\u739b\u4e00\u4e94\u4e00\u5341\u7684\u6536\u5165\u4e3a10,000\u5143, \u800c\u4e24\u4eba\u5374\u544a\u8bc9\u6211\u662f2,000\u5143\r\n```\r\n----\r\n## Project Installation & Usage\r\n### Install\r\n+ Method 1:\r\n    ```\r\n  pip install cnocn\r\n  ```\r\n+ Method 2:\r\n ```\r\ngit clone https://github.com/zhuofalin/cnoan.git\r\ncd cnoan\r\npython setup.py install\r\n```\r\n+ Method 3:\r\n  ```\r\n  git clone https://github.com/zhuofalin/cnoan.git\r\n  copy cnoan to your project\r\n  ```\r\n### Usage\r\n```python\r\n# import package which you need\r\nimport cnoan\r\n\r\n# View the current version number\r\nprint(cnoan.__version__)\r\n# 0.5.16  #  will be different\r\n```\r\n\r\n### 3.1 `Chinese numbers` => `Arabic numerals`\r\n\r\n> The maximum support is `10**16`, that is, `Terabillion`  \r\n> and the minimum support is `10**-16`.\r\n\r\n```python\r\nimport cnoan\r\n\r\noutput = cnoan.cn2an(\"\u4e00\u767e\u4e8c\u5341\u4e09\")\r\n# or\r\noutput = cnoan.cn2an(\"\u4e00\u767e\u4e8c\u5341\u4e09\", \"strict\")\r\n# output:\r\n# 123\r\n\r\noutput = cnoan.cn2an(\"\u4e00\u4e8c\u4e09\", \"normal\")\r\n# output:\r\n# 123\r\n\r\noutput = cnoan.cn2an(\"1\u767e23\", \"smart\")\r\n# output:\r\n# 123\r\n\r\n# The above three modes all support negative numbers\r\noutput = cnoan.cn2an(\"\u8d1f\u4e00\u767e\u4e8c\u5341\u4e09\", \"strict\")\r\n# output:\r\n# -123\r\n\r\n# All three modes above support decimals\r\noutput = cnoan.cn2an(\"\u4e00\u70b9\u4e8c\u4e09\", \"strict\")\r\n# output:\r\n# 1.23\r\n```\r\n\r\n### 3.2 `Arabic numerals` => `Chinese numbers`\r\n\r\n> The maximum support is `10**16`, that is, `Terabillion`  \r\n> and the minimum support is `10**-16`.\r\n\r\n```python\r\nimport cnoan\r\n\r\noutput = cnoan.an2cn(\"123\")\r\n# or\r\noutput = cnoan.an2cn(\"123\", \"lower\")\r\n# output:\r\n# \u4e00\u767e\u4e8c\u5341\u4e09\r\n\r\noutput = cnoan.an2cn(\"123\", \"upper\")\r\n# output:\r\n# \u58f9\u4f70\u8d30\u62fe\u53c1\r\n\r\noutput = cnoan.an2cn(\"123\", \"rmb\")\r\n# output:\r\n# \u58f9\u4f70\u8d30\u62fe\u53c1\u5143\u6574\r\n\r\noutput = cnoan.an2cn(\"-123\", \"lower\")\r\n# output:\r\n# \u8d1f\u4e00\u767e\u4e8c\u5341\u4e09\r\n\r\noutput = cnoan.an2cn(\"1.23\", \"low\")\r\n# output:\r\n# \u4e00\u70b9\u4e8c\u4e09\r\n```\r\n\r\n### 3.3 sentence transformation\r\n\r\n> \u26a0\ufe0f\uff1aExperimental feature that may cause undesired conversions.\r\n\r\n```python\r\nimport cnoan\r\n\r\noutput = cnoan.translate(\"\u5c0f\u738b\u6361\u4e86\u4e00\u767e\u5757\u94b1\")\r\n# or\r\noutput = cnoan.translate(\"\u5c0f\u738b\u6361\u4e86\u4e00\u767e\u5757\u94b1\", \"cn2an\")\r\n# output:\r\n# \u5c0f\u738b\u6361\u4e86100\u5757\u94b1\r\n\r\noutput = cnoan.translate(\"\u5c0f\u738b\u6361\u4e86100\u5757\u94b1\", \"an2cn\")\r\n# output:\r\n# \u5c0f\u738b\u6361\u4e86\u4e00\u767e\u5757\u94b1\r\n\r\n\r\n## data\r\noutput = cnoan.translate(\"\u5c0f\u738b\u7684\u751f\u65e5\u662f\u4e8c\u96f6\u96f6\u4e00\u5e74\u4e09\u6708\u56db\u65e5\", \"cn2an\")\r\n# output:\r\n# \u5c0f\u738b\u7684\u751f\u65e5\u662f2001\u5e743\u67084\u65e5\r\n\r\noutput = cnoan.translate(\"\u5c0f\u738b\u7684\u751f\u65e5\u662f2001\u5e743\u67084\u65e5\", \"an2cn\")\r\n# output:\r\n# \u5c0f\u738b\u7684\u751f\u65e5\u662f\u4e8c\u96f6\u96f6\u4e00\u5e74\u4e09\u6708\u56db\u65e5\r\n\r\n## support score\r\noutput = cnoan.translate(\"\u629b\u51fa\u53bb\u7684\u786c\u5e01\u4e3a\u6b63\u9762\u7684\u6982\u7387\u662f\u4e8c\u5206\u4e4b\u4e00\", \"cn2an\")\r\n# output:\r\n# \u629b\u51fa\u53bb\u7684\u786c\u5e01\u4e3a\u6b63\u9762\u7684\u6982\u7387\u662f1/2\r\n\r\noutput = cnoan.translate(\"\u629b\u51fa\u53bb\u7684\u786c\u5e01\u4e3a\u6b63\u9762\u7684\u6982\u7387\u662f1/2\", \"an2cn\")\r\n# output:\r\n# \u629b\u51fa\u53bb\u7684\u786c\u5e01\u4e3a\u6b63\u9762\u7684\u6982\u7387\u662f\u4e8c\u5206\u4e4b\u4e00\r\n\r\n## support %\r\n## support \u2103\r\n```\r\n-----------\r\n## License\r\n\r\n[![](https://award.dovolopor.com?lt=License&rt=MIT&rbc=green)](./LICENSE)\r\n[![](https://award.dovolopor.com?lt=Ailln's&rt=idea&lbc=lightgray&rbc=red&ltc=red)](https://github.com/Ailln/award)\r\n\r\n-----\r\n##  communicate\r\n\r\nIf you have any questions, you can communicate with me through [email] (1822643111@qq.com), and I will reply as soon as possible.\r\n\r\n-----\r\n## Thanks\r\n\r\n- [Thunder Bouble](https://github.com/sfyc23): A lot of useful feedback, including some bugs and new features;\r\n- [Damon Yu](https://github.com/20071313): Added support for full-width numbers and full-width symbols.\r\n\r\n##  Reference\r\n\r\n- [cn2an core code analysis](https://www.v2ai.cn/2020/06/30/python/8-cn2an/)\r\n- [How to publish your own package to pypi](https://www.v2ai.cn/2018/07/30/python/1-pypi/)\r\n- [Small traps in Python](https://www.v2ai.cn/2019/01/01/python/4-python-trap/)\r\n- [Chinese characters to Arabic numerals](https://www.zouyesheng.com/han-number-convert.html)\r\n- [Chinese Text Normalization for Speech Processing](https://github.com/speechio/chinese_text_normalization)\r\n- [The Best Tool of Chinese Number to Digits](https://github.com/Wall-ee/chinese2digits)\r\n- [Microsoft Recognizers Text Overview](https://github.com/microsoft/Recognizers-Text)\r\n- [process: data preprocessing pipeline](https://github.com/Ailln/proces)\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/zhuofalin/cnoan.git",
            "keywords": "",
            "license": "MIT License",
            "maintainer": "",
            "maintainer_email": "",
            "name": "cnoan",
            "package_url": "https://pypi.org/project/cnoan/",
            "platform": null,
            "project_url": "https://pypi.org/project/cnoan/",
            "project_urls": {
                "Homepage": "https://github.com/zhuofalin/cnoan.git"
            },
            "release_url": "https://pypi.org/project/cnoan/1.1.8/",
            "requires_dist": null,
            "requires_python": ">=3.6",
            "summary": "Convert Chinese numerals and Arabic numerals.",
            "version": "1.1.8",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13779398,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "cdbe84c7a835d67855053c06e80f9f29",
                    "sha256": "7a4b633b38bcc66b6012da2393ce66d855cc0c35ed2199ad270c4bd85fbebbe5"
                },
                "downloads": -1,
                "filename": "cnoan-1.1.8-py3.9.egg",
                "has_sig": false,
                "md5_digest": "cdbe84c7a835d67855053c06e80f9f29",
                "packagetype": "bdist_egg",
                "python_version": "1.1.8",
                "requires_python": ">=3.6",
                "size": 5391,
                "upload_time": "2022-05-11T07:19:38",
                "upload_time_iso_8601": "2022-05-11T07:19:38.293648Z",
                "url": "https://files.pythonhosted.org/packages/c2/f6/c9f110b645b9272918874495ccb99ea3f72bd1c9efb3e176b5e361a5ae46/cnoan-1.1.8-py3.9.egg",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}