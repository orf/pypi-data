{
    "7.0.0": {
        "info": {
            "author": "Rich Posert",
            "author_email": "posert@ohsu.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/PlethoraChutney/Appia",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "appia",
            "package_url": "https://pypi.org/project/appia/",
            "platform": "",
            "project_url": "https://pypi.org/project/appia/",
            "project_urls": {
                "Homepage": "https://github.com/PlethoraChutney/Appia"
            },
            "release_url": "https://pypi.org/project/appia/7.0.0/",
            "requires_dist": [
                "Gooey",
                "couchdb",
                "pandas",
                "easygui",
                "slack",
                "plotly",
                "kaleido"
            ],
            "requires_python": ">=3.6",
            "summary": "Chromatography processing made easy",
            "version": "7.0.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16135888,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "d439edf25302d30f9eedfc28c2dfb6d0",
                    "sha256": "dff43c80daa9d17535db30476e37c3c6f713eda6a9f850e62e1a818fef6b29e6"
                },
                "downloads": -1,
                "filename": "appia-7.0.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "d439edf25302d30f9eedfc28c2dfb6d0",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 30861,
                "upload_time": "2022-03-03T01:12:46",
                "upload_time_iso_8601": "2022-03-03T01:12:46.497974Z",
                "url": "https://files.pythonhosted.org/packages/5f/29/057a46b7b3576cae37186cb1162a9757ffcf3a455e2f8c0726e972bee75a/appia-7.0.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "094e73eb8964b3748e1630239fcf50e2",
                    "sha256": "a811394688ffc4ac9a180217c119869ce067f2edfd9bd0447f8358bad93f3a7b"
                },
                "downloads": -1,
                "filename": "appia-7.0.0.tar.gz",
                "has_sig": false,
                "md5_digest": "094e73eb8964b3748e1630239fcf50e2",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 30607,
                "upload_time": "2022-03-03T01:12:48",
                "upload_time_iso_8601": "2022-03-03T01:12:48.344949Z",
                "url": "https://files.pythonhosted.org/packages/ca/13/0ba48d1dbbb724dc8382137c662c950cc2ece980e0efe62d8da19f38cea0/appia-7.0.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "7.0.1": {
        "info": {
            "author": "Rich Posert",
            "author_email": "posert@ohsu.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/PlethoraChutney/Appia",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "appia",
            "package_url": "https://pypi.org/project/appia/",
            "platform": null,
            "project_url": "https://pypi.org/project/appia/",
            "project_urls": {
                "Homepage": "https://github.com/PlethoraChutney/Appia"
            },
            "release_url": "https://pypi.org/project/appia/7.0.1/",
            "requires_dist": [
                "couchdb",
                "pandas",
                "slack",
                "plotly",
                "kaleido"
            ],
            "requires_python": ">=3.6",
            "summary": "Chromatography processing made easy",
            "version": "7.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16135888,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "491254fc31f960ed7d1cd2e9231b0b62",
                    "sha256": "b0131976e92969c46ce40acbcde68ce57a49e3e00a93e5736009d2ae33ba1b29"
                },
                "downloads": -1,
                "filename": "appia-7.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "491254fc31f960ed7d1cd2e9231b0b62",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 30703,
                "upload_time": "2022-03-12T01:19:21",
                "upload_time_iso_8601": "2022-03-12T01:19:21.055709Z",
                "url": "https://files.pythonhosted.org/packages/a5/1b/8cf8b92d145b4fc4ac97baca4a0ae30a3a6f166bb5072b84806ba1941493/appia-7.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "287c33f96467ef80d22385a02f8ec8d6",
                    "sha256": "d5ae65aa00238e769517e34567ff6bcfe72c756b0d4ce88c98ba6db1cc1b946a"
                },
                "downloads": -1,
                "filename": "appia-7.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "287c33f96467ef80d22385a02f8ec8d6",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 30597,
                "upload_time": "2022-03-12T01:19:23",
                "upload_time_iso_8601": "2022-03-12T01:19:23.068889Z",
                "url": "https://files.pythonhosted.org/packages/99/ff/91463e082cc74cd94f7fdfac1c9c21fb080ea1a457daecf17e4d5a60e8d7/appia-7.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "7.1.0": {
        "info": {
            "author": "Rich Posert",
            "author_email": "posert@ohsu.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/PlethoraChutney/Appia",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "appia",
            "package_url": "https://pypi.org/project/appia/",
            "platform": null,
            "project_url": "https://pypi.org/project/appia/",
            "project_urls": {
                "Homepage": "https://github.com/PlethoraChutney/Appia"
            },
            "release_url": "https://pypi.org/project/appia/7.1.0/",
            "requires_dist": [
                "couchdb",
                "pandas",
                "slack",
                "plotly",
                "kaleido"
            ],
            "requires_python": ">=3.6",
            "summary": "Chromatography processing made easy",
            "version": "7.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16135888,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "6a78e295e28ed3871406d316b5b4acf5",
                    "sha256": "bd7e6650b28342d50acdf126da48f95d3fcd2542e830324d59610b2624ade93b"
                },
                "downloads": -1,
                "filename": "appia-7.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "6a78e295e28ed3871406d316b5b4acf5",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 27398,
                "upload_time": "2022-12-14T23:21:07",
                "upload_time_iso_8601": "2022-12-14T23:21:07.604593Z",
                "url": "https://files.pythonhosted.org/packages/89/91/0e7f884d79793304e1bb68eea9ed33c1bd6bdfde3e0ba0343a3aeaa0bb78/appia-7.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "597cfba65086422c898a10468f25f28e",
                    "sha256": "4e21e607685b53c0686daadd037c2ba01ca7d2c94fa955822f68edaa22964420"
                },
                "downloads": -1,
                "filename": "appia-7.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "597cfba65086422c898a10468f25f28e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 27967,
                "upload_time": "2022-12-14T23:21:08",
                "upload_time_iso_8601": "2022-12-14T23:21:08.968905Z",
                "url": "https://files.pythonhosted.org/packages/bd/4d/5f6e6923b6393759dc8eff884982ec5c30690c36ceed2a5d82ed29ced2e4/appia-7.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "7.1.1": {
        "info": {
            "author": "Rich Posert",
            "author_email": "posert@ohsu.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/PlethoraChutney/Appia",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "appia",
            "package_url": "https://pypi.org/project/appia/",
            "platform": null,
            "project_url": "https://pypi.org/project/appia/",
            "project_urls": {
                "Homepage": "https://github.com/PlethoraChutney/Appia"
            },
            "release_url": "https://pypi.org/project/appia/7.1.1/",
            "requires_dist": [
                "couchdb",
                "pandas",
                "slack",
                "plotly",
                "kaleido"
            ],
            "requires_python": ">=3.6",
            "summary": "Chromatography processing made easy",
            "version": "7.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16135888,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "16be449f4c3c71ea88a259eb9311b219",
                    "sha256": "d7e32b82159e10a4afa8218e505d790decccc9d380cdef0f437f572618fb6ea3"
                },
                "downloads": -1,
                "filename": "appia-7.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "16be449f4c3c71ea88a259eb9311b219",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 27454,
                "upload_time": "2022-12-15T19:38:29",
                "upload_time_iso_8601": "2022-12-15T19:38:29.770201Z",
                "url": "https://files.pythonhosted.org/packages/c4/27/e9485a0d4eb4fb471caaab1dce82ae323be5a50ca959866b2fbfd456dff6/appia-7.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "1250c66be5126dafd8c312c1a170fd20",
                    "sha256": "426d75a10c354d0a79e7197c8904b9f8ccc5fc039a72bbadf3723e873149292f"
                },
                "downloads": -1,
                "filename": "appia-7.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "1250c66be5126dafd8c312c1a170fd20",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 28097,
                "upload_time": "2022-12-15T19:38:31",
                "upload_time_iso_8601": "2022-12-15T19:38:31.083265Z",
                "url": "https://files.pythonhosted.org/packages/59/e6/3aac9ad6ab235bc50dc4dd78ae1fc36f558d2127866b10b0581e4db5697a/appia-7.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "7.1.2": {
        "info": {
            "author": "Rich Posert",
            "author_email": "posert@ohsu.edu",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License"
            ],
            "description": "[![DOI](https://zenodo.org/badge/160436725.svg)](https://zenodo.org/badge/latestdoi/160436725)\n\n# Appia - simple chromatography processing\nAppia is a set of scripts to process and view chromatography data from AKTA, Shimadzu, and\nWaters systems. Chromatography data can then be viewed on the easy-to-use and intuitive\nweb interface, built with [plotly dash](https://plotly.com/dash/). Please check out the\n[web demo](https://traces.baconguislab.com/) hosted on heroku!\n\nAdditionally, automatic plots will be prepared for all \ndata using [ggplot](https://ggplot2.tidyverse.org/) in R. Options to copy a manual file for plot tweaking are\navailable.\n\n## Installation\n### Server installation\n1. Install [docker](https://www.docker.com/)\n2. Copy `docker-compose.yml` wherever you want the database to save data\n3. Set the $COUCHDB_USER and $COUCHDB_PASSWORD environment variables (**in your environment!**)\n4. Run `docker-compose up` in the same directory as docker-compose.yml\n5. Open the port from `docker-compose.yml` to allow other instruments to access the web ui\n6. *(Optional) Instead of opening the port, put Appia behind a reverse proxy server with authentication*\n\nOnce you've installed Appia Web, you can access it directly\nby opening ports 8080 (for Appia Web) and 5984 (for the database)\nand accessing it at `{server name}:8080/traces`.\nHowever, we recommend you host it behind [NGINX](https://www.nginx.com/), both to remove\nthe requirement of specifying a port, and to add the ability\nto control access to your Appia database. Here is an example\nconfig for NGINX:\n\n```\nlocation /traces/ {\n    proxy_set_header HOST $http_host;\n    proxy_pass http://{server name}:8080/traces/;\n}\n```\n\nThis way, your users can access the server directly at\n`{server name}/traces`, and you can add a password using\n[the standard methods](https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/).\nIf using NGINX, you no longer need to open port 8080. You do\nstill need to open port 5984 for the database.\n\n### Local/processing-only installation:\nThis process will install Python and all the packages/libraries you need.\nI highly recommend you use a virtual environment for the python packages. Conda\nis also fine, but I'm trying to keep this as simple as possible. If you want\nto use ggplot to make manually-tweaked plots, you should also follow the steps\nto install R and RStudio.\n\n1. Install [python3](https://www.python.org/) \n    1. *(Recommended)* Run `python -m virtualenv venv` \n    2. *(Recommended)* Run `venv/Scripts/activate` (Windows) or `source venv/bin/activate` (Mac/Linux)\n    3. Run `python -m pip install appia` (`python3` for linux)\n2. *(If using Appia Web)* create a config file or set the $COUCHDB_USERNAME, $COUCHDB_PASSWORD, and $COUCHDB_HOST environment variables to upload to your database.\n3. *(Optional) Install [R](https://www.r-project.org/) for manual plotting*\n    1. *In an R session (`R.exe` or `R` for Windows or Mac)\n    run `install.packages('tidyverse')`*\n4. *(Optional) Install [R Studio](https://www.rstudio.com/) for easier use of the\n    manual plot scripts*\n\nAfter performing these steps, Appia is ready to process your data! Detailed information about\nprocessing supported instruments is given below, but if you want to jump right in, you can\neither use the included batch scripts, or run `appia process {filenames}` to start processing!\n\n## HPLC Processing\nAppia reads `.arw` or `.asc` files (from Waters and Shimadzu HPLCs, respectively)\nfor information about the sample and how it was run, then optionally collects all the indicated\ntraces into an Experiment for upload to the visualization database.\n\n**Please note** that our lab uses Waters instruments. Others are supported, but\nwe will need more information from you for non-Waters bug reports and\nfeature requests!\n\n### Waters Export Method\nWhen exporting your data, please export the headers as two rows with multiple columns,\nrather than two columns with multiple rows.\n\nThe Waters script requires `SampleName`, `Channel`, `Instrument Method Name` and\n`Sample Set Name`. The order is not important, so long as the\nrequired headers are present in the .arw file. Other information can be there as\nwell, it won't hurt anything. Flow rate information is pulled from\n`processors/flow_rates.json`. If your Instrument Method contains *exactly one* key\nfrom that JSON file, the flow rate is set accordingly. If the file does not exist,\nor if your Method matches more or fewer than one key, you will be asked to fill\nprovide a flow rate. They can also be provided using the `--hplc-flow-rate`\nargument.\n\n### Shimadzu Data Export\n\nIf you are using an old Shimadzu instrument, your method will need the\nstandard headers, including `Sample ID`, `Total Data Points`, and `Sampling Rate`. When you process, you will need\nto pass a set of arguments to tell Appia which channel corresponds to what,\nsince Shimadzu instruments only output a letter. Additionally, you will be prompted\nfor a flow rate (or you can provide one with `--hplc-flow-rate`).\n\nNewer Shimadzu instruments output much more information about samples, which is great.\nManual input of flow rate is still necessary, and if you have more than one sample\nwith the same Sample Name *and* Sample ID being processed at the same time, they will\nconflict. This should not happen unless you're combining samples from different runs\ninto a single processing event, which I consider a rare event. If this is essential\nfor your workflow please submit an [issue](https://github.com/PlethoraChutney/Appia/issues).\n\n### Agilent Data Export\n\nUnfortunately, Agilent has rather limited support for data export. Versions of OpenLab\nprior to 2.4 lack the ability to export data in a format that Appia can read. However,\nOpenLab 2.4 [introduced the ability to export data as a csv](https://community.agilent.com/technical/software/f/forum/1297/saving-dx-in-csv-excel-format).\n\nFollowing those instructions\nshould yield a CSV with two unnamed columns, one representing retention time and the other\nsignal. Given this lack of information, other data has to be provided by the user. If your\nfile includes the pattern `Channel<###>` (where <###> is replaced by exactly\nthree digits), Appia will set the channel for that file to the provided number. If your\nfile includes the pattern `Flow<##.##>` (where <##.##> is replaced by any number of digits\nand a period followed by any number of digits, e.g., 1.25) Appia will set the flow\nrate for that file to that number, in mL/min. Otherwise, the user will be prompted for this\ninformation at the command line.\n\nWe do not have access to an Agilent instrument, and we welcome collaboration on this front!\n\n## AKTA FPLC Processing\nThe AKTA processing is straightforward. First, export your data from the AKTA in\n.csv format. You'll have to open the trace in Unicorn and use the export button there,\njust using \"Export Data\" saves a zipped binary which Appia can't read. Everything is\nhandled automatically, but there are several arguments for producing and customizing\nautomatic plots, if desired.\n\n## Web UI\n\nWhen you\nprocess HPLC and/or FPLC data with Appia, you create an Experiment. These Experiments\nare then uploaded to a CouchDB server. The Appia web server pulls data from the\nCouchDB to display traces using plotly dash. This is the main power of Appia --- you\ncan use your browser to quickly see your data, zoom in and out, select different\ntraces, combine experiments to compare different runs, re-normalize the data, and\nshare links with lab members.\n\n### Uploading an Experiment\nTo upload an experiment, when you process it include the `-d` flag. This will\nattempt to read the environment variables `$COUCHDB_USER`, `$COUCHDB_PASSWORD`,\nand `$COUCHDB_HOST` and use those to upload the Experiment to the correct database.\nYou can also pass a JSON file to `-d` instead (but you should never save passwords\nin plaintext).\n\n### Viewing the experiment\nSimply navigate to your server and view the trace page. The docker default is\n`{myserver}:8080/traces`. You can search\nexperiments in the dropdown menu and concatenate HPLC results to compare across\nexperiments. Clicking \"Renormalize HPLC\" will re-normalize the traces to set the\nmaximum of the currently-viewed unnormalized region to 1, allowing you to compare\nspecific peaks.\n\n## Batch scripts\nFrom the command line, the best way to use Appia is to run appia.py. However,\nseveral batch scripts are included in this repo to give users who prefer not\nto use command line interfaces a set of commonly-used options. You could write\nequivalent shell scripts for Linux or Mac machines, but since most chromatography\nsystems run on Windows I've included these for those machines.\n\n### process.bat\nRead all files in the current directory and process all CSV, ASC, and ARW files\ninto a new experiment which is uploaded to the database using environment variables\n\n### process-and-rename.bat\nSame as above, but specify an Experiment ID yourself instead of reading one from\nthe data.\n\n## Manual plot fine-tuning\nFor final publication plots, we recommend fine-tuning the appearance of the plot\nusing [ggplot2](https://ggplot2.tidyverse.org/). To this end, we include some\nR scripts as suggested starting points for building publication plots. These manual\nplotting scripts can be copied into the processed data directory using the\n`--copy-manual` argument during processing. As you develop your own style, you\ncan save your own templates (still named `manual_plot_HPLC.R` and `manual_plot_FPLC.R`)\nand pass the directory containing these templates to the `--copy-manual` argument.\n\n# Example Data\nExamples of correctly-formatted Waters, Shimadzu, and AKTA files can be found in `/test-files/`. The directory `/processed-tests/` is the result of the command:\n\n```python appia.py -v process test-files/*.arw .\\test-files\\2018_0821SEC_detergentENaC.csv -kpo processed-tests -m 5 20 -f 16 28 2```\n\nI included the -k parameter because I want to keep the raw files there, but if I\nhad not, they'd be moved to their own respective directories in\n`/processed-tests/`. You'll see that in `/processed-tests/` there are three\nfiles representing the compiled data, as well as auto-generated plots.\n\n## HPLC Data\n\n![Auto HPLC plot](processed-tests/Exp106_SEC_auto-plot-hplc.png)\n\nFor ease of use, HPLC data is stored in both a long and wide format.\n\n### Long format\nmL is calculated from Time during processing. Sample and Channel are self-explanatory.\nNormalization tells if Value is the raw signal or a normalized Signal from 0 to 1,\n0 being the minimum and 1 being the maximum over that sample/channel combination,\nunless a specific range over which to normalize was passed into Appia during processing.\n\n| mL | Sample   | Channel | Time | Normalization | Value |\n|----|----------|---------|------|---------------|-------|\n| 0  | 05_25_BB | GFP     | 0    | Signal        | -1    |\n| 0  | 05_25_BB | Trp     | 0    | Signal        | -35   |\n| 0  | 05_25_D  | GFP     | 0    | Signal        | 3     |\n| 0  | 05_25_D  | Trp     | 0    | Signal        | 0     |\n\n### Wide format\nWide format is the same data, but presented in a more traditional, \"excel-style\" format.\nEach column represents a trace, with a single column for Time to go along with it. You\nmay note that the example wide table has a strange format, with many empty rows. This is\nbecause Shimadzu and Waters sample at different rates, meaning they do not have overlapping\nsampling points for the most part. Appia handles this, by using a single Time column\nand introducing empty rows in the Signal columns. Your plotting software should be able\nto deal with that, or you can just filter for non-empty rows.\n\n| Time     | 05_25_BB GFP | 05_25_BB Trp | 05_25_D GFP | 05_25_D Trp |\n|----------|--------------|--------------|-------------|-------------|\n| 0        | -1           | -35          | 3           | 0           |\n| 0.033333 | -1           | -20          | 0           | -1          |\n\n## FPLC data\n\n![Auto FPLC plot](processed-tests/Exp106_SEC_auto-plot-fplc.png)\n\nFPLC data is only stored in long format since, by and large, it is the same as\nwhat wide format would be. You just need to filter out channels you don't care about\nto reproduce what a wide-format table would be. Interestingly, AKTAs sample each channel\nat different rates, meaning that each channel has different x-axis values. This is all\nhandled correctly by Appia, but that would introduce blank rows in the wide table, as\nwith the HPLC example data. The fraction column indicates the vial into which that\ndata point was dumped. This is used to fill fractions of interest, as seen in the\nexample FPLC plot and the web interface.\n\n| mL       | CV       | Channel | Fraction | Sample                     | Normalization | Value    |\n|----------|----------|---------|----------|----------------------------|---------------|----------|\n| -0.00701 | -0.00029 | mAU     | 1        | 2018_0821SEC_detergentENaC | Signal        | 0.031309 |\n| -0.00618 | -0.00026 | mAU     | 1        | 2018_0821SEC_detergentENaC | Signal        | 0.022083 |\n| -0.00535 | -0.00022 | mAU     | 1        | 2018_0821SEC_detergentENaC | Signal        | 0.022115 |\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/PlethoraChutney/Appia",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "appia",
            "package_url": "https://pypi.org/project/appia/",
            "platform": null,
            "project_url": "https://pypi.org/project/appia/",
            "project_urls": {
                "Homepage": "https://github.com/PlethoraChutney/Appia"
            },
            "release_url": "https://pypi.org/project/appia/7.1.2/",
            "requires_dist": [
                "couchdb",
                "pandas",
                "slack",
                "plotly",
                "kaleido"
            ],
            "requires_python": ">=3.6",
            "summary": "Chromatography processing made easy",
            "version": "7.1.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16135888,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "e0f8e011e74ec0157ace890cd5cfd916",
                    "sha256": "524d38c672ddfdcb3d825a46e3dbde2742d222f10e432750eb6481c9716fe5b2"
                },
                "downloads": -1,
                "filename": "appia-7.1.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "e0f8e011e74ec0157ace890cd5cfd916",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.6",
                "size": 28362,
                "upload_time": "2022-12-17T18:33:55",
                "upload_time_iso_8601": "2022-12-17T18:33:55.418726Z",
                "url": "https://files.pythonhosted.org/packages/34/30/d897bc2f67086d5a9d3b4f7a697d23beb6b8a23f2a687cc70b25245b98ae/appia-7.1.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e2cefc626268eeb28aa6793c3cd2c3bf",
                    "sha256": "d60282ca1b35af94ea6ec9c9a4b6fc919d3d61ab4398a314fd692e8296d4d836"
                },
                "downloads": -1,
                "filename": "appia-7.1.2.tar.gz",
                "has_sig": false,
                "md5_digest": "e2cefc626268eeb28aa6793c3cd2c3bf",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.6",
                "size": 28759,
                "upload_time": "2022-12-17T18:33:56",
                "upload_time_iso_8601": "2022-12-17T18:33:56.848247Z",
                "url": "https://files.pythonhosted.org/packages/12/a1/293ae66e5d65e6dab309ab6a2d2643ac562a1e7ce27ac5ea13de309f29b8/appia-7.1.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}