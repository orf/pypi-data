{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "Dung Manh Nguyen <dungnm.workspace@gmail.com>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# Code-text data toolkit\n\nThis repo contains multilingual programming language parsers for the extract from raw source code into multiple levels of pair data (code-text) (e.g., function-level, class-level, inline-level). \n\n## Installation\nInstall dependencies and setup by using `install_env.sh`\n```bash\nbash -i ./install_env.sh\n```\nthen activate conda environment named \"code-text-env\"\n```bash\nconda activate code-text-env\n```\n\n## Getting started\n\n### Build your language\nAuto build tree-sitter into `<language>.so` located in `/tree-sitter/`\n```python\nfrom src.utils import build_language\n\nlanguage = 'rust'\nbuild_language(language)\n\n\n# INFO:utils:Not found tree-sitter-rust, attempt clone from github\n# Cloning into 'tree-sitter-rust'...\n# remote: Enumerating objects: 2835, done. ...\n# INFO:utils:Attempt to build Tree-sitter Language for rust and store in .../tree-sitter/rust.so\n```\n\n### Language Parser\nWe supported 8 programming languages, namely `Python`, `Java`, `JavaScript`, `Golang`, `Ruby`, `PHP`, `C#`, `C++` and `C`.\n\nSetup\n```python\nfrom tree_sitter import Parser, Language\n\nraw_code = \"\"\"\n/**\n* Sum of 2 number\n* @param a int number\n* @param b int number\n*/\ndouble sum2num(int a, int b) {\n    return a + b;\n}\n\"\"\"\n\nparser = Parser()\nlanguage = Language(\"/tree-sitter/cpp.so\", 'cpp')\nparser.set_language(language)\nroot_node = parser.parse(bytes(raw_code, 'utf8'))\n```\n\nGet all function nodes inside a specific node, use:\n```python\nfrom src.utils.parser import CppParser\n\nfunction_list = CppParser.get_function_list(root_node)\nprint(function_list)\n\n# [<Node type=function_definition, start_point=(6, 0), end_point=(8, 1)>]\n\n```\n\nGet function metadata (e.g. function's name, parameters, (optional) return type)\n```python\nfunction = function_list[0]\n\nmetadata = CppParser.get_function_metadata(function, raw_code)\n\n# {'identifier': 'sum2num', 'parameters': {'a': 'int', 'b': 'int'}, 'type': 'double'}\n```\nGet docstring (documentation) of a function\n```python\ndocstring = CppParser.get_docstring(function, code_sample)\n\n# ['Sum of 2 number \\n@param a int number \\n@param b int number']\n```\n\nWe also provide 2 command for extract class object\n```python\nclass_list = CppParser.get_class_list(root_node)\n# and\nmetadata = CppParser.get_metadata_list(root_node)\n```\n\n## Data collection and Preprocessing\nThe dataset we used to extract was collected by codeparrot. They host the raw dataset in here [codeparrot/github-code](https://huggingface.co/datasets/codeparrot/github-code).\n\n*You can create your own dataset using Google Bigquery and the [query here](https://huggingface.co/datasets/codeparrot/github-code/blob/main/query.sql)*\n\n### Getting started\nFor start preprocessing data, define a .yaml file to declare raw data format. (More detail: `/data/format/README.md`)\n\n```bash\npython -m src.processing \n<DATASET_PATH>\n--save_path <SAVE_PATH>  # path to save dir\n\n--load_from_file  # load from file instead load from dataset cache\n--language Python  # or Java, JavaScript, ...\n--data_format './data/format/codeparot-format.yaml'  # load raw data format\n\n--n_split 20  # split original dataset into N subset\n--n_core -1  # number of multiple processor (default to -1 == using all core)\n```\n\n*NOTES:*  <DATASET_PATH> dir must contains raw data store in `.jsonl` extension if you pass argument `--load_from_file` or contains huggingface dataset's \n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "codetext",
            "package_url": "https://pypi.org/project/codetext/",
            "platform": null,
            "project_url": "https://pypi.org/project/codetext/",
            "project_urls": {
                "Bug Tracker": "https://github.com/AI4Code-Research/CodeText-data/issues",
                "Homepage": "https://github.com/AI4Code-Research/CodeText-data"
            },
            "release_url": "https://pypi.org/project/codetext/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.10.6",
            "summary": "Multilingual programming language parsers for the extract from raw source code into multiple levels of pair data",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15707732,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "681bd257c3e93ebdc90e6c7c6d3cdc53",
                    "sha256": "1b0d2303659a99a4fc033ae77fc5c4ba37e03f78b9a425080e63464b475c0f62"
                },
                "downloads": -1,
                "filename": "codetext-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "681bd257c3e93ebdc90e6c7c6d3cdc53",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.10.6",
                "size": 41276,
                "upload_time": "2022-11-09T05:48:24",
                "upload_time_iso_8601": "2022-11-09T05:48:24.294750Z",
                "url": "https://files.pythonhosted.org/packages/56/6b/0fefb704250ac093e8466c39fbeb18f98322a0e46c029861bf9c0519cd87/codetext-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b83a5bafb07c92037ff415002822c4fe",
                    "sha256": "02d0c472010c89b4178fec497ca657ba5f2592e6b5124335b506a641ac67ed51"
                },
                "downloads": -1,
                "filename": "codetext-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "b83a5bafb07c92037ff415002822c4fe",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.10.6",
                "size": 28357,
                "upload_time": "2022-11-09T05:48:39",
                "upload_time_iso_8601": "2022-11-09T05:48:39.762204Z",
                "url": "https://files.pythonhosted.org/packages/7b/a5/892b117b4b50f638bb66aa2bbfa4c1c16edfb0584d454b7861f9def5d521/codetext-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}