{
    "0.0.1": {
        "info": {
            "author": "",
            "author_email": "Thijs van Ede <t.s.vanede@utwente.nl>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT License Copyright (c) 2022 Thijs van Ede Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "toppred",
            "package_url": "https://pypi.org/project/toppred/",
            "platform": null,
            "project_url": "https://pypi.org/project/toppred/",
            "project_urls": {
                "Bug Tracker": "https://github.com/Thijsvanede/toppred/issues",
                "Homepage": "https://github.com/Thijsvanede/toppred"
            },
            "release_url": "https://pypi.org/project/toppred/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Extension to sklearn.metrics to allow metrics with multiple predictions",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15043940,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "9e4493032eb0f6a3005436d4c8855be3",
                    "sha256": "317e95217c20688e000f3c9d4bffa60b447dce8dce88ce996229311d0d8bef17"
                },
                "downloads": -1,
                "filename": "toppred-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "9e4493032eb0f6a3005436d4c8855be3",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 5573,
                "upload_time": "2022-09-09T12:43:31",
                "upload_time_iso_8601": "2022-09-09T12:43:31.524900Z",
                "url": "https://files.pythonhosted.org/packages/a5/f7/4d5f81be054428c6b584e4550b80848a9c9b415098280e46e125a6cbd7dd/toppred-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ffec3ea9d486273e3906f0a93b45060d",
                    "sha256": "2f8a702aacda8a736a215f241c2a8380298717dc707f42fed7c8e3151cb24c04"
                },
                "downloads": -1,
                "filename": "toppred-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "ffec3ea9d486273e3906f0a93b45060d",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 5145,
                "upload_time": "2022-09-09T12:43:33",
                "upload_time_iso_8601": "2022-09-09T12:43:33.282278Z",
                "url": "https://files.pythonhosted.org/packages/04/28/d05bb57826ba8ac7a867d46596c816374d037073e8169feba3789d3bc0f0/toppred-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.2": {
        "info": {
            "author": "",
            "author_email": "Thijs van Ede <t.s.vanede@utwente.nl>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# toppred\nExtension to [sklearn.metrics](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics) to allow metrics for classifiers that output a top `n` prediction.\nSome classifiers output confidence levels for each class.\nOftentimes, you want to evaluate the performance of such classifiers assuming the correct prediction is the top `n` predictions with the highest confidence level.\nThis library serves as an extension to the functions provided by [sklearn.metrics](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics) to allow for evaluating classifiers that do not output a single prediction per sample, but rather a range of top predictions per sample.\n\n## Installation\nThe most straightforward way of installing `toppred` is via pip:\n```bash\npip3 install toppred\n```\n\n### From source\nTo install this library from source, simply clone the repository:\n```bash\ngit clone https://github.com/Thijsvanede/toppred.git\n```\n\nNext, ensure that all [dependencies](#Dependencies) have been installed:\n\nUsing the `requirements.txt` file:\n```bash\npip3 install -r /path/to/toppred/requirements.txt\n```\n\nInstalling libraries independently:\n```bash\npip3 install numpy pandas sklearn\n```\n\nFinally, install the library from source:\n```bash\npip3 install -e /path/to/toppred/\n```\n\n## Documentation\nThe main usage of this library is to compute metrics over the top-n predictions of a given classifier. In the normal case, a classifier gives a single prediction per sample, often in the form of an array:\n\n```python\nimport numpy as np\n\ny_true = np.asarray([0, 1, 2, 1, 0]) # True labels\ny_pred = np.asarray([0, 1, 1, 0, 0]) # Predicted labels\n```\n\nHowever, a classifier could also return the top n most likely predictions, e.g.:\n\n```python\nimport numpy as np\n\ny_true = np.asarray([0, 1, 2, 1, 0]) # True labels\ny_pred = np.asarray([                # Predicted labels\n    [0, 1, 2],\n    [1, 0, 2],\n    [1, 2, 0],\n    [0, 1, 2],\n    [0, 1, 2],\n])\n```\n\nIn this case, we would like to be able to compute the performance when:\n 1. The correct prediction is the most likely prediction (`y_pred[:, 0]`)\n 2. The correct prediction is in the top `2` most likely predictions (`y_pred[:, :2]`)\n 3. The correct prediction is in the top `3` most likely predictions (`y_pred[:, :3]`)\n 4. The correct prediction is in the top `n` most likely predictions (`y_pred[:, :n]`)\n\nFor this purpose, this library provides two functions:\n * [top_classification_report()](#top_classification_report), produces a classification report similar to [sklearn.metrics.classification_report](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html). See [usage example](#top-classification-report).\n * [top_predictions()](#top_predictions), provides an iterator over the top n most likely predictions and can be combined with many `sklearn.metrics`. See [usage example](#Metrics).\n\n### Probabilities\nSome classifiers, including many neural networks do not give direct top n results, but instead provide a probability (confidence level) for each class, producing an output such as:\n\n```python\nimport numpy as np\n\ny_true = np.asarray([0, 1, 2, 1, 0]) # True labels\ny_prob = np.asarray([ # Prediction probability\n    [0.7, 0.2, 0.1],  # class 0 -> 0.7, class 1 -> 0.2, class 2 -> 0.1\n    [0.2, 0.7, 0.1],  # etc.\n    [0.1, 0.7, 0.2],\n    [0.8, 0.1, 0.1],\n    [0.7, 0.2, 0.1],\n])\n```\n\nIn those cases, we can obtain a prediction for the top n most likely values:\n\n```python\n# Get top n most likely values\nn = 3\n\n# Example: y_prob is numpy array\ny_pred = np.argsort(y_prob, axis=1)[:, -n:]\n\n# Example: y_prob is pytorch Tensor\ny_pred = torch.topk(y_prob, n).indices.cpu().numpy()\n```\n\nThis results in the prediction array:\n```\narray([[0, 1, 2],\n       [1, 0, 2],\n       [1, 2, 0],\n       [0, 1, 2],\n       [0, 1, 2]])\n```\n\n### Usage examples\nFor all directly executable examples see the `examples/` directory.\n\n#### Top classification report\n```python\n# Imports\nimport numpy as np\nfrom toppred.metrics import top_classification_report\n\n# Define inputs\ny_true = np.asarray([1, 2, 3, 2, 1]) # Ground truth values\ny_pred = np.asarray([                # Sample prediction values\n    [1, 2, 3],                       # We have a top 3 predictions for each\n    [2, 1, 3],                       # input sample. I.e., \n    [1, 2, 3],                       # y_true.shape[0] == y_pred.shape[0].\n    [3, 1, 2],\n    [1, 2, 3],\n])\n\n# Compute and print top classification report\nprint(top_classification_report(\n    y_true = y_true,\n    y_pred = y_pred,\n    labels = [0, 1, 2, 3],                 # Optional, defaults to None\n    target_names = ['N/A', '1', '2', '3'], # Optional, defaults to None\n    sample_weight = [1, 2, 3, 4, 5],       # Optional, defaults to None\n    digits = 4,                            # Optional, int, defaults to 2\n    output_dict = False,                   # Optional, If true, return as dictionary\n    zero_division = \"warn\",                # Optional, defaults to \"warn\"\n))\n```\n\n#### Metrics\n```python\n# Imports\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom toppred.predictions import top_predictions\n\n# Define inputs\ny_true = np.asarray([1, 2, 3, 2, 1]) # Ground truth values\ny_pred = np.asarray([                # Sample prediction values\n    [1, 2, 3],                       # We have a top 3 predictions for each\n    [2, 1, 3],                       # input sample. I.e., \n    [1, 2, 3],                       # y_true.shape[0] == y_pred.shape[0].\n    [3, 1, 2],\n    [1, 2, 3],\n])\n\n# Use top_predictions to generate a y_pred value that is correct if the\n# prediction is in the top n predictions\nfor top, prediction in top_predictions(y_true, y_pred):\n    # Compute common metrics\n    accuracy  = accuracy_score (y_true, prediction)\n    precision = precision_score(y_true, prediction, average='macro')\n    recall    = recall_score   (y_true, prediction, average='macro')\n    f1        = f1_score       (y_true, prediction, average='macro')\n\n    print(f\"Metrics top {top+1} predictions:\")\n    print(f\"    Accuracy : {accuracy}\")\n    print(f\"    Precision: {precision}\")\n    print(f\"    Recall   : {recall}\")\n    print(f\"    F1_score : {f1}\")\n    print()\n```\n\n## API\nThis library offers two main functions:\n * [top_classification_report()](#top_classification_report)\n * [top_predictions()](#top_predictions)\n\n### top_classification_report()\nCreate a classification report for a y_pred containing multiple top predictions. This function follows the same API as ``sklearn.metrics.classification_report`` with the exception that:\n1. ``y_pred`` should be given as a 2D array instead of a 1D array.\n2. If ``output_dict`` is ``True``, the output dictionary consists of a dictionary where ``key`` is 0-indexed top prediction and ``value`` is the ``sklearn.metrics.classification_report`` output dictionary for that top prediction.\n\n#### Parameters\n* `y_true` : `array_like_1d of shape=(n_samples,)`\n  Ground truth (correct) target values.\n* `y_pred` : `array_like_2d of shape=(n_samples, n_predictions)`\n  Estimated targets as returned by a classifier. Each column y_pred[:, i] indicates the i-th most likely prediction (0-indexed) for the given sample.\n* `labels` : `Optional[array_like_1d], default = None`\n    Optional list of label indices to include in the report.\n* `target_names` : `Optional[List[str]] = None`\n  Optional display names matching the labels (same order).\n* `sample_weight` : `Optional[array_like_1d], default = None`\n  Sample weights.\n* `digits` : `int, default = 2`\n  Number of digits for formatting output floating point values. When ``output_dict`` is ``True``, this will be ignored and the returned values will not be rounded.\n* `output_dict` : `bool, default = False`\n  If True, return output as dict.\n* `zero_division` : `Union[Literal[\"warn\"], 0, 1], default = \"warn\"`\n  Sets the value to return when there is a zero division. If set to \u201cwarn\u201d, this acts as 0, but warnings are also raised.\n\n#### Returns\n* `report` : `Union[str, dict]`\n  Text summary of the precision, recall, F1 score for each class. Dictionary returned if output_dict is True.\n\n  The reported averages include macro average (averaging the unweighted mean per label), weighted average (averaging the support-weighted mean per label), and sample average (only for multilabel classification). Micro average (averaging the total true positives, false negatives and false positives) is only shown for multi-label or multi-class with a subset of classes, because it corresponds to accuracy otherwise and would be the same for all metrics. See also precision_recall_fscore_support for more details on averages.\n\n  Note that in binary classification, recall of the positive class is also known as \u201csensitivity\u201d; recall of the negative class is \u201cspecificity\u201d.\n\n### top_predictions()\nIterates over the top predictions.\n\n#### Parameters\n* `y_true` : `array_like_1d of shape=(n_samples,)`\n  True labels corresponding to samples.\n\n* `y_pred` : `array_like_2d of shape=(n_samples, n_predictions)`\n  Predicted labels for samples. Each column y_pred[:, i] indicates the i-th most likely prediction (0-indexed) for the given sample.\n\n#### Yields\n* `i` : `int`\n  Top in the i most likely predictions (0-indexed).\n\n* `y_pred` : `np.array of shape=(n_samples,)`\n  Prediction if the correct answer would be in the top i most likely predictions (0-indexed).\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "MIT License Copyright (c) 2022 Thijs van Ede Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "maintainer": "",
            "maintainer_email": "",
            "name": "toppred",
            "package_url": "https://pypi.org/project/toppred/",
            "platform": null,
            "project_url": "https://pypi.org/project/toppred/",
            "project_urls": {
                "Bug Tracker": "https://github.com/Thijsvanede/toppred/issues",
                "Homepage": "https://github.com/Thijsvanede/toppred"
            },
            "release_url": "https://pypi.org/project/toppred/0.0.2/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Extension to sklearn.metrics to allow metrics with multiple predictions.",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15043940,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "592a0ef76a8c36325b4b7c551e1e1516",
                    "sha256": "b3d607a509b24a48a7c321faedf6d2ebff333671268413e7f1e1c71f44d5085d"
                },
                "downloads": -1,
                "filename": "toppred-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "592a0ef76a8c36325b4b7c551e1e1516",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 9659,
                "upload_time": "2022-09-09T13:21:07",
                "upload_time_iso_8601": "2022-09-09T13:21:07.538403Z",
                "url": "https://files.pythonhosted.org/packages/33/90/ebb320447c13f69090403489644bbed69598ccab6fa5d21bc6897a8303c9/toppred-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8b389d63e7e2e5bb63190279c9b4069b",
                    "sha256": "c150694484aafce6494afe7e90088c98db67f3caeccde5c04de2e4ed1effce96"
                },
                "downloads": -1,
                "filename": "toppred-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "8b389d63e7e2e5bb63190279c9b4069b",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 9967,
                "upload_time": "2022-09-09T13:21:09",
                "upload_time_iso_8601": "2022-09-09T13:21:09.804259Z",
                "url": "https://files.pythonhosted.org/packages/c0/17/3348f6cfa0439013ef221b0136d57838601e88d5b9c0d19ce1a0fe4e181a/toppred-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}