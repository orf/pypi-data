{
    "0.0.2": {
        "info": {
            "author": "Meike Zehlike, Alex Loosley",
            "author_email": "meike.zehlike@zalando.de, alex.loosley@zalando.de",
            "bugtrack_url": null,
            "classifiers": [
                "Programming Language :: Python :: 3"
            ],
            "description": "# FAIM\n\nFAIM (FAir Interpolation Method), described in\n[Beyond Incompatibility: Interpolation between Mutually\nExclusive Fairness Criteria in Classification Problems](https://arxiv.org/abs/2212.00469)\nis a post-processing algorithm for achieving a combination of group-fairness criteria\n(equalized false postive rates, equalized false negative rates, group calibration).\n\n[this page is under contruction]\n\n## Installation\n\n### Environment\nEnsure you have a environment with Python>=3.7 and pip>=2.21, preferably by creating a virtual environment.\n\nOne way to do this is using [miniconda](https://docs.conda.io/en/latest/miniconda.html).  Install miniconda following\nthe instructions on [this page](https://docs.conda.io/en/latest/miniconda.html)\nand create a python 3.10 environment:\n\n```bash\nconda create -n faim python=3.10\n```\n\nActivate the environment\n```bash\nconda activate faim\n```\n\nCheck that versions of python are >=3.7 and >=2.21, respectively:\n```bash\npython --version\npip --version\n```\n\n### Python Package\nTo install the package, go to the root directory of this repository and run\n```bash\npip install \".[experiment]\"\n```\n\nNote the `[experiment]` notation is required for now since for the moment, the algorithm can only be run in experiment\nmode for recreating experimental results in the [paper](https://arxiv.org/abs/2212.00469).\n**In the future, `faim` will be made available directly via `pip install faim` with an API for easily applying the\npost-processing algorithm to any classifier scores (given ground truth and group information).\n\n### Removal\nFrom the environment where you installed the package, run\n```bash\npip uninstall faim\n```\n\n\n## Usage\nInstalling faim also (currently) installs one command line interface (CLI) tool, `faim-experiment` which can be\nused to reproduce the work in the paper.\n\n[A general API will added soon]\n\n### Experiments\n#### Datasets\nThe CLI can be used to prepare the three datasets found in the paper:\n```bash\nfaim-experiment --create <dataset>\n```\nwhere `<dataset>` is one of:\n1. synthetic\n2. compas\n3. zalando\n\n(see [paper](https://arxiv.org/abs/2212.00469) for more information).\n\n##### Synthetic Dataset\nThe synthetic dataset contains 2 protected feature columns and 1 score column.\nOne protected feature is binary {0, 1}, the other is drawn from the set {0, 1, 2},\nleading to a total of 6 groups (0 0), (0 1), (0 2) etc. The score feature represents the number,\nthat would be calculated by a ranking function. Each group is assigned a in integer score within [1,100],\ndrawn from a normal distribution with different means and standard-deviations per group.\n\n#### Run Experiment\n\nFor each dataset the aforementioned group description csv file is needed. It is automatically generated during ``python3 main.py --create.``\n\nRunning the CFA requires the following parameters: dataset name, the lowest and highest score value, the step size between two consecutive score values, a theta value for each group, and a path where the results are stored\n\nExamples for the synthetic dataset:\n* ``continuous-kleinberg --run synthetic 1,100 1 0,0,0,0,0,0 ../data/synthetic/results/theta=0/``\n* ``continuous-kleinberg --run synthetic 1,100 1 1,1,1,1,1,1 ../data/synthetic/results/theta=1/``\n\nExample for LSAT with gender as protected feature:\n* ``continuous-kleinberg --run lsat_gender 11,48 1 0,0 ../data/LSAT/gender/results/theta=0/``\n\nExample for LSAT with race as protected feature:\n* ``continuous-kleinberg --run lsat_race 11,48 1 1,1,1,1,1,1,1,1 ../data/LSAT/allRace/results/theta=1/``\n\n\n#### Visualize Data and Results\nEvaluates relevance and fairness changes for a given experiment and plots the results. Relevance is evaluated in terms of NDCG and Precision@k. Fairness is evaluated in terms of percentage of protected candidates at position k.\n\nRunning the evaluation requires the following terminal arguments: dataset name, path to original dataset (before post-processing with CFA), path to result dataset (after applying the CFA). The evaluation files are stored in the same directory as the result dataset.\n\n* ``continuous-kleinberg --evaluate synthetic ../data/synthetic/dataset.csv ../data/synthetic/results/theta=0/resultData.csv``\n* ``continuous-kleinberg --evaluate lsat_race ../data/LSAT/allRace/allEthnicityLSAT.csv ../data/LSAT/allRace/results/theta=0/resultData.csv``\n* ``continuous-kleinberg --evaluate lsat_gender ../data/LSAT/gender/genderLSAT.csv ../data/LSAT/gender/results/theta=0/resultData.csv``\n\n\n## Development and Contribution\nContributions are welcome.\n\n### Development Environment\nTo develop, use the following command to install the package as editable with extra dev requirements:\n```bash\npip install -e \".[experiment, dev]\"\n```\n\nDon't confuse the `[]` to mean optional.  The `\".[experiment, dev]\"` notation tells pip to install extra\n\"experiment\" and \"dev\" requirements including things like `pytest`, `pre-commit`, `matplotlib`, and so on.\n\nPlease be sure to install (and use) our [pre-commit](https://pre-commit.com/) hooks:\n```bash\npre-commit install -t pre-commit -t pre-push\n```\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "fairness,optimal transport",
            "license": "Apache License Version 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "faim",
            "package_url": "https://pypi.org/project/faim/",
            "platform": null,
            "project_url": "https://pypi.org/project/faim/",
            "project_urls": {
                "Code Repository": "https://github.com/MilkaLichtblau/faim",
                "Paper": "https://arxiv.org/pdf/2212.00469.pdf"
            },
            "release_url": "https://pypi.org/project/faim/0.0.2/",
            "requires_dist": [
                "pot (>=0.8.0)",
                "pandas (>=1.0.0)",
                "pre-commit (>=2.20.0) ; extra == 'dev'",
                "pytest (>=7.0.0) ; extra == 'dev'",
                "pytest-cov (>=3.0.0) ; extra == 'dev'",
                "jupyter (>=1.0.0) ; extra == 'experiment'",
                "matplotlib (>=3.5.0) ; extra == 'experiment'",
                "scikit-learn (>=1.1.0) ; extra == 'experiment'",
                "statsmodels (>=0.13.5) ; extra == 'experiment'",
                "plotly (>=5.11.0) ; extra == 'experiment'"
            ],
            "requires_python": ">=3.7",
            "summary": "\"Source code for doing fair score remapping using optimal transport to achieve a desired combination of false positive parity, false negative parity, or calibration.\"",
            "version": "0.0.2",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15998401,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "962b5526db5525df0fedcc821c6feb6c",
                    "sha256": "752876d87dc7907e0cc11184df41af19959dd5f443a9e47f486131a3f827d147"
                },
                "downloads": -1,
                "filename": "faim-0.0.2-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "962b5526db5525df0fedcc821c6feb6c",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 32331,
                "upload_time": "2022-12-05T15:01:05",
                "upload_time_iso_8601": "2022-12-05T15:01:05.393738Z",
                "url": "https://files.pythonhosted.org/packages/88/d8/e1feed04356d8807aff0202a8a3e9032d29d71b89f57a45eee3e23ee59ba/faim-0.0.2-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "ca0a88327306c7f286acbbefa4894cab",
                    "sha256": "fb3332997788bd960be7f6c8d2388c35f5ec82f5c9bfc458c9c2c56c94ad9ded"
                },
                "downloads": -1,
                "filename": "faim-0.0.2.tar.gz",
                "has_sig": false,
                "md5_digest": "ca0a88327306c7f286acbbefa4894cab",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 28451,
                "upload_time": "2022-12-05T15:01:07",
                "upload_time_iso_8601": "2022-12-05T15:01:07.401836Z",
                "url": "https://files.pythonhosted.org/packages/a6/92/89e045df22160dadb0bc8c8d2d63800ba29dd5b33bc38b928bdc23e6c5d9/faim-0.0.2.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}