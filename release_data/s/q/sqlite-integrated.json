{
    "0.0.1": {
        "info": {
            "author": "Balder Holst",
            "author_email": "balderwh@gmail.com",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/BalderHolst/sqlite-integrated",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sqlite-integrated",
            "package_url": "https://pypi.org/project/sqlite-integrated/",
            "platform": null,
            "project_url": "https://pypi.org/project/sqlite-integrated/",
            "project_urls": {
                "Homepage": "https://github.com/BalderHolst/sqlite-integrated"
            },
            "release_url": "https://pypi.org/project/sqlite-integrated/0.0.1/",
            "requires_dist": null,
            "requires_python": ">=3.7",
            "summary": "Easily manipulate sqlite databases with dictionaries",
            "version": "0.0.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15204977,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "4872ef4111040615ab26de72f4465393",
                    "sha256": "f611163cdf7a2133bce31f06e39ad5c6ad6959a2d854aaf0574f6ae48dd2b876"
                },
                "downloads": -1,
                "filename": "sqlite_integrated-0.0.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "4872ef4111040615ab26de72f4465393",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 3544,
                "upload_time": "2022-08-14T12:26:52",
                "upload_time_iso_8601": "2022-08-14T12:26:52.551805Z",
                "url": "https://files.pythonhosted.org/packages/96/bd/307a7837d596b61346c62955e139eba44cf1b146937e55f2e1b5e2c8ad81/sqlite_integrated-0.0.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "00918c4a7bd55c8b6ce02beb57d7a07e",
                    "sha256": "bb8f194cc68284ad227a80f0f7ab94c6852b8f3f511fd4aab092f28cedb5c1b7"
                },
                "downloads": -1,
                "filename": "sqlite-integrated-0.0.1.tar.gz",
                "has_sig": false,
                "md5_digest": "00918c4a7bd55c8b6ce02beb57d7a07e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 3177,
                "upload_time": "2022-08-14T12:26:55",
                "upload_time_iso_8601": "2022-08-14T12:26:55.127618Z",
                "url": "https://files.pythonhosted.org/packages/b2/ad/144461e3453d34eab89dcf4f74a5531bc31b1e87addf15e4c49917b07bad/sqlite-integrated-0.0.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.3": {
        "info": {
            "author": "Balder Holst",
            "author_email": "balderwh@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Database"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/BalderHolst/sqlite-integrated",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sqlite-integrated",
            "package_url": "https://pypi.org/project/sqlite-integrated/",
            "platform": null,
            "project_url": "https://pypi.org/project/sqlite-integrated/",
            "project_urls": {
                "Homepage": "https://github.com/BalderHolst/sqlite-integrated"
            },
            "release_url": "https://pypi.org/project/sqlite-integrated/0.0.3/",
            "requires_dist": [
                "pandas (>=1.3.5)",
                "numpy (>=1.21.5)",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": ">=3.7",
            "summary": "Easily manipulate sqlite databases with simple syntax",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15204977,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "934679a854b5945905762d400f508a98",
                    "sha256": "6d2115d489f276a238ae7390231f2f76cd46271c8b0205b41f153999d66cc300"
                },
                "downloads": -1,
                "filename": "sqlite_integrated-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "934679a854b5945905762d400f508a98",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 13113,
                "upload_time": "2022-09-05T16:49:19",
                "upload_time_iso_8601": "2022-09-05T16:49:19.807871Z",
                "url": "https://files.pythonhosted.org/packages/f9/7d/c9b46646994f3174d6296b746e4810d77d1ff0d4a9798e1defedc122017b/sqlite_integrated-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0b43de6a62e8c6e0c3caaca093fee7ae",
                    "sha256": "9b1ac4f4e527ddd4498d2974ef537d437e05352b1ed1533cf2f525e9ffd704e8"
                },
                "downloads": -1,
                "filename": "sqlite-integrated-0.0.3.tar.gz",
                "has_sig": false,
                "md5_digest": "0b43de6a62e8c6e0c3caaca093fee7ae",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 371979,
                "upload_time": "2022-09-05T16:49:22",
                "upload_time_iso_8601": "2022-09-05T16:49:22.651280Z",
                "url": "https://files.pythonhosted.org/packages/ce/e4/d50296f8ce27443ff6f74cb1bcd7b126d11be7046a4333651aa2a462d583/sqlite-integrated-0.0.3.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.0.4": {
        "info": {
            "author": "Balder Holst",
            "author_email": "balderwh@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Topic :: Database"
            ],
            "description": "# What is this?\n\nThis package provides classes to make handling of sqlite3 databases easier. I have strived to make it as simple as possible, and the error messages as helpful as possible. The main `Database` class handles reading from and writing to the database. The `DatabaseEntry` class represents a single database entry. It can be used like a dictionary to assign new values to the entry. Ex: `entry['name'] = \"New Name\"`. The `Query` class can be used to create sql-queries with or without an attached Database to run it on.\n\n# Installation\nInstall with pip\n```bash\npip install sqlite-integrated\n```\n\n# Read the documentation\nThe documentation can be found [here](https://htmlpreview.github.io/?https://github.com/BalderHolst/sqlite-integrated/blob/main/docs/sqlite_integrated/index.html).\n\n# Github Repo\nIf you are interested in the open source code, click [here](https://github.com/BalderHolst/sqlite-integrated).\n\n# How to use it!\n\n### Creating a new database\nStart by importing the class and creating our NEW database (remember to put in a valid path to the database file).\n```python\nfrom sqlite_integrated import *\ndb = Database(\"path/to/database.db\", new=True)\n```\n\nWe pass `new=True` to create a new database file.\n\nWe can now create a table with sql. Note that we create a column assigned as \"PRIMARY KEY\" with the `primary_key` flag. Every table should have one of these columns (for this package to work properly). It makes sure that every entry has a unique id, so that we can keep track of it.\n\n```python\ndb.create_table(\"people\", [\n    Column(\"id\", \"integer\", primary_key=True),\n    Column(\"first_name\", \"text\"),\n    Column(\"last_name\", \"text\")\n])\n```\n\nWe can see an overview of the tables in the database and their table fields with the method `overview`. \n\n```python\ndb.overview()\n```\n\n*Output*:\n```\nTables\n\tpeople\n\t\tid\n\t\tfirst_name\n\t\tlast_name\n```\n\nTo add an entry use the `add_entry` method.\n```python\ndb.add_entry({\"first_name\": \"John\", \"last_name\": \"Smith\"}, \"people\")\n```\n\nLet's add a few more!\n\n```python\ndb.add_entry({\"first_name\": \"Tom\", \"last_name\": \"Builder\"}, \"people\")\ndb.add_entry({\"first_name\": \"Eva\", \"last_name\": \"Larson\"}, \"people\")\n```\n\nTo view to database we can use the `table_overview` method.\n```python\ndb.table_overview(\"people\")\n```\n\n*Output:*\n```\nid \u2551 first_name \u2551 last_name\n\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n1  \u2551 John       \u2551 Smith    \n2  \u2551 Tom        \u2551 Builder  \n3  \u2551 Eva        \u2551 Larson   \n```\n\n\n### Opening an existing database\n\nStart by importing the class and opening our database.\n```python\nfrom sqlite_integrated import Database\ndb = Database(\"tests/test.db\")\n```\n\nJust to check you can now run.\n```python\ndb.overview()\n```\nThis will print list of all tables in the database.\n\n\n### Editing an entry\n\nWe start by getting the entry. In this case the 3rd entry in the table \"customers\".\n```python\nentry = db.get_entry_by_id(\"customers\", 3)\n```\n\nNow edit as much as you desire!\n```python\nentry[\"FirstName\"] = \"John\"\nentry[\"LastName\"] = \"Newname\"\nentry[\"City\"] = \"Atlantis\"\n```\n\nTo update our table we can simply use the `update_entry` method.\n\n```python\ndb.update_entry(entry)\n```\n\nTo save these changes to the database file, use the `save` method.\n\n\n\n## More examples\n\n### Viewing a table\n```python\nfrom sqlite_integrated import Database\n\n# Loading an existing database\ndb = Database(\"tests/test.db\")\n\ndb.table_overview(\"customers\", max_len=15, get_only=[\"FirstName\", \"LastName\", \"Address\", \"City\"])\n```\n\n*Output:*\n```\nFirstName \u2551 LastName     \u2551 Address                                  \u2551 City               \n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nLu\u00eds      \u2551 Gon\u00e7alves    \u2551 Av. Brigadeiro Faria Lima, 2170          \u2551 S\u00e3o Jos\u00e9 dos Campos\nLeonie    \u2551 K\u00f6hler       \u2551 Theodor-Heuss-Stra\u00dfe 34                  \u2551 Stuttgart          \nFran\u00e7ois  \u2551 Tremblay     \u2551 1498 rue B\u00e9langer                        \u2551 Montr\u00e9al           \nBj\u00f8rn     \u2551 Hansen       \u2551 Ullev\u00e5lsveien 14                         \u2551 Oslo               \nFranti\u0161ek \u2551 Wichterlov\u00e1  \u2551 Klanova 9/506                            \u2551 Prague             \nHelena    \u2551 Hol\u00fd         \u2551 Rilsk\u00e1 3174/6                            \u2551 Prague             \nAstrid    \u2551 Gruber       \u2551 Rotenturmstra\u00dfe 4, 1010 Innere Stadt     \u2551 Vienne             \nDaan      \u2551 Peeters      \u2551 Gr\u00e9trystraat 63                          \u2551 Brussels           \nKara      \u2551 Nielsen      \u2551 S\u00f8nder Boulevard 51                      \u2551 Copenhagen         \nEduardo   \u2551 Martins      \u2551 Rua Dr. Falc\u00e3o Filho, 155                \u2551 S\u00e3o Paulo          \n    .\n    .\n    .\nMark      \u2551 Taylor       \u2551 421 Bourke Street                        \u2551 Sidney             \nDiego     \u2551 Guti\u00e9rrez    \u2551 307 Macacha G\u00fcemes                       \u2551 Buenos Aires       \nLuis      \u2551 Rojas        \u2551 Calle Lira, 198                          \u2551 Santiago           \nManoj     \u2551 Pareek       \u2551 12,Community Centre                      \u2551 Delhi              \nPuja      \u2551 Srivastava   \u2551 3,Raj Bhavan Road                        \u2551 Bangalore          \n\n```\n\n### Creating a database in memory\n```python\nfrom sqlite_integrated import Database\n\n# remember to pass new=True\ndb = Database(\":memory:\", new=True)\n```\n\n### Creating a table with foreign keys\n```python\n# importing the classes\nfrom sqlite_integrated import Database\nfrom sqlite_integrated import Column\nfrom sqlite_integrated import ForeignKey\n\n# Creating a database in memory\ndb = Database(\":memory:\", new=True)\n\n# Creating a table of people\ndb.create_table(\"people\", [\n    Column(\"PersonId\", \"integer\", primary_key=True),\n    Column(\"PersonName\", \"text\")\n])\n\n# Creating a table of groups \ndb.create_table(\"groups\", [\n    Column(\"GroupId\", \"integer\", primary_key=True),\n    Column(\"GroupName\", \"text\")\n])\n\n# A table that links people and the groups they are part off\ndb.create_table(\"person_group\", [\n    Column(\"PersonId\", \"integer\", foreign_key=ForeignKey(\"people\", \"PersonId\", on_update=\"CASCADE\", on_delete=\"SET NULL\"))\n])\n\n# use more=True to show more column information\ndb.overview(more=True)\n```\n\n*Output:*\n```\nTables\n\tpeople\n\t\tPersonId\t\t[Column(PersonId, integer, PRIMARY KEY)]\n\t\tPersonName\t\t[Column(1, PersonName, text)]\n\tgroups\n\t\tGroupId\t\t[Column(GroupId, integer, PRIMARY KEY)]\n\t\tGroupName\t\t[Column(1, GroupName, text)]\n\tperson_group\n\t\tPersonId\t\t[Column(PersonId, integer, FOREIGN KEY (PersonId) REFERENCES people (PersonId) ON UPDATE CASCADE ON DELETE SET NULL)]\n\n```\n\n### Using queries\n\n#### Select Statement\n```python\nfrom sqlite_integrated import Database\n\n# Loading an existing database\ndb = Database(\"tests/test.db\")\n\n# Select statement\nquery = db.SELECT([\"FirstName\"]).FROM(\"customers\").WHERE(\"FirstName\").LIKE(\"T%\")\n\n# Printing the query\nprint(f\"query: {query}\")\n\n# Running the query and printing the results\nprint(f\"Results: {query.run()}\")\n```\n\n*Output:*\n```\nquery: > SELECT FirstName FROM customers WHERE FirstName LIKE 'T%' <\nExecuted sql: SELECT FirstName FROM customers WHERE FirstName LIKE 'T%' \nResults: [DatabaseEntry(table: customers, data: {'FirstName': 'Tim'}), DatabaseEntry(table: customers, data: {'FirstName': 'Terhi'})]\n```\n\nWe can see that there are only two customers with a first name that starts with 't'.\n\nBy default the database prints the sql that is executed in the database, to the terminal. This can be disabled by passing `silent=True` to the `run` method.\n\n#### Insert Statement\n```python\nfrom sqlite_integrated import Database\n\n# Loading an existing database\ndb = Database(\"tests/test.db\")\n\n# Metadata for the entry we are adding\nentry = {\"FirstName\": \"Test\", \"LastName\": \"Testing\", \"Email\": \"test@testing.com\"}\n\n# Adding the entry to the table called \"customers\"\ndb.INSERT_INTO(\"customers\").VALUES(entry).run()\n\n# A little space\nprint(\"\\n\")\n\n# Print the table \ndb.table_overview(\"customers\", get_only=[\"CustomerId\", \"FirstName\", \"LastName\", \"Email\", \"City\"], max_len=10)\n```\n\n*Output:*\n```\n\n\nCustomerId \u2551 FirstName \u2551 LastName     \u2551 Email                         \u2551 City               \n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n1          \u2551 Lu\u00eds      \u2551 Gon\u00e7alves    \u2551 luisg@embraer.com.br          \u2551 S\u00e3o Jos\u00e9 dos Campos\n2          \u2551 Leonie    \u2551 K\u00f6hler       \u2551 leonekohler@surfeu.de         \u2551 Stuttgart          \n3          \u2551 Fran\u00e7ois  \u2551 Tremblay     \u2551 ftremblay@gmail.com           \u2551 Montr\u00e9al           \n4          \u2551 Bj\u00f8rn     \u2551 Hansen       \u2551 bjorn.hansen@yahoo.no         \u2551 Oslo               \n5          \u2551 Franti\u0161ek \u2551 Wichterlov\u00e1  \u2551 frantisekw@jetbrains.com      \u2551 Prague             \n    .\n    .\n    .\n56         \u2551 Diego     \u2551 Guti\u00e9rrez    \u2551 diego.gutierrez@yahoo.ar      \u2551 Buenos Aires       \n57         \u2551 Luis      \u2551 Rojas        \u2551 luisrojas@yahoo.cl            \u2551 Santiago           \n58         \u2551 Manoj     \u2551 Pareek       \u2551 manoj.pareek@rediff.com       \u2551 Delhi              \n59         \u2551 Puja      \u2551 Srivastava   \u2551 puja_srivastava@yahoo.in      \u2551 Bangalore          \n60         \u2551 Test      \u2551 Testing      \u2551 test@testing.com              \u2551 None               \n\n```\n\n#### Update Statement\n```python\nfrom sqlite_integrated import Database\n\n# Loading an existing database\ndb = Database(\"tests/test.db\")\n\n# Printing an overview of the customers table\ndb.table_overview(\"customers\", get_only=[\"CustomerId\", \"FirstName\", \"LastName\", \"City\"], max_len=10)\n\n# Some space\nprint()\n\n# Update all customers with a first name that starts with 'L', so that all their names are now Brian Brianson. \ndb.UPDATE(\"customers\").SET({\"FirstName\": \"Brian\", \"LastName\": \"Brianson\"}).WHERE(\"FirstName\").LIKE(\"L%\").run()\n\n# Some more space\nprint()\n\n# Printing an overview of the updated customers table\ndb.table_overview(\"customers\", get_only=[\"CustomerId\", \"FirstName\", \"LastName\", \"City\"], max_len=10)\n```\n\n*Output:*\n```\nCustomerId \u2551 FirstName \u2551 LastName     \u2551 City               \n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n1          \u2551 Lu\u00eds      \u2551 Gon\u00e7alves    \u2551 S\u00e3o Jos\u00e9 dos Campos\n2          \u2551 Leonie    \u2551 K\u00f6hler       \u2551 Stuttgart          \n3          \u2551 Fran\u00e7ois  \u2551 Tremblay     \u2551 Montr\u00e9al           \n4          \u2551 Bj\u00f8rn     \u2551 Hansen       \u2551 Oslo               \n5          \u2551 Franti\u0161ek \u2551 Wichterlov\u00e1  \u2551 Prague             \n    .\n    .\n    .\n55         \u2551 Mark      \u2551 Taylor       \u2551 Sidney             \n56         \u2551 Diego     \u2551 Guti\u00e9rrez    \u2551 Buenos Aires       \n57         \u2551 Luis      \u2551 Rojas        \u2551 Santiago           \n58         \u2551 Manoj     \u2551 Pareek       \u2551 Delhi              \n59         \u2551 Puja      \u2551 Srivastava   \u2551 Bangalore          \n\n\n\nCustomerId \u2551 FirstName \u2551 LastName     \u2551 City               \n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n1          \u2551 Brian     \u2551 Brianson     \u2551 S\u00e3o Jos\u00e9 dos Campos\n2          \u2551 Brian     \u2551 Brianson     \u2551 Stuttgart          \n3          \u2551 Fran\u00e7ois  \u2551 Tremblay     \u2551 Montr\u00e9al           \n4          \u2551 Bj\u00f8rn     \u2551 Hansen       \u2551 Oslo               \n5          \u2551 Franti\u0161ek \u2551 Wichterlov\u00e1  \u2551 Prague             \n    .\n    .\n    .\n55         \u2551 Mark      \u2551 Taylor       \u2551 Sidney             \n56         \u2551 Diego     \u2551 Guti\u00e9rrez    \u2551 Buenos Aires       \n57         \u2551 Brian     \u2551 Brianson     \u2551 Santiago           \n58         \u2551 Manoj     \u2551 Pareek       \u2551 Delhi              \n59         \u2551 Puja      \u2551 Srivastava   \u2551 Bangalore          \n\n```\n\n### Delete queries\n```python\nfrom sqlite_integrated import Database\nfrom sqlite_integrated import Query\nfrom sqlite_integrated import Column\n\n# Creating a database in memory\ndb = Database(\":memory:\", new=True)\n\n# Adding a table of people\ndb.create_table(\"people\", [\n    Column(\"id\", \"integer\", primary_key=True),\n    Column(\"name\", \"text\")\n])\n\n# Adding a few people\ndb.add_entry({\"name\": \"Peter\"}, \"people\")\ndb.add_entry({\"name\": \"Anna\"}, \"people\")\ndb.add_entry({\"name\": \"Tom\"}, \"people\")\ndb.add_entry({\"name\": \"Mads\"}, \"people\")\ndb.add_entry({\"name\": \"Simon\"}, \"people\")\ndb.add_entry({\"name\": \"Emillie\"}, \"people\")\ndb.add_entry({\"name\": \"Mathias\"}, \"people\")\ndb.add_entry({\"name\": \"Jakob\"}, \"people\")\n\n# ids of entries to delete\nids = [1,2,5,7]\n\nprint(\"Before deletion:\")\ndb.table_overview(\"people\", max_len=10)\n\n# Deletes the ids from the 'people' table\nfor c_id in ids:\n    db.DELETE_FROM(\"people\").WHERE(\"id\", c_id).run()\n\nprint(\"After deletion:\")\ndb.table_overview(\"people\", max_len=10)\n```\n\n*Output:*\n```\nBefore deletion:\nid \u2551 name   \n\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n1  \u2551 Peter  \n2  \u2551 Anna   \n3  \u2551 Tom    \n4  \u2551 Mads   \n5  \u2551 Simon  \n6  \u2551 Emillie\n7  \u2551 Mathias\n8  \u2551 Jakob  \n\nAfter deletion:\nid \u2551 name   \n\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n3  \u2551 Tom    \n4  \u2551 Mads   \n6  \u2551 Emillie\n8  \u2551 Jakob  \n\n```\n\n#### Unattached queries\n```python\nfrom sqlite_integrated import Database\nfrom sqlite_integrated import Query\n\n# Loading an existing database\ndb1 = Database(\"tests/test.db\")\n\n# Loading the same database to a different variable\ndb2 = Database(\"tests/test.db\")\n\n# Updating the first entry in the first database only\ndb1.UPDATE(\"customers\").SET({\"FirstName\": \"Allan\", \"LastName\": \"Changed\"}).WHERE(\"CustomerId\", 1).run()\n\n# This query gets the first entry in the customers table\nquery = Query().SELECT().FROM(\"customers\").WHERE(\"CustomerId = 1\")\n\n# Running the query on each database and printing the output.\nout1 = query.run(db1)\nout2 = query.run(db2)\n\n# Printing the outputs\nprint(f\"\\ndb1 output: {out1}\")\nprint(f\"\\ndb2 output: {out2}\")\n```\n\n*Output:*\n```\n\ndb1 output: [DatabaseEntry(table: customers, data: {'CustomerId': 1, 'FirstName': 'Allan', 'LastName': 'Changed', 'Company': 'Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.', 'Address': 'Av. Brigadeiro Faria Lima, 2170', 'City': 'S\u00e3o Jos\u00e9 dos Campos', 'State': 'SP', 'Country': 'Brazil', 'PostalCode': '12227-000', 'Phone': '+55 (12) 3923-5555', 'Fax': '+55 (12) 3923-5566', 'Email': 'luisg@embraer.com.br', 'SupportRepId': 3})]\n\ndb2 output: [DatabaseEntry(table: customers, data: {'CustomerId': 1, 'FirstName': 'Lu\u00eds', 'LastName': 'Gon\u00e7alves', 'Company': 'Embraer - Empresa Brasileira de Aeron\u00e1utica S.A.', 'Address': 'Av. Brigadeiro Faria Lima, 2170', 'City': 'S\u00e3o Jos\u00e9 dos Campos', 'State': 'SP', 'Country': 'Brazil', 'PostalCode': '12227-000', 'Phone': '+55 (12) 3923-5555', 'Fax': '+55 (12) 3923-5566', 'Email': 'luisg@embraer.com.br', 'SupportRepId': 3})]\n```\n\n# Contributing\nI would be more than happy if anyone finds this useful enough to add to, or modify this code.\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/BalderHolst/sqlite-integrated",
            "keywords": "",
            "license": "MIT",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sqlite-integrated",
            "package_url": "https://pypi.org/project/sqlite-integrated/",
            "platform": null,
            "project_url": "https://pypi.org/project/sqlite-integrated/",
            "project_urls": {
                "Homepage": "https://github.com/BalderHolst/sqlite-integrated"
            },
            "release_url": "https://pypi.org/project/sqlite-integrated/0.0.4/",
            "requires_dist": [
                "pandas (>=1.3.5)",
                "pytest ; extra == 'dev'"
            ],
            "requires_python": ">=3.7",
            "summary": "Easily manipulate sqlite3 databases with simple syntax",
            "version": "0.0.4",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15204977,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "be275e5c3f33eb3cd88b4520be01e092",
                    "sha256": "09fd46af842f17f9a83c0f60c56c9de7739b11d2ad4bf54c2f301c1d6263eff8"
                },
                "downloads": -1,
                "filename": "sqlite_integrated-0.0.4-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "be275e5c3f33eb3cd88b4520be01e092",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 15658,
                "upload_time": "2022-09-25T14:12:17",
                "upload_time_iso_8601": "2022-09-25T14:12:17.483243Z",
                "url": "https://files.pythonhosted.org/packages/6a/1a/75621bb66ba34199c757e67c58ca471f2a28521ff6f4a359177e8d2eb940/sqlite_integrated-0.0.4-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "b9e4a63b53ca26d6a02984372ea1b950",
                    "sha256": "72f4456532bb057e3439a9afcf4a11a0ab6eef9f910f6c66af42efc25985c85a"
                },
                "downloads": -1,
                "filename": "sqlite-integrated-0.0.4.tar.gz",
                "has_sig": false,
                "md5_digest": "b9e4a63b53ca26d6a02984372ea1b950",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 386984,
                "upload_time": "2022-09-25T14:12:20",
                "upload_time_iso_8601": "2022-09-25T14:12:20.115560Z",
                "url": "https://files.pythonhosted.org/packages/d0/36/6d4940c31d532b38ab6163fb16216780b5c54d2f9b8b29b806aba1d59bf1/sqlite-integrated-0.0.4.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}