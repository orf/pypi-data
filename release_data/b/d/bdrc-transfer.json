{
    "0.0.3": {
        "info": {
            "author": "jimk",
            "author_email": "jimk@tbrc.org",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# BDRC OCR Library\n`bdrc-ocr` is a Python library and console script package that\nprovides SFTP and other services to implement the BDRC workflow to send\nBDRC works to a remote site for OCR production, and receive, unpack, and distribute\nthe resulting works.\n\n## Installation\n`pip install bdrc-transfer`\n\nThen, once only, run:\n`gb-bdrc-init`\n\n## Getting Started\nThe Google Books manual workflow is:\n1. Identify works to send to Google Books\n2. Create and upload the metadata for that list  (`upload-metadata`)\n3. Create a list of paths to the works on that list, and upload that (`upload content`) **Note that a specially configured audit-tool validates the content before upload.**\n4. Wait for some time for Google to process the content. This can be a day to a week.\n5. When the material is ready for conversion,\n   1. [GB TBRC InProcess Page](https://books.google.com/libraries/TBRC/_in_process) - select and save the 'text only' version\n   2. Select the checkbox for every work (remember there may be multiple pages)\n   3. click \"request conversion\" for them\n6. Wait for some time, and then use GRIN to get the list of files that GB has converted, and which are ready to download, \n7. Browse to [GB TBRC Converted Page](https://books.google.com/libraries/TBRC/_converted). For each line you find:\n   1. In the browser, select the ....pgp.gz file  (they're links) in turn and download it.\n   2. On the command line:\n      1. run `unpack` on the downloaded archive\n      2. run `distribute_ocr` on the resulting work structure\n## Runtime\n\n### Environment configuration\n\n`bdrc-transfer` requires these environment variables, unless overridden on the command line. \n(Overriding is not recommended in production)\n\n`GB_CONFIG` - Path to the configuration file, which contains authorization and other essential data.\nThe name and contents of this file should be closely held in the development team\n\n`RUN_ACTIVITY_LOG_HOME` Path where all log files are stored. It can be overridden with the `-l --log_home` \nparameter to all the run-time operations. The value in production will be `RS2://Processing/logs/google-books`\n(where `_project_name_` is also closely held.)\n\n`GB_GRIN_OAUTH_CREDS_PATH` Path to the GRIN automation credentials file. Closely held\n####  Logging\nOne requirement of this package is that there be a single, authoritative log of activities. In development,\nthere will be testing attempts. It should be easy to add the logs of these testing attempts to the single log.\nEach `gb_ocr` operation defines a tuple of _activity_ and _destination_. \n\nThe _activity_ values are:\n- upload\n- request_conversion\n- unpack\n- distribute\n\nand the _destination_ values are:\n- metadata\n- content\n\nThe resulting set of log files this package creates are:\n\n- upload_metadata-activity.log\n- upload_metadata-runtime.log\n- upload_content-activity.log\n- upload_content-runtime.log\n- request_conversion-activity.log\n- request_conversion-runtime.log\n- transfer-activity.log\n- transfer-runtime.log\n- unpack-activity.log\n- unpack-runtime.log\n\n\n##### Runtime log\nThis is a free-form console log for diagnostic and informational purposes.\n##### Activity log\nThis is the canonical log file for the activity. Each activity module in the `gb_ocr` Its structure is optimized for\nprogrammatic import, not human readability\n\n##### Log file naming\nLog files are intended to be continuous, and are not concurrency safe. *Activity logs* are intended to be singular\nacross the whole BDRC network, so there *must* be only one activity instance writing at a time.\n(As of 7 Jun 2022, this is not enforced)\n\n### Available commands\n                   unpack\n                   relocate-downloads\n                   gb-convert\n                   move-downloads\n                   upload-metadata\n                   distribute-ocr\n                   upload-content\n#### Common Options\nAll commands in this section share these common options:\n\n```shell\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LOG_HOME, --log_home LOG_HOME\n                        Where logs are stored - see manual\n  -n, --dry_run         Connect only. Do not upload\n  -d {info,warning,error,debug,critical}, --debug_level {info,warning,error,debug,critical}\n                        choice values are from python logging module\n  -z, --log_after_fact  (ex post facto) log a successful activity after it was performed out of band\n  -i [FILE], --input_file [FILE]\n                        files to read. use - for stdin\n```\n---\n#### upload-metadata\n```shell\nusage: upload-metadata [-h] [-l LOG_HOME] [-n] [-d {info,warning,error,debug,critical}] [-z] [-i [FILE]] [work_rid]\n\nCreates and sends metadata to gb\n\npositional arguments:\n  work_rid              Work ID\n```\n---\n#### unpack\n```shell\nusage: unpack [-h] [-l LOG_HOME] [-n] [-d {info,warning,error,debug,critical}] [-z] [-i [FILE]] [src]\n\nUnpacks an artifact\n\npositional arguments:\n  src                   xxx.tar.gz.gpg file to unpack\n```\n\nUnpacks a downloaded GB processed artifact (Note that the download is not FTP,\nso there is no API to download. In 0.0.1, this is a manual operation)\n\n---\n#### gb-convert\nThis is a stub function, which simulates requesting a conversion from the Google books\nweb UI. It simply logs the fact that the user has checked a whole list of items to convert.\nUsually the user will have to download the list from gb, extract the image group rids, and feed them\ninto this program.\n\n```shell\nusage: gb-convert [-h] [-l LOG_HOME] [-n] [-d {info,warning,error,debug,critical}] [-z] [-i [FILE]] [image_group]\n\nRequests conversion of an uploaded content image group\n\npositional arguments:\n  image_group           workRid-ImageGroupRid - no file suffixes\n```\n\n---\n#### ftp-transfer\nThis is a low level utility function, which should not generally be used in the workflow.\n```shell\nusage: ftp-transfer [-h] [-l LOG_HOME] [-n] [-d {info,warning,error,debug,critical}] [-z] [-i [FILE]] [-m | -c] [-p | -g]\n                    src [dest]\n\nUploads a file to a specific partner server, defined by a section in the config file\n\npositional arguments:\n  src                   source file for transfer\n  dest                  [Optional] destination file - defaults to basename of source\n\noptional arguments:\n                        files to read. use - for stdin\n  -m, --metadata        Act on metadata target\n  -c, --content         Act on the content target\n  -p, --put             send to\n  -g, --get             get from (NOT IMPLEMENTED)\n```\n\n\n### Launching\nDefine the environment variable  `GB_CONFIG` to point to the configuration file for the project. The configuration file\nis the access point to GB's sftp host, and is tightly controlled.\n\n### Activity Tracking and Logging\nActivity tracing is the responsibility of the `log_ocr` package.\nThe `log_ocr` has a public module `AORunLog.py` which contains the `AORunActivityLog` class. This class offers three\ninterfaces to its clients. These are separated into two groups: `logging` implementations, and database implementations\n#### Logging\nThese are Python `logging` instances, and offer the complete `logging` interface \n- `activity_logger`\n- `runtime_logger`\n\n#### Database implementation\nThe database implementation is a replacement for the activity logger, which is a simple canonical journal of GB OCR processing.\n- `activity_db_logger` This is an instance of class `log_ocr.GbOcrTrack.GbOcrTracker`. This exposes the following methods:\n  * add_content_request - Records a content process step:\n    * upload\n    * request_conversion\n    * download image groups which GB has processed\n    * distribute\n- get_ready_to_convert: Gets a list of image groups which GB has received, but we have not requested conversion\n- get_converted: Gets a list of image groups which GB has converted, but we have not downloaded.\n\n\nThe property `log_ocr.AORunLog.activity_db_logger` is the replacement for the \"activity\" tracking log discussed below.\nIt does not use the python `logging` API, but its own specific methods, which are found in `log_ocr.\n### Logging\n\n#### Log store\nThe default directory for logging can be given in these directives:\n1. the current working directory is the default, in the absence of these next entries.\n2. Environment variable `RUN_ACTIVITY_LOG_HOME`.\n3. the `-l/--log_home` argument to `ftp-transfer`. Overrides the environment variable if given\n\n#### Log files\n`ftp_transfer` logs two kids of activity:\n- runtime logs, `transfer-runtime.log` describing details of an operation. The content of this log is affected by the `-d` flag.\n- activity logs. `transfer-activity.log`. They provide limited, but auditable information on: \n  - the activity subject (metadata or content)\n  - the activity outcome (success or fail)\nIt is the caller's responsibility to aggregate activity logs into a coherent view of activity.\n\n#### Log format\n##### Runtime Format\nshort date time:message:content descriptor\n\nExample:\n```\n06-03 15:29:INFO:upload success /Users/jimk/dev/tmp/aog1/META/marc-W2PD17457.xml:metadata\n```\n\n#### Activity Format\n\nDate mm-DD-YYYY HH-MM-SS:operation:status:message:content descriptor\n\nExample:\n```\n06-06-2022 20-28-06:get:error:/Users/jimk/dev/tmp/aog1/META/marc-W2PD17457.xml:metadata:\n```\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "bdrc-transfer",
            "package_url": "https://pypi.org/project/bdrc-transfer/",
            "platform": null,
            "project_url": "https://pypi.org/project/bdrc-transfer/",
            "project_urls": null,
            "release_url": "https://pypi.org/project/bdrc-transfer/0.0.3/",
            "requires_dist": [
                "paramiko",
                "urllib3",
                "bdrc-util",
                "sqlalchemy",
                "boto3",
                "botocore",
                "bdrc-DBApps"
            ],
            "requires_python": ">=3.7",
            "summary": "Transfer library",
            "version": "0.0.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15217733,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "bb74d5b4fe5739083bd4cd3bd4ade4c7",
                    "sha256": "db0c825ee701b2e9b7310a8028faca4f1d4113602c3977e6b6e6b2a7c6168e83"
                },
                "downloads": -1,
                "filename": "bdrc_transfer-0.0.3-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "bb74d5b4fe5739083bd4cd3bd4ade4c7",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 51607,
                "upload_time": "2022-09-26T17:32:30",
                "upload_time_iso_8601": "2022-09-26T17:32:30.326703Z",
                "url": "https://files.pythonhosted.org/packages/f5/a4/2eaa3e320e4610c27664bc2a681e6fdc1f511584d480d9a9714fa504f516/bdrc_transfer-0.0.3-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}