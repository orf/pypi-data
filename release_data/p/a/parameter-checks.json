{
    "0.1.0": {
        "info": {
            "author": "Sebastian M\u00fcller",
            "author_email": "sebastian.nicolas.mueller@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "parameters,checks,types,dynamic",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "parameter-checks",
            "package_url": "https://pypi.org/project/parameter-checks/",
            "platform": null,
            "project_url": "https://pypi.org/project/parameter-checks/",
            "project_urls": {
                "repository": "https://github.com/snimu/parameter-checks"
            },
            "release_url": "https://pypi.org/project/parameter-checks/0.1.0/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Add checks to parameters (and return values) to functions.",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16165656,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "5178ff079d5cdd484b9f98f8a3ddd129",
                    "sha256": "9922261c957837f2ddf24aacd38c5da13fc35ba38eeae3b7067950f9ddf583a9"
                },
                "downloads": -1,
                "filename": "parameter_checks-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "5178ff079d5cdd484b9f98f8a3ddd129",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 4920,
                "upload_time": "2022-12-20T18:03:42",
                "upload_time_iso_8601": "2022-12-20T18:03:42.463676Z",
                "url": "https://files.pythonhosted.org/packages/df/c3/7519fbc7a0f797a690704c6ea774e78e36218a05de65f5fee6724e0281d5/parameter_checks-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "0aeacd486cd3dbdb864a6b77a3674830",
                    "sha256": "d291f4ced2b8a16226d2e16e36186bfcf2671387c0d6bf0c9f5c67248a6adaac"
                },
                "downloads": -1,
                "filename": "parameter-checks-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "0aeacd486cd3dbdb864a6b77a3674830",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 4459,
                "upload_time": "2022-12-20T18:03:44",
                "upload_time_iso_8601": "2022-12-20T18:03:44.112233Z",
                "url": "https://files.pythonhosted.org/packages/d9/f3/2b099110b20a64acf448076ba44a0c2fcf00abe875930d1dc907cda525e2/parameter-checks-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.1.1": {
        "info": {
            "author": "Sebastian M\u00fcller",
            "author_email": "sebastian.nicolas.mueller@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9"
            ],
            "description": "# parameter-checks\n\nExtend typehints to include dynamic checks (that might otherwise be dealt with by assertions) in Python.\n\n**Project**\n\n![PyPI Version](https://img.shields.io/pypi/v/parameter_checks)\n![Wheel](https://img.shields.io/pypi/wheel/parameter_checks)\n\n**Tests**\n\n![Tests](https://github.com/snimu/parameter-checks/actions/workflows/tests.yml/badge.svg)\n![Coverage](coverage.svg)\n\n**Misc**\n\n![License](https://img.shields.io/github/license/snimu/parameter-checks)\n![Python Versions](https://img.shields.io/pypi/pyversions/parameter_checks)\n\n**Installation: Pip**\n\n```bash\npip3 install parameter_checks\n```\n\n**Comment**\n\n- A proper documentation is (likely) coming\n- A conda-build may or may not come\n\n## Example: Checks\n\nWorks something like this:\n\n```python\nimport parameter_checks as pc\nimport enum\n\n\nclass Status(enum.Enum):\n  FAILURE = 0\n  SAVED = 1\n  DISPLAYED = 2\n\n\n@pc.hints.cleanup  # Cleans up annotations\n@pc.hints.enforce  # Enforces the checks\ndef function(\n        rescale: pc.annotations.Checks[\n          float,\n          lambda a: 1. < a < 25.\n        ],\n        file: pc.annotations.Checks[\n          str,\n          lambda file: file.endswith(\".jpg\") or file.endswith(\".png\"),\n          lambda file: not file.endswith(\"private.jpg\") and not file.endswith(\"private.jpg\"),\n          lambda file: not file.startswith(\"_\")\n        ]\n) -> pc.annotations.Checks[Status, lambda r: r != Status.FAILURE]:\n  ...\n```\n\nAs can be seen in this example, this package provides a new type-annotation: [pc.annotations.Checks](#pcannotationschecks)\n(it also provides [pc.annotations.Hooks](#pcannotationshooks), as seen in the example below). \n\n### pc.annotations.Checks\n\n**Construction**\n\nAs seen in the [example](#example--checks), `pc.annotations.Checks` is constructed via its \n`__getitem__`-method to conform to the type-hinting from [typing](https://docs.python.org/3/library/typing.html).\n\nThe first parameter in the brackets can either be a type-hint or a callable. All others must be callables, or they will \nbe ignored by [@pc.hints.enforce](#pchintsenforce) and [@pc.hints.cleanup](#pchintscleanup). Any callable is assumed \nto take one argument&mdash;the parameter&mdash;and return a `bool`. \nIf that bool is `False`, a `ValueError` will be raised. These callables will be referred to as \"check functions\" \nfrom hereon out.\n\n**Explanation with examples**\n\nUsing this annotation on a parameter- or return-hint of a callable that is decorated with \n[@pc.hints.enforce](#pchintsenforce) means that the check-functions in the `Checks`-hint \nwill be executed and, if they fail, will raise a ValueError \nwith that looks something like this:\n\n    ValueError: Check failed! \n        - function: foo\n        - parameter: a\n\nFor the following function:\n\n```python\nimport parameter_checks as pc\n\n\n@pc.hints.enforce\ndef foo(a: pc.annotations.Checks[lambda a: a != 0]):\n    ... \n\n\nfoo(0)   # raises ValueError\n```\n\nThe error-output will be improved upon with more information to make the traceback easier.\n\n\n### pc.annotations.Hooks\n\nThis works similar to [pc.annotations.Checks](#pcannotationschecks), except that its check-functions work differently.\n\nThe first item in the brackets can again be a type or a callable, but the callables are now assumed to work \ndifferently: \n\n- They take four arguments in the following order: \n  1. **fct**: the function that was decorated by [@pc.hints.enforce](#pchintsenforce).\n  2. **parameter**: the value of the parameter that is annotated.\n  3. **parameter_name**: the name of that parameter.\n  4. **typehint**: the typehint.\n- They return the parameter &ndash; however modified. \n\n**Example**\n\n```python\nimport parameter_checks as pc\n\n\ndef hook_function(fct, parameter, parameter_name, typehint):\n    if type(parameter) is not typehint.typehint:\n        err_str = f\"In function {fct}, parameter {parameter_name}={parameter} \" \\\n                  f\"is not of type {typehint.typehint}!\"\n        raise TypeError(err_str)\n    \n    # Yes, the following calculation should be in the function-body,\n    #   but it demonstrates that arbitrary changes can be made here,\n    #   which might be useful if, for example, some conversion has \n    #   to happen in many parameters of many functions. \n    # Moving that conversion into its own function and calling it \n    #   in the typehint might make the program more readable than \n    #   packing it into the function-body.\n    return 3 + 4 * parameter - parameter**2   \n\n\n@pc.hints.enforce\ndef foo(a: pc.annotations.Hooks[int, hook_function]):\n    return a \n```\n\nYou can also use multiple hook-functions, which will be called on each other's output in the order\nin which they are given to `pc.annotations.Hooks`.\n\n### @pc.hints.enforce\n\nThis decorator enforces the two above-mentioned hints ([pc.annotations.Checks](#pcannotationschecks) \nand [pc.annotations.Hooks](#pcannotationshooks)) for a callable. \n\n**CAREFUL** This decorator *doesn't* enforce type-hints, but only the check-functions. Type-hints \nare only there for [@pc.hints.cleanup](#pchintscleanup).\n\n### @pc.hints.cleanup\n\nThis decorator removes any hint of `pc.annotations.Checks` (and `pc.annotations.Hooks`, as described below). This means that a \nfunction annotated as follows:\n\n```python \nimport parameter_checks as pc \n\n\n@pc.hints.cleanup\n@pc.hints.enforce\ndef foo(\n        a: int, \n        b: pc.annotations.Checks[int, ...], \n        c\n) -> pc.annotations.Checks[...]:\n    ...\n```\n\nwhich is excpected to have the following `__annotations__`: \n\n`{'a': int, 'b': pc.annotations.Checks[int, ...], 'return': pc.annotations.Checks[...]`\n\nnow actually has these annotations:\n\n`{'a': int, 'b': int}`\n\nThis way, other decorators can work as usual. This is important as `@pc.hints.enforce` doesn't enforce \n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "parameters,checks,types,dynamic",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "parameter-checks",
            "package_url": "https://pypi.org/project/parameter-checks/",
            "platform": null,
            "project_url": "https://pypi.org/project/parameter-checks/",
            "project_urls": {
                "repository": "https://github.com/snimu/parameter-checks"
            },
            "release_url": "https://pypi.org/project/parameter-checks/0.1.1/",
            "requires_dist": null,
            "requires_python": ">=3.8",
            "summary": "Extend typehints to include dynamic checks (that might otherwise be dealt with by assertions) in Python.",
            "version": "0.1.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16165656,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "2f07ebadbc82fb527cbd75a4b1e29146",
                    "sha256": "08798bd61e0f782a4515d15bfafa96a461b859693c85f7e540d99432d284aa17"
                },
                "downloads": -1,
                "filename": "parameter_checks-0.1.1-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "2f07ebadbc82fb527cbd75a4b1e29146",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.8",
                "size": 6239,
                "upload_time": "2022-12-20T20:44:01",
                "upload_time_iso_8601": "2022-12-20T20:44:01.184487Z",
                "url": "https://files.pythonhosted.org/packages/3d/43/ceaf00c2de8bbeef58feb11969c1211834b5efe682e7b2a33b4464e52e35/parameter_checks-0.1.1-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "840032655ba98ae00476fa09ff4a88ee",
                    "sha256": "8ecdd6a5f382cdfd5b745f9c09c213ffc76d8378045f18bf38bcbb7b22c08054"
                },
                "downloads": -1,
                "filename": "parameter-checks-0.1.1.tar.gz",
                "has_sig": false,
                "md5_digest": "840032655ba98ae00476fa09ff4a88ee",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.8",
                "size": 6010,
                "upload_time": "2022-12-20T20:44:02",
                "upload_time_iso_8601": "2022-12-20T20:44:02.880589Z",
                "url": "https://files.pythonhosted.org/packages/56/31/4a3aa1cb0d8af79831c9cd301c9c20b0c561124f6b64feba20f554eaf26a/parameter-checks-0.1.1.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}