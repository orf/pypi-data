{
    "1.0": {
        "info": {
            "author": "",
            "author_email": "diego <caikaidi@caikaidi.cn>",
            "bugtrack_url": null,
            "classifiers": [
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3"
            ],
            "description": "# sciplot\nA scientific style plot tool based on matplotlib.\n\n![Style demonstration](./example/Figure_1.png)\n\n## Features\n\n- Plot figures for scientific articles painlessly, with right size, font, and others.\n- Quick preview, quick as hell.\n- Supporting three built in styles and custom style.\n  - (a) Color cycle, looks cleaner for online journals.\n  - (b) Color and marker cycle, support black-and-white view.\n  - (c) Line style and marker cycle, support up to 16 lines without repeat.\n  - (d) Custom style, easy to set and useful when you got several groups of curves.\n\n## Install\n\nInstall by pip:\n```shell\npip install sciplot\n```\n\nImport the package:\n```python\nfrom diego_plot import sciplot\n```\n## mini demo\n\nTo preview the figure comes from your data, the fast way is just `SciPlot(x, y)`. \nNo configurations needed, you'll get a pretty much finished figure. \nOptionally, label, legend, and tag could be given as keyword arguments.\n\n```python\n# This demo gives the figure (a) above.\nimport numpy as np\nfrom diego_plot import sciplot\n\nx = np.linspace(0, 10, 100)\ny = np.array([(a + 1) * np.sin(x) for a in range(4)])\nsciplot.SciPlot(x, y,\n                label=['x-axis', 'y-axis'],\n                legend=['line {}'.format(n + 1) for n in range(4)],\n                tag='(a)')\n```\n\nThe data, `x` and `y`, could be in different kinds of.\n\n- A single curve like `x = [x1, x2, ...]` and `y = [y1, y2, ...]` is fine.\n- Multiple curves with same `x` coordinates should be given like `x = [x1, x2, ...]` and\n  `y = [[curve1_y1, curve1_y2, ...], [curve2_y1, curve2_y2, ...], ...]`\n- Of course, multiple curves can have different `x` coordinates,\n  just give both `x` and `y` in the form of `[[...],[...],...]`.\n  And make sure they are within the same length.\n\n## Fine tuning\n\nA fine-tuning is needed to generate the final product.\nIn this case, you are supposed to use the `sciplot` in a detailed way.\nThere are up to 6 steps: load data, plot data, plot label, plot legend, plot tag, and show.\n\n```python\n# This demo gives the figure (b) above.\nimport numpy as np\nfrom diego_plot import sciplot\n\nx = np.linspace(0, 10, 30)\ny = np.array([(a + 1) * np.sin(x) for a in range(4)])\nsp = sciplot.SciPlot()\nsp.manual_load(x, y, ['x-axis', 'y-axis'], ['line {}'.format(n + 1) for n in range(4)])\nsp.plot_data(1)  # 1 for style 1. Currently, there are 3 built in styles, 0, 1, and 2. \n# Corresponding to figure (a), (b), and (c).\n\nsp.plot_label()  # Optionally, label can be given here as a parameter.\nsp.plot_legend()  # Optionally, legend can be given here as a parameter.\n\nsp.plot_tag('(b)')  # The position of the tag is configurable, see annotation of this function.\nsp.show()  # Comes with an auto-tight function. Pass through auto_tight=False to disable it.\n```\n\nApart those steps means you can write your own, customized ones. Or add some operations before `show()`.\nChange the range of axis is often used to make curves looks better, or avoid interfering with legend and tag.\nThis is change by `sp.ax`, which is exactly the axis object of `matplotlib`. \nYou should see the documentation of `matplotlib` for more, but I'll list some useful functions.\n\n```python\n# axis span range\nsp.ax.set_xlim([0, 1])\nsp.ax.set_ylim([0, 1])\n# where are the scale lines\nsp.ax.set_xticks([0, 0.5, 1])\nsp.ax.set_yticks([0, 0.5, 1])\n# plot text, lines, annotates\nsp.ax.text()\nsp.ax.hline()\nsp.ax.vline()\nsp.ax.annotate()\n# create another y-axis\nax2 = sp.ax.twinx()  \n```\n\n## Load data\n\nData can be load in different ways.\nThey can be load manually by `sp.manual_load()`, or load form `txt`, `npz`, and `csv` files.\nFor data generated by python, `npz` is strongly recommended.\n`sciplot` have three built-in functions to load these data: `load_npz()`, `load_txt()`, `load_csv()`.\nThese functions are coding for my use case. \nAnnotations are given about how the data are organized.",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "",
            "license": "",
            "maintainer": "",
            "maintainer_email": "",
            "name": "diego-plot",
            "package_url": "https://pypi.org/project/diego-plot/",
            "platform": null,
            "project_url": "https://pypi.org/project/diego-plot/",
            "project_urls": {
                "Bug Tracker": "https://github.com/caikaidi/sciplot/issues",
                "Homepage": "https://github.com/caikaidi/sciplot"
            },
            "release_url": "https://pypi.org/project/diego-plot/1.0/",
            "requires_dist": [
                "cycler",
                "matplotlib",
                "numpy"
            ],
            "requires_python": ">=3.7",
            "summary": "A scientific style plot tool based on matplotlib.",
            "version": "1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 15836029,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "eb8c7062ebe587abfef9d2de33b5c06e",
                    "sha256": "173638cf960ef88b5353e15da5646c1da33114796a3b607c495a7610c7ae36ae"
                },
                "downloads": -1,
                "filename": "diego_plot-1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "eb8c7062ebe587abfef9d2de33b5c06e",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.7",
                "size": 6721,
                "upload_time": "2022-11-21T04:23:59",
                "upload_time_iso_8601": "2022-11-21T04:23:59.471553Z",
                "url": "https://files.pythonhosted.org/packages/ba/95/f8bfef6ef94b93e3ff51669ffed73ca4d3e41fc839688ddfa8424e0960ef/diego_plot-1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "e0f9c5e07d9ca739de317562f5d8be5e",
                    "sha256": "9f8cda4d21bca583d85ea84a5cc34a031141edea944b906525f8193353212b0a"
                },
                "downloads": -1,
                "filename": "diego_plot-1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "e0f9c5e07d9ca739de317562f5d8be5e",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.7",
                "size": 220685,
                "upload_time": "2022-11-21T04:24:02",
                "upload_time_iso_8601": "2022-11-21T04:24:02.498341Z",
                "url": "https://files.pythonhosted.org/packages/4f/1d/cf116b8de3acc4214efc7ea5bd30fa69e920cce9aeec2d8e57651f52d838/diego_plot-1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}