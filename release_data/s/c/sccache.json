{
    "0.3.1": {
        "info": {
            "author": "Ted Mielczarek <ted@mielczarek.org>, Alex Crichton <alex@alexcrichton.com>",
            "author_email": "Ted Mielczarek <ted@mielczarek.org>, Alex Crichton <alex@alexcrichton.com>",
            "bugtrack_url": null,
            "classifiers": [],
            "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "",
            "keywords": "ccache",
            "license": "Apache-2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "sccache",
            "package_url": "https://pypi.org/project/sccache/",
            "platform": null,
            "project_url": "https://pypi.org/project/sccache/",
            "project_urls": {
                "Source Code": "https://github.com/mozilla/sccache/"
            },
            "release_url": "https://pypi.org/project/sccache/0.3.1/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Sccache is a ccache-like tool. It is used as a compiler wrapper and avoids compilation when possible, storing a cache in a remote storage using the S3 API.",
            "version": "0.3.1",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16043570,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "28c7ed5117212f26e8db71611cf0d2db",
                    "sha256": "c511625069bac66579a35e051569ea7c4a7ce2f080d1b63e6dc63473f0ce4473"
                },
                "downloads": -1,
                "filename": "sccache-0.3.1-py3-none-macosx_10_7_x86_64.whl",
                "has_sig": false,
                "md5_digest": "28c7ed5117212f26e8db71611cf0d2db",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7976748,
                "upload_time": "2022-12-01T08:55:10",
                "upload_time_iso_8601": "2022-12-01T08:55:10.145481Z",
                "url": "https://files.pythonhosted.org/packages/df/59/4c5525c1ba76512612314d68d645cc15bc95e665c9f0f36842ffe0d0f360/sccache-0.3.1-py3-none-macosx_10_7_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "df6e120ebdf718e24b3d488c295be197",
                    "sha256": "adee54270b5c8af2508a69eca8d44660b8f734357a4c9009a85f3b44bba1d14b"
                },
                "downloads": -1,
                "filename": "sccache-0.3.1-py3-none-macosx_10_9_arm64.whl",
                "has_sig": false,
                "md5_digest": "df6e120ebdf718e24b3d488c295be197",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7337032,
                "upload_time": "2022-12-01T08:38:50",
                "upload_time_iso_8601": "2022-12-01T08:38:50.473675Z",
                "url": "https://files.pythonhosted.org/packages/c5/46/bcbf444047119eefb8f320ffa1849f79640b1ea6ae48d2ef6afd1730c21a/sccache-0.3.1-py3-none-macosx_10_9_arm64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "40c57513cc1a4b27ef25ca4dadc11671",
                    "sha256": "9ca1891b57ccff393da61b9e2ebfe0c0b2dcfd21b5cce485f34d4e5d443f8e82"
                },
                "downloads": -1,
                "filename": "sccache-0.3.1-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "40c57513cc1a4b27ef25ca4dadc11671",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 10423151,
                "upload_time": "2022-12-01T08:55:13",
                "upload_time_iso_8601": "2022-12-01T08:55:13.469407Z",
                "url": "https://files.pythonhosted.org/packages/c3/5a/cd708738502d44d76ba8f223fcdf7395a5a7223853c5ad766ed2b47538da/sccache-0.3.1-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "66f89e82d1bbdd6a82f00b64a12b4fb2",
                    "sha256": "a31036f793abb83ac2999c7b8ddf230ee0f7842b23f1595f47b781eb1901f257"
                },
                "downloads": -1,
                "filename": "sccache-0.3.1-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl",
                "has_sig": false,
                "md5_digest": "66f89e82d1bbdd6a82f00b64a12b4fb2",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 11399854,
                "upload_time": "2022-12-01T08:55:16",
                "upload_time_iso_8601": "2022-12-01T08:55:16.503068Z",
                "url": "https://files.pythonhosted.org/packages/fb/a2/ad258817f96819ef51b2463f7d5402ac80484bdcc8376a1eee003fce2a9c/sccache-0.3.1-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "089b4270ad6984d5397c0a0943a04f1d",
                    "sha256": "a5f8fb1486adefffc4cb4a62be3bcf9f3c2ef81a26374344585b0be2ff28f4a3"
                },
                "downloads": -1,
                "filename": "sccache-0.3.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "089b4270ad6984d5397c0a0943a04f1d",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 17402563,
                "upload_time": "2022-12-01T08:55:19",
                "upload_time_iso_8601": "2022-12-01T08:55:19.416491Z",
                "url": "https://files.pythonhosted.org/packages/4e/1b/c365f8dac9f38b0d52086ef12a5eb60710f092f8e969fb95ada933eff92e/sccache-0.3.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "715b1ae9b3ffeee8d1fbd11ab0d8a5a1",
                    "sha256": "e76d3df896d8bdee10712f91bcd5014b0a39ccb1d7acdf525720e6a0cbfbe55b"
                },
                "downloads": -1,
                "filename": "sccache-0.3.1-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "715b1ae9b3ffeee8d1fbd11ab0d8a5a1",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 6450987,
                "upload_time": "2022-12-01T08:55:22",
                "upload_time_iso_8601": "2022-12-01T08:55:22.130669Z",
                "url": "https://files.pythonhosted.org/packages/9c/85/231d1d1dc2fc831e8eed59cecc3deda41ceb6ade4d25b46e2decc1a0d4e2/sccache-0.3.1-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    },
    "0.3.3": {
        "info": {
            "author": "Ted Mielczarek <ted@mielczarek.org>, Alex Crichton <alex@alexcrichton.com>",
            "author_email": "Ted Mielczarek <ted@mielczarek.org>, Alex Crichton <alex@alexcrichton.com>",
            "bugtrack_url": null,
            "classifiers": [],
            "description": "[![Build Status](https://github.com/mozilla/sccache/workflows/ci/badge.svg)](https://github.com/mozilla/sccache/actions?query=workflow%3Aci)\n[![Crates.io](https://img.shields.io/crates/v/sccache.svg)](https://crates.io/crates/sccache)\n[![Matrix](https://img.shields.io/matrix/sccache:mozilla.org)](https://chat.mozilla.org/#/room/#sccache:mozilla.org)\n![Crates.io](https://img.shields.io/crates/l/sccache)\n[![dependency status](https://deps.rs/repo/github/mozilla/sccache/status.svg)](https://deps.rs/repo/github/mozilla/sccache)\n\n[![CodeCov](https://codecov.io/gh/mozilla/sccache/branch/master/graph/badge.svg)](https://codecov.io/gh/mozilla/sccache)\n\n\nsccache - Shared Compilation Cache\n==================================\n\nsccache is a [ccache](https://ccache.dev/)-like compiler caching tool. It is used as a compiler wrapper and avoids compilation when possible, storing cached results either on [local disk](#local) or in one of [several cloud storage backends](#storage-options).\n\nsccache includes support for caching the compilation of C/C++ code, [Rust](docs/Rust.md), as well as NVIDIA's CUDA using [nvcc](https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html).\n\nsccache also provides [icecream](https://github.com/icecc/icecream)-style distributed compilation (automatic packaging of local toolchains) for all supported compilers (including Rust). The distributed compilation system includes several security features that icecream lacks such as authentication, transport layer encryption, and sandboxed compiler execution on build servers. See [the distributed quickstart](docs/DistributedQuickstart.md) guide for more information.\n\n---\n\nTable of Contents (ToC)\n======================\n\n* [Installation](#installation)\n* [Build Requirements](#build-requirements)\n* [Build](#build)\n* [Usage](#usage)\n* [Storage Options](#storage-options)\n  * [Local](#local)\n  * [S3](#s3)\n  * [Redis](#redis)\n  * [Memcached](#memcached)\n  * [Google Cloud Storage](#google-cloud-storage)\n  * [Azure](#azure)\n  * [GitHub Actions](#github-actions)\n* [Debugging](#debugging)\n* [Interaction with GNU `make` jobserver](#interaction-with-gnu-make-jobserver)\n* [Known Caveats](#known-caveats)\n\n---\n\n## Installation\n\nThere are prebuilt x86-64 binaries available for Windows, Linux (a portable binary compiled against musl), and macOS [on the releases page](https://github.com/mozilla/sccache/releases/latest). Several package managers also include sccache packages, you can install the latest release from source using cargo, or build directly from a source checkout.\n\n### macOS\n\nOn macOS sccache can be installed via [Homebrew](https://brew.sh/):\n\n```bash\nbrew install sccache\n```\n\n### Windows\n\nOn Windows, sccache can be installed via [scoop](https://scoop.sh/):\n\n```\nscoop install sccache\n```\n\n### Via cargo\n\nIf you have a Rust toolchain installed you can install sccache using cargo. **Note that this will compile sccache from source which is fairly resource-intensive. For CI purposes you should use prebuilt binary packages.**\n\n\n```bash\ncargo install sccache\n```\n\n---\n\nUsage\n-----\n\nRunning sccache is like running ccache: prefix your compilation commands with it, like so:\n\n```bash\nsccache gcc -o foo.o -c foo.c\n```\n\nIf you want to use sccache for caching Rust builds you can define `build.rustc-wrapper` in the\n[cargo configuration file](https://doc.rust-lang.org/cargo/reference/config.html).  For example, you can set it globally\nin `$HOME/.cargo/config.toml` by adding:\n\n```toml\n[build]\nrustc-wrapper = \"/path/to/sccache\"\n```\n\nNote that you need to use cargo 1.40 or newer for this to work.\n\nAlternatively you can use the environment variable `RUSTC_WRAPPER`:\n\n```bash\nexport RUSTC_WRAPPER=/path/to/sccache\ncargo build\n```\n\nsccache supports gcc, clang, MSVC, rustc, NVCC, and [Wind River's diab compiler](https://www.windriver.com/products/development-tools/#diab_compiler).\n\nIf you don't [specify otherwise](#storage-options), sccache will use a local disk cache.\n\nsccache works using a client-server model, where the server runs locally on the same machine as the client. The client-server model allows the server to be more efficient by keeping some state in memory. The sccache command will spawn a server process if one is not already running, or you can run `sccache --start-server` to start the background server process without performing any compilation.\n\nYou can run `sccache --stop-server` to terminate the server. It will also terminate after (by default) 10 minutes of inactivity.\n\nRunning `sccache --show-stats` will print a summary of cache statistics.\n\nSome notes about using `sccache` with [Jenkins](https://jenkins.io) are [here](docs/Jenkins.md).\n\nTo use sccache with cmake, provide the following command line arguments to cmake 3.4 or newer:\n\n```\n-DCMAKE_C_COMPILER_LAUNCHER=sccache\n-DCMAKE_CXX_COMPILER_LAUNCHER=sccache\n```\n\nTo generate PDB files for debugging with MSVC, you can use the [`/Z7` option](https://docs.microsoft.com/en-us/cpp/build/reference/z7-zi-zi-debug-information-format?view=msvc-160). Alternatively, the `/Zi` option together with `/Fd` can work if `/Fd` names a different PDB file name for each object file created. Note that CMake sets `/Zi` by default, so if you use CMake, you can use `/Z7` by adding code like this in your CMakeLists.txt:\n\n```\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  string(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n  string(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\nelseif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n  string(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n  string(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\nelseif(CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n  string(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n  string(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\nendif()\n```\n\nBy default, sccache will fail your build if it fails to successfully communicate with its associated server. To have sccache instead gracefully failover to the local compiler without stopping, set the environment variable `SCCACHE_IGNORE_SERVER_IO_ERROR=1`.\n\n---\n\nBuild Requirements\n------------------\n\nsccache is a [Rust](https://www.rust-lang.org/) program. Building it requires `cargo` (and thus `rustc`). sccache currently requires **Rust 1.60.0**. We recommend you install Rust via [Rustup](https://rustup.rs/).\n\nBuild\n-----\n\nIf you are building sccache for non-development purposes make sure you use `cargo build --release` to get optimized binaries:\n\n```bash\ncargo build --release [--no-default-features --features=s3|redis|gcs|memcached|azure]\n```\n\nBy default, `sccache` builds with support for all storage backends, but individual backends may be disabled by resetting the list of features and enabling all the other backends. Refer the [Cargo Documentation](http://doc.crates.io/manifest.html#the-features-section) for details on how to select features with Cargo.\n\n### Building portable binaries\n\nWhen building with the `dist-server` feature, `sccache` will depend on OpenSSL, which can be an annoyance if you want to distribute portable binaries. It is possible to statically link against OpenSSL using the `openssl/vendored` feature.\n\n#### Linux\n\nBuild with `cargo` and use `ldd` to check that the resulting binary does not depend on OpenSSL anymore.\n\n#### macOS\n\nBuild with `cargo` and use `otool -L` to check that the resulting binary does not depend on OpenSSL anymore.\n\n#### Windows\n\nOn Windows, the binary might also depend on a few MSVC CRT DLLs that are not available on older Windows versions.\n\nIt is possible to statically link against the CRT using a `.cargo/config.toml` file with the following contents.\n\n```toml\n[target.x86_64-pc-windows-msvc]\nrustflags = [\"-Ctarget-feature=+crt-static\"]\n```\n\nBuild with `cargo` and use `dumpbin /dependents` to check that the resulting binary does not depend on MSVC CRT DLLs anymore.\n\nWhen statically linking with OpenSSL, you will need Perl available in your `$PATH`.\n\n---\n\nStorage Options\n---------------\n\n### Local\nsccache defaults to using local disk storage. You can set the `SCCACHE_DIR` environment variable to change the disk cache location. By default it will use a sensible location for the current platform: `~/.cache/sccache` on Linux, `%LOCALAPPDATA%\\Mozilla\\sccache` on Windows, and `~/Library/Caches/Mozilla.sccache` on MacOS.\n\nThe default cache size is 10 gigabytes. To change this, set `SCCACHE_CACHE_SIZE`, for example `SCCACHE_CACHE_SIZE=\"1G\"`.\n\nThe local storage only supports a single sccache server at a time. Multiple concurrent servers will race and cause spurious build failures.\n\n### S3\nIf you want to use S3 storage for the sccache cache, you need to set the `SCCACHE_BUCKET` environment variable to the name of the S3 bucket to use.\n\nCredentials are resolved using the default AWS provider chain, including the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables, the `~/.aws/credentials` file, etc. For more details see https://docs.aws.amazon.com/sdk-for-rust/latest/dg/credentials.html. If multiple profiles are available, you can pick one using the `AWS_PROFILE` environment variable.\n\nIf you do not want to use credentials at all, you can set the `SCCACHE_S3_NO_CREDENTIALS` environment variable. This requires the bucket to allow public readonly access, and can be useful to implement a readonly cache for pull requests, which typically can't be given access to credentials for security reasons.\n\nYou can configure the region using the `SCCACHE_REGION` environment variable, or specify the `region` key in `~/.aws/credentials`. Alternatively you can specify the endpoint URL using the `SCCACHE_ENDPOINT` environment variable. To connect to a minio storage for example you can set `SCCACHE_ENDPOINT=<ip>:<port>`. \n\nIf your endpoint requires HTTPS/TLS, set `SCCACHE_S3_USE_SSL=true`. If you don't need a secure network layer, HTTP (`SCCACHE_S3_USE_SSL=false`) might be better for performance.\n\nYou can also define a prefix that will be prepended to the keys of all cache objects created and read within the S3 bucket, effectively creating a scope. To do that use the `SCCACHE_S3_KEY_PREFIX` environment variable. This can be useful when sharing a bucket with another application.\n\n\n### Redis\nSet `SCCACHE_REDIS` to a [Redis](https://redis.io/) url in format `redis://[:<passwd>@]<hostname>[:port][/<db>]` to store the cache in a Redis instance. Redis can be configured as a LRU (least recently used) cache with a fixed maximum cache size. Set `maxmemory` and `maxmemory-policy` according to the [Redis documentation](https://redis.io/topics/lru-cache). The `allkeys-lru` policy which discards the *least recently accessed or modified* key fits well for the sccache use case.\n\nRedis over TLS is supported. Use the [`rediss://`](https://www.iana.org/assignments/uri-schemes/prov/rediss) url scheme (note `rediss` vs `redis`). Append `#insecure` the the url to disable hostname verification and accept self-signed certificates (dangerous!). Note that this also disables [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication).\n\n### Memcached\nSet `SCCACHE_MEMCACHED` to a [Memcached](https://memcached.org/) url in format `tcp://<hostname>:<port> ...` to store the cache in a Memcached instance.\n\n### Google Cloud Storage\nTo use [Google Cloud Storage](https://cloud.google.com/storage/), you need to set the `SCCACHE_GCS_BUCKET` environment variable to the name of the GCS bucket.\n\nIf you're using authentication, either:\n- Set `SCCACHE_GCS_KEY_PATH` to the location of your JSON service account credentials\n- (Deprecated) Set `SCCACHE_GCS_CREDENTIALS_URL` to a URL returning an OAuth token in non-standard `{\"accessToken\": \"...\", \"expireTime\": \"...\"}` format.\n- Set `SCCACHE_GCS_OAUTH_URL` to a URL returning an OAuth token. If you are running on a Google Cloud instance, this is of the form `http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/${YOUR_SERVICE_ACCOUNT}/token`\n\nBy default, SCCACHE on GCS will be read-only. To change this, set `SCCACHE_GCS_RW_MODE` to either `READ_ONLY` or `READ_WRITE`.\n\nYou can also define a prefix that will be prepended to the keys of all cache objects created and read within the GCS bucket, effectively creating a scope. To do that use the `SCCACHE_GCS_KEY_PREFIX` environment variable. This can be useful when sharing a bucket with another application.\n\nTo create such account, in GCP, go in `APIs and Services` => `Cloud Storage` => `Create credentials` => `Service account`. Then, once created, click on the account then `Keys` => `Add key` => `Create new key`. Select the JSON format and here it is. This JSON file is what `SCCACHE_GCS_KEY_PATH` expects.\nThe service account needs `Storage Object Admin` permissions on the bucket (otherwise, sccache will fail with a simple `Permission denied`).\n\nTo verify that it works, run:\n\n```\nexport SCCACHE_GCS_BUCKET=<bucket name in GCP>\nexport SCCACHE_GCS_KEY_PATH=secret-gcp-storage.json\n./sccache --show-stats\n# you should see\n[...]\nCache location                  GCS, bucket: Bucket(name=<bucket name in GCP>), key_prefix: (none)\n```\n\n### Azure\nTo use Azure Blob Storage, you'll need your Azure connection string and an _existing_ Blob Storage container name.  Set the `SCCACHE_AZURE_CONNECTION_STRING`\nenvironment variable to your connection string, and `SCCACHE_AZURE_BLOB_CONTAINER` to the name of the container to use.  Note that sccache will not create\nthe container for you - you'll need to do that yourself.\n\nYou can also define a prefix that will be prepended to the keys of all cache objects created and read within the container, effectively creating a scope. To do that use the `SCCACHE_AZURE_KEY_PREFIX` environment variable. This can be useful when sharing a bucket with another application.\n\n**Important:** The environment variables are only taken into account when the server starts, i.e. only on the first run.\n\n### GitHub Actions\nTo use the [GitHub Actions cache](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows), you need to set the `SCCACHE_GHA_CACHE_URL`/`ACTIONS_CACHE_URL` and `SCCACHE_GHA_RUNTIME_TOKEN`/`ACTIONS_RUNTIME_TOKEN` environmental variables. The `SCCACHE_` prefixed environmental variables override the variables without the prefix.\n\nIn a GitHub Actions workflow, you can set these environmental variables using the following step.\n\n```yaml\n- name: Configure sccache\n  uses: actions/github-script@v6\n  with:\n    script: |\n      core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');\n      core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');\n```\n\nTo write to the cache, set `SCCACHE_GHA_CACHE_TO` to a cache key, for example\n`sccache-latest`. To read from cache key prefixes, set `SCCACHE_GHA_CACHE_FROM`\nto a comma-separated list of cache key prefixes, for example `sccache-`.\n\nIn contrast to the [`@actions/cache`](https://github.com/actions/cache) action, which saves a single large archive per cache key, `sccache` with GHA cache storage saves each cache entry separately.\n\nGHA cache storage will create many small caches with the same cache key, e.g. `SCCACHE_GHA_CACHE_TO` and `SCCACHE_GHA_CACHE_FROM`. These GHA caches are differentiated by their [_version_](https://github.com/actions/cache#cache-version). The GHA cache implementation in `sccache` calculates the cache version from the [`sccache` entry key](docs/Caching.md), e.g. the source file path.\n\nFor example, if a cache entry has the version `main.rs` and has GHA cache entries for the `sccache-1` and `sccache-2` keys, then `SCCACHE_GHA_CACHE_FROM=sccache-` will match both and [return the most recent entry](https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key).\n\nThis behavior is useful for scoping caches from different versions of Rust or for cross-platform builds (`rust-sdk-{RUST_TOOLKIT}-{TARGET_TRIPLE}-`), and to allow newer commits to override older caches by adding the Git SHA as a suffix (`-{GITHUB_SHA}`), as in the following screenshot.\n\n<img width=\"718\" src=\"https://user-images.githubusercontent.com/19253212/205356799-deedc465-e534-4ef6-a249-fc15121fdfd9.png\">\n\n---\n\nSeparating caches between invocations\n-------------------------------------\n\nIn situations where several different compilation invocations\nshould not reuse the cached results from each other,\none can set `SCCACHE_C_CUSTOM_CACHE_BUSTER` to a unique value\nthat'll be mixed into the hash.\n`MACOSX_DEPLOYMENT_TARGET` and `IPHONEOS_DEPLOYMENT_TARGET` variables\nalready exhibit such reuse-suppression behaviour.\nThere are currently no such variables for compiling Rust.\n\n---\n\nOverwriting the cache\n---------------------\n\nIn situations where the cache contains broken build artifacts, it can be necessary to overwrite the contents in the cache. That can be achieved by setting the `SCCACHE_RECACHE` environment variable.\n\n---\n\nDebugging\n---------\n\nYou can set the `SCCACHE_ERROR_LOG` environment variable to a path and set `SCCACHE_LOG` to get the server process to redirect its logging there (including the output of unhandled panics, since the server sets `RUST_BACKTRACE=1` internally).\n\n    SCCACHE_ERROR_LOG=/tmp/sccache_log.txt SCCACHE_LOG=debug sccache\n\nYou can also set these environment variables for your build system, for example\n\n    SCCACHE_ERROR_LOG=/tmp/sccache_log.txt SCCACHE_LOG=debug cmake --build /path/to/cmake/build/directory\n\nAlternatively, if you are compiling locally, you can run the server manually in foreground mode by running `SCCACHE_START_SERVER=1 SCCACHE_NO_DAEMON=1 sccache`, and send logging to stderr by setting the [`SCCACHE_LOG` environment variable](https://docs.rs/env_logger/0.7.1/env_logger/#enabling-logging) for example. This method is not suitable for CI services because you need to compile in another shell at the same time.\n\n    SCCACHE_LOG=debug SCCACHE_START_SERVER=1 SCCACHE_NO_DAEMON=1 sccache\n\n---\n\nInteraction with GNU `make` jobserver\n-------------------------------------\n\nsccache provides support for a [GNU make jobserver](https://www.gnu.org/software/make/manual/html_node/Job-Slots.html). When the server is started from a process that provides a jobserver, sccache will use that jobserver and provide it to any processes it spawns. (If you are running sccache from a GNU make recipe, you will need to prefix the command with `+` to get this behavior.) If the sccache server is started without a jobserver present it will create its own with the number of slots equal to the number of available CPU cores.\n\nThis is most useful when using sccache for Rust compilation, as rustc supports using a jobserver for parallel codegen, so this ensures that rustc will not overwhelm the system with codegen tasks. Cargo implements its own jobserver ([see the information on `NUM_JOBS` in the cargo documentation](https://doc.rust-lang.org/stable/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts)) for rustc to use, so using sccache for Rust compilation in cargo via `RUSTC_WRAPPER` should do the right thing automatically.\n\n---\n\nKnown Caveats\n-------------\n\n### General\n\n* Absolute paths to files must match to get a cache hit. This means that even if you are using a shared cache, everyone will have to build at the same absolute path (i.e. not in `$HOME`) in order to benefit each other. In Rust this includes the source for third party crates which are stored in `$HOME/.cargo/registry/cache` by default.\n\n### Rust\n\n* Crates that invoke the system linker cannot be cached. This includes `bin`, `dylib`, `cdylib`, and `proc-macro` crates. You may be able to improve compilation time of large `bin` crates by converting them to a `lib` crate with a thin `bin` wrapper.\n* Incrementally compiled crates cannot be cached. By default, in the debug profile Cargo will use incremental compilation for workspace members and path dependencies. [You can disable incremental compilation.](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental)\n\n[More details on Rust caveats](/docs/Rust.md)\n\n### Symbolic links\n\n* Symbolic links to sccache won't work. Use hardlinks: `ln sccache /usr/local/bin/cc`\n\n",
            "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
            "docs_url": null,
            "download_url": null,
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": null,
            "keywords": "ccache",
            "license": "Apache-2.0",
            "maintainer": null,
            "maintainer_email": null,
            "name": "sccache",
            "package_url": "https://pypi.org/project/sccache/",
            "platform": null,
            "project_url": "https://pypi.org/project/sccache/",
            "project_urls": {
                "Source Code": "https://github.com/mozilla/sccache/"
            },
            "release_url": "https://pypi.org/project/sccache/0.3.3/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "Sccache is a ccache-like tool. It is used as a compiler wrapper and avoids compilation when possible, storing a cache in a remote storage using the S3 API.",
            "version": "0.3.3",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 16043570,
        "urls": [
            {
                "comment_text": null,
                "digests": {
                    "md5": "71cec81a806bb8139a373fd9e7047a4b",
                    "sha256": "13f07d4caaa124bc5a191a8bba6b6bbf62b2781b576b0c1262bafffe61078bc6"
                },
                "downloads": -1,
                "filename": "sccache-0.3.3-py3-none-macosx_10_7_x86_64.whl",
                "has_sig": false,
                "md5_digest": "71cec81a806bb8139a373fd9e7047a4b",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7978113,
                "upload_time": "2022-12-09T03:28:08",
                "upload_time_iso_8601": "2022-12-09T03:28:08.708179Z",
                "url": "https://files.pythonhosted.org/packages/b9/ac/69bbf04912c1d4f9d11e90e310d95d9c9dac8076c296164ede4c9648d362/sccache-0.3.3-py3-none-macosx_10_7_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "d3316f7b2b16064f471259c7135dcf38",
                    "sha256": "594552ee9b1448c3b4f6e12f24c060593f06489b4e804780a74f2458399fac0e"
                },
                "downloads": -1,
                "filename": "sccache-0.3.3-py3-none-macosx_11_0_arm64.whl",
                "has_sig": false,
                "md5_digest": "d3316f7b2b16064f471259c7135dcf38",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 7337471,
                "upload_time": "2022-12-09T03:28:11",
                "upload_time_iso_8601": "2022-12-09T03:28:11.557409Z",
                "url": "https://files.pythonhosted.org/packages/f1/b5/455f3c222eca534f3b738e34c5f593fb62e57857ad8b2d0ae84fc57e77d5/sccache-0.3.3-py3-none-macosx_11_0_arm64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "c9b62b1e938d10d9b1dc15acac98ca02",
                    "sha256": "fe521b6c44a270952389ef774d0f2c04f0387791d5fa9f10fa836308fbe8c05b"
                },
                "downloads": -1,
                "filename": "sccache-0.3.3-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
                "has_sig": false,
                "md5_digest": "c9b62b1e938d10d9b1dc15acac98ca02",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 10420498,
                "upload_time": "2022-12-09T03:28:14",
                "upload_time_iso_8601": "2022-12-09T03:28:14.602773Z",
                "url": "https://files.pythonhosted.org/packages/af/e1/f42e10645e82a3aca7c97d500ffb23cfac9587a866e93d4b08234cc8bf7e/sccache-0.3.3-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "daae37bfac9827edbecd1f5d1a036ea4",
                    "sha256": "c2f6ae29ed922291a969ff9c4ad213740cb087532aa415158e6af89b14a1bab9"
                },
                "downloads": -1,
                "filename": "sccache-0.3.3-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl",
                "has_sig": false,
                "md5_digest": "daae37bfac9827edbecd1f5d1a036ea4",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 11401813,
                "upload_time": "2022-12-09T03:28:17",
                "upload_time_iso_8601": "2022-12-09T03:28:17.805169Z",
                "url": "https://files.pythonhosted.org/packages/20/28/4aa57567f364523984a7d5e293352e4acb56f1117137bc8d87bde2369b33/sccache-0.3.3-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "3a1e27ac3b86b2b3fe85f1de648aa7d8",
                    "sha256": "682bad3c9ad1c2bbb9eb5d859c56d4a7a21167bbabdefb2ef2fc7fb202e6a54e"
                },
                "downloads": -1,
                "filename": "sccache-0.3.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "has_sig": false,
                "md5_digest": "3a1e27ac3b86b2b3fe85f1de648aa7d8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 17388371,
                "upload_time": "2022-12-09T03:28:21",
                "upload_time_iso_8601": "2022-12-09T03:28:21.964617Z",
                "url": "https://files.pythonhosted.org/packages/3a/36/22f72c4be948adfb5ea05d10dd79d3f5b0e084b92502321ca0f1fdbeb3e0/sccache-0.3.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": null,
                "digests": {
                    "md5": "347f4f1eaf31fee6afba398350ca4286",
                    "sha256": "085acf04231df3751d8f305c0ddfa93e6205fa1fe72f24f2024a497a68ebfe79"
                },
                "downloads": -1,
                "filename": "sccache-0.3.3-py3-none-win_amd64.whl",
                "has_sig": false,
                "md5_digest": "347f4f1eaf31fee6afba398350ca4286",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": null,
                "size": 6455616,
                "upload_time": "2022-12-09T03:28:26",
                "upload_time_iso_8601": "2022-12-09T03:28:26.025560Z",
                "url": "https://files.pythonhosted.org/packages/da/db/d17cb35c3533118e6451653f41452424e4ea487811dbd5bfc14b6698ce35/sccache-0.3.3-py3-none-win_amd64.whl",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}