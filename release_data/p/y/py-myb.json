{
    "0.1.0": {
        "info": {
            "author": "dushitaoyuan",
            "author_email": "dushitaoyuan@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: Apache Software License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.4",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7"
            ],
            "description": "# py_mybatis\r\r\n\r\r\n- python\u7684mybatis\u5b9e\u73b0\r\r\n- python\u7684SqlTemplate\u5b9e\u73b0\r\r\n\r\r\n\r\r\n\r\r\n## \u9879\u76ee\u8d77\u6e90\r\r\n\r\r\n**\u7279\u522b\u9e23\u8c22**:<a href='https://github.com/hhyo/mybatis-mapper2sql'>mybatis-mapper2sql </a>\r\r\n\r\r\n**\u501f\u52a9\u8fd9\u4f4d\u5927\u4f6c\u4f7f\u6211\u5feb\u901f\u5b9e\u73b0\u4e86py_mybatis,mapper xml\u89e3\u6790\u4e3b\u4f53\u4ee3\u7801\u90fd\u662f hhyo\u5927\u4f6c\u7684**\r\r\n\r\r\n\u672c\u4eba\u662f\u4f4djavaer,\u521a\u521a\u5f00\u59cb\u5b66\u4e60python,\u5f53\u5f00\u59cb\u5b66\u4e60\u6570\u636e\u5e93\u76f8\u5173api\u65f6,\u53d1\u73b0python\u4e2d\u5e76\u672a\u6709\u5f88\u597d\u7684\u5f00\u53d1\u5305,\r\r\n\r\r\n\u91cd\u578borm \u76f4\u63a5\u6dd8\u6c70,\u4e0d\u8981\u95ee\u4e3a\u4ec0\u4e48,\u95ee\u5c31\u662f\u6211\u559c\u6b22\u5199sql,\u867d\u7136sql\u5199\u7684\u4e0d\u548b\u7684\r\r\n\r\r\n\u6025\u9700\u4e00\u79cd\u8f7b\u578b\u7684,\u5f00\u7bb1\u5373\u7528\u7684\u7c7b\u4f3cmybatis\u7684\u5f00\u53d1\u5305,\u627e\u4e86\u534a\u5929\u4e5f\u6ca1\u6709,\u7b97\u4e86,\u4e0d\u5982\u81ea\u5df1\u9020\u8f6e\u5b50,\u8fd9\u4e2a\u5ff5\u5934\u4e00\u76f4\u5728\u6211\u5fc3\u4e2d\u8426\u7ed5\r\r\n\r\r\n\u65e0\u5948,python\u521a\u5b66\u6ca1\u591a\u4e45,\u7a0d\u5fae\u6709\u4e9b\u96be\u5ea6,\u65f6\u95f4\u4e5f\u4e0d\u592a\u5145\u8db3,\u76f4\u5230\u9047\u5230\u4e86mybatis-mapper2sql,\u624d\u6210\u4e3a\u53ef\u80fd,\u611f\u8c22\u5927\u4f6c\r\r\n\r\r\n\r\r\n\r\r\n**\u7279\u522b\u63d0\u9192**\r\r\n\r\r\n\u6682\u672a\u53d1\u5e03\u5f00\u53d1\u5305,\u53ea\u80fd\u4e0b\u8f7d\u4f7f\u7528\r\r\n\r\r\n\u79c1\u4ee5\u4e3a\u672a\u7ecf\u8fc7\u6d4b\u8bd5\u5c31\u53d1\u5e03,\u5bb9\u6613\u6328\u9a82,\u6240\u4ee5\u7b49\u7b49\u770b,\u770b\u770b\u53cd\u9988\u5427\r\r\n\r\r\n\r\r\n\r\r\n## mybatis \u8bed\u6cd5\u652f\u6301\r\r\n\r\r\n### \u6807\u7b7e\u652f\u6301\r\r\n\r\r\n- sql,select,update,insert,delete\r\r\n\r\r\n- include,if,choose,when,otherwise\r\r\n\r\r\n- trim,where,set,foreach,bind\r\r\n\r\r\n### \u52a8\u6001\u8bed\u6cd5\u652f\u6301\r\r\n\r\r\n- #{},${}\r\r\n- \u65b0\u589e $f{}\u51fd\u6570\u8bed\u6cd5 ,\u5141\u8bb8\u5f00\u53d1\u8005\u81ea\u884c\u6ce8\u518c\u51fd\u6570,\u53c2\u89c1:mapper_func.py\r\r\n- \u5e9f\u5f03ognl\u8bed\u6cd5 \u6539\u4e3a python\u8bed\u6cd5\r\r\n- \u53c2\u6570\u8f6c\u6362(\u6838\u5fc3\u4ee3\u7801\u5728type_handler.py)\r\r\n### sql \u53c2\u6570\u652f\u6301\r\r\n\r\r\n\u53c2\u6570 \u76ee\u524d\u53ea\u652f\u6301 dict \u7c7b\u578b \u540d\u79f0\u4e3aparams\r\r\n\r\r\n### \u7ed3\u679c\u6620\u5c04\r\r\n\u6682\u4e0d\u652f\u6301,\u67e5\u8be2\u7ed3\u679c\u53c2\u89c1pymysql,pymysql.cursors.DictCursor\r\r\n### \u6570\u636e\u5e93\u652f\u6301\r\r\n- mysql\r\r\n**\u7406\u8bba\u4e0a\u53ef\u652f\u6301\u6240\u6709sql\u7c7b\u578b\u6570\u636e\u5e93**\r\r\n## \u4f7f\u7528\u793a\u4f8b\r\r\n### \u57fa\u672c\u793a\u4f8b\r\r\n\r\r\n**\u6d4b\u8bd5\u8868\u7ed3\u6784**\r\r\n\r\r\n```sql\r\r\nDROP TABLE IF EXISTS `fruits`;\r\r\n\r\r\nCREATE TABLE `fruits` (\r\r\n  `id` bigint(20) NOT NULL,\r\r\n  `name` varchar(20) DEFAULT NULL,\r\r\n  `category` varchar(20) DEFAULT NULL,\r\r\n  `price` double DEFAULT NULL,\r\r\n  `create_time` datetime DEFAULT NULL,\r\r\n  `type` int(11) DEFAULT NULL,\r\r\n  PRIMARY KEY (`id`)\r\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\r\r\n\r\r\n\r\r\n\r\r\ninsert  into `fruits`(`id`,`name`,`category`,`price`,`create_time`,`type`) values \r\r\n\r\r\n(1,'\u82f9\u679c','apple',5,'2020-06-27 11:54:38',0),\r\r\n\r\r\n(2,'\u68a8','pear',4,'2020-06-28 11:54:38',1),\r\r\n\r\r\n(3,'\u9999\u8549','banana',3,'2020-06-30 11:55:19',2);\r\r\n\r\r\n\r\r\n```\r\r\n\r\r\n\r\r\n\r\r\n####  PdbcSqlTemplate(sql\u6a21\u677f\u7528\u6cd5)\r\r\n\r\r\n**\u53c2\u89c1:tests/sql_template_test.py**\r\r\n\r\r\n```python\r\r\nfrom py_mybatis.sql.pdbc_sql_template import *\r\r\nimport pymysql\r\r\n\r\r\nimport unittest\r\r\n\r\r\n\r\r\ndef query_function(connection):\r\r\n    cursor = connection.cursor()\r\r\n    try:\r\r\n        cursor.execute('select * from fruits')\r\r\n        data = cursor.fetchall()\r\r\n        connection.commit()\r\r\n        return data\r\r\n    finally:\r\r\n        cursor.close()\r\r\n\r\r\n\r\r\nclass PyMybatisTest(unittest.TestCase):\r\r\n    @classmethod\r\r\n    def setUpClass(cls):\r\r\n        cls.sql_template = PdbcSqlTemplate(dataSource=PooledDB(\r\r\n            creator=pymysql,\r\r\n            maxconnections=6,\r\r\n            mincached=2,\r\r\n            maxcached=5,\r\r\n            blocking=True,\r\r\n            maxusage=None,\r\r\n            setsession=[],\r\r\n            ping=0,\r\r\n            host=\"localhost\",\r\r\n            user=\"root\",\r\r\n            password=\"root\",\r\r\n            database=\"api_user\",\r\r\n            cursorclass=pymysql.cursors.DictCursor,\r\r\n            charset='utf8'\r\r\n        ))\r\r\n\r\r\n    def test_select_list(self):\r\r\n        print(\"============{}============\".format('select_with row_bound'))\r\r\n        print(\r\r\n            self.sql_template.select_list(sql=\"select * from fruits where id in (%s,%s,%s)\",\r\r\n                                          row_bound=RowBound(1, 2), args=(1, 2, 3))\r\r\n        )\r\r\n        print(\"============{}============\".format('select_only'))\r\r\n        print(\r\r\n            self.sql_template.select_list(sql=\"select * from fruits where id in (%s,%s,%s)\", args=(1, 2, 3))\r\r\n        )\r\r\n\r\r\n    def test_select_one(self):\r\r\n        print(\"============{}============\".format('test_select_one'))\r\r\n        print(\r\r\n            self.sql_template.select_one(sql=\"select * from fruits where id=%s\", args=(1))\r\r\n        )\r\r\n\r\r\n    def test_select_with_no_params(self):\r\r\n        print(\"============{}============\".format('test_select_with_no_params'))\r\r\n        print(\r\r\n            self.sql_template.select_one(sql=\"select * from fruits where id=1\")\r\r\n        )\r\r\n\r\r\n    def test_select_page(self):\r\r\n        print(\"============{}============\".format('test_select_page'))\r\r\n        print(\r\r\n            self.sql_template.select_page(sql=\"select * from fruits\", row_bound=RowBound(1, 2))\r\r\n        )\r\r\n\r\r\n    def test_delete(self):\r\r\n        print(\"============{}============\".format('test_delete'))\r\r\n        row = self.sql_template.delete(\r\r\n            sql=\"delete from fruits where id in(%s,%s,%s)\",\r\r\n            args=(10, 11, 9))\r\r\n        print(row)\r\r\n\r\r\n    def test_insert_one(self):\r\r\n        print(\"============{}============\".format('test_insert_one'))\r\r\n        row = self.sql_template.insert(sql=\"insert into fruits(id,name,price,category) values(%s,%s,%s,%s)\",\r\r\n                                       args=(10, '\u83e0\u841d', 10, 'boluo'))\r\r\n        print(row)\r\r\n\r\r\n    def test_insert_mul(self):\r\r\n        print(\"============{}============\".format('test_insert_mul'))\r\r\n        row = self.sql_template.insert_batch(\r\r\n            sql=\"insert into fruits(id,name,price,category) values(%s,%s,%s,%s)\",\r\r\n            args=((11, '\u83e0\u841d', 11, 'boluo11'), (9, '\u83e0\u841d1', 9, 'boluo9')))\r\r\n        print(row)\r\r\n\r\r\n    def test_query_in_connection(self):\r\r\n        print(\"============{}============\".format('test_query_in_connection'))\r\r\n        print(self.sql_template.execute_in_connection(query_function))\r\r\n\r\r\n\r\r\n\r\r\n\r\r\nif __name__ == '__main__':\r\r\n    unittest.main()\r\r\n\r\r\n```\r\r\n\r\r\n#### MybatisSqlSession \u4f7f\u7528\r\r\n\r\r\n- mapper.xml\r\r\n\r\r\n  ```xml\r\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\r\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\r\n  <mapper namespace=\"Test\">\r\r\n      <sql id=\"sometable\">\r\r\n          fruits\r\r\n      </sql>\r\r\n      <sql id=\"somewhere\">\r\r\n          WHERE\r\r\n          category = #{category}\r\r\n      </sql>\r\r\n      <sql id=\"someinclude\">\r\r\n          FROM\r\r\n          <include refid=\"${include_target}\"/>\r\r\n          <include refid=\"somewhere\"/>\r\r\n      </sql>\r\r\n  \r\r\n  \r\r\n      <delete id=\"deleteById\">\r\r\n          delete from fruits where id =#{id}\r\r\n      </delete>\r\r\n      <select id=\"testBasic\">\r\r\n          SELECT\r\r\n          id,\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          WHERE\r\r\n          category = 'apple' AND\r\r\n          <![CDATA[ price < 500 ]]>\r\r\n      </select>\r\r\n  \r\r\n      <select id=\"test_function\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          WHERE\r\r\n          category =$f{like(params['name'])}\r\r\n          and create_time =$f{time_format(params['create_time'])}\r\r\n      </select>\r\r\n      <select id=\"testParameters\">\r\r\n          SELECT\r\r\n          id,\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          WHERE\r\r\n          category = #{category,sql_type=VARCHAR}\r\r\n          AND price > ${price,sql_type=BIGINT}\r\r\n          AND type = ${type,sql_type=BOOLEAN}\r\r\n      </select>\r\r\n      <select id=\"testInclude\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          <include refid=\"someinclude\">\r\r\n              <property name=\"prefix\" value=\"Some\"/>\r\r\n              <property name=\"include_target\" value=\"sometable\"/>\r\r\n          </include>\r\r\n      </select>\r\r\n      <select id=\"testIf\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          WHERE\r\r\n          1=1\r\r\n          <if test=\"'category' in params\">\r\r\n              AND category = #{category}\r\r\n          </if>\r\r\n          <if test=\"'price' in params\">\r\r\n              AND price = ${price}\r\r\n              <if test=\"params['price'] >= 400\">\r\r\n                  AND name = 'pear'\r\r\n              </if>\r\r\n          </if>\r\r\n      </select>\r\r\n  \r\r\n      <select id=\"testTrim\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n  \r\r\n          <trim prefix=\"WHERE\" prefixOverrides=\"OR\">\r\r\n              OR category = 'apple'\r\r\n              OR price = 200\r\r\n          </trim>\r\r\n          <trim prefix=\"AND\" prefixOverrides=\"OR\">\r\r\n              (type = 1 OR type= 0)\r\r\n          </trim>\r\r\n      </select>\r\r\n      <select id=\"testWhere\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          <where>\r\r\n              AND category = 'apple'\r\r\n              <if test=\"'price' in params \">\r\r\n                  AND price = ${price}\r\r\n              </if>\r\r\n          </where>\r\r\n      </select>\r\r\n      <update id=\"testSet\">\r\r\n          UPDATE\r\r\n          fruits\r\r\n          <set>\r\r\n              <if test=\"'category' in params\">\r\r\n                  category = #{category},\r\r\n              </if>\r\r\n              <if test=\"'price' in params\">\r\r\n                  price = ${price}\r\r\n              </if>\r\r\n          </set>\r\r\n          WHERE\r\r\n          name = #{name}\r\r\n      </update>\r\r\n      <select id=\"testChoose\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          <where>\r\r\n              <choose>\r\r\n                  <when test=\"'name' in params\">\r\r\n                      AND name = #{name}\r\r\n                  </when>\r\r\n                  <when test=\"'category' in params and  params['category'] == 'banana'\">\r\r\n                      AND category = #{category}\r\r\n                      <if test=\"'price' in params\">\r\r\n                          AND price = ${price}\r\r\n                      </if>\r\r\n                  </when>\r\r\n                  <otherwise>\r\r\n                      AND category = 'apple'\r\r\n                  </otherwise>\r\r\n              </choose>\r\r\n          </where>\r\r\n      </select>\r\r\n      <select id=\"testForeach\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          <where>\r\r\n              category = 'apple' AND name in\r\r\n              <foreach collection=\"names\" item=\"name\" open=\"(\" close=\")\" separator=\",\">\r\r\n                  #{name}\r\r\n              </foreach>\r\r\n          </where>\r\r\n      </select>\r\r\n      <insert id=\"testInsertMulti\">\r\r\n          INSERT INTO\r\r\n          fruits\r\r\n          (\r\r\n          id,\r\r\n          name,\r\r\n          category,\r\r\n          price,\r\r\n          create_time\r\r\n          )\r\r\n          VALUES\r\r\n          <foreach collection=\"fruits\" item=\"fruit\" separator=\",\">\r\r\n              (\r\r\n              #{fruit['id']},\r\r\n              #{fruit['name']},\r\r\n              #{fruit['category']},\r\r\n              #{fruit['price']},\r\r\n              $f{time_format(fruit['create_time'])}\r\r\n  \r\r\n              )\r\r\n          </foreach>\r\r\n      </insert>\r\r\n      <select id=\"testBind\">\r\r\n          <bind name=\"likeName\" value=\"'%{}%'.format(params['name'])\"/>\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          WHERE\r\r\n          name like #{likeName}\r\r\n      </select>\r\r\n      <insert id=\"testInsertSelective\">\r\r\n          insert into fruits\r\r\n          <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\">\r\r\n              <if test=\"'name' in params\">\r\r\n                  name,\r\r\n              </if>\r\r\n              <if test=\"'category' in params\">\r\r\n                  category,\r\r\n              </if>\r\r\n              <if test=\"'price' in params\">\r\r\n                  price,\r\r\n              </if>\r\r\n          </trim>\r\r\n          <trim prefix=\"values (\" suffix=\")\" suffixOverrides=\",\">\r\r\n              <if test=\"'name' in params\">\r\r\n                  #{name},\r\r\n              </if>\r\r\n              <if test=\"'category' in params\">\r\r\n                  #{category},\r\r\n              </if>\r\r\n              <if test=\"'category' in params\">\r\r\n                  #{price},\r\r\n              </if>\r\r\n          </trim>\r\r\n      </insert>\r\r\n      <select id=\"testChooseNative\">\r\r\n          SELECT\r\r\n          name,\r\r\n          category,\r\r\n          price\r\r\n          FROM\r\r\n          fruits\r\r\n          <where>\r\r\n              <choose>\r\r\n                  <when test=\"'name' in params\">\r\r\n                      AND name = #{name}\r\r\n                  </when>\r\r\n                  <when test=\"'category' in params and params['category'] == 'banana'\">\r\r\n                      AND category = #{category}\r\r\n                      <if test=\"'price' in params\">\r\r\n                          AND price = ${price}\r\r\n                      </if>\r\r\n                  </when>\r\r\n                  <otherwise>\r\r\n                      AND category = 'apple'\r\r\n                  </otherwise>\r\r\n              </choose>\r\r\n          </where>\r\r\n      </select>\r\r\n  \r\r\n      <insert id=\"insertOne\">\r\r\n          insert into fruits(id,name,category,price) values(#{id},#{name},#{category},#{price})\r\r\n      </insert>\r\r\n  </mapper>\r\r\n  \r\r\n  ```\r\r\n\r\r\n- \u793a\u4f8b\u4ee3\u7801\r\r\n\r\r\n```python\r\r\nfrom py_mybatis.sql.mybatis_sql_session import MybatisMapperScanner, MybatisSqlSession, PooledDB\r\r\nimport pymysql\r\r\nimport os\r\r\n\r\r\nimport unittest\r\r\n\r\r\nimport time\r\r\n\r\r\n\r\r\nclass PyMybatisTest(unittest.TestCase):\r\r\n\r\r\n    @classmethod\r\r\n    def setUpClass(cls):\r\r\n        path = os.path.abspath(\"./\")\r\r\n        mapper_scanner = MybatisMapperScanner()\r\r\n        mybatis_mapper_dict = mapper_scanner.mapper_xml_scan(mapper_xml_dir=path)\r\r\n        pool = PooledDB(\r\r\n            creator=pymysql,\r\r\n            maxconnections=6,\r\r\n            mincached=2,\r\r\n            maxcached=5,\r\r\n            blocking=True,\r\r\n            maxusage=None,\r\r\n            setsession=[],\r\r\n            ping=0,\r\r\n            host=\"localhost\",\r\r\n            user=\"root\",\r\r\n            password=\"root\",\r\r\n            database=\"api_user\",\r\r\n            cursorclass=pymysql.cursors.DictCursor,\r\r\n            charset='utf8'\r\r\n        )\r\r\n        cls.sql_session = MybatisSqlSession(mapper_dict=mybatis_mapper_dict, dataSource=pool)\r\r\n        cls.sql_namespace = 'Test.'\r\r\n\r\r\n    def test_base(self):\r\r\n        self.sql_id = self.sql_namespace + 'testBasic'\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id, self.sql_session.select_list(self.sql_id)))\r\r\n\r\r\n    def test_parameters(self):\r\r\n        self.sql_id = self.sql_namespace + 'testParameters'\r\r\n        params = {'category': 'apple', 'price': '15.0', 'type': '001', 'content': '\u56fe\u4e66'}\r\r\n\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id, self.sql_session.select_list(self.sql_id,\r\r\n                                                                                                          params=params)))\r\r\n\r\r\n    def test_include(self):\r\r\n        self.sql_id = 'testInclude'\r\r\n        params = {'category': 'apple'}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_list(self.sql_id,\r\r\n                                                                                             params=params)))\r\r\n\r\r\n    def test_if(self):\r\r\n        self.sql_id = 'testIf'\r\r\n        params = {'category': 'apple', 'price': 5}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_one(self.sql_id,\r\r\n                                                                                            params=params)))\r\r\n\r\r\n    def test_trim(self):\r\r\n        self.sql_id = 'testTrim'\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_one(self.sql_id)))\r\r\n\r\r\n    def test_where(self):\r\r\n        self.sql_id = 'testWhere'\r\r\n        params = {'category': 'apple', 'price': 500}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_one(self.sql_id,\r\r\n                                                                                            params=params)))\r\r\n\r\r\n    def test_set(self):\r\r\n        self.sql_id = 'testSet'\r\r\n        params = {'category': 'apple', 'price': 500, 'name': 'name1'}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.update(self.sql_id,\r\r\n                                                                                        params=params)))\r\r\n\r\r\n    def test_choose(self):\r\r\n        self.sql_id = 'testChoose'\r\r\n        params = {'age': 1, 'sex': '1', 'name': 'name', 'price': 'price', 'category': 'banana'}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_list(self.sql_id,\r\r\n                                                                                             params=params)))\r\r\n\r\r\n    def test_foreach(self):\r\r\n        self.sql_id = 'testForeach'\r\r\n        params = {'names': ['name1', 'name2', 'name3']}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_list(self.sql_id,\r\r\n                                                                                             params=params)))\r\r\n\r\r\n    def test_bind(self):\r\r\n        self.sql_id = 'testBind'\r\r\n        params = {'name': 'name'}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_list(self.sql_id,\r\r\n                                                                                             params=params)))\r\r\n\r\r\n    def test_choose_native(self):\r\r\n        self.sql_id = 'testChooseNative'\r\r\n        params = {'category': 'banana', 'price': 500, 'name': 'name1'}\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.select_list(self.sql_id,\r\r\n                                                                                             params=params)))\r\r\n\r\r\n    def test_insert_multi(self):\r\r\n        self.sql_id = 'testInsertMulti'\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n\r\r\n        create_time = time.localtime()\r\r\n        params = {'fruits': [\r\r\n\r\r\n            {\r\r\n                'id': 1,\r\r\n                'name': 'apple',\r\r\n                'category': 'apple',\r\r\n                'price': 5.0,\r\r\n                'create_time': create_time\r\r\n            },\r\r\n            {\r\r\n                'id': 2,\r\r\n\r\r\n                'name': 'banana',\r\r\n                'category': 'banana',\r\r\n                'price': 3.0,\r\r\n                'create_time': create_time\r\r\n            },\r\r\n            {\r\r\n                'id': 3,\r\r\n                'name': 'pear',\r\r\n                'category': 'pear',\r\r\n                'price': 4.0,\r\r\n                'create_time': create_time\r\r\n            },\r\r\n        ]}\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.insert(self.sql_id,\r\r\n                                                                                        params=params)))\r\r\n\r\r\n    def test_insert_selective(self):\r\r\n        self.sql_id = 'testInsertSelective'\r\r\n        self.sql_id = self.sql_namespace + self.sql_id\r\r\n        params = {'name': 'apple',\r\r\n                  'category': 'apple',\r\r\n                  'price': 5.0\r\r\n                  }\r\r\n        print(\"============{}============,sql_result:{}\".format(self.sql_id,\r\r\n                                                                self.sql_session.insert(self.sql_id,\r\r\n                                                                                        params=params)))\r\r\n\r\r\n    \"\"\"\r\r\n\r\r\n    self.sql_session.begin_tx():\r\r\n    \u4f1a\u5728\u5f53\u524d\u7ebf\u7a0b\u7684thread_local\u4e0b\u7ed1\u5b9a\u4e00\u4e2aconnection \u6b64\u540e\u6267\u884c\u6240\u6709\u65b9\u6cd5\u90fd\u4f1a\u5728\u4e00\u4e2a connection\u4e0b\r\r\n    \u9664\u975e\u624b\u52a8\u8c03\u7528 self.sql_session.close(): \u5173\u95ed\u8fde\u63a5\r\r\n    self.sql_session.commit():\u63d0\u4ea4\u4e8b\u52a1\r\r\n    self.sql_session.rollback(): \u5173\u95ed\u4e8b\u52a1\r\r\n    \r\r\n    \u672a\u8c03\u7528:self.sql_session.begin_tx()\u65b9\u6cd5:\u6bcf\u6b21\u8c03\u7528sql_session \u90fd\u4f1a\u65b0\u5efa\u4e00\u4e2a\u8fde\u63a5,\u5efa\u8bae\u4f7f\u7528\u8fde\u63a5\u6c60\r\r\n    \u53c2\u8003\u7528\u6cd5:\r\r\n            try:\r\r\n            self.sql_session.begin_tx()\r\r\n            .... do_something_tx\r\r\n            self.sql_session.commit()\r\r\n            print(\"commit\")\r\r\n        except Exception as e:\r\r\n            print(\"exception rollback\", e)\r\r\n            self.sql_session.rollback()\r\r\n        finally:\r\r\n            print(\"finally close\")\r\r\n            self.sql_session.close()\r\r\n    \r\r\n    \"\"\"\r\r\n\r\r\n    def test_tx(self):\r\r\n        print(\"============{}============\".format('test_tx'))\r\r\n        \"\"\"\r\r\n        template method\r\r\n        \"\"\"\r\r\n        fruits = [\r\r\n\r\r\n            {\r\r\n                'id': 4,\r\r\n                'name': 'apple',\r\r\n                'category': 'apple',\r\r\n                'price': 5.0\r\r\n            },\r\r\n            {\r\r\n                'id': 5,\r\r\n\r\r\n                'name': 'banana',\r\r\n                'category': 'banana',\r\r\n                'price': 3.0\r\r\n            },\r\r\n            {\r\r\n                'id': 6,\r\r\n                'name': 'pear',\r\r\n                'category': 'pear',\r\r\n                'price': 4.0\r\r\n            },\r\r\n        ]\r\r\n        try:\r\r\n            self.sql_session.begin_tx()\r\r\n            for index, item in enumerate(fruits):\r\r\n                self.sql_session.insert(sql_id='Test.insertOne', params=item)\r\r\n                if index > 1:\r\r\n                    raise Exception('rollback test')\r\r\n            self.sql_session.commit()\r\r\n            print(\"commit\")\r\r\n        except Exception as e:\r\r\n            print(\"exception rollback\", e)\r\r\n            self.sql_session.rollback()\r\r\n        finally:\r\r\n            print(\"finally close\")\r\r\n            self.sql_session.close()\r\r\n\r\r\n\r\r\nif __name__ == '__main__':\r\r\n    unittest.main()\r\r\n\r\r\n```\r\r\n\r\r\n\r\r\n\r\r\n\r\r\n\r\n\r\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/dushitaoyuan/py_mybatis.git",
            "keywords": "mybatis py_mybatis dynamic sql orm",
            "license": "Apache 2.0",
            "maintainer": "",
            "maintainer_email": "",
            "name": "py-myb",
            "package_url": "https://pypi.org/project/py-myb/",
            "platform": "",
            "project_url": "https://pypi.org/project/py-myb/",
            "project_urls": {
                "Homepage": "https://github.com/dushitaoyuan/py_mybatis.git"
            },
            "release_url": "https://pypi.org/project/py-myb/0.1.0/",
            "requires_dist": null,
            "requires_python": "",
            "summary": "python mybatis",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 12708993,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "0e1590d3698c4f1670c1c02ed9e5aa1a",
                    "sha256": "05da4cf8506624412a0c6ea8a62e0bdf928addabe55420ea5239d6dcfa6aeaac"
                },
                "downloads": -1,
                "filename": "py_myb-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "0e1590d3698c4f1670c1c02ed9e5aa1a",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": null,
                "size": 22355,
                "upload_time": "2022-01-27T11:10:09",
                "upload_time_iso_8601": "2022-01-27T11:10:09.840537Z",
                "url": "https://files.pythonhosted.org/packages/8c/84/d862bba14e57e7ce2fba66b73ebffe626f26da365336517ecc7b289048cc/py_myb-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}