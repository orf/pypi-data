{
    "0.1.0": {
        "info": {
            "author": "Mart\u00edn Gait\u00e1n",
            "author_email": "gaitan@gmail.com",
            "bugtrack_url": null,
            "classifiers": [
                "Development Status :: 4 - Beta",
                "Framework :: Pytest",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3 :: Only",
                "Programming Language :: Python :: 3.5",
                "Programming Language :: Python :: 3.6",
                "Programming Language :: Python :: 3.7",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: Implementation :: CPython",
                "Programming Language :: Python :: Implementation :: PyPy",
                "Topic :: Software Development :: Testing"
            ],
            "description": "# pytest-leak-finder\n\nYou have a test that passes when executed alone but fails when running its suite. What's happening? My two cents that some previous test keeps the things dirty. But wich one/s, maybe the previous are a lot, right? \n\nThis plugin helps to find a culprit by doing a [binary search](https://en.wikipedia.org/wiki/Binary_search_algorithm) (*alla* [git bisect](https://git-scm.com/docs/git-bisect)) on the collected tests before the target. \n\nThe first time it will collect the first half of those tests plus the failing one (the target). If the target fails, we are in a good path, so, a new bisect is applied. When the target doesn't fail, it changes the \"half\" to bisect the next time. \n\nConsider the following example:\n\n```\n$ pytest -v tests/test_demo.py \ncollected 6 items                                                                                                                                            \ntests/test_demo.py::test1 PASSED                                                                             \ntests/test_demo.py::test2 PASSED                                                                              \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test4 PASSED                                                                             \ntests/test_demo.py::test5 FAILED                                                                              \ntests/test_demo.py::test6 PASSED \n\n$ pytest -v --lf tests/test_demo.py \ncollected 6 items / 5 deselected / 1 selected                                                                                                                \ntests/test_demo.py::test5 PASSED \n\n```\n\nYou can use leak finder \n\nOn the first run will set the failed test as the \"target\" and will stop the session.  \n\n```\n$ pytest -v --leak-finder tests/test_demo.py \ncollected 6 items\n\ntests/test_demo.py::test1 PASSED                                                                              \ntests/test_demo.py::test2 PASSED                                                                              \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test4 PASSED                                                                              \ntests/test_demo.py::test5 FAILED\nLeak finder: target set to tests/test_demo.py::test5\n```\n\nThe second execution will run the first half of the tests passed before the target (let's say the half \"A\", composed by `test1` and `test2`). \n\nIf the target still fail, that path is followed deeper by dividing again. But in this example \nit passes, so we'll discard it. \n\n```\n$ pytest -v --leak-finder \ncollected 6 items / 3 deselected / 3 selected                                                                                                                \ntests/test_demo.py::test1 PASSED                                                                              \ntests/test_demo.py::test2 PASSED                                                                              \ntests/test_demo.py::test5 PASSED\nLeak finder: We reach the target and nothing failed. Let's change the last half.\n```\n\nA new execution takes the group \"B\", i.e. `test3` and `test4`.\n\n```\n$ pytest -v --leak-finder \ncollected 6 items / 3 deselected / 3 selected                                                                                                                \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test4 PASSED                                                                              \ntests/test_demo.py::test5 FAILED\nLeak finder: The group selected still fails. Let's do a new partition.\n```\n\n\nLastly, a new partition is done and the group \"B-A\" is taken, i.e. `test3`\n\n\n```\n$ pytest -v --leak-finder \ncollected 6 items / 3 deselected / 3 selected                                                                                                                \ntests/test_demo.py::test3 PASSED                                                                              \ntests/test_demo.py::test5 FAILED\nLeak finder: The group selected still fails. Let's do a new partition.\n```\n\n\nAnd there is it, `test3` is the problematic test we were looking for! \n\n\n\n",
            "description_content_type": "text/markdown",
            "docs_url": null,
            "download_url": "",
            "downloads": {
                "last_day": -1,
                "last_month": -1,
                "last_week": -1
            },
            "home_page": "https://github.com/mgaitan/pytest-leak_finder",
            "keywords": "",
            "license": "MIT",
            "maintainer": "Mart\u00edn Gait\u00e1n",
            "maintainer_email": "gaitan@gmail.com",
            "name": "pytest-leak-finder",
            "package_url": "https://pypi.org/project/pytest-leak-finder/",
            "platform": null,
            "project_url": "https://pypi.org/project/pytest-leak-finder/",
            "project_urls": {
                "Homepage": "https://github.com/mgaitan/pytest-leak_finder"
            },
            "release_url": "https://pypi.org/project/pytest-leak-finder/0.1.0/",
            "requires_dist": [
                "pytest (>=3.5.0)"
            ],
            "requires_python": ">=3.5",
            "summary": "Find the previous test that makes another to fail",
            "version": "0.1.0",
            "yanked": false,
            "yanked_reason": null
        },
        "last_serial": 13541168,
        "urls": [
            {
                "comment_text": "",
                "digests": {
                    "md5": "7e7586150bd6e672f5024b826986b6c8",
                    "sha256": "a5202fc0947696123a9b32960be916659a170aa588aea4d1747a49bf337cf272"
                },
                "downloads": -1,
                "filename": "pytest_leak_finder-0.1.0-py3-none-any.whl",
                "has_sig": false,
                "md5_digest": "7e7586150bd6e672f5024b826986b6c8",
                "packagetype": "bdist_wheel",
                "python_version": "py3",
                "requires_python": ">=3.5",
                "size": 5013,
                "upload_time": "2022-04-17T23:59:49",
                "upload_time_iso_8601": "2022-04-17T23:59:49.087167Z",
                "url": "https://files.pythonhosted.org/packages/8f/0f/41dda462099b5e2fa011e6062d21718fbd69d27ecf0c70c7bae778231fd3/pytest_leak_finder-0.1.0-py3-none-any.whl",
                "yanked": false,
                "yanked_reason": null
            },
            {
                "comment_text": "",
                "digests": {
                    "md5": "8575b562c817a73b549764c3b2be17f1",
                    "sha256": "36e7825258e1a5bb043587b68edff6bf5151b819e29a40d43fa64a546004f0d0"
                },
                "downloads": -1,
                "filename": "pytest-leak-finder-0.1.0.tar.gz",
                "has_sig": false,
                "md5_digest": "8575b562c817a73b549764c3b2be17f1",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": ">=3.5",
                "size": 4855,
                "upload_time": "2022-04-18T00:00:10",
                "upload_time_iso_8601": "2022-04-18T00:00:10.811077Z",
                "url": "https://files.pythonhosted.org/packages/d0/bb/d60f41372edfba48630b95919fc13abfe78e77fc23f93f9698daa428659c/pytest-leak-finder-0.1.0.tar.gz",
                "yanked": false,
                "yanked_reason": null
            }
        ],
        "vulnerabilities": []
    }
}